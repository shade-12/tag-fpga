
led_task.elf:     file format elf32-littlenios2
led_task.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005b38 memsz 0x00005b38 flags r-x
    LOAD off    0x00007000 vaddr 0x08000000 paddr 0x00025b58 align 2**12
         filesz 0x00001b84 memsz 0x00001cd8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005928  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  08000000  00025b58  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac4  080000c0  00025c18  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  08001b84  000276dc  00008b84  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_sram  00000000  000276dc  000276dc  00008b84  2**0
                  CONTENTS
  7 .sdram_controller 00000000  08001cd8  08001cd8  00008b84  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008b84  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000009d8  00000000  00000000  00008ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016965  00000000  00000000  00009580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006044  00000000  00000000  0001fee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006beb  00000000  00000000  00025f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016d4  00000000  00000000  0002cb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028e8  00000000  00000000  0002e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004721  00000000  00000000  00030ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000351f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000328  00000000  00000000  00035238  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00037db6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037db9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00037dc5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00037dc6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00037dc7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00037dcb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00037dcf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00037dd3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00037dde  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00037de9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00037df4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  00037e03  2**0
                  CONTENTS, READONLY
 30 .jdi          00007b07  00000000  00000000  00037e20  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     002c69e8  00000000  00000000  0003f927  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
080000c0 l    d  .rwdata	00000000 .rwdata
08001b84 l    d  .bss	00000000 .bss
000276dc l    d  .onchip_sram	00000000 .onchip_sram
08001cd8 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/tag2/de1_software/nios/leds_rotation/led_task_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 led_task.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
080000c0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021e30 l     F .text	00000008 __fp_lock
00021e38 l     F .text	00000008 __fp_unlock
00021e4c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022ed0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022ff8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023024 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002312c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023228 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002330c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000234f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08001b74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000237a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000238f4 l     F .text	00000038 alt_dev_reg
08000a94 l     O .rwdata	00001060 jtag_uart_0
08001af4 l     O .rwdata	0000002c bt_rs232_uart
08001b20 l     O .rwdata	0000002c wifi_rs232_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023bdc l     F .text	00000208 altera_avalon_jtag_uart_irq
00023de4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024a44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024c9c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024fa4 l     F .text	00000050 alt_get_errno
00024ff4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000259f8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
08001bac g     O .bss	00000004 alt_instruction_exception_handler
00022d9c g     F .text	00000054 _isatty_r
00023438 g     F .text	00000078 alt_main
00020388 g     F .text	000000b8 _puts_r
08001bd8 g     O .bss	00000100 alt_irq
00022df0 g     F .text	0000005c _lseek_r
00025c18 g       *ABS*	00000000 __flash_rwdata_start
08001cd8 g       *ABS*	00000000 __alt_heap_start
00022b1c g     F .text	0000005c __sseek
00022194 g     F .text	00000010 __sinit
00021fec g     F .text	00000078 __sfmoreglue
000234d0 g     F .text	00000020 __malloc_unlock
0002462c g     F .text	00000090 alt_up_rs232_read_fd
00021358 g     F .text	0000015c memmove
0002217c g     F .text	00000018 _cleanup
000253e4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022d44 g     F .text	00000058 _fstat_r
08001b90 g     O .bss	00000004 errno
00022a98 g     F .text	00000008 __seofread
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08001b98 g     O .bss	00000004 alt_argv
08009b4c g       *ABS*	00000000 _gp
00023774 g     F .text	00000030 usleep
08000914 g     O .rwdata	00000180 alt_fd_list
00024bf0 g     F .text	00000090 alt_find_dev
00021220 g     F .text	00000138 memcpy
00021e40 g     F .text	0000000c _cleanup_r
00024d7c g     F .text	00000078 alt_io_redirect
00025b58 g       *ABS*	00000000 __DTOR_END__
000245b8 g     F .text	00000074 alt_up_rs232_read_data
00020440 g     F .text	00000014 puts
000255ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023fe0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00025b14 g     F .text	00000008 .hidden __udivsi3
0002317c g     F .text	000000ac isatty
08001b8c g     O .bss	00000004 __malloc_top_pad
000204ec g     F .text	000004a4 __sfvwrite_r
00021a54 g     F .text	00000054 _sbrk_r
00022e4c g     F .text	0000005c _read_r
08001b6c g     O .rwdata	00000004 alt_max_fd
00024534 g     F .text	00000044 alt_up_rs232_check_parity
00022c30 g     F .text	00000100 _fclose_r
00021e00 g     F .text	00000030 fflush
08001b88 g     O .bss	00000004 __malloc_max_sbrked_mem
00024df4 g     F .text	000001b0 alt_irq_register
0002335c g     F .text	000000dc lseek
08001b4c g     O .rwdata	00000004 _global_impure_ptr
000214b4 g     F .text	000005a0 _realloc_r
08001cd8 g       *ABS*	00000000 __bss_end
000252e0 g     F .text	00000104 alt_tick
000221b4 g     F .text	00000018 __fp_lock_all
00020000 g       *ABS*	00000000 __alt_mem_onchip_sram
00025248 g     F .text	00000098 alt_alarm_stop
08001ba0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
080008ec g     O .rwdata	00000028 alt_dev_null
00024a28 g     F .text	0000001c alt_dcache_flush_all
08001b84 g       *ABS*	00000000 __ram_rwdata_end
08001b64 g     O .rwdata	00000008 alt_dev_list
000237f4 g     F .text	00000100 write
080000c0 g       *ABS*	00000000 __ram_rodata_end
00023074 g     F .text	000000b8 fstat
000246bc g     F .text	00000094 alt_up_rs232_write_fd
00025b1c g     F .text	00000008 .hidden __umodsi3
08001cd8 g       *ABS*	00000000 end
00023b24 g     F .text	000000b8 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00025b58 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
000241ec g     F .text	00000218 altera_avalon_jtag_uart_write
000221a4 g     F .text	00000004 __sfp_lock_acquire
00021138 g     F .text	000000e8 memchr
00022308 g     F .text	000002f0 _free_r
00025864 g     F .text	00000194 __call_exitprocs
08001b54 g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
08001ba4 g     O .bss	00000004 _alt_tick_rate
08001ba8 g     O .bss	00000004 _alt_nticks
00023540 g     F .text	00000104 read
00023960 g     F .text	00000060 alt_sys_init
00025750 g     F .text	00000114 __register_exitproc
000244f8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00023e8c g     F .text	00000068 altera_avalon_jtag_uart_close
00022ea8 g     F .text	00000028 .hidden __mulsi3
080000c0 g       *ABS*	00000000 __ram_rwdata_start
08000000 g       *ABS*	00000000 __ram_rodata_start
08001bb0 g     O .bss	00000028 __malloc_current_mallinfo
0002026c g     F .text	000000d8 _Z8led_taskv
000239c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025518 g     F .text	000000d4 alt_get_fd
000248d0 g     F .text	00000158 alt_busy_sleep
00022bdc g     F .text	00000054 _close_r
000256d4 g     F .text	0000007c memcmp
00023a80 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08001cd8 g       *ABS*	00000000 __alt_stack_base
00023ad0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00021aa8 g     F .text	00000130 __swsetup_r
00022064 g     F .text	00000118 __sfp
080004e4 g     O .rwdata	00000408 __malloc_av_
000221b0 g     F .text	00000004 __sinit_lock_release
00022a44 g     F .text	00000054 __sread
0002445c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00025404 g     F .text	00000114 alt_find_file
00024a94 g     F .text	000000a4 alt_dev_llist_insert
000234b0 g     F .text	00000020 __malloc_lock
000236c4 g     F .text	000000b0 sbrk
00021bd8 g     F .text	00000228 _fflush_r
08001b84 g       *ABS*	00000000 __bss_start
00022920 g     F .text	00000124 memset
00020344 g     F .text	00000044 main
08001b9c g     O .bss	00000004 alt_envp
08001b84 g     O .bss	00000004 __malloc_max_total_mem
00023a20 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022b78 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
00022d30 g     F .text	00000014 fclose
00020990 g     F .text	000007a8 _malloc_r
08001b70 g     O .rwdata	00000004 alt_errno
000225f8 g     F .text	000000b8 _fwalk
00025a64 g     F .text	00000054 .hidden __divsi3
000221e4 g     F .text	00000124 _malloc_trim_r
00025b58 g       *ABS*	00000000 __CTOR_END__
00025b58 g       *ABS*	00000000 __flash_rodata_start
00025b58 g       *ABS*	00000000 __DTOR_LIST__
00024750 g     F .text	00000040 alt_up_rs232_open_dev
0002392c g     F .text	00000034 alt_irq_init
00023644 g     F .text	00000080 alt_release_fd
00025688 g     F .text	00000014 atexit
00022b80 g     F .text	0000005c _write_r
08001b50 g     O .rwdata	00000004 _impure_ptr
08001b94 g     O .bss	00000004 alt_argc
00024b94 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000221cc g     F .text	00000018 __fp_unlock_all
08001b5c g     O .rwdata	00000008 alt_fs_list
00024404 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00024578 g     F .text	00000040 alt_up_rs232_write_data
00020020 g       *ABS*	00000000 __ram_exceptions_start
08001b84 g       *ABS*	00000000 _edata
08001cd8 g       *ABS*	00000000 _end
00020230 g       *ABS*	00000000 __ram_exceptions_end
00023ef4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00022aa0 g     F .text	0000007c __swrite
08001b58 g     O .rwdata	00000004 __malloc_trim_threshold
0002569c g     F .text	00000038 exit
000226b0 g     F .text	000000b8 _fwalk_reent
00025ab8 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000221a8 g     F .text	00000004 __sfp_lock_release
00025b24 g     F .text	00000034 _exit
00024790 g     F .text	00000140 alt_alarm_start
00022768 g     F .text	000001b8 __smakebuf_r
00020454 g     F .text	00000098 strlen
000250e8 g     F .text	00000160 open
00024c80 g     F .text	0000001c alt_icache_flush_all
08001b78 g     O .rwdata	00000004 alt_priority_mask
08001b7c g     O .rwdata	00000008 alt_alarm_list
00024b38 g     F .text	0000005c _do_ctors
000244b8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00022f20 g     F .text	000000d8 close
0002328c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
000221ac g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	00820034 	movhi	r2,2048
   20140:	1086f604 	addi	r2,r2,7128
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00820034 	movhi	r2,2048
   20158:	1086f604 	addi	r2,r2,7128
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	e17ffd17 	ldw	r5,-12(fp)
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a01817 	ldw	r2,-32672(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a01817 	ldw	r2,-32672(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	1809883a 	mov	r4,r3
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	e1bffe17 	ldw	r6,-8(fp)
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   2023c:	d6a6d314 	ori	gp,gp,39756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   20244:	1086e114 	ori	r2,r2,7044

    movhi r3, %hi(__bss_end)
   20248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   2024c:	18c73614 	ori	r3,r3,7384

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xf4020254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	002328c0 	call	2328c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00234380 	call	23438 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xf4020268>

0002026c <_Z8led_taskv>:

#define LEDS_MAX_ITERATION (1000)
#define SLEEP_DELAY_US (100 * 1000)


int led_task() {
   2026c:	defff904 	addi	sp,sp,-28
   20270:	dfc00615 	stw	ra,24(sp)
   20274:	df000515 	stw	fp,20(sp)
   20278:	df000504 	addi	fp,sp,20
    int loop_count = 0;
   2027c:	e03ffb15 	stw	zero,-20(fp)
    int leds_mask = 0x01;
   20280:	00800044 	movi	r2,1
   20284:	e0bffc15 	stw	r2,-16(fp)

    // 0 - Left
    // 1 - Right
    int led_direction = 0;
   20288:	e03ffd15 	stw	zero,-12(fp)

    while (loop_count < LEDS_MAX_ITERATION) {
   2028c:	00002406 	br	20320 <_Z8led_taskv+0xb4>
        uint32_t switches_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   20290:	00800804 	movi	r2,32
   20294:	10800037 	ldwio	r2,0(r2)
   20298:	e0bffe15 	stw	r2,-8(fp)
        uint32_t leds_value = ~leds_mask;
   2029c:	e0bffc17 	ldw	r2,-16(fp)
   202a0:	0084303a 	nor	r2,zero,r2
   202a4:	e0bfff15 	stw	r2,-4(fp)

        // only turn on leds which have their corresponding switch enabled
        IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds_value & switches_value);
   202a8:	e0ffff17 	ldw	r3,-4(fp)
   202ac:	e0bffe17 	ldw	r2,-8(fp)
   202b0:	1884703a 	and	r2,r3,r2
   202b4:	1007883a 	mov	r3,r2
   202b8:	00840404 	movi	r2,4112
   202bc:	10c00035 	stwio	r3,0(r2)

        usleep(SLEEP_DELAY_US);
   202c0:	010000b4 	movhi	r4,2
   202c4:	2121a804 	addi	r4,r4,-31072
   202c8:	00237740 	call	23774 <usleep>

        if (led_direction == 0) {
   202cc:	e0bffd17 	ldw	r2,-12(fp)
   202d0:	1000091e 	bne	r2,zero,202f8 <_Z8led_taskv+0x8c>
            leds_mask <<= 1;
   202d4:	e0bffc17 	ldw	r2,-16(fp)
   202d8:	1085883a 	add	r2,r2,r2
   202dc:	e0bffc15 	stw	r2,-16(fp)
            if (leds_mask == (0x01 << (LEDS_DATA_WIDTH - 1))) {
   202e0:	e0bffc17 	ldw	r2,-16(fp)
   202e4:	10808018 	cmpnei	r2,r2,512
   202e8:	10000d1e 	bne	r2,zero,20320 <_Z8led_taskv+0xb4>
                led_direction = 1;
   202ec:	00800044 	movi	r2,1
   202f0:	e0bffd15 	stw	r2,-12(fp)
   202f4:	00000a06 	br	20320 <_Z8led_taskv+0xb4>
            }
        } else {
            leds_mask >>= 1;
   202f8:	e0bffc17 	ldw	r2,-16(fp)
   202fc:	1005d07a 	srai	r2,r2,1
   20300:	e0bffc15 	stw	r2,-16(fp)
            if (leds_mask == 0x01) {
   20304:	e0bffc17 	ldw	r2,-16(fp)
   20308:	10800058 	cmpnei	r2,r2,1
   2030c:	1000041e 	bne	r2,zero,20320 <_Z8led_taskv+0xb4>
                led_direction = 0;
   20310:	e03ffd15 	stw	zero,-12(fp)
                loop_count++;
   20314:	e0bffb17 	ldw	r2,-20(fp)
   20318:	10800044 	addi	r2,r2,1
   2031c:	e0bffb15 	stw	r2,-20(fp)

    // 0 - Left
    // 1 - Right
    int led_direction = 0;

    while (loop_count < LEDS_MAX_ITERATION) {
   20320:	e0bffb17 	ldw	r2,-20(fp)
   20324:	1080fa10 	cmplti	r2,r2,1000
   20328:	103fd91e 	bne	r2,zero,20290 <__alt_data_end+0xf4020290>
                loop_count++;
            }
        }
    }

    return 0;
   2032c:	0005883a 	mov	r2,zero
   20330:	e037883a 	mov	sp,fp
   20334:	dfc00117 	ldw	ra,4(sp)
   20338:	df000017 	ldw	fp,0(sp)
   2033c:	dec00204 	addi	sp,sp,8
   20340:	f800283a 	ret

00020344 <main>:
#include <stdio.h>
#include "../../src/terasic_includes.h"
#include "../../src/tasks.h"

int main()
{
   20344:	defffe04 	addi	sp,sp,-8
   20348:	dfc00115 	stw	ra,4(sp)
   2034c:	df000015 	stw	fp,0(sp)
   20350:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION: LED TEST\n");
   20354:	01020034 	movhi	r4,2048
   20358:	21000004 	addi	r4,r4,0
   2035c:	00204400 	call	20440 <puts>
  printf("===========================================\n\n");
   20360:	01020034 	movhi	r4,2048
   20364:	21000a04 	addi	r4,r4,40
   20368:	00204400 	call	20440 <puts>

  led_task();
   2036c:	002026c0 	call	2026c <_Z8led_taskv>

  return 0;
   20370:	0005883a 	mov	r2,zero
}
   20374:	e037883a 	mov	sp,fp
   20378:	dfc00117 	ldw	ra,4(sp)
   2037c:	df000017 	ldw	fp,0(sp)
   20380:	dec00204 	addi	sp,sp,8
   20384:	f800283a 	ret

00020388 <_puts_r>:
   20388:	defff604 	addi	sp,sp,-40
   2038c:	dc000715 	stw	r16,28(sp)
   20390:	2021883a 	mov	r16,r4
   20394:	2809883a 	mov	r4,r5
   20398:	dc400815 	stw	r17,32(sp)
   2039c:	dfc00915 	stw	ra,36(sp)
   203a0:	2823883a 	mov	r17,r5
   203a4:	00204540 	call	20454 <strlen>
   203a8:	00c20034 	movhi	r3,2048
   203ac:	18c6d404 	addi	r3,r3,6992
   203b0:	18c00017 	ldw	r3,0(r3)
   203b4:	11000044 	addi	r4,r2,1
   203b8:	d8800115 	stw	r2,4(sp)
   203bc:	18c00217 	ldw	r3,8(r3)
   203c0:	01420034 	movhi	r5,2048
   203c4:	29401604 	addi	r5,r5,88
   203c8:	1880030b 	ldhu	r2,12(r3)
   203cc:	d9400215 	stw	r5,8(sp)
   203d0:	d9000615 	stw	r4,24(sp)
   203d4:	01400044 	movi	r5,1
   203d8:	01000084 	movi	r4,2
   203dc:	d9000515 	stw	r4,20(sp)
   203e0:	dc400015 	stw	r17,0(sp)
   203e4:	d9400315 	stw	r5,12(sp)
   203e8:	dec00415 	stw	sp,16(sp)
   203ec:	1108000c 	andi	r4,r2,8192
   203f0:	2000061e 	bne	r4,zero,2040c <_puts_r+0x84>
   203f4:	19401917 	ldw	r5,100(r3)
   203f8:	0137ffc4 	movi	r4,-8193
   203fc:	10880014 	ori	r2,r2,8192
   20400:	2908703a 	and	r4,r5,r4
   20404:	1880030d 	sth	r2,12(r3)
   20408:	19001915 	stw	r4,100(r3)
   2040c:	81400217 	ldw	r5,8(r16)
   20410:	8009883a 	mov	r4,r16
   20414:	d9800404 	addi	r6,sp,16
   20418:	00204ec0 	call	204ec <__sfvwrite_r>
   2041c:	1000061e 	bne	r2,zero,20438 <_puts_r+0xb0>
   20420:	00800284 	movi	r2,10
   20424:	dfc00917 	ldw	ra,36(sp)
   20428:	dc400817 	ldw	r17,32(sp)
   2042c:	dc000717 	ldw	r16,28(sp)
   20430:	dec00a04 	addi	sp,sp,40
   20434:	f800283a 	ret
   20438:	00bfffc4 	movi	r2,-1
   2043c:	003ff906 	br	20424 <__alt_data_end+0xf4020424>

00020440 <puts>:
   20440:	00820034 	movhi	r2,2048
   20444:	1086d404 	addi	r2,r2,6992
   20448:	200b883a 	mov	r5,r4
   2044c:	11000017 	ldw	r4,0(r2)
   20450:	00203881 	jmpi	20388 <_puts_r>

00020454 <strlen>:
   20454:	208000cc 	andi	r2,r4,3
   20458:	10002026 	beq	r2,zero,204dc <strlen+0x88>
   2045c:	20800007 	ldb	r2,0(r4)
   20460:	10002026 	beq	r2,zero,204e4 <strlen+0x90>
   20464:	2005883a 	mov	r2,r4
   20468:	00000206 	br	20474 <strlen+0x20>
   2046c:	10c00007 	ldb	r3,0(r2)
   20470:	18001826 	beq	r3,zero,204d4 <strlen+0x80>
   20474:	10800044 	addi	r2,r2,1
   20478:	10c000cc 	andi	r3,r2,3
   2047c:	183ffb1e 	bne	r3,zero,2046c <__alt_data_end+0xf402046c>
   20480:	10c00017 	ldw	r3,0(r2)
   20484:	01ffbff4 	movhi	r7,65279
   20488:	39ffbfc4 	addi	r7,r7,-257
   2048c:	00ca303a 	nor	r5,zero,r3
   20490:	01a02074 	movhi	r6,32897
   20494:	19c7883a 	add	r3,r3,r7
   20498:	31a02004 	addi	r6,r6,-32640
   2049c:	1946703a 	and	r3,r3,r5
   204a0:	1986703a 	and	r3,r3,r6
   204a4:	1800091e 	bne	r3,zero,204cc <strlen+0x78>
   204a8:	10800104 	addi	r2,r2,4
   204ac:	10c00017 	ldw	r3,0(r2)
   204b0:	19cb883a 	add	r5,r3,r7
   204b4:	00c6303a 	nor	r3,zero,r3
   204b8:	28c6703a 	and	r3,r5,r3
   204bc:	1986703a 	and	r3,r3,r6
   204c0:	183ff926 	beq	r3,zero,204a8 <__alt_data_end+0xf40204a8>
   204c4:	00000106 	br	204cc <strlen+0x78>
   204c8:	10800044 	addi	r2,r2,1
   204cc:	10c00007 	ldb	r3,0(r2)
   204d0:	183ffd1e 	bne	r3,zero,204c8 <__alt_data_end+0xf40204c8>
   204d4:	1105c83a 	sub	r2,r2,r4
   204d8:	f800283a 	ret
   204dc:	2005883a 	mov	r2,r4
   204e0:	003fe706 	br	20480 <__alt_data_end+0xf4020480>
   204e4:	0005883a 	mov	r2,zero
   204e8:	f800283a 	ret

000204ec <__sfvwrite_r>:
   204ec:	30800217 	ldw	r2,8(r6)
   204f0:	10004526 	beq	r2,zero,20608 <__sfvwrite_r+0x11c>
   204f4:	28c0030b 	ldhu	r3,12(r5)
   204f8:	defff404 	addi	sp,sp,-48
   204fc:	dd400715 	stw	r21,28(sp)
   20500:	dcc00515 	stw	r19,20(sp)
   20504:	dc000215 	stw	r16,8(sp)
   20508:	dfc00b15 	stw	ra,44(sp)
   2050c:	df000a15 	stw	fp,40(sp)
   20510:	ddc00915 	stw	r23,36(sp)
   20514:	dd800815 	stw	r22,32(sp)
   20518:	dd000615 	stw	r20,24(sp)
   2051c:	dc800415 	stw	r18,16(sp)
   20520:	dc400315 	stw	r17,12(sp)
   20524:	1880020c 	andi	r2,r3,8
   20528:	2821883a 	mov	r16,r5
   2052c:	202b883a 	mov	r21,r4
   20530:	3027883a 	mov	r19,r6
   20534:	10002526 	beq	r2,zero,205cc <__sfvwrite_r+0xe0>
   20538:	28800417 	ldw	r2,16(r5)
   2053c:	10002326 	beq	r2,zero,205cc <__sfvwrite_r+0xe0>
   20540:	1880008c 	andi	r2,r3,2
   20544:	9c400017 	ldw	r17,0(r19)
   20548:	10003126 	beq	r2,zero,20610 <__sfvwrite_r+0x124>
   2054c:	0029883a 	mov	r20,zero
   20550:	0025883a 	mov	r18,zero
   20554:	05810004 	movi	r22,1024
   20558:	a00d883a 	mov	r6,r20
   2055c:	a809883a 	mov	r4,r21
   20560:	90002526 	beq	r18,zero,205f8 <__sfvwrite_r+0x10c>
   20564:	900f883a 	mov	r7,r18
   20568:	81400717 	ldw	r5,28(r16)
   2056c:	b480012e 	bgeu	r22,r18,20574 <__sfvwrite_r+0x88>
   20570:	01c10004 	movi	r7,1024
   20574:	80800917 	ldw	r2,36(r16)
   20578:	103ee83a 	callr	r2
   2057c:	0080510e 	bge	zero,r2,206c4 <__sfvwrite_r+0x1d8>
   20580:	98c00217 	ldw	r3,8(r19)
   20584:	a0a9883a 	add	r20,r20,r2
   20588:	90a5c83a 	sub	r18,r18,r2
   2058c:	1885c83a 	sub	r2,r3,r2
   20590:	98800215 	stw	r2,8(r19)
   20594:	103ff01e 	bne	r2,zero,20558 <__alt_data_end+0xf4020558>
   20598:	0005883a 	mov	r2,zero
   2059c:	dfc00b17 	ldw	ra,44(sp)
   205a0:	df000a17 	ldw	fp,40(sp)
   205a4:	ddc00917 	ldw	r23,36(sp)
   205a8:	dd800817 	ldw	r22,32(sp)
   205ac:	dd400717 	ldw	r21,28(sp)
   205b0:	dd000617 	ldw	r20,24(sp)
   205b4:	dcc00517 	ldw	r19,20(sp)
   205b8:	dc800417 	ldw	r18,16(sp)
   205bc:	dc400317 	ldw	r17,12(sp)
   205c0:	dc000217 	ldw	r16,8(sp)
   205c4:	dec00c04 	addi	sp,sp,48
   205c8:	f800283a 	ret
   205cc:	a809883a 	mov	r4,r21
   205d0:	800b883a 	mov	r5,r16
   205d4:	0021aa80 	call	21aa8 <__swsetup_r>
   205d8:	80c0030b 	ldhu	r3,12(r16)
   205dc:	103fd826 	beq	r2,zero,20540 <__alt_data_end+0xf4020540>
   205e0:	18c01014 	ori	r3,r3,64
   205e4:	80c0030d 	sth	r3,12(r16)
   205e8:	00c00244 	movi	r3,9
   205ec:	00bfffc4 	movi	r2,-1
   205f0:	a8c00015 	stw	r3,0(r21)
   205f4:	003fe906 	br	2059c <__alt_data_end+0xf402059c>
   205f8:	8d000017 	ldw	r20,0(r17)
   205fc:	8c800117 	ldw	r18,4(r17)
   20600:	8c400204 	addi	r17,r17,8
   20604:	003fd406 	br	20558 <__alt_data_end+0xf4020558>
   20608:	0005883a 	mov	r2,zero
   2060c:	f800283a 	ret
   20610:	1880004c 	andi	r2,r3,1
   20614:	1000301e 	bne	r2,zero,206d8 <__sfvwrite_r+0x1ec>
   20618:	002f883a 	mov	r23,zero
   2061c:	0025883a 	mov	r18,zero
   20620:	90001c26 	beq	r18,zero,20694 <__sfvwrite_r+0x1a8>
   20624:	1880800c 	andi	r2,r3,512
   20628:	85000217 	ldw	r20,8(r16)
   2062c:	10006c26 	beq	r2,zero,207e0 <__sfvwrite_r+0x2f4>
   20630:	a02d883a 	mov	r22,r20
   20634:	95008536 	bltu	r18,r20,2084c <__sfvwrite_r+0x360>
   20638:	1881200c 	andi	r2,r3,1152
   2063c:	10009d1e 	bne	r2,zero,208b4 <__sfvwrite_r+0x3c8>
   20640:	81000017 	ldw	r4,0(r16)
   20644:	a039883a 	mov	fp,r20
   20648:	9029883a 	mov	r20,r18
   2064c:	b80b883a 	mov	r5,r23
   20650:	b00d883a 	mov	r6,r22
   20654:	00213580 	call	21358 <memmove>
   20658:	80c00217 	ldw	r3,8(r16)
   2065c:	81000017 	ldw	r4,0(r16)
   20660:	9005883a 	mov	r2,r18
   20664:	1f39c83a 	sub	fp,r3,fp
   20668:	258f883a 	add	r7,r4,r22
   2066c:	87000215 	stw	fp,8(r16)
   20670:	81c00015 	stw	r7,0(r16)
   20674:	98c00217 	ldw	r3,8(r19)
   20678:	b8af883a 	add	r23,r23,r2
   2067c:	90a5c83a 	sub	r18,r18,r2
   20680:	1d05c83a 	sub	r2,r3,r20
   20684:	98800215 	stw	r2,8(r19)
   20688:	103fc326 	beq	r2,zero,20598 <__alt_data_end+0xf4020598>
   2068c:	80c0030b 	ldhu	r3,12(r16)
   20690:	903fe41e 	bne	r18,zero,20624 <__alt_data_end+0xf4020624>
   20694:	8dc00017 	ldw	r23,0(r17)
   20698:	8c800117 	ldw	r18,4(r17)
   2069c:	8c400204 	addi	r17,r17,8
   206a0:	003fdf06 	br	20620 <__alt_data_end+0xf4020620>
   206a4:	00214b40 	call	214b4 <_realloc_r>
   206a8:	102d883a 	mov	r22,r2
   206ac:	1000a01e 	bne	r2,zero,20930 <__sfvwrite_r+0x444>
   206b0:	81400417 	ldw	r5,16(r16)
   206b4:	a809883a 	mov	r4,r21
   206b8:	00223080 	call	22308 <_free_r>
   206bc:	00800304 	movi	r2,12
   206c0:	a8800015 	stw	r2,0(r21)
   206c4:	80c0030b 	ldhu	r3,12(r16)
   206c8:	00bfffc4 	movi	r2,-1
   206cc:	18c01014 	ori	r3,r3,64
   206d0:	80c0030d 	sth	r3,12(r16)
   206d4:	003fb106 	br	2059c <__alt_data_end+0xf402059c>
   206d8:	0029883a 	mov	r20,zero
   206dc:	0011883a 	mov	r8,zero
   206e0:	0039883a 	mov	fp,zero
   206e4:	0025883a 	mov	r18,zero
   206e8:	90001f26 	beq	r18,zero,20768 <__sfvwrite_r+0x27c>
   206ec:	40006826 	beq	r8,zero,20890 <__sfvwrite_r+0x3a4>
   206f0:	a02f883a 	mov	r23,r20
   206f4:	9500012e 	bgeu	r18,r20,206fc <__sfvwrite_r+0x210>
   206f8:	902f883a 	mov	r23,r18
   206fc:	81000017 	ldw	r4,0(r16)
   20700:	80800417 	ldw	r2,16(r16)
   20704:	b82d883a 	mov	r22,r23
   20708:	81800217 	ldw	r6,8(r16)
   2070c:	81c00517 	ldw	r7,20(r16)
   20710:	1100022e 	bgeu	r2,r4,2071c <__sfvwrite_r+0x230>
   20714:	31c7883a 	add	r3,r6,r7
   20718:	1dc01816 	blt	r3,r23,2077c <__sfvwrite_r+0x290>
   2071c:	b9c03f16 	blt	r23,r7,2081c <__sfvwrite_r+0x330>
   20720:	80800917 	ldw	r2,36(r16)
   20724:	81400717 	ldw	r5,28(r16)
   20728:	a809883a 	mov	r4,r21
   2072c:	da000115 	stw	r8,4(sp)
   20730:	e00d883a 	mov	r6,fp
   20734:	103ee83a 	callr	r2
   20738:	102d883a 	mov	r22,r2
   2073c:	da000117 	ldw	r8,4(sp)
   20740:	00bfe00e 	bge	zero,r2,206c4 <__alt_data_end+0xf40206c4>
   20744:	a5a9c83a 	sub	r20,r20,r22
   20748:	a0001f26 	beq	r20,zero,207c8 <__sfvwrite_r+0x2dc>
   2074c:	98800217 	ldw	r2,8(r19)
   20750:	e5b9883a 	add	fp,fp,r22
   20754:	95a5c83a 	sub	r18,r18,r22
   20758:	15adc83a 	sub	r22,r2,r22
   2075c:	9d800215 	stw	r22,8(r19)
   20760:	b03f8d26 	beq	r22,zero,20598 <__alt_data_end+0xf4020598>
   20764:	903fe11e 	bne	r18,zero,206ec <__alt_data_end+0xf40206ec>
   20768:	8f000017 	ldw	fp,0(r17)
   2076c:	8c800117 	ldw	r18,4(r17)
   20770:	0011883a 	mov	r8,zero
   20774:	8c400204 	addi	r17,r17,8
   20778:	003fdb06 	br	206e8 <__alt_data_end+0xf40206e8>
   2077c:	180d883a 	mov	r6,r3
   20780:	e00b883a 	mov	r5,fp
   20784:	da000115 	stw	r8,4(sp)
   20788:	d8c00015 	stw	r3,0(sp)
   2078c:	00213580 	call	21358 <memmove>
   20790:	d8c00017 	ldw	r3,0(sp)
   20794:	80800017 	ldw	r2,0(r16)
   20798:	a809883a 	mov	r4,r21
   2079c:	800b883a 	mov	r5,r16
   207a0:	10c5883a 	add	r2,r2,r3
   207a4:	80800015 	stw	r2,0(r16)
   207a8:	d8c00015 	stw	r3,0(sp)
   207ac:	0021bd80 	call	21bd8 <_fflush_r>
   207b0:	d8c00017 	ldw	r3,0(sp)
   207b4:	da000117 	ldw	r8,4(sp)
   207b8:	103fc21e 	bne	r2,zero,206c4 <__alt_data_end+0xf40206c4>
   207bc:	182d883a 	mov	r22,r3
   207c0:	a5a9c83a 	sub	r20,r20,r22
   207c4:	a03fe11e 	bne	r20,zero,2074c <__alt_data_end+0xf402074c>
   207c8:	a809883a 	mov	r4,r21
   207cc:	800b883a 	mov	r5,r16
   207d0:	0021bd80 	call	21bd8 <_fflush_r>
   207d4:	103fbb1e 	bne	r2,zero,206c4 <__alt_data_end+0xf40206c4>
   207d8:	0011883a 	mov	r8,zero
   207dc:	003fdb06 	br	2074c <__alt_data_end+0xf402074c>
   207e0:	81000017 	ldw	r4,0(r16)
   207e4:	80800417 	ldw	r2,16(r16)
   207e8:	1100012e 	bgeu	r2,r4,207f0 <__sfvwrite_r+0x304>
   207ec:	a4805a36 	bltu	r20,r18,20958 <__sfvwrite_r+0x46c>
   207f0:	81c00517 	ldw	r7,20(r16)
   207f4:	91c01a36 	bltu	r18,r7,20860 <__sfvwrite_r+0x374>
   207f8:	80800917 	ldw	r2,36(r16)
   207fc:	81400717 	ldw	r5,28(r16)
   20800:	a809883a 	mov	r4,r21
   20804:	b80d883a 	mov	r6,r23
   20808:	103ee83a 	callr	r2
   2080c:	1029883a 	mov	r20,r2
   20810:	00bfac0e 	bge	zero,r2,206c4 <__alt_data_end+0xf40206c4>
   20814:	a005883a 	mov	r2,r20
   20818:	003f9606 	br	20674 <__alt_data_end+0xf4020674>
   2081c:	b80d883a 	mov	r6,r23
   20820:	e00b883a 	mov	r5,fp
   20824:	da000115 	stw	r8,4(sp)
   20828:	00213580 	call	21358 <memmove>
   2082c:	80800217 	ldw	r2,8(r16)
   20830:	80c00017 	ldw	r3,0(r16)
   20834:	da000117 	ldw	r8,4(sp)
   20838:	15c5c83a 	sub	r2,r2,r23
   2083c:	1def883a 	add	r23,r3,r23
   20840:	80800215 	stw	r2,8(r16)
   20844:	85c00015 	stw	r23,0(r16)
   20848:	003fbe06 	br	20744 <__alt_data_end+0xf4020744>
   2084c:	81000017 	ldw	r4,0(r16)
   20850:	9039883a 	mov	fp,r18
   20854:	9029883a 	mov	r20,r18
   20858:	902d883a 	mov	r22,r18
   2085c:	003f7b06 	br	2064c <__alt_data_end+0xf402064c>
   20860:	b80b883a 	mov	r5,r23
   20864:	900d883a 	mov	r6,r18
   20868:	00213580 	call	21358 <memmove>
   2086c:	80c00217 	ldw	r3,8(r16)
   20870:	80800017 	ldw	r2,0(r16)
   20874:	9029883a 	mov	r20,r18
   20878:	1c87c83a 	sub	r3,r3,r18
   2087c:	1485883a 	add	r2,r2,r18
   20880:	80800015 	stw	r2,0(r16)
   20884:	80c00215 	stw	r3,8(r16)
   20888:	9005883a 	mov	r2,r18
   2088c:	003f7906 	br	20674 <__alt_data_end+0xf4020674>
   20890:	e009883a 	mov	r4,fp
   20894:	01400284 	movi	r5,10
   20898:	900d883a 	mov	r6,r18
   2089c:	00211380 	call	21138 <memchr>
   208a0:	10003826 	beq	r2,zero,20984 <__sfvwrite_r+0x498>
   208a4:	10800044 	addi	r2,r2,1
   208a8:	1729c83a 	sub	r20,r2,fp
   208ac:	02000044 	movi	r8,1
   208b0:	003f8f06 	br	206f0 <__alt_data_end+0xf40206f0>
   208b4:	80800517 	ldw	r2,20(r16)
   208b8:	81400417 	ldw	r5,16(r16)
   208bc:	87000017 	ldw	fp,0(r16)
   208c0:	10a9883a 	add	r20,r2,r2
   208c4:	a085883a 	add	r2,r20,r2
   208c8:	1028d7fa 	srli	r20,r2,31
   208cc:	e179c83a 	sub	fp,fp,r5
   208d0:	e1000044 	addi	r4,fp,1
   208d4:	a085883a 	add	r2,r20,r2
   208d8:	1029d07a 	srai	r20,r2,1
   208dc:	2485883a 	add	r2,r4,r18
   208e0:	a00d883a 	mov	r6,r20
   208e4:	a080022e 	bgeu	r20,r2,208f0 <__sfvwrite_r+0x404>
   208e8:	1029883a 	mov	r20,r2
   208ec:	100d883a 	mov	r6,r2
   208f0:	18c1000c 	andi	r3,r3,1024
   208f4:	a809883a 	mov	r4,r21
   208f8:	183f6a26 	beq	r3,zero,206a4 <__alt_data_end+0xf40206a4>
   208fc:	300b883a 	mov	r5,r6
   20900:	00209900 	call	20990 <_malloc_r>
   20904:	102d883a 	mov	r22,r2
   20908:	103f6c26 	beq	r2,zero,206bc <__alt_data_end+0xf40206bc>
   2090c:	81400417 	ldw	r5,16(r16)
   20910:	1009883a 	mov	r4,r2
   20914:	e00d883a 	mov	r6,fp
   20918:	00212200 	call	21220 <memcpy>
   2091c:	8080030b 	ldhu	r2,12(r16)
   20920:	00fedfc4 	movi	r3,-1153
   20924:	10c4703a 	and	r2,r2,r3
   20928:	10802014 	ori	r2,r2,128
   2092c:	8080030d 	sth	r2,12(r16)
   20930:	b709883a 	add	r4,r22,fp
   20934:	a707c83a 	sub	r3,r20,fp
   20938:	85800415 	stw	r22,16(r16)
   2093c:	85000515 	stw	r20,20(r16)
   20940:	81000015 	stw	r4,0(r16)
   20944:	9039883a 	mov	fp,r18
   20948:	80c00215 	stw	r3,8(r16)
   2094c:	9029883a 	mov	r20,r18
   20950:	902d883a 	mov	r22,r18
   20954:	003f3d06 	br	2064c <__alt_data_end+0xf402064c>
   20958:	b80b883a 	mov	r5,r23
   2095c:	a00d883a 	mov	r6,r20
   20960:	00213580 	call	21358 <memmove>
   20964:	80800017 	ldw	r2,0(r16)
   20968:	a809883a 	mov	r4,r21
   2096c:	800b883a 	mov	r5,r16
   20970:	1505883a 	add	r2,r2,r20
   20974:	80800015 	stw	r2,0(r16)
   20978:	0021bd80 	call	21bd8 <_fflush_r>
   2097c:	103fa526 	beq	r2,zero,20814 <__alt_data_end+0xf4020814>
   20980:	003f5006 	br	206c4 <__alt_data_end+0xf40206c4>
   20984:	95000044 	addi	r20,r18,1
   20988:	02000044 	movi	r8,1
   2098c:	003f5806 	br	206f0 <__alt_data_end+0xf40206f0>

00020990 <_malloc_r>:
   20990:	defff504 	addi	sp,sp,-44
   20994:	dc800315 	stw	r18,12(sp)
   20998:	dfc00a15 	stw	ra,40(sp)
   2099c:	df000915 	stw	fp,36(sp)
   209a0:	ddc00815 	stw	r23,32(sp)
   209a4:	dd800715 	stw	r22,28(sp)
   209a8:	dd400615 	stw	r21,24(sp)
   209ac:	dd000515 	stw	r20,20(sp)
   209b0:	dcc00415 	stw	r19,16(sp)
   209b4:	dc400215 	stw	r17,8(sp)
   209b8:	dc000115 	stw	r16,4(sp)
   209bc:	288002c4 	addi	r2,r5,11
   209c0:	00c00584 	movi	r3,22
   209c4:	2025883a 	mov	r18,r4
   209c8:	18802a2e 	bgeu	r3,r2,20a74 <_malloc_r+0xe4>
   209cc:	047ffe04 	movi	r17,-8
   209d0:	1462703a 	and	r17,r2,r17
   209d4:	88009e16 	blt	r17,zero,20c50 <_malloc_r+0x2c0>
   209d8:	89409d36 	bltu	r17,r5,20c50 <_malloc_r+0x2c0>
   209dc:	00234b00 	call	234b0 <__malloc_lock>
   209e0:	00807dc4 	movi	r2,503
   209e4:	14402736 	bltu	r2,r17,20a84 <_malloc_r+0xf4>
   209e8:	8806d0fa 	srli	r3,r17,3
   209ec:	04c20034 	movhi	r19,2048
   209f0:	9cc13904 	addi	r19,r19,1252
   209f4:	18c5883a 	add	r2,r3,r3
   209f8:	1085883a 	add	r2,r2,r2
   209fc:	1085883a 	add	r2,r2,r2
   20a00:	9885883a 	add	r2,r19,r2
   20a04:	14000317 	ldw	r16,12(r2)
   20a08:	80814a26 	beq	r16,r2,20f34 <_malloc_r+0x5a4>
   20a0c:	80c00117 	ldw	r3,4(r16)
   20a10:	81000317 	ldw	r4,12(r16)
   20a14:	00bfff04 	movi	r2,-4
   20a18:	1884703a 	and	r2,r3,r2
   20a1c:	81400217 	ldw	r5,8(r16)
   20a20:	8085883a 	add	r2,r16,r2
   20a24:	10c00117 	ldw	r3,4(r2)
   20a28:	29000315 	stw	r4,12(r5)
   20a2c:	21400215 	stw	r5,8(r4)
   20a30:	18c00054 	ori	r3,r3,1
   20a34:	10c00115 	stw	r3,4(r2)
   20a38:	9009883a 	mov	r4,r18
   20a3c:	00234d00 	call	234d0 <__malloc_unlock>
   20a40:	80800204 	addi	r2,r16,8
   20a44:	dfc00a17 	ldw	ra,40(sp)
   20a48:	df000917 	ldw	fp,36(sp)
   20a4c:	ddc00817 	ldw	r23,32(sp)
   20a50:	dd800717 	ldw	r22,28(sp)
   20a54:	dd400617 	ldw	r21,24(sp)
   20a58:	dd000517 	ldw	r20,20(sp)
   20a5c:	dcc00417 	ldw	r19,16(sp)
   20a60:	dc800317 	ldw	r18,12(sp)
   20a64:	dc400217 	ldw	r17,8(sp)
   20a68:	dc000117 	ldw	r16,4(sp)
   20a6c:	dec00b04 	addi	sp,sp,44
   20a70:	f800283a 	ret
   20a74:	04400404 	movi	r17,16
   20a78:	89407536 	bltu	r17,r5,20c50 <_malloc_r+0x2c0>
   20a7c:	00234b00 	call	234b0 <__malloc_lock>
   20a80:	003fd906 	br	209e8 <__alt_data_end+0xf40209e8>
   20a84:	8806d27a 	srli	r3,r17,9
   20a88:	18007526 	beq	r3,zero,20c60 <_malloc_r+0x2d0>
   20a8c:	00800104 	movi	r2,4
   20a90:	10c0ef36 	bltu	r2,r3,20e50 <_malloc_r+0x4c0>
   20a94:	8806d1ba 	srli	r3,r17,6
   20a98:	19c00e04 	addi	r7,r3,56
   20a9c:	39cb883a 	add	r5,r7,r7
   20aa0:	04c20034 	movhi	r19,2048
   20aa4:	294b883a 	add	r5,r5,r5
   20aa8:	9cc13904 	addi	r19,r19,1252
   20aac:	294b883a 	add	r5,r5,r5
   20ab0:	994b883a 	add	r5,r19,r5
   20ab4:	2c000317 	ldw	r16,12(r5)
   20ab8:	2c000e26 	beq	r5,r16,20af4 <_malloc_r+0x164>
   20abc:	80800117 	ldw	r2,4(r16)
   20ac0:	01bfff04 	movi	r6,-4
   20ac4:	010003c4 	movi	r4,15
   20ac8:	1184703a 	and	r2,r2,r6
   20acc:	1447c83a 	sub	r3,r2,r17
   20ad0:	20c00716 	blt	r4,r3,20af0 <_malloc_r+0x160>
   20ad4:	1800650e 	bge	r3,zero,20c6c <_malloc_r+0x2dc>
   20ad8:	84000317 	ldw	r16,12(r16)
   20adc:	2c000526 	beq	r5,r16,20af4 <_malloc_r+0x164>
   20ae0:	80800117 	ldw	r2,4(r16)
   20ae4:	1184703a 	and	r2,r2,r6
   20ae8:	1447c83a 	sub	r3,r2,r17
   20aec:	20fff90e 	bge	r4,r3,20ad4 <__alt_data_end+0xf4020ad4>
   20af0:	39ffffc4 	addi	r7,r7,-1
   20af4:	38c00044 	addi	r3,r7,1
   20af8:	01820034 	movhi	r6,2048
   20afc:	9c000417 	ldw	r16,16(r19)
   20b00:	31813904 	addi	r6,r6,1252
   20b04:	32400204 	addi	r9,r6,8
   20b08:	82410326 	beq	r16,r9,20f18 <_malloc_r+0x588>
   20b0c:	81000117 	ldw	r4,4(r16)
   20b10:	00bfff04 	movi	r2,-4
   20b14:	208e703a 	and	r7,r4,r2
   20b18:	3c45c83a 	sub	r2,r7,r17
   20b1c:	010003c4 	movi	r4,15
   20b20:	2080ee16 	blt	r4,r2,20edc <_malloc_r+0x54c>
   20b24:	32400515 	stw	r9,20(r6)
   20b28:	32400415 	stw	r9,16(r6)
   20b2c:	1000510e 	bge	r2,zero,20c74 <_malloc_r+0x2e4>
   20b30:	00807fc4 	movi	r2,511
   20b34:	11c0ce36 	bltu	r2,r7,20e70 <_malloc_r+0x4e0>
   20b38:	3808d0fa 	srli	r4,r7,3
   20b3c:	01c00044 	movi	r7,1
   20b40:	30800117 	ldw	r2,4(r6)
   20b44:	210b883a 	add	r5,r4,r4
   20b48:	294b883a 	add	r5,r5,r5
   20b4c:	2009d0ba 	srai	r4,r4,2
   20b50:	294b883a 	add	r5,r5,r5
   20b54:	298b883a 	add	r5,r5,r6
   20b58:	2a000217 	ldw	r8,8(r5)
   20b5c:	3908983a 	sll	r4,r7,r4
   20b60:	81400315 	stw	r5,12(r16)
   20b64:	82000215 	stw	r8,8(r16)
   20b68:	2088b03a 	or	r4,r4,r2
   20b6c:	2c000215 	stw	r16,8(r5)
   20b70:	31000115 	stw	r4,4(r6)
   20b74:	44000315 	stw	r16,12(r8)
   20b78:	1805d0ba 	srai	r2,r3,2
   20b7c:	01400044 	movi	r5,1
   20b80:	288a983a 	sll	r5,r5,r2
   20b84:	21404336 	bltu	r4,r5,20c94 <_malloc_r+0x304>
   20b88:	2144703a 	and	r2,r4,r5
   20b8c:	10000a1e 	bne	r2,zero,20bb8 <_malloc_r+0x228>
   20b90:	00bfff04 	movi	r2,-4
   20b94:	294b883a 	add	r5,r5,r5
   20b98:	1886703a 	and	r3,r3,r2
   20b9c:	2144703a 	and	r2,r4,r5
   20ba0:	18c00104 	addi	r3,r3,4
   20ba4:	1000041e 	bne	r2,zero,20bb8 <_malloc_r+0x228>
   20ba8:	294b883a 	add	r5,r5,r5
   20bac:	2144703a 	and	r2,r4,r5
   20bb0:	18c00104 	addi	r3,r3,4
   20bb4:	103ffc26 	beq	r2,zero,20ba8 <__alt_data_end+0xf4020ba8>
   20bb8:	023fff04 	movi	r8,-4
   20bbc:	01c003c4 	movi	r7,15
   20bc0:	18c5883a 	add	r2,r3,r3
   20bc4:	1085883a 	add	r2,r2,r2
   20bc8:	1085883a 	add	r2,r2,r2
   20bcc:	9895883a 	add	r10,r19,r2
   20bd0:	52c00304 	addi	r11,r10,12
   20bd4:	1819883a 	mov	r12,r3
   20bd8:	5c000017 	ldw	r16,0(r11)
   20bdc:	59bffd04 	addi	r6,r11,-12
   20be0:	8180041e 	bne	r16,r6,20bf4 <_malloc_r+0x264>
   20be4:	0000ce06 	br	20f20 <_malloc_r+0x590>
   20be8:	2000d70e 	bge	r4,zero,20f48 <_malloc_r+0x5b8>
   20bec:	84000317 	ldw	r16,12(r16)
   20bf0:	8180cb26 	beq	r16,r6,20f20 <_malloc_r+0x590>
   20bf4:	80800117 	ldw	r2,4(r16)
   20bf8:	1204703a 	and	r2,r2,r8
   20bfc:	1449c83a 	sub	r4,r2,r17
   20c00:	393ff90e 	bge	r7,r4,20be8 <__alt_data_end+0xf4020be8>
   20c04:	80800317 	ldw	r2,12(r16)
   20c08:	80c00217 	ldw	r3,8(r16)
   20c0c:	89400054 	ori	r5,r17,1
   20c10:	81400115 	stw	r5,4(r16)
   20c14:	18800315 	stw	r2,12(r3)
   20c18:	10c00215 	stw	r3,8(r2)
   20c1c:	8463883a 	add	r17,r16,r17
   20c20:	9c400515 	stw	r17,20(r19)
   20c24:	9c400415 	stw	r17,16(r19)
   20c28:	20800054 	ori	r2,r4,1
   20c2c:	88800115 	stw	r2,4(r17)
   20c30:	8a400315 	stw	r9,12(r17)
   20c34:	8a400215 	stw	r9,8(r17)
   20c38:	8923883a 	add	r17,r17,r4
   20c3c:	89000015 	stw	r4,0(r17)
   20c40:	9009883a 	mov	r4,r18
   20c44:	00234d00 	call	234d0 <__malloc_unlock>
   20c48:	80800204 	addi	r2,r16,8
   20c4c:	003f7d06 	br	20a44 <__alt_data_end+0xf4020a44>
   20c50:	00800304 	movi	r2,12
   20c54:	90800015 	stw	r2,0(r18)
   20c58:	0005883a 	mov	r2,zero
   20c5c:	003f7906 	br	20a44 <__alt_data_end+0xf4020a44>
   20c60:	01401f84 	movi	r5,126
   20c64:	01c00fc4 	movi	r7,63
   20c68:	003f8d06 	br	20aa0 <__alt_data_end+0xf4020aa0>
   20c6c:	81000317 	ldw	r4,12(r16)
   20c70:	003f6a06 	br	20a1c <__alt_data_end+0xf4020a1c>
   20c74:	81c5883a 	add	r2,r16,r7
   20c78:	10c00117 	ldw	r3,4(r2)
   20c7c:	9009883a 	mov	r4,r18
   20c80:	18c00054 	ori	r3,r3,1
   20c84:	10c00115 	stw	r3,4(r2)
   20c88:	00234d00 	call	234d0 <__malloc_unlock>
   20c8c:	80800204 	addi	r2,r16,8
   20c90:	003f6c06 	br	20a44 <__alt_data_end+0xf4020a44>
   20c94:	9c000217 	ldw	r16,8(r19)
   20c98:	00bfff04 	movi	r2,-4
   20c9c:	85800117 	ldw	r22,4(r16)
   20ca0:	b0ac703a 	and	r22,r22,r2
   20ca4:	b4400336 	bltu	r22,r17,20cb4 <_malloc_r+0x324>
   20ca8:	b445c83a 	sub	r2,r22,r17
   20cac:	00c003c4 	movi	r3,15
   20cb0:	18805d16 	blt	r3,r2,20e28 <_malloc_r+0x498>
   20cb4:	05c20034 	movhi	r23,2048
   20cb8:	00820034 	movhi	r2,2048
   20cbc:	bdc6d504 	addi	r23,r23,6996
   20cc0:	1086e304 	addi	r2,r2,7052
   20cc4:	15400017 	ldw	r21,0(r2)
   20cc8:	b9000017 	ldw	r4,0(r23)
   20ccc:	00ffffc4 	movi	r3,-1
   20cd0:	858d883a 	add	r6,r16,r22
   20cd4:	8d6b883a 	add	r21,r17,r21
   20cd8:	20c0e426 	beq	r4,r3,2106c <_malloc_r+0x6dc>
   20cdc:	ad4403c4 	addi	r21,r21,4111
   20ce0:	00fc0004 	movi	r3,-4096
   20ce4:	a8ea703a 	and	r21,r21,r3
   20ce8:	9009883a 	mov	r4,r18
   20cec:	a80b883a 	mov	r5,r21
   20cf0:	d9800015 	stw	r6,0(sp)
   20cf4:	0021a540 	call	21a54 <_sbrk_r>
   20cf8:	00ffffc4 	movi	r3,-1
   20cfc:	1029883a 	mov	r20,r2
   20d00:	d9800017 	ldw	r6,0(sp)
   20d04:	10c0a426 	beq	r2,r3,20f98 <_malloc_r+0x608>
   20d08:	1180a236 	bltu	r2,r6,20f94 <_malloc_r+0x604>
   20d0c:	07020034 	movhi	fp,2048
   20d10:	e706ec04 	addi	fp,fp,7088
   20d14:	e0c00017 	ldw	r3,0(fp)
   20d18:	a8c7883a 	add	r3,r21,r3
   20d1c:	e0c00015 	stw	r3,0(fp)
   20d20:	3500da26 	beq	r6,r20,2108c <_malloc_r+0x6fc>
   20d24:	b9000017 	ldw	r4,0(r23)
   20d28:	00bfffc4 	movi	r2,-1
   20d2c:	2080e426 	beq	r4,r2,210c0 <_malloc_r+0x730>
   20d30:	a185c83a 	sub	r2,r20,r6
   20d34:	1885883a 	add	r2,r3,r2
   20d38:	e0800015 	stw	r2,0(fp)
   20d3c:	a0c001cc 	andi	r3,r20,7
   20d40:	1800b526 	beq	r3,zero,21018 <_malloc_r+0x688>
   20d44:	a0e9c83a 	sub	r20,r20,r3
   20d48:	00840204 	movi	r2,4104
   20d4c:	a5000204 	addi	r20,r20,8
   20d50:	10c7c83a 	sub	r3,r2,r3
   20d54:	a545883a 	add	r2,r20,r21
   20d58:	1083ffcc 	andi	r2,r2,4095
   20d5c:	18abc83a 	sub	r21,r3,r2
   20d60:	9009883a 	mov	r4,r18
   20d64:	a80b883a 	mov	r5,r21
   20d68:	0021a540 	call	21a54 <_sbrk_r>
   20d6c:	00ffffc4 	movi	r3,-1
   20d70:	10c0d026 	beq	r2,r3,210b4 <_malloc_r+0x724>
   20d74:	1507c83a 	sub	r3,r2,r20
   20d78:	a8c7883a 	add	r3,r21,r3
   20d7c:	18c00054 	ori	r3,r3,1
   20d80:	e0800017 	ldw	r2,0(fp)
   20d84:	9d000215 	stw	r20,8(r19)
   20d88:	a0c00115 	stw	r3,4(r20)
   20d8c:	a887883a 	add	r3,r21,r2
   20d90:	e0c00015 	stw	r3,0(fp)
   20d94:	84c00e26 	beq	r16,r19,20dd0 <_malloc_r+0x440>
   20d98:	018003c4 	movi	r6,15
   20d9c:	3580a02e 	bgeu	r6,r22,21020 <_malloc_r+0x690>
   20da0:	81400117 	ldw	r5,4(r16)
   20da4:	013ffe04 	movi	r4,-8
   20da8:	b0bffd04 	addi	r2,r22,-12
   20dac:	1104703a 	and	r2,r2,r4
   20db0:	2900004c 	andi	r4,r5,1
   20db4:	1108b03a 	or	r4,r2,r4
   20db8:	81000115 	stw	r4,4(r16)
   20dbc:	01400144 	movi	r5,5
   20dc0:	8089883a 	add	r4,r16,r2
   20dc4:	21400115 	stw	r5,4(r4)
   20dc8:	21400215 	stw	r5,8(r4)
   20dcc:	3080c036 	bltu	r6,r2,210d0 <_malloc_r+0x740>
   20dd0:	00820034 	movhi	r2,2048
   20dd4:	1086e204 	addi	r2,r2,7048
   20dd8:	11000017 	ldw	r4,0(r2)
   20ddc:	20c0012e 	bgeu	r4,r3,20de4 <_malloc_r+0x454>
   20de0:	10c00015 	stw	r3,0(r2)
   20de4:	00820034 	movhi	r2,2048
   20de8:	1086e104 	addi	r2,r2,7044
   20dec:	11000017 	ldw	r4,0(r2)
   20df0:	9c000217 	ldw	r16,8(r19)
   20df4:	20c0012e 	bgeu	r4,r3,20dfc <_malloc_r+0x46c>
   20df8:	10c00015 	stw	r3,0(r2)
   20dfc:	80c00117 	ldw	r3,4(r16)
   20e00:	00bfff04 	movi	r2,-4
   20e04:	1886703a 	and	r3,r3,r2
   20e08:	1c45c83a 	sub	r2,r3,r17
   20e0c:	1c400236 	bltu	r3,r17,20e18 <_malloc_r+0x488>
   20e10:	00c003c4 	movi	r3,15
   20e14:	18800416 	blt	r3,r2,20e28 <_malloc_r+0x498>
   20e18:	9009883a 	mov	r4,r18
   20e1c:	00234d00 	call	234d0 <__malloc_unlock>
   20e20:	0005883a 	mov	r2,zero
   20e24:	003f0706 	br	20a44 <__alt_data_end+0xf4020a44>
   20e28:	88c00054 	ori	r3,r17,1
   20e2c:	80c00115 	stw	r3,4(r16)
   20e30:	8463883a 	add	r17,r16,r17
   20e34:	10800054 	ori	r2,r2,1
   20e38:	9c400215 	stw	r17,8(r19)
   20e3c:	88800115 	stw	r2,4(r17)
   20e40:	9009883a 	mov	r4,r18
   20e44:	00234d00 	call	234d0 <__malloc_unlock>
   20e48:	80800204 	addi	r2,r16,8
   20e4c:	003efd06 	br	20a44 <__alt_data_end+0xf4020a44>
   20e50:	00800504 	movi	r2,20
   20e54:	10c0482e 	bgeu	r2,r3,20f78 <_malloc_r+0x5e8>
   20e58:	00801504 	movi	r2,84
   20e5c:	10c06836 	bltu	r2,r3,21000 <_malloc_r+0x670>
   20e60:	8806d33a 	srli	r3,r17,12
   20e64:	19c01b84 	addi	r7,r3,110
   20e68:	39cb883a 	add	r5,r7,r7
   20e6c:	003f0c06 	br	20aa0 <__alt_data_end+0xf4020aa0>
   20e70:	3804d27a 	srli	r2,r7,9
   20e74:	01000104 	movi	r4,4
   20e78:	2080422e 	bgeu	r4,r2,20f84 <_malloc_r+0x5f4>
   20e7c:	01000504 	movi	r4,20
   20e80:	20807c36 	bltu	r4,r2,21074 <_malloc_r+0x6e4>
   20e84:	110016c4 	addi	r4,r2,91
   20e88:	210b883a 	add	r5,r4,r4
   20e8c:	294b883a 	add	r5,r5,r5
   20e90:	294b883a 	add	r5,r5,r5
   20e94:	994b883a 	add	r5,r19,r5
   20e98:	28800217 	ldw	r2,8(r5)
   20e9c:	02020034 	movhi	r8,2048
   20ea0:	42013904 	addi	r8,r8,1252
   20ea4:	11406326 	beq	r2,r5,21034 <_malloc_r+0x6a4>
   20ea8:	01bfff04 	movi	r6,-4
   20eac:	11000117 	ldw	r4,4(r2)
   20eb0:	2188703a 	and	r4,r4,r6
   20eb4:	3900022e 	bgeu	r7,r4,20ec0 <_malloc_r+0x530>
   20eb8:	10800217 	ldw	r2,8(r2)
   20ebc:	28bffb1e 	bne	r5,r2,20eac <__alt_data_end+0xf4020eac>
   20ec0:	11800317 	ldw	r6,12(r2)
   20ec4:	99000117 	ldw	r4,4(r19)
   20ec8:	81800315 	stw	r6,12(r16)
   20ecc:	80800215 	stw	r2,8(r16)
   20ed0:	34000215 	stw	r16,8(r6)
   20ed4:	14000315 	stw	r16,12(r2)
   20ed8:	003f2706 	br	20b78 <__alt_data_end+0xf4020b78>
   20edc:	88c00054 	ori	r3,r17,1
   20ee0:	80c00115 	stw	r3,4(r16)
   20ee4:	8463883a 	add	r17,r16,r17
   20ee8:	34400515 	stw	r17,20(r6)
   20eec:	34400415 	stw	r17,16(r6)
   20ef0:	10c00054 	ori	r3,r2,1
   20ef4:	8a400315 	stw	r9,12(r17)
   20ef8:	8a400215 	stw	r9,8(r17)
   20efc:	88c00115 	stw	r3,4(r17)
   20f00:	88a3883a 	add	r17,r17,r2
   20f04:	88800015 	stw	r2,0(r17)
   20f08:	9009883a 	mov	r4,r18
   20f0c:	00234d00 	call	234d0 <__malloc_unlock>
   20f10:	80800204 	addi	r2,r16,8
   20f14:	003ecb06 	br	20a44 <__alt_data_end+0xf4020a44>
   20f18:	31000117 	ldw	r4,4(r6)
   20f1c:	003f1606 	br	20b78 <__alt_data_end+0xf4020b78>
   20f20:	63000044 	addi	r12,r12,1
   20f24:	608000cc 	andi	r2,r12,3
   20f28:	5ac00204 	addi	r11,r11,8
   20f2c:	103f2a1e 	bne	r2,zero,20bd8 <__alt_data_end+0xf4020bd8>
   20f30:	00002106 	br	20fb8 <_malloc_r+0x628>
   20f34:	80800204 	addi	r2,r16,8
   20f38:	84000517 	ldw	r16,20(r16)
   20f3c:	143eb31e 	bne	r2,r16,20a0c <__alt_data_end+0xf4020a0c>
   20f40:	18c00084 	addi	r3,r3,2
   20f44:	003eec06 	br	20af8 <__alt_data_end+0xf4020af8>
   20f48:	8085883a 	add	r2,r16,r2
   20f4c:	10c00117 	ldw	r3,4(r2)
   20f50:	81000317 	ldw	r4,12(r16)
   20f54:	81400217 	ldw	r5,8(r16)
   20f58:	18c00054 	ori	r3,r3,1
   20f5c:	10c00115 	stw	r3,4(r2)
   20f60:	29000315 	stw	r4,12(r5)
   20f64:	21400215 	stw	r5,8(r4)
   20f68:	9009883a 	mov	r4,r18
   20f6c:	00234d00 	call	234d0 <__malloc_unlock>
   20f70:	80800204 	addi	r2,r16,8
   20f74:	003eb306 	br	20a44 <__alt_data_end+0xf4020a44>
   20f78:	19c016c4 	addi	r7,r3,91
   20f7c:	39cb883a 	add	r5,r7,r7
   20f80:	003ec706 	br	20aa0 <__alt_data_end+0xf4020aa0>
   20f84:	3804d1ba 	srli	r2,r7,6
   20f88:	11000e04 	addi	r4,r2,56
   20f8c:	210b883a 	add	r5,r4,r4
   20f90:	003fbe06 	br	20e8c <__alt_data_end+0xf4020e8c>
   20f94:	84ff5d26 	beq	r16,r19,20d0c <__alt_data_end+0xf4020d0c>
   20f98:	9c000217 	ldw	r16,8(r19)
   20f9c:	00bfff04 	movi	r2,-4
   20fa0:	80c00117 	ldw	r3,4(r16)
   20fa4:	1886703a 	and	r3,r3,r2
   20fa8:	003f9706 	br	20e08 <__alt_data_end+0xf4020e08>
   20fac:	52800017 	ldw	r10,0(r10)
   20fb0:	18ffffc4 	addi	r3,r3,-1
   20fb4:	50805c1e 	bne	r10,r2,21128 <_malloc_r+0x798>
   20fb8:	190000cc 	andi	r4,r3,3
   20fbc:	50bffe04 	addi	r2,r10,-8
   20fc0:	203ffa1e 	bne	r4,zero,20fac <__alt_data_end+0xf4020fac>
   20fc4:	98800117 	ldw	r2,4(r19)
   20fc8:	0146303a 	nor	r3,zero,r5
   20fcc:	1884703a 	and	r2,r3,r2
   20fd0:	98800115 	stw	r2,4(r19)
   20fd4:	294b883a 	add	r5,r5,r5
   20fd8:	117f2e36 	bltu	r2,r5,20c94 <__alt_data_end+0xf4020c94>
   20fdc:	283f2d26 	beq	r5,zero,20c94 <__alt_data_end+0xf4020c94>
   20fe0:	1146703a 	and	r3,r2,r5
   20fe4:	1800521e 	bne	r3,zero,21130 <_malloc_r+0x7a0>
   20fe8:	6007883a 	mov	r3,r12
   20fec:	294b883a 	add	r5,r5,r5
   20ff0:	1148703a 	and	r4,r2,r5
   20ff4:	18c00104 	addi	r3,r3,4
   20ff8:	203ffc26 	beq	r4,zero,20fec <__alt_data_end+0xf4020fec>
   20ffc:	003ef006 	br	20bc0 <__alt_data_end+0xf4020bc0>
   21000:	00805504 	movi	r2,340
   21004:	10c01336 	bltu	r2,r3,21054 <_malloc_r+0x6c4>
   21008:	8806d3fa 	srli	r3,r17,15
   2100c:	19c01dc4 	addi	r7,r3,119
   21010:	39cb883a 	add	r5,r7,r7
   21014:	003ea206 	br	20aa0 <__alt_data_end+0xf4020aa0>
   21018:	00c40004 	movi	r3,4096
   2101c:	003f4d06 	br	20d54 <__alt_data_end+0xf4020d54>
   21020:	00800044 	movi	r2,1
   21024:	a0800115 	stw	r2,4(r20)
   21028:	a021883a 	mov	r16,r20
   2102c:	0007883a 	mov	r3,zero
   21030:	003f7506 	br	20e08 <__alt_data_end+0xf4020e08>
   21034:	200bd0ba 	srai	r5,r4,2
   21038:	01800044 	movi	r6,1
   2103c:	41000117 	ldw	r4,4(r8)
   21040:	314a983a 	sll	r5,r6,r5
   21044:	100d883a 	mov	r6,r2
   21048:	2908b03a 	or	r4,r5,r4
   2104c:	41000115 	stw	r4,4(r8)
   21050:	003f9d06 	br	20ec8 <__alt_data_end+0xf4020ec8>
   21054:	00815504 	movi	r2,1364
   21058:	10c01336 	bltu	r2,r3,210a8 <_malloc_r+0x718>
   2105c:	8806d4ba 	srli	r3,r17,18
   21060:	19c01f04 	addi	r7,r3,124
   21064:	39cb883a 	add	r5,r7,r7
   21068:	003e8d06 	br	20aa0 <__alt_data_end+0xf4020aa0>
   2106c:	ad400404 	addi	r21,r21,16
   21070:	003f1d06 	br	20ce8 <__alt_data_end+0xf4020ce8>
   21074:	01001504 	movi	r4,84
   21078:	20801c36 	bltu	r4,r2,210ec <_malloc_r+0x75c>
   2107c:	3804d33a 	srli	r2,r7,12
   21080:	11001b84 	addi	r4,r2,110
   21084:	210b883a 	add	r5,r4,r4
   21088:	003f8006 	br	20e8c <__alt_data_end+0xf4020e8c>
   2108c:	3083ffcc 	andi	r2,r6,4095
   21090:	103f241e 	bne	r2,zero,20d24 <__alt_data_end+0xf4020d24>
   21094:	99000217 	ldw	r4,8(r19)
   21098:	ad85883a 	add	r2,r21,r22
   2109c:	10800054 	ori	r2,r2,1
   210a0:	20800115 	stw	r2,4(r4)
   210a4:	003f4a06 	br	20dd0 <__alt_data_end+0xf4020dd0>
   210a8:	01403f04 	movi	r5,252
   210ac:	01c01f84 	movi	r7,126
   210b0:	003e7b06 	br	20aa0 <__alt_data_end+0xf4020aa0>
   210b4:	00c00044 	movi	r3,1
   210b8:	002b883a 	mov	r21,zero
   210bc:	003f3006 	br	20d80 <__alt_data_end+0xf4020d80>
   210c0:	00820034 	movhi	r2,2048
   210c4:	1086d504 	addi	r2,r2,6996
   210c8:	15000015 	stw	r20,0(r2)
   210cc:	003f1b06 	br	20d3c <__alt_data_end+0xf4020d3c>
   210d0:	9009883a 	mov	r4,r18
   210d4:	81400204 	addi	r5,r16,8
   210d8:	00223080 	call	22308 <_free_r>
   210dc:	00820034 	movhi	r2,2048
   210e0:	1086ec04 	addi	r2,r2,7088
   210e4:	10c00017 	ldw	r3,0(r2)
   210e8:	003f3906 	br	20dd0 <__alt_data_end+0xf4020dd0>
   210ec:	01005504 	movi	r4,340
   210f0:	20800436 	bltu	r4,r2,21104 <_malloc_r+0x774>
   210f4:	3804d3fa 	srli	r2,r7,15
   210f8:	11001dc4 	addi	r4,r2,119
   210fc:	210b883a 	add	r5,r4,r4
   21100:	003f6206 	br	20e8c <__alt_data_end+0xf4020e8c>
   21104:	01015504 	movi	r4,1364
   21108:	20800436 	bltu	r4,r2,2111c <_malloc_r+0x78c>
   2110c:	3804d4ba 	srli	r2,r7,18
   21110:	11001f04 	addi	r4,r2,124
   21114:	210b883a 	add	r5,r4,r4
   21118:	003f5c06 	br	20e8c <__alt_data_end+0xf4020e8c>
   2111c:	01403f04 	movi	r5,252
   21120:	01001f84 	movi	r4,126
   21124:	003f5906 	br	20e8c <__alt_data_end+0xf4020e8c>
   21128:	98800117 	ldw	r2,4(r19)
   2112c:	003fa906 	br	20fd4 <__alt_data_end+0xf4020fd4>
   21130:	6007883a 	mov	r3,r12
   21134:	003ea206 	br	20bc0 <__alt_data_end+0xf4020bc0>

00021138 <memchr>:
   21138:	208000cc 	andi	r2,r4,3
   2113c:	280f883a 	mov	r7,r5
   21140:	10003526 	beq	r2,zero,21218 <memchr+0xe0>
   21144:	30bfffc4 	addi	r2,r6,-1
   21148:	30001b26 	beq	r6,zero,211b8 <memchr+0x80>
   2114c:	21800003 	ldbu	r6,0(r4)
   21150:	28c03fcc 	andi	r3,r5,255
   21154:	30c01a26 	beq	r6,r3,211c0 <memchr+0x88>
   21158:	180d883a 	mov	r6,r3
   2115c:	00000406 	br	21170 <memchr+0x38>
   21160:	10001526 	beq	r2,zero,211b8 <memchr+0x80>
   21164:	20c00003 	ldbu	r3,0(r4)
   21168:	10bfffc4 	addi	r2,r2,-1
   2116c:	19801426 	beq	r3,r6,211c0 <memchr+0x88>
   21170:	21000044 	addi	r4,r4,1
   21174:	20c000cc 	andi	r3,r4,3
   21178:	183ff91e 	bne	r3,zero,21160 <__alt_data_end+0xf4021160>
   2117c:	024000c4 	movi	r9,3
   21180:	48801136 	bltu	r9,r2,211c8 <memchr+0x90>
   21184:	10000c26 	beq	r2,zero,211b8 <memchr+0x80>
   21188:	20c00003 	ldbu	r3,0(r4)
   2118c:	29403fcc 	andi	r5,r5,255
   21190:	19400b26 	beq	r3,r5,211c0 <memchr+0x88>
   21194:	20c00044 	addi	r3,r4,1
   21198:	2085883a 	add	r2,r4,r2
   2119c:	39803fcc 	andi	r6,r7,255
   211a0:	00000306 	br	211b0 <memchr+0x78>
   211a4:	18c00044 	addi	r3,r3,1
   211a8:	197fffc3 	ldbu	r5,-1(r3)
   211ac:	29800426 	beq	r5,r6,211c0 <memchr+0x88>
   211b0:	1809883a 	mov	r4,r3
   211b4:	18bffb1e 	bne	r3,r2,211a4 <__alt_data_end+0xf40211a4>
   211b8:	0005883a 	mov	r2,zero
   211bc:	f800283a 	ret
   211c0:	2005883a 	mov	r2,r4
   211c4:	f800283a 	ret
   211c8:	28c03fcc 	andi	r3,r5,255
   211cc:	1810923a 	slli	r8,r3,8
   211d0:	02ffbff4 	movhi	r11,65279
   211d4:	02a02074 	movhi	r10,32897
   211d8:	40c6b03a 	or	r3,r8,r3
   211dc:	1810943a 	slli	r8,r3,16
   211e0:	5affbfc4 	addi	r11,r11,-257
   211e4:	52a02004 	addi	r10,r10,-32640
   211e8:	40d0b03a 	or	r8,r8,r3
   211ec:	20c00017 	ldw	r3,0(r4)
   211f0:	40c6f03a 	xor	r3,r8,r3
   211f4:	1acd883a 	add	r6,r3,r11
   211f8:	00c6303a 	nor	r3,zero,r3
   211fc:	30c6703a 	and	r3,r6,r3
   21200:	1a86703a 	and	r3,r3,r10
   21204:	183fdf1e 	bne	r3,zero,21184 <__alt_data_end+0xf4021184>
   21208:	10bfff04 	addi	r2,r2,-4
   2120c:	21000104 	addi	r4,r4,4
   21210:	48bff636 	bltu	r9,r2,211ec <__alt_data_end+0xf40211ec>
   21214:	003fdb06 	br	21184 <__alt_data_end+0xf4021184>
   21218:	3005883a 	mov	r2,r6
   2121c:	003fd706 	br	2117c <__alt_data_end+0xf402117c>

00021220 <memcpy>:
   21220:	deffff04 	addi	sp,sp,-4
   21224:	dc000015 	stw	r16,0(sp)
   21228:	00c003c4 	movi	r3,15
   2122c:	2005883a 	mov	r2,r4
   21230:	1980432e 	bgeu	r3,r6,21340 <memcpy+0x120>
   21234:	2146b03a 	or	r3,r4,r5
   21238:	18c000cc 	andi	r3,r3,3
   2123c:	1800421e 	bne	r3,zero,21348 <memcpy+0x128>
   21240:	343ffc04 	addi	r16,r6,-16
   21244:	8020d13a 	srli	r16,r16,4
   21248:	28c00104 	addi	r3,r5,4
   2124c:	23400104 	addi	r13,r4,4
   21250:	801e913a 	slli	r15,r16,4
   21254:	2b000204 	addi	r12,r5,8
   21258:	22c00204 	addi	r11,r4,8
   2125c:	7bc00504 	addi	r15,r15,20
   21260:	2a800304 	addi	r10,r5,12
   21264:	22400304 	addi	r9,r4,12
   21268:	2bdf883a 	add	r15,r5,r15
   2126c:	2811883a 	mov	r8,r5
   21270:	200f883a 	mov	r7,r4
   21274:	41000017 	ldw	r4,0(r8)
   21278:	39c00404 	addi	r7,r7,16
   2127c:	18c00404 	addi	r3,r3,16
   21280:	393ffc15 	stw	r4,-16(r7)
   21284:	1bbffc17 	ldw	r14,-16(r3)
   21288:	6b400404 	addi	r13,r13,16
   2128c:	5ac00404 	addi	r11,r11,16
   21290:	6bbffc15 	stw	r14,-16(r13)
   21294:	63800017 	ldw	r14,0(r12)
   21298:	4a400404 	addi	r9,r9,16
   2129c:	42000404 	addi	r8,r8,16
   212a0:	5bbffc15 	stw	r14,-16(r11)
   212a4:	53800017 	ldw	r14,0(r10)
   212a8:	63000404 	addi	r12,r12,16
   212ac:	52800404 	addi	r10,r10,16
   212b0:	4bbffc15 	stw	r14,-16(r9)
   212b4:	1bffef1e 	bne	r3,r15,21274 <__alt_data_end+0xf4021274>
   212b8:	81c00044 	addi	r7,r16,1
   212bc:	380e913a 	slli	r7,r7,4
   212c0:	310003cc 	andi	r4,r6,15
   212c4:	02c000c4 	movi	r11,3
   212c8:	11c7883a 	add	r3,r2,r7
   212cc:	29cb883a 	add	r5,r5,r7
   212d0:	59001f2e 	bgeu	r11,r4,21350 <memcpy+0x130>
   212d4:	1813883a 	mov	r9,r3
   212d8:	2811883a 	mov	r8,r5
   212dc:	200f883a 	mov	r7,r4
   212e0:	42800017 	ldw	r10,0(r8)
   212e4:	4a400104 	addi	r9,r9,4
   212e8:	39ffff04 	addi	r7,r7,-4
   212ec:	4abfff15 	stw	r10,-4(r9)
   212f0:	42000104 	addi	r8,r8,4
   212f4:	59fffa36 	bltu	r11,r7,212e0 <__alt_data_end+0xf40212e0>
   212f8:	213fff04 	addi	r4,r4,-4
   212fc:	2008d0ba 	srli	r4,r4,2
   21300:	318000cc 	andi	r6,r6,3
   21304:	21000044 	addi	r4,r4,1
   21308:	2109883a 	add	r4,r4,r4
   2130c:	2109883a 	add	r4,r4,r4
   21310:	1907883a 	add	r3,r3,r4
   21314:	290b883a 	add	r5,r5,r4
   21318:	30000626 	beq	r6,zero,21334 <memcpy+0x114>
   2131c:	198d883a 	add	r6,r3,r6
   21320:	29c00003 	ldbu	r7,0(r5)
   21324:	18c00044 	addi	r3,r3,1
   21328:	29400044 	addi	r5,r5,1
   2132c:	19ffffc5 	stb	r7,-1(r3)
   21330:	19bffb1e 	bne	r3,r6,21320 <__alt_data_end+0xf4021320>
   21334:	dc000017 	ldw	r16,0(sp)
   21338:	dec00104 	addi	sp,sp,4
   2133c:	f800283a 	ret
   21340:	2007883a 	mov	r3,r4
   21344:	003ff406 	br	21318 <__alt_data_end+0xf4021318>
   21348:	2007883a 	mov	r3,r4
   2134c:	003ff306 	br	2131c <__alt_data_end+0xf402131c>
   21350:	200d883a 	mov	r6,r4
   21354:	003ff006 	br	21318 <__alt_data_end+0xf4021318>

00021358 <memmove>:
   21358:	2005883a 	mov	r2,r4
   2135c:	29000b2e 	bgeu	r5,r4,2138c <memmove+0x34>
   21360:	298f883a 	add	r7,r5,r6
   21364:	21c0092e 	bgeu	r4,r7,2138c <memmove+0x34>
   21368:	2187883a 	add	r3,r4,r6
   2136c:	198bc83a 	sub	r5,r3,r6
   21370:	30004b26 	beq	r6,zero,214a0 <memmove+0x148>
   21374:	39ffffc4 	addi	r7,r7,-1
   21378:	39000003 	ldbu	r4,0(r7)
   2137c:	18ffffc4 	addi	r3,r3,-1
   21380:	19000005 	stb	r4,0(r3)
   21384:	197ffb1e 	bne	r3,r5,21374 <__alt_data_end+0xf4021374>
   21388:	f800283a 	ret
   2138c:	00c003c4 	movi	r3,15
   21390:	1980412e 	bgeu	r3,r6,21498 <memmove+0x140>
   21394:	1146b03a 	or	r3,r2,r5
   21398:	18c000cc 	andi	r3,r3,3
   2139c:	1800411e 	bne	r3,zero,214a4 <memmove+0x14c>
   213a0:	33fffc04 	addi	r15,r6,-16
   213a4:	781ed13a 	srli	r15,r15,4
   213a8:	28c00104 	addi	r3,r5,4
   213ac:	13400104 	addi	r13,r2,4
   213b0:	781c913a 	slli	r14,r15,4
   213b4:	2b000204 	addi	r12,r5,8
   213b8:	12c00204 	addi	r11,r2,8
   213bc:	73800504 	addi	r14,r14,20
   213c0:	2a800304 	addi	r10,r5,12
   213c4:	12400304 	addi	r9,r2,12
   213c8:	2b9d883a 	add	r14,r5,r14
   213cc:	2811883a 	mov	r8,r5
   213d0:	100f883a 	mov	r7,r2
   213d4:	41000017 	ldw	r4,0(r8)
   213d8:	39c00404 	addi	r7,r7,16
   213dc:	18c00404 	addi	r3,r3,16
   213e0:	393ffc15 	stw	r4,-16(r7)
   213e4:	193ffc17 	ldw	r4,-16(r3)
   213e8:	6b400404 	addi	r13,r13,16
   213ec:	5ac00404 	addi	r11,r11,16
   213f0:	693ffc15 	stw	r4,-16(r13)
   213f4:	61000017 	ldw	r4,0(r12)
   213f8:	4a400404 	addi	r9,r9,16
   213fc:	42000404 	addi	r8,r8,16
   21400:	593ffc15 	stw	r4,-16(r11)
   21404:	51000017 	ldw	r4,0(r10)
   21408:	63000404 	addi	r12,r12,16
   2140c:	52800404 	addi	r10,r10,16
   21410:	493ffc15 	stw	r4,-16(r9)
   21414:	1bbfef1e 	bne	r3,r14,213d4 <__alt_data_end+0xf40213d4>
   21418:	79000044 	addi	r4,r15,1
   2141c:	2008913a 	slli	r4,r4,4
   21420:	328003cc 	andi	r10,r6,15
   21424:	02c000c4 	movi	r11,3
   21428:	1107883a 	add	r3,r2,r4
   2142c:	290b883a 	add	r5,r5,r4
   21430:	5a801e2e 	bgeu	r11,r10,214ac <memmove+0x154>
   21434:	1813883a 	mov	r9,r3
   21438:	2811883a 	mov	r8,r5
   2143c:	500f883a 	mov	r7,r10
   21440:	41000017 	ldw	r4,0(r8)
   21444:	4a400104 	addi	r9,r9,4
   21448:	39ffff04 	addi	r7,r7,-4
   2144c:	493fff15 	stw	r4,-4(r9)
   21450:	42000104 	addi	r8,r8,4
   21454:	59fffa36 	bltu	r11,r7,21440 <__alt_data_end+0xf4021440>
   21458:	513fff04 	addi	r4,r10,-4
   2145c:	2008d0ba 	srli	r4,r4,2
   21460:	318000cc 	andi	r6,r6,3
   21464:	21000044 	addi	r4,r4,1
   21468:	2109883a 	add	r4,r4,r4
   2146c:	2109883a 	add	r4,r4,r4
   21470:	1907883a 	add	r3,r3,r4
   21474:	290b883a 	add	r5,r5,r4
   21478:	30000926 	beq	r6,zero,214a0 <memmove+0x148>
   2147c:	198d883a 	add	r6,r3,r6
   21480:	29c00003 	ldbu	r7,0(r5)
   21484:	18c00044 	addi	r3,r3,1
   21488:	29400044 	addi	r5,r5,1
   2148c:	19ffffc5 	stb	r7,-1(r3)
   21490:	19bffb1e 	bne	r3,r6,21480 <__alt_data_end+0xf4021480>
   21494:	f800283a 	ret
   21498:	1007883a 	mov	r3,r2
   2149c:	003ff606 	br	21478 <__alt_data_end+0xf4021478>
   214a0:	f800283a 	ret
   214a4:	1007883a 	mov	r3,r2
   214a8:	003ff406 	br	2147c <__alt_data_end+0xf402147c>
   214ac:	500d883a 	mov	r6,r10
   214b0:	003ff106 	br	21478 <__alt_data_end+0xf4021478>

000214b4 <_realloc_r>:
   214b4:	defff604 	addi	sp,sp,-40
   214b8:	dcc00315 	stw	r19,12(sp)
   214bc:	dc400115 	stw	r17,4(sp)
   214c0:	dfc00915 	stw	ra,36(sp)
   214c4:	df000815 	stw	fp,32(sp)
   214c8:	ddc00715 	stw	r23,28(sp)
   214cc:	dd800615 	stw	r22,24(sp)
   214d0:	dd400515 	stw	r21,20(sp)
   214d4:	dd000415 	stw	r20,16(sp)
   214d8:	dc800215 	stw	r18,8(sp)
   214dc:	dc000015 	stw	r16,0(sp)
   214e0:	2827883a 	mov	r19,r5
   214e4:	3023883a 	mov	r17,r6
   214e8:	2800bf26 	beq	r5,zero,217e8 <_realloc_r+0x334>
   214ec:	2025883a 	mov	r18,r4
   214f0:	00234b00 	call	234b0 <__malloc_lock>
   214f4:	98ffff17 	ldw	r3,-4(r19)
   214f8:	01bfff04 	movi	r6,-4
   214fc:	890002c4 	addi	r4,r17,11
   21500:	01c00584 	movi	r7,22
   21504:	9d7ffe04 	addi	r21,r19,-8
   21508:	19a0703a 	and	r16,r3,r6
   2150c:	39003f2e 	bgeu	r7,r4,2160c <_realloc_r+0x158>
   21510:	053ffe04 	movi	r20,-8
   21514:	2528703a 	and	r20,r4,r20
   21518:	a00f883a 	mov	r7,r20
   2151c:	a0008216 	blt	r20,zero,21728 <_realloc_r+0x274>
   21520:	a4408136 	bltu	r20,r17,21728 <_realloc_r+0x274>
   21524:	81c03c0e 	bge	r16,r7,21618 <_realloc_r+0x164>
   21528:	07020034 	movhi	fp,2048
   2152c:	e7013904 	addi	fp,fp,1252
   21530:	e1000217 	ldw	r4,8(fp)
   21534:	ac05883a 	add	r2,r21,r16
   21538:	2080bf26 	beq	r4,r2,21838 <_realloc_r+0x384>
   2153c:	11000117 	ldw	r4,4(r2)
   21540:	023fff84 	movi	r8,-2
   21544:	2210703a 	and	r8,r4,r8
   21548:	1211883a 	add	r8,r2,r8
   2154c:	41400117 	ldw	r5,4(r8)
   21550:	2940004c 	andi	r5,r5,1
   21554:	28004a1e 	bne	r5,zero,21680 <_realloc_r+0x1cc>
   21558:	017fff04 	movi	r5,-4
   2155c:	2148703a 	and	r4,r4,r5
   21560:	2409883a 	add	r4,r4,r16
   21564:	21c0ad0e 	bge	r4,r7,2181c <_realloc_r+0x368>
   21568:	18c0004c 	andi	r3,r3,1
   2156c:	18007f1e 	bne	r3,zero,2176c <_realloc_r+0x2b8>
   21570:	9dfffe17 	ldw	r23,-8(r19)
   21574:	adefc83a 	sub	r23,r21,r23
   21578:	bd800117 	ldw	r22,4(r23)
   2157c:	b14a703a 	and	r5,r22,r5
   21580:	216d883a 	add	r22,r4,r5
   21584:	b1c04516 	blt	r22,r7,2169c <_realloc_r+0x1e8>
   21588:	10c00317 	ldw	r3,12(r2)
   2158c:	10800217 	ldw	r2,8(r2)
   21590:	81bfff04 	addi	r6,r16,-4
   21594:	bc400204 	addi	r17,r23,8
   21598:	10c00315 	stw	r3,12(r2)
   2159c:	18800215 	stw	r2,8(r3)
   215a0:	b9400217 	ldw	r5,8(r23)
   215a4:	b8c00317 	ldw	r3,12(r23)
   215a8:	00800904 	movi	r2,36
   215ac:	28c00315 	stw	r3,12(r5)
   215b0:	19400215 	stw	r5,8(r3)
   215b4:	1180ef36 	bltu	r2,r6,21974 <_realloc_r+0x4c0>
   215b8:	008004c4 	movi	r2,19
   215bc:	1180da2e 	bgeu	r2,r6,21928 <_realloc_r+0x474>
   215c0:	98800017 	ldw	r2,0(r19)
   215c4:	b8800215 	stw	r2,8(r23)
   215c8:	98800117 	ldw	r2,4(r19)
   215cc:	b8800315 	stw	r2,12(r23)
   215d0:	008006c4 	movi	r2,27
   215d4:	1180fc2e 	bgeu	r2,r6,219c8 <_realloc_r+0x514>
   215d8:	98800217 	ldw	r2,8(r19)
   215dc:	b8800415 	stw	r2,16(r23)
   215e0:	98800317 	ldw	r2,12(r19)
   215e4:	b8800515 	stw	r2,20(r23)
   215e8:	00800904 	movi	r2,36
   215ec:	3080421e 	bne	r6,r2,216f8 <_realloc_r+0x244>
   215f0:	98800417 	ldw	r2,16(r19)
   215f4:	9cc00604 	addi	r19,r19,24
   215f8:	b8c00804 	addi	r3,r23,32
   215fc:	b8800615 	stw	r2,24(r23)
   21600:	98bfff17 	ldw	r2,-4(r19)
   21604:	b8800715 	stw	r2,28(r23)
   21608:	00003d06 	br	21700 <_realloc_r+0x24c>
   2160c:	01c00404 	movi	r7,16
   21610:	3829883a 	mov	r20,r7
   21614:	003fc206 	br	21520 <__alt_data_end+0xf4021520>
   21618:	9823883a 	mov	r17,r19
   2161c:	850fc83a 	sub	r7,r16,r20
   21620:	008003c4 	movi	r2,15
   21624:	18c0004c 	andi	r3,r3,1
   21628:	11c04336 	bltu	r2,r7,21738 <_realloc_r+0x284>
   2162c:	1c06b03a 	or	r3,r3,r16
   21630:	a8c00115 	stw	r3,4(r21)
   21634:	ac21883a 	add	r16,r21,r16
   21638:	80c00117 	ldw	r3,4(r16)
   2163c:	18c00054 	ori	r3,r3,1
   21640:	80c00115 	stw	r3,4(r16)
   21644:	9009883a 	mov	r4,r18
   21648:	00234d00 	call	234d0 <__malloc_unlock>
   2164c:	8805883a 	mov	r2,r17
   21650:	dfc00917 	ldw	ra,36(sp)
   21654:	df000817 	ldw	fp,32(sp)
   21658:	ddc00717 	ldw	r23,28(sp)
   2165c:	dd800617 	ldw	r22,24(sp)
   21660:	dd400517 	ldw	r21,20(sp)
   21664:	dd000417 	ldw	r20,16(sp)
   21668:	dcc00317 	ldw	r19,12(sp)
   2166c:	dc800217 	ldw	r18,8(sp)
   21670:	dc400117 	ldw	r17,4(sp)
   21674:	dc000017 	ldw	r16,0(sp)
   21678:	dec00a04 	addi	sp,sp,40
   2167c:	f800283a 	ret
   21680:	18c0004c 	andi	r3,r3,1
   21684:	1800391e 	bne	r3,zero,2176c <_realloc_r+0x2b8>
   21688:	9dfffe17 	ldw	r23,-8(r19)
   2168c:	00bfff04 	movi	r2,-4
   21690:	adefc83a 	sub	r23,r21,r23
   21694:	b9400117 	ldw	r5,4(r23)
   21698:	288a703a 	and	r5,r5,r2
   2169c:	2c2d883a 	add	r22,r5,r16
   216a0:	b1c03216 	blt	r22,r7,2176c <_realloc_r+0x2b8>
   216a4:	b8800317 	ldw	r2,12(r23)
   216a8:	b8c00217 	ldw	r3,8(r23)
   216ac:	81bfff04 	addi	r6,r16,-4
   216b0:	01000904 	movi	r4,36
   216b4:	18800315 	stw	r2,12(r3)
   216b8:	10c00215 	stw	r3,8(r2)
   216bc:	bc400204 	addi	r17,r23,8
   216c0:	2180ac36 	bltu	r4,r6,21974 <_realloc_r+0x4c0>
   216c4:	008004c4 	movi	r2,19
   216c8:	1180972e 	bgeu	r2,r6,21928 <_realloc_r+0x474>
   216cc:	98800017 	ldw	r2,0(r19)
   216d0:	b8800215 	stw	r2,8(r23)
   216d4:	98800117 	ldw	r2,4(r19)
   216d8:	b8800315 	stw	r2,12(r23)
   216dc:	008006c4 	movi	r2,27
   216e0:	1180b92e 	bgeu	r2,r6,219c8 <_realloc_r+0x514>
   216e4:	98800217 	ldw	r2,8(r19)
   216e8:	b8800415 	stw	r2,16(r23)
   216ec:	98800317 	ldw	r2,12(r19)
   216f0:	b8800515 	stw	r2,20(r23)
   216f4:	313fbe26 	beq	r6,r4,215f0 <__alt_data_end+0xf40215f0>
   216f8:	b8c00604 	addi	r3,r23,24
   216fc:	9cc00404 	addi	r19,r19,16
   21700:	98800017 	ldw	r2,0(r19)
   21704:	b021883a 	mov	r16,r22
   21708:	b82b883a 	mov	r21,r23
   2170c:	18800015 	stw	r2,0(r3)
   21710:	98800117 	ldw	r2,4(r19)
   21714:	18800115 	stw	r2,4(r3)
   21718:	98800217 	ldw	r2,8(r19)
   2171c:	18800215 	stw	r2,8(r3)
   21720:	b8c00117 	ldw	r3,4(r23)
   21724:	003fbd06 	br	2161c <__alt_data_end+0xf402161c>
   21728:	00800304 	movi	r2,12
   2172c:	90800015 	stw	r2,0(r18)
   21730:	0005883a 	mov	r2,zero
   21734:	003fc606 	br	21650 <__alt_data_end+0xf4021650>
   21738:	1d06b03a 	or	r3,r3,r20
   2173c:	ad0b883a 	add	r5,r21,r20
   21740:	a8c00115 	stw	r3,4(r21)
   21744:	38800054 	ori	r2,r7,1
   21748:	28800115 	stw	r2,4(r5)
   2174c:	29cf883a 	add	r7,r5,r7
   21750:	38800117 	ldw	r2,4(r7)
   21754:	9009883a 	mov	r4,r18
   21758:	29400204 	addi	r5,r5,8
   2175c:	10800054 	ori	r2,r2,1
   21760:	38800115 	stw	r2,4(r7)
   21764:	00223080 	call	22308 <_free_r>
   21768:	003fb606 	br	21644 <__alt_data_end+0xf4021644>
   2176c:	880b883a 	mov	r5,r17
   21770:	9009883a 	mov	r4,r18
   21774:	00209900 	call	20990 <_malloc_r>
   21778:	1023883a 	mov	r17,r2
   2177c:	1000aa26 	beq	r2,zero,21a28 <_realloc_r+0x574>
   21780:	98ffff17 	ldw	r3,-4(r19)
   21784:	113ffe04 	addi	r4,r2,-8
   21788:	00bfff84 	movi	r2,-2
   2178c:	1884703a 	and	r2,r3,r2
   21790:	a885883a 	add	r2,r21,r2
   21794:	20808626 	beq	r4,r2,219b0 <_realloc_r+0x4fc>
   21798:	81bfff04 	addi	r6,r16,-4
   2179c:	00800904 	movi	r2,36
   217a0:	11807036 	bltu	r2,r6,21964 <_realloc_r+0x4b0>
   217a4:	00c004c4 	movi	r3,19
   217a8:	19805636 	bltu	r3,r6,21904 <_realloc_r+0x450>
   217ac:	8805883a 	mov	r2,r17
   217b0:	9807883a 	mov	r3,r19
   217b4:	19000017 	ldw	r4,0(r3)
   217b8:	11000015 	stw	r4,0(r2)
   217bc:	19000117 	ldw	r4,4(r3)
   217c0:	11000115 	stw	r4,4(r2)
   217c4:	18c00217 	ldw	r3,8(r3)
   217c8:	10c00215 	stw	r3,8(r2)
   217cc:	980b883a 	mov	r5,r19
   217d0:	9009883a 	mov	r4,r18
   217d4:	00223080 	call	22308 <_free_r>
   217d8:	9009883a 	mov	r4,r18
   217dc:	00234d00 	call	234d0 <__malloc_unlock>
   217e0:	8805883a 	mov	r2,r17
   217e4:	003f9a06 	br	21650 <__alt_data_end+0xf4021650>
   217e8:	300b883a 	mov	r5,r6
   217ec:	dfc00917 	ldw	ra,36(sp)
   217f0:	df000817 	ldw	fp,32(sp)
   217f4:	ddc00717 	ldw	r23,28(sp)
   217f8:	dd800617 	ldw	r22,24(sp)
   217fc:	dd400517 	ldw	r21,20(sp)
   21800:	dd000417 	ldw	r20,16(sp)
   21804:	dcc00317 	ldw	r19,12(sp)
   21808:	dc800217 	ldw	r18,8(sp)
   2180c:	dc400117 	ldw	r17,4(sp)
   21810:	dc000017 	ldw	r16,0(sp)
   21814:	dec00a04 	addi	sp,sp,40
   21818:	00209901 	jmpi	20990 <_malloc_r>
   2181c:	11400317 	ldw	r5,12(r2)
   21820:	10800217 	ldw	r2,8(r2)
   21824:	9823883a 	mov	r17,r19
   21828:	2021883a 	mov	r16,r4
   2182c:	11400315 	stw	r5,12(r2)
   21830:	28800215 	stw	r2,8(r5)
   21834:	003f7906 	br	2161c <__alt_data_end+0xf402161c>
   21838:	21000117 	ldw	r4,4(r4)
   2183c:	00bfff04 	movi	r2,-4
   21840:	a1800404 	addi	r6,r20,16
   21844:	2088703a 	and	r4,r4,r2
   21848:	2409883a 	add	r4,r4,r16
   2184c:	2180380e 	bge	r4,r6,21930 <_realloc_r+0x47c>
   21850:	18c0004c 	andi	r3,r3,1
   21854:	183fc51e 	bne	r3,zero,2176c <__alt_data_end+0xf402176c>
   21858:	9dfffe17 	ldw	r23,-8(r19)
   2185c:	adefc83a 	sub	r23,r21,r23
   21860:	b9400117 	ldw	r5,4(r23)
   21864:	288a703a 	and	r5,r5,r2
   21868:	216d883a 	add	r22,r4,r5
   2186c:	b1bf8b16 	blt	r22,r6,2169c <__alt_data_end+0xf402169c>
   21870:	b8800317 	ldw	r2,12(r23)
   21874:	b8c00217 	ldw	r3,8(r23)
   21878:	81bfff04 	addi	r6,r16,-4
   2187c:	01000904 	movi	r4,36
   21880:	18800315 	stw	r2,12(r3)
   21884:	10c00215 	stw	r3,8(r2)
   21888:	bc400204 	addi	r17,r23,8
   2188c:	21805a36 	bltu	r4,r6,219f8 <_realloc_r+0x544>
   21890:	008004c4 	movi	r2,19
   21894:	1180562e 	bgeu	r2,r6,219f0 <_realloc_r+0x53c>
   21898:	98800017 	ldw	r2,0(r19)
   2189c:	b8800215 	stw	r2,8(r23)
   218a0:	98800117 	ldw	r2,4(r19)
   218a4:	b8800315 	stw	r2,12(r23)
   218a8:	008006c4 	movi	r2,27
   218ac:	11805636 	bltu	r2,r6,21a08 <_realloc_r+0x554>
   218b0:	b8800404 	addi	r2,r23,16
   218b4:	9cc00204 	addi	r19,r19,8
   218b8:	98c00017 	ldw	r3,0(r19)
   218bc:	10c00015 	stw	r3,0(r2)
   218c0:	98c00117 	ldw	r3,4(r19)
   218c4:	10c00115 	stw	r3,4(r2)
   218c8:	98c00217 	ldw	r3,8(r19)
   218cc:	10c00215 	stw	r3,8(r2)
   218d0:	bd07883a 	add	r3,r23,r20
   218d4:	b505c83a 	sub	r2,r22,r20
   218d8:	e0c00215 	stw	r3,8(fp)
   218dc:	10800054 	ori	r2,r2,1
   218e0:	18800115 	stw	r2,4(r3)
   218e4:	b8800117 	ldw	r2,4(r23)
   218e8:	9009883a 	mov	r4,r18
   218ec:	1080004c 	andi	r2,r2,1
   218f0:	a0a8b03a 	or	r20,r20,r2
   218f4:	bd000115 	stw	r20,4(r23)
   218f8:	00234d00 	call	234d0 <__malloc_unlock>
   218fc:	8805883a 	mov	r2,r17
   21900:	003f5306 	br	21650 <__alt_data_end+0xf4021650>
   21904:	98c00017 	ldw	r3,0(r19)
   21908:	88c00015 	stw	r3,0(r17)
   2190c:	98c00117 	ldw	r3,4(r19)
   21910:	88c00115 	stw	r3,4(r17)
   21914:	00c006c4 	movi	r3,27
   21918:	19801d36 	bltu	r3,r6,21990 <_realloc_r+0x4dc>
   2191c:	88800204 	addi	r2,r17,8
   21920:	98c00204 	addi	r3,r19,8
   21924:	003fa306 	br	217b4 <__alt_data_end+0xf40217b4>
   21928:	8807883a 	mov	r3,r17
   2192c:	003f7406 	br	21700 <__alt_data_end+0xf4021700>
   21930:	ad2b883a 	add	r21,r21,r20
   21934:	2505c83a 	sub	r2,r4,r20
   21938:	e5400215 	stw	r21,8(fp)
   2193c:	10800054 	ori	r2,r2,1
   21940:	a8800115 	stw	r2,4(r21)
   21944:	98bfff17 	ldw	r2,-4(r19)
   21948:	9009883a 	mov	r4,r18
   2194c:	1080004c 	andi	r2,r2,1
   21950:	a0a8b03a 	or	r20,r20,r2
   21954:	9d3fff15 	stw	r20,-4(r19)
   21958:	00234d00 	call	234d0 <__malloc_unlock>
   2195c:	9805883a 	mov	r2,r19
   21960:	003f3b06 	br	21650 <__alt_data_end+0xf4021650>
   21964:	8809883a 	mov	r4,r17
   21968:	980b883a 	mov	r5,r19
   2196c:	00213580 	call	21358 <memmove>
   21970:	003f9606 	br	217cc <__alt_data_end+0xf40217cc>
   21974:	8809883a 	mov	r4,r17
   21978:	980b883a 	mov	r5,r19
   2197c:	00213580 	call	21358 <memmove>
   21980:	b8c00117 	ldw	r3,4(r23)
   21984:	b021883a 	mov	r16,r22
   21988:	b82b883a 	mov	r21,r23
   2198c:	003f2306 	br	2161c <__alt_data_end+0xf402161c>
   21990:	98c00217 	ldw	r3,8(r19)
   21994:	88c00215 	stw	r3,8(r17)
   21998:	98c00317 	ldw	r3,12(r19)
   2199c:	88c00315 	stw	r3,12(r17)
   219a0:	30800c26 	beq	r6,r2,219d4 <_realloc_r+0x520>
   219a4:	88800404 	addi	r2,r17,16
   219a8:	98c00404 	addi	r3,r19,16
   219ac:	003f8106 	br	217b4 <__alt_data_end+0xf40217b4>
   219b0:	893fff17 	ldw	r4,-4(r17)
   219b4:	00bfff04 	movi	r2,-4
   219b8:	9823883a 	mov	r17,r19
   219bc:	2084703a 	and	r2,r4,r2
   219c0:	80a1883a 	add	r16,r16,r2
   219c4:	003f1506 	br	2161c <__alt_data_end+0xf402161c>
   219c8:	b8c00404 	addi	r3,r23,16
   219cc:	9cc00204 	addi	r19,r19,8
   219d0:	003f4b06 	br	21700 <__alt_data_end+0xf4021700>
   219d4:	99000417 	ldw	r4,16(r19)
   219d8:	88800604 	addi	r2,r17,24
   219dc:	98c00604 	addi	r3,r19,24
   219e0:	89000415 	stw	r4,16(r17)
   219e4:	99000517 	ldw	r4,20(r19)
   219e8:	89000515 	stw	r4,20(r17)
   219ec:	003f7106 	br	217b4 <__alt_data_end+0xf40217b4>
   219f0:	8805883a 	mov	r2,r17
   219f4:	003fb006 	br	218b8 <__alt_data_end+0xf40218b8>
   219f8:	8809883a 	mov	r4,r17
   219fc:	980b883a 	mov	r5,r19
   21a00:	00213580 	call	21358 <memmove>
   21a04:	003fb206 	br	218d0 <__alt_data_end+0xf40218d0>
   21a08:	98800217 	ldw	r2,8(r19)
   21a0c:	b8800415 	stw	r2,16(r23)
   21a10:	98800317 	ldw	r2,12(r19)
   21a14:	b8800515 	stw	r2,20(r23)
   21a18:	31000726 	beq	r6,r4,21a38 <_realloc_r+0x584>
   21a1c:	b8800604 	addi	r2,r23,24
   21a20:	9cc00404 	addi	r19,r19,16
   21a24:	003fa406 	br	218b8 <__alt_data_end+0xf40218b8>
   21a28:	9009883a 	mov	r4,r18
   21a2c:	00234d00 	call	234d0 <__malloc_unlock>
   21a30:	0005883a 	mov	r2,zero
   21a34:	003f0606 	br	21650 <__alt_data_end+0xf4021650>
   21a38:	98c00417 	ldw	r3,16(r19)
   21a3c:	9cc00604 	addi	r19,r19,24
   21a40:	b8800804 	addi	r2,r23,32
   21a44:	b8c00615 	stw	r3,24(r23)
   21a48:	98ffff17 	ldw	r3,-4(r19)
   21a4c:	b8c00715 	stw	r3,28(r23)
   21a50:	003f9906 	br	218b8 <__alt_data_end+0xf40218b8>

00021a54 <_sbrk_r>:
   21a54:	defffd04 	addi	sp,sp,-12
   21a58:	dc000015 	stw	r16,0(sp)
   21a5c:	04020034 	movhi	r16,2048
   21a60:	dc400115 	stw	r17,4(sp)
   21a64:	8406e404 	addi	r16,r16,7056
   21a68:	2023883a 	mov	r17,r4
   21a6c:	2809883a 	mov	r4,r5
   21a70:	dfc00215 	stw	ra,8(sp)
   21a74:	80000015 	stw	zero,0(r16)
   21a78:	00236c40 	call	236c4 <sbrk>
   21a7c:	00ffffc4 	movi	r3,-1
   21a80:	10c00526 	beq	r2,r3,21a98 <_sbrk_r+0x44>
   21a84:	dfc00217 	ldw	ra,8(sp)
   21a88:	dc400117 	ldw	r17,4(sp)
   21a8c:	dc000017 	ldw	r16,0(sp)
   21a90:	dec00304 	addi	sp,sp,12
   21a94:	f800283a 	ret
   21a98:	80c00017 	ldw	r3,0(r16)
   21a9c:	183ff926 	beq	r3,zero,21a84 <__alt_data_end+0xf4021a84>
   21aa0:	88c00015 	stw	r3,0(r17)
   21aa4:	003ff706 	br	21a84 <__alt_data_end+0xf4021a84>

00021aa8 <__swsetup_r>:
   21aa8:	00820034 	movhi	r2,2048
   21aac:	defffd04 	addi	sp,sp,-12
   21ab0:	1086d404 	addi	r2,r2,6992
   21ab4:	dc400115 	stw	r17,4(sp)
   21ab8:	2023883a 	mov	r17,r4
   21abc:	11000017 	ldw	r4,0(r2)
   21ac0:	dc000015 	stw	r16,0(sp)
   21ac4:	dfc00215 	stw	ra,8(sp)
   21ac8:	2821883a 	mov	r16,r5
   21acc:	20000226 	beq	r4,zero,21ad8 <__swsetup_r+0x30>
   21ad0:	20c00e17 	ldw	r3,56(r4)
   21ad4:	18002e26 	beq	r3,zero,21b90 <__swsetup_r+0xe8>
   21ad8:	8080030b 	ldhu	r2,12(r16)
   21adc:	10c0020c 	andi	r3,r2,8
   21ae0:	100d883a 	mov	r6,r2
   21ae4:	18000f26 	beq	r3,zero,21b24 <__swsetup_r+0x7c>
   21ae8:	80c00417 	ldw	r3,16(r16)
   21aec:	18001526 	beq	r3,zero,21b44 <__swsetup_r+0x9c>
   21af0:	1100004c 	andi	r4,r2,1
   21af4:	20001c1e 	bne	r4,zero,21b68 <__swsetup_r+0xc0>
   21af8:	1080008c 	andi	r2,r2,2
   21afc:	1000261e 	bne	r2,zero,21b98 <__swsetup_r+0xf0>
   21b00:	80800517 	ldw	r2,20(r16)
   21b04:	80800215 	stw	r2,8(r16)
   21b08:	18001c26 	beq	r3,zero,21b7c <__swsetup_r+0xd4>
   21b0c:	0005883a 	mov	r2,zero
   21b10:	dfc00217 	ldw	ra,8(sp)
   21b14:	dc400117 	ldw	r17,4(sp)
   21b18:	dc000017 	ldw	r16,0(sp)
   21b1c:	dec00304 	addi	sp,sp,12
   21b20:	f800283a 	ret
   21b24:	3080040c 	andi	r2,r6,16
   21b28:	10001726 	beq	r2,zero,21b88 <__swsetup_r+0xe0>
   21b2c:	3080010c 	andi	r2,r6,4
   21b30:	10001b1e 	bne	r2,zero,21ba0 <__swsetup_r+0xf8>
   21b34:	80c00417 	ldw	r3,16(r16)
   21b38:	30800214 	ori	r2,r6,8
   21b3c:	8080030d 	sth	r2,12(r16)
   21b40:	183feb1e 	bne	r3,zero,21af0 <__alt_data_end+0xf4021af0>
   21b44:	1140a00c 	andi	r5,r2,640
   21b48:	01008004 	movi	r4,512
   21b4c:	293fe826 	beq	r5,r4,21af0 <__alt_data_end+0xf4021af0>
   21b50:	8809883a 	mov	r4,r17
   21b54:	800b883a 	mov	r5,r16
   21b58:	00227680 	call	22768 <__smakebuf_r>
   21b5c:	8080030b 	ldhu	r2,12(r16)
   21b60:	80c00417 	ldw	r3,16(r16)
   21b64:	003fe206 	br	21af0 <__alt_data_end+0xf4021af0>
   21b68:	80800517 	ldw	r2,20(r16)
   21b6c:	80000215 	stw	zero,8(r16)
   21b70:	0085c83a 	sub	r2,zero,r2
   21b74:	80800615 	stw	r2,24(r16)
   21b78:	183fe41e 	bne	r3,zero,21b0c <__alt_data_end+0xf4021b0c>
   21b7c:	8080030b 	ldhu	r2,12(r16)
   21b80:	1080200c 	andi	r2,r2,128
   21b84:	103fe226 	beq	r2,zero,21b10 <__alt_data_end+0xf4021b10>
   21b88:	00bfffc4 	movi	r2,-1
   21b8c:	003fe006 	br	21b10 <__alt_data_end+0xf4021b10>
   21b90:	00221940 	call	22194 <__sinit>
   21b94:	003fd006 	br	21ad8 <__alt_data_end+0xf4021ad8>
   21b98:	0005883a 	mov	r2,zero
   21b9c:	003fd906 	br	21b04 <__alt_data_end+0xf4021b04>
   21ba0:	81400c17 	ldw	r5,48(r16)
   21ba4:	28000626 	beq	r5,zero,21bc0 <__swsetup_r+0x118>
   21ba8:	80801004 	addi	r2,r16,64
   21bac:	28800326 	beq	r5,r2,21bbc <__swsetup_r+0x114>
   21bb0:	8809883a 	mov	r4,r17
   21bb4:	00223080 	call	22308 <_free_r>
   21bb8:	8180030b 	ldhu	r6,12(r16)
   21bbc:	80000c15 	stw	zero,48(r16)
   21bc0:	80c00417 	ldw	r3,16(r16)
   21bc4:	00bff6c4 	movi	r2,-37
   21bc8:	118c703a 	and	r6,r2,r6
   21bcc:	80000115 	stw	zero,4(r16)
   21bd0:	80c00015 	stw	r3,0(r16)
   21bd4:	003fd806 	br	21b38 <__alt_data_end+0xf4021b38>

00021bd8 <_fflush_r>:
   21bd8:	defffb04 	addi	sp,sp,-20
   21bdc:	dcc00315 	stw	r19,12(sp)
   21be0:	dc000015 	stw	r16,0(sp)
   21be4:	dfc00415 	stw	ra,16(sp)
   21be8:	dc800215 	stw	r18,8(sp)
   21bec:	dc400115 	stw	r17,4(sp)
   21bf0:	2027883a 	mov	r19,r4
   21bf4:	2821883a 	mov	r16,r5
   21bf8:	20000226 	beq	r4,zero,21c04 <_fflush_r+0x2c>
   21bfc:	20800e17 	ldw	r2,56(r4)
   21c00:	10005326 	beq	r2,zero,21d50 <_fflush_r+0x178>
   21c04:	8080030b 	ldhu	r2,12(r16)
   21c08:	10ffffcc 	andi	r3,r2,65535
   21c0c:	18e0001c 	xori	r3,r3,32768
   21c10:	18e00004 	addi	r3,r3,-32768
   21c14:	18002c26 	beq	r3,zero,21cc8 <_fflush_r+0xf0>
   21c18:	10c0020c 	andi	r3,r2,8
   21c1c:	1800321e 	bne	r3,zero,21ce8 <_fflush_r+0x110>
   21c20:	80c00117 	ldw	r3,4(r16)
   21c24:	10820014 	ori	r2,r2,2048
   21c28:	8080030d 	sth	r2,12(r16)
   21c2c:	00c0570e 	bge	zero,r3,21d8c <_fflush_r+0x1b4>
   21c30:	82000a17 	ldw	r8,40(r16)
   21c34:	40002426 	beq	r8,zero,21cc8 <_fflush_r+0xf0>
   21c38:	9c400017 	ldw	r17,0(r19)
   21c3c:	10c4000c 	andi	r3,r2,4096
   21c40:	98000015 	stw	zero,0(r19)
   21c44:	18004626 	beq	r3,zero,21d60 <_fflush_r+0x188>
   21c48:	81801417 	ldw	r6,80(r16)
   21c4c:	10c0010c 	andi	r3,r2,4
   21c50:	18000626 	beq	r3,zero,21c6c <_fflush_r+0x94>
   21c54:	80c00117 	ldw	r3,4(r16)
   21c58:	80800c17 	ldw	r2,48(r16)
   21c5c:	30cdc83a 	sub	r6,r6,r3
   21c60:	10000226 	beq	r2,zero,21c6c <_fflush_r+0x94>
   21c64:	80800f17 	ldw	r2,60(r16)
   21c68:	308dc83a 	sub	r6,r6,r2
   21c6c:	81400717 	ldw	r5,28(r16)
   21c70:	9809883a 	mov	r4,r19
   21c74:	000f883a 	mov	r7,zero
   21c78:	403ee83a 	callr	r8
   21c7c:	00ffffc4 	movi	r3,-1
   21c80:	10c04526 	beq	r2,r3,21d98 <_fflush_r+0x1c0>
   21c84:	80c0030b 	ldhu	r3,12(r16)
   21c88:	81000417 	ldw	r4,16(r16)
   21c8c:	80000115 	stw	zero,4(r16)
   21c90:	197dffcc 	andi	r5,r3,63487
   21c94:	8140030d 	sth	r5,12(r16)
   21c98:	81000015 	stw	r4,0(r16)
   21c9c:	18c4000c 	andi	r3,r3,4096
   21ca0:	18000126 	beq	r3,zero,21ca8 <_fflush_r+0xd0>
   21ca4:	80801415 	stw	r2,80(r16)
   21ca8:	81400c17 	ldw	r5,48(r16)
   21cac:	9c400015 	stw	r17,0(r19)
   21cb0:	28000526 	beq	r5,zero,21cc8 <_fflush_r+0xf0>
   21cb4:	80801004 	addi	r2,r16,64
   21cb8:	28800226 	beq	r5,r2,21cc4 <_fflush_r+0xec>
   21cbc:	9809883a 	mov	r4,r19
   21cc0:	00223080 	call	22308 <_free_r>
   21cc4:	80000c15 	stw	zero,48(r16)
   21cc8:	0005883a 	mov	r2,zero
   21ccc:	dfc00417 	ldw	ra,16(sp)
   21cd0:	dcc00317 	ldw	r19,12(sp)
   21cd4:	dc800217 	ldw	r18,8(sp)
   21cd8:	dc400117 	ldw	r17,4(sp)
   21cdc:	dc000017 	ldw	r16,0(sp)
   21ce0:	dec00504 	addi	sp,sp,20
   21ce4:	f800283a 	ret
   21ce8:	84800417 	ldw	r18,16(r16)
   21cec:	903ff626 	beq	r18,zero,21cc8 <__alt_data_end+0xf4021cc8>
   21cf0:	84400017 	ldw	r17,0(r16)
   21cf4:	108000cc 	andi	r2,r2,3
   21cf8:	84800015 	stw	r18,0(r16)
   21cfc:	8ca3c83a 	sub	r17,r17,r18
   21d00:	10001526 	beq	r2,zero,21d58 <_fflush_r+0x180>
   21d04:	0005883a 	mov	r2,zero
   21d08:	80800215 	stw	r2,8(r16)
   21d0c:	04400316 	blt	zero,r17,21d1c <_fflush_r+0x144>
   21d10:	003fed06 	br	21cc8 <__alt_data_end+0xf4021cc8>
   21d14:	90a5883a 	add	r18,r18,r2
   21d18:	047feb0e 	bge	zero,r17,21cc8 <__alt_data_end+0xf4021cc8>
   21d1c:	80800917 	ldw	r2,36(r16)
   21d20:	81400717 	ldw	r5,28(r16)
   21d24:	880f883a 	mov	r7,r17
   21d28:	900d883a 	mov	r6,r18
   21d2c:	9809883a 	mov	r4,r19
   21d30:	103ee83a 	callr	r2
   21d34:	88a3c83a 	sub	r17,r17,r2
   21d38:	00bff616 	blt	zero,r2,21d14 <__alt_data_end+0xf4021d14>
   21d3c:	80c0030b 	ldhu	r3,12(r16)
   21d40:	00bfffc4 	movi	r2,-1
   21d44:	18c01014 	ori	r3,r3,64
   21d48:	80c0030d 	sth	r3,12(r16)
   21d4c:	003fdf06 	br	21ccc <__alt_data_end+0xf4021ccc>
   21d50:	00221940 	call	22194 <__sinit>
   21d54:	003fab06 	br	21c04 <__alt_data_end+0xf4021c04>
   21d58:	80800517 	ldw	r2,20(r16)
   21d5c:	003fea06 	br	21d08 <__alt_data_end+0xf4021d08>
   21d60:	81400717 	ldw	r5,28(r16)
   21d64:	000d883a 	mov	r6,zero
   21d68:	9809883a 	mov	r4,r19
   21d6c:	01c00044 	movi	r7,1
   21d70:	403ee83a 	callr	r8
   21d74:	100d883a 	mov	r6,r2
   21d78:	00bfffc4 	movi	r2,-1
   21d7c:	30801326 	beq	r6,r2,21dcc <_fflush_r+0x1f4>
   21d80:	8080030b 	ldhu	r2,12(r16)
   21d84:	82000a17 	ldw	r8,40(r16)
   21d88:	003fb006 	br	21c4c <__alt_data_end+0xf4021c4c>
   21d8c:	80c00f17 	ldw	r3,60(r16)
   21d90:	00ffa716 	blt	zero,r3,21c30 <__alt_data_end+0xf4021c30>
   21d94:	003fcc06 	br	21cc8 <__alt_data_end+0xf4021cc8>
   21d98:	98c00017 	ldw	r3,0(r19)
   21d9c:	183fb926 	beq	r3,zero,21c84 <__alt_data_end+0xf4021c84>
   21da0:	01000744 	movi	r4,29
   21da4:	19000226 	beq	r3,r4,21db0 <_fflush_r+0x1d8>
   21da8:	01000584 	movi	r4,22
   21dac:	1900101e 	bne	r3,r4,21df0 <_fflush_r+0x218>
   21db0:	8080030b 	ldhu	r2,12(r16)
   21db4:	80c00417 	ldw	r3,16(r16)
   21db8:	80000115 	stw	zero,4(r16)
   21dbc:	10bdffcc 	andi	r2,r2,63487
   21dc0:	8080030d 	sth	r2,12(r16)
   21dc4:	80c00015 	stw	r3,0(r16)
   21dc8:	003fb706 	br	21ca8 <__alt_data_end+0xf4021ca8>
   21dcc:	98800017 	ldw	r2,0(r19)
   21dd0:	103feb26 	beq	r2,zero,21d80 <__alt_data_end+0xf4021d80>
   21dd4:	00c00744 	movi	r3,29
   21dd8:	10c00226 	beq	r2,r3,21de4 <_fflush_r+0x20c>
   21ddc:	00c00584 	movi	r3,22
   21de0:	10ffd61e 	bne	r2,r3,21d3c <__alt_data_end+0xf4021d3c>
   21de4:	9c400015 	stw	r17,0(r19)
   21de8:	0005883a 	mov	r2,zero
   21dec:	003fb706 	br	21ccc <__alt_data_end+0xf4021ccc>
   21df0:	80c0030b 	ldhu	r3,12(r16)
   21df4:	18c01014 	ori	r3,r3,64
   21df8:	80c0030d 	sth	r3,12(r16)
   21dfc:	003fb306 	br	21ccc <__alt_data_end+0xf4021ccc>

00021e00 <fflush>:
   21e00:	20000526 	beq	r4,zero,21e18 <fflush+0x18>
   21e04:	00820034 	movhi	r2,2048
   21e08:	1086d404 	addi	r2,r2,6992
   21e0c:	200b883a 	mov	r5,r4
   21e10:	11000017 	ldw	r4,0(r2)
   21e14:	0021bd81 	jmpi	21bd8 <_fflush_r>
   21e18:	00820034 	movhi	r2,2048
   21e1c:	1086d304 	addi	r2,r2,6988
   21e20:	11000017 	ldw	r4,0(r2)
   21e24:	014000b4 	movhi	r5,2
   21e28:	2946f604 	addi	r5,r5,7128
   21e2c:	00226b01 	jmpi	226b0 <_fwalk_reent>

00021e30 <__fp_lock>:
   21e30:	0005883a 	mov	r2,zero
   21e34:	f800283a 	ret

00021e38 <__fp_unlock>:
   21e38:	0005883a 	mov	r2,zero
   21e3c:	f800283a 	ret

00021e40 <_cleanup_r>:
   21e40:	014000b4 	movhi	r5,2
   21e44:	294b4c04 	addi	r5,r5,11568
   21e48:	00225f81 	jmpi	225f8 <_fwalk>

00021e4c <__sinit.part.1>:
   21e4c:	defff604 	addi	sp,sp,-40
   21e50:	00c000b4 	movhi	r3,2
   21e54:	dfc00915 	stw	ra,36(sp)
   21e58:	df000815 	stw	fp,32(sp)
   21e5c:	ddc00715 	stw	r23,28(sp)
   21e60:	dd800615 	stw	r22,24(sp)
   21e64:	dd400515 	stw	r21,20(sp)
   21e68:	dd000415 	stw	r20,16(sp)
   21e6c:	dcc00315 	stw	r19,12(sp)
   21e70:	dc800215 	stw	r18,8(sp)
   21e74:	dc400115 	stw	r17,4(sp)
   21e78:	dc000015 	stw	r16,0(sp)
   21e7c:	18c79004 	addi	r3,r3,7744
   21e80:	24000117 	ldw	r16,4(r4)
   21e84:	20c00f15 	stw	r3,60(r4)
   21e88:	07000044 	movi	fp,1
   21e8c:	00c000c4 	movi	r3,3
   21e90:	2080bb04 	addi	r2,r4,748
   21e94:	20c0b915 	stw	r3,740(r4)
   21e98:	27000e15 	stw	fp,56(r4)
   21e9c:	2080ba15 	stw	r2,744(r4)
   21ea0:	2000b815 	stw	zero,736(r4)
   21ea4:	05c00204 	movi	r23,8
   21ea8:	00800104 	movi	r2,4
   21eac:	2025883a 	mov	r18,r4
   21eb0:	b80d883a 	mov	r6,r23
   21eb4:	81001704 	addi	r4,r16,92
   21eb8:	000b883a 	mov	r5,zero
   21ebc:	80000015 	stw	zero,0(r16)
   21ec0:	80000115 	stw	zero,4(r16)
   21ec4:	80000215 	stw	zero,8(r16)
   21ec8:	8080030d 	sth	r2,12(r16)
   21ecc:	80001915 	stw	zero,100(r16)
   21ed0:	8000038d 	sth	zero,14(r16)
   21ed4:	80000415 	stw	zero,16(r16)
   21ed8:	80000515 	stw	zero,20(r16)
   21edc:	80000615 	stw	zero,24(r16)
   21ee0:	00229200 	call	22920 <memset>
   21ee4:	058000b4 	movhi	r22,2
   21ee8:	94400217 	ldw	r17,8(r18)
   21eec:	054000b4 	movhi	r21,2
   21ef0:	050000b4 	movhi	r20,2
   21ef4:	04c000b4 	movhi	r19,2
   21ef8:	b58a9104 	addi	r22,r22,10820
   21efc:	ad4aa804 	addi	r21,r21,10912
   21f00:	a50ac704 	addi	r20,r20,11036
   21f04:	9ccade04 	addi	r19,r19,11128
   21f08:	85800815 	stw	r22,32(r16)
   21f0c:	85400915 	stw	r21,36(r16)
   21f10:	85000a15 	stw	r20,40(r16)
   21f14:	84c00b15 	stw	r19,44(r16)
   21f18:	84000715 	stw	r16,28(r16)
   21f1c:	00800284 	movi	r2,10
   21f20:	89001704 	addi	r4,r17,92
   21f24:	b80d883a 	mov	r6,r23
   21f28:	000b883a 	mov	r5,zero
   21f2c:	88000015 	stw	zero,0(r17)
   21f30:	88000115 	stw	zero,4(r17)
   21f34:	88000215 	stw	zero,8(r17)
   21f38:	8880030d 	sth	r2,12(r17)
   21f3c:	88001915 	stw	zero,100(r17)
   21f40:	8f00038d 	sth	fp,14(r17)
   21f44:	88000415 	stw	zero,16(r17)
   21f48:	88000515 	stw	zero,20(r17)
   21f4c:	88000615 	stw	zero,24(r17)
   21f50:	00229200 	call	22920 <memset>
   21f54:	94000317 	ldw	r16,12(r18)
   21f58:	00800484 	movi	r2,18
   21f5c:	8c400715 	stw	r17,28(r17)
   21f60:	8d800815 	stw	r22,32(r17)
   21f64:	8d400915 	stw	r21,36(r17)
   21f68:	8d000a15 	stw	r20,40(r17)
   21f6c:	8cc00b15 	stw	r19,44(r17)
   21f70:	8080030d 	sth	r2,12(r16)
   21f74:	00800084 	movi	r2,2
   21f78:	80000015 	stw	zero,0(r16)
   21f7c:	80000115 	stw	zero,4(r16)
   21f80:	80000215 	stw	zero,8(r16)
   21f84:	80001915 	stw	zero,100(r16)
   21f88:	8080038d 	sth	r2,14(r16)
   21f8c:	80000415 	stw	zero,16(r16)
   21f90:	80000515 	stw	zero,20(r16)
   21f94:	80000615 	stw	zero,24(r16)
   21f98:	81001704 	addi	r4,r16,92
   21f9c:	000b883a 	mov	r5,zero
   21fa0:	b80d883a 	mov	r6,r23
   21fa4:	00229200 	call	22920 <memset>
   21fa8:	84000715 	stw	r16,28(r16)
   21fac:	85800815 	stw	r22,32(r16)
   21fb0:	85400915 	stw	r21,36(r16)
   21fb4:	85000a15 	stw	r20,40(r16)
   21fb8:	84c00b15 	stw	r19,44(r16)
   21fbc:	dfc00917 	ldw	ra,36(sp)
   21fc0:	df000817 	ldw	fp,32(sp)
   21fc4:	ddc00717 	ldw	r23,28(sp)
   21fc8:	dd800617 	ldw	r22,24(sp)
   21fcc:	dd400517 	ldw	r21,20(sp)
   21fd0:	dd000417 	ldw	r20,16(sp)
   21fd4:	dcc00317 	ldw	r19,12(sp)
   21fd8:	dc800217 	ldw	r18,8(sp)
   21fdc:	dc400117 	ldw	r17,4(sp)
   21fe0:	dc000017 	ldw	r16,0(sp)
   21fe4:	dec00a04 	addi	sp,sp,40
   21fe8:	f800283a 	ret

00021fec <__sfmoreglue>:
   21fec:	defffc04 	addi	sp,sp,-16
   21ff0:	dc800215 	stw	r18,8(sp)
   21ff4:	2825883a 	mov	r18,r5
   21ff8:	dc000015 	stw	r16,0(sp)
   21ffc:	01401a04 	movi	r5,104
   22000:	2021883a 	mov	r16,r4
   22004:	9009883a 	mov	r4,r18
   22008:	dfc00315 	stw	ra,12(sp)
   2200c:	dc400115 	stw	r17,4(sp)
   22010:	0022ea80 	call	22ea8 <__mulsi3>
   22014:	8009883a 	mov	r4,r16
   22018:	11400304 	addi	r5,r2,12
   2201c:	1023883a 	mov	r17,r2
   22020:	00209900 	call	20990 <_malloc_r>
   22024:	1021883a 	mov	r16,r2
   22028:	10000726 	beq	r2,zero,22048 <__sfmoreglue+0x5c>
   2202c:	11000304 	addi	r4,r2,12
   22030:	10000015 	stw	zero,0(r2)
   22034:	14800115 	stw	r18,4(r2)
   22038:	11000215 	stw	r4,8(r2)
   2203c:	000b883a 	mov	r5,zero
   22040:	880d883a 	mov	r6,r17
   22044:	00229200 	call	22920 <memset>
   22048:	8005883a 	mov	r2,r16
   2204c:	dfc00317 	ldw	ra,12(sp)
   22050:	dc800217 	ldw	r18,8(sp)
   22054:	dc400117 	ldw	r17,4(sp)
   22058:	dc000017 	ldw	r16,0(sp)
   2205c:	dec00404 	addi	sp,sp,16
   22060:	f800283a 	ret

00022064 <__sfp>:
   22064:	00820034 	movhi	r2,2048
   22068:	defffb04 	addi	sp,sp,-20
   2206c:	1086d304 	addi	r2,r2,6988
   22070:	dc800215 	stw	r18,8(sp)
   22074:	14800017 	ldw	r18,0(r2)
   22078:	dcc00315 	stw	r19,12(sp)
   2207c:	dfc00415 	stw	ra,16(sp)
   22080:	90800e17 	ldw	r2,56(r18)
   22084:	dc400115 	stw	r17,4(sp)
   22088:	dc000015 	stw	r16,0(sp)
   2208c:	2027883a 	mov	r19,r4
   22090:	1000021e 	bne	r2,zero,2209c <__sfp+0x38>
   22094:	9009883a 	mov	r4,r18
   22098:	0021e4c0 	call	21e4c <__sinit.part.1>
   2209c:	9480b804 	addi	r18,r18,736
   220a0:	047fffc4 	movi	r17,-1
   220a4:	91400117 	ldw	r5,4(r18)
   220a8:	94000217 	ldw	r16,8(r18)
   220ac:	297fffc4 	addi	r5,r5,-1
   220b0:	28000a16 	blt	r5,zero,220dc <__sfp+0x78>
   220b4:	8080030f 	ldh	r2,12(r16)
   220b8:	10000c26 	beq	r2,zero,220ec <__sfp+0x88>
   220bc:	80c01d04 	addi	r3,r16,116
   220c0:	00000206 	br	220cc <__sfp+0x68>
   220c4:	18bfe60f 	ldh	r2,-104(r3)
   220c8:	10000826 	beq	r2,zero,220ec <__sfp+0x88>
   220cc:	297fffc4 	addi	r5,r5,-1
   220d0:	1c3ffd04 	addi	r16,r3,-12
   220d4:	18c01a04 	addi	r3,r3,104
   220d8:	2c7ffa1e 	bne	r5,r17,220c4 <__alt_data_end+0xf40220c4>
   220dc:	90800017 	ldw	r2,0(r18)
   220e0:	10001d26 	beq	r2,zero,22158 <__sfp+0xf4>
   220e4:	1025883a 	mov	r18,r2
   220e8:	003fee06 	br	220a4 <__alt_data_end+0xf40220a4>
   220ec:	00bfffc4 	movi	r2,-1
   220f0:	8080038d 	sth	r2,14(r16)
   220f4:	00800044 	movi	r2,1
   220f8:	8080030d 	sth	r2,12(r16)
   220fc:	80001915 	stw	zero,100(r16)
   22100:	80000015 	stw	zero,0(r16)
   22104:	80000215 	stw	zero,8(r16)
   22108:	80000115 	stw	zero,4(r16)
   2210c:	80000415 	stw	zero,16(r16)
   22110:	80000515 	stw	zero,20(r16)
   22114:	80000615 	stw	zero,24(r16)
   22118:	81001704 	addi	r4,r16,92
   2211c:	000b883a 	mov	r5,zero
   22120:	01800204 	movi	r6,8
   22124:	00229200 	call	22920 <memset>
   22128:	8005883a 	mov	r2,r16
   2212c:	80000c15 	stw	zero,48(r16)
   22130:	80000d15 	stw	zero,52(r16)
   22134:	80001115 	stw	zero,68(r16)
   22138:	80001215 	stw	zero,72(r16)
   2213c:	dfc00417 	ldw	ra,16(sp)
   22140:	dcc00317 	ldw	r19,12(sp)
   22144:	dc800217 	ldw	r18,8(sp)
   22148:	dc400117 	ldw	r17,4(sp)
   2214c:	dc000017 	ldw	r16,0(sp)
   22150:	dec00504 	addi	sp,sp,20
   22154:	f800283a 	ret
   22158:	9809883a 	mov	r4,r19
   2215c:	01400104 	movi	r5,4
   22160:	0021fec0 	call	21fec <__sfmoreglue>
   22164:	90800015 	stw	r2,0(r18)
   22168:	103fde1e 	bne	r2,zero,220e4 <__alt_data_end+0xf40220e4>
   2216c:	00800304 	movi	r2,12
   22170:	98800015 	stw	r2,0(r19)
   22174:	0005883a 	mov	r2,zero
   22178:	003ff006 	br	2213c <__alt_data_end+0xf402213c>

0002217c <_cleanup>:
   2217c:	00820034 	movhi	r2,2048
   22180:	1086d304 	addi	r2,r2,6988
   22184:	11000017 	ldw	r4,0(r2)
   22188:	014000b4 	movhi	r5,2
   2218c:	294b4c04 	addi	r5,r5,11568
   22190:	00225f81 	jmpi	225f8 <_fwalk>

00022194 <__sinit>:
   22194:	20800e17 	ldw	r2,56(r4)
   22198:	10000126 	beq	r2,zero,221a0 <__sinit+0xc>
   2219c:	f800283a 	ret
   221a0:	0021e4c1 	jmpi	21e4c <__sinit.part.1>

000221a4 <__sfp_lock_acquire>:
   221a4:	f800283a 	ret

000221a8 <__sfp_lock_release>:
   221a8:	f800283a 	ret

000221ac <__sinit_lock_acquire>:
   221ac:	f800283a 	ret

000221b0 <__sinit_lock_release>:
   221b0:	f800283a 	ret

000221b4 <__fp_lock_all>:
   221b4:	00820034 	movhi	r2,2048
   221b8:	1086d404 	addi	r2,r2,6992
   221bc:	11000017 	ldw	r4,0(r2)
   221c0:	014000b4 	movhi	r5,2
   221c4:	29478c04 	addi	r5,r5,7728
   221c8:	00225f81 	jmpi	225f8 <_fwalk>

000221cc <__fp_unlock_all>:
   221cc:	00820034 	movhi	r2,2048
   221d0:	1086d404 	addi	r2,r2,6992
   221d4:	11000017 	ldw	r4,0(r2)
   221d8:	014000b4 	movhi	r5,2
   221dc:	29478e04 	addi	r5,r5,7736
   221e0:	00225f81 	jmpi	225f8 <_fwalk>

000221e4 <_malloc_trim_r>:
   221e4:	defffb04 	addi	sp,sp,-20
   221e8:	dcc00315 	stw	r19,12(sp)
   221ec:	04c20034 	movhi	r19,2048
   221f0:	dc800215 	stw	r18,8(sp)
   221f4:	dc400115 	stw	r17,4(sp)
   221f8:	dc000015 	stw	r16,0(sp)
   221fc:	dfc00415 	stw	ra,16(sp)
   22200:	2821883a 	mov	r16,r5
   22204:	9cc13904 	addi	r19,r19,1252
   22208:	2025883a 	mov	r18,r4
   2220c:	00234b00 	call	234b0 <__malloc_lock>
   22210:	98800217 	ldw	r2,8(r19)
   22214:	14400117 	ldw	r17,4(r2)
   22218:	00bfff04 	movi	r2,-4
   2221c:	88a2703a 	and	r17,r17,r2
   22220:	8c21c83a 	sub	r16,r17,r16
   22224:	8403fbc4 	addi	r16,r16,4079
   22228:	8020d33a 	srli	r16,r16,12
   2222c:	0083ffc4 	movi	r2,4095
   22230:	843fffc4 	addi	r16,r16,-1
   22234:	8020933a 	slli	r16,r16,12
   22238:	1400060e 	bge	r2,r16,22254 <_malloc_trim_r+0x70>
   2223c:	9009883a 	mov	r4,r18
   22240:	000b883a 	mov	r5,zero
   22244:	0021a540 	call	21a54 <_sbrk_r>
   22248:	98c00217 	ldw	r3,8(r19)
   2224c:	1c47883a 	add	r3,r3,r17
   22250:	10c00a26 	beq	r2,r3,2227c <_malloc_trim_r+0x98>
   22254:	9009883a 	mov	r4,r18
   22258:	00234d00 	call	234d0 <__malloc_unlock>
   2225c:	0005883a 	mov	r2,zero
   22260:	dfc00417 	ldw	ra,16(sp)
   22264:	dcc00317 	ldw	r19,12(sp)
   22268:	dc800217 	ldw	r18,8(sp)
   2226c:	dc400117 	ldw	r17,4(sp)
   22270:	dc000017 	ldw	r16,0(sp)
   22274:	dec00504 	addi	sp,sp,20
   22278:	f800283a 	ret
   2227c:	9009883a 	mov	r4,r18
   22280:	040bc83a 	sub	r5,zero,r16
   22284:	0021a540 	call	21a54 <_sbrk_r>
   22288:	00ffffc4 	movi	r3,-1
   2228c:	10c00d26 	beq	r2,r3,222c4 <_malloc_trim_r+0xe0>
   22290:	00c20034 	movhi	r3,2048
   22294:	18c6ec04 	addi	r3,r3,7088
   22298:	18800017 	ldw	r2,0(r3)
   2229c:	99000217 	ldw	r4,8(r19)
   222a0:	8c23c83a 	sub	r17,r17,r16
   222a4:	8c400054 	ori	r17,r17,1
   222a8:	1421c83a 	sub	r16,r2,r16
   222ac:	24400115 	stw	r17,4(r4)
   222b0:	9009883a 	mov	r4,r18
   222b4:	1c000015 	stw	r16,0(r3)
   222b8:	00234d00 	call	234d0 <__malloc_unlock>
   222bc:	00800044 	movi	r2,1
   222c0:	003fe706 	br	22260 <__alt_data_end+0xf4022260>
   222c4:	9009883a 	mov	r4,r18
   222c8:	000b883a 	mov	r5,zero
   222cc:	0021a540 	call	21a54 <_sbrk_r>
   222d0:	99000217 	ldw	r4,8(r19)
   222d4:	014003c4 	movi	r5,15
   222d8:	1107c83a 	sub	r3,r2,r4
   222dc:	28ffdd0e 	bge	r5,r3,22254 <__alt_data_end+0xf4022254>
   222e0:	01420034 	movhi	r5,2048
   222e4:	2946d504 	addi	r5,r5,6996
   222e8:	29400017 	ldw	r5,0(r5)
   222ec:	18c00054 	ori	r3,r3,1
   222f0:	20c00115 	stw	r3,4(r4)
   222f4:	00c20034 	movhi	r3,2048
   222f8:	1145c83a 	sub	r2,r2,r5
   222fc:	18c6ec04 	addi	r3,r3,7088
   22300:	18800015 	stw	r2,0(r3)
   22304:	003fd306 	br	22254 <__alt_data_end+0xf4022254>

00022308 <_free_r>:
   22308:	28004c26 	beq	r5,zero,2243c <_free_r+0x134>
   2230c:	defffd04 	addi	sp,sp,-12
   22310:	dc400115 	stw	r17,4(sp)
   22314:	dc000015 	stw	r16,0(sp)
   22318:	2023883a 	mov	r17,r4
   2231c:	2821883a 	mov	r16,r5
   22320:	dfc00215 	stw	ra,8(sp)
   22324:	00234b00 	call	234b0 <__malloc_lock>
   22328:	813fff17 	ldw	r4,-4(r16)
   2232c:	00bfff84 	movi	r2,-2
   22330:	02420034 	movhi	r9,2048
   22334:	81bffe04 	addi	r6,r16,-8
   22338:	2084703a 	and	r2,r4,r2
   2233c:	4a413904 	addi	r9,r9,1252
   22340:	308b883a 	add	r5,r6,r2
   22344:	2a000117 	ldw	r8,4(r5)
   22348:	49c00217 	ldw	r7,8(r9)
   2234c:	00ffff04 	movi	r3,-4
   22350:	40c6703a 	and	r3,r8,r3
   22354:	39405326 	beq	r7,r5,224a4 <_free_r+0x19c>
   22358:	28c00115 	stw	r3,4(r5)
   2235c:	2100004c 	andi	r4,r4,1
   22360:	2000091e 	bne	r4,zero,22388 <_free_r+0x80>
   22364:	81fffe17 	ldw	r7,-8(r16)
   22368:	4a000204 	addi	r8,r9,8
   2236c:	31cdc83a 	sub	r6,r6,r7
   22370:	31000217 	ldw	r4,8(r6)
   22374:	11c5883a 	add	r2,r2,r7
   22378:	22006126 	beq	r4,r8,22500 <_free_r+0x1f8>
   2237c:	31c00317 	ldw	r7,12(r6)
   22380:	21c00315 	stw	r7,12(r4)
   22384:	39000215 	stw	r4,8(r7)
   22388:	28c9883a 	add	r4,r5,r3
   2238c:	21c00117 	ldw	r7,4(r4)
   22390:	39c0004c 	andi	r7,r7,1
   22394:	38000d1e 	bne	r7,zero,223cc <_free_r+0xc4>
   22398:	29000217 	ldw	r4,8(r5)
   2239c:	10c5883a 	add	r2,r2,r3
   223a0:	00c20034 	movhi	r3,2048
   223a4:	18c13b04 	addi	r3,r3,1260
   223a8:	20c07526 	beq	r4,r3,22580 <_free_r+0x278>
   223ac:	29c00317 	ldw	r7,12(r5)
   223b0:	11400054 	ori	r5,r2,1
   223b4:	3087883a 	add	r3,r6,r2
   223b8:	21c00315 	stw	r7,12(r4)
   223bc:	39000215 	stw	r4,8(r7)
   223c0:	31400115 	stw	r5,4(r6)
   223c4:	18800015 	stw	r2,0(r3)
   223c8:	00000406 	br	223dc <_free_r+0xd4>
   223cc:	10c00054 	ori	r3,r2,1
   223d0:	30c00115 	stw	r3,4(r6)
   223d4:	3087883a 	add	r3,r6,r2
   223d8:	18800015 	stw	r2,0(r3)
   223dc:	00c07fc4 	movi	r3,511
   223e0:	18801736 	bltu	r3,r2,22440 <_free_r+0x138>
   223e4:	1004d0fa 	srli	r2,r2,3
   223e8:	01400044 	movi	r5,1
   223ec:	49000117 	ldw	r4,4(r9)
   223f0:	1087883a 	add	r3,r2,r2
   223f4:	18c7883a 	add	r3,r3,r3
   223f8:	1005d0ba 	srai	r2,r2,2
   223fc:	18c7883a 	add	r3,r3,r3
   22400:	1a47883a 	add	r3,r3,r9
   22404:	19c00217 	ldw	r7,8(r3)
   22408:	2884983a 	sll	r2,r5,r2
   2240c:	30c00315 	stw	r3,12(r6)
   22410:	31c00215 	stw	r7,8(r6)
   22414:	1104b03a 	or	r2,r2,r4
   22418:	19800215 	stw	r6,8(r3)
   2241c:	48800115 	stw	r2,4(r9)
   22420:	39800315 	stw	r6,12(r7)
   22424:	8809883a 	mov	r4,r17
   22428:	dfc00217 	ldw	ra,8(sp)
   2242c:	dc400117 	ldw	r17,4(sp)
   22430:	dc000017 	ldw	r16,0(sp)
   22434:	dec00304 	addi	sp,sp,12
   22438:	00234d01 	jmpi	234d0 <__malloc_unlock>
   2243c:	f800283a 	ret
   22440:	1006d27a 	srli	r3,r2,9
   22444:	01000104 	movi	r4,4
   22448:	20c04036 	bltu	r4,r3,2254c <_free_r+0x244>
   2244c:	1006d1ba 	srli	r3,r2,6
   22450:	19400e04 	addi	r5,r3,56
   22454:	2947883a 	add	r3,r5,r5
   22458:	18c7883a 	add	r3,r3,r3
   2245c:	18c7883a 	add	r3,r3,r3
   22460:	1a49883a 	add	r4,r3,r9
   22464:	20c00217 	ldw	r3,8(r4)
   22468:	01c20034 	movhi	r7,2048
   2246c:	39c13904 	addi	r7,r7,1252
   22470:	19003b26 	beq	r3,r4,22560 <_free_r+0x258>
   22474:	01ffff04 	movi	r7,-4
   22478:	19400117 	ldw	r5,4(r3)
   2247c:	29ca703a 	and	r5,r5,r7
   22480:	1140022e 	bgeu	r2,r5,2248c <_free_r+0x184>
   22484:	18c00217 	ldw	r3,8(r3)
   22488:	20fffb1e 	bne	r4,r3,22478 <__alt_data_end+0xf4022478>
   2248c:	18800317 	ldw	r2,12(r3)
   22490:	30800315 	stw	r2,12(r6)
   22494:	30c00215 	stw	r3,8(r6)
   22498:	11800215 	stw	r6,8(r2)
   2249c:	19800315 	stw	r6,12(r3)
   224a0:	003fe006 	br	22424 <__alt_data_end+0xf4022424>
   224a4:	2100004c 	andi	r4,r4,1
   224a8:	1885883a 	add	r2,r3,r2
   224ac:	2000071e 	bne	r4,zero,224cc <_free_r+0x1c4>
   224b0:	817ffe17 	ldw	r5,-8(r16)
   224b4:	314dc83a 	sub	r6,r6,r5
   224b8:	30c00317 	ldw	r3,12(r6)
   224bc:	31000217 	ldw	r4,8(r6)
   224c0:	1145883a 	add	r2,r2,r5
   224c4:	20c00315 	stw	r3,12(r4)
   224c8:	19000215 	stw	r4,8(r3)
   224cc:	10c00054 	ori	r3,r2,1
   224d0:	30c00115 	stw	r3,4(r6)
   224d4:	00c20034 	movhi	r3,2048
   224d8:	18c6d604 	addi	r3,r3,7000
   224dc:	18c00017 	ldw	r3,0(r3)
   224e0:	49800215 	stw	r6,8(r9)
   224e4:	10ffcf36 	bltu	r2,r3,22424 <__alt_data_end+0xf4022424>
   224e8:	00820034 	movhi	r2,2048
   224ec:	1086e304 	addi	r2,r2,7052
   224f0:	11400017 	ldw	r5,0(r2)
   224f4:	8809883a 	mov	r4,r17
   224f8:	00221e40 	call	221e4 <_malloc_trim_r>
   224fc:	003fc906 	br	22424 <__alt_data_end+0xf4022424>
   22500:	28c9883a 	add	r4,r5,r3
   22504:	21000117 	ldw	r4,4(r4)
   22508:	2100004c 	andi	r4,r4,1
   2250c:	20000a1e 	bne	r4,zero,22538 <_free_r+0x230>
   22510:	29000317 	ldw	r4,12(r5)
   22514:	29400217 	ldw	r5,8(r5)
   22518:	10c5883a 	add	r2,r2,r3
   2251c:	10c00054 	ori	r3,r2,1
   22520:	29000315 	stw	r4,12(r5)
   22524:	21400215 	stw	r5,8(r4)
   22528:	30c00115 	stw	r3,4(r6)
   2252c:	308d883a 	add	r6,r6,r2
   22530:	30800015 	stw	r2,0(r6)
   22534:	003fbb06 	br	22424 <__alt_data_end+0xf4022424>
   22538:	10c00054 	ori	r3,r2,1
   2253c:	30c00115 	stw	r3,4(r6)
   22540:	308d883a 	add	r6,r6,r2
   22544:	30800015 	stw	r2,0(r6)
   22548:	003fb606 	br	22424 <__alt_data_end+0xf4022424>
   2254c:	01000504 	movi	r4,20
   22550:	20c01436 	bltu	r4,r3,225a4 <_free_r+0x29c>
   22554:	194016c4 	addi	r5,r3,91
   22558:	2947883a 	add	r3,r5,r5
   2255c:	003fbe06 	br	22458 <__alt_data_end+0xf4022458>
   22560:	280bd0ba 	srai	r5,r5,2
   22564:	00800044 	movi	r2,1
   22568:	39000117 	ldw	r4,4(r7)
   2256c:	114a983a 	sll	r5,r2,r5
   22570:	1805883a 	mov	r2,r3
   22574:	2908b03a 	or	r4,r5,r4
   22578:	39000115 	stw	r4,4(r7)
   2257c:	003fc406 	br	22490 <__alt_data_end+0xf4022490>
   22580:	49800515 	stw	r6,20(r9)
   22584:	49800415 	stw	r6,16(r9)
   22588:	10c00054 	ori	r3,r2,1
   2258c:	31000315 	stw	r4,12(r6)
   22590:	31000215 	stw	r4,8(r6)
   22594:	30c00115 	stw	r3,4(r6)
   22598:	308d883a 	add	r6,r6,r2
   2259c:	30800015 	stw	r2,0(r6)
   225a0:	003fa006 	br	22424 <__alt_data_end+0xf4022424>
   225a4:	01001504 	movi	r4,84
   225a8:	20c00436 	bltu	r4,r3,225bc <_free_r+0x2b4>
   225ac:	1006d33a 	srli	r3,r2,12
   225b0:	19401b84 	addi	r5,r3,110
   225b4:	2947883a 	add	r3,r5,r5
   225b8:	003fa706 	br	22458 <__alt_data_end+0xf4022458>
   225bc:	01005504 	movi	r4,340
   225c0:	20c00436 	bltu	r4,r3,225d4 <_free_r+0x2cc>
   225c4:	1006d3fa 	srli	r3,r2,15
   225c8:	19401dc4 	addi	r5,r3,119
   225cc:	2947883a 	add	r3,r5,r5
   225d0:	003fa106 	br	22458 <__alt_data_end+0xf4022458>
   225d4:	01015504 	movi	r4,1364
   225d8:	20c00436 	bltu	r4,r3,225ec <_free_r+0x2e4>
   225dc:	1006d4ba 	srli	r3,r2,18
   225e0:	19401f04 	addi	r5,r3,124
   225e4:	2947883a 	add	r3,r5,r5
   225e8:	003f9b06 	br	22458 <__alt_data_end+0xf4022458>
   225ec:	00c03f04 	movi	r3,252
   225f0:	01401f84 	movi	r5,126
   225f4:	003f9806 	br	22458 <__alt_data_end+0xf4022458>

000225f8 <_fwalk>:
   225f8:	defff804 	addi	sp,sp,-32
   225fc:	dd400515 	stw	r21,20(sp)
   22600:	2540b804 	addi	r21,r4,736
   22604:	dd800615 	stw	r22,24(sp)
   22608:	dd000415 	stw	r20,16(sp)
   2260c:	dfc00715 	stw	ra,28(sp)
   22610:	dcc00315 	stw	r19,12(sp)
   22614:	dc800215 	stw	r18,8(sp)
   22618:	dc400115 	stw	r17,4(sp)
   2261c:	dc000015 	stw	r16,0(sp)
   22620:	2829883a 	mov	r20,r5
   22624:	002d883a 	mov	r22,zero
   22628:	00221a40 	call	221a4 <__sfp_lock_acquire>
   2262c:	a8001426 	beq	r21,zero,22680 <_fwalk+0x88>
   22630:	04ffffc4 	movi	r19,-1
   22634:	ac400117 	ldw	r17,4(r21)
   22638:	ac800217 	ldw	r18,8(r21)
   2263c:	8c7fffc4 	addi	r17,r17,-1
   22640:	88000d16 	blt	r17,zero,22678 <_fwalk+0x80>
   22644:	94000304 	addi	r16,r18,12
   22648:	94800384 	addi	r18,r18,14
   2264c:	80c0000f 	ldh	r3,0(r16)
   22650:	8c7fffc4 	addi	r17,r17,-1
   22654:	813ffd04 	addi	r4,r16,-12
   22658:	18000426 	beq	r3,zero,2266c <_fwalk+0x74>
   2265c:	90c0000f 	ldh	r3,0(r18)
   22660:	1cc00226 	beq	r3,r19,2266c <_fwalk+0x74>
   22664:	a03ee83a 	callr	r20
   22668:	b0acb03a 	or	r22,r22,r2
   2266c:	84001a04 	addi	r16,r16,104
   22670:	94801a04 	addi	r18,r18,104
   22674:	8cfff51e 	bne	r17,r19,2264c <__alt_data_end+0xf402264c>
   22678:	ad400017 	ldw	r21,0(r21)
   2267c:	a83fed1e 	bne	r21,zero,22634 <__alt_data_end+0xf4022634>
   22680:	00221a80 	call	221a8 <__sfp_lock_release>
   22684:	b005883a 	mov	r2,r22
   22688:	dfc00717 	ldw	ra,28(sp)
   2268c:	dd800617 	ldw	r22,24(sp)
   22690:	dd400517 	ldw	r21,20(sp)
   22694:	dd000417 	ldw	r20,16(sp)
   22698:	dcc00317 	ldw	r19,12(sp)
   2269c:	dc800217 	ldw	r18,8(sp)
   226a0:	dc400117 	ldw	r17,4(sp)
   226a4:	dc000017 	ldw	r16,0(sp)
   226a8:	dec00804 	addi	sp,sp,32
   226ac:	f800283a 	ret

000226b0 <_fwalk_reent>:
   226b0:	defff804 	addi	sp,sp,-32
   226b4:	dd400515 	stw	r21,20(sp)
   226b8:	2540b804 	addi	r21,r4,736
   226bc:	dd800615 	stw	r22,24(sp)
   226c0:	dd000415 	stw	r20,16(sp)
   226c4:	dcc00315 	stw	r19,12(sp)
   226c8:	dfc00715 	stw	ra,28(sp)
   226cc:	dc800215 	stw	r18,8(sp)
   226d0:	dc400115 	stw	r17,4(sp)
   226d4:	dc000015 	stw	r16,0(sp)
   226d8:	2027883a 	mov	r19,r4
   226dc:	2829883a 	mov	r20,r5
   226e0:	002d883a 	mov	r22,zero
   226e4:	00221a40 	call	221a4 <__sfp_lock_acquire>
   226e8:	a8001326 	beq	r21,zero,22738 <_fwalk_reent+0x88>
   226ec:	04bfffc4 	movi	r18,-1
   226f0:	ac400117 	ldw	r17,4(r21)
   226f4:	ac000217 	ldw	r16,8(r21)
   226f8:	8c7fffc4 	addi	r17,r17,-1
   226fc:	88000c16 	blt	r17,zero,22730 <_fwalk_reent+0x80>
   22700:	84000304 	addi	r16,r16,12
   22704:	80c0000f 	ldh	r3,0(r16)
   22708:	8c7fffc4 	addi	r17,r17,-1
   2270c:	817ffd04 	addi	r5,r16,-12
   22710:	18000526 	beq	r3,zero,22728 <_fwalk_reent+0x78>
   22714:	80c0008f 	ldh	r3,2(r16)
   22718:	9809883a 	mov	r4,r19
   2271c:	1c800226 	beq	r3,r18,22728 <_fwalk_reent+0x78>
   22720:	a03ee83a 	callr	r20
   22724:	b0acb03a 	or	r22,r22,r2
   22728:	84001a04 	addi	r16,r16,104
   2272c:	8cbff51e 	bne	r17,r18,22704 <__alt_data_end+0xf4022704>
   22730:	ad400017 	ldw	r21,0(r21)
   22734:	a83fee1e 	bne	r21,zero,226f0 <__alt_data_end+0xf40226f0>
   22738:	00221a80 	call	221a8 <__sfp_lock_release>
   2273c:	b005883a 	mov	r2,r22
   22740:	dfc00717 	ldw	ra,28(sp)
   22744:	dd800617 	ldw	r22,24(sp)
   22748:	dd400517 	ldw	r21,20(sp)
   2274c:	dd000417 	ldw	r20,16(sp)
   22750:	dcc00317 	ldw	r19,12(sp)
   22754:	dc800217 	ldw	r18,8(sp)
   22758:	dc400117 	ldw	r17,4(sp)
   2275c:	dc000017 	ldw	r16,0(sp)
   22760:	dec00804 	addi	sp,sp,32
   22764:	f800283a 	ret

00022768 <__smakebuf_r>:
   22768:	2880030b 	ldhu	r2,12(r5)
   2276c:	10c0008c 	andi	r3,r2,2
   22770:	1800401e 	bne	r3,zero,22874 <__smakebuf_r+0x10c>
   22774:	deffec04 	addi	sp,sp,-80
   22778:	dc000f15 	stw	r16,60(sp)
   2277c:	2821883a 	mov	r16,r5
   22780:	2940038f 	ldh	r5,14(r5)
   22784:	dc401015 	stw	r17,64(sp)
   22788:	dfc01315 	stw	ra,76(sp)
   2278c:	dcc01215 	stw	r19,72(sp)
   22790:	dc801115 	stw	r18,68(sp)
   22794:	2023883a 	mov	r17,r4
   22798:	28001b16 	blt	r5,zero,22808 <__smakebuf_r+0xa0>
   2279c:	d80d883a 	mov	r6,sp
   227a0:	0022d440 	call	22d44 <_fstat_r>
   227a4:	10001716 	blt	r2,zero,22804 <__smakebuf_r+0x9c>
   227a8:	d8800117 	ldw	r2,4(sp)
   227ac:	00e00014 	movui	r3,32768
   227b0:	10bc000c 	andi	r2,r2,61440
   227b4:	10c03726 	beq	r2,r3,22894 <__smakebuf_r+0x12c>
   227b8:	80c0030b 	ldhu	r3,12(r16)
   227bc:	18c20014 	ori	r3,r3,2048
   227c0:	80c0030d 	sth	r3,12(r16)
   227c4:	00c80004 	movi	r3,8192
   227c8:	10c03c1e 	bne	r2,r3,228bc <__smakebuf_r+0x154>
   227cc:	8140038f 	ldh	r5,14(r16)
   227d0:	8809883a 	mov	r4,r17
   227d4:	0022d9c0 	call	22d9c <_isatty_r>
   227d8:	10004e26 	beq	r2,zero,22914 <__smakebuf_r+0x1ac>
   227dc:	8080030b 	ldhu	r2,12(r16)
   227e0:	04c00044 	movi	r19,1
   227e4:	80c010c4 	addi	r3,r16,67
   227e8:	14c4b03a 	or	r2,r2,r19
   227ec:	8080030d 	sth	r2,12(r16)
   227f0:	80c00015 	stw	r3,0(r16)
   227f4:	80c00415 	stw	r3,16(r16)
   227f8:	84c00515 	stw	r19,20(r16)
   227fc:	04810004 	movi	r18,1024
   22800:	00000706 	br	22820 <__smakebuf_r+0xb8>
   22804:	8080030b 	ldhu	r2,12(r16)
   22808:	10c0200c 	andi	r3,r2,128
   2280c:	18001f1e 	bne	r3,zero,2288c <__smakebuf_r+0x124>
   22810:	04810004 	movi	r18,1024
   22814:	10820014 	ori	r2,r2,2048
   22818:	8080030d 	sth	r2,12(r16)
   2281c:	0027883a 	mov	r19,zero
   22820:	8809883a 	mov	r4,r17
   22824:	900b883a 	mov	r5,r18
   22828:	00209900 	call	20990 <_malloc_r>
   2282c:	10002e26 	beq	r2,zero,228e8 <__smakebuf_r+0x180>
   22830:	80c0030b 	ldhu	r3,12(r16)
   22834:	010000b4 	movhi	r4,2
   22838:	21079004 	addi	r4,r4,7744
   2283c:	89000f15 	stw	r4,60(r17)
   22840:	18c02014 	ori	r3,r3,128
   22844:	80c0030d 	sth	r3,12(r16)
   22848:	80800015 	stw	r2,0(r16)
   2284c:	80800415 	stw	r2,16(r16)
   22850:	84800515 	stw	r18,20(r16)
   22854:	98001c1e 	bne	r19,zero,228c8 <__smakebuf_r+0x160>
   22858:	dfc01317 	ldw	ra,76(sp)
   2285c:	dcc01217 	ldw	r19,72(sp)
   22860:	dc801117 	ldw	r18,68(sp)
   22864:	dc401017 	ldw	r17,64(sp)
   22868:	dc000f17 	ldw	r16,60(sp)
   2286c:	dec01404 	addi	sp,sp,80
   22870:	f800283a 	ret
   22874:	288010c4 	addi	r2,r5,67
   22878:	28800015 	stw	r2,0(r5)
   2287c:	28800415 	stw	r2,16(r5)
   22880:	00800044 	movi	r2,1
   22884:	28800515 	stw	r2,20(r5)
   22888:	f800283a 	ret
   2288c:	04801004 	movi	r18,64
   22890:	003fe006 	br	22814 <__alt_data_end+0xf4022814>
   22894:	81000a17 	ldw	r4,40(r16)
   22898:	00c000b4 	movhi	r3,2
   2289c:	18cac704 	addi	r3,r3,11036
   228a0:	20ffc51e 	bne	r4,r3,227b8 <__alt_data_end+0xf40227b8>
   228a4:	80c0030b 	ldhu	r3,12(r16)
   228a8:	01010004 	movi	r4,1024
   228ac:	81001315 	stw	r4,76(r16)
   228b0:	1906b03a 	or	r3,r3,r4
   228b4:	80c0030d 	sth	r3,12(r16)
   228b8:	003fc206 	br	227c4 <__alt_data_end+0xf40227c4>
   228bc:	0027883a 	mov	r19,zero
   228c0:	04810004 	movi	r18,1024
   228c4:	003fd606 	br	22820 <__alt_data_end+0xf4022820>
   228c8:	8140038f 	ldh	r5,14(r16)
   228cc:	8809883a 	mov	r4,r17
   228d0:	0022d9c0 	call	22d9c <_isatty_r>
   228d4:	103fe026 	beq	r2,zero,22858 <__alt_data_end+0xf4022858>
   228d8:	8080030b 	ldhu	r2,12(r16)
   228dc:	10800054 	ori	r2,r2,1
   228e0:	8080030d 	sth	r2,12(r16)
   228e4:	003fdc06 	br	22858 <__alt_data_end+0xf4022858>
   228e8:	8080030b 	ldhu	r2,12(r16)
   228ec:	10c0800c 	andi	r3,r2,512
   228f0:	183fd91e 	bne	r3,zero,22858 <__alt_data_end+0xf4022858>
   228f4:	10800094 	ori	r2,r2,2
   228f8:	80c010c4 	addi	r3,r16,67
   228fc:	8080030d 	sth	r2,12(r16)
   22900:	00800044 	movi	r2,1
   22904:	80c00015 	stw	r3,0(r16)
   22908:	80c00415 	stw	r3,16(r16)
   2290c:	80800515 	stw	r2,20(r16)
   22910:	003fd106 	br	22858 <__alt_data_end+0xf4022858>
   22914:	04c00044 	movi	r19,1
   22918:	04810004 	movi	r18,1024
   2291c:	003fc006 	br	22820 <__alt_data_end+0xf4022820>

00022920 <memset>:
   22920:	20c000cc 	andi	r3,r4,3
   22924:	2005883a 	mov	r2,r4
   22928:	18004326 	beq	r3,zero,22a38 <memset+0x118>
   2292c:	31ffffc4 	addi	r7,r6,-1
   22930:	30004026 	beq	r6,zero,22a34 <memset+0x114>
   22934:	2813883a 	mov	r9,r5
   22938:	200d883a 	mov	r6,r4
   2293c:	2007883a 	mov	r3,r4
   22940:	00000406 	br	22954 <memset+0x34>
   22944:	3a3fffc4 	addi	r8,r7,-1
   22948:	31800044 	addi	r6,r6,1
   2294c:	38003926 	beq	r7,zero,22a34 <memset+0x114>
   22950:	400f883a 	mov	r7,r8
   22954:	18c00044 	addi	r3,r3,1
   22958:	32400005 	stb	r9,0(r6)
   2295c:	1a0000cc 	andi	r8,r3,3
   22960:	403ff81e 	bne	r8,zero,22944 <__alt_data_end+0xf4022944>
   22964:	010000c4 	movi	r4,3
   22968:	21c02d2e 	bgeu	r4,r7,22a20 <memset+0x100>
   2296c:	29803fcc 	andi	r6,r5,255
   22970:	3008923a 	slli	r4,r6,8
   22974:	218cb03a 	or	r6,r4,r6
   22978:	3008943a 	slli	r4,r6,16
   2297c:	218cb03a 	or	r6,r4,r6
   22980:	010003c4 	movi	r4,15
   22984:	21c0182e 	bgeu	r4,r7,229e8 <memset+0xc8>
   22988:	3b3ffc04 	addi	r12,r7,-16
   2298c:	6018d13a 	srli	r12,r12,4
   22990:	1a000104 	addi	r8,r3,4
   22994:	1ac00204 	addi	r11,r3,8
   22998:	6008913a 	slli	r4,r12,4
   2299c:	1a800304 	addi	r10,r3,12
   229a0:	1813883a 	mov	r9,r3
   229a4:	21000504 	addi	r4,r4,20
   229a8:	1909883a 	add	r4,r3,r4
   229ac:	49800015 	stw	r6,0(r9)
   229b0:	41800015 	stw	r6,0(r8)
   229b4:	59800015 	stw	r6,0(r11)
   229b8:	51800015 	stw	r6,0(r10)
   229bc:	42000404 	addi	r8,r8,16
   229c0:	4a400404 	addi	r9,r9,16
   229c4:	5ac00404 	addi	r11,r11,16
   229c8:	52800404 	addi	r10,r10,16
   229cc:	413ff71e 	bne	r8,r4,229ac <__alt_data_end+0xf40229ac>
   229d0:	63000044 	addi	r12,r12,1
   229d4:	6018913a 	slli	r12,r12,4
   229d8:	39c003cc 	andi	r7,r7,15
   229dc:	010000c4 	movi	r4,3
   229e0:	1b07883a 	add	r3,r3,r12
   229e4:	21c00e2e 	bgeu	r4,r7,22a20 <memset+0x100>
   229e8:	1813883a 	mov	r9,r3
   229ec:	3811883a 	mov	r8,r7
   229f0:	010000c4 	movi	r4,3
   229f4:	49800015 	stw	r6,0(r9)
   229f8:	423fff04 	addi	r8,r8,-4
   229fc:	4a400104 	addi	r9,r9,4
   22a00:	223ffc36 	bltu	r4,r8,229f4 <__alt_data_end+0xf40229f4>
   22a04:	393fff04 	addi	r4,r7,-4
   22a08:	2008d0ba 	srli	r4,r4,2
   22a0c:	39c000cc 	andi	r7,r7,3
   22a10:	21000044 	addi	r4,r4,1
   22a14:	2109883a 	add	r4,r4,r4
   22a18:	2109883a 	add	r4,r4,r4
   22a1c:	1907883a 	add	r3,r3,r4
   22a20:	38000426 	beq	r7,zero,22a34 <memset+0x114>
   22a24:	19cf883a 	add	r7,r3,r7
   22a28:	19400005 	stb	r5,0(r3)
   22a2c:	18c00044 	addi	r3,r3,1
   22a30:	19fffd1e 	bne	r3,r7,22a28 <__alt_data_end+0xf4022a28>
   22a34:	f800283a 	ret
   22a38:	2007883a 	mov	r3,r4
   22a3c:	300f883a 	mov	r7,r6
   22a40:	003fc806 	br	22964 <__alt_data_end+0xf4022964>

00022a44 <__sread>:
   22a44:	defffe04 	addi	sp,sp,-8
   22a48:	dc000015 	stw	r16,0(sp)
   22a4c:	2821883a 	mov	r16,r5
   22a50:	2940038f 	ldh	r5,14(r5)
   22a54:	dfc00115 	stw	ra,4(sp)
   22a58:	0022e4c0 	call	22e4c <_read_r>
   22a5c:	10000716 	blt	r2,zero,22a7c <__sread+0x38>
   22a60:	80c01417 	ldw	r3,80(r16)
   22a64:	1887883a 	add	r3,r3,r2
   22a68:	80c01415 	stw	r3,80(r16)
   22a6c:	dfc00117 	ldw	ra,4(sp)
   22a70:	dc000017 	ldw	r16,0(sp)
   22a74:	dec00204 	addi	sp,sp,8
   22a78:	f800283a 	ret
   22a7c:	80c0030b 	ldhu	r3,12(r16)
   22a80:	18fbffcc 	andi	r3,r3,61439
   22a84:	80c0030d 	sth	r3,12(r16)
   22a88:	dfc00117 	ldw	ra,4(sp)
   22a8c:	dc000017 	ldw	r16,0(sp)
   22a90:	dec00204 	addi	sp,sp,8
   22a94:	f800283a 	ret

00022a98 <__seofread>:
   22a98:	0005883a 	mov	r2,zero
   22a9c:	f800283a 	ret

00022aa0 <__swrite>:
   22aa0:	2880030b 	ldhu	r2,12(r5)
   22aa4:	defffb04 	addi	sp,sp,-20
   22aa8:	dcc00315 	stw	r19,12(sp)
   22aac:	dc800215 	stw	r18,8(sp)
   22ab0:	dc400115 	stw	r17,4(sp)
   22ab4:	dc000015 	stw	r16,0(sp)
   22ab8:	dfc00415 	stw	ra,16(sp)
   22abc:	10c0400c 	andi	r3,r2,256
   22ac0:	2821883a 	mov	r16,r5
   22ac4:	2027883a 	mov	r19,r4
   22ac8:	3025883a 	mov	r18,r6
   22acc:	3823883a 	mov	r17,r7
   22ad0:	18000526 	beq	r3,zero,22ae8 <__swrite+0x48>
   22ad4:	2940038f 	ldh	r5,14(r5)
   22ad8:	000d883a 	mov	r6,zero
   22adc:	01c00084 	movi	r7,2
   22ae0:	0022df00 	call	22df0 <_lseek_r>
   22ae4:	8080030b 	ldhu	r2,12(r16)
   22ae8:	8140038f 	ldh	r5,14(r16)
   22aec:	10bbffcc 	andi	r2,r2,61439
   22af0:	9809883a 	mov	r4,r19
   22af4:	900d883a 	mov	r6,r18
   22af8:	880f883a 	mov	r7,r17
   22afc:	8080030d 	sth	r2,12(r16)
   22b00:	dfc00417 	ldw	ra,16(sp)
   22b04:	dcc00317 	ldw	r19,12(sp)
   22b08:	dc800217 	ldw	r18,8(sp)
   22b0c:	dc400117 	ldw	r17,4(sp)
   22b10:	dc000017 	ldw	r16,0(sp)
   22b14:	dec00504 	addi	sp,sp,20
   22b18:	0022b801 	jmpi	22b80 <_write_r>

00022b1c <__sseek>:
   22b1c:	defffe04 	addi	sp,sp,-8
   22b20:	dc000015 	stw	r16,0(sp)
   22b24:	2821883a 	mov	r16,r5
   22b28:	2940038f 	ldh	r5,14(r5)
   22b2c:	dfc00115 	stw	ra,4(sp)
   22b30:	0022df00 	call	22df0 <_lseek_r>
   22b34:	00ffffc4 	movi	r3,-1
   22b38:	10c00826 	beq	r2,r3,22b5c <__sseek+0x40>
   22b3c:	80c0030b 	ldhu	r3,12(r16)
   22b40:	80801415 	stw	r2,80(r16)
   22b44:	18c40014 	ori	r3,r3,4096
   22b48:	80c0030d 	sth	r3,12(r16)
   22b4c:	dfc00117 	ldw	ra,4(sp)
   22b50:	dc000017 	ldw	r16,0(sp)
   22b54:	dec00204 	addi	sp,sp,8
   22b58:	f800283a 	ret
   22b5c:	80c0030b 	ldhu	r3,12(r16)
   22b60:	18fbffcc 	andi	r3,r3,61439
   22b64:	80c0030d 	sth	r3,12(r16)
   22b68:	dfc00117 	ldw	ra,4(sp)
   22b6c:	dc000017 	ldw	r16,0(sp)
   22b70:	dec00204 	addi	sp,sp,8
   22b74:	f800283a 	ret

00022b78 <__sclose>:
   22b78:	2940038f 	ldh	r5,14(r5)
   22b7c:	0022bdc1 	jmpi	22bdc <_close_r>

00022b80 <_write_r>:
   22b80:	defffd04 	addi	sp,sp,-12
   22b84:	dc000015 	stw	r16,0(sp)
   22b88:	04020034 	movhi	r16,2048
   22b8c:	dc400115 	stw	r17,4(sp)
   22b90:	8406e404 	addi	r16,r16,7056
   22b94:	2023883a 	mov	r17,r4
   22b98:	2809883a 	mov	r4,r5
   22b9c:	300b883a 	mov	r5,r6
   22ba0:	380d883a 	mov	r6,r7
   22ba4:	dfc00215 	stw	ra,8(sp)
   22ba8:	80000015 	stw	zero,0(r16)
   22bac:	00237f40 	call	237f4 <write>
   22bb0:	00ffffc4 	movi	r3,-1
   22bb4:	10c00526 	beq	r2,r3,22bcc <_write_r+0x4c>
   22bb8:	dfc00217 	ldw	ra,8(sp)
   22bbc:	dc400117 	ldw	r17,4(sp)
   22bc0:	dc000017 	ldw	r16,0(sp)
   22bc4:	dec00304 	addi	sp,sp,12
   22bc8:	f800283a 	ret
   22bcc:	80c00017 	ldw	r3,0(r16)
   22bd0:	183ff926 	beq	r3,zero,22bb8 <__alt_data_end+0xf4022bb8>
   22bd4:	88c00015 	stw	r3,0(r17)
   22bd8:	003ff706 	br	22bb8 <__alt_data_end+0xf4022bb8>

00022bdc <_close_r>:
   22bdc:	defffd04 	addi	sp,sp,-12
   22be0:	dc000015 	stw	r16,0(sp)
   22be4:	04020034 	movhi	r16,2048
   22be8:	dc400115 	stw	r17,4(sp)
   22bec:	8406e404 	addi	r16,r16,7056
   22bf0:	2023883a 	mov	r17,r4
   22bf4:	2809883a 	mov	r4,r5
   22bf8:	dfc00215 	stw	ra,8(sp)
   22bfc:	80000015 	stw	zero,0(r16)
   22c00:	0022f200 	call	22f20 <close>
   22c04:	00ffffc4 	movi	r3,-1
   22c08:	10c00526 	beq	r2,r3,22c20 <_close_r+0x44>
   22c0c:	dfc00217 	ldw	ra,8(sp)
   22c10:	dc400117 	ldw	r17,4(sp)
   22c14:	dc000017 	ldw	r16,0(sp)
   22c18:	dec00304 	addi	sp,sp,12
   22c1c:	f800283a 	ret
   22c20:	80c00017 	ldw	r3,0(r16)
   22c24:	183ff926 	beq	r3,zero,22c0c <__alt_data_end+0xf4022c0c>
   22c28:	88c00015 	stw	r3,0(r17)
   22c2c:	003ff706 	br	22c0c <__alt_data_end+0xf4022c0c>

00022c30 <_fclose_r>:
   22c30:	28003226 	beq	r5,zero,22cfc <_fclose_r+0xcc>
   22c34:	defffc04 	addi	sp,sp,-16
   22c38:	dc400115 	stw	r17,4(sp)
   22c3c:	2023883a 	mov	r17,r4
   22c40:	dc000015 	stw	r16,0(sp)
   22c44:	dfc00315 	stw	ra,12(sp)
   22c48:	dc800215 	stw	r18,8(sp)
   22c4c:	2821883a 	mov	r16,r5
   22c50:	00221a40 	call	221a4 <__sfp_lock_acquire>
   22c54:	88000226 	beq	r17,zero,22c60 <_fclose_r+0x30>
   22c58:	88800e17 	ldw	r2,56(r17)
   22c5c:	10002926 	beq	r2,zero,22d04 <_fclose_r+0xd4>
   22c60:	8080030f 	ldh	r2,12(r16)
   22c64:	10002226 	beq	r2,zero,22cf0 <_fclose_r+0xc0>
   22c68:	8809883a 	mov	r4,r17
   22c6c:	800b883a 	mov	r5,r16
   22c70:	0021bd80 	call	21bd8 <_fflush_r>
   22c74:	1025883a 	mov	r18,r2
   22c78:	80800b17 	ldw	r2,44(r16)
   22c7c:	10000426 	beq	r2,zero,22c90 <_fclose_r+0x60>
   22c80:	81400717 	ldw	r5,28(r16)
   22c84:	8809883a 	mov	r4,r17
   22c88:	103ee83a 	callr	r2
   22c8c:	10002616 	blt	r2,zero,22d28 <_fclose_r+0xf8>
   22c90:	8080030b 	ldhu	r2,12(r16)
   22c94:	1080200c 	andi	r2,r2,128
   22c98:	10001f1e 	bne	r2,zero,22d18 <_fclose_r+0xe8>
   22c9c:	81400c17 	ldw	r5,48(r16)
   22ca0:	28000526 	beq	r5,zero,22cb8 <_fclose_r+0x88>
   22ca4:	80801004 	addi	r2,r16,64
   22ca8:	28800226 	beq	r5,r2,22cb4 <_fclose_r+0x84>
   22cac:	8809883a 	mov	r4,r17
   22cb0:	00223080 	call	22308 <_free_r>
   22cb4:	80000c15 	stw	zero,48(r16)
   22cb8:	81401117 	ldw	r5,68(r16)
   22cbc:	28000326 	beq	r5,zero,22ccc <_fclose_r+0x9c>
   22cc0:	8809883a 	mov	r4,r17
   22cc4:	00223080 	call	22308 <_free_r>
   22cc8:	80001115 	stw	zero,68(r16)
   22ccc:	8000030d 	sth	zero,12(r16)
   22cd0:	00221a80 	call	221a8 <__sfp_lock_release>
   22cd4:	9005883a 	mov	r2,r18
   22cd8:	dfc00317 	ldw	ra,12(sp)
   22cdc:	dc800217 	ldw	r18,8(sp)
   22ce0:	dc400117 	ldw	r17,4(sp)
   22ce4:	dc000017 	ldw	r16,0(sp)
   22ce8:	dec00404 	addi	sp,sp,16
   22cec:	f800283a 	ret
   22cf0:	00221a80 	call	221a8 <__sfp_lock_release>
   22cf4:	0005883a 	mov	r2,zero
   22cf8:	003ff706 	br	22cd8 <__alt_data_end+0xf4022cd8>
   22cfc:	0005883a 	mov	r2,zero
   22d00:	f800283a 	ret
   22d04:	8809883a 	mov	r4,r17
   22d08:	00221940 	call	22194 <__sinit>
   22d0c:	8080030f 	ldh	r2,12(r16)
   22d10:	103fd51e 	bne	r2,zero,22c68 <__alt_data_end+0xf4022c68>
   22d14:	003ff606 	br	22cf0 <__alt_data_end+0xf4022cf0>
   22d18:	81400417 	ldw	r5,16(r16)
   22d1c:	8809883a 	mov	r4,r17
   22d20:	00223080 	call	22308 <_free_r>
   22d24:	003fdd06 	br	22c9c <__alt_data_end+0xf4022c9c>
   22d28:	04bfffc4 	movi	r18,-1
   22d2c:	003fd806 	br	22c90 <__alt_data_end+0xf4022c90>

00022d30 <fclose>:
   22d30:	00820034 	movhi	r2,2048
   22d34:	1086d404 	addi	r2,r2,6992
   22d38:	200b883a 	mov	r5,r4
   22d3c:	11000017 	ldw	r4,0(r2)
   22d40:	0022c301 	jmpi	22c30 <_fclose_r>

00022d44 <_fstat_r>:
   22d44:	defffd04 	addi	sp,sp,-12
   22d48:	dc000015 	stw	r16,0(sp)
   22d4c:	04020034 	movhi	r16,2048
   22d50:	dc400115 	stw	r17,4(sp)
   22d54:	8406e404 	addi	r16,r16,7056
   22d58:	2023883a 	mov	r17,r4
   22d5c:	2809883a 	mov	r4,r5
   22d60:	300b883a 	mov	r5,r6
   22d64:	dfc00215 	stw	ra,8(sp)
   22d68:	80000015 	stw	zero,0(r16)
   22d6c:	00230740 	call	23074 <fstat>
   22d70:	00ffffc4 	movi	r3,-1
   22d74:	10c00526 	beq	r2,r3,22d8c <_fstat_r+0x48>
   22d78:	dfc00217 	ldw	ra,8(sp)
   22d7c:	dc400117 	ldw	r17,4(sp)
   22d80:	dc000017 	ldw	r16,0(sp)
   22d84:	dec00304 	addi	sp,sp,12
   22d88:	f800283a 	ret
   22d8c:	80c00017 	ldw	r3,0(r16)
   22d90:	183ff926 	beq	r3,zero,22d78 <__alt_data_end+0xf4022d78>
   22d94:	88c00015 	stw	r3,0(r17)
   22d98:	003ff706 	br	22d78 <__alt_data_end+0xf4022d78>

00022d9c <_isatty_r>:
   22d9c:	defffd04 	addi	sp,sp,-12
   22da0:	dc000015 	stw	r16,0(sp)
   22da4:	04020034 	movhi	r16,2048
   22da8:	dc400115 	stw	r17,4(sp)
   22dac:	8406e404 	addi	r16,r16,7056
   22db0:	2023883a 	mov	r17,r4
   22db4:	2809883a 	mov	r4,r5
   22db8:	dfc00215 	stw	ra,8(sp)
   22dbc:	80000015 	stw	zero,0(r16)
   22dc0:	002317c0 	call	2317c <isatty>
   22dc4:	00ffffc4 	movi	r3,-1
   22dc8:	10c00526 	beq	r2,r3,22de0 <_isatty_r+0x44>
   22dcc:	dfc00217 	ldw	ra,8(sp)
   22dd0:	dc400117 	ldw	r17,4(sp)
   22dd4:	dc000017 	ldw	r16,0(sp)
   22dd8:	dec00304 	addi	sp,sp,12
   22ddc:	f800283a 	ret
   22de0:	80c00017 	ldw	r3,0(r16)
   22de4:	183ff926 	beq	r3,zero,22dcc <__alt_data_end+0xf4022dcc>
   22de8:	88c00015 	stw	r3,0(r17)
   22dec:	003ff706 	br	22dcc <__alt_data_end+0xf4022dcc>

00022df0 <_lseek_r>:
   22df0:	defffd04 	addi	sp,sp,-12
   22df4:	dc000015 	stw	r16,0(sp)
   22df8:	04020034 	movhi	r16,2048
   22dfc:	dc400115 	stw	r17,4(sp)
   22e00:	8406e404 	addi	r16,r16,7056
   22e04:	2023883a 	mov	r17,r4
   22e08:	2809883a 	mov	r4,r5
   22e0c:	300b883a 	mov	r5,r6
   22e10:	380d883a 	mov	r6,r7
   22e14:	dfc00215 	stw	ra,8(sp)
   22e18:	80000015 	stw	zero,0(r16)
   22e1c:	002335c0 	call	2335c <lseek>
   22e20:	00ffffc4 	movi	r3,-1
   22e24:	10c00526 	beq	r2,r3,22e3c <_lseek_r+0x4c>
   22e28:	dfc00217 	ldw	ra,8(sp)
   22e2c:	dc400117 	ldw	r17,4(sp)
   22e30:	dc000017 	ldw	r16,0(sp)
   22e34:	dec00304 	addi	sp,sp,12
   22e38:	f800283a 	ret
   22e3c:	80c00017 	ldw	r3,0(r16)
   22e40:	183ff926 	beq	r3,zero,22e28 <__alt_data_end+0xf4022e28>
   22e44:	88c00015 	stw	r3,0(r17)
   22e48:	003ff706 	br	22e28 <__alt_data_end+0xf4022e28>

00022e4c <_read_r>:
   22e4c:	defffd04 	addi	sp,sp,-12
   22e50:	dc000015 	stw	r16,0(sp)
   22e54:	04020034 	movhi	r16,2048
   22e58:	dc400115 	stw	r17,4(sp)
   22e5c:	8406e404 	addi	r16,r16,7056
   22e60:	2023883a 	mov	r17,r4
   22e64:	2809883a 	mov	r4,r5
   22e68:	300b883a 	mov	r5,r6
   22e6c:	380d883a 	mov	r6,r7
   22e70:	dfc00215 	stw	ra,8(sp)
   22e74:	80000015 	stw	zero,0(r16)
   22e78:	00235400 	call	23540 <read>
   22e7c:	00ffffc4 	movi	r3,-1
   22e80:	10c00526 	beq	r2,r3,22e98 <_read_r+0x4c>
   22e84:	dfc00217 	ldw	ra,8(sp)
   22e88:	dc400117 	ldw	r17,4(sp)
   22e8c:	dc000017 	ldw	r16,0(sp)
   22e90:	dec00304 	addi	sp,sp,12
   22e94:	f800283a 	ret
   22e98:	80c00017 	ldw	r3,0(r16)
   22e9c:	183ff926 	beq	r3,zero,22e84 <__alt_data_end+0xf4022e84>
   22ea0:	88c00015 	stw	r3,0(r17)
   22ea4:	003ff706 	br	22e84 <__alt_data_end+0xf4022e84>

00022ea8 <__mulsi3>:
   22ea8:	0005883a 	mov	r2,zero
   22eac:	20000726 	beq	r4,zero,22ecc <__mulsi3+0x24>
   22eb0:	20c0004c 	andi	r3,r4,1
   22eb4:	2008d07a 	srli	r4,r4,1
   22eb8:	18000126 	beq	r3,zero,22ec0 <__mulsi3+0x18>
   22ebc:	1145883a 	add	r2,r2,r5
   22ec0:	294b883a 	add	r5,r5,r5
   22ec4:	203ffa1e 	bne	r4,zero,22eb0 <__alt_data_end+0xf4022eb0>
   22ec8:	f800283a 	ret
   22ecc:	f800283a 	ret

00022ed0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ed0:	defffe04 	addi	sp,sp,-8
   22ed4:	dfc00115 	stw	ra,4(sp)
   22ed8:	df000015 	stw	fp,0(sp)
   22edc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ee0:	00820034 	movhi	r2,2048
   22ee4:	1086dc04 	addi	r2,r2,7024
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	10000526 	beq	r2,zero,22f04 <alt_get_errno+0x34>
   22ef0:	00820034 	movhi	r2,2048
   22ef4:	1086dc04 	addi	r2,r2,7024
   22ef8:	10800017 	ldw	r2,0(r2)
   22efc:	103ee83a 	callr	r2
   22f00:	00000206 	br	22f0c <alt_get_errno+0x3c>
   22f04:	00820034 	movhi	r2,2048
   22f08:	1086e404 	addi	r2,r2,7056
}
   22f0c:	e037883a 	mov	sp,fp
   22f10:	dfc00117 	ldw	ra,4(sp)
   22f14:	df000017 	ldw	fp,0(sp)
   22f18:	dec00204 	addi	sp,sp,8
   22f1c:	f800283a 	ret

00022f20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22f20:	defffb04 	addi	sp,sp,-20
   22f24:	dfc00415 	stw	ra,16(sp)
   22f28:	df000315 	stw	fp,12(sp)
   22f2c:	df000304 	addi	fp,sp,12
   22f30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22f34:	e0bfff17 	ldw	r2,-4(fp)
   22f38:	10000816 	blt	r2,zero,22f5c <close+0x3c>
   22f3c:	e13fff17 	ldw	r4,-4(fp)
   22f40:	01400304 	movi	r5,12
   22f44:	0022ea80 	call	22ea8 <__mulsi3>
   22f48:	1007883a 	mov	r3,r2
   22f4c:	00820034 	movhi	r2,2048
   22f50:	10824504 	addi	r2,r2,2324
   22f54:	1885883a 	add	r2,r3,r2
   22f58:	00000106 	br	22f60 <close+0x40>
   22f5c:	0005883a 	mov	r2,zero
   22f60:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   22f64:	e0bffd17 	ldw	r2,-12(fp)
   22f68:	10001926 	beq	r2,zero,22fd0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22f6c:	e0bffd17 	ldw	r2,-12(fp)
   22f70:	10800017 	ldw	r2,0(r2)
   22f74:	10800417 	ldw	r2,16(r2)
   22f78:	10000626 	beq	r2,zero,22f94 <close+0x74>
   22f7c:	e0bffd17 	ldw	r2,-12(fp)
   22f80:	10800017 	ldw	r2,0(r2)
   22f84:	10800417 	ldw	r2,16(r2)
   22f88:	e13ffd17 	ldw	r4,-12(fp)
   22f8c:	103ee83a 	callr	r2
   22f90:	00000106 	br	22f98 <close+0x78>
   22f94:	0005883a 	mov	r2,zero
   22f98:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22f9c:	e13fff17 	ldw	r4,-4(fp)
   22fa0:	00236440 	call	23644 <alt_release_fd>
    if (rval < 0)
   22fa4:	e0bffe17 	ldw	r2,-8(fp)
   22fa8:	1000070e 	bge	r2,zero,22fc8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   22fac:	0022ed00 	call	22ed0 <alt_get_errno>
   22fb0:	1007883a 	mov	r3,r2
   22fb4:	e0bffe17 	ldw	r2,-8(fp)
   22fb8:	0085c83a 	sub	r2,zero,r2
   22fbc:	18800015 	stw	r2,0(r3)
      return -1;
   22fc0:	00bfffc4 	movi	r2,-1
   22fc4:	00000706 	br	22fe4 <close+0xc4>
    }
    return 0;
   22fc8:	0005883a 	mov	r2,zero
   22fcc:	00000506 	br	22fe4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22fd0:	0022ed00 	call	22ed0 <alt_get_errno>
   22fd4:	1007883a 	mov	r3,r2
   22fd8:	00801444 	movi	r2,81
   22fdc:	18800015 	stw	r2,0(r3)
    return -1;
   22fe0:	00bfffc4 	movi	r2,-1
  }
}
   22fe4:	e037883a 	mov	sp,fp
   22fe8:	dfc00117 	ldw	ra,4(sp)
   22fec:	df000017 	ldw	fp,0(sp)
   22ff0:	dec00204 	addi	sp,sp,8
   22ff4:	f800283a 	ret

00022ff8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22ff8:	defffc04 	addi	sp,sp,-16
   22ffc:	df000315 	stw	fp,12(sp)
   23000:	df000304 	addi	fp,sp,12
   23004:	e13ffd15 	stw	r4,-12(fp)
   23008:	e17ffe15 	stw	r5,-8(fp)
   2300c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23010:	e0bfff17 	ldw	r2,-4(fp)
}
   23014:	e037883a 	mov	sp,fp
   23018:	df000017 	ldw	fp,0(sp)
   2301c:	dec00104 	addi	sp,sp,4
   23020:	f800283a 	ret

00023024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23024:	defffe04 	addi	sp,sp,-8
   23028:	dfc00115 	stw	ra,4(sp)
   2302c:	df000015 	stw	fp,0(sp)
   23030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23034:	00820034 	movhi	r2,2048
   23038:	1086dc04 	addi	r2,r2,7024
   2303c:	10800017 	ldw	r2,0(r2)
   23040:	10000526 	beq	r2,zero,23058 <alt_get_errno+0x34>
   23044:	00820034 	movhi	r2,2048
   23048:	1086dc04 	addi	r2,r2,7024
   2304c:	10800017 	ldw	r2,0(r2)
   23050:	103ee83a 	callr	r2
   23054:	00000206 	br	23060 <alt_get_errno+0x3c>
   23058:	00820034 	movhi	r2,2048
   2305c:	1086e404 	addi	r2,r2,7056
}
   23060:	e037883a 	mov	sp,fp
   23064:	dfc00117 	ldw	ra,4(sp)
   23068:	df000017 	ldw	fp,0(sp)
   2306c:	dec00204 	addi	sp,sp,8
   23070:	f800283a 	ret

00023074 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23074:	defffb04 	addi	sp,sp,-20
   23078:	dfc00415 	stw	ra,16(sp)
   2307c:	df000315 	stw	fp,12(sp)
   23080:	df000304 	addi	fp,sp,12
   23084:	e13ffe15 	stw	r4,-8(fp)
   23088:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2308c:	e0bffe17 	ldw	r2,-8(fp)
   23090:	10000816 	blt	r2,zero,230b4 <fstat+0x40>
   23094:	e13ffe17 	ldw	r4,-8(fp)
   23098:	01400304 	movi	r5,12
   2309c:	0022ea80 	call	22ea8 <__mulsi3>
   230a0:	1007883a 	mov	r3,r2
   230a4:	00820034 	movhi	r2,2048
   230a8:	10824504 	addi	r2,r2,2324
   230ac:	1885883a 	add	r2,r3,r2
   230b0:	00000106 	br	230b8 <fstat+0x44>
   230b4:	0005883a 	mov	r2,zero
   230b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   230bc:	e0bffd17 	ldw	r2,-12(fp)
   230c0:	10001026 	beq	r2,zero,23104 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   230c4:	e0bffd17 	ldw	r2,-12(fp)
   230c8:	10800017 	ldw	r2,0(r2)
   230cc:	10800817 	ldw	r2,32(r2)
   230d0:	10000726 	beq	r2,zero,230f0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   230d4:	e0bffd17 	ldw	r2,-12(fp)
   230d8:	10800017 	ldw	r2,0(r2)
   230dc:	10800817 	ldw	r2,32(r2)
   230e0:	e13ffd17 	ldw	r4,-12(fp)
   230e4:	e17fff17 	ldw	r5,-4(fp)
   230e8:	103ee83a 	callr	r2
   230ec:	00000a06 	br	23118 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   230f0:	e0bfff17 	ldw	r2,-4(fp)
   230f4:	00c80004 	movi	r3,8192
   230f8:	10c00115 	stw	r3,4(r2)
      return 0;
   230fc:	0005883a 	mov	r2,zero
   23100:	00000506 	br	23118 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23104:	00230240 	call	23024 <alt_get_errno>
   23108:	1007883a 	mov	r3,r2
   2310c:	00801444 	movi	r2,81
   23110:	18800015 	stw	r2,0(r3)
    return -1;
   23114:	00bfffc4 	movi	r2,-1
  }
}
   23118:	e037883a 	mov	sp,fp
   2311c:	dfc00117 	ldw	ra,4(sp)
   23120:	df000017 	ldw	fp,0(sp)
   23124:	dec00204 	addi	sp,sp,8
   23128:	f800283a 	ret

0002312c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2312c:	defffe04 	addi	sp,sp,-8
   23130:	dfc00115 	stw	ra,4(sp)
   23134:	df000015 	stw	fp,0(sp)
   23138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2313c:	00820034 	movhi	r2,2048
   23140:	1086dc04 	addi	r2,r2,7024
   23144:	10800017 	ldw	r2,0(r2)
   23148:	10000526 	beq	r2,zero,23160 <alt_get_errno+0x34>
   2314c:	00820034 	movhi	r2,2048
   23150:	1086dc04 	addi	r2,r2,7024
   23154:	10800017 	ldw	r2,0(r2)
   23158:	103ee83a 	callr	r2
   2315c:	00000206 	br	23168 <alt_get_errno+0x3c>
   23160:	00820034 	movhi	r2,2048
   23164:	1086e404 	addi	r2,r2,7056
}
   23168:	e037883a 	mov	sp,fp
   2316c:	dfc00117 	ldw	ra,4(sp)
   23170:	df000017 	ldw	fp,0(sp)
   23174:	dec00204 	addi	sp,sp,8
   23178:	f800283a 	ret

0002317c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2317c:	deffed04 	addi	sp,sp,-76
   23180:	dfc01215 	stw	ra,72(sp)
   23184:	df001115 	stw	fp,68(sp)
   23188:	df001104 	addi	fp,sp,68
   2318c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23190:	e0bfff17 	ldw	r2,-4(fp)
   23194:	10000816 	blt	r2,zero,231b8 <isatty+0x3c>
   23198:	e13fff17 	ldw	r4,-4(fp)
   2319c:	01400304 	movi	r5,12
   231a0:	0022ea80 	call	22ea8 <__mulsi3>
   231a4:	1007883a 	mov	r3,r2
   231a8:	00820034 	movhi	r2,2048
   231ac:	10824504 	addi	r2,r2,2324
   231b0:	1885883a 	add	r2,r3,r2
   231b4:	00000106 	br	231bc <isatty+0x40>
   231b8:	0005883a 	mov	r2,zero
   231bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   231c0:	e0bfef17 	ldw	r2,-68(fp)
   231c4:	10000e26 	beq	r2,zero,23200 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   231c8:	e0bfef17 	ldw	r2,-68(fp)
   231cc:	10800017 	ldw	r2,0(r2)
   231d0:	10800817 	ldw	r2,32(r2)
   231d4:	1000021e 	bne	r2,zero,231e0 <isatty+0x64>
    {
      return 1;
   231d8:	00800044 	movi	r2,1
   231dc:	00000d06 	br	23214 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   231e0:	e0bff004 	addi	r2,fp,-64
   231e4:	e13fff17 	ldw	r4,-4(fp)
   231e8:	100b883a 	mov	r5,r2
   231ec:	00230740 	call	23074 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   231f0:	e0bff117 	ldw	r2,-60(fp)
   231f4:	10880020 	cmpeqi	r2,r2,8192
   231f8:	10803fcc 	andi	r2,r2,255
   231fc:	00000506 	br	23214 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23200:	002312c0 	call	2312c <alt_get_errno>
   23204:	1007883a 	mov	r3,r2
   23208:	00801444 	movi	r2,81
   2320c:	18800015 	stw	r2,0(r3)
    return 0;
   23210:	0005883a 	mov	r2,zero
  }
}
   23214:	e037883a 	mov	sp,fp
   23218:	dfc00117 	ldw	ra,4(sp)
   2321c:	df000017 	ldw	fp,0(sp)
   23220:	dec00204 	addi	sp,sp,8
   23224:	f800283a 	ret

00023228 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23228:	defffc04 	addi	sp,sp,-16
   2322c:	df000315 	stw	fp,12(sp)
   23230:	df000304 	addi	fp,sp,12
   23234:	e13ffd15 	stw	r4,-12(fp)
   23238:	e17ffe15 	stw	r5,-8(fp)
   2323c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23240:	e0fffe17 	ldw	r3,-8(fp)
   23244:	e0bffd17 	ldw	r2,-12(fp)
   23248:	18800c26 	beq	r3,r2,2327c <alt_load_section+0x54>
  {
    while( to != end )
   2324c:	00000806 	br	23270 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23250:	e0bffe17 	ldw	r2,-8(fp)
   23254:	10c00104 	addi	r3,r2,4
   23258:	e0fffe15 	stw	r3,-8(fp)
   2325c:	e0fffd17 	ldw	r3,-12(fp)
   23260:	19000104 	addi	r4,r3,4
   23264:	e13ffd15 	stw	r4,-12(fp)
   23268:	18c00017 	ldw	r3,0(r3)
   2326c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23270:	e0fffe17 	ldw	r3,-8(fp)
   23274:	e0bfff17 	ldw	r2,-4(fp)
   23278:	18bff51e 	bne	r3,r2,23250 <__alt_data_end+0xf4023250>
    {
      *to++ = *from++;
    }
  }
}
   2327c:	e037883a 	mov	sp,fp
   23280:	df000017 	ldw	fp,0(sp)
   23284:	dec00104 	addi	sp,sp,4
   23288:	f800283a 	ret

0002328c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2328c:	defffe04 	addi	sp,sp,-8
   23290:	dfc00115 	stw	ra,4(sp)
   23294:	df000015 	stw	fp,0(sp)
   23298:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2329c:	010000b4 	movhi	r4,2
   232a0:	21170604 	addi	r4,r4,23576
   232a4:	01420034 	movhi	r5,2048
   232a8:	29403004 	addi	r5,r5,192
   232ac:	01820034 	movhi	r6,2048
   232b0:	3186e104 	addi	r6,r6,7044
   232b4:	00232280 	call	23228 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   232b8:	010000b4 	movhi	r4,2
   232bc:	21000804 	addi	r4,r4,32
   232c0:	014000b4 	movhi	r5,2
   232c4:	29400804 	addi	r5,r5,32
   232c8:	018000b4 	movhi	r6,2
   232cc:	31808c04 	addi	r6,r6,560
   232d0:	00232280 	call	23228 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   232d4:	010000b4 	movhi	r4,2
   232d8:	2116d604 	addi	r4,r4,23384
   232dc:	01420034 	movhi	r5,2048
   232e0:	29400004 	addi	r5,r5,0
   232e4:	01820034 	movhi	r6,2048
   232e8:	31803004 	addi	r6,r6,192
   232ec:	00232280 	call	23228 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   232f0:	0024a280 	call	24a28 <alt_dcache_flush_all>
  alt_icache_flush_all();
   232f4:	0024c800 	call	24c80 <alt_icache_flush_all>
}
   232f8:	e037883a 	mov	sp,fp
   232fc:	dfc00117 	ldw	ra,4(sp)
   23300:	df000017 	ldw	fp,0(sp)
   23304:	dec00204 	addi	sp,sp,8
   23308:	f800283a 	ret

0002330c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2330c:	defffe04 	addi	sp,sp,-8
   23310:	dfc00115 	stw	ra,4(sp)
   23314:	df000015 	stw	fp,0(sp)
   23318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2331c:	00820034 	movhi	r2,2048
   23320:	1086dc04 	addi	r2,r2,7024
   23324:	10800017 	ldw	r2,0(r2)
   23328:	10000526 	beq	r2,zero,23340 <alt_get_errno+0x34>
   2332c:	00820034 	movhi	r2,2048
   23330:	1086dc04 	addi	r2,r2,7024
   23334:	10800017 	ldw	r2,0(r2)
   23338:	103ee83a 	callr	r2
   2333c:	00000206 	br	23348 <alt_get_errno+0x3c>
   23340:	00820034 	movhi	r2,2048
   23344:	1086e404 	addi	r2,r2,7056
}
   23348:	e037883a 	mov	sp,fp
   2334c:	dfc00117 	ldw	ra,4(sp)
   23350:	df000017 	ldw	fp,0(sp)
   23354:	dec00204 	addi	sp,sp,8
   23358:	f800283a 	ret

0002335c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2335c:	defff904 	addi	sp,sp,-28
   23360:	dfc00615 	stw	ra,24(sp)
   23364:	df000515 	stw	fp,20(sp)
   23368:	df000504 	addi	fp,sp,20
   2336c:	e13ffd15 	stw	r4,-12(fp)
   23370:	e17ffe15 	stw	r5,-8(fp)
   23374:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23378:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2337c:	e0bffd17 	ldw	r2,-12(fp)
   23380:	10000816 	blt	r2,zero,233a4 <lseek+0x48>
   23384:	e13ffd17 	ldw	r4,-12(fp)
   23388:	01400304 	movi	r5,12
   2338c:	0022ea80 	call	22ea8 <__mulsi3>
   23390:	1007883a 	mov	r3,r2
   23394:	00820034 	movhi	r2,2048
   23398:	10824504 	addi	r2,r2,2324
   2339c:	1885883a 	add	r2,r3,r2
   233a0:	00000106 	br	233a8 <lseek+0x4c>
   233a4:	0005883a 	mov	r2,zero
   233a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   233ac:	e0bffc17 	ldw	r2,-16(fp)
   233b0:	10001026 	beq	r2,zero,233f4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   233b4:	e0bffc17 	ldw	r2,-16(fp)
   233b8:	10800017 	ldw	r2,0(r2)
   233bc:	10800717 	ldw	r2,28(r2)
   233c0:	10000926 	beq	r2,zero,233e8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   233c4:	e0bffc17 	ldw	r2,-16(fp)
   233c8:	10800017 	ldw	r2,0(r2)
   233cc:	10800717 	ldw	r2,28(r2)
   233d0:	e13ffc17 	ldw	r4,-16(fp)
   233d4:	e17ffe17 	ldw	r5,-8(fp)
   233d8:	e1bfff17 	ldw	r6,-4(fp)
   233dc:	103ee83a 	callr	r2
   233e0:	e0bffb15 	stw	r2,-20(fp)
   233e4:	00000506 	br	233fc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   233e8:	00bfde84 	movi	r2,-134
   233ec:	e0bffb15 	stw	r2,-20(fp)
   233f0:	00000206 	br	233fc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   233f4:	00bfebc4 	movi	r2,-81
   233f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   233fc:	e0bffb17 	ldw	r2,-20(fp)
   23400:	1000070e 	bge	r2,zero,23420 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   23404:	002330c0 	call	2330c <alt_get_errno>
   23408:	1007883a 	mov	r3,r2
   2340c:	e0bffb17 	ldw	r2,-20(fp)
   23410:	0085c83a 	sub	r2,zero,r2
   23414:	18800015 	stw	r2,0(r3)
    rc = -1;
   23418:	00bfffc4 	movi	r2,-1
   2341c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23420:	e0bffb17 	ldw	r2,-20(fp)
}
   23424:	e037883a 	mov	sp,fp
   23428:	dfc00117 	ldw	ra,4(sp)
   2342c:	df000017 	ldw	fp,0(sp)
   23430:	dec00204 	addi	sp,sp,8
   23434:	f800283a 	ret

00023438 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23438:	defffd04 	addi	sp,sp,-12
   2343c:	dfc00215 	stw	ra,8(sp)
   23440:	df000115 	stw	fp,4(sp)
   23444:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23448:	0009883a 	mov	r4,zero
   2344c:	002392c0 	call	2392c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23450:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23454:	00239600 	call	23960 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23458:	01020034 	movhi	r4,2048
   2345c:	21001b04 	addi	r4,r4,108
   23460:	01420034 	movhi	r5,2048
   23464:	29401b04 	addi	r5,r5,108
   23468:	01820034 	movhi	r6,2048
   2346c:	31801b04 	addi	r6,r6,108
   23470:	0024d7c0 	call	24d7c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23474:	0024b380 	call	24b38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23478:	010000b4 	movhi	r4,2
   2347c:	2112e504 	addi	r4,r4,19348
   23480:	00256880 	call	25688 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23484:	d1201217 	ldw	r4,-32696(gp)
   23488:	d0e01317 	ldw	r3,-32692(gp)
   2348c:	d0a01417 	ldw	r2,-32688(gp)
   23490:	180b883a 	mov	r5,r3
   23494:	100d883a 	mov	r6,r2
   23498:	00203440 	call	20344 <main>
   2349c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   234a0:	01000044 	movi	r4,1
   234a4:	0022f200 	call	22f20 <close>
  exit (result);
   234a8:	e13fff17 	ldw	r4,-4(fp)
   234ac:	002569c0 	call	2569c <exit>

000234b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   234b0:	defffe04 	addi	sp,sp,-8
   234b4:	df000115 	stw	fp,4(sp)
   234b8:	df000104 	addi	fp,sp,4
   234bc:	e13fff15 	stw	r4,-4(fp)
}
   234c0:	e037883a 	mov	sp,fp
   234c4:	df000017 	ldw	fp,0(sp)
   234c8:	dec00104 	addi	sp,sp,4
   234cc:	f800283a 	ret

000234d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   234d0:	defffe04 	addi	sp,sp,-8
   234d4:	df000115 	stw	fp,4(sp)
   234d8:	df000104 	addi	fp,sp,4
   234dc:	e13fff15 	stw	r4,-4(fp)
}
   234e0:	e037883a 	mov	sp,fp
   234e4:	df000017 	ldw	fp,0(sp)
   234e8:	dec00104 	addi	sp,sp,4
   234ec:	f800283a 	ret

000234f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   234f0:	defffe04 	addi	sp,sp,-8
   234f4:	dfc00115 	stw	ra,4(sp)
   234f8:	df000015 	stw	fp,0(sp)
   234fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23500:	00820034 	movhi	r2,2048
   23504:	1086dc04 	addi	r2,r2,7024
   23508:	10800017 	ldw	r2,0(r2)
   2350c:	10000526 	beq	r2,zero,23524 <alt_get_errno+0x34>
   23510:	00820034 	movhi	r2,2048
   23514:	1086dc04 	addi	r2,r2,7024
   23518:	10800017 	ldw	r2,0(r2)
   2351c:	103ee83a 	callr	r2
   23520:	00000206 	br	2352c <alt_get_errno+0x3c>
   23524:	00820034 	movhi	r2,2048
   23528:	1086e404 	addi	r2,r2,7056
}
   2352c:	e037883a 	mov	sp,fp
   23530:	dfc00117 	ldw	ra,4(sp)
   23534:	df000017 	ldw	fp,0(sp)
   23538:	dec00204 	addi	sp,sp,8
   2353c:	f800283a 	ret

00023540 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23540:	defff904 	addi	sp,sp,-28
   23544:	dfc00615 	stw	ra,24(sp)
   23548:	df000515 	stw	fp,20(sp)
   2354c:	df000504 	addi	fp,sp,20
   23550:	e13ffd15 	stw	r4,-12(fp)
   23554:	e17ffe15 	stw	r5,-8(fp)
   23558:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2355c:	e0bffd17 	ldw	r2,-12(fp)
   23560:	10000816 	blt	r2,zero,23584 <read+0x44>
   23564:	e13ffd17 	ldw	r4,-12(fp)
   23568:	01400304 	movi	r5,12
   2356c:	0022ea80 	call	22ea8 <__mulsi3>
   23570:	1007883a 	mov	r3,r2
   23574:	00820034 	movhi	r2,2048
   23578:	10824504 	addi	r2,r2,2324
   2357c:	1885883a 	add	r2,r3,r2
   23580:	00000106 	br	23588 <read+0x48>
   23584:	0005883a 	mov	r2,zero
   23588:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2358c:	e0bffb17 	ldw	r2,-20(fp)
   23590:	10002226 	beq	r2,zero,2361c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23594:	e0bffb17 	ldw	r2,-20(fp)
   23598:	10800217 	ldw	r2,8(r2)
   2359c:	108000cc 	andi	r2,r2,3
   235a0:	10800060 	cmpeqi	r2,r2,1
   235a4:	1000181e 	bne	r2,zero,23608 <read+0xc8>
        (fd->dev->read))
   235a8:	e0bffb17 	ldw	r2,-20(fp)
   235ac:	10800017 	ldw	r2,0(r2)
   235b0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   235b4:	10001426 	beq	r2,zero,23608 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   235b8:	e0bffb17 	ldw	r2,-20(fp)
   235bc:	10800017 	ldw	r2,0(r2)
   235c0:	10800517 	ldw	r2,20(r2)
   235c4:	e0ffff17 	ldw	r3,-4(fp)
   235c8:	e13ffb17 	ldw	r4,-20(fp)
   235cc:	e17ffe17 	ldw	r5,-8(fp)
   235d0:	180d883a 	mov	r6,r3
   235d4:	103ee83a 	callr	r2
   235d8:	e0bffc15 	stw	r2,-16(fp)
   235dc:	e0bffc17 	ldw	r2,-16(fp)
   235e0:	1000070e 	bge	r2,zero,23600 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   235e4:	00234f00 	call	234f0 <alt_get_errno>
   235e8:	1007883a 	mov	r3,r2
   235ec:	e0bffc17 	ldw	r2,-16(fp)
   235f0:	0085c83a 	sub	r2,zero,r2
   235f4:	18800015 	stw	r2,0(r3)
          return -1;
   235f8:	00bfffc4 	movi	r2,-1
   235fc:	00000c06 	br	23630 <read+0xf0>
        }
        return rval;
   23600:	e0bffc17 	ldw	r2,-16(fp)
   23604:	00000a06 	br	23630 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23608:	00234f00 	call	234f0 <alt_get_errno>
   2360c:	1007883a 	mov	r3,r2
   23610:	00800344 	movi	r2,13
   23614:	18800015 	stw	r2,0(r3)
   23618:	00000406 	br	2362c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2361c:	00234f00 	call	234f0 <alt_get_errno>
   23620:	1007883a 	mov	r3,r2
   23624:	00801444 	movi	r2,81
   23628:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2362c:	00bfffc4 	movi	r2,-1
}
   23630:	e037883a 	mov	sp,fp
   23634:	dfc00117 	ldw	ra,4(sp)
   23638:	df000017 	ldw	fp,0(sp)
   2363c:	dec00204 	addi	sp,sp,8
   23640:	f800283a 	ret

00023644 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23644:	defffc04 	addi	sp,sp,-16
   23648:	dfc00315 	stw	ra,12(sp)
   2364c:	df000215 	stw	fp,8(sp)
   23650:	dc000115 	stw	r16,4(sp)
   23654:	df000204 	addi	fp,sp,8
   23658:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   2365c:	e0bffe17 	ldw	r2,-8(fp)
   23660:	108000d0 	cmplti	r2,r2,3
   23664:	1000111e 	bne	r2,zero,236ac <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   23668:	04020034 	movhi	r16,2048
   2366c:	84024504 	addi	r16,r16,2324
   23670:	e0bffe17 	ldw	r2,-8(fp)
   23674:	1009883a 	mov	r4,r2
   23678:	01400304 	movi	r5,12
   2367c:	0022ea80 	call	22ea8 <__mulsi3>
   23680:	8085883a 	add	r2,r16,r2
   23684:	10800204 	addi	r2,r2,8
   23688:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2368c:	04020034 	movhi	r16,2048
   23690:	84024504 	addi	r16,r16,2324
   23694:	e0bffe17 	ldw	r2,-8(fp)
   23698:	1009883a 	mov	r4,r2
   2369c:	01400304 	movi	r5,12
   236a0:	0022ea80 	call	22ea8 <__mulsi3>
   236a4:	8085883a 	add	r2,r16,r2
   236a8:	10000015 	stw	zero,0(r2)
  }
}
   236ac:	e6ffff04 	addi	sp,fp,-4
   236b0:	dfc00217 	ldw	ra,8(sp)
   236b4:	df000117 	ldw	fp,4(sp)
   236b8:	dc000017 	ldw	r16,0(sp)
   236bc:	dec00304 	addi	sp,sp,12
   236c0:	f800283a 	ret

000236c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   236c4:	defff904 	addi	sp,sp,-28
   236c8:	df000615 	stw	fp,24(sp)
   236cc:	df000604 	addi	fp,sp,24
   236d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   236d4:	0005303a 	rdctl	r2,status
   236d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   236dc:	e0fffc17 	ldw	r3,-16(fp)
   236e0:	00bfff84 	movi	r2,-2
   236e4:	1884703a 	and	r2,r3,r2
   236e8:	1001703a 	wrctl	status,r2
  
  return context;
   236ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   236f0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   236f4:	d0a00a17 	ldw	r2,-32728(gp)
   236f8:	10c000c4 	addi	r3,r2,3
   236fc:	00bfff04 	movi	r2,-4
   23700:	1884703a 	and	r2,r3,r2
   23704:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23708:	d0e00a17 	ldw	r3,-32728(gp)
   2370c:	e0bfff17 	ldw	r2,-4(fp)
   23710:	1887883a 	add	r3,r3,r2
   23714:	00830034 	movhi	r2,3072
   23718:	10800004 	addi	r2,r2,0
   2371c:	10c0062e 	bgeu	r2,r3,23738 <sbrk+0x74>
   23720:	e0bffa17 	ldw	r2,-24(fp)
   23724:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23728:	e0bffd17 	ldw	r2,-12(fp)
   2372c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23730:	00bfffc4 	movi	r2,-1
   23734:	00000b06 	br	23764 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23738:	d0a00a17 	ldw	r2,-32728(gp)
   2373c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   23740:	d0e00a17 	ldw	r3,-32728(gp)
   23744:	e0bfff17 	ldw	r2,-4(fp)
   23748:	1885883a 	add	r2,r3,r2
   2374c:	d0a00a15 	stw	r2,-32728(gp)
   23750:	e0bffa17 	ldw	r2,-24(fp)
   23754:	e0bffe15 	stw	r2,-8(fp)
   23758:	e0bffe17 	ldw	r2,-8(fp)
   2375c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23760:	e0bffb17 	ldw	r2,-20(fp)
} 
   23764:	e037883a 	mov	sp,fp
   23768:	df000017 	ldw	fp,0(sp)
   2376c:	dec00104 	addi	sp,sp,4
   23770:	f800283a 	ret

00023774 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23774:	defffd04 	addi	sp,sp,-12
   23778:	dfc00215 	stw	ra,8(sp)
   2377c:	df000115 	stw	fp,4(sp)
   23780:	df000104 	addi	fp,sp,4
   23784:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23788:	e13fff17 	ldw	r4,-4(fp)
   2378c:	00248d00 	call	248d0 <alt_busy_sleep>
}
   23790:	e037883a 	mov	sp,fp
   23794:	dfc00117 	ldw	ra,4(sp)
   23798:	df000017 	ldw	fp,0(sp)
   2379c:	dec00204 	addi	sp,sp,8
   237a0:	f800283a 	ret

000237a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   237a4:	defffe04 	addi	sp,sp,-8
   237a8:	dfc00115 	stw	ra,4(sp)
   237ac:	df000015 	stw	fp,0(sp)
   237b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   237b4:	00820034 	movhi	r2,2048
   237b8:	1086dc04 	addi	r2,r2,7024
   237bc:	10800017 	ldw	r2,0(r2)
   237c0:	10000526 	beq	r2,zero,237d8 <alt_get_errno+0x34>
   237c4:	00820034 	movhi	r2,2048
   237c8:	1086dc04 	addi	r2,r2,7024
   237cc:	10800017 	ldw	r2,0(r2)
   237d0:	103ee83a 	callr	r2
   237d4:	00000206 	br	237e0 <alt_get_errno+0x3c>
   237d8:	00820034 	movhi	r2,2048
   237dc:	1086e404 	addi	r2,r2,7056
}
   237e0:	e037883a 	mov	sp,fp
   237e4:	dfc00117 	ldw	ra,4(sp)
   237e8:	df000017 	ldw	fp,0(sp)
   237ec:	dec00204 	addi	sp,sp,8
   237f0:	f800283a 	ret

000237f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   237f4:	defff904 	addi	sp,sp,-28
   237f8:	dfc00615 	stw	ra,24(sp)
   237fc:	df000515 	stw	fp,20(sp)
   23800:	df000504 	addi	fp,sp,20
   23804:	e13ffd15 	stw	r4,-12(fp)
   23808:	e17ffe15 	stw	r5,-8(fp)
   2380c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23810:	e0bffd17 	ldw	r2,-12(fp)
   23814:	10000816 	blt	r2,zero,23838 <write+0x44>
   23818:	e13ffd17 	ldw	r4,-12(fp)
   2381c:	01400304 	movi	r5,12
   23820:	0022ea80 	call	22ea8 <__mulsi3>
   23824:	1007883a 	mov	r3,r2
   23828:	00820034 	movhi	r2,2048
   2382c:	10824504 	addi	r2,r2,2324
   23830:	1885883a 	add	r2,r3,r2
   23834:	00000106 	br	2383c <write+0x48>
   23838:	0005883a 	mov	r2,zero
   2383c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23840:	e0bffb17 	ldw	r2,-20(fp)
   23844:	10002126 	beq	r2,zero,238cc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23848:	e0bffb17 	ldw	r2,-20(fp)
   2384c:	10800217 	ldw	r2,8(r2)
   23850:	108000cc 	andi	r2,r2,3
   23854:	10001826 	beq	r2,zero,238b8 <write+0xc4>
   23858:	e0bffb17 	ldw	r2,-20(fp)
   2385c:	10800017 	ldw	r2,0(r2)
   23860:	10800617 	ldw	r2,24(r2)
   23864:	10001426 	beq	r2,zero,238b8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23868:	e0bffb17 	ldw	r2,-20(fp)
   2386c:	10800017 	ldw	r2,0(r2)
   23870:	10800617 	ldw	r2,24(r2)
   23874:	e0ffff17 	ldw	r3,-4(fp)
   23878:	e13ffb17 	ldw	r4,-20(fp)
   2387c:	e17ffe17 	ldw	r5,-8(fp)
   23880:	180d883a 	mov	r6,r3
   23884:	103ee83a 	callr	r2
   23888:	e0bffc15 	stw	r2,-16(fp)
   2388c:	e0bffc17 	ldw	r2,-16(fp)
   23890:	1000070e 	bge	r2,zero,238b0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   23894:	00237a40 	call	237a4 <alt_get_errno>
   23898:	1007883a 	mov	r3,r2
   2389c:	e0bffc17 	ldw	r2,-16(fp)
   238a0:	0085c83a 	sub	r2,zero,r2
   238a4:	18800015 	stw	r2,0(r3)
        return -1;
   238a8:	00bfffc4 	movi	r2,-1
   238ac:	00000c06 	br	238e0 <write+0xec>
      }
      return rval;
   238b0:	e0bffc17 	ldw	r2,-16(fp)
   238b4:	00000a06 	br	238e0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   238b8:	00237a40 	call	237a4 <alt_get_errno>
   238bc:	1007883a 	mov	r3,r2
   238c0:	00800344 	movi	r2,13
   238c4:	18800015 	stw	r2,0(r3)
   238c8:	00000406 	br	238dc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   238cc:	00237a40 	call	237a4 <alt_get_errno>
   238d0:	1007883a 	mov	r3,r2
   238d4:	00801444 	movi	r2,81
   238d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   238dc:	00bfffc4 	movi	r2,-1
}
   238e0:	e037883a 	mov	sp,fp
   238e4:	dfc00117 	ldw	ra,4(sp)
   238e8:	df000017 	ldw	fp,0(sp)
   238ec:	dec00204 	addi	sp,sp,8
   238f0:	f800283a 	ret

000238f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   238f4:	defffd04 	addi	sp,sp,-12
   238f8:	dfc00215 	stw	ra,8(sp)
   238fc:	df000115 	stw	fp,4(sp)
   23900:	df000104 	addi	fp,sp,4
   23904:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23908:	e13fff17 	ldw	r4,-4(fp)
   2390c:	01420034 	movhi	r5,2048
   23910:	2946d904 	addi	r5,r5,7012
   23914:	0024a940 	call	24a94 <alt_dev_llist_insert>
}
   23918:	e037883a 	mov	sp,fp
   2391c:	dfc00117 	ldw	ra,4(sp)
   23920:	df000017 	ldw	fp,0(sp)
   23924:	dec00204 	addi	sp,sp,8
   23928:	f800283a 	ret

0002392c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2392c:	defffd04 	addi	sp,sp,-12
   23930:	dfc00215 	stw	ra,8(sp)
   23934:	df000115 	stw	fp,4(sp)
   23938:	df000104 	addi	fp,sp,4
   2393c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23940:	00253e40 	call	253e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23944:	00800044 	movi	r2,1
   23948:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2394c:	e037883a 	mov	sp,fp
   23950:	dfc00117 	ldw	ra,4(sp)
   23954:	df000017 	ldw	fp,0(sp)
   23958:	dec00204 	addi	sp,sp,8
   2395c:	f800283a 	ret

00023960 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23960:	defffe04 	addi	sp,sp,-8
   23964:	dfc00115 	stw	ra,4(sp)
   23968:	df000015 	stw	fp,0(sp)
   2396c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23970:	01020034 	movhi	r4,2048
   23974:	2102af04 	addi	r4,r4,2748
   23978:	000b883a 	mov	r5,zero
   2397c:	000d883a 	mov	r6,zero
   23980:	0023b240 	call	23b24 <altera_avalon_jtag_uart_init>
   23984:	01020034 	movhi	r4,2048
   23988:	2102a504 	addi	r4,r4,2708
   2398c:	00238f40 	call	238f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   23990:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
   23994:	01020034 	movhi	r4,2048
   23998:	2106bd04 	addi	r4,r4,6900
   2399c:	00238f40 	call	238f4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
   239a0:	01020034 	movhi	r4,2048
   239a4:	2106c804 	addi	r4,r4,6944
   239a8:	00238f40 	call	238f4 <alt_dev_reg>
}
   239ac:	e037883a 	mov	sp,fp
   239b0:	dfc00117 	ldw	ra,4(sp)
   239b4:	df000017 	ldw	fp,0(sp)
   239b8:	dec00204 	addi	sp,sp,8
   239bc:	f800283a 	ret

000239c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   239c0:	defffa04 	addi	sp,sp,-24
   239c4:	dfc00515 	stw	ra,20(sp)
   239c8:	df000415 	stw	fp,16(sp)
   239cc:	df000404 	addi	fp,sp,16
   239d0:	e13ffd15 	stw	r4,-12(fp)
   239d4:	e17ffe15 	stw	r5,-8(fp)
   239d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   239dc:	e0bffd17 	ldw	r2,-12(fp)
   239e0:	10800017 	ldw	r2,0(r2)
   239e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   239e8:	e0bffc17 	ldw	r2,-16(fp)
   239ec:	10c00a04 	addi	r3,r2,40
   239f0:	e0bffd17 	ldw	r2,-12(fp)
   239f4:	10800217 	ldw	r2,8(r2)
   239f8:	1809883a 	mov	r4,r3
   239fc:	e17ffe17 	ldw	r5,-8(fp)
   23a00:	e1bfff17 	ldw	r6,-4(fp)
   23a04:	100f883a 	mov	r7,r2
   23a08:	0023fe00 	call	23fe0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23a0c:	e037883a 	mov	sp,fp
   23a10:	dfc00117 	ldw	ra,4(sp)
   23a14:	df000017 	ldw	fp,0(sp)
   23a18:	dec00204 	addi	sp,sp,8
   23a1c:	f800283a 	ret

00023a20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23a20:	defffa04 	addi	sp,sp,-24
   23a24:	dfc00515 	stw	ra,20(sp)
   23a28:	df000415 	stw	fp,16(sp)
   23a2c:	df000404 	addi	fp,sp,16
   23a30:	e13ffd15 	stw	r4,-12(fp)
   23a34:	e17ffe15 	stw	r5,-8(fp)
   23a38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23a3c:	e0bffd17 	ldw	r2,-12(fp)
   23a40:	10800017 	ldw	r2,0(r2)
   23a44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23a48:	e0bffc17 	ldw	r2,-16(fp)
   23a4c:	10c00a04 	addi	r3,r2,40
   23a50:	e0bffd17 	ldw	r2,-12(fp)
   23a54:	10800217 	ldw	r2,8(r2)
   23a58:	1809883a 	mov	r4,r3
   23a5c:	e17ffe17 	ldw	r5,-8(fp)
   23a60:	e1bfff17 	ldw	r6,-4(fp)
   23a64:	100f883a 	mov	r7,r2
   23a68:	00241ec0 	call	241ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23a6c:	e037883a 	mov	sp,fp
   23a70:	dfc00117 	ldw	ra,4(sp)
   23a74:	df000017 	ldw	fp,0(sp)
   23a78:	dec00204 	addi	sp,sp,8
   23a7c:	f800283a 	ret

00023a80 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23a80:	defffc04 	addi	sp,sp,-16
   23a84:	dfc00315 	stw	ra,12(sp)
   23a88:	df000215 	stw	fp,8(sp)
   23a8c:	df000204 	addi	fp,sp,8
   23a90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23a94:	e0bfff17 	ldw	r2,-4(fp)
   23a98:	10800017 	ldw	r2,0(r2)
   23a9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23aa0:	e0bffe17 	ldw	r2,-8(fp)
   23aa4:	10c00a04 	addi	r3,r2,40
   23aa8:	e0bfff17 	ldw	r2,-4(fp)
   23aac:	10800217 	ldw	r2,8(r2)
   23ab0:	1809883a 	mov	r4,r3
   23ab4:	100b883a 	mov	r5,r2
   23ab8:	0023e8c0 	call	23e8c <altera_avalon_jtag_uart_close>
}
   23abc:	e037883a 	mov	sp,fp
   23ac0:	dfc00117 	ldw	ra,4(sp)
   23ac4:	df000017 	ldw	fp,0(sp)
   23ac8:	dec00204 	addi	sp,sp,8
   23acc:	f800283a 	ret

00023ad0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23ad0:	defffa04 	addi	sp,sp,-24
   23ad4:	dfc00515 	stw	ra,20(sp)
   23ad8:	df000415 	stw	fp,16(sp)
   23adc:	df000404 	addi	fp,sp,16
   23ae0:	e13ffd15 	stw	r4,-12(fp)
   23ae4:	e17ffe15 	stw	r5,-8(fp)
   23ae8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23aec:	e0bffd17 	ldw	r2,-12(fp)
   23af0:	10800017 	ldw	r2,0(r2)
   23af4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23af8:	e0bffc17 	ldw	r2,-16(fp)
   23afc:	10800a04 	addi	r2,r2,40
   23b00:	1009883a 	mov	r4,r2
   23b04:	e17ffe17 	ldw	r5,-8(fp)
   23b08:	e1bfff17 	ldw	r6,-4(fp)
   23b0c:	0023ef40 	call	23ef4 <altera_avalon_jtag_uart_ioctl>
}
   23b10:	e037883a 	mov	sp,fp
   23b14:	dfc00117 	ldw	ra,4(sp)
   23b18:	df000017 	ldw	fp,0(sp)
   23b1c:	dec00204 	addi	sp,sp,8
   23b20:	f800283a 	ret

00023b24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23b24:	defffb04 	addi	sp,sp,-20
   23b28:	dfc00415 	stw	ra,16(sp)
   23b2c:	df000315 	stw	fp,12(sp)
   23b30:	df000304 	addi	fp,sp,12
   23b34:	e13ffd15 	stw	r4,-12(fp)
   23b38:	e17ffe15 	stw	r5,-8(fp)
   23b3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23b40:	e0bffd17 	ldw	r2,-12(fp)
   23b44:	00c00044 	movi	r3,1
   23b48:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23b4c:	e0bffd17 	ldw	r2,-12(fp)
   23b50:	10800017 	ldw	r2,0(r2)
   23b54:	10800104 	addi	r2,r2,4
   23b58:	1007883a 	mov	r3,r2
   23b5c:	e0bffd17 	ldw	r2,-12(fp)
   23b60:	10800817 	ldw	r2,32(r2)
   23b64:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   23b68:	e0bfff17 	ldw	r2,-4(fp)
   23b6c:	1009883a 	mov	r4,r2
   23b70:	e17ffd17 	ldw	r5,-12(fp)
   23b74:	018000b4 	movhi	r6,2
   23b78:	318ef704 	addi	r6,r6,15324
   23b7c:	0024df40 	call	24df4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23b80:	e0bffd17 	ldw	r2,-12(fp)
   23b84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23b88:	e0bffd17 	ldw	r2,-12(fp)
   23b8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23b90:	00820034 	movhi	r2,2048
   23b94:	1086e904 	addi	r2,r2,7076
   23b98:	10800017 	ldw	r2,0(r2)
   23b9c:	1809883a 	mov	r4,r3
   23ba0:	100b883a 	mov	r5,r2
   23ba4:	018000b4 	movhi	r6,2
   23ba8:	318f7904 	addi	r6,r6,15844
   23bac:	e1fffd17 	ldw	r7,-12(fp)
   23bb0:	00247900 	call	24790 <alt_alarm_start>
   23bb4:	1000040e 	bge	r2,zero,23bc8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23bb8:	e0fffd17 	ldw	r3,-12(fp)
   23bbc:	00a00034 	movhi	r2,32768
   23bc0:	10bfffc4 	addi	r2,r2,-1
   23bc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23bc8:	e037883a 	mov	sp,fp
   23bcc:	dfc00117 	ldw	ra,4(sp)
   23bd0:	df000017 	ldw	fp,0(sp)
   23bd4:	dec00204 	addi	sp,sp,8
   23bd8:	f800283a 	ret

00023bdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23bdc:	defff704 	addi	sp,sp,-36
   23be0:	df000815 	stw	fp,32(sp)
   23be4:	df000804 	addi	fp,sp,32
   23be8:	e13ffe15 	stw	r4,-8(fp)
   23bec:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23bf0:	e0bffe17 	ldw	r2,-8(fp)
   23bf4:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   23bf8:	e0bffa17 	ldw	r2,-24(fp)
   23bfc:	10800017 	ldw	r2,0(r2)
   23c00:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23c04:	e0bffb17 	ldw	r2,-20(fp)
   23c08:	10800104 	addi	r2,r2,4
   23c0c:	10800037 	ldwio	r2,0(r2)
   23c10:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23c14:	e0bffc17 	ldw	r2,-16(fp)
   23c18:	1080c00c 	andi	r2,r2,768
   23c1c:	1000011e 	bne	r2,zero,23c24 <altera_avalon_jtag_uart_irq+0x48>
      break;
   23c20:	00006c06 	br	23dd4 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23c24:	e0bffc17 	ldw	r2,-16(fp)
   23c28:	1080400c 	andi	r2,r2,256
   23c2c:	10003426 	beq	r2,zero,23d00 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23c30:	00800074 	movhi	r2,1
   23c34:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23c38:	e0bffa17 	ldw	r2,-24(fp)
   23c3c:	10800a17 	ldw	r2,40(r2)
   23c40:	10800044 	addi	r2,r2,1
   23c44:	1081ffcc 	andi	r2,r2,2047
   23c48:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   23c4c:	e0bffa17 	ldw	r2,-24(fp)
   23c50:	10c00b17 	ldw	r3,44(r2)
   23c54:	e0bffd17 	ldw	r2,-12(fp)
   23c58:	1880011e 	bne	r3,r2,23c60 <altera_avalon_jtag_uart_irq+0x84>
          break;
   23c5c:	00001606 	br	23cb8 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23c60:	e0bffb17 	ldw	r2,-20(fp)
   23c64:	10800037 	ldwio	r2,0(r2)
   23c68:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23c6c:	e0bff817 	ldw	r2,-32(fp)
   23c70:	10a0000c 	andi	r2,r2,32768
   23c74:	1000011e 	bne	r2,zero,23c7c <altera_avalon_jtag_uart_irq+0xa0>
          break;
   23c78:	00000f06 	br	23cb8 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23c7c:	e0bffa17 	ldw	r2,-24(fp)
   23c80:	10800a17 	ldw	r2,40(r2)
   23c84:	e0fff817 	ldw	r3,-32(fp)
   23c88:	1809883a 	mov	r4,r3
   23c8c:	e0fffa17 	ldw	r3,-24(fp)
   23c90:	1885883a 	add	r2,r3,r2
   23c94:	10800e04 	addi	r2,r2,56
   23c98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23c9c:	e0bffa17 	ldw	r2,-24(fp)
   23ca0:	10800a17 	ldw	r2,40(r2)
   23ca4:	10800044 	addi	r2,r2,1
   23ca8:	10c1ffcc 	andi	r3,r2,2047
   23cac:	e0bffa17 	ldw	r2,-24(fp)
   23cb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23cb4:	003fe006 	br	23c38 <__alt_data_end+0xf4023c38>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23cb8:	e0bff817 	ldw	r2,-32(fp)
   23cbc:	10bfffec 	andhi	r2,r2,65535
   23cc0:	10000f26 	beq	r2,zero,23d00 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23cc4:	e0bffa17 	ldw	r2,-24(fp)
   23cc8:	10c00817 	ldw	r3,32(r2)
   23ccc:	00bfff84 	movi	r2,-2
   23cd0:	1886703a 	and	r3,r3,r2
   23cd4:	e0bffa17 	ldw	r2,-24(fp)
   23cd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23cdc:	e0bffb17 	ldw	r2,-20(fp)
   23ce0:	10800104 	addi	r2,r2,4
   23ce4:	1007883a 	mov	r3,r2
   23ce8:	e0bffa17 	ldw	r2,-24(fp)
   23cec:	10800817 	ldw	r2,32(r2)
   23cf0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23cf4:	e0bffb17 	ldw	r2,-20(fp)
   23cf8:	10800104 	addi	r2,r2,4
   23cfc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23d00:	e0bffc17 	ldw	r2,-16(fp)
   23d04:	1080800c 	andi	r2,r2,512
   23d08:	10003126 	beq	r2,zero,23dd0 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23d0c:	e0bffc17 	ldw	r2,-16(fp)
   23d10:	1004d43a 	srli	r2,r2,16
   23d14:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23d18:	00001406 	br	23d6c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23d1c:	e0bffb17 	ldw	r2,-20(fp)
   23d20:	e0fffa17 	ldw	r3,-24(fp)
   23d24:	18c00d17 	ldw	r3,52(r3)
   23d28:	e13ffa17 	ldw	r4,-24(fp)
   23d2c:	20c7883a 	add	r3,r4,r3
   23d30:	18c20e04 	addi	r3,r3,2104
   23d34:	18c00003 	ldbu	r3,0(r3)
   23d38:	18c03fcc 	andi	r3,r3,255
   23d3c:	18c0201c 	xori	r3,r3,128
   23d40:	18ffe004 	addi	r3,r3,-128
   23d44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23d48:	e0bffa17 	ldw	r2,-24(fp)
   23d4c:	10800d17 	ldw	r2,52(r2)
   23d50:	10800044 	addi	r2,r2,1
   23d54:	10c1ffcc 	andi	r3,r2,2047
   23d58:	e0bffa17 	ldw	r2,-24(fp)
   23d5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23d60:	e0bff917 	ldw	r2,-28(fp)
   23d64:	10bfffc4 	addi	r2,r2,-1
   23d68:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23d6c:	e0bff917 	ldw	r2,-28(fp)
   23d70:	10000526 	beq	r2,zero,23d88 <altera_avalon_jtag_uart_irq+0x1ac>
   23d74:	e0bffa17 	ldw	r2,-24(fp)
   23d78:	10c00d17 	ldw	r3,52(r2)
   23d7c:	e0bffa17 	ldw	r2,-24(fp)
   23d80:	10800c17 	ldw	r2,48(r2)
   23d84:	18bfe51e 	bne	r3,r2,23d1c <__alt_data_end+0xf4023d1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23d88:	e0bff917 	ldw	r2,-28(fp)
   23d8c:	10001026 	beq	r2,zero,23dd0 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23d90:	e0bffa17 	ldw	r2,-24(fp)
   23d94:	10c00817 	ldw	r3,32(r2)
   23d98:	00bfff44 	movi	r2,-3
   23d9c:	1886703a 	and	r3,r3,r2
   23da0:	e0bffa17 	ldw	r2,-24(fp)
   23da4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23da8:	e0bffa17 	ldw	r2,-24(fp)
   23dac:	10800017 	ldw	r2,0(r2)
   23db0:	10800104 	addi	r2,r2,4
   23db4:	1007883a 	mov	r3,r2
   23db8:	e0bffa17 	ldw	r2,-24(fp)
   23dbc:	10800817 	ldw	r2,32(r2)
   23dc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23dc4:	e0bffb17 	ldw	r2,-20(fp)
   23dc8:	10800104 	addi	r2,r2,4
   23dcc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23dd0:	003f8c06 	br	23c04 <__alt_data_end+0xf4023c04>
}
   23dd4:	e037883a 	mov	sp,fp
   23dd8:	df000017 	ldw	fp,0(sp)
   23ddc:	dec00104 	addi	sp,sp,4
   23de0:	f800283a 	ret

00023de4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23de4:	defff804 	addi	sp,sp,-32
   23de8:	df000715 	stw	fp,28(sp)
   23dec:	df000704 	addi	fp,sp,28
   23df0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23df4:	e0bffb17 	ldw	r2,-20(fp)
   23df8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23dfc:	e0bff917 	ldw	r2,-28(fp)
   23e00:	10800017 	ldw	r2,0(r2)
   23e04:	10800104 	addi	r2,r2,4
   23e08:	10800037 	ldwio	r2,0(r2)
   23e0c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23e10:	e0bffa17 	ldw	r2,-24(fp)
   23e14:	1081000c 	andi	r2,r2,1024
   23e18:	10000b26 	beq	r2,zero,23e48 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23e1c:	e0bff917 	ldw	r2,-28(fp)
   23e20:	10800017 	ldw	r2,0(r2)
   23e24:	10800104 	addi	r2,r2,4
   23e28:	1007883a 	mov	r3,r2
   23e2c:	e0bff917 	ldw	r2,-28(fp)
   23e30:	10800817 	ldw	r2,32(r2)
   23e34:	10810014 	ori	r2,r2,1024
   23e38:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23e3c:	e0bff917 	ldw	r2,-28(fp)
   23e40:	10000915 	stw	zero,36(r2)
   23e44:	00000a06 	br	23e70 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23e48:	e0bff917 	ldw	r2,-28(fp)
   23e4c:	10c00917 	ldw	r3,36(r2)
   23e50:	00a00034 	movhi	r2,32768
   23e54:	10bfff04 	addi	r2,r2,-4
   23e58:	10c00536 	bltu	r2,r3,23e70 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   23e5c:	e0bff917 	ldw	r2,-28(fp)
   23e60:	10800917 	ldw	r2,36(r2)
   23e64:	10c00044 	addi	r3,r2,1
   23e68:	e0bff917 	ldw	r2,-28(fp)
   23e6c:	10c00915 	stw	r3,36(r2)
   23e70:	00820034 	movhi	r2,2048
   23e74:	1086e904 	addi	r2,r2,7076
   23e78:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23e7c:	e037883a 	mov	sp,fp
   23e80:	df000017 	ldw	fp,0(sp)
   23e84:	dec00104 	addi	sp,sp,4
   23e88:	f800283a 	ret

00023e8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23e8c:	defffd04 	addi	sp,sp,-12
   23e90:	df000215 	stw	fp,8(sp)
   23e94:	df000204 	addi	fp,sp,8
   23e98:	e13ffe15 	stw	r4,-8(fp)
   23e9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23ea0:	00000506 	br	23eb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23ea4:	e0bfff17 	ldw	r2,-4(fp)
   23ea8:	1090000c 	andi	r2,r2,16384
   23eac:	10000226 	beq	r2,zero,23eb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23eb0:	00bffd44 	movi	r2,-11
   23eb4:	00000b06 	br	23ee4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23eb8:	e0bffe17 	ldw	r2,-8(fp)
   23ebc:	10c00d17 	ldw	r3,52(r2)
   23ec0:	e0bffe17 	ldw	r2,-8(fp)
   23ec4:	10800c17 	ldw	r2,48(r2)
   23ec8:	18800526 	beq	r3,r2,23ee0 <altera_avalon_jtag_uart_close+0x54>
   23ecc:	e0bffe17 	ldw	r2,-8(fp)
   23ed0:	10c00917 	ldw	r3,36(r2)
   23ed4:	e0bffe17 	ldw	r2,-8(fp)
   23ed8:	10800117 	ldw	r2,4(r2)
   23edc:	18bff136 	bltu	r3,r2,23ea4 <__alt_data_end+0xf4023ea4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23ee0:	0005883a 	mov	r2,zero
}
   23ee4:	e037883a 	mov	sp,fp
   23ee8:	df000017 	ldw	fp,0(sp)
   23eec:	dec00104 	addi	sp,sp,4
   23ef0:	f800283a 	ret

00023ef4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23ef4:	defffa04 	addi	sp,sp,-24
   23ef8:	df000515 	stw	fp,20(sp)
   23efc:	df000504 	addi	fp,sp,20
   23f00:	e13ffd15 	stw	r4,-12(fp)
   23f04:	e17ffe15 	stw	r5,-8(fp)
   23f08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23f0c:	00bff9c4 	movi	r2,-25
   23f10:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23f14:	e0bffe17 	ldw	r2,-8(fp)
   23f18:	10da8060 	cmpeqi	r3,r2,27137
   23f1c:	1800031e 	bne	r3,zero,23f2c <altera_avalon_jtag_uart_ioctl+0x38>
   23f20:	109a80a0 	cmpeqi	r2,r2,27138
   23f24:	1000191e 	bne	r2,zero,23f8c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   23f28:	00002806 	br	23fcc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23f2c:	e0bffd17 	ldw	r2,-12(fp)
   23f30:	10c00117 	ldw	r3,4(r2)
   23f34:	00a00034 	movhi	r2,32768
   23f38:	10bfffc4 	addi	r2,r2,-1
   23f3c:	18801226 	beq	r3,r2,23f88 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   23f40:	e0bfff17 	ldw	r2,-4(fp)
   23f44:	10800017 	ldw	r2,0(r2)
   23f48:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23f4c:	e0bffc17 	ldw	r2,-16(fp)
   23f50:	10800090 	cmplti	r2,r2,2
   23f54:	1000061e 	bne	r2,zero,23f70 <altera_avalon_jtag_uart_ioctl+0x7c>
   23f58:	e0fffc17 	ldw	r3,-16(fp)
   23f5c:	00a00034 	movhi	r2,32768
   23f60:	10bfffc4 	addi	r2,r2,-1
   23f64:	18800226 	beq	r3,r2,23f70 <altera_avalon_jtag_uart_ioctl+0x7c>
   23f68:	e0bffc17 	ldw	r2,-16(fp)
   23f6c:	00000206 	br	23f78 <altera_avalon_jtag_uart_ioctl+0x84>
   23f70:	00a00034 	movhi	r2,32768
   23f74:	10bfff84 	addi	r2,r2,-2
   23f78:	e0fffd17 	ldw	r3,-12(fp)
   23f7c:	18800115 	stw	r2,4(r3)
      rc = 0;
   23f80:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23f84:	00001106 	br	23fcc <altera_avalon_jtag_uart_ioctl+0xd8>
   23f88:	00001006 	br	23fcc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23f8c:	e0bffd17 	ldw	r2,-12(fp)
   23f90:	10c00117 	ldw	r3,4(r2)
   23f94:	00a00034 	movhi	r2,32768
   23f98:	10bfffc4 	addi	r2,r2,-1
   23f9c:	18800a26 	beq	r3,r2,23fc8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23fa0:	e0bffd17 	ldw	r2,-12(fp)
   23fa4:	10c00917 	ldw	r3,36(r2)
   23fa8:	e0bffd17 	ldw	r2,-12(fp)
   23fac:	10800117 	ldw	r2,4(r2)
   23fb0:	1885803a 	cmpltu	r2,r3,r2
   23fb4:	10c03fcc 	andi	r3,r2,255
   23fb8:	e0bfff17 	ldw	r2,-4(fp)
   23fbc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23fc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23fc4:	00000006 	br	23fc8 <altera_avalon_jtag_uart_ioctl+0xd4>
   23fc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23fcc:	e0bffb17 	ldw	r2,-20(fp)
}
   23fd0:	e037883a 	mov	sp,fp
   23fd4:	df000017 	ldw	fp,0(sp)
   23fd8:	dec00104 	addi	sp,sp,4
   23fdc:	f800283a 	ret

00023fe0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23fe0:	defff304 	addi	sp,sp,-52
   23fe4:	dfc00c15 	stw	ra,48(sp)
   23fe8:	df000b15 	stw	fp,44(sp)
   23fec:	df000b04 	addi	fp,sp,44
   23ff0:	e13ffc15 	stw	r4,-16(fp)
   23ff4:	e17ffd15 	stw	r5,-12(fp)
   23ff8:	e1bffe15 	stw	r6,-8(fp)
   23ffc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   24000:	e0bffd17 	ldw	r2,-12(fp)
   24004:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24008:	00004906 	br	24130 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2400c:	e0bffc17 	ldw	r2,-16(fp)
   24010:	10800a17 	ldw	r2,40(r2)
   24014:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24018:	e0bffc17 	ldw	r2,-16(fp)
   2401c:	10800b17 	ldw	r2,44(r2)
   24020:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   24024:	e0fff717 	ldw	r3,-36(fp)
   24028:	e0bff817 	ldw	r2,-32(fp)
   2402c:	18800536 	bltu	r3,r2,24044 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24030:	e0fff717 	ldw	r3,-36(fp)
   24034:	e0bff817 	ldw	r2,-32(fp)
   24038:	1885c83a 	sub	r2,r3,r2
   2403c:	e0bff615 	stw	r2,-40(fp)
   24040:	00000406 	br	24054 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24044:	00c20004 	movi	r3,2048
   24048:	e0bff817 	ldw	r2,-32(fp)
   2404c:	1885c83a 	sub	r2,r3,r2
   24050:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24054:	e0bff617 	ldw	r2,-40(fp)
   24058:	1000011e 	bne	r2,zero,24060 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   2405c:	00001d06 	br	240d4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   24060:	e0fffe17 	ldw	r3,-8(fp)
   24064:	e0bff617 	ldw	r2,-40(fp)
   24068:	1880022e 	bgeu	r3,r2,24074 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2406c:	e0bffe17 	ldw	r2,-8(fp)
   24070:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24074:	e0bff817 	ldw	r2,-32(fp)
   24078:	10800e04 	addi	r2,r2,56
   2407c:	e0fffc17 	ldw	r3,-16(fp)
   24080:	1885883a 	add	r2,r3,r2
   24084:	e13ff517 	ldw	r4,-44(fp)
   24088:	100b883a 	mov	r5,r2
   2408c:	e1bff617 	ldw	r6,-40(fp)
   24090:	00212200 	call	21220 <memcpy>
      ptr   += n;
   24094:	e0fff517 	ldw	r3,-44(fp)
   24098:	e0bff617 	ldw	r2,-40(fp)
   2409c:	1885883a 	add	r2,r3,r2
   240a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   240a4:	e0fffe17 	ldw	r3,-8(fp)
   240a8:	e0bff617 	ldw	r2,-40(fp)
   240ac:	1885c83a 	sub	r2,r3,r2
   240b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240b4:	e0fff817 	ldw	r3,-32(fp)
   240b8:	e0bff617 	ldw	r2,-40(fp)
   240bc:	1885883a 	add	r2,r3,r2
   240c0:	10c1ffcc 	andi	r3,r2,2047
   240c4:	e0bffc17 	ldw	r2,-16(fp)
   240c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   240cc:	e0bffe17 	ldw	r2,-8(fp)
   240d0:	00bfce16 	blt	zero,r2,2400c <__alt_data_end+0xf402400c>

    /* If we read any data then return it */
    if (ptr != buffer)
   240d4:	e0fff517 	ldw	r3,-44(fp)
   240d8:	e0bffd17 	ldw	r2,-12(fp)
   240dc:	18800126 	beq	r3,r2,240e4 <altera_avalon_jtag_uart_read+0x104>
      break;
   240e0:	00001506 	br	24138 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   240e4:	e0bfff17 	ldw	r2,-4(fp)
   240e8:	1090000c 	andi	r2,r2,16384
   240ec:	10000126 	beq	r2,zero,240f4 <altera_avalon_jtag_uart_read+0x114>
      break;
   240f0:	00001106 	br	24138 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   240f4:	0001883a 	nop
   240f8:	e0bffc17 	ldw	r2,-16(fp)
   240fc:	10c00a17 	ldw	r3,40(r2)
   24100:	e0bff717 	ldw	r2,-36(fp)
   24104:	1880051e 	bne	r3,r2,2411c <altera_avalon_jtag_uart_read+0x13c>
   24108:	e0bffc17 	ldw	r2,-16(fp)
   2410c:	10c00917 	ldw	r3,36(r2)
   24110:	e0bffc17 	ldw	r2,-16(fp)
   24114:	10800117 	ldw	r2,4(r2)
   24118:	18bff736 	bltu	r3,r2,240f8 <__alt_data_end+0xf40240f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2411c:	e0bffc17 	ldw	r2,-16(fp)
   24120:	10c00a17 	ldw	r3,40(r2)
   24124:	e0bff717 	ldw	r2,-36(fp)
   24128:	1880011e 	bne	r3,r2,24130 <altera_avalon_jtag_uart_read+0x150>
      break;
   2412c:	00000206 	br	24138 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24130:	e0bffe17 	ldw	r2,-8(fp)
   24134:	00bfb516 	blt	zero,r2,2400c <__alt_data_end+0xf402400c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24138:	e0fff517 	ldw	r3,-44(fp)
   2413c:	e0bffd17 	ldw	r2,-12(fp)
   24140:	18801826 	beq	r3,r2,241a4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24144:	0005303a 	rdctl	r2,status
   24148:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2414c:	e0fffa17 	ldw	r3,-24(fp)
   24150:	00bfff84 	movi	r2,-2
   24154:	1884703a 	and	r2,r3,r2
   24158:	1001703a 	wrctl	status,r2
  
  return context;
   2415c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24160:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24164:	e0bffc17 	ldw	r2,-16(fp)
   24168:	10800817 	ldw	r2,32(r2)
   2416c:	10c00054 	ori	r3,r2,1
   24170:	e0bffc17 	ldw	r2,-16(fp)
   24174:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24178:	e0bffc17 	ldw	r2,-16(fp)
   2417c:	10800017 	ldw	r2,0(r2)
   24180:	10800104 	addi	r2,r2,4
   24184:	1007883a 	mov	r3,r2
   24188:	e0bffc17 	ldw	r2,-16(fp)
   2418c:	10800817 	ldw	r2,32(r2)
   24190:	18800035 	stwio	r2,0(r3)
   24194:	e0bff917 	ldw	r2,-28(fp)
   24198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2419c:	e0bffb17 	ldw	r2,-20(fp)
   241a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   241a4:	e0fff517 	ldw	r3,-44(fp)
   241a8:	e0bffd17 	ldw	r2,-12(fp)
   241ac:	18800426 	beq	r3,r2,241c0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   241b0:	e0fff517 	ldw	r3,-44(fp)
   241b4:	e0bffd17 	ldw	r2,-12(fp)
   241b8:	1885c83a 	sub	r2,r3,r2
   241bc:	00000606 	br	241d8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   241c0:	e0bfff17 	ldw	r2,-4(fp)
   241c4:	1090000c 	andi	r2,r2,16384
   241c8:	10000226 	beq	r2,zero,241d4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   241cc:	00bffd44 	movi	r2,-11
   241d0:	00000106 	br	241d8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   241d4:	00bffec4 	movi	r2,-5
}
   241d8:	e037883a 	mov	sp,fp
   241dc:	dfc00117 	ldw	ra,4(sp)
   241e0:	df000017 	ldw	fp,0(sp)
   241e4:	dec00204 	addi	sp,sp,8
   241e8:	f800283a 	ret

000241ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   241ec:	defff304 	addi	sp,sp,-52
   241f0:	dfc00c15 	stw	ra,48(sp)
   241f4:	df000b15 	stw	fp,44(sp)
   241f8:	df000b04 	addi	fp,sp,44
   241fc:	e13ffc15 	stw	r4,-16(fp)
   24200:	e17ffd15 	stw	r5,-12(fp)
   24204:	e1bffe15 	stw	r6,-8(fp)
   24208:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2420c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24210:	e0bffd17 	ldw	r2,-12(fp)
   24214:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24218:	00003806 	br	242fc <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2421c:	e0bffc17 	ldw	r2,-16(fp)
   24220:	10800c17 	ldw	r2,48(r2)
   24224:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   24228:	e0bffc17 	ldw	r2,-16(fp)
   2422c:	10800d17 	ldw	r2,52(r2)
   24230:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24234:	e0fff817 	ldw	r3,-32(fp)
   24238:	e0bff517 	ldw	r2,-44(fp)
   2423c:	1880062e 	bgeu	r3,r2,24258 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24240:	e0fff517 	ldw	r3,-44(fp)
   24244:	e0bff817 	ldw	r2,-32(fp)
   24248:	1885c83a 	sub	r2,r3,r2
   2424c:	10bfffc4 	addi	r2,r2,-1
   24250:	e0bff615 	stw	r2,-40(fp)
   24254:	00000b06 	br	24284 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24258:	e0bff517 	ldw	r2,-44(fp)
   2425c:	10000526 	beq	r2,zero,24274 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24260:	00c20004 	movi	r3,2048
   24264:	e0bff817 	ldw	r2,-32(fp)
   24268:	1885c83a 	sub	r2,r3,r2
   2426c:	e0bff615 	stw	r2,-40(fp)
   24270:	00000406 	br	24284 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24274:	00c1ffc4 	movi	r3,2047
   24278:	e0bff817 	ldw	r2,-32(fp)
   2427c:	1885c83a 	sub	r2,r3,r2
   24280:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24284:	e0bff617 	ldw	r2,-40(fp)
   24288:	1000011e 	bne	r2,zero,24290 <altera_avalon_jtag_uart_write+0xa4>
        break;
   2428c:	00001d06 	br	24304 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   24290:	e0fffe17 	ldw	r3,-8(fp)
   24294:	e0bff617 	ldw	r2,-40(fp)
   24298:	1880022e 	bgeu	r3,r2,242a4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   2429c:	e0bffe17 	ldw	r2,-8(fp)
   242a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   242a4:	e0bff817 	ldw	r2,-32(fp)
   242a8:	10820e04 	addi	r2,r2,2104
   242ac:	e0fffc17 	ldw	r3,-16(fp)
   242b0:	1885883a 	add	r2,r3,r2
   242b4:	1009883a 	mov	r4,r2
   242b8:	e17ffd17 	ldw	r5,-12(fp)
   242bc:	e1bff617 	ldw	r6,-40(fp)
   242c0:	00212200 	call	21220 <memcpy>
      ptr   += n;
   242c4:	e0fffd17 	ldw	r3,-12(fp)
   242c8:	e0bff617 	ldw	r2,-40(fp)
   242cc:	1885883a 	add	r2,r3,r2
   242d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   242d4:	e0fffe17 	ldw	r3,-8(fp)
   242d8:	e0bff617 	ldw	r2,-40(fp)
   242dc:	1885c83a 	sub	r2,r3,r2
   242e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   242e4:	e0fff817 	ldw	r3,-32(fp)
   242e8:	e0bff617 	ldw	r2,-40(fp)
   242ec:	1885883a 	add	r2,r3,r2
   242f0:	10c1ffcc 	andi	r3,r2,2047
   242f4:	e0bffc17 	ldw	r2,-16(fp)
   242f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   242fc:	e0bffe17 	ldw	r2,-8(fp)
   24300:	00bfc616 	blt	zero,r2,2421c <__alt_data_end+0xf402421c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24304:	0005303a 	rdctl	r2,status
   24308:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2430c:	e0fffa17 	ldw	r3,-24(fp)
   24310:	00bfff84 	movi	r2,-2
   24314:	1884703a 	and	r2,r3,r2
   24318:	1001703a 	wrctl	status,r2
  
  return context;
   2431c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24320:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24324:	e0bffc17 	ldw	r2,-16(fp)
   24328:	10800817 	ldw	r2,32(r2)
   2432c:	10c00094 	ori	r3,r2,2
   24330:	e0bffc17 	ldw	r2,-16(fp)
   24334:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24338:	e0bffc17 	ldw	r2,-16(fp)
   2433c:	10800017 	ldw	r2,0(r2)
   24340:	10800104 	addi	r2,r2,4
   24344:	1007883a 	mov	r3,r2
   24348:	e0bffc17 	ldw	r2,-16(fp)
   2434c:	10800817 	ldw	r2,32(r2)
   24350:	18800035 	stwio	r2,0(r3)
   24354:	e0bff917 	ldw	r2,-28(fp)
   24358:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2435c:	e0bffb17 	ldw	r2,-20(fp)
   24360:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24364:	e0bffe17 	ldw	r2,-8(fp)
   24368:	0080120e 	bge	zero,r2,243b4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   2436c:	e0bfff17 	ldw	r2,-4(fp)
   24370:	1090000c 	andi	r2,r2,16384
   24374:	10000126 	beq	r2,zero,2437c <altera_avalon_jtag_uart_write+0x190>
        break;
   24378:	00001006 	br	243bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2437c:	0001883a 	nop
   24380:	e0bffc17 	ldw	r2,-16(fp)
   24384:	10c00d17 	ldw	r3,52(r2)
   24388:	e0bff517 	ldw	r2,-44(fp)
   2438c:	1880051e 	bne	r3,r2,243a4 <altera_avalon_jtag_uart_write+0x1b8>
   24390:	e0bffc17 	ldw	r2,-16(fp)
   24394:	10c00917 	ldw	r3,36(r2)
   24398:	e0bffc17 	ldw	r2,-16(fp)
   2439c:	10800117 	ldw	r2,4(r2)
   243a0:	18bff736 	bltu	r3,r2,24380 <__alt_data_end+0xf4024380>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   243a4:	e0bffc17 	ldw	r2,-16(fp)
   243a8:	10800917 	ldw	r2,36(r2)
   243ac:	10000126 	beq	r2,zero,243b4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   243b0:	00000206 	br	243bc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   243b4:	e0bffe17 	ldw	r2,-8(fp)
   243b8:	00bf9716 	blt	zero,r2,24218 <__alt_data_end+0xf4024218>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   243bc:	e0fffd17 	ldw	r3,-12(fp)
   243c0:	e0bff717 	ldw	r2,-36(fp)
   243c4:	18800426 	beq	r3,r2,243d8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   243c8:	e0fffd17 	ldw	r3,-12(fp)
   243cc:	e0bff717 	ldw	r2,-36(fp)
   243d0:	1885c83a 	sub	r2,r3,r2
   243d4:	00000606 	br	243f0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   243d8:	e0bfff17 	ldw	r2,-4(fp)
   243dc:	1090000c 	andi	r2,r2,16384
   243e0:	10000226 	beq	r2,zero,243ec <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   243e4:	00bffd44 	movi	r2,-11
   243e8:	00000106 	br	243f0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   243ec:	00bffec4 	movi	r2,-5
}
   243f0:	e037883a 	mov	sp,fp
   243f4:	dfc00117 	ldw	ra,4(sp)
   243f8:	df000017 	ldw	fp,0(sp)
   243fc:	dec00204 	addi	sp,sp,8
   24400:	f800283a 	ret

00024404 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   24404:	defffd04 	addi	sp,sp,-12
   24408:	df000215 	stw	fp,8(sp)
   2440c:	df000204 	addi	fp,sp,8
   24410:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   24414:	e0bfff17 	ldw	r2,-4(fp)
   24418:	10800a17 	ldw	r2,40(r2)
   2441c:	10800104 	addi	r2,r2,4
   24420:	10800037 	ldwio	r2,0(r2)
   24424:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   24428:	e0bffe17 	ldw	r2,-8(fp)
   2442c:	10800054 	ori	r2,r2,1
   24430:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   24434:	e0bfff17 	ldw	r2,-4(fp)
   24438:	10800a17 	ldw	r2,40(r2)
   2443c:	10800104 	addi	r2,r2,4
   24440:	1007883a 	mov	r3,r2
   24444:	e0bffe17 	ldw	r2,-8(fp)
   24448:	18800035 	stwio	r2,0(r3)
}
   2444c:	e037883a 	mov	sp,fp
   24450:	df000017 	ldw	fp,0(sp)
   24454:	dec00104 	addi	sp,sp,4
   24458:	f800283a 	ret

0002445c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   2445c:	defffd04 	addi	sp,sp,-12
   24460:	df000215 	stw	fp,8(sp)
   24464:	df000204 	addi	fp,sp,8
   24468:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   2446c:	e0bfff17 	ldw	r2,-4(fp)
   24470:	10800a17 	ldw	r2,40(r2)
   24474:	10800104 	addi	r2,r2,4
   24478:	10800037 	ldwio	r2,0(r2)
   2447c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   24480:	e0fffe17 	ldw	r3,-8(fp)
   24484:	00bfff84 	movi	r2,-2
   24488:	1884703a 	and	r2,r3,r2
   2448c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   24490:	e0bfff17 	ldw	r2,-4(fp)
   24494:	10800a17 	ldw	r2,40(r2)
   24498:	10800104 	addi	r2,r2,4
   2449c:	1007883a 	mov	r3,r2
   244a0:	e0bffe17 	ldw	r2,-8(fp)
   244a4:	18800035 	stwio	r2,0(r3)
}
   244a8:	e037883a 	mov	sp,fp
   244ac:	df000017 	ldw	fp,0(sp)
   244b0:	dec00104 	addi	sp,sp,4
   244b4:	f800283a 	ret

000244b8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   244b8:	defffd04 	addi	sp,sp,-12
   244bc:	df000215 	stw	fp,8(sp)
   244c0:	df000204 	addi	fp,sp,8
   244c4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   244c8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   244cc:	e0bfff17 	ldw	r2,-4(fp)
   244d0:	10800a17 	ldw	r2,40(r2)
   244d4:	10800084 	addi	r2,r2,2
   244d8:	1080002b 	ldhuio	r2,0(r2)
   244dc:	10bfffcc 	andi	r2,r2,65535
   244e0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   244e4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   244e8:	e037883a 	mov	sp,fp
   244ec:	df000017 	ldw	fp,0(sp)
   244f0:	dec00104 	addi	sp,sp,4
   244f4:	f800283a 	ret

000244f8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   244f8:	defffd04 	addi	sp,sp,-12
   244fc:	df000215 	stw	fp,8(sp)
   24500:	df000204 	addi	fp,sp,8
   24504:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   24508:	e0bfff17 	ldw	r2,-4(fp)
   2450c:	10800a17 	ldw	r2,40(r2)
   24510:	10800104 	addi	r2,r2,4
   24514:	10800037 	ldwio	r2,0(r2)
   24518:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   2451c:	e0bffe17 	ldw	r2,-8(fp)
   24520:	1004d43a 	srli	r2,r2,16
}
   24524:	e037883a 	mov	sp,fp
   24528:	df000017 	ldw	fp,0(sp)
   2452c:	dec00104 	addi	sp,sp,4
   24530:	f800283a 	ret

00024534 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   24534:	defffd04 	addi	sp,sp,-12
   24538:	df000215 	stw	fp,8(sp)
   2453c:	df000204 	addi	fp,sp,8
   24540:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   24544:	e0bfff17 	ldw	r2,-4(fp)
   24548:	1080800c 	andi	r2,r2,512
   2454c:	1004d27a 	srli	r2,r2,9
   24550:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   24554:	e0bffe17 	ldw	r2,-8(fp)
   24558:	10000226 	beq	r2,zero,24564 <alt_up_rs232_check_parity+0x30>
   2455c:	00bfffc4 	movi	r2,-1
   24560:	00000106 	br	24568 <alt_up_rs232_check_parity+0x34>
   24564:	0005883a 	mov	r2,zero
}
   24568:	e037883a 	mov	sp,fp
   2456c:	df000017 	ldw	fp,0(sp)
   24570:	dec00104 	addi	sp,sp,4
   24574:	f800283a 	ret

00024578 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   24578:	defffd04 	addi	sp,sp,-12
   2457c:	df000215 	stw	fp,8(sp)
   24580:	df000204 	addi	fp,sp,8
   24584:	e13ffe15 	stw	r4,-8(fp)
   24588:	2805883a 	mov	r2,r5
   2458c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   24590:	e0bffe17 	ldw	r2,-8(fp)
   24594:	10800a17 	ldw	r2,40(r2)
   24598:	1007883a 	mov	r3,r2
   2459c:	e0bfff03 	ldbu	r2,-4(fp)
   245a0:	18800035 	stwio	r2,0(r3)
	return 0;
   245a4:	0005883a 	mov	r2,zero
}
   245a8:	e037883a 	mov	sp,fp
   245ac:	df000017 	ldw	fp,0(sp)
   245b0:	dec00104 	addi	sp,sp,4
   245b4:	f800283a 	ret

000245b8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   245b8:	defffa04 	addi	sp,sp,-24
   245bc:	dfc00515 	stw	ra,20(sp)
   245c0:	df000415 	stw	fp,16(sp)
   245c4:	df000404 	addi	fp,sp,16
   245c8:	e13ffd15 	stw	r4,-12(fp)
   245cc:	e17ffe15 	stw	r5,-8(fp)
   245d0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   245d4:	e0bffd17 	ldw	r2,-12(fp)
   245d8:	10800a17 	ldw	r2,40(r2)
   245dc:	10800037 	ldwio	r2,0(r2)
   245e0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   245e4:	e0bffc17 	ldw	r2,-16(fp)
   245e8:	1007883a 	mov	r3,r2
   245ec:	e0bffe17 	ldw	r2,-8(fp)
   245f0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   245f4:	e13ffc17 	ldw	r4,-16(fp)
   245f8:	00245340 	call	24534 <alt_up_rs232_check_parity>
   245fc:	1007883a 	mov	r3,r2
   24600:	e0bfff17 	ldw	r2,-4(fp)
   24604:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   24608:	e0bffc17 	ldw	r2,-16(fp)
   2460c:	10a0000c 	andi	r2,r2,32768
   24610:	1004d3fa 	srli	r2,r2,15
   24614:	10bfffc4 	addi	r2,r2,-1
}
   24618:	e037883a 	mov	sp,fp
   2461c:	dfc00117 	ldw	ra,4(sp)
   24620:	df000017 	ldw	fp,0(sp)
   24624:	dec00204 	addi	sp,sp,8
   24628:	f800283a 	ret

0002462c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   2462c:	defff804 	addi	sp,sp,-32
   24630:	dfc00715 	stw	ra,28(sp)
   24634:	df000615 	stw	fp,24(sp)
   24638:	df000604 	addi	fp,sp,24
   2463c:	e13ffd15 	stw	r4,-12(fp)
   24640:	e17ffe15 	stw	r5,-8(fp)
   24644:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   24648:	e0bffd17 	ldw	r2,-12(fp)
   2464c:	10800017 	ldw	r2,0(r2)
   24650:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   24654:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   24658:	00000e06 	br	24694 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   2465c:	e0bffe17 	ldw	r2,-8(fp)
   24660:	10c00044 	addi	r3,r2,1
   24664:	e0fffe15 	stw	r3,-8(fp)
   24668:	e0fffc04 	addi	r3,fp,-16
   2466c:	e13ffb17 	ldw	r4,-20(fp)
   24670:	100b883a 	mov	r5,r2
   24674:	180d883a 	mov	r6,r3
   24678:	00245b80 	call	245b8 <alt_up_rs232_read_data>
   2467c:	1000041e 	bne	r2,zero,24690 <alt_up_rs232_read_fd+0x64>
			count++;
   24680:	e0bffa17 	ldw	r2,-24(fp)
   24684:	10800044 	addi	r2,r2,1
   24688:	e0bffa15 	stw	r2,-24(fp)
   2468c:	00000106 	br	24694 <alt_up_rs232_read_fd+0x68>
		else
			break;
   24690:	00000406 	br	246a4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   24694:	e0bfff17 	ldw	r2,-4(fp)
   24698:	10ffffc4 	addi	r3,r2,-1
   2469c:	e0ffff15 	stw	r3,-4(fp)
   246a0:	103fee1e 	bne	r2,zero,2465c <__alt_data_end+0xf402465c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   246a4:	e0bffa17 	ldw	r2,-24(fp)
}
   246a8:	e037883a 	mov	sp,fp
   246ac:	dfc00117 	ldw	ra,4(sp)
   246b0:	df000017 	ldw	fp,0(sp)
   246b4:	dec00204 	addi	sp,sp,8
   246b8:	f800283a 	ret

000246bc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   246bc:	defff904 	addi	sp,sp,-28
   246c0:	dfc00615 	stw	ra,24(sp)
   246c4:	df000515 	stw	fp,20(sp)
   246c8:	df000504 	addi	fp,sp,20
   246cc:	e13ffd15 	stw	r4,-12(fp)
   246d0:	e17ffe15 	stw	r5,-8(fp)
   246d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   246d8:	e0bffd17 	ldw	r2,-12(fp)
   246dc:	10800017 	ldw	r2,0(r2)
   246e0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   246e4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   246e8:	00000f06 	br	24728 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   246ec:	e0bffe17 	ldw	r2,-8(fp)
   246f0:	10800003 	ldbu	r2,0(r2)
   246f4:	10803fcc 	andi	r2,r2,255
   246f8:	e13ffc17 	ldw	r4,-16(fp)
   246fc:	100b883a 	mov	r5,r2
   24700:	00245780 	call	24578 <alt_up_rs232_write_data>
   24704:	1000071e 	bne	r2,zero,24724 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   24708:	e0bffb17 	ldw	r2,-20(fp)
   2470c:	10800044 	addi	r2,r2,1
   24710:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   24714:	e0bffe17 	ldw	r2,-8(fp)
   24718:	10800044 	addi	r2,r2,1
   2471c:	e0bffe15 	stw	r2,-8(fp)
   24720:	00000106 	br	24728 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   24724:	00000406 	br	24738 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   24728:	e0bfff17 	ldw	r2,-4(fp)
   2472c:	10ffffc4 	addi	r3,r2,-1
   24730:	e0ffff15 	stw	r3,-4(fp)
   24734:	103fed1e 	bne	r2,zero,246ec <__alt_data_end+0xf40246ec>
			ptr++;
		}
		else
			break;
	}
	return count;
   24738:	e0bffb17 	ldw	r2,-20(fp)
}
   2473c:	e037883a 	mov	sp,fp
   24740:	dfc00117 	ldw	ra,4(sp)
   24744:	df000017 	ldw	fp,0(sp)
   24748:	dec00204 	addi	sp,sp,8
   2474c:	f800283a 	ret

00024750 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   24750:	defffc04 	addi	sp,sp,-16
   24754:	dfc00315 	stw	ra,12(sp)
   24758:	df000215 	stw	fp,8(sp)
   2475c:	df000204 	addi	fp,sp,8
   24760:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   24764:	e13fff17 	ldw	r4,-4(fp)
   24768:	01420034 	movhi	r5,2048
   2476c:	2946d904 	addi	r5,r5,7012
   24770:	0024bf00 	call	24bf0 <alt_find_dev>
   24774:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   24778:	e0bffe17 	ldw	r2,-8(fp)
}
   2477c:	e037883a 	mov	sp,fp
   24780:	dfc00117 	ldw	ra,4(sp)
   24784:	df000017 	ldw	fp,0(sp)
   24788:	dec00204 	addi	sp,sp,8
   2478c:	f800283a 	ret

00024790 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24790:	defff504 	addi	sp,sp,-44
   24794:	df000a15 	stw	fp,40(sp)
   24798:	df000a04 	addi	fp,sp,40
   2479c:	e13ffc15 	stw	r4,-16(fp)
   247a0:	e17ffd15 	stw	r5,-12(fp)
   247a4:	e1bffe15 	stw	r6,-8(fp)
   247a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   247ac:	e03ff615 	stw	zero,-40(fp)
   247b0:	00820034 	movhi	r2,2048
   247b4:	1086e904 	addi	r2,r2,7076
   247b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   247bc:	10003f26 	beq	r2,zero,248bc <alt_alarm_start+0x12c>
  {
    if (alarm)
   247c0:	e0bffc17 	ldw	r2,-16(fp)
   247c4:	10003b26 	beq	r2,zero,248b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   247c8:	e0bffc17 	ldw	r2,-16(fp)
   247cc:	e0fffe17 	ldw	r3,-8(fp)
   247d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   247d4:	e0bffc17 	ldw	r2,-16(fp)
   247d8:	e0ffff17 	ldw	r3,-4(fp)
   247dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247e0:	0005303a 	rdctl	r2,status
   247e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247e8:	e0fff817 	ldw	r3,-32(fp)
   247ec:	00bfff84 	movi	r2,-2
   247f0:	1884703a 	and	r2,r3,r2
   247f4:	1001703a 	wrctl	status,r2
  
  return context;
   247f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   247fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24800:	00820034 	movhi	r2,2048
   24804:	1086ea04 	addi	r2,r2,7080
   24808:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2480c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24810:	e0fffd17 	ldw	r3,-12(fp)
   24814:	e0bff617 	ldw	r2,-40(fp)
   24818:	1885883a 	add	r2,r3,r2
   2481c:	10c00044 	addi	r3,r2,1
   24820:	e0bffc17 	ldw	r2,-16(fp)
   24824:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24828:	e0bffc17 	ldw	r2,-16(fp)
   2482c:	10c00217 	ldw	r3,8(r2)
   24830:	e0bff617 	ldw	r2,-40(fp)
   24834:	1880042e 	bgeu	r3,r2,24848 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   24838:	e0bffc17 	ldw	r2,-16(fp)
   2483c:	00c00044 	movi	r3,1
   24840:	10c00405 	stb	r3,16(r2)
   24844:	00000206 	br	24850 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   24848:	e0bffc17 	ldw	r2,-16(fp)
   2484c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24850:	e0fffc17 	ldw	r3,-16(fp)
   24854:	00820034 	movhi	r2,2048
   24858:	1086df04 	addi	r2,r2,7036
   2485c:	e0bff915 	stw	r2,-28(fp)
   24860:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24864:	e0bffa17 	ldw	r2,-24(fp)
   24868:	e0fff917 	ldw	r3,-28(fp)
   2486c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24870:	e0bff917 	ldw	r2,-28(fp)
   24874:	10c00017 	ldw	r3,0(r2)
   24878:	e0bffa17 	ldw	r2,-24(fp)
   2487c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24880:	e0bff917 	ldw	r2,-28(fp)
   24884:	10800017 	ldw	r2,0(r2)
   24888:	e0fffa17 	ldw	r3,-24(fp)
   2488c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24890:	e0bff917 	ldw	r2,-28(fp)
   24894:	e0fffa17 	ldw	r3,-24(fp)
   24898:	10c00015 	stw	r3,0(r2)
   2489c:	e0bff717 	ldw	r2,-36(fp)
   248a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   248a4:	e0bffb17 	ldw	r2,-20(fp)
   248a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   248ac:	0005883a 	mov	r2,zero
   248b0:	00000306 	br	248c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   248b4:	00bffa84 	movi	r2,-22
   248b8:	00000106 	br	248c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   248bc:	00bfde84 	movi	r2,-134
  }
}
   248c0:	e037883a 	mov	sp,fp
   248c4:	df000017 	ldw	fp,0(sp)
   248c8:	dec00104 	addi	sp,sp,4
   248cc:	f800283a 	ret

000248d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   248d0:	defffa04 	addi	sp,sp,-24
   248d4:	dfc00515 	stw	ra,20(sp)
   248d8:	df000415 	stw	fp,16(sp)
   248dc:	df000404 	addi	fp,sp,16
   248e0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   248e4:	00800244 	movi	r2,9
   248e8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   248ec:	e13ffd17 	ldw	r4,-12(fp)
   248f0:	014003f4 	movhi	r5,15
   248f4:	29509004 	addi	r5,r5,16960
   248f8:	0022ea80 	call	22ea8 <__mulsi3>
   248fc:	0100bef4 	movhi	r4,763
   24900:	213c2004 	addi	r4,r4,-3968
   24904:	100b883a 	mov	r5,r2
   24908:	0025b140 	call	25b14 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2490c:	01200034 	movhi	r4,32768
   24910:	213fffc4 	addi	r4,r4,-1
   24914:	100b883a 	mov	r5,r2
   24918:	0025b140 	call	25b14 <__udivsi3>
   2491c:	e13fff17 	ldw	r4,-4(fp)
   24920:	100b883a 	mov	r5,r2
   24924:	0025b140 	call	25b14 <__udivsi3>
   24928:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   2492c:	e0bffe17 	ldw	r2,-8(fp)
   24930:	10002a26 	beq	r2,zero,249dc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   24934:	e03ffc15 	stw	zero,-16(fp)
   24938:	00001706 	br	24998 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   2493c:	00a00034 	movhi	r2,32768
   24940:	10bfffc4 	addi	r2,r2,-1
   24944:	10bfffc4 	addi	r2,r2,-1
   24948:	103ffe1e 	bne	r2,zero,24944 <__alt_data_end+0xf4024944>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   2494c:	e13ffd17 	ldw	r4,-12(fp)
   24950:	014003f4 	movhi	r5,15
   24954:	29509004 	addi	r5,r5,16960
   24958:	0022ea80 	call	22ea8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   2495c:	0100bef4 	movhi	r4,763
   24960:	213c2004 	addi	r4,r4,-3968
   24964:	100b883a 	mov	r5,r2
   24968:	0025b140 	call	25b14 <__udivsi3>
   2496c:	01200034 	movhi	r4,32768
   24970:	213fffc4 	addi	r4,r4,-1
   24974:	100b883a 	mov	r5,r2
   24978:	0025b140 	call	25b14 <__udivsi3>
   2497c:	1007883a 	mov	r3,r2
   24980:	e0bfff17 	ldw	r2,-4(fp)
   24984:	10c5c83a 	sub	r2,r2,r3
   24988:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2498c:	e0bffc17 	ldw	r2,-16(fp)
   24990:	10800044 	addi	r2,r2,1
   24994:	e0bffc15 	stw	r2,-16(fp)
   24998:	e0fffc17 	ldw	r3,-16(fp)
   2499c:	e0bffe17 	ldw	r2,-8(fp)
   249a0:	18bfe616 	blt	r3,r2,2493c <__alt_data_end+0xf402493c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   249a4:	e13ffd17 	ldw	r4,-12(fp)
   249a8:	014003f4 	movhi	r5,15
   249ac:	29509004 	addi	r5,r5,16960
   249b0:	0022ea80 	call	22ea8 <__mulsi3>
   249b4:	0100bef4 	movhi	r4,763
   249b8:	213c2004 	addi	r4,r4,-3968
   249bc:	100b883a 	mov	r5,r2
   249c0:	0025b140 	call	25b14 <__udivsi3>
   249c4:	1009883a 	mov	r4,r2
   249c8:	e17fff17 	ldw	r5,-4(fp)
   249cc:	0022ea80 	call	22ea8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   249d0:	10bfffc4 	addi	r2,r2,-1
   249d4:	103ffe1e 	bne	r2,zero,249d0 <__alt_data_end+0xf40249d0>
   249d8:	00000d06 	br	24a10 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   249dc:	e13ffd17 	ldw	r4,-12(fp)
   249e0:	014003f4 	movhi	r5,15
   249e4:	29509004 	addi	r5,r5,16960
   249e8:	0022ea80 	call	22ea8 <__mulsi3>
   249ec:	0100bef4 	movhi	r4,763
   249f0:	213c2004 	addi	r4,r4,-3968
   249f4:	100b883a 	mov	r5,r2
   249f8:	0025b140 	call	25b14 <__udivsi3>
   249fc:	1009883a 	mov	r4,r2
   24a00:	e17fff17 	ldw	r5,-4(fp)
   24a04:	0022ea80 	call	22ea8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24a08:	10bfffc4 	addi	r2,r2,-1
   24a0c:	00bffe16 	blt	zero,r2,24a08 <__alt_data_end+0xf4024a08>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   24a10:	0005883a 	mov	r2,zero
}
   24a14:	e037883a 	mov	sp,fp
   24a18:	dfc00117 	ldw	ra,4(sp)
   24a1c:	df000017 	ldw	fp,0(sp)
   24a20:	dec00204 	addi	sp,sp,8
   24a24:	f800283a 	ret

00024a28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24a28:	deffff04 	addi	sp,sp,-4
   24a2c:	df000015 	stw	fp,0(sp)
   24a30:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24a34:	e037883a 	mov	sp,fp
   24a38:	df000017 	ldw	fp,0(sp)
   24a3c:	dec00104 	addi	sp,sp,4
   24a40:	f800283a 	ret

00024a44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24a44:	defffe04 	addi	sp,sp,-8
   24a48:	dfc00115 	stw	ra,4(sp)
   24a4c:	df000015 	stw	fp,0(sp)
   24a50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24a54:	00820034 	movhi	r2,2048
   24a58:	1086dc04 	addi	r2,r2,7024
   24a5c:	10800017 	ldw	r2,0(r2)
   24a60:	10000526 	beq	r2,zero,24a78 <alt_get_errno+0x34>
   24a64:	00820034 	movhi	r2,2048
   24a68:	1086dc04 	addi	r2,r2,7024
   24a6c:	10800017 	ldw	r2,0(r2)
   24a70:	103ee83a 	callr	r2
   24a74:	00000206 	br	24a80 <alt_get_errno+0x3c>
   24a78:	00820034 	movhi	r2,2048
   24a7c:	1086e404 	addi	r2,r2,7056
}
   24a80:	e037883a 	mov	sp,fp
   24a84:	dfc00117 	ldw	ra,4(sp)
   24a88:	df000017 	ldw	fp,0(sp)
   24a8c:	dec00204 	addi	sp,sp,8
   24a90:	f800283a 	ret

00024a94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24a94:	defffa04 	addi	sp,sp,-24
   24a98:	dfc00515 	stw	ra,20(sp)
   24a9c:	df000415 	stw	fp,16(sp)
   24aa0:	df000404 	addi	fp,sp,16
   24aa4:	e13ffe15 	stw	r4,-8(fp)
   24aa8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24aac:	e0bffe17 	ldw	r2,-8(fp)
   24ab0:	10000326 	beq	r2,zero,24ac0 <alt_dev_llist_insert+0x2c>
   24ab4:	e0bffe17 	ldw	r2,-8(fp)
   24ab8:	10800217 	ldw	r2,8(r2)
   24abc:	1000061e 	bne	r2,zero,24ad8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24ac0:	0024a440 	call	24a44 <alt_get_errno>
   24ac4:	1007883a 	mov	r3,r2
   24ac8:	00800584 	movi	r2,22
   24acc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24ad0:	00bffa84 	movi	r2,-22
   24ad4:	00001306 	br	24b24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24ad8:	e0bffe17 	ldw	r2,-8(fp)
   24adc:	e0ffff17 	ldw	r3,-4(fp)
   24ae0:	e0fffc15 	stw	r3,-16(fp)
   24ae4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24ae8:	e0bffd17 	ldw	r2,-12(fp)
   24aec:	e0fffc17 	ldw	r3,-16(fp)
   24af0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24af4:	e0bffc17 	ldw	r2,-16(fp)
   24af8:	10c00017 	ldw	r3,0(r2)
   24afc:	e0bffd17 	ldw	r2,-12(fp)
   24b00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24b04:	e0bffc17 	ldw	r2,-16(fp)
   24b08:	10800017 	ldw	r2,0(r2)
   24b0c:	e0fffd17 	ldw	r3,-12(fp)
   24b10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24b14:	e0bffc17 	ldw	r2,-16(fp)
   24b18:	e0fffd17 	ldw	r3,-12(fp)
   24b1c:	10c00015 	stw	r3,0(r2)

  return 0;  
   24b20:	0005883a 	mov	r2,zero
}
   24b24:	e037883a 	mov	sp,fp
   24b28:	dfc00117 	ldw	ra,4(sp)
   24b2c:	df000017 	ldw	fp,0(sp)
   24b30:	dec00204 	addi	sp,sp,8
   24b34:	f800283a 	ret

00024b38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24b38:	defffd04 	addi	sp,sp,-12
   24b3c:	dfc00215 	stw	ra,8(sp)
   24b40:	df000115 	stw	fp,4(sp)
   24b44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24b48:	008000b4 	movhi	r2,2
   24b4c:	1096d504 	addi	r2,r2,23380
   24b50:	e0bfff15 	stw	r2,-4(fp)
   24b54:	00000606 	br	24b70 <_do_ctors+0x38>
        (*ctor) (); 
   24b58:	e0bfff17 	ldw	r2,-4(fp)
   24b5c:	10800017 	ldw	r2,0(r2)
   24b60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24b64:	e0bfff17 	ldw	r2,-4(fp)
   24b68:	10bfff04 	addi	r2,r2,-4
   24b6c:	e0bfff15 	stw	r2,-4(fp)
   24b70:	e0ffff17 	ldw	r3,-4(fp)
   24b74:	008000b4 	movhi	r2,2
   24b78:	1096d604 	addi	r2,r2,23384
   24b7c:	18bff62e 	bgeu	r3,r2,24b58 <__alt_data_end+0xf4024b58>
        (*ctor) (); 
}
   24b80:	e037883a 	mov	sp,fp
   24b84:	dfc00117 	ldw	ra,4(sp)
   24b88:	df000017 	ldw	fp,0(sp)
   24b8c:	dec00204 	addi	sp,sp,8
   24b90:	f800283a 	ret

00024b94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24b94:	defffd04 	addi	sp,sp,-12
   24b98:	dfc00215 	stw	ra,8(sp)
   24b9c:	df000115 	stw	fp,4(sp)
   24ba0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24ba4:	008000b4 	movhi	r2,2
   24ba8:	1096d504 	addi	r2,r2,23380
   24bac:	e0bfff15 	stw	r2,-4(fp)
   24bb0:	00000606 	br	24bcc <_do_dtors+0x38>
        (*dtor) (); 
   24bb4:	e0bfff17 	ldw	r2,-4(fp)
   24bb8:	10800017 	ldw	r2,0(r2)
   24bbc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24bc0:	e0bfff17 	ldw	r2,-4(fp)
   24bc4:	10bfff04 	addi	r2,r2,-4
   24bc8:	e0bfff15 	stw	r2,-4(fp)
   24bcc:	e0ffff17 	ldw	r3,-4(fp)
   24bd0:	008000b4 	movhi	r2,2
   24bd4:	1096d604 	addi	r2,r2,23384
   24bd8:	18bff62e 	bgeu	r3,r2,24bb4 <__alt_data_end+0xf4024bb4>
        (*dtor) (); 
}
   24bdc:	e037883a 	mov	sp,fp
   24be0:	dfc00117 	ldw	ra,4(sp)
   24be4:	df000017 	ldw	fp,0(sp)
   24be8:	dec00204 	addi	sp,sp,8
   24bec:	f800283a 	ret

00024bf0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24bf0:	defffa04 	addi	sp,sp,-24
   24bf4:	dfc00515 	stw	ra,20(sp)
   24bf8:	df000415 	stw	fp,16(sp)
   24bfc:	df000404 	addi	fp,sp,16
   24c00:	e13ffe15 	stw	r4,-8(fp)
   24c04:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24c08:	e0bfff17 	ldw	r2,-4(fp)
   24c0c:	10800017 	ldw	r2,0(r2)
   24c10:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24c14:	e13ffe17 	ldw	r4,-8(fp)
   24c18:	00204540 	call	20454 <strlen>
   24c1c:	10800044 	addi	r2,r2,1
   24c20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24c24:	00000d06 	br	24c5c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24c28:	e0bffc17 	ldw	r2,-16(fp)
   24c2c:	10c00217 	ldw	r3,8(r2)
   24c30:	e0bffd17 	ldw	r2,-12(fp)
   24c34:	1809883a 	mov	r4,r3
   24c38:	e17ffe17 	ldw	r5,-8(fp)
   24c3c:	100d883a 	mov	r6,r2
   24c40:	00256d40 	call	256d4 <memcmp>
   24c44:	1000021e 	bne	r2,zero,24c50 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24c48:	e0bffc17 	ldw	r2,-16(fp)
   24c4c:	00000706 	br	24c6c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24c50:	e0bffc17 	ldw	r2,-16(fp)
   24c54:	10800017 	ldw	r2,0(r2)
   24c58:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24c5c:	e0fffc17 	ldw	r3,-16(fp)
   24c60:	e0bfff17 	ldw	r2,-4(fp)
   24c64:	18bff01e 	bne	r3,r2,24c28 <__alt_data_end+0xf4024c28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24c68:	0005883a 	mov	r2,zero
}
   24c6c:	e037883a 	mov	sp,fp
   24c70:	dfc00117 	ldw	ra,4(sp)
   24c74:	df000017 	ldw	fp,0(sp)
   24c78:	dec00204 	addi	sp,sp,8
   24c7c:	f800283a 	ret

00024c80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24c80:	deffff04 	addi	sp,sp,-4
   24c84:	df000015 	stw	fp,0(sp)
   24c88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24c8c:	e037883a 	mov	sp,fp
   24c90:	df000017 	ldw	fp,0(sp)
   24c94:	dec00104 	addi	sp,sp,4
   24c98:	f800283a 	ret

00024c9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24c9c:	defff804 	addi	sp,sp,-32
   24ca0:	dfc00715 	stw	ra,28(sp)
   24ca4:	df000615 	stw	fp,24(sp)
   24ca8:	dc000515 	stw	r16,20(sp)
   24cac:	df000604 	addi	fp,sp,24
   24cb0:	e13ffb15 	stw	r4,-20(fp)
   24cb4:	e17ffc15 	stw	r5,-16(fp)
   24cb8:	e1bffd15 	stw	r6,-12(fp)
   24cbc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   24cc0:	e13ffc17 	ldw	r4,-16(fp)
   24cc4:	e17ffd17 	ldw	r5,-12(fp)
   24cc8:	e1bffe17 	ldw	r6,-8(fp)
   24ccc:	00250e80 	call	250e8 <open>
   24cd0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   24cd4:	e0bffa17 	ldw	r2,-24(fp)
   24cd8:	10002216 	blt	r2,zero,24d64 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   24cdc:	04020034 	movhi	r16,2048
   24ce0:	84024504 	addi	r16,r16,2324
   24ce4:	e0bffa17 	ldw	r2,-24(fp)
   24ce8:	1009883a 	mov	r4,r2
   24cec:	01400304 	movi	r5,12
   24cf0:	0022ea80 	call	22ea8 <__mulsi3>
   24cf4:	8085883a 	add	r2,r16,r2
   24cf8:	10c00017 	ldw	r3,0(r2)
   24cfc:	e0bffb17 	ldw	r2,-20(fp)
   24d00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   24d04:	04020034 	movhi	r16,2048
   24d08:	84024504 	addi	r16,r16,2324
   24d0c:	e0bffa17 	ldw	r2,-24(fp)
   24d10:	1009883a 	mov	r4,r2
   24d14:	01400304 	movi	r5,12
   24d18:	0022ea80 	call	22ea8 <__mulsi3>
   24d1c:	8085883a 	add	r2,r16,r2
   24d20:	10800104 	addi	r2,r2,4
   24d24:	10c00017 	ldw	r3,0(r2)
   24d28:	e0bffb17 	ldw	r2,-20(fp)
   24d2c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   24d30:	04020034 	movhi	r16,2048
   24d34:	84024504 	addi	r16,r16,2324
   24d38:	e0bffa17 	ldw	r2,-24(fp)
   24d3c:	1009883a 	mov	r4,r2
   24d40:	01400304 	movi	r5,12
   24d44:	0022ea80 	call	22ea8 <__mulsi3>
   24d48:	8085883a 	add	r2,r16,r2
   24d4c:	10800204 	addi	r2,r2,8
   24d50:	10c00017 	ldw	r3,0(r2)
   24d54:	e0bffb17 	ldw	r2,-20(fp)
   24d58:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   24d5c:	e13ffa17 	ldw	r4,-24(fp)
   24d60:	00236440 	call	23644 <alt_release_fd>
  }
} 
   24d64:	e6ffff04 	addi	sp,fp,-4
   24d68:	dfc00217 	ldw	ra,8(sp)
   24d6c:	df000117 	ldw	fp,4(sp)
   24d70:	dc000017 	ldw	r16,0(sp)
   24d74:	dec00304 	addi	sp,sp,12
   24d78:	f800283a 	ret

00024d7c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24d7c:	defffb04 	addi	sp,sp,-20
   24d80:	dfc00415 	stw	ra,16(sp)
   24d84:	df000315 	stw	fp,12(sp)
   24d88:	df000304 	addi	fp,sp,12
   24d8c:	e13ffd15 	stw	r4,-12(fp)
   24d90:	e17ffe15 	stw	r5,-8(fp)
   24d94:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24d98:	01020034 	movhi	r4,2048
   24d9c:	21024804 	addi	r4,r4,2336
   24da0:	e17ffd17 	ldw	r5,-12(fp)
   24da4:	01800044 	movi	r6,1
   24da8:	01c07fc4 	movi	r7,511
   24dac:	0024c9c0 	call	24c9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   24db0:	01020034 	movhi	r4,2048
   24db4:	21024504 	addi	r4,r4,2324
   24db8:	e17ffe17 	ldw	r5,-8(fp)
   24dbc:	000d883a 	mov	r6,zero
   24dc0:	01c07fc4 	movi	r7,511
   24dc4:	0024c9c0 	call	24c9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24dc8:	01020034 	movhi	r4,2048
   24dcc:	21024b04 	addi	r4,r4,2348
   24dd0:	e17fff17 	ldw	r5,-4(fp)
   24dd4:	01800044 	movi	r6,1
   24dd8:	01c07fc4 	movi	r7,511
   24ddc:	0024c9c0 	call	24c9c <alt_open_fd>
}  
   24de0:	e037883a 	mov	sp,fp
   24de4:	dfc00117 	ldw	ra,4(sp)
   24de8:	df000017 	ldw	fp,0(sp)
   24dec:	dec00204 	addi	sp,sp,8
   24df0:	f800283a 	ret

00024df4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   24df4:	defff004 	addi	sp,sp,-64
   24df8:	df000f15 	stw	fp,60(sp)
   24dfc:	df000f04 	addi	fp,sp,60
   24e00:	e13ffd15 	stw	r4,-12(fp)
   24e04:	e17ffe15 	stw	r5,-8(fp)
   24e08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   24e0c:	00bffa84 	movi	r2,-22
   24e10:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24e14:	e0bffd17 	ldw	r2,-12(fp)
   24e18:	10800828 	cmpgeui	r2,r2,32
   24e1c:	10005c1e 	bne	r2,zero,24f90 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24e20:	0005303a 	rdctl	r2,status
   24e24:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e28:	e0fff317 	ldw	r3,-52(fp)
   24e2c:	00bfff84 	movi	r2,-2
   24e30:	1884703a 	and	r2,r3,r2
   24e34:	1001703a 	wrctl	status,r2
  
  return context;
   24e38:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   24e3c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   24e40:	00820034 	movhi	r2,2048
   24e44:	1086f604 	addi	r2,r2,7128
   24e48:	e0fffd17 	ldw	r3,-12(fp)
   24e4c:	180690fa 	slli	r3,r3,3
   24e50:	10c5883a 	add	r2,r2,r3
   24e54:	e0ffff17 	ldw	r3,-4(fp)
   24e58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   24e5c:	00820034 	movhi	r2,2048
   24e60:	1086f604 	addi	r2,r2,7128
   24e64:	e0fffd17 	ldw	r3,-12(fp)
   24e68:	180690fa 	slli	r3,r3,3
   24e6c:	10c5883a 	add	r2,r2,r3
   24e70:	10800104 	addi	r2,r2,4
   24e74:	e0fffe17 	ldw	r3,-8(fp)
   24e78:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   24e7c:	e0bfff17 	ldw	r2,-4(fp)
   24e80:	10001f26 	beq	r2,zero,24f00 <alt_irq_register+0x10c>
   24e84:	e0bffd17 	ldw	r2,-12(fp)
   24e88:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24e8c:	0005303a 	rdctl	r2,status
   24e90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e94:	e0fff517 	ldw	r3,-44(fp)
   24e98:	00bfff84 	movi	r2,-2
   24e9c:	1884703a 	and	r2,r3,r2
   24ea0:	1001703a 	wrctl	status,r2
  
  return context;
   24ea4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24ea8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   24eac:	e0bff417 	ldw	r2,-48(fp)
   24eb0:	00c00044 	movi	r3,1
   24eb4:	1884983a 	sll	r2,r3,r2
   24eb8:	1007883a 	mov	r3,r2
   24ebc:	00820034 	movhi	r2,2048
   24ec0:	1086e804 	addi	r2,r2,7072
   24ec4:	10800017 	ldw	r2,0(r2)
   24ec8:	1886b03a 	or	r3,r3,r2
   24ecc:	00820034 	movhi	r2,2048
   24ed0:	1086e804 	addi	r2,r2,7072
   24ed4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24ed8:	00820034 	movhi	r2,2048
   24edc:	1086e804 	addi	r2,r2,7072
   24ee0:	10800017 	ldw	r2,0(r2)
   24ee4:	100170fa 	wrctl	ienable,r2
   24ee8:	e0bff617 	ldw	r2,-40(fp)
   24eec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24ef0:	e0bff717 	ldw	r2,-36(fp)
   24ef4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24ef8:	0005883a 	mov	r2,zero
   24efc:	00001f06 	br	24f7c <alt_irq_register+0x188>
   24f00:	e0bffd17 	ldw	r2,-12(fp)
   24f04:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24f08:	0005303a 	rdctl	r2,status
   24f0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24f10:	e0fff917 	ldw	r3,-28(fp)
   24f14:	00bfff84 	movi	r2,-2
   24f18:	1884703a 	and	r2,r3,r2
   24f1c:	1001703a 	wrctl	status,r2
  
  return context;
   24f20:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24f24:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   24f28:	e0bff817 	ldw	r2,-32(fp)
   24f2c:	00c00044 	movi	r3,1
   24f30:	1884983a 	sll	r2,r3,r2
   24f34:	0084303a 	nor	r2,zero,r2
   24f38:	1007883a 	mov	r3,r2
   24f3c:	00820034 	movhi	r2,2048
   24f40:	1086e804 	addi	r2,r2,7072
   24f44:	10800017 	ldw	r2,0(r2)
   24f48:	1886703a 	and	r3,r3,r2
   24f4c:	00820034 	movhi	r2,2048
   24f50:	1086e804 	addi	r2,r2,7072
   24f54:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24f58:	00820034 	movhi	r2,2048
   24f5c:	1086e804 	addi	r2,r2,7072
   24f60:	10800017 	ldw	r2,0(r2)
   24f64:	100170fa 	wrctl	ienable,r2
   24f68:	e0bffa17 	ldw	r2,-24(fp)
   24f6c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24f70:	e0bffb17 	ldw	r2,-20(fp)
   24f74:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24f78:	0005883a 	mov	r2,zero
   24f7c:	e0bff115 	stw	r2,-60(fp)
   24f80:	e0bff217 	ldw	r2,-56(fp)
   24f84:	e0bffc15 	stw	r2,-16(fp)
   24f88:	e0bffc17 	ldw	r2,-16(fp)
   24f8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   24f90:	e0bff117 	ldw	r2,-60(fp)
}
   24f94:	e037883a 	mov	sp,fp
   24f98:	df000017 	ldw	fp,0(sp)
   24f9c:	dec00104 	addi	sp,sp,4
   24fa0:	f800283a 	ret

00024fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24fa4:	defffe04 	addi	sp,sp,-8
   24fa8:	dfc00115 	stw	ra,4(sp)
   24fac:	df000015 	stw	fp,0(sp)
   24fb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24fb4:	00820034 	movhi	r2,2048
   24fb8:	1086dc04 	addi	r2,r2,7024
   24fbc:	10800017 	ldw	r2,0(r2)
   24fc0:	10000526 	beq	r2,zero,24fd8 <alt_get_errno+0x34>
   24fc4:	00820034 	movhi	r2,2048
   24fc8:	1086dc04 	addi	r2,r2,7024
   24fcc:	10800017 	ldw	r2,0(r2)
   24fd0:	103ee83a 	callr	r2
   24fd4:	00000206 	br	24fe0 <alt_get_errno+0x3c>
   24fd8:	00820034 	movhi	r2,2048
   24fdc:	1086e404 	addi	r2,r2,7056
}
   24fe0:	e037883a 	mov	sp,fp
   24fe4:	dfc00117 	ldw	ra,4(sp)
   24fe8:	df000017 	ldw	fp,0(sp)
   24fec:	dec00204 	addi	sp,sp,8
   24ff0:	f800283a 	ret

00024ff4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24ff4:	defffb04 	addi	sp,sp,-20
   24ff8:	dfc00415 	stw	ra,16(sp)
   24ffc:	df000315 	stw	fp,12(sp)
   25000:	dc000215 	stw	r16,8(sp)
   25004:	df000304 	addi	fp,sp,12
   25008:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2500c:	e0bffe17 	ldw	r2,-8(fp)
   25010:	10800217 	ldw	r2,8(r2)
   25014:	10d00034 	orhi	r3,r2,16384
   25018:	e0bffe17 	ldw	r2,-8(fp)
   2501c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25020:	e03ffd15 	stw	zero,-12(fp)
   25024:	00002306 	br	250b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25028:	04020034 	movhi	r16,2048
   2502c:	84024504 	addi	r16,r16,2324
   25030:	e0bffd17 	ldw	r2,-12(fp)
   25034:	1009883a 	mov	r4,r2
   25038:	01400304 	movi	r5,12
   2503c:	0022ea80 	call	22ea8 <__mulsi3>
   25040:	8085883a 	add	r2,r16,r2
   25044:	10c00017 	ldw	r3,0(r2)
   25048:	e0bffe17 	ldw	r2,-8(fp)
   2504c:	10800017 	ldw	r2,0(r2)
   25050:	1880151e 	bne	r3,r2,250a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25054:	04020034 	movhi	r16,2048
   25058:	84024504 	addi	r16,r16,2324
   2505c:	e0bffd17 	ldw	r2,-12(fp)
   25060:	1009883a 	mov	r4,r2
   25064:	01400304 	movi	r5,12
   25068:	0022ea80 	call	22ea8 <__mulsi3>
   2506c:	8085883a 	add	r2,r16,r2
   25070:	10800204 	addi	r2,r2,8
   25074:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25078:	10000b0e 	bge	r2,zero,250a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2507c:	e13ffd17 	ldw	r4,-12(fp)
   25080:	01400304 	movi	r5,12
   25084:	0022ea80 	call	22ea8 <__mulsi3>
   25088:	1007883a 	mov	r3,r2
   2508c:	00820034 	movhi	r2,2048
   25090:	10824504 	addi	r2,r2,2324
   25094:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25098:	e0bffe17 	ldw	r2,-8(fp)
   2509c:	18800226 	beq	r3,r2,250a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   250a0:	00bffcc4 	movi	r2,-13
   250a4:	00000a06 	br	250d0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   250a8:	e0bffd17 	ldw	r2,-12(fp)
   250ac:	10800044 	addi	r2,r2,1
   250b0:	e0bffd15 	stw	r2,-12(fp)
   250b4:	00820034 	movhi	r2,2048
   250b8:	1086db04 	addi	r2,r2,7020
   250bc:	10800017 	ldw	r2,0(r2)
   250c0:	1007883a 	mov	r3,r2
   250c4:	e0bffd17 	ldw	r2,-12(fp)
   250c8:	18bfd72e 	bgeu	r3,r2,25028 <__alt_data_end+0xf4025028>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   250cc:	0005883a 	mov	r2,zero
}
   250d0:	e6ffff04 	addi	sp,fp,-4
   250d4:	dfc00217 	ldw	ra,8(sp)
   250d8:	df000117 	ldw	fp,4(sp)
   250dc:	dc000017 	ldw	r16,0(sp)
   250e0:	dec00304 	addi	sp,sp,12
   250e4:	f800283a 	ret

000250e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   250e8:	defff604 	addi	sp,sp,-40
   250ec:	dfc00915 	stw	ra,36(sp)
   250f0:	df000815 	stw	fp,32(sp)
   250f4:	df000804 	addi	fp,sp,32
   250f8:	e13ffd15 	stw	r4,-12(fp)
   250fc:	e17ffe15 	stw	r5,-8(fp)
   25100:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   25104:	00bfffc4 	movi	r2,-1
   25108:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2510c:	00bffb44 	movi	r2,-19
   25110:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   25114:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   25118:	e13ffd17 	ldw	r4,-12(fp)
   2511c:	01420034 	movhi	r5,2048
   25120:	2946d904 	addi	r5,r5,7012
   25124:	0024bf00 	call	24bf0 <alt_find_dev>
   25128:	e0bff815 	stw	r2,-32(fp)
   2512c:	e0bff817 	ldw	r2,-32(fp)
   25130:	1000051e 	bne	r2,zero,25148 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25134:	e13ffd17 	ldw	r4,-12(fp)
   25138:	00254040 	call	25404 <alt_find_file>
   2513c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25140:	00800044 	movi	r2,1
   25144:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25148:	e0bff817 	ldw	r2,-32(fp)
   2514c:	10002b26 	beq	r2,zero,251fc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25150:	e13ff817 	ldw	r4,-32(fp)
   25154:	00255180 	call	25518 <alt_get_fd>
   25158:	e0bff915 	stw	r2,-28(fp)
   2515c:	e0bff917 	ldw	r2,-28(fp)
   25160:	1000030e 	bge	r2,zero,25170 <open+0x88>
    {
      status = index;
   25164:	e0bff917 	ldw	r2,-28(fp)
   25168:	e0bffa15 	stw	r2,-24(fp)
   2516c:	00002506 	br	25204 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   25170:	e13ff917 	ldw	r4,-28(fp)
   25174:	01400304 	movi	r5,12
   25178:	0022ea80 	call	22ea8 <__mulsi3>
   2517c:	1007883a 	mov	r3,r2
   25180:	00820034 	movhi	r2,2048
   25184:	10824504 	addi	r2,r2,2324
   25188:	1885883a 	add	r2,r3,r2
   2518c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25190:	e0fffe17 	ldw	r3,-8(fp)
   25194:	00900034 	movhi	r2,16384
   25198:	10bfffc4 	addi	r2,r2,-1
   2519c:	1886703a 	and	r3,r3,r2
   251a0:	e0bffc17 	ldw	r2,-16(fp)
   251a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   251a8:	e0bffb17 	ldw	r2,-20(fp)
   251ac:	1000051e 	bne	r2,zero,251c4 <open+0xdc>
   251b0:	e13ffc17 	ldw	r4,-16(fp)
   251b4:	0024ff40 	call	24ff4 <alt_file_locked>
   251b8:	e0bffa15 	stw	r2,-24(fp)
   251bc:	e0bffa17 	ldw	r2,-24(fp)
   251c0:	10001016 	blt	r2,zero,25204 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   251c4:	e0bff817 	ldw	r2,-32(fp)
   251c8:	10800317 	ldw	r2,12(r2)
   251cc:	10000826 	beq	r2,zero,251f0 <open+0x108>
   251d0:	e0bff817 	ldw	r2,-32(fp)
   251d4:	10800317 	ldw	r2,12(r2)
   251d8:	e13ffc17 	ldw	r4,-16(fp)
   251dc:	e17ffd17 	ldw	r5,-12(fp)
   251e0:	e1bffe17 	ldw	r6,-8(fp)
   251e4:	e1ffff17 	ldw	r7,-4(fp)
   251e8:	103ee83a 	callr	r2
   251ec:	00000106 	br	251f4 <open+0x10c>
   251f0:	0005883a 	mov	r2,zero
   251f4:	e0bffa15 	stw	r2,-24(fp)
   251f8:	00000206 	br	25204 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   251fc:	00bffb44 	movi	r2,-19
   25200:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25204:	e0bffa17 	ldw	r2,-24(fp)
   25208:	1000090e 	bge	r2,zero,25230 <open+0x148>
  {
    alt_release_fd (index);  
   2520c:	e13ff917 	ldw	r4,-28(fp)
   25210:	00236440 	call	23644 <alt_release_fd>
    ALT_ERRNO = -status;
   25214:	0024fa40 	call	24fa4 <alt_get_errno>
   25218:	1007883a 	mov	r3,r2
   2521c:	e0bffa17 	ldw	r2,-24(fp)
   25220:	0085c83a 	sub	r2,zero,r2
   25224:	18800015 	stw	r2,0(r3)
    return -1;
   25228:	00bfffc4 	movi	r2,-1
   2522c:	00000106 	br	25234 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   25230:	e0bff917 	ldw	r2,-28(fp)
}
   25234:	e037883a 	mov	sp,fp
   25238:	dfc00117 	ldw	ra,4(sp)
   2523c:	df000017 	ldw	fp,0(sp)
   25240:	dec00204 	addi	sp,sp,8
   25244:	f800283a 	ret

00025248 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   25248:	defffa04 	addi	sp,sp,-24
   2524c:	df000515 	stw	fp,20(sp)
   25250:	df000504 	addi	fp,sp,20
   25254:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25258:	0005303a 	rdctl	r2,status
   2525c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25260:	e0fffc17 	ldw	r3,-16(fp)
   25264:	00bfff84 	movi	r2,-2
   25268:	1884703a 	and	r2,r3,r2
   2526c:	1001703a 	wrctl	status,r2
  
  return context;
   25270:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25274:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25278:	e0bfff17 	ldw	r2,-4(fp)
   2527c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25280:	e0bffd17 	ldw	r2,-12(fp)
   25284:	10800017 	ldw	r2,0(r2)
   25288:	e0fffd17 	ldw	r3,-12(fp)
   2528c:	18c00117 	ldw	r3,4(r3)
   25290:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25294:	e0bffd17 	ldw	r2,-12(fp)
   25298:	10800117 	ldw	r2,4(r2)
   2529c:	e0fffd17 	ldw	r3,-12(fp)
   252a0:	18c00017 	ldw	r3,0(r3)
   252a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   252a8:	e0bffd17 	ldw	r2,-12(fp)
   252ac:	e0fffd17 	ldw	r3,-12(fp)
   252b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   252b4:	e0bffd17 	ldw	r2,-12(fp)
   252b8:	e0fffd17 	ldw	r3,-12(fp)
   252bc:	10c00015 	stw	r3,0(r2)
   252c0:	e0bffb17 	ldw	r2,-20(fp)
   252c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   252c8:	e0bffe17 	ldw	r2,-8(fp)
   252cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   252d0:	e037883a 	mov	sp,fp
   252d4:	df000017 	ldw	fp,0(sp)
   252d8:	dec00104 	addi	sp,sp,4
   252dc:	f800283a 	ret

000252e0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   252e0:	defffb04 	addi	sp,sp,-20
   252e4:	dfc00415 	stw	ra,16(sp)
   252e8:	df000315 	stw	fp,12(sp)
   252ec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   252f0:	d0a00c17 	ldw	r2,-32720(gp)
   252f4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   252f8:	d0a01717 	ldw	r2,-32676(gp)
   252fc:	10800044 	addi	r2,r2,1
   25300:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25304:	00002e06 	br	253c0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   25308:	e0bffd17 	ldw	r2,-12(fp)
   2530c:	10800017 	ldw	r2,0(r2)
   25310:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   25314:	e0bffd17 	ldw	r2,-12(fp)
   25318:	10800403 	ldbu	r2,16(r2)
   2531c:	10803fcc 	andi	r2,r2,255
   25320:	10000426 	beq	r2,zero,25334 <alt_tick+0x54>
   25324:	d0a01717 	ldw	r2,-32676(gp)
   25328:	1000021e 	bne	r2,zero,25334 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2532c:	e0bffd17 	ldw	r2,-12(fp)
   25330:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   25334:	e0bffd17 	ldw	r2,-12(fp)
   25338:	10800217 	ldw	r2,8(r2)
   2533c:	d0e01717 	ldw	r3,-32676(gp)
   25340:	18801d36 	bltu	r3,r2,253b8 <alt_tick+0xd8>
   25344:	e0bffd17 	ldw	r2,-12(fp)
   25348:	10800403 	ldbu	r2,16(r2)
   2534c:	10803fcc 	andi	r2,r2,255
   25350:	1000191e 	bne	r2,zero,253b8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   25354:	e0bffd17 	ldw	r2,-12(fp)
   25358:	10800317 	ldw	r2,12(r2)
   2535c:	e0fffd17 	ldw	r3,-12(fp)
   25360:	18c00517 	ldw	r3,20(r3)
   25364:	1809883a 	mov	r4,r3
   25368:	103ee83a 	callr	r2
   2536c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25370:	e0bfff17 	ldw	r2,-4(fp)
   25374:	1000031e 	bne	r2,zero,25384 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   25378:	e13ffd17 	ldw	r4,-12(fp)
   2537c:	00252480 	call	25248 <alt_alarm_stop>
   25380:	00000d06 	br	253b8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   25384:	e0bffd17 	ldw	r2,-12(fp)
   25388:	10c00217 	ldw	r3,8(r2)
   2538c:	e0bfff17 	ldw	r2,-4(fp)
   25390:	1887883a 	add	r3,r3,r2
   25394:	e0bffd17 	ldw	r2,-12(fp)
   25398:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2539c:	e0bffd17 	ldw	r2,-12(fp)
   253a0:	10c00217 	ldw	r3,8(r2)
   253a4:	d0a01717 	ldw	r2,-32676(gp)
   253a8:	1880032e 	bgeu	r3,r2,253b8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   253ac:	e0bffd17 	ldw	r2,-12(fp)
   253b0:	00c00044 	movi	r3,1
   253b4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   253b8:	e0bffe17 	ldw	r2,-8(fp)
   253bc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   253c0:	e0fffd17 	ldw	r3,-12(fp)
   253c4:	d0a00c04 	addi	r2,gp,-32720
   253c8:	18bfcf1e 	bne	r3,r2,25308 <__alt_data_end+0xf4025308>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   253cc:	0001883a 	nop
}
   253d0:	e037883a 	mov	sp,fp
   253d4:	dfc00117 	ldw	ra,4(sp)
   253d8:	df000017 	ldw	fp,0(sp)
   253dc:	dec00204 	addi	sp,sp,8
   253e0:	f800283a 	ret

000253e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   253e4:	deffff04 	addi	sp,sp,-4
   253e8:	df000015 	stw	fp,0(sp)
   253ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   253f0:	000170fa 	wrctl	ienable,zero
}
   253f4:	e037883a 	mov	sp,fp
   253f8:	df000017 	ldw	fp,0(sp)
   253fc:	dec00104 	addi	sp,sp,4
   25400:	f800283a 	ret

00025404 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25404:	defffb04 	addi	sp,sp,-20
   25408:	dfc00415 	stw	ra,16(sp)
   2540c:	df000315 	stw	fp,12(sp)
   25410:	df000304 	addi	fp,sp,12
   25414:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25418:	00820034 	movhi	r2,2048
   2541c:	1086d704 	addi	r2,r2,7004
   25420:	10800017 	ldw	r2,0(r2)
   25424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25428:	00003106 	br	254f0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   2542c:	e0bffd17 	ldw	r2,-12(fp)
   25430:	10800217 	ldw	r2,8(r2)
   25434:	1009883a 	mov	r4,r2
   25438:	00204540 	call	20454 <strlen>
   2543c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25440:	e0bffd17 	ldw	r2,-12(fp)
   25444:	10c00217 	ldw	r3,8(r2)
   25448:	e0bffe17 	ldw	r2,-8(fp)
   2544c:	10bfffc4 	addi	r2,r2,-1
   25450:	1885883a 	add	r2,r3,r2
   25454:	10800003 	ldbu	r2,0(r2)
   25458:	10803fcc 	andi	r2,r2,255
   2545c:	1080201c 	xori	r2,r2,128
   25460:	10bfe004 	addi	r2,r2,-128
   25464:	10800bd8 	cmpnei	r2,r2,47
   25468:	1000031e 	bne	r2,zero,25478 <alt_find_file+0x74>
    {
      len -= 1;
   2546c:	e0bffe17 	ldw	r2,-8(fp)
   25470:	10bfffc4 	addi	r2,r2,-1
   25474:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25478:	e0bffe17 	ldw	r2,-8(fp)
   2547c:	e0ffff17 	ldw	r3,-4(fp)
   25480:	1885883a 	add	r2,r3,r2
   25484:	10800003 	ldbu	r2,0(r2)
   25488:	10803fcc 	andi	r2,r2,255
   2548c:	1080201c 	xori	r2,r2,128
   25490:	10bfe004 	addi	r2,r2,-128
   25494:	10800be0 	cmpeqi	r2,r2,47
   25498:	1000081e 	bne	r2,zero,254bc <alt_find_file+0xb8>
   2549c:	e0bffe17 	ldw	r2,-8(fp)
   254a0:	e0ffff17 	ldw	r3,-4(fp)
   254a4:	1885883a 	add	r2,r3,r2
   254a8:	10800003 	ldbu	r2,0(r2)
   254ac:	10803fcc 	andi	r2,r2,255
   254b0:	1080201c 	xori	r2,r2,128
   254b4:	10bfe004 	addi	r2,r2,-128
   254b8:	10000a1e 	bne	r2,zero,254e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   254bc:	e0bffd17 	ldw	r2,-12(fp)
   254c0:	10c00217 	ldw	r3,8(r2)
   254c4:	e0bffe17 	ldw	r2,-8(fp)
   254c8:	1809883a 	mov	r4,r3
   254cc:	e17fff17 	ldw	r5,-4(fp)
   254d0:	100d883a 	mov	r6,r2
   254d4:	00256d40 	call	256d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   254d8:	1000021e 	bne	r2,zero,254e4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   254dc:	e0bffd17 	ldw	r2,-12(fp)
   254e0:	00000806 	br	25504 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   254e4:	e0bffd17 	ldw	r2,-12(fp)
   254e8:	10800017 	ldw	r2,0(r2)
   254ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   254f0:	e0fffd17 	ldw	r3,-12(fp)
   254f4:	00820034 	movhi	r2,2048
   254f8:	1086d704 	addi	r2,r2,7004
   254fc:	18bfcb1e 	bne	r3,r2,2542c <__alt_data_end+0xf402542c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25500:	0005883a 	mov	r2,zero
}
   25504:	e037883a 	mov	sp,fp
   25508:	dfc00117 	ldw	ra,4(sp)
   2550c:	df000017 	ldw	fp,0(sp)
   25510:	dec00204 	addi	sp,sp,8
   25514:	f800283a 	ret

00025518 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25518:	defffa04 	addi	sp,sp,-24
   2551c:	dfc00515 	stw	ra,20(sp)
   25520:	df000415 	stw	fp,16(sp)
   25524:	dc000315 	stw	r16,12(sp)
   25528:	df000404 	addi	fp,sp,16
   2552c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   25530:	00bffa04 	movi	r2,-24
   25534:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25538:	e03ffc15 	stw	zero,-16(fp)
   2553c:	00002106 	br	255c4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   25540:	04020034 	movhi	r16,2048
   25544:	84024504 	addi	r16,r16,2324
   25548:	e0bffc17 	ldw	r2,-16(fp)
   2554c:	1009883a 	mov	r4,r2
   25550:	01400304 	movi	r5,12
   25554:	0022ea80 	call	22ea8 <__mulsi3>
   25558:	8085883a 	add	r2,r16,r2
   2555c:	10800017 	ldw	r2,0(r2)
   25560:	1000151e 	bne	r2,zero,255b8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   25564:	04020034 	movhi	r16,2048
   25568:	84024504 	addi	r16,r16,2324
   2556c:	e0bffc17 	ldw	r2,-16(fp)
   25570:	1009883a 	mov	r4,r2
   25574:	01400304 	movi	r5,12
   25578:	0022ea80 	call	22ea8 <__mulsi3>
   2557c:	8085883a 	add	r2,r16,r2
   25580:	e0fffe17 	ldw	r3,-8(fp)
   25584:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25588:	00820034 	movhi	r2,2048
   2558c:	1086db04 	addi	r2,r2,7020
   25590:	10c00017 	ldw	r3,0(r2)
   25594:	e0bffc17 	ldw	r2,-16(fp)
   25598:	1880040e 	bge	r3,r2,255ac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   2559c:	00820034 	movhi	r2,2048
   255a0:	1086db04 	addi	r2,r2,7020
   255a4:	e0fffc17 	ldw	r3,-16(fp)
   255a8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   255ac:	e0bffc17 	ldw	r2,-16(fp)
   255b0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   255b4:	00000606 	br	255d0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   255b8:	e0bffc17 	ldw	r2,-16(fp)
   255bc:	10800044 	addi	r2,r2,1
   255c0:	e0bffc15 	stw	r2,-16(fp)
   255c4:	e0bffc17 	ldw	r2,-16(fp)
   255c8:	10800810 	cmplti	r2,r2,32
   255cc:	103fdc1e 	bne	r2,zero,25540 <__alt_data_end+0xf4025540>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   255d0:	e0bffd17 	ldw	r2,-12(fp)
}
   255d4:	e6ffff04 	addi	sp,fp,-4
   255d8:	dfc00217 	ldw	ra,8(sp)
   255dc:	df000117 	ldw	fp,4(sp)
   255e0:	dc000017 	ldw	r16,0(sp)
   255e4:	dec00304 	addi	sp,sp,12
   255e8:	f800283a 	ret

000255ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   255ec:	defffe04 	addi	sp,sp,-8
   255f0:	df000115 	stw	fp,4(sp)
   255f4:	df000104 	addi	fp,sp,4
   255f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   255fc:	e0bfff17 	ldw	r2,-4(fp)
   25600:	10bffe84 	addi	r2,r2,-6
   25604:	10c00428 	cmpgeui	r3,r2,16
   25608:	18001a1e 	bne	r3,zero,25674 <alt_exception_cause_generated_bad_addr+0x88>
   2560c:	100690ba 	slli	r3,r2,2
   25610:	008000b4 	movhi	r2,2
   25614:	10958904 	addi	r2,r2,22052
   25618:	1885883a 	add	r2,r3,r2
   2561c:	10800017 	ldw	r2,0(r2)
   25620:	1000683a 	jmp	r2
   25624:	00025664 	muli	zero,zero,2393
   25628:	00025664 	muli	zero,zero,2393
   2562c:	00025674 	movhi	zero,2393
   25630:	00025674 	movhi	zero,2393
   25634:	00025674 	movhi	zero,2393
   25638:	00025664 	muli	zero,zero,2393
   2563c:	0002566c 	andhi	zero,zero,2393
   25640:	00025674 	movhi	zero,2393
   25644:	00025664 	muli	zero,zero,2393
   25648:	00025664 	muli	zero,zero,2393
   2564c:	00025674 	movhi	zero,2393
   25650:	00025664 	muli	zero,zero,2393
   25654:	0002566c 	andhi	zero,zero,2393
   25658:	00025674 	movhi	zero,2393
   2565c:	00025674 	movhi	zero,2393
   25660:	00025664 	muli	zero,zero,2393
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25664:	00800044 	movi	r2,1
   25668:	00000306 	br	25678 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2566c:	0005883a 	mov	r2,zero
   25670:	00000106 	br	25678 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   25674:	0005883a 	mov	r2,zero
  }
}
   25678:	e037883a 	mov	sp,fp
   2567c:	df000017 	ldw	fp,0(sp)
   25680:	dec00104 	addi	sp,sp,4
   25684:	f800283a 	ret

00025688 <atexit>:
   25688:	200b883a 	mov	r5,r4
   2568c:	000d883a 	mov	r6,zero
   25690:	0009883a 	mov	r4,zero
   25694:	000f883a 	mov	r7,zero
   25698:	00257501 	jmpi	25750 <__register_exitproc>

0002569c <exit>:
   2569c:	defffe04 	addi	sp,sp,-8
   256a0:	000b883a 	mov	r5,zero
   256a4:	dc000015 	stw	r16,0(sp)
   256a8:	dfc00115 	stw	ra,4(sp)
   256ac:	2021883a 	mov	r16,r4
   256b0:	00258640 	call	25864 <__call_exitprocs>
   256b4:	00820034 	movhi	r2,2048
   256b8:	1086d304 	addi	r2,r2,6988
   256bc:	11000017 	ldw	r4,0(r2)
   256c0:	20800f17 	ldw	r2,60(r4)
   256c4:	10000126 	beq	r2,zero,256cc <exit+0x30>
   256c8:	103ee83a 	callr	r2
   256cc:	8009883a 	mov	r4,r16
   256d0:	0025b240 	call	25b24 <_exit>

000256d4 <memcmp>:
   256d4:	01c000c4 	movi	r7,3
   256d8:	3980192e 	bgeu	r7,r6,25740 <memcmp+0x6c>
   256dc:	2144b03a 	or	r2,r4,r5
   256e0:	11c4703a 	and	r2,r2,r7
   256e4:	10000f26 	beq	r2,zero,25724 <memcmp+0x50>
   256e8:	20800003 	ldbu	r2,0(r4)
   256ec:	28c00003 	ldbu	r3,0(r5)
   256f0:	10c0151e 	bne	r2,r3,25748 <memcmp+0x74>
   256f4:	31bfff84 	addi	r6,r6,-2
   256f8:	01ffffc4 	movi	r7,-1
   256fc:	00000406 	br	25710 <memcmp+0x3c>
   25700:	20800003 	ldbu	r2,0(r4)
   25704:	28c00003 	ldbu	r3,0(r5)
   25708:	31bfffc4 	addi	r6,r6,-1
   2570c:	10c00e1e 	bne	r2,r3,25748 <memcmp+0x74>
   25710:	21000044 	addi	r4,r4,1
   25714:	29400044 	addi	r5,r5,1
   25718:	31fff91e 	bne	r6,r7,25700 <__alt_data_end+0xf4025700>
   2571c:	0005883a 	mov	r2,zero
   25720:	f800283a 	ret
   25724:	20c00017 	ldw	r3,0(r4)
   25728:	28800017 	ldw	r2,0(r5)
   2572c:	1880041e 	bne	r3,r2,25740 <memcmp+0x6c>
   25730:	31bfff04 	addi	r6,r6,-4
   25734:	21000104 	addi	r4,r4,4
   25738:	29400104 	addi	r5,r5,4
   2573c:	39bff936 	bltu	r7,r6,25724 <__alt_data_end+0xf4025724>
   25740:	303fe91e 	bne	r6,zero,256e8 <__alt_data_end+0xf40256e8>
   25744:	003ff506 	br	2571c <__alt_data_end+0xf402571c>
   25748:	10c5c83a 	sub	r2,r2,r3
   2574c:	f800283a 	ret

00025750 <__register_exitproc>:
   25750:	00820034 	movhi	r2,2048
   25754:	defffa04 	addi	sp,sp,-24
   25758:	1086d304 	addi	r2,r2,6988
   2575c:	dc000315 	stw	r16,12(sp)
   25760:	14000017 	ldw	r16,0(r2)
   25764:	dc400415 	stw	r17,16(sp)
   25768:	dfc00515 	stw	ra,20(sp)
   2576c:	80805217 	ldw	r2,328(r16)
   25770:	2023883a 	mov	r17,r4
   25774:	10003626 	beq	r2,zero,25850 <__register_exitproc+0x100>
   25778:	10c00117 	ldw	r3,4(r2)
   2577c:	010007c4 	movi	r4,31
   25780:	20c00e16 	blt	r4,r3,257bc <__register_exitproc+0x6c>
   25784:	1a400044 	addi	r9,r3,1
   25788:	8800211e 	bne	r17,zero,25810 <__register_exitproc+0xc0>
   2578c:	18c00084 	addi	r3,r3,2
   25790:	18c7883a 	add	r3,r3,r3
   25794:	18c7883a 	add	r3,r3,r3
   25798:	12400115 	stw	r9,4(r2)
   2579c:	10c7883a 	add	r3,r2,r3
   257a0:	19400015 	stw	r5,0(r3)
   257a4:	0005883a 	mov	r2,zero
   257a8:	dfc00517 	ldw	ra,20(sp)
   257ac:	dc400417 	ldw	r17,16(sp)
   257b0:	dc000317 	ldw	r16,12(sp)
   257b4:	dec00604 	addi	sp,sp,24
   257b8:	f800283a 	ret
   257bc:	00800034 	movhi	r2,0
   257c0:	10800004 	addi	r2,r2,0
   257c4:	10002526 	beq	r2,zero,2585c <__register_exitproc+0x10c>
   257c8:	01006404 	movi	r4,400
   257cc:	d9400015 	stw	r5,0(sp)
   257d0:	d9800115 	stw	r6,4(sp)
   257d4:	d9c00215 	stw	r7,8(sp)
   257d8:	00000000 	call	0 <__alt_mem_onchip_sram-0x20000>
   257dc:	d9400017 	ldw	r5,0(sp)
   257e0:	d9800117 	ldw	r6,4(sp)
   257e4:	d9c00217 	ldw	r7,8(sp)
   257e8:	10001c26 	beq	r2,zero,2585c <__register_exitproc+0x10c>
   257ec:	80c05217 	ldw	r3,328(r16)
   257f0:	10000115 	stw	zero,4(r2)
   257f4:	02400044 	movi	r9,1
   257f8:	10c00015 	stw	r3,0(r2)
   257fc:	80805215 	stw	r2,328(r16)
   25800:	10006215 	stw	zero,392(r2)
   25804:	10006315 	stw	zero,396(r2)
   25808:	0007883a 	mov	r3,zero
   2580c:	883fdf26 	beq	r17,zero,2578c <__alt_data_end+0xf402578c>
   25810:	18d1883a 	add	r8,r3,r3
   25814:	4211883a 	add	r8,r8,r8
   25818:	1211883a 	add	r8,r2,r8
   2581c:	41802215 	stw	r6,136(r8)
   25820:	01000044 	movi	r4,1
   25824:	11806217 	ldw	r6,392(r2)
   25828:	20c8983a 	sll	r4,r4,r3
   2582c:	310cb03a 	or	r6,r6,r4
   25830:	11806215 	stw	r6,392(r2)
   25834:	41c04215 	stw	r7,264(r8)
   25838:	01800084 	movi	r6,2
   2583c:	89bfd31e 	bne	r17,r6,2578c <__alt_data_end+0xf402578c>
   25840:	11806317 	ldw	r6,396(r2)
   25844:	3108b03a 	or	r4,r6,r4
   25848:	11006315 	stw	r4,396(r2)
   2584c:	003fcf06 	br	2578c <__alt_data_end+0xf402578c>
   25850:	80805304 	addi	r2,r16,332
   25854:	80805215 	stw	r2,328(r16)
   25858:	003fc706 	br	25778 <__alt_data_end+0xf4025778>
   2585c:	00bfffc4 	movi	r2,-1
   25860:	003fd106 	br	257a8 <__alt_data_end+0xf40257a8>

00025864 <__call_exitprocs>:
   25864:	00820034 	movhi	r2,2048
   25868:	1086d304 	addi	r2,r2,6988
   2586c:	10800017 	ldw	r2,0(r2)
   25870:	defff404 	addi	sp,sp,-48
   25874:	dd800815 	stw	r22,32(sp)
   25878:	d8800015 	stw	r2,0(sp)
   2587c:	10805204 	addi	r2,r2,328
   25880:	dd000615 	stw	r20,24(sp)
   25884:	dc800415 	stw	r18,16(sp)
   25888:	dfc00b15 	stw	ra,44(sp)
   2588c:	df000a15 	stw	fp,40(sp)
   25890:	ddc00915 	stw	r23,36(sp)
   25894:	dd400715 	stw	r21,28(sp)
   25898:	dcc00515 	stw	r19,20(sp)
   2589c:	dc400315 	stw	r17,12(sp)
   258a0:	dc000215 	stw	r16,8(sp)
   258a4:	2025883a 	mov	r18,r4
   258a8:	2829883a 	mov	r20,r5
   258ac:	d8800115 	stw	r2,4(sp)
   258b0:	05bfffc4 	movi	r22,-1
   258b4:	d8800017 	ldw	r2,0(sp)
   258b8:	14c05217 	ldw	r19,328(r2)
   258bc:	98001d26 	beq	r19,zero,25934 <__call_exitprocs+0xd0>
   258c0:	dd400117 	ldw	r21,4(sp)
   258c4:	98800117 	ldw	r2,4(r19)
   258c8:	173fffc4 	addi	fp,r2,-1
   258cc:	e0000d16 	blt	fp,zero,25904 <__call_exitprocs+0xa0>
   258d0:	14000044 	addi	r16,r2,1
   258d4:	8421883a 	add	r16,r16,r16
   258d8:	8421883a 	add	r16,r16,r16
   258dc:	84402004 	addi	r17,r16,128
   258e0:	9c63883a 	add	r17,r19,r17
   258e4:	9c21883a 	add	r16,r19,r16
   258e8:	a0001e26 	beq	r20,zero,25964 <__call_exitprocs+0x100>
   258ec:	80804017 	ldw	r2,256(r16)
   258f0:	15001c26 	beq	r2,r20,25964 <__call_exitprocs+0x100>
   258f4:	e73fffc4 	addi	fp,fp,-1
   258f8:	843fff04 	addi	r16,r16,-4
   258fc:	8c7fff04 	addi	r17,r17,-4
   25900:	e5bff91e 	bne	fp,r22,258e8 <__alt_data_end+0xf40258e8>
   25904:	00800034 	movhi	r2,0
   25908:	10800004 	addi	r2,r2,0
   2590c:	10000926 	beq	r2,zero,25934 <__call_exitprocs+0xd0>
   25910:	98800117 	ldw	r2,4(r19)
   25914:	1000311e 	bne	r2,zero,259dc <__call_exitprocs+0x178>
   25918:	98800017 	ldw	r2,0(r19)
   2591c:	10003426 	beq	r2,zero,259f0 <__call_exitprocs+0x18c>
   25920:	9809883a 	mov	r4,r19
   25924:	a8800015 	stw	r2,0(r21)
   25928:	00000000 	call	0 <__alt_mem_onchip_sram-0x20000>
   2592c:	acc00017 	ldw	r19,0(r21)
   25930:	983fe41e 	bne	r19,zero,258c4 <__alt_data_end+0xf40258c4>
   25934:	dfc00b17 	ldw	ra,44(sp)
   25938:	df000a17 	ldw	fp,40(sp)
   2593c:	ddc00917 	ldw	r23,36(sp)
   25940:	dd800817 	ldw	r22,32(sp)
   25944:	dd400717 	ldw	r21,28(sp)
   25948:	dd000617 	ldw	r20,24(sp)
   2594c:	dcc00517 	ldw	r19,20(sp)
   25950:	dc800417 	ldw	r18,16(sp)
   25954:	dc400317 	ldw	r17,12(sp)
   25958:	dc000217 	ldw	r16,8(sp)
   2595c:	dec00c04 	addi	sp,sp,48
   25960:	f800283a 	ret
   25964:	98800117 	ldw	r2,4(r19)
   25968:	80c00017 	ldw	r3,0(r16)
   2596c:	10bfffc4 	addi	r2,r2,-1
   25970:	17001526 	beq	r2,fp,259c8 <__call_exitprocs+0x164>
   25974:	80000015 	stw	zero,0(r16)
   25978:	183fde26 	beq	r3,zero,258f4 <__alt_data_end+0xf40258f4>
   2597c:	00800044 	movi	r2,1
   25980:	1708983a 	sll	r4,r2,fp
   25984:	98806217 	ldw	r2,392(r19)
   25988:	9dc00117 	ldw	r23,4(r19)
   2598c:	2084703a 	and	r2,r4,r2
   25990:	1000061e 	bne	r2,zero,259ac <__call_exitprocs+0x148>
   25994:	183ee83a 	callr	r3
   25998:	98800117 	ldw	r2,4(r19)
   2599c:	15ffc51e 	bne	r2,r23,258b4 <__alt_data_end+0xf40258b4>
   259a0:	a8800017 	ldw	r2,0(r21)
   259a4:	14ffd326 	beq	r2,r19,258f4 <__alt_data_end+0xf40258f4>
   259a8:	003fc206 	br	258b4 <__alt_data_end+0xf40258b4>
   259ac:	98806317 	ldw	r2,396(r19)
   259b0:	2084703a 	and	r2,r4,r2
   259b4:	1000061e 	bne	r2,zero,259d0 <__call_exitprocs+0x16c>
   259b8:	89400017 	ldw	r5,0(r17)
   259bc:	9009883a 	mov	r4,r18
   259c0:	183ee83a 	callr	r3
   259c4:	003ff406 	br	25998 <__alt_data_end+0xf4025998>
   259c8:	9f000115 	stw	fp,4(r19)
   259cc:	003fea06 	br	25978 <__alt_data_end+0xf4025978>
   259d0:	89000017 	ldw	r4,0(r17)
   259d4:	183ee83a 	callr	r3
   259d8:	003fef06 	br	25998 <__alt_data_end+0xf4025998>
   259dc:	98800017 	ldw	r2,0(r19)
   259e0:	982b883a 	mov	r21,r19
   259e4:	1027883a 	mov	r19,r2
   259e8:	983fb61e 	bne	r19,zero,258c4 <__alt_data_end+0xf40258c4>
   259ec:	003fd106 	br	25934 <__alt_data_end+0xf4025934>
   259f0:	0005883a 	mov	r2,zero
   259f4:	003ffa06 	br	259e0 <__alt_data_end+0xf40259e0>

000259f8 <udivmodsi4>:
   259f8:	2900182e 	bgeu	r5,r4,25a5c <udivmodsi4+0x64>
   259fc:	28001716 	blt	r5,zero,25a5c <udivmodsi4+0x64>
   25a00:	00800804 	movi	r2,32
   25a04:	00c00044 	movi	r3,1
   25a08:	00000206 	br	25a14 <udivmodsi4+0x1c>
   25a0c:	10001126 	beq	r2,zero,25a54 <udivmodsi4+0x5c>
   25a10:	28000516 	blt	r5,zero,25a28 <udivmodsi4+0x30>
   25a14:	294b883a 	add	r5,r5,r5
   25a18:	10bfffc4 	addi	r2,r2,-1
   25a1c:	18c7883a 	add	r3,r3,r3
   25a20:	293ffa36 	bltu	r5,r4,25a0c <__alt_data_end+0xf4025a0c>
   25a24:	18000b26 	beq	r3,zero,25a54 <udivmodsi4+0x5c>
   25a28:	0005883a 	mov	r2,zero
   25a2c:	21400236 	bltu	r4,r5,25a38 <udivmodsi4+0x40>
   25a30:	2149c83a 	sub	r4,r4,r5
   25a34:	10c4b03a 	or	r2,r2,r3
   25a38:	1806d07a 	srli	r3,r3,1
   25a3c:	280ad07a 	srli	r5,r5,1
   25a40:	183ffa1e 	bne	r3,zero,25a2c <__alt_data_end+0xf4025a2c>
   25a44:	3000011e 	bne	r6,zero,25a4c <udivmodsi4+0x54>
   25a48:	f800283a 	ret
   25a4c:	2005883a 	mov	r2,r4
   25a50:	f800283a 	ret
   25a54:	0005883a 	mov	r2,zero
   25a58:	003ffa06 	br	25a44 <__alt_data_end+0xf4025a44>
   25a5c:	00c00044 	movi	r3,1
   25a60:	003ff106 	br	25a28 <__alt_data_end+0xf4025a28>

00025a64 <__divsi3>:
   25a64:	defffe04 	addi	sp,sp,-8
   25a68:	dfc00115 	stw	ra,4(sp)
   25a6c:	dc000015 	stw	r16,0(sp)
   25a70:	20000b16 	blt	r4,zero,25aa0 <__divsi3+0x3c>
   25a74:	0021883a 	mov	r16,zero
   25a78:	28000c16 	blt	r5,zero,25aac <__divsi3+0x48>
   25a7c:	000d883a 	mov	r6,zero
   25a80:	00259f80 	call	259f8 <udivmodsi4>
   25a84:	0407c83a 	sub	r3,zero,r16
   25a88:	1884f03a 	xor	r2,r3,r2
   25a8c:	1405883a 	add	r2,r2,r16
   25a90:	dfc00117 	ldw	ra,4(sp)
   25a94:	dc000017 	ldw	r16,0(sp)
   25a98:	dec00204 	addi	sp,sp,8
   25a9c:	f800283a 	ret
   25aa0:	0109c83a 	sub	r4,zero,r4
   25aa4:	04000044 	movi	r16,1
   25aa8:	283ff40e 	bge	r5,zero,25a7c <__alt_data_end+0xf4025a7c>
   25aac:	014bc83a 	sub	r5,zero,r5
   25ab0:	8400005c 	xori	r16,r16,1
   25ab4:	003ff106 	br	25a7c <__alt_data_end+0xf4025a7c>

00025ab8 <__modsi3>:
   25ab8:	defffd04 	addi	sp,sp,-12
   25abc:	dfc00215 	stw	ra,8(sp)
   25ac0:	dc400115 	stw	r17,4(sp)
   25ac4:	dc000015 	stw	r16,0(sp)
   25ac8:	20000c16 	blt	r4,zero,25afc <__modsi3+0x44>
   25acc:	0023883a 	mov	r17,zero
   25ad0:	0021883a 	mov	r16,zero
   25ad4:	28000d16 	blt	r5,zero,25b0c <__modsi3+0x54>
   25ad8:	01800044 	movi	r6,1
   25adc:	00259f80 	call	259f8 <udivmodsi4>
   25ae0:	1404f03a 	xor	r2,r2,r16
   25ae4:	8885883a 	add	r2,r17,r2
   25ae8:	dfc00217 	ldw	ra,8(sp)
   25aec:	dc400117 	ldw	r17,4(sp)
   25af0:	dc000017 	ldw	r16,0(sp)
   25af4:	dec00304 	addi	sp,sp,12
   25af8:	f800283a 	ret
   25afc:	0109c83a 	sub	r4,zero,r4
   25b00:	04400044 	movi	r17,1
   25b04:	043fffc4 	movi	r16,-1
   25b08:	283ff30e 	bge	r5,zero,25ad8 <__alt_data_end+0xf4025ad8>
   25b0c:	014bc83a 	sub	r5,zero,r5
   25b10:	003ff106 	br	25ad8 <__alt_data_end+0xf4025ad8>

00025b14 <__udivsi3>:
   25b14:	000d883a 	mov	r6,zero
   25b18:	00259f81 	jmpi	259f8 <udivmodsi4>

00025b1c <__umodsi3>:
   25b1c:	01800044 	movi	r6,1
   25b20:	00259f81 	jmpi	259f8 <udivmodsi4>

00025b24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25b24:	defffd04 	addi	sp,sp,-12
   25b28:	df000215 	stw	fp,8(sp)
   25b2c:	df000204 	addi	fp,sp,8
   25b30:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25b34:	0001883a 	nop
   25b38:	e0bfff17 	ldw	r2,-4(fp)
   25b3c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25b40:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25b44:	10000226 	beq	r2,zero,25b50 <_exit+0x2c>
    ALT_SIM_FAIL();
   25b48:	002af070 	cmpltui	zero,zero,43969
   25b4c:	00000106 	br	25b54 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25b50:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25b54:	003fff06 	br	25b54 <__alt_data_end+0xf4025b54>
