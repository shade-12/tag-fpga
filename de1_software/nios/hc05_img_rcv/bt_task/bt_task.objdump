
bt_task.elf:     file format elf32-littlenios2
bt_task.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020230

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00008964 memsz 0x00008964 flags r-x
    LOAD off    0x0000a000 vaddr 0x08000000 paddr 0x00028984 align 2**12
         filesz 0x00001e44 memsz 0x000028ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008754  00020230  00020230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000348  08000000  00028984  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  08000348  00028ccc  0000a348  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a68  08001e44  0002a7c8  0000be44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_sram  00000000  0002a7c8  0002a7c8  0000be44  2**0
                  CONTENTS
  7 .sdram_controller 00000000  080028ac  080028ac  0000be44  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000be44  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ea0  00000000  00000000  0000be68  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023b26  00000000  00000000  0000cd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009db9  00000000  00000000  0003082e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad2a  00000000  00000000  0003a5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000257c  00000000  00000000  00045314  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005837  00000000  00000000  00047890  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00008cb3  00000000  00000000  0004d0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00055d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000b28  00000000  00000000  00055d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005ae88  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0005ae8b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0005ae97  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005ae98  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005ae99  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005ae9d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0005aea1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0005aea5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0005aeb0  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0005aebb  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0005aec6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  0005aed5  2**0
                  CONTENTS, READONLY
 30 .jdi          00007b07  00000000  00000000  0005aef2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     002c69e8  00000000  00000000  000629f9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020230 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000348 l    d  .rwdata	00000000 .rwdata
08001e44 l    d  .bss	00000000 .bss
0002a7c8 l    d  .onchip_sram	00000000 .onchip_sram
080028ac l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/tag2/de1_software/nios/hc05_img_rcv/bt_task_bsp//obj/HAL/src/crt0.o
00020268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 bt_task.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
000207a0 l     F .text	00000058 _ZL12read_sleb128PKhPl
000207f8 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00020880 l     F .text	000000a0 _ZL21size_of_encoded_valueh
00020920 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
00020b30 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00020b84 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00020c2c l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
00020cb4 l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00020ef4 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
08001e44 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00022030 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
08001e50 l     O .bss	00000004 _ZL14emergency_used
08001f84 l     O .bss	00000800 _ZL16emergency_buffer
08001e4c l     O .bss	00000004 _ZL15dependents_used
08001e84 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022448 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08001e54 l     O .bss	00000004 fc_static
00022560 l     F .text	000000c0 _Unwind_RaiseException_Phase2
00022620 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
08000750 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00025024 l     F .text	00000008 __fp_lock
0002502c l     F .text	00000008 __fp_unlock
00025040 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
00025b64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00025c8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00025cec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00025e14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00025f10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00026090 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00026174 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
000265c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08001e34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00026848 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00026998 l     F .text	00000038 alt_dev_reg
08000d1c l     O .rwdata	00001060 jtag_uart_0
08001d7c l     O .rwdata	0000002c bt_rs232_uart
08001da8 l     O .rwdata	0000002c wifi_rs232_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00026c80 l     F .text	00000208 altera_avalon_jtag_uart_irq
00026e88 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00027990 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00027be8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00027ef0 l     F .text	00000050 alt_get_errno
00027f40 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08001e80 g     O .bss	00000004 alt_instruction_exception_handler
00022290 g     F .text	00000044 __cxa_free_exception
0002327c g     F .text	00000018 putchar
00022194 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00021b28 g     F .text	00000018 _ZSt10unexpectedv
00025a58 g     F .text	00000054 _isatty_r
000262a0 g     F .text	00000078 alt_main
00023294 g     F .text	000000b8 _puts_r
080027ac g     O .bss	00000100 alt_irq
000223d0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00025aac g     F .text	0000005c _lseek_r
000226dc g     F .text	00000020 .hidden _Unwind_GetIPInfo
00028ccc g       *ABS*	00000000 __flash_rwdata_start
00022104 g     F .text	00000084 __cxa_rethrow
00022668 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00021b64 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00020614 g     F .text	00000148 _Z7bt_taskv
000226cc g     F .text	00000010 .hidden _Unwind_GetIP
080028ac g       *ABS*	00000000 __alt_heap_start
00023658 g     F .text	00000058 _kill_r
0002341c g     F .text	00000084 _signal_r
08000018  w    O .rodata	00000010 _ZTV6BTUart
000257d8 g     F .text	0000005c __sseek
00025388 g     F .text	00000010 __sinit
00024b2c g     F .text	00000154 __swbuf_r
00022368 g     F .text	00000040 __cxa_free_dependent_exception
00021b88 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0800012c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000251e0 g     F .text	00000078 __sfmoreglue
00026338 g     F .text	00000020 __malloc_unlock
000276d0 g     F .text	00000090 alt_up_rs232_read_fd
000223d0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00021fb8 g     F .text	00000020 _ZSt18uncaught_exceptionv
00022400 g     F .text	00000020 __cxa_deleted_virtual
000242c8 g     F .text	0000015c memmove
000205c8 g     F .text	0000004c _ZN6BTUart5flushEv
000223a8 g     F .text	00000004 _ZNSt9exceptionD2Ev
00025370 g     F .text	00000018 _cleanup
08000268  w    O .rodata	00000014 _ZTVSt13bad_exception
00028330 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00022718 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
00025a00 g     F .text	00000058 _fstat_r
08001e64 g     O .bss	00000004 errno
00025754 g     F .text	00000008 __seofread
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000228f4 g     F .text	00000074 .hidden _Unwind_Backtrace
08001e6c g     O .bss	00000004 alt_argv
08009dd4 g       *ABS*	00000000 _gp
00025df4 g     F .text	00000020 getpid
00021528 g     F .text	00000234 __cxa_call_unexpected
00021e4c g     F .text	00000008 __cxa_get_exception_ptr
08000b9c g     O .rwdata	00000180 alt_fd_list
08001ddc  w    O .rwdata	00000008 _ZTS6BTUart
00023274 g     F .text	00000008 _putchar_r
00022808 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00022698 g     F .text	00000018 .hidden _Unwind_GetCFA
00021b40 g     F .text	00000014 _ZSt13set_terminatePFvvE
00027b3c g     F .text	00000090 alt_find_dev
00024190 g     F .text	00000138 memcpy
000222d4 g     F .text	00000094 __cxa_allocate_dependent_exception
00025034 g     F .text	0000000c _cleanup_r
000217ec g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00027cc8 g     F .text	00000078 alt_io_redirect
00028984 g       *ABS*	00000000 __DTOR_END__
00021804 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0002765c g     F .text	00000074 alt_up_rs232_read_data
0002334c g     F .text	00000014 puts
00028538 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027084 g     F .text	0000020c altera_avalon_jtag_uart_read
00022980 g     F .text	00000014 malloc
00025e64 g     F .text	000000ac isatty
000234a0 g     F .text	000000bc _raise_r
08001e60 g     O .bss	00000004 __malloc_top_pad
000236b0 g     F .text	00000004 _getpid_r
00023c04 g     F .text	000004a4 __sfvwrite_r
000218b4 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0002355c g     F .text	000000a8 __sigtramp_r
00023360 g     F .text	00000054 _sbrk_r
0800019c  w    O .rodata	00000020 _ZTVSt9type_info
00025b08 g     F .text	0000005c _read_r
000223b0 g     F .text	0000000c _ZNKSt9exception4whatEv
0002049c g     F .text	00000070 _ZN6BTUart6read_mEPhi
08001e2c g     O .rwdata	00000004 alt_max_fd
000275d8 g     F .text	00000044 alt_up_rs232_check_parity
000258ec g     F .text	00000100 _fclose_r
00024ff4 g     F .text	00000030 fflush
08001e5c g     O .bss	00000004 __malloc_max_sbrked_mem
00027d40 g     F .text	000001b0 alt_irq_register
08000160  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000261c4 g     F .text	000000dc lseek
00021848 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00021a3c g     F .text	00000004 _ZdlPv
0002029c g     F .text	00000048 _ZN6BTUartD1Ev
08001e14 g     O .rwdata	00000004 _global_impure_ptr
0002458c g     F .text	000005a0 _realloc_r
080028ac g       *ABS*	00000000 __bss_end
0002822c g     F .text	00000104 alt_tick
00022650 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00022968 g     F .text	00000018 abort
00021f08 g     F .text	000000b0 __cxa_end_catch
000253a8 g     F .text	00000018 __fp_lock_all
000223ac g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00020000 g       *ABS*	00000000 __alt_mem_onchip_sram
00028194 g     F .text	00000098 alt_alarm_stop
08001e74 g     O .bss	00000004 alt_irq_active
00021b00 g     F .text	00000018 _ZSt9terminatev
000200fc g     F .exceptions	000000d4 alt_irq_handler
08000b74 g     O .rwdata	00000028 alt_dev_null
000223d8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0002026c g     F .text	00000030 _ZN6BTUartC2Ev
0002026c g     F .text	00000030 _ZN6BTUartC1Ev
080000d0  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00027974 g     F .text	0000001c alt_dcache_flush_all
08001df0  w    O .rwdata	00000008 _ZTISt9exception
08001e44 g       *ABS*	00000000 __ram_rwdata_end
00022188 g     F .text	00000004 _ZNSt9type_infoD1Ev
08001e24 g     O .rwdata	00000008 alt_dev_list
000223d8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00026898 g     F .text	00000100 write
00024424 g     F .text	000000a0 _putc_r
000221a4 g     F .text	00000004 _ZNSt9type_infoD0Ev
08000348 g       *ABS*	00000000 __ram_rodata_end
00025d3c g     F .text	000000b8 fstat
00027760 g     F .text	00000094 alt_up_rs232_write_fd
00025f60 g     F .text	00000130 kill
0002219c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00021b54 g     F .text	00000010 _ZSt13get_terminatev
080028ac g       *ABS*	00000000 end
000228dc g     F .text	00000018 .hidden _Unwind_DeleteException
00026bc8 g     F .text	000000b8 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002196c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00028984 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00021774 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00027290 g     F .text	00000218 altera_avalon_jtag_uart_write
00025398 g     F .text	00000004 __sfp_lock_acquire
080001f0  w    O .rodata	00000012 _ZTSSt13bad_exception
000240a8 g     F .text	000000e8 memchr
00023914 g     F .text	000002f0 _free_r
00026358 g     F .text	00000228 alt_printf
000287b0 g     F .text	00000194 __call_exitprocs
0002029c g     F .text	00000048 _ZN6BTUartD2Ev
08001e0c g     O .rwdata	00000004 __malloc_sbrk_base
00020230 g     F .text	0000003c _start
08001e78 g     O .bss	00000004 _alt_tick_rate
0800018c  w    O .rodata	0000000d _ZTSSt9type_info
000223e0 g     F .text	00000020 __cxa_pure_virtual
08001e7c g     O .bss	00000004 _alt_nticks
00023618 g     F .text	0000001c signal
00026614 g     F .text	00000104 read
00026a04 g     F .text	00000060 alt_sys_init
0002869c g     F .text	00000114 __register_exitproc
00021bcc g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0002759c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00026f30 g     F .text	00000068 altera_avalon_jtag_uart_close
00022420 g     F .text	00000028 .hidden __mulsi3
08000348 g       *ABS*	00000000 __ram_rwdata_start
00022738 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08000000 g       *ABS*	00000000 __ram_rodata_start
08002784 g     O .bss	00000028 __malloc_current_mallinfo
0002284c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08000290  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00022188 g     F .text	00000004 _ZNSt9type_infoD2Ev
000223dc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00021dc8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00026a64 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00028464 g     F .text	000000d4 alt_get_fd
08001e00  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00025898 g     F .text	00000054 _close_r
00028620 g     F .text	0000007c memcmp
00026b24 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080028ac g       *ABS*	00000000 __alt_stack_base
00026b74 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00021b88 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00024c9c g     F .text	00000130 __swsetup_r
00022890 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00025258 g     F .text	00000118 __sfp
0002218c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
08000348 g     O .rwdata	00000408 __malloc_av_
000253a4 g     F .text	00000004 __sinit_lock_release
00025700 g     F .text	00000054 __sread
08000254  w    O .rodata	00000014 _ZTVSt9exception
000223d4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00027500 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00028350 g     F .text	00000114 alt_find_file
000279e0 g     F .text	000000a4 alt_dev_llist_insert
00026318 g     F .text	00000020 __malloc_lock
00026798 g     F .text	000000b0 sbrk
08000100  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00022074 g     F .text	00000090 __cxa_throw
00024dcc g     F .text	00000228 _fflush_r
000226fc g     F .text	00000010 .hidden _Unwind_SetIP
08001e44 g       *ABS*	00000000 __bss_start
000203e4 g     F .text	000000b8 _ZN6BTUart7write_sEh
00023150 g     F .text	00000124 memset
0002075c g     F .text	00000044 main
08001e70 g     O .bss	00000004 alt_envp
08001e58 g     O .bss	00000004 __malloc_max_total_mem
00026ac4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024c80 g     F .text	0000001c __swbuf
0002175c g     F .text	0000000c __cxa_get_globals_fast
00025834 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
000259ec g     F .text	00000014 fclose
00020384 g     F .text	00000060 _ZN6BTUart6read_sEv
000229a8 g     F .text	000007a8 _malloc_r
000202e4 g     F .text	00000038 _ZN6BTUartD0Ev
000223bc g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08001e30 g     O .rwdata	00000004 alt_errno
00023634 g     F .text	00000010 _init_signal
080000f4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000253d8 g     F .text	000000b8 _fwalk
0002050c g     F .text	00000074 _ZN6BTUart7write_mEPci
000223ac g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
000244c4 g     F .text	000000c8 putc
000237f0 g     F .text	00000124 _malloc_trim_r
00028984 g       *ABS*	00000000 __CTOR_END__
000236b4 g     F .text	000000a4 strcmp
00028984 g       *ABS*	00000000 __flash_rodata_start
0800027c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00028984 g       *ABS*	00000000 __DTOR_LIST__
000277f4 g     F .text	00000040 alt_up_rs232_open_dev
000269d0 g     F .text	00000034 alt_irq_init
00026718 g     F .text	00000080 alt_release_fd
00021b98 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000285d4 g     F .text	00000014 atexit
0002583c g     F .text	0000005c _write_r
00022730 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00021fd8 g     F .text	00000058 __cxa_call_terminate
08001e18 g     O .rwdata	00000004 _impure_ptr
08001df8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08001e68 g     O .bss	00000004 alt_argc
00027ae0 g     F .text	0000005c _do_dtors
08001dd4  w    O .rwdata	00000008 _ZTI6BTUart
00021b78 g     F .text	00000010 _ZSt14get_unexpectedv
00020020 g       .exceptions	00000000 alt_irq_entry
00022720 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
000253c0 g     F .text	00000018 __fp_unlock_all
08001e1c g     O .rwdata	00000008 alt_fs_list
08000230  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000274a8 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
0002270c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0002761c g     F .text	00000040 alt_up_rs232_write_data
00021e54 g     F .text	000000b4 __cxa_begin_catch
00021804 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00021b18 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
000223cc g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08001de4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000221ec g     F .text	000000a4 __cxa_allocate_exception
08000154  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08001e44 g       *ABS*	00000000 _edata
080028ac g       *ABS*	00000000 _end
00021028 g     F .text	00000500 __gxx_personality_sj0
00020230 g       *ABS*	00000000 __ram_exceptions_end
00026f98 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000223a8 g     F .text	00000004 _ZNSt9exceptionD1Ev
0002575c g     F .text	0000007c __swrite
08001e10 g     O .rwdata	00000004 __malloc_trim_threshold
000285e8 g     F .text	00000038 exit
000226b0 g     F .text	0000001c .hidden _Unwind_SetGR
00025490 g     F .text	000000b8 _fwalk_reent
00021d2c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00021a40 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0c000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002539c g     F .text	00000004 __sfp_lock_release
08000204  w    O .rodata	0000000c _ZTISt13bad_exception
00025cb8 g     F .text	00000034 _exit
00027834 g     F .text	00000140 alt_alarm_start
0002267c g     F .text	0000001c .hidden _Unwind_GetGR
00021768 g     F .text	0000000c __cxa_get_globals
00025548 g     F .text	000001b8 __smakebuf_r
08001e08 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00023758 g     F .text	00000098 strlen
000233b4 g     F .text	00000068 _init_signal_r
08001de8  w    O .rwdata	00000008 _ZTISt9type_info
00028034 g     F .text	00000160 open
00026580 g     F .text	00000044 alt_putchar
0002031c g     F .text	00000068 _ZN6BTUart4openEPKc
080001e0  w    O .rodata	0000000d _ZTSSt9exception
000223c8 g     F .text	00000004 _ZNSt9exceptionD0Ev
00027bcc g     F .text	0000001c alt_icache_flush_all
00022728 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
08001e38 g     O .rwdata	00000004 alt_priority_mask
08001e3c g     O .rwdata	00000008 alt_alarm_list
00027a84 g     F .text	0000005c _do_ctors
00023644 g     F .text	00000014 __sigtramp
00020580 g     F .text	00000048 _ZN6BTUart10read_readyEv
0002755c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00025bb4 g     F .text	000000d8 close
08000210  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
000260f4 g     F .text	00000080 alt_load
000221a8 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00023604 g     F .text	00000014 raise
00022994 g     F .text	00000014 free
000253a0 g     F .text	00000004 __sinit_lock_acquire
00021814 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408c14 	ori	at,at,560
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	00820034 	movhi	r2,2048
   20140:	1089eb04 	addi	r2,r2,10156
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00820034 	movhi	r2,2048
   20158:	1089eb04 	addi	r2,r2,10156
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	e17ffd17 	ldw	r5,-12(fp)
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <__alt_data_end+0xf402012c>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <__alt_data_end+0xf4020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   201ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201f0:	d0a02b17 	ldw	r2,-32596(gp)
   201f4:	10000726 	beq	r2,zero,20214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f8:	d0a02b17 	ldw	r2,-32596(gp)
   201fc:	e0fffd17 	ldw	r3,-12(fp)
   20200:	1809883a 	mov	r4,r3
   20204:	e17fff17 	ldw	r5,-4(fp)
   20208:	e1bffe17 	ldw	r6,-8(fp)
   2020c:	103ee83a 	callr	r2
   20210:	00000206 	br	2021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20218:	0005883a 	mov	r2,zero
}
   2021c:	e037883a 	mov	sp,fp
   20220:	dfc00117 	ldw	ra,4(sp)
   20224:	df000017 	ldw	fp,0(sp)
   20228:	dec00204 	addi	sp,sp,8
   2022c:	f800283a 	ret

Disassembly of section .text:

00020230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   2023c:	d6a77514 	ori	gp,gp,40404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   20244:	10879114 	ori	r2,r2,7748

    movhi r3, %hi(__bss_end)
   20248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   2024c:	18ca2b14 	ori	r3,r3,10412

    beq r2, r3, 1f
   20250:	10c00326 	beq	r2,r3,20260 <_start+0x30>

0:
    stw zero, (r2)
   20254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2025c:	10fffd36 	bltu	r2,r3,20254 <__alt_data_end+0xf4020254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20260:	00260f40 	call	260f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20264:	00262a00 	call	262a0 <alt_main>

00020268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20268:	003fff06 	br	20268 <__alt_data_end+0xf4020268>

0002026c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
   2026c:	defffe04 	addi	sp,sp,-8
   20270:	df000115 	stw	fp,4(sp)
   20274:	df000104 	addi	fp,sp,4
   20278:	e13fff15 	stw	r4,-4(fp)
   2027c:	e0ffff17 	ldw	r3,-4(fp)
   20280:	00820034 	movhi	r2,2048
   20284:	10800804 	addi	r2,r2,32
   20288:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   2028c:	e037883a 	mov	sp,fp
   20290:	df000017 	ldw	fp,0(sp)
   20294:	dec00104 	addi	sp,sp,4
   20298:	f800283a 	ret

0002029c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
   2029c:	defffd04 	addi	sp,sp,-12
   202a0:	dfc00215 	stw	ra,8(sp)
   202a4:	df000115 	stw	fp,4(sp)
   202a8:	df000104 	addi	fp,sp,4
   202ac:	e13fff15 	stw	r4,-4(fp)
   202b0:	e0ffff17 	ldw	r3,-4(fp)
   202b4:	00820034 	movhi	r2,2048
   202b8:	10800804 	addi	r2,r2,32
   202bc:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   202c0:	0005883a 	mov	r2,zero
   202c4:	10000226 	beq	r2,zero,202d0 <_ZN6BTUartD1Ev+0x34>
   202c8:	e13fff17 	ldw	r4,-4(fp)
   202cc:	0021a3c0 	call	21a3c <_ZdlPv>
   202d0:	e037883a 	mov	sp,fp
   202d4:	dfc00117 	ldw	ra,4(sp)
   202d8:	df000017 	ldw	fp,0(sp)
   202dc:	dec00204 	addi	sp,sp,8
   202e0:	f800283a 	ret

000202e4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
   202e4:	defffd04 	addi	sp,sp,-12
   202e8:	dfc00215 	stw	ra,8(sp)
   202ec:	df000115 	stw	fp,4(sp)
   202f0:	df000104 	addi	fp,sp,4
   202f4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   202f8:	e13fff17 	ldw	r4,-4(fp)
   202fc:	002029c0 	call	2029c <_ZN6BTUartD1Ev>
   20300:	e13fff17 	ldw	r4,-4(fp)
   20304:	0021a3c0 	call	21a3c <_ZdlPv>
   20308:	e037883a 	mov	sp,fp
   2030c:	dfc00117 	ldw	ra,4(sp)
   20310:	df000017 	ldw	fp,0(sp)
   20314:	dec00204 	addi	sp,sp,8
   20318:	f800283a 	ret

0002031c <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
   2031c:	defffc04 	addi	sp,sp,-16
   20320:	dfc00315 	stw	ra,12(sp)
   20324:	df000215 	stw	fp,8(sp)
   20328:	df000204 	addi	fp,sp,8
   2032c:	e13ffe15 	stw	r4,-8(fp)
   20330:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
   20334:	e13fff17 	ldw	r4,-4(fp)
   20338:	00277f40 	call	277f4 <alt_up_rs232_open_dev>
   2033c:	1007883a 	mov	r3,r2
   20340:	e0bffe17 	ldw	r2,-8(fp)
   20344:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20348:	e0bffe17 	ldw	r2,-8(fp)
   2034c:	10800117 	ldw	r2,4(r2)
   20350:	1009883a 	mov	r4,r2
   20354:	00274a80 	call	274a8 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
   20358:	e0bffe17 	ldw	r2,-8(fp)
   2035c:	10800117 	ldw	r2,4(r2)
   20360:	1000021e 	bne	r2,zero,2036c <_ZN6BTUart4openEPKc+0x50>
        return 0;
   20364:	0005883a 	mov	r2,zero
   20368:	00000106 	br	20370 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
   2036c:	00800044 	movi	r2,1
}
   20370:	e037883a 	mov	sp,fp
   20374:	dfc00117 	ldw	ra,4(sp)
   20378:	df000017 	ldw	fp,0(sp)
   2037c:	dec00204 	addi	sp,sp,8
   20380:	f800283a 	ret

00020384 <_ZN6BTUart6read_sEv>:


unsigned char BTUart::read_s(void)
{
   20384:	defffc04 	addi	sp,sp,-16
   20388:	dfc00315 	stw	ra,12(sp)
   2038c:	df000215 	stw	fp,8(sp)
   20390:	df000204 	addi	fp,sp,8
   20394:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
   20398:	0001883a 	nop
   2039c:	e13fff17 	ldw	r4,-4(fp)
   203a0:	00205800 	call	20580 <_ZN6BTUart10read_readyEv>
   203a4:	1005003a 	cmpeq	r2,r2,zero
   203a8:	10803fcc 	andi	r2,r2,255
   203ac:	103ffb1e 	bne	r2,zero,2039c <__alt_data_end+0xf402039c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
   203b0:	e0bfff17 	ldw	r2,-4(fp)
   203b4:	10c00117 	ldw	r3,4(r2)
   203b8:	e0bffe44 	addi	r2,fp,-7
   203bc:	1809883a 	mov	r4,r3
   203c0:	e17ffe04 	addi	r5,fp,-8
   203c4:	100d883a 	mov	r6,r2
   203c8:	002765c0 	call	2765c <alt_up_rs232_read_data>

    return (unsigned char) buffer;
   203cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   203d0:	e037883a 	mov	sp,fp
   203d4:	dfc00117 	ldw	ra,4(sp)
   203d8:	df000017 	ldw	fp,0(sp)
   203dc:	dec00204 	addi	sp,sp,8
   203e0:	f800283a 	ret

000203e4 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
   203e4:	defffb04 	addi	sp,sp,-20
   203e8:	dfc00415 	stw	ra,16(sp)
   203ec:	df000315 	stw	fp,12(sp)
   203f0:	df000304 	addi	fp,sp,12
   203f4:	e13ffe15 	stw	r4,-8(fp)
   203f8:	2805883a 	mov	r2,r5
   203fc:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
   20400:	e0bffe17 	ldw	r2,-8(fp)
   20404:	10800117 	ldw	r2,4(r2)
   20408:	1009883a 	mov	r4,r2
   2040c:	00275000 	call	27500 <alt_up_rs232_disable_read_interrupt>

    int result = 0;
   20410:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
   20414:	e0bffe17 	ldw	r2,-8(fp)
   20418:	10800117 	ldw	r2,4(r2)
   2041c:	1009883a 	mov	r4,r2
   20420:	002759c0 	call	2759c <alt_up_rs232_get_available_space_in_write_FIFO>
   20424:	1007883a 	mov	r3,r2
   20428:	e0bffe17 	ldw	r2,-8(fp)
   2042c:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
   20430:	e0bffe17 	ldw	r2,-8(fp)
   20434:	10800217 	ldw	r2,8(r2)
   20438:	10802030 	cmpltui	r2,r2,128
   2043c:	10000d1e 	bne	r2,zero,20474 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
   20440:	e0bffe17 	ldw	r2,-8(fp)
   20444:	10c00117 	ldw	r3,4(r2)
   20448:	e0bfff03 	ldbu	r2,-4(fp)
   2044c:	1809883a 	mov	r4,r3
   20450:	100b883a 	mov	r5,r2
   20454:	002761c0 	call	2761c <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
   20458:	e0bfff03 	ldbu	r2,-4(fp)
   2045c:	01020034 	movhi	r4,2048
   20460:	21000004 	addi	r4,r4,0
   20464:	100b883a 	mov	r5,r2
   20468:	00263580 	call	26358 <alt_printf>
        result = 1;
   2046c:	00800044 	movi	r2,1
   20470:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20474:	e0bffe17 	ldw	r2,-8(fp)
   20478:	10800117 	ldw	r2,4(r2)
   2047c:	1009883a 	mov	r4,r2
   20480:	00274a80 	call	274a8 <alt_up_rs232_enable_read_interrupt>
    return result;
   20484:	e0bffd17 	ldw	r2,-12(fp)
}
   20488:	e037883a 	mov	sp,fp
   2048c:	dfc00117 	ldw	ra,4(sp)
   20490:	df000017 	ldw	fp,0(sp)
   20494:	dec00204 	addi	sp,sp,8
   20498:	f800283a 	ret

0002049c <_ZN6BTUart6read_mEPhi>:


void BTUart::read_m(alt_u8 *buffer, int length)
{
   2049c:	defff904 	addi	sp,sp,-28
   204a0:	dfc00615 	stw	ra,24(sp)
   204a4:	df000515 	stw	fp,20(sp)
   204a8:	dc000415 	stw	r16,16(sp)
   204ac:	df000504 	addi	fp,sp,20
   204b0:	e13ffc15 	stw	r4,-16(fp)
   204b4:	e17ffd15 	stw	r5,-12(fp)
   204b8:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
   204bc:	e03ffb15 	stw	zero,-20(fp)
   204c0:	00000906 	br	204e8 <_ZN6BTUart6read_mEPhi+0x4c>
		buffer[count] = read_s();
   204c4:	e0bffb17 	ldw	r2,-20(fp)
   204c8:	e0fffd17 	ldw	r3,-12(fp)
   204cc:	18a1883a 	add	r16,r3,r2
   204d0:	e13ffc17 	ldw	r4,-16(fp)
   204d4:	00203840 	call	20384 <_ZN6BTUart6read_sEv>
   204d8:	80800005 	stb	r2,0(r16)

void BTUart::read_m(alt_u8 *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
   204dc:	e0bffb17 	ldw	r2,-20(fp)
   204e0:	10800044 	addi	r2,r2,1
   204e4:	e0bffb15 	stw	r2,-20(fp)
   204e8:	e0fffb17 	ldw	r3,-20(fp)
   204ec:	e0bffe17 	ldw	r2,-8(fp)
   204f0:	18bff416 	blt	r3,r2,204c4 <__alt_data_end+0xf40204c4>
		buffer[count] = read_s();
	}
}
   204f4:	e6ffff04 	addi	sp,fp,-4
   204f8:	dfc00217 	ldw	ra,8(sp)
   204fc:	df000117 	ldw	fp,4(sp)
   20500:	dc000017 	ldw	r16,0(sp)
   20504:	dec00304 	addi	sp,sp,12
   20508:	f800283a 	ret

0002050c <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
   2050c:	defffa04 	addi	sp,sp,-24
   20510:	dfc00515 	stw	ra,20(sp)
   20514:	df000415 	stw	fp,16(sp)
   20518:	df000404 	addi	fp,sp,16
   2051c:	e13ffd15 	stw	r4,-12(fp)
   20520:	e17ffe15 	stw	r5,-8(fp)
   20524:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
   20528:	e03ffc15 	stw	zero,-16(fp)
   2052c:	00000b06 	br	2055c <_ZN6BTUart7write_mEPci+0x50>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
   20530:	e0bffc17 	ldw	r2,-16(fp)
   20534:	e0fffe17 	ldw	r3,-8(fp)
   20538:	1885883a 	add	r2,r3,r2
   2053c:	10800003 	ldbu	r2,0(r2)
   20540:	10803fcc 	andi	r2,r2,255
   20544:	e13ffd17 	ldw	r4,-12(fp)
   20548:	100b883a 	mov	r5,r2
   2054c:	00203e40 	call	203e4 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
   20550:	e0bffc17 	ldw	r2,-16(fp)
   20554:	10800044 	addi	r2,r2,1
   20558:	e0bffc15 	stw	r2,-16(fp)
   2055c:	e0fffc17 	ldw	r3,-16(fp)
   20560:	e0bfff17 	ldw	r2,-4(fp)
   20564:	18bff216 	blt	r3,r2,20530 <__alt_data_end+0xf4020530>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
   20568:	e0bffc17 	ldw	r2,-16(fp)
}
   2056c:	e037883a 	mov	sp,fp
   20570:	dfc00117 	ldw	ra,4(sp)
   20574:	df000017 	ldw	fp,0(sp)
   20578:	dec00204 	addi	sp,sp,8
   2057c:	f800283a 	ret

00020580 <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
   20580:	defffc04 	addi	sp,sp,-16
   20584:	dfc00315 	stw	ra,12(sp)
   20588:	df000215 	stw	fp,8(sp)
   2058c:	df000204 	addi	fp,sp,8
   20590:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
   20594:	e0bfff17 	ldw	r2,-4(fp)
   20598:	10800117 	ldw	r2,4(r2)
   2059c:	1009883a 	mov	r4,r2
   205a0:	002755c0 	call	2755c <alt_up_rs232_get_used_space_in_read_FIFO>
   205a4:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
   205a8:	e0bffe0b 	ldhu	r2,-8(fp)
   205ac:	1004c03a 	cmpne	r2,r2,zero
   205b0:	10803fcc 	andi	r2,r2,255
}
   205b4:	e037883a 	mov	sp,fp
   205b8:	dfc00117 	ldw	ra,4(sp)
   205bc:	df000017 	ldw	fp,0(sp)
   205c0:	dec00204 	addi	sp,sp,8
   205c4:	f800283a 	ret

000205c8 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
   205c8:	defffd04 	addi	sp,sp,-12
   205cc:	dfc00215 	stw	ra,8(sp)
   205d0:	df000115 	stw	fp,4(sp)
   205d4:	df000104 	addi	fp,sp,4
   205d8:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
   205dc:	00000206 	br	205e8 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
   205e0:	e13fff17 	ldw	r4,-4(fp)
   205e4:	00203840 	call	20384 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
   205e8:	e13fff17 	ldw	r4,-4(fp)
   205ec:	00205800 	call	20580 <_ZN6BTUart10read_readyEv>
   205f0:	1004c03a 	cmpne	r2,r2,zero
   205f4:	10803fcc 	andi	r2,r2,255
   205f8:	103ff91e 	bne	r2,zero,205e0 <__alt_data_end+0xf40205e0>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
   205fc:	0001883a 	nop
   20600:	e037883a 	mov	sp,fp
   20604:	dfc00117 	ldw	ra,4(sp)
   20608:	df000017 	ldw	fp,0(sp)
   2060c:	dec00204 	addi	sp,sp,8
   20610:	f800283a 	ret

00020614 <_Z7bt_taskv>:
#include "../../src/terasic_includes.h"
#include "../../src/tasks.h"


int bt_task()
{
   20614:	deffe304 	addi	sp,sp,-116
   20618:	dfc01c15 	stw	ra,112(sp)
   2061c:	df001b15 	stw	fp,108(sp)
   20620:	ddc01a15 	stw	r23,104(sp)
   20624:	dd801915 	stw	r22,100(sp)
   20628:	dd401815 	stw	r21,96(sp)
   2062c:	dd001715 	stw	r20,92(sp)
   20630:	dcc01615 	stw	r19,88(sp)
   20634:	dc801515 	stw	r18,84(sp)
   20638:	dc401415 	stw	r17,80(sp)
   2063c:	dc001315 	stw	r16,76(sp)
   20640:	df001b04 	addi	fp,sp,108
   20644:	008000b4 	movhi	r2,2
   20648:	10840a04 	addi	r2,r2,4136
   2064c:	e0bff015 	stw	r2,-64(fp)
   20650:	008000f4 	movhi	r2,3
   20654:	10a25104 	addi	r2,r2,-30396
   20658:	e0bff115 	stw	r2,-60(fp)
   2065c:	e0bff204 	addi	r2,fp,-56
   20660:	e0ffe504 	addi	r3,fp,-108
   20664:	10c00015 	stw	r3,0(r2)
   20668:	00c000b4 	movhi	r3,2
   2066c:	18c1cb04 	addi	r3,r3,1836
   20670:	10c00115 	stw	r3,4(r2)
   20674:	16c00215 	stw	sp,8(r2)
   20678:	e0bfea04 	addi	r2,fp,-88
   2067c:	1009883a 	mov	r4,r2
   20680:	00226500 	call	22650 <_Unwind_SjLj_Register>
  BTUart BT_UART;
   20684:	e0ffe704 	addi	r3,fp,-100
   20688:	00bfffc4 	movi	r2,-1
   2068c:	e0bfeb15 	stw	r2,-84(fp)
   20690:	1809883a 	mov	r4,r3
   20694:	002026c0 	call	2026c <_ZN6BTUartC1Ev>
  char c;

  int init_success = BT_UART.open(BT_RS232_UART_NAME);
   20698:	e0bfe704 	addi	r2,fp,-100
   2069c:	1009883a 	mov	r4,r2
   206a0:	01420034 	movhi	r5,2048
   206a4:	00800044 	movi	r2,1
   206a8:	e0bfeb15 	stw	r2,-84(fp)
   206ac:	29400a04 	addi	r5,r5,40
   206b0:	002031c0 	call	2031c <_ZN6BTUart4openEPKc>
   206b4:	e0bfe515 	stw	r2,-108(fp)
  BT_UART.flush();
   206b8:	e0bfe704 	addi	r2,fp,-100
   206bc:	1009883a 	mov	r4,r2
   206c0:	00205c80 	call	205c8 <_ZN6BTUart5flushEv>

  if (init_success)
   206c4:	e0bfe517 	ldw	r2,-108(fp)
   206c8:	10000326 	beq	r2,zero,206d8 <_Z7bt_taskv+0xc4>
    printf("INIT SUCCESS: RS232 UART port.\n");
   206cc:	01020034 	movhi	r4,2048
   206d0:	21000f04 	addi	r4,r4,60
   206d4:	002334c0 	call	2334c <puts>


  printf("START READING FROM UART FIFO ...\n");
   206d8:	01020034 	movhi	r4,2048
   206dc:	00800044 	movi	r2,1
   206e0:	e0bfeb15 	stw	r2,-84(fp)
   206e4:	21001704 	addi	r4,r4,92
   206e8:	002334c0 	call	2334c <puts>

  while (1) {
    if (BT_UART.read_ready()) {
   206ec:	e0ffe704 	addi	r3,fp,-100
   206f0:	00800044 	movi	r2,1
   206f4:	e0bfeb15 	stw	r2,-84(fp)
   206f8:	1809883a 	mov	r4,r3
   206fc:	00205800 	call	20580 <_ZN6BTUart10read_readyEv>
   20700:	1004c03a 	cmpne	r2,r2,zero
   20704:	10803fcc 	andi	r2,r2,255
   20708:	103ff826 	beq	r2,zero,206ec <__alt_data_end+0xf40206ec>
      c = BT_UART.read_s();
   2070c:	e0bfe704 	addi	r2,fp,-100
   20710:	1009883a 	mov	r4,r2
   20714:	00203840 	call	20384 <_ZN6BTUart6read_sEv>
   20718:	e0bfe605 	stb	r2,-104(fp)
      printf("%c", c);
   2071c:	e0bfe607 	ldb	r2,-104(fp)
   20720:	1009883a 	mov	r4,r2
   20724:	002327c0 	call	2327c <putchar>
   20728:	003ff006 	br	206ec <__alt_data_end+0xf40206ec>
   2072c:	e7001b04 	addi	fp,fp,108
   20730:	e0bfec17 	ldw	r2,-80(fp)
   20734:	e0bff715 	stw	r2,-36(fp)
    }
  }

  return 0;
   20738:	e0bfe704 	addi	r2,fp,-100
   2073c:	e03feb15 	stw	zero,-84(fp)
   20740:	1009883a 	mov	r4,r2
   20744:	002029c0 	call	2029c <_ZN6BTUartD1Ev>
   20748:	e0fff717 	ldw	r3,-36(fp)
   2074c:	00bfffc4 	movi	r2,-1
   20750:	e0bfeb15 	stw	r2,-84(fp)
   20754:	1809883a 	mov	r4,r3
   20758:	002284c0 	call	2284c <_Unwind_SjLj_Resume>

0002075c <main>:
#include <stdio.h>
#include "../../src/terasic_includes.h"
#include "../../src/tasks.h"

int main()
{
   2075c:	defffe04 	addi	sp,sp,-8
   20760:	dfc00115 	stw	ra,4(sp)
   20764:	df000015 	stw	fp,0(sp)
   20768:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION\n");
   2076c:	01020034 	movhi	r4,2048
   20770:	21002004 	addi	r4,r4,128
   20774:	002334c0 	call	2334c <puts>
  printf("===========================================\n\n");
   20778:	01020034 	movhi	r4,2048
   2077c:	21002804 	addi	r4,r4,160
   20780:	002334c0 	call	2334c <puts>

  bt_task();
   20784:	00206140 	call	20614 <_Z7bt_taskv>

  return 0;
   20788:	0005883a 	mov	r2,zero
}
   2078c:	e037883a 	mov	sp,fp
   20790:	dfc00117 	ldw	ra,4(sp)
   20794:	df000017 	ldw	fp,0(sp)
   20798:	dec00204 	addi	sp,sp,8
   2079c:	f800283a 	ret

000207a0 <_ZL12read_sleb128PKhPl>:
   207a0:	0011883a 	mov	r8,zero
   207a4:	000d883a 	mov	r6,zero
   207a8:	21c00003 	ldbu	r7,0(r4)
   207ac:	20800044 	addi	r2,r4,1
   207b0:	1009883a 	mov	r4,r2
   207b4:	38c01fcc 	andi	r3,r7,127
   207b8:	1986983a 	sll	r3,r3,r6
   207bc:	3a403fcc 	andi	r9,r7,255
   207c0:	4a40201c 	xori	r9,r9,128
   207c4:	4a7fe004 	addi	r9,r9,-128
   207c8:	40d0b03a 	or	r8,r8,r3
   207cc:	318001c4 	addi	r6,r6,7
   207d0:	483ff516 	blt	r9,zero,207a8 <__alt_data_end+0xf40207a8>
   207d4:	00c007c4 	movi	r3,31
   207d8:	19800536 	bltu	r3,r6,207f0 <_ZL12read_sleb128PKhPl+0x50>
   207dc:	39c0100c 	andi	r7,r7,64
   207e0:	38000326 	beq	r7,zero,207f0 <_ZL12read_sleb128PKhPl+0x50>
   207e4:	00ffffc4 	movi	r3,-1
   207e8:	198c983a 	sll	r6,r3,r6
   207ec:	3210b03a 	or	r8,r6,r8
   207f0:	2a000015 	stw	r8,0(r5)
   207f4:	f800283a 	ret

000207f8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   207f8:	28800017 	ldw	r2,0(r5)
   207fc:	30c00017 	ldw	r3,0(r6)
   20800:	defffb04 	addi	sp,sp,-20
   20804:	10800217 	ldw	r2,8(r2)
   20808:	dc400315 	stw	r17,12(sp)
   2080c:	dc000215 	stw	r16,8(sp)
   20810:	d9400115 	stw	r5,4(sp)
   20814:	dfc00415 	stw	ra,16(sp)
   20818:	2021883a 	mov	r16,r4
   2081c:	d8c00015 	stw	r3,0(sp)
   20820:	2809883a 	mov	r4,r5
   20824:	3023883a 	mov	r17,r6
   20828:	103ee83a 	callr	r2
   2082c:	10803fcc 	andi	r2,r2,255
   20830:	d9400117 	ldw	r5,4(sp)
   20834:	10000326 	beq	r2,zero,20844 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   20838:	d8800017 	ldw	r2,0(sp)
   2083c:	10800017 	ldw	r2,0(r2)
   20840:	d8800015 	stw	r2,0(sp)
   20844:	80800017 	ldw	r2,0(r16)
   20848:	8009883a 	mov	r4,r16
   2084c:	d80d883a 	mov	r6,sp
   20850:	10800417 	ldw	r2,16(r2)
   20854:	01c00044 	movi	r7,1
   20858:	103ee83a 	callr	r2
   2085c:	10c03fcc 	andi	r3,r2,255
   20860:	18000226 	beq	r3,zero,2086c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
   20864:	d8c00017 	ldw	r3,0(sp)
   20868:	88c00015 	stw	r3,0(r17)
   2086c:	dfc00417 	ldw	ra,16(sp)
   20870:	dc400317 	ldw	r17,12(sp)
   20874:	dc000217 	ldw	r16,8(sp)
   20878:	dec00504 	addi	sp,sp,20
   2087c:	f800283a 	ret

00020880 <_ZL21size_of_encoded_valueh>:
   20880:	deffff04 	addi	sp,sp,-4
   20884:	dfc00015 	stw	ra,0(sp)
   20888:	00803fc4 	movi	r2,255
   2088c:	20802026 	beq	r4,r2,20910 <_ZL21size_of_encoded_valueh+0x90>
   20890:	210001cc 	andi	r4,r4,7
   20894:	00800144 	movi	r2,5
   20898:	11001c36 	bltu	r2,r4,2090c <_ZL21size_of_encoded_valueh+0x8c>
   2089c:	200890ba 	slli	r4,r4,2
   208a0:	008000b4 	movhi	r2,2
   208a4:	10822d04 	addi	r2,r2,2228
   208a8:	2089883a 	add	r4,r4,r2
   208ac:	20800017 	ldw	r2,0(r4)
   208b0:	1000683a 	jmp	r2
   208b4:	000208cc 	andi	zero,zero,2083
   208b8:	0002090c 	andi	zero,zero,2084
   208bc:	000208dc 	xori	zero,zero,2083
   208c0:	000208cc 	andi	zero,zero,2083
   208c4:	000208fc 	xorhi	zero,zero,2083
   208c8:	000208ec 	andhi	zero,zero,2083
   208cc:	00800104 	movi	r2,4
   208d0:	dfc00017 	ldw	ra,0(sp)
   208d4:	dec00104 	addi	sp,sp,4
   208d8:	f800283a 	ret
   208dc:	00800084 	movi	r2,2
   208e0:	dfc00017 	ldw	ra,0(sp)
   208e4:	dec00104 	addi	sp,sp,4
   208e8:	f800283a 	ret
   208ec:	00800044 	movi	r2,1
   208f0:	dfc00017 	ldw	ra,0(sp)
   208f4:	dec00104 	addi	sp,sp,4
   208f8:	f800283a 	ret
   208fc:	00800204 	movi	r2,8
   20900:	dfc00017 	ldw	ra,0(sp)
   20904:	dec00104 	addi	sp,sp,4
   20908:	f800283a 	ret
   2090c:	00229680 	call	22968 <abort>
   20910:	0005883a 	mov	r2,zero
   20914:	dfc00017 	ldw	ra,0(sp)
   20918:	dec00104 	addi	sp,sp,4
   2091c:	f800283a 	ret

00020920 <_ZL28read_encoded_value_with_basehjPKhPj>:
   20920:	defffa04 	addi	sp,sp,-24
   20924:	dc000315 	stw	r16,12(sp)
   20928:	dfc00515 	stw	ra,20(sp)
   2092c:	dc400415 	stw	r17,16(sp)
   20930:	00801404 	movi	r2,80
   20934:	2021883a 	mov	r16,r4
   20938:	20807526 	beq	r4,r2,20b10 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
   2093c:	208003cc 	andi	r2,r4,15
   20940:	00c00304 	movi	r3,12
   20944:	18807136 	bltu	r3,r2,20b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
   20948:	100490ba 	slli	r2,r2,2
   2094c:	00c000b4 	movhi	r3,2
   20950:	18c25904 	addi	r3,r3,2404
   20954:	10c5883a 	add	r2,r2,r3
   20958:	10800017 	ldw	r2,0(r2)
   2095c:	2823883a 	mov	r17,r5
   20960:	1000683a 	jmp	r2
   20964:	00020a4c 	andi	zero,zero,2089
   20968:	00020a7c 	xorhi	zero,zero,2089
   2096c:	00020a34 	movhi	zero,2088
   20970:	00020998 	cmpnei	zero,zero,2086
   20974:	00020a04 	movi	zero,2088
   20978:	00020ab8 	rdprs	zero,zero,2090
   2097c:	00020b0c 	andi	zero,zero,2092
   20980:	00020b0c 	andi	zero,zero,2092
   20984:	00020b0c 	andi	zero,zero,2092
   20988:	00020ac4 	movi	zero,2091
   2098c:	00020ae8 	cmpgeui	zero,zero,2091
   20990:	00020998 	cmpnei	zero,zero,2086
   20994:	00020a04 	movi	zero,2088
   20998:	30800043 	ldbu	r2,1(r6)
   2099c:	30c00083 	ldbu	r3,2(r6)
   209a0:	310000c3 	ldbu	r4,3(r6)
   209a4:	32000003 	ldbu	r8,0(r6)
   209a8:	1004923a 	slli	r2,r2,8
   209ac:	1806943a 	slli	r3,r3,16
   209b0:	2008963a 	slli	r4,r4,24
   209b4:	1204b03a 	or	r2,r2,r8
   209b8:	1884b03a 	or	r2,r3,r2
   209bc:	2086b03a 	or	r3,r4,r2
   209c0:	30800104 	addi	r2,r6,4
   209c4:	18000926 	beq	r3,zero,209ec <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   209c8:	81401c0c 	andi	r5,r16,112
   209cc:	01000404 	movi	r4,16
   209d0:	29005526 	beq	r5,r4,20b28 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
   209d4:	84003fcc 	andi	r16,r16,255
   209d8:	8400201c 	xori	r16,r16,128
   209dc:	843fe004 	addi	r16,r16,-128
   209e0:	1c47883a 	add	r3,r3,r17
   209e4:	8000010e 	bge	r16,zero,209ec <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   209e8:	18c00017 	ldw	r3,0(r3)
   209ec:	38c00015 	stw	r3,0(r7)
   209f0:	dfc00517 	ldw	ra,20(sp)
   209f4:	dc400417 	ldw	r17,16(sp)
   209f8:	dc000317 	ldw	r16,12(sp)
   209fc:	dec00604 	addi	sp,sp,24
   20a00:	f800283a 	ret
   20a04:	30800043 	ldbu	r2,1(r6)
   20a08:	30c00083 	ldbu	r3,2(r6)
   20a0c:	310000c3 	ldbu	r4,3(r6)
   20a10:	32000003 	ldbu	r8,0(r6)
   20a14:	1004923a 	slli	r2,r2,8
   20a18:	1806943a 	slli	r3,r3,16
   20a1c:	2008963a 	slli	r4,r4,24
   20a20:	1204b03a 	or	r2,r2,r8
   20a24:	1884b03a 	or	r2,r3,r2
   20a28:	2086b03a 	or	r3,r4,r2
   20a2c:	30800204 	addi	r2,r6,8
   20a30:	003fe406 	br	209c4 <__alt_data_end+0xf40209c4>
   20a34:	30c00043 	ldbu	r3,1(r6)
   20a38:	32000003 	ldbu	r8,0(r6)
   20a3c:	30800084 	addi	r2,r6,2
   20a40:	1806923a 	slli	r3,r3,8
   20a44:	1a06b03a 	or	r3,r3,r8
   20a48:	003fde06 	br	209c4 <__alt_data_end+0xf40209c4>
   20a4c:	30800043 	ldbu	r2,1(r6)
   20a50:	30c00083 	ldbu	r3,2(r6)
   20a54:	314000c3 	ldbu	r5,3(r6)
   20a58:	31000003 	ldbu	r4,0(r6)
   20a5c:	1004923a 	slli	r2,r2,8
   20a60:	1806943a 	slli	r3,r3,16
   20a64:	280a963a 	slli	r5,r5,24
   20a68:	1104b03a 	or	r2,r2,r4
   20a6c:	1884b03a 	or	r2,r3,r2
   20a70:	2886b03a 	or	r3,r5,r2
   20a74:	30800104 	addi	r2,r6,4
   20a78:	003fd206 	br	209c4 <__alt_data_end+0xf40209c4>
   20a7c:	3013883a 	mov	r9,r6
   20a80:	0007883a 	mov	r3,zero
   20a84:	0011883a 	mov	r8,zero
   20a88:	49000003 	ldbu	r4,0(r9)
   20a8c:	48800044 	addi	r2,r9,1
   20a90:	1013883a 	mov	r9,r2
   20a94:	21401fcc 	andi	r5,r4,127
   20a98:	2a0a983a 	sll	r5,r5,r8
   20a9c:	21003fcc 	andi	r4,r4,255
   20aa0:	2100201c 	xori	r4,r4,128
   20aa4:	213fe004 	addi	r4,r4,-128
   20aa8:	1946b03a 	or	r3,r3,r5
   20aac:	420001c4 	addi	r8,r8,7
   20ab0:	203ff516 	blt	r4,zero,20a88 <__alt_data_end+0xf4020a88>
   20ab4:	003fc306 	br	209c4 <__alt_data_end+0xf40209c4>
   20ab8:	30c00003 	ldbu	r3,0(r6)
   20abc:	30800044 	addi	r2,r6,1
   20ac0:	003fc006 	br	209c4 <__alt_data_end+0xf40209c4>
   20ac4:	3009883a 	mov	r4,r6
   20ac8:	d80b883a 	mov	r5,sp
   20acc:	d9800115 	stw	r6,4(sp)
   20ad0:	d9c00215 	stw	r7,8(sp)
   20ad4:	00207a00 	call	207a0 <_ZL12read_sleb128PKhPl>
   20ad8:	d8c00017 	ldw	r3,0(sp)
   20adc:	d9800117 	ldw	r6,4(sp)
   20ae0:	d9c00217 	ldw	r7,8(sp)
   20ae4:	003fb706 	br	209c4 <__alt_data_end+0xf40209c4>
   20ae8:	30c00043 	ldbu	r3,1(r6)
   20aec:	32000003 	ldbu	r8,0(r6)
   20af0:	30800084 	addi	r2,r6,2
   20af4:	1806923a 	slli	r3,r3,8
   20af8:	1a06b03a 	or	r3,r3,r8
   20afc:	18ffffcc 	andi	r3,r3,65535
   20b00:	18e0001c 	xori	r3,r3,32768
   20b04:	18e00004 	addi	r3,r3,-32768
   20b08:	003fae06 	br	209c4 <__alt_data_end+0xf40209c4>
   20b0c:	00229680 	call	22968 <abort>
   20b10:	318000c4 	addi	r6,r6,3
   20b14:	00bfff04 	movi	r2,-4
   20b18:	3084703a 	and	r2,r6,r2
   20b1c:	10c00017 	ldw	r3,0(r2)
   20b20:	10800104 	addi	r2,r2,4
   20b24:	003fb106 	br	209ec <__alt_data_end+0xf40209ec>
   20b28:	3023883a 	mov	r17,r6
   20b2c:	003fa906 	br	209d4 <__alt_data_end+0xf40209d4>

00020b30 <_ZL15get_ttype_entryP16lsda_header_infom>:
   20b30:	defffc04 	addi	sp,sp,-16
   20b34:	dfc00315 	stw	ra,12(sp)
   20b38:	dc000215 	stw	r16,8(sp)
   20b3c:	2021883a 	mov	r16,r4
   20b40:	21000503 	ldbu	r4,20(r4)
   20b44:	d9400115 	stw	r5,4(sp)
   20b48:	00208800 	call	20880 <_ZL21size_of_encoded_valueh>
   20b4c:	d9400117 	ldw	r5,4(sp)
   20b50:	1009883a 	mov	r4,r2
   20b54:	00224200 	call	22420 <__mulsi3>
   20b58:	81800317 	ldw	r6,12(r16)
   20b5c:	81000503 	ldbu	r4,20(r16)
   20b60:	81400217 	ldw	r5,8(r16)
   20b64:	308dc83a 	sub	r6,r6,r2
   20b68:	d80f883a 	mov	r7,sp
   20b6c:	00209200 	call	20920 <_ZL28read_encoded_value_with_basehjPKhPj>
   20b70:	d8800017 	ldw	r2,0(sp)
   20b74:	dfc00317 	ldw	ra,12(sp)
   20b78:	dc000217 	ldw	r16,8(sp)
   20b7c:	dec00404 	addi	sp,sp,16
   20b80:	f800283a 	ret

00020b84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   20b84:	defffb04 	addi	sp,sp,-20
   20b88:	dc000115 	stw	r16,4(sp)
   20b8c:	24000317 	ldw	r16,12(r4)
   20b90:	01ce303a 	nor	r7,zero,r7
   20b94:	dc800315 	stw	r18,12(sp)
   20b98:	dc400215 	stw	r17,8(sp)
   20b9c:	dfc00415 	stw	ra,16(sp)
   20ba0:	2023883a 	mov	r17,r4
   20ba4:	2825883a 	mov	r18,r5
   20ba8:	d9800015 	stw	r6,0(sp)
   20bac:	81e1883a 	add	r16,r16,r7
   20bb0:	8009883a 	mov	r4,r16
   20bb4:	000b883a 	mov	r5,zero
   20bb8:	000d883a 	mov	r6,zero
   20bbc:	20800003 	ldbu	r2,0(r4)
   20bc0:	84000044 	addi	r16,r16,1
   20bc4:	8009883a 	mov	r4,r16
   20bc8:	10c01fcc 	andi	r3,r2,127
   20bcc:	1986983a 	sll	r3,r3,r6
   20bd0:	10803fcc 	andi	r2,r2,255
   20bd4:	1080201c 	xori	r2,r2,128
   20bd8:	10bfe004 	addi	r2,r2,-128
   20bdc:	28cab03a 	or	r5,r5,r3
   20be0:	318001c4 	addi	r6,r6,7
   20be4:	103ff516 	blt	r2,zero,20bbc <__alt_data_end+0xf4020bbc>
   20be8:	28000e26 	beq	r5,zero,20c24 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   20bec:	8809883a 	mov	r4,r17
   20bf0:	0020b300 	call	20b30 <_ZL15get_ttype_entryP16lsda_header_infom>
   20bf4:	1009883a 	mov	r4,r2
   20bf8:	900b883a 	mov	r5,r18
   20bfc:	d80d883a 	mov	r6,sp
   20c00:	00207f80 	call	207f8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   20c04:	10c03fcc 	andi	r3,r2,255
   20c08:	183fe926 	beq	r3,zero,20bb0 <__alt_data_end+0xf4020bb0>
   20c0c:	dfc00417 	ldw	ra,16(sp)
   20c10:	dc800317 	ldw	r18,12(sp)
   20c14:	dc400217 	ldw	r17,8(sp)
   20c18:	dc000117 	ldw	r16,4(sp)
   20c1c:	dec00504 	addi	sp,sp,20
   20c20:	f800283a 	ret
   20c24:	0005883a 	mov	r2,zero
   20c28:	003ff806 	br	20c0c <__alt_data_end+0xf4020c0c>

00020c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   20c2c:	deffff04 	addi	sp,sp,-4
   20c30:	dfc00015 	stw	ra,0(sp)
   20c34:	00803fc4 	movi	r2,255
   20c38:	20800e26 	beq	r4,r2,20c74 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20c3c:	20801c0c 	andi	r2,r4,112
   20c40:	00c00804 	movi	r3,32
   20c44:	10c01726 	beq	r2,r3,20ca4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
   20c48:	18800e2e 	bgeu	r3,r2,20c84 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
   20c4c:	00c01004 	movi	r3,64
   20c50:	10c01026 	beq	r2,r3,20c94 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   20c54:	00c01404 	movi	r3,80
   20c58:	10c00626 	beq	r2,r3,20c74 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20c5c:	00c00c04 	movi	r3,48
   20c60:	10c00b1e 	bne	r2,r3,20c90 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   20c64:	2809883a 	mov	r4,r5
   20c68:	dfc00017 	ldw	ra,0(sp)
   20c6c:	dec00104 	addi	sp,sp,4
   20c70:	00227281 	jmpi	22728 <_Unwind_GetDataRelBase>
   20c74:	0005883a 	mov	r2,zero
   20c78:	dfc00017 	ldw	ra,0(sp)
   20c7c:	dec00104 	addi	sp,sp,4
   20c80:	f800283a 	ret
   20c84:	103ffb26 	beq	r2,zero,20c74 <__alt_data_end+0xf4020c74>
   20c88:	00c00404 	movi	r3,16
   20c8c:	10fff926 	beq	r2,r3,20c74 <__alt_data_end+0xf4020c74>
   20c90:	00229680 	call	22968 <abort>
   20c94:	2809883a 	mov	r4,r5
   20c98:	dfc00017 	ldw	ra,0(sp)
   20c9c:	dec00104 	addi	sp,sp,4
   20ca0:	00227181 	jmpi	22718 <_Unwind_GetRegionStart>
   20ca4:	2809883a 	mov	r4,r5
   20ca8:	dfc00017 	ldw	ra,0(sp)
   20cac:	dec00104 	addi	sp,sp,4
   20cb0:	00227301 	jmpi	22730 <_Unwind_GetTextRelBase>

00020cb4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   20cb4:	defff104 	addi	sp,sp,-60
   20cb8:	dd800b15 	stw	r22,44(sp)
   20cbc:	382dd23a 	srai	r22,r7,8
   20cc0:	dd400a15 	stw	r21,40(sp)
   20cc4:	dd000915 	stw	r20,36(sp)
   20cc8:	dfc00e15 	stw	ra,56(sp)
   20ccc:	df000d15 	stw	fp,52(sp)
   20cd0:	ddc00c15 	stw	r23,48(sp)
   20cd4:	dcc00815 	stw	r19,32(sp)
   20cd8:	dc800715 	stw	r18,28(sp)
   20cdc:	dc400615 	stw	r17,24(sp)
   20ce0:	dc000515 	stw	r16,20(sp)
   20ce4:	d9c00315 	stw	r7,12(sp)
   20ce8:	d9400215 	stw	r5,8(sp)
   20cec:	2029883a 	mov	r20,r4
   20cf0:	dd400f17 	ldw	r21,60(sp)
   20cf4:	b000010e 	bge	r22,zero,20cfc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
   20cf8:	05adc83a 	sub	r22,zero,r22
   20cfc:	01000144 	movi	r4,5
   20d00:	000b883a 	mov	r5,zero
   20d04:	d9800415 	stw	r6,16(sp)
   20d08:	0020c2c0 	call	20c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20d0c:	d9800417 	ldw	r6,16(sp)
   20d10:	100b883a 	mov	r5,r2
   20d14:	d9c00104 	addi	r7,sp,4
   20d18:	01000144 	movi	r4,5
   20d1c:	00209200 	call	20920 <_ZL28read_encoded_value_with_basehjPKhPj>
   20d20:	1009883a 	mov	r4,r2
   20d24:	017ffe44 	movi	r5,-7
   20d28:	1021883a 	mov	r16,r2
   20d2c:	00224200 	call	22420 <__mulsi3>
   20d30:	1027883a 	mov	r19,r2
   20d34:	002f883a 	mov	r23,zero
   20d38:	84400003 	ldbu	r17,0(r16)
   20d3c:	8009883a 	mov	r4,r16
   20d40:	014001c4 	movi	r5,7
   20d44:	00224200 	call	22420 <__mulsi3>
   20d48:	88c01fcc 	andi	r3,r17,127
   20d4c:	14c5883a 	add	r2,r2,r19
   20d50:	1886983a 	sll	r3,r3,r2
   20d54:	8c403fcc 	andi	r17,r17,255
   20d58:	8c40201c 	xori	r17,r17,128
   20d5c:	8c7fe004 	addi	r17,r17,-128
   20d60:	84000044 	addi	r16,r16,1
   20d64:	b8eeb03a 	or	r23,r23,r3
   20d68:	883ff316 	blt	r17,zero,20d38 <__alt_data_end+0xf4020d38>
   20d6c:	85e1883a 	add	r16,r16,r23
   20d70:	8009883a 	mov	r4,r16
   20d74:	017ffe44 	movi	r5,-7
   20d78:	00224200 	call	22420 <__mulsi3>
   20d7c:	102f883a 	mov	r23,r2
   20d80:	8007883a 	mov	r3,r16
   20d84:	0025883a 	mov	r18,zero
   20d88:	1cc00003 	ldbu	r19,0(r3)
   20d8c:	1809883a 	mov	r4,r3
   20d90:	014001c4 	movi	r5,7
   20d94:	1c400044 	addi	r17,r3,1
   20d98:	00224200 	call	22420 <__mulsi3>
   20d9c:	98c01fcc 	andi	r3,r19,127
   20da0:	15c5883a 	add	r2,r2,r23
   20da4:	1884983a 	sll	r2,r3,r2
   20da8:	9cc03fcc 	andi	r19,r19,255
   20dac:	9cc0201c 	xori	r19,r19,128
   20db0:	9cffe004 	addi	r19,r19,-128
   20db4:	8807883a 	mov	r3,r17
   20db8:	90a4b03a 	or	r18,r18,r2
   20dbc:	983ff216 	blt	r19,zero,20d88 <__alt_data_end+0xf4020d88>
   20dc0:	b7003fcc 	andi	fp,r22,255
   20dc4:	e73fffc4 	addi	fp,fp,-1
   20dc8:	8f39883a 	add	fp,r17,fp
   20dcc:	840000c4 	addi	r16,r16,3
   20dd0:	848d883a 	add	r6,r16,r18
   20dd4:	e009883a 	mov	r4,fp
   20dd8:	017ffe44 	movi	r5,-7
   20ddc:	04ffff04 	movi	r19,-4
   20de0:	34e6703a 	and	r19,r6,r19
   20de4:	00224200 	call	22420 <__mulsi3>
   20de8:	002f883a 	mov	r23,zero
   20dec:	102d883a 	mov	r22,r2
   20df0:	e4400003 	ldbu	r17,0(fp)
   20df4:	e009883a 	mov	r4,fp
   20df8:	014001c4 	movi	r5,7
   20dfc:	00224200 	call	22420 <__mulsi3>
   20e00:	88c01fcc 	andi	r3,r17,127
   20e04:	1585883a 	add	r2,r2,r22
   20e08:	1886983a 	sll	r3,r3,r2
   20e0c:	8c403fcc 	andi	r17,r17,255
   20e10:	8c40201c 	xori	r17,r17,128
   20e14:	e4000044 	addi	r16,fp,1
   20e18:	8c7fe004 	addi	r17,r17,-128
   20e1c:	b8eeb03a 	or	r23,r23,r3
   20e20:	8039883a 	mov	fp,r16
   20e24:	883ff216 	blt	r17,zero,20df0 <__alt_data_end+0xf4020df0>
   20e28:	d8800317 	ldw	r2,12(sp)
   20e2c:	14803fcc 	andi	r18,r2,255
   20e30:	b8002326 	beq	r23,zero,20ec0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
   20e34:	9009883a 	mov	r4,r18
   20e38:	00208800 	call	20880 <_ZL21size_of_encoded_valueh>
   20e3c:	1009883a 	mov	r4,r2
   20e40:	b97fffc4 	addi	r5,r23,-1
   20e44:	00224200 	call	22420 <__mulsi3>
   20e48:	9009883a 	mov	r4,r18
   20e4c:	a80b883a 	mov	r5,r21
   20e50:	14cd883a 	add	r6,r2,r19
   20e54:	d80f883a 	mov	r7,sp
   20e58:	00209200 	call	20920 <_ZL28read_encoded_value_with_basehjPKhPj>
   20e5c:	d9000017 	ldw	r4,0(sp)
   20e60:	a00b883a 	mov	r5,r20
   20e64:	d9800204 	addi	r6,sp,8
   20e68:	00207f80 	call	207f8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   20e6c:	10c03fcc 	andi	r3,r2,255
   20e70:	1800141e 	bne	r3,zero,20ec4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
   20e74:	8009883a 	mov	r4,r16
   20e78:	017ffe44 	movi	r5,-7
   20e7c:	00224200 	call	22420 <__mulsi3>
   20e80:	102d883a 	mov	r22,r2
   20e84:	002f883a 	mov	r23,zero
   20e88:	84400003 	ldbu	r17,0(r16)
   20e8c:	8009883a 	mov	r4,r16
   20e90:	014001c4 	movi	r5,7
   20e94:	00224200 	call	22420 <__mulsi3>
   20e98:	88c01fcc 	andi	r3,r17,127
   20e9c:	1585883a 	add	r2,r2,r22
   20ea0:	1886983a 	sll	r3,r3,r2
   20ea4:	8c403fcc 	andi	r17,r17,255
   20ea8:	8c40201c 	xori	r17,r17,128
   20eac:	8c7fe004 	addi	r17,r17,-128
   20eb0:	84000044 	addi	r16,r16,1
   20eb4:	b8eeb03a 	or	r23,r23,r3
   20eb8:	883ff316 	blt	r17,zero,20e88 <__alt_data_end+0xf4020e88>
   20ebc:	003fdc06 	br	20e30 <__alt_data_end+0xf4020e30>
   20ec0:	0005883a 	mov	r2,zero
   20ec4:	dfc00e17 	ldw	ra,56(sp)
   20ec8:	df000d17 	ldw	fp,52(sp)
   20ecc:	ddc00c17 	ldw	r23,48(sp)
   20ed0:	dd800b17 	ldw	r22,44(sp)
   20ed4:	dd400a17 	ldw	r21,40(sp)
   20ed8:	dd000917 	ldw	r20,36(sp)
   20edc:	dcc00817 	ldw	r19,32(sp)
   20ee0:	dc800717 	ldw	r18,28(sp)
   20ee4:	dc400617 	ldw	r17,24(sp)
   20ee8:	dc000517 	ldw	r16,20(sp)
   20eec:	dec00f04 	addi	sp,sp,60
   20ef0:	f800283a 	ret

00020ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   20ef4:	defffb04 	addi	sp,sp,-20
   20ef8:	dcc00315 	stw	r19,12(sp)
   20efc:	dc400115 	stw	r17,4(sp)
   20f00:	dc000015 	stw	r16,0(sp)
   20f04:	dfc00415 	stw	ra,16(sp)
   20f08:	dc800215 	stw	r18,8(sp)
   20f0c:	2027883a 	mov	r19,r4
   20f10:	2821883a 	mov	r16,r5
   20f14:	3023883a 	mov	r17,r6
   20f18:	20003f26 	beq	r4,zero,21018 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   20f1c:	00227180 	call	22718 <_Unwind_GetRegionStart>
   20f20:	88800015 	stw	r2,0(r17)
   20f24:	84800003 	ldbu	r18,0(r16)
   20f28:	00c03fc4 	movi	r3,255
   20f2c:	84000044 	addi	r16,r16,1
   20f30:	90c03726 	beq	r18,r3,21010 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   20f34:	9009883a 	mov	r4,r18
   20f38:	980b883a 	mov	r5,r19
   20f3c:	0020c2c0 	call	20c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20f40:	800d883a 	mov	r6,r16
   20f44:	9009883a 	mov	r4,r18
   20f48:	100b883a 	mov	r5,r2
   20f4c:	89c00104 	addi	r7,r17,4
   20f50:	00209200 	call	20920 <_ZL28read_encoded_value_with_basehjPKhPj>
   20f54:	1021883a 	mov	r16,r2
   20f58:	80c00003 	ldbu	r3,0(r16)
   20f5c:	01003fc4 	movi	r4,255
   20f60:	80800044 	addi	r2,r16,1
   20f64:	88c00505 	stb	r3,20(r17)
   20f68:	18c03fcc 	andi	r3,r3,255
   20f6c:	19002c26 	beq	r3,r4,21020 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   20f70:	100d883a 	mov	r6,r2
   20f74:	000f883a 	mov	r7,zero
   20f78:	000b883a 	mov	r5,zero
   20f7c:	30c00003 	ldbu	r3,0(r6)
   20f80:	10800044 	addi	r2,r2,1
   20f84:	100d883a 	mov	r6,r2
   20f88:	19001fcc 	andi	r4,r3,127
   20f8c:	2148983a 	sll	r4,r4,r5
   20f90:	18c03fcc 	andi	r3,r3,255
   20f94:	18c0201c 	xori	r3,r3,128
   20f98:	18ffe004 	addi	r3,r3,-128
   20f9c:	390eb03a 	or	r7,r7,r4
   20fa0:	294001c4 	addi	r5,r5,7
   20fa4:	183ff516 	blt	r3,zero,20f7c <__alt_data_end+0xf4020f7c>
   20fa8:	11cf883a 	add	r7,r2,r7
   20fac:	89c00315 	stw	r7,12(r17)
   20fb0:	10c00003 	ldbu	r3,0(r2)
   20fb4:	000f883a 	mov	r7,zero
   20fb8:	10800044 	addi	r2,r2,1
   20fbc:	88c00545 	stb	r3,21(r17)
   20fc0:	000b883a 	mov	r5,zero
   20fc4:	10c00003 	ldbu	r3,0(r2)
   20fc8:	10800044 	addi	r2,r2,1
   20fcc:	19001fcc 	andi	r4,r3,127
   20fd0:	2148983a 	sll	r4,r4,r5
   20fd4:	18c03fcc 	andi	r3,r3,255
   20fd8:	18c0201c 	xori	r3,r3,128
   20fdc:	18ffe004 	addi	r3,r3,-128
   20fe0:	390eb03a 	or	r7,r7,r4
   20fe4:	294001c4 	addi	r5,r5,7
   20fe8:	183ff616 	blt	r3,zero,20fc4 <__alt_data_end+0xf4020fc4>
   20fec:	11cf883a 	add	r7,r2,r7
   20ff0:	89c00415 	stw	r7,16(r17)
   20ff4:	dfc00417 	ldw	ra,16(sp)
   20ff8:	dcc00317 	ldw	r19,12(sp)
   20ffc:	dc800217 	ldw	r18,8(sp)
   21000:	dc400117 	ldw	r17,4(sp)
   21004:	dc000017 	ldw	r16,0(sp)
   21008:	dec00504 	addi	sp,sp,20
   2100c:	f800283a 	ret
   21010:	88800115 	stw	r2,4(r17)
   21014:	003fd006 	br	20f58 <__alt_data_end+0xf4020f58>
   21018:	0005883a 	mov	r2,zero
   2101c:	003fc006 	br	20f20 <__alt_data_end+0xf4020f20>
   21020:	88000315 	stw	zero,12(r17)
   21024:	003fe206 	br	20fb0 <__alt_data_end+0xf4020fb0>

00021028 <__gxx_personality_sj0>:
   21028:	008000b4 	movhi	r2,2
   2102c:	deffde04 	addi	sp,sp,-136
   21030:	10840a04 	addi	r2,r2,4136
   21034:	d8801015 	stw	r2,64(sp)
   21038:	008000f4 	movhi	r2,3
   2103c:	10a25304 	addi	r2,r2,-30388
   21040:	d8801115 	stw	r2,68(sp)
   21044:	008000b4 	movhi	r2,2
   21048:	10854504 	addi	r2,r2,5396
   2104c:	d9001715 	stw	r4,92(sp)
   21050:	d9000a04 	addi	r4,sp,40
   21054:	d8801315 	stw	r2,76(sp)
   21058:	dfc02115 	stw	ra,132(sp)
   2105c:	df002015 	stw	fp,128(sp)
   21060:	dec01215 	stw	sp,72(sp)
   21064:	dec01415 	stw	sp,80(sp)
   21068:	d9401a15 	stw	r5,104(sp)
   2106c:	d9801815 	stw	r6,96(sp)
   21070:	d9c01915 	stw	r7,100(sp)
   21074:	00226500 	call	22650 <_Unwind_SjLj_Register>
   21078:	d8c01717 	ldw	r3,92(sp)
   2107c:	d8000915 	stw	zero,36(sp)
   21080:	d8000815 	stw	zero,32(sp)
   21084:	00800044 	movi	r2,1
   21088:	18800926 	beq	r3,r2,210b0 <__gxx_personality_sj0+0x88>
   2108c:	014000c4 	movi	r5,3
   21090:	d9401715 	stw	r5,92(sp)
   21094:	d9000a04 	addi	r4,sp,40
   21098:	00226680 	call	22668 <_Unwind_SjLj_Unregister>
   2109c:	d8801717 	ldw	r2,92(sp)
   210a0:	dfc02117 	ldw	ra,132(sp)
   210a4:	df002017 	ldw	fp,128(sp)
   210a8:	dec02204 	addi	sp,sp,136
   210ac:	f800283a 	ret
   210b0:	d9401817 	ldw	r5,96(sp)
   210b4:	012f3574 	movhi	r4,48341
   210b8:	21354004 	addi	r4,r4,-11008
   210bc:	2909883a 	add	r4,r5,r4
   210c0:	2145803a 	cmpltu	r2,r4,r5
   210c4:	d9401917 	ldw	r5,100(sp)
   210c8:	d8c01b05 	stb	r3,108(sp)
   210cc:	00ee2cb4 	movhi	r3,47282
   210d0:	18eaaf04 	addi	r3,r3,-21828
   210d4:	28c7883a 	add	r3,r5,r3
   210d8:	10c5883a 	add	r2,r2,r3
   210dc:	10003526 	beq	r2,zero,211b4 <__gxx_personality_sj0+0x18c>
   210e0:	d8c01a17 	ldw	r3,104(sp)
   210e4:	00800184 	movi	r2,6
   210e8:	18803826 	beq	r3,r2,211cc <__gxx_personality_sj0+0x1a4>
   210ec:	d9002317 	ldw	r4,140(sp)
   210f0:	00ffffc4 	movi	r3,-1
   210f4:	d8c00b15 	stw	r3,44(sp)
   210f8:	002270c0 	call	2270c <_Unwind_GetLanguageSpecificData>
   210fc:	d8801915 	stw	r2,100(sp)
   21100:	1000a326 	beq	r2,zero,21390 <__gxx_personality_sj0+0x368>
   21104:	d9002317 	ldw	r4,140(sp)
   21108:	d9401917 	ldw	r5,100(sp)
   2110c:	d80d883a 	mov	r6,sp
   21110:	00bfffc4 	movi	r2,-1
   21114:	d8800b15 	stw	r2,44(sp)
   21118:	0020ef40 	call	20ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   2111c:	d9000503 	ldbu	r4,20(sp)
   21120:	d9402317 	ldw	r5,140(sp)
   21124:	d8801715 	stw	r2,92(sp)
   21128:	0020c2c0 	call	20c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   2112c:	d9002317 	ldw	r4,140(sp)
   21130:	d9400804 	addi	r5,sp,32
   21134:	d8800215 	stw	r2,8(sp)
   21138:	00226dc0 	call	226dc <_Unwind_GetIPInfo>
   2113c:	d8c00817 	ldw	r3,32(sp)
   21140:	1800011e 	bne	r3,zero,21148 <__gxx_personality_sj0+0x120>
   21144:	10bfffc4 	addi	r2,r2,-1
   21148:	10009116 	blt	r2,zero,21390 <__gxx_personality_sj0+0x368>
   2114c:	10004c1e 	bne	r2,zero,21280 <__gxx_personality_sj0+0x258>
   21150:	d8001c15 	stw	zero,112(sp)
   21154:	00800044 	movi	r2,1
   21158:	d8001715 	stw	zero,92(sp)
   2115c:	d8001815 	stw	zero,96(sp)
   21160:	d9001a17 	ldw	r4,104(sp)
   21164:	20c0004c 	andi	r3,r4,1
   21168:	18008c26 	beq	r3,zero,2139c <__gxx_personality_sj0+0x374>
   2116c:	00c00084 	movi	r3,2
   21170:	10c08726 	beq	r2,r3,21390 <__gxx_personality_sj0+0x368>
   21174:	d8801b03 	ldbu	r2,108(sp)
   21178:	1000d21e 	bne	r2,zero,214c4 <__gxx_personality_sj0+0x49c>
   2117c:	d9402217 	ldw	r5,136(sp)
   21180:	d8801717 	ldw	r2,92(sp)
   21184:	d8c01817 	ldw	r3,96(sp)
   21188:	d9001917 	ldw	r4,100(sp)
   2118c:	28bffb15 	stw	r2,-20(r5)
   21190:	d8800917 	ldw	r2,36(sp)
   21194:	28fffc15 	stw	r3,-16(r5)
   21198:	00c00184 	movi	r3,6
   2119c:	28bfff15 	stw	r2,-4(r5)
   211a0:	d8801c17 	ldw	r2,112(sp)
   211a4:	293ffd15 	stw	r4,-12(r5)
   211a8:	d8c01715 	stw	r3,92(sp)
   211ac:	28bffe15 	stw	r2,-8(r5)
   211b0:	003fb806 	br	21094 <__alt_data_end+0xf4021094>
   211b4:	d8801717 	ldw	r2,92(sp)
   211b8:	113fc936 	bltu	r2,r4,210e0 <__alt_data_end+0xf40210e0>
   211bc:	d8c01a17 	ldw	r3,104(sp)
   211c0:	d8001b05 	stb	zero,108(sp)
   211c4:	00800184 	movi	r2,6
   211c8:	18bfc81e 	bne	r3,r2,210ec <__alt_data_end+0xf40210ec>
   211cc:	d8801b03 	ldbu	r2,108(sp)
   211d0:	103fc61e 	bne	r2,zero,210ec <__alt_data_end+0xf40210ec>
   211d4:	d9002217 	ldw	r4,136(sp)
   211d8:	d9402217 	ldw	r5,136(sp)
   211dc:	d8802217 	ldw	r2,136(sp)
   211e0:	213ffe17 	ldw	r4,-8(r4)
   211e4:	297ffb17 	ldw	r5,-20(r5)
   211e8:	10bffd17 	ldw	r2,-12(r2)
   211ec:	d9001c15 	stw	r4,112(sp)
   211f0:	d9401715 	stw	r5,92(sp)
   211f4:	d8801915 	stw	r2,100(sp)
   211f8:	20008726 	beq	r4,zero,21418 <__gxx_personality_sj0+0x3f0>
   211fc:	d8801717 	ldw	r2,92(sp)
   21200:	10006f0e 	bge	r2,zero,213c0 <__gxx_personality_sj0+0x398>
   21204:	d9002317 	ldw	r4,140(sp)
   21208:	d9401917 	ldw	r5,100(sp)
   2120c:	d80d883a 	mov	r6,sp
   21210:	00bfffc4 	movi	r2,-1
   21214:	d8800b15 	stw	r2,44(sp)
   21218:	0020ef40 	call	20ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   2121c:	d9000503 	ldbu	r4,20(sp)
   21220:	d9402317 	ldw	r5,140(sp)
   21224:	0020c2c0 	call	20c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21228:	d9000503 	ldbu	r4,20(sp)
   2122c:	d9402317 	ldw	r5,140(sp)
   21230:	d8800215 	stw	r2,8(sp)
   21234:	0020c2c0 	call	20c2c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21238:	d8c02217 	ldw	r3,136(sp)
   2123c:	18bffe15 	stw	r2,-8(r3)
   21240:	00005f06 	br	213c0 <__gxx_personality_sj0+0x398>
   21244:	000f883a 	mov	r7,zero
   21248:	000d883a 	mov	r6,zero
   2124c:	19000003 	ldbu	r4,0(r3)
   21250:	18c00044 	addi	r3,r3,1
   21254:	d8c01715 	stw	r3,92(sp)
   21258:	21401fcc 	andi	r5,r4,127
   2125c:	298a983a 	sll	r5,r5,r6
   21260:	21003fcc 	andi	r4,r4,255
   21264:	2100201c 	xori	r4,r4,128
   21268:	213fe004 	addi	r4,r4,-128
   2126c:	394eb03a 	or	r7,r7,r5
   21270:	318001c4 	addi	r6,r6,7
   21274:	203ff516 	blt	r4,zero,2124c <__alt_data_end+0xf402124c>
   21278:	10bfffc4 	addi	r2,r2,-1
   2127c:	10000e26 	beq	r2,zero,212b8 <__gxx_personality_sj0+0x290>
   21280:	d8c01717 	ldw	r3,92(sp)
   21284:	0011883a 	mov	r8,zero
   21288:	000d883a 	mov	r6,zero
   2128c:	19000003 	ldbu	r4,0(r3)
   21290:	18c00044 	addi	r3,r3,1
   21294:	21401fcc 	andi	r5,r4,127
   21298:	298a983a 	sll	r5,r5,r6
   2129c:	21003fcc 	andi	r4,r4,255
   212a0:	2100201c 	xori	r4,r4,128
   212a4:	213fe004 	addi	r4,r4,-128
   212a8:	4150b03a 	or	r8,r8,r5
   212ac:	318001c4 	addi	r6,r6,7
   212b0:	203ff616 	blt	r4,zero,2128c <__alt_data_end+0xf402128c>
   212b4:	003fe306 	br	21244 <__alt_data_end+0xf4021244>
   212b8:	42000044 	addi	r8,r8,1
   212bc:	da001c15 	stw	r8,112(sp)
   212c0:	38004f26 	beq	r7,zero,21400 <__gxx_personality_sj0+0x3d8>
   212c4:	d8800417 	ldw	r2,16(sp)
   212c8:	39ffffc4 	addi	r7,r7,-1
   212cc:	11c5883a 	add	r2,r2,r7
   212d0:	d8801815 	stw	r2,96(sp)
   212d4:	40002e26 	beq	r8,zero,21390 <__gxx_personality_sj0+0x368>
   212d8:	10004b26 	beq	r2,zero,21408 <__gxx_personality_sj0+0x3e0>
   212dc:	d8c01a17 	ldw	r3,104(sp)
   212e0:	18c0020c 	andi	r3,r3,8
   212e4:	d8c01e15 	stw	r3,120(sp)
   212e8:	1800801e 	bne	r3,zero,214ec <__gxx_personality_sj0+0x4c4>
   212ec:	d8801b03 	ldbu	r2,108(sp)
   212f0:	1000821e 	bne	r2,zero,214fc <__gxx_personality_sj0+0x4d4>
   212f4:	d9002217 	ldw	r4,136(sp)
   212f8:	20800017 	ldw	r2,0(r4)
   212fc:	1080004c 	andi	r2,r2,1
   21300:	1000821e 	bne	r2,zero,2150c <__gxx_personality_sj0+0x4e4>
   21304:	d9402217 	ldw	r5,136(sp)
   21308:	28800504 	addi	r2,r5,20
   2130c:	d8800915 	stw	r2,36(sp)
   21310:	10bff017 	ldw	r2,-64(r2)
   21314:	d8801d15 	stw	r2,116(sp)
   21318:	d9001b03 	ldbu	r4,108(sp)
   2131c:	d8001b45 	stb	zero,109(sp)
   21320:	d9001f15 	stw	r4,124(sp)
   21324:	00000e06 	br	21360 <__gxx_personality_sj0+0x338>
   21328:	01c03d0e 	bge	zero,r7,21420 <__gxx_personality_sj0+0x3f8>
   2132c:	017fffc4 	movi	r5,-1
   21330:	d9400b15 	stw	r5,44(sp)
   21334:	d809883a 	mov	r4,sp
   21338:	380b883a 	mov	r5,r7
   2133c:	0020b300 	call	20b30 <_ZL15get_ttype_entryP16lsda_header_infom>
   21340:	10004f26 	beq	r2,zero,21480 <__gxx_personality_sj0+0x458>
   21344:	d8c01d17 	ldw	r3,116(sp)
   21348:	1800611e 	bne	r3,zero,214d0 <__gxx_personality_sj0+0x4a8>
   2134c:	d8800617 	ldw	r2,24(sp)
   21350:	10005726 	beq	r2,zero,214b0 <__gxx_personality_sj0+0x488>
   21354:	d9401717 	ldw	r5,92(sp)
   21358:	2885883a 	add	r2,r5,r2
   2135c:	d8801815 	stw	r2,96(sp)
   21360:	d9001817 	ldw	r4,96(sp)
   21364:	d9400704 	addi	r5,sp,28
   21368:	00207a00 	call	207a0 <_ZL12read_sleb128PKhPl>
   2136c:	1009883a 	mov	r4,r2
   21370:	d9400604 	addi	r5,sp,24
   21374:	d8801715 	stw	r2,92(sp)
   21378:	00207a00 	call	207a0 <_ZL12read_sleb128PKhPl>
   2137c:	d9c00717 	ldw	r7,28(sp)
   21380:	383fe91e 	bne	r7,zero,21328 <__alt_data_end+0xf4021328>
   21384:	01000044 	movi	r4,1
   21388:	d9001b45 	stb	r4,109(sp)
   2138c:	003fef06 	br	2134c <__alt_data_end+0xf402134c>
   21390:	01000204 	movi	r4,8
   21394:	d9001715 	stw	r4,92(sp)
   21398:	003f3e06 	br	21094 <__alt_data_end+0xf4021094>
   2139c:	d9001a17 	ldw	r4,104(sp)
   213a0:	20c0020c 	andi	r3,r4,8
   213a4:	1800021e 	bne	r3,zero,213b0 <__gxx_personality_sj0+0x388>
   213a8:	d8c01b03 	ldbu	r3,108(sp)
   213ac:	18001826 	beq	r3,zero,21410 <__gxx_personality_sj0+0x3e8>
   213b0:	00c00044 	movi	r3,1
   213b4:	10c05926 	beq	r2,r3,2151c <__gxx_personality_sj0+0x4f4>
   213b8:	d9401717 	ldw	r5,92(sp)
   213bc:	28005816 	blt	r5,zero,21520 <__gxx_personality_sj0+0x4f8>
   213c0:	d9802217 	ldw	r6,136(sp)
   213c4:	d9002317 	ldw	r4,140(sp)
   213c8:	00bfffc4 	movi	r2,-1
   213cc:	000b883a 	mov	r5,zero
   213d0:	d8800b15 	stw	r2,44(sp)
   213d4:	00226b00 	call	226b0 <_Unwind_SetGR>
   213d8:	d9002317 	ldw	r4,140(sp)
   213dc:	d9801717 	ldw	r6,92(sp)
   213e0:	01400044 	movi	r5,1
   213e4:	00226b00 	call	226b0 <_Unwind_SetGR>
   213e8:	d9002317 	ldw	r4,140(sp)
   213ec:	d9401c17 	ldw	r5,112(sp)
   213f0:	00226fc0 	call	226fc <_Unwind_SetIP>
   213f4:	010001c4 	movi	r4,7
   213f8:	d9001715 	stw	r4,92(sp)
   213fc:	003f2506 	br	21094 <__alt_data_end+0xf4021094>
   21400:	d8c01c17 	ldw	r3,112(sp)
   21404:	183fe226 	beq	r3,zero,21390 <__alt_data_end+0xf4021390>
   21408:	00800084 	movi	r2,2
   2140c:	003f5206 	br	21158 <__alt_data_end+0xf4021158>
   21410:	00c00044 	movi	r3,1
   21414:	10ff791e 	bne	r2,r3,211fc <__alt_data_end+0xf40211fc>
   21418:	d9002217 	ldw	r4,136(sp)
   2141c:	0021fd80 	call	21fd8 <__cxa_call_terminate>
   21420:	d9001d17 	ldw	r4,116(sp)
   21424:	20000426 	beq	r4,zero,21438 <__gxx_personality_sj0+0x410>
   21428:	d9401e17 	ldw	r5,120(sp)
   2142c:	2800021e 	bne	r5,zero,21438 <__gxx_personality_sj0+0x410>
   21430:	d8801f17 	ldw	r2,124(sp)
   21434:	10001626 	beq	r2,zero,21490 <__gxx_personality_sj0+0x468>
   21438:	d8c00317 	ldw	r3,12(sp)
   2143c:	01ce303a 	nor	r7,zero,r7
   21440:	000d883a 	mov	r6,zero
   21444:	19c7883a 	add	r3,r3,r7
   21448:	000b883a 	mov	r5,zero
   2144c:	18800003 	ldbu	r2,0(r3)
   21450:	18c00044 	addi	r3,r3,1
   21454:	11001fcc 	andi	r4,r2,127
   21458:	2148983a 	sll	r4,r4,r5
   2145c:	10803fcc 	andi	r2,r2,255
   21460:	1080201c 	xori	r2,r2,128
   21464:	10bfe004 	addi	r2,r2,-128
   21468:	310cb03a 	or	r6,r6,r4
   2146c:	294001c4 	addi	r5,r5,7
   21470:	103ff616 	blt	r2,zero,2144c <__alt_data_end+0xf402144c>
   21474:	3005003a 	cmpeq	r2,r6,zero
   21478:	10803fcc 	andi	r2,r2,255
   2147c:	103fb326 	beq	r2,zero,2134c <__alt_data_end+0xf402134c>
   21480:	d8800717 	ldw	r2,28(sp)
   21484:	d8801715 	stw	r2,92(sp)
   21488:	008000c4 	movi	r2,3
   2148c:	003f3406 	br	21160 <__alt_data_end+0xf4021160>
   21490:	d9401d17 	ldw	r5,116(sp)
   21494:	d9800917 	ldw	r6,36(sp)
   21498:	00ffffc4 	movi	r3,-1
   2149c:	d809883a 	mov	r4,sp
   214a0:	d8c00b15 	stw	r3,44(sp)
   214a4:	0020b840 	call	20b84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   214a8:	1080005c 	xori	r2,r2,1
   214ac:	003ff206 	br	21478 <__alt_data_end+0xf4021478>
   214b0:	d8801b43 	ldbu	r2,109(sp)
   214b4:	103fb626 	beq	r2,zero,21390 <__alt_data_end+0xf4021390>
   214b8:	d8001715 	stw	zero,92(sp)
   214bc:	00800084 	movi	r2,2
   214c0:	003f2706 	br	21160 <__alt_data_end+0xf4021160>
   214c4:	00800184 	movi	r2,6
   214c8:	d8801715 	stw	r2,92(sp)
   214cc:	003ef106 	br	21094 <__alt_data_end+0xf4021094>
   214d0:	1009883a 	mov	r4,r2
   214d4:	180b883a 	mov	r5,r3
   214d8:	d9800904 	addi	r6,sp,36
   214dc:	00207f80 	call	207f8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   214e0:	10803fcc 	andi	r2,r2,255
   214e4:	103fe61e 	bne	r2,zero,21480 <__alt_data_end+0xf4021480>
   214e8:	003f9806 	br	2134c <__alt_data_end+0xf402134c>
   214ec:	00820034 	movhi	r2,2048
   214f0:	10877e04 	addi	r2,r2,7672
   214f4:	d8801d15 	stw	r2,116(sp)
   214f8:	003f8706 	br	21318 <__alt_data_end+0xf4021318>
   214fc:	00c20034 	movhi	r3,2048
   21500:	18c78004 	addi	r3,r3,7680
   21504:	d8c01d15 	stw	r3,116(sp)
   21508:	003f8306 	br	21318 <__alt_data_end+0xf4021318>
   2150c:	20bff517 	ldw	r2,-44(r4)
   21510:	003f7e06 	br	2130c <__alt_data_end+0xf402130c>
   21514:	d9000c17 	ldw	r4,48(sp)
   21518:	0021e540 	call	21e54 <__cxa_begin_catch>
   2151c:	0021b000 	call	21b00 <_ZSt9terminatev>
   21520:	d8c00b15 	stw	r3,44(sp)
   21524:	0021b280 	call	21b28 <_ZSt10unexpectedv>

00021528 <__cxa_call_unexpected>:
   21528:	008000b4 	movhi	r2,2
   2152c:	deffe604 	addi	sp,sp,-104
   21530:	10840a04 	addi	r2,r2,4136
   21534:	d8800d15 	stw	r2,52(sp)
   21538:	008000f4 	movhi	r2,3
   2153c:	10a25704 	addi	r2,r2,-30372
   21540:	d8800e15 	stw	r2,56(sp)
   21544:	d8800104 	addi	r2,sp,4
   21548:	d8800f15 	stw	r2,60(sp)
   2154c:	008000b4 	movhi	r2,2
   21550:	10856d04 	addi	r2,r2,5556
   21554:	d9001415 	stw	r4,80(sp)
   21558:	d9000704 	addi	r4,sp,28
   2155c:	dfc01915 	stw	ra,100(sp)
   21560:	d8801015 	stw	r2,64(sp)
   21564:	df001815 	stw	fp,96(sp)
   21568:	dec01115 	stw	sp,68(sp)
   2156c:	00226500 	call	22650 <_Unwind_SjLj_Register>
   21570:	d9001417 	ldw	r4,80(sp)
   21574:	0021e540 	call	21e54 <__cxa_begin_catch>
   21578:	d8c01417 	ldw	r3,80(sp)
   2157c:	18bffe17 	ldw	r2,-8(r3)
   21580:	193ff717 	ldw	r4,-36(r3)
   21584:	18fffd17 	ldw	r3,-12(r3)
   21588:	d8800315 	stw	r2,12(sp)
   2158c:	d8c01615 	stw	r3,88(sp)
   21590:	d8c01417 	ldw	r3,80(sp)
   21594:	18fffb17 	ldw	r3,-20(r3)
   21598:	d8c01515 	stw	r3,84(sp)
   2159c:	d8c01417 	ldw	r3,80(sp)
   215a0:	18fff817 	ldw	r3,-32(r3)
   215a4:	d8c01415 	stw	r3,80(sp)
   215a8:	00c00044 	movi	r3,1
   215ac:	d8c00815 	stw	r3,32(sp)
   215b0:	0021b180 	call	21b18 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   215b4:	d8c00917 	ldw	r3,36(sp)
   215b8:	d8800817 	ldw	r2,32(sp)
   215bc:	d8c01715 	stw	r3,92(sp)
   215c0:	10000a26 	beq	r2,zero,215ec <__cxa_call_unexpected+0xc4>
   215c4:	10bfffc4 	addi	r2,r2,-1
   215c8:	10000126 	beq	r2,zero,215d0 <__cxa_call_unexpected+0xa8>
   215cc:	003da0fa 	break	3
   215d0:	d8000815 	stw	zero,32(sp)
   215d4:	0021f080 	call	21f08 <__cxa_end_catch>
   215d8:	0021f080 	call	21f08 <__cxa_end_catch>
   215dc:	d9001717 	ldw	r4,92(sp)
   215e0:	00bfffc4 	movi	r2,-1
   215e4:	d8800815 	stw	r2,32(sp)
   215e8:	002284c0 	call	2284c <_Unwind_SjLj_Resume>
   215ec:	d9001717 	ldw	r4,92(sp)
   215f0:	0021e540 	call	21e54 <__cxa_begin_catch>
   215f4:	002175c0 	call	2175c <__cxa_get_globals_fast>
   215f8:	10800017 	ldw	r2,0(r2)
   215fc:	10c00b17 	ldw	r3,44(r2)
   21600:	18c0004c 	andi	r3,r3,1
   21604:	18001e26 	beq	r3,zero,21680 <__cxa_call_unexpected+0x158>
   21608:	10800017 	ldw	r2,0(r2)
   2160c:	d8801715 	stw	r2,92(sp)
   21610:	d8801517 	ldw	r2,84(sp)
   21614:	00802b0e 	bge	zero,r2,216c4 <__cxa_call_unexpected+0x19c>
   21618:	d8c01717 	ldw	r3,92(sp)
   2161c:	d8800317 	ldw	r2,12(sp)
   21620:	d9801617 	ldw	r6,88(sp)
   21624:	193ff017 	ldw	r4,-64(r3)
   21628:	d9c01517 	ldw	r7,84(sp)
   2162c:	d8800015 	stw	r2,0(sp)
   21630:	180b883a 	mov	r5,r3
   21634:	00800084 	movi	r2,2
   21638:	d8800815 	stw	r2,32(sp)
   2163c:	0020cb40 	call	20cb4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21640:	10803fcc 	andi	r2,r2,255
   21644:	10001e1e 	bne	r2,zero,216c0 <__cxa_call_unexpected+0x198>
   21648:	d8800317 	ldw	r2,12(sp)
   2164c:	d9801617 	ldw	r6,88(sp)
   21650:	d9c01517 	ldw	r7,84(sp)
   21654:	01020034 	movhi	r4,2048
   21658:	d8800015 	stw	r2,0(sp)
   2165c:	21008104 	addi	r4,r4,516
   21660:	00800084 	movi	r2,2
   21664:	000b883a 	mov	r5,zero
   21668:	d8800815 	stw	r2,32(sp)
   2166c:	0020cb40 	call	20cb4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21670:	10803fcc 	andi	r2,r2,255
   21674:	1000051e 	bne	r2,zero,2168c <__cxa_call_unexpected+0x164>
   21678:	d9001417 	ldw	r4,80(sp)
   2167c:	0021a400 	call	21a40 <_ZN10__cxxabiv111__terminateEPFvvE>
   21680:	10801004 	addi	r2,r2,64
   21684:	d8801715 	stw	r2,92(sp)
   21688:	003fe106 	br	21610 <__alt_data_end+0xf4021610>
   2168c:	01000104 	movi	r4,4
   21690:	00221ec0 	call	221ec <__cxa_allocate_exception>
   21694:	00c20034 	movhi	r3,2048
   21698:	18c09c04 	addi	r3,r3,624
   2169c:	01420034 	movhi	r5,2048
   216a0:	018000b4 	movhi	r6,2
   216a4:	10c00015 	stw	r3,0(r2)
   216a8:	29408104 	addi	r5,r5,516
   216ac:	00c00084 	movi	r3,2
   216b0:	3188eb04 	addi	r6,r6,9132
   216b4:	1009883a 	mov	r4,r2
   216b8:	d8c00815 	stw	r3,32(sp)
   216bc:	00220740 	call	22074 <__cxa_throw>
   216c0:	00221040 	call	22104 <__cxa_rethrow>
   216c4:	d9401617 	ldw	r5,88(sp)
   216c8:	00800084 	movi	r2,2
   216cc:	0009883a 	mov	r4,zero
   216d0:	d9800104 	addi	r6,sp,4
   216d4:	d8800815 	stw	r2,32(sp)
   216d8:	0020ef40 	call	20ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   216dc:	d8801717 	ldw	r2,92(sp)
   216e0:	d9c01517 	ldw	r7,84(sp)
   216e4:	d9000104 	addi	r4,sp,4
   216e8:	117ff017 	ldw	r5,-64(r2)
   216ec:	100d883a 	mov	r6,r2
   216f0:	0020b840 	call	20b84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   216f4:	10803fcc 	andi	r2,r2,255
   216f8:	1000171e 	bne	r2,zero,21758 <__cxa_call_unexpected+0x230>
   216fc:	d9c01517 	ldw	r7,84(sp)
   21700:	01420034 	movhi	r5,2048
   21704:	00800084 	movi	r2,2
   21708:	29408104 	addi	r5,r5,516
   2170c:	d9000104 	addi	r4,sp,4
   21710:	000d883a 	mov	r6,zero
   21714:	d8800815 	stw	r2,32(sp)
   21718:	0020b840 	call	20b84 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   2171c:	10803fcc 	andi	r2,r2,255
   21720:	103fd526 	beq	r2,zero,21678 <__alt_data_end+0xf4021678>
   21724:	01000104 	movi	r4,4
   21728:	00221ec0 	call	221ec <__cxa_allocate_exception>
   2172c:	00c20034 	movhi	r3,2048
   21730:	18c09c04 	addi	r3,r3,624
   21734:	01420034 	movhi	r5,2048
   21738:	018000b4 	movhi	r6,2
   2173c:	10c00015 	stw	r3,0(r2)
   21740:	29408104 	addi	r5,r5,516
   21744:	00c00084 	movi	r3,2
   21748:	3188eb04 	addi	r6,r6,9132
   2174c:	1009883a 	mov	r4,r2
   21750:	d8c00815 	stw	r3,32(sp)
   21754:	00220740 	call	22074 <__cxa_throw>
   21758:	00221040 	call	22104 <__cxa_rethrow>

0002175c <__cxa_get_globals_fast>:
   2175c:	00820034 	movhi	r2,2048
   21760:	10879104 	addi	r2,r2,7748
   21764:	f800283a 	ret

00021768 <__cxa_get_globals>:
   21768:	00820034 	movhi	r2,2048
   2176c:	10879104 	addi	r2,r2,7748
   21770:	f800283a 	ret

00021774 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   21774:	20800017 	ldw	r2,0(r4)
   21778:	defffa04 	addi	sp,sp,-24
   2177c:	dc000415 	stw	r16,16(sp)
   21780:	10800617 	ldw	r2,24(r2)
   21784:	3021883a 	mov	r16,r6
   21788:	31800017 	ldw	r6,0(r6)
   2178c:	00c00404 	movi	r3,16
   21790:	d8c00215 	stw	r3,8(sp)
   21794:	dfc00515 	stw	ra,20(sp)
   21798:	d8000015 	stw	zero,0(sp)
   2179c:	d8000115 	stw	zero,4(sp)
   217a0:	d8000315 	stw	zero,12(sp)
   217a4:	d80f883a 	mov	r7,sp
   217a8:	103ee83a 	callr	r2
   217ac:	d8800117 	ldw	r2,4(sp)
   217b0:	00c00184 	movi	r3,6
   217b4:	1080018c 	andi	r2,r2,6
   217b8:	10c00526 	beq	r2,r3,217d0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   217bc:	0005883a 	mov	r2,zero
   217c0:	dfc00517 	ldw	ra,20(sp)
   217c4:	dc000417 	ldw	r16,16(sp)
   217c8:	dec00604 	addi	sp,sp,24
   217cc:	f800283a 	ret
   217d0:	d8c00017 	ldw	r3,0(sp)
   217d4:	00800044 	movi	r2,1
   217d8:	80c00015 	stw	r3,0(r16)
   217dc:	dfc00517 	ldw	ra,20(sp)
   217e0:	dc000417 	ldw	r16,16(sp)
   217e4:	dec00604 	addi	sp,sp,24
   217e8:	f800283a 	ret

000217ec <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   217ec:	d8800017 	ldw	r2,0(sp)
   217f0:	11800226 	beq	r2,r6,217fc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   217f4:	00800044 	movi	r2,1
   217f8:	f800283a 	ret
   217fc:	00800184 	movi	r2,6
   21800:	f800283a 	ret

00021804 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   21804:	00820034 	movhi	r2,2048
   21808:	10804204 	addi	r2,r2,264
   2180c:	20800015 	stw	r2,0(r4)
   21810:	00221881 	jmpi	22188 <_ZNSt9type_infoD1Ev>

00021814 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   21814:	defffe04 	addi	sp,sp,-8
   21818:	00820034 	movhi	r2,2048
   2181c:	dc000015 	stw	r16,0(sp)
   21820:	dfc00115 	stw	ra,4(sp)
   21824:	10804204 	addi	r2,r2,264
   21828:	20800015 	stw	r2,0(r4)
   2182c:	2021883a 	mov	r16,r4
   21830:	00221880 	call	22188 <_ZNSt9type_infoD1Ev>
   21834:	8009883a 	mov	r4,r16
   21838:	dfc00117 	ldw	ra,4(sp)
   2183c:	dc000017 	ldw	r16,0(sp)
   21840:	dec00204 	addi	sp,sp,8
   21844:	0021a3c1 	jmpi	21a3c <_ZdlPv>

00021848 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   21848:	21000117 	ldw	r4,4(r4)
   2184c:	29400117 	ldw	r5,4(r5)
   21850:	defffd04 	addi	sp,sp,-12
   21854:	dc400115 	stw	r17,4(sp)
   21858:	dc000015 	stw	r16,0(sp)
   2185c:	dfc00215 	stw	ra,8(sp)
   21860:	3023883a 	mov	r17,r6
   21864:	3821883a 	mov	r16,r7
   21868:	21400b26 	beq	r4,r5,21898 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   2186c:	20c00007 	ldb	r3,0(r4)
   21870:	00800a84 	movi	r2,42
   21874:	18800226 	beq	r3,r2,21880 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   21878:	00236b40 	call	236b4 <strcmp>
   2187c:	10000626 	beq	r2,zero,21898 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   21880:	0005883a 	mov	r2,zero
   21884:	dfc00217 	ldw	ra,8(sp)
   21888:	dc400117 	ldw	r17,4(sp)
   2188c:	dc000017 	ldw	r16,0(sp)
   21890:	dec00304 	addi	sp,sp,12
   21894:	f800283a 	ret
   21898:	00800204 	movi	r2,8
   2189c:	80800315 	stw	r2,12(r16)
   218a0:	00800184 	movi	r2,6
   218a4:	80800115 	stw	r2,4(r16)
   218a8:	84400015 	stw	r17,0(r16)
   218ac:	00800044 	movi	r2,1
   218b0:	003ff406 	br	21884 <__alt_data_end+0xf4021884>

000218b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   218b4:	20800117 	ldw	r2,4(r4)
   218b8:	28c00117 	ldw	r3,4(r5)
   218bc:	10c02926 	beq	r2,r3,21964 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   218c0:	defffb04 	addi	sp,sp,-20
   218c4:	dcc00315 	stw	r19,12(sp)
   218c8:	dc800215 	stw	r18,8(sp)
   218cc:	dc400115 	stw	r17,4(sp)
   218d0:	dc000015 	stw	r16,0(sp)
   218d4:	dfc00415 	stw	ra,16(sp)
   218d8:	2821883a 	mov	r16,r5
   218dc:	11400007 	ldb	r5,0(r2)
   218e0:	2025883a 	mov	r18,r4
   218e4:	01000a84 	movi	r4,42
   218e8:	3823883a 	mov	r17,r7
   218ec:	3027883a 	mov	r19,r6
   218f0:	29000426 	beq	r5,r4,21904 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
   218f4:	1009883a 	mov	r4,r2
   218f8:	180b883a 	mov	r5,r3
   218fc:	00236b40 	call	236b4 <strcmp>
   21900:	10000a26 	beq	r2,zero,2192c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
   21904:	008000c4 	movi	r2,3
   21908:	14400a2e 	bgeu	r2,r17,21934 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   2190c:	0005883a 	mov	r2,zero
   21910:	dfc00417 	ldw	ra,16(sp)
   21914:	dcc00317 	ldw	r19,12(sp)
   21918:	dc800217 	ldw	r18,8(sp)
   2191c:	dc400117 	ldw	r17,4(sp)
   21920:	dc000017 	ldw	r16,0(sp)
   21924:	dec00504 	addi	sp,sp,20
   21928:	f800283a 	ret
   2192c:	00800044 	movi	r2,1
   21930:	003ff706 	br	21910 <__alt_data_end+0xf4021910>
   21934:	80800017 	ldw	r2,0(r16)
   21938:	8009883a 	mov	r4,r16
   2193c:	900b883a 	mov	r5,r18
   21940:	10800517 	ldw	r2,20(r2)
   21944:	980d883a 	mov	r6,r19
   21948:	dfc00417 	ldw	ra,16(sp)
   2194c:	dcc00317 	ldw	r19,12(sp)
   21950:	dc800217 	ldw	r18,8(sp)
   21954:	dc400117 	ldw	r17,4(sp)
   21958:	dc000017 	ldw	r16,0(sp)
   2195c:	dec00504 	addi	sp,sp,20
   21960:	1000683a 	jmp	r2
   21964:	00800044 	movi	r2,1
   21968:	f800283a 	ret

0002196c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   2196c:	defffb04 	addi	sp,sp,-20
   21970:	dc400315 	stw	r17,12(sp)
   21974:	d8800717 	ldw	r2,28(sp)
   21978:	dc400517 	ldw	r17,20(sp)
   2197c:	dc000215 	stw	r16,8(sp)
   21980:	dfc00415 	stw	ra,16(sp)
   21984:	24000117 	ldw	r16,4(r4)
   21988:	88801026 	beq	r17,r2,219cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   2198c:	39400117 	ldw	r5,4(r7)
   21990:	81401d26 	beq	r16,r5,21a08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   21994:	80c00007 	ldb	r3,0(r16)
   21998:	00800a84 	movi	r2,42
   2199c:	18800526 	beq	r3,r2,219b4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   219a0:	8009883a 	mov	r4,r16
   219a4:	d9800115 	stw	r6,4(sp)
   219a8:	00236b40 	call	236b4 <strcmp>
   219ac:	d9800117 	ldw	r6,4(sp)
   219b0:	10001526 	beq	r2,zero,21a08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   219b4:	0005883a 	mov	r2,zero
   219b8:	dfc00417 	ldw	ra,16(sp)
   219bc:	dc400317 	ldw	r17,12(sp)
   219c0:	dc000217 	ldw	r16,8(sp)
   219c4:	dec00504 	addi	sp,sp,20
   219c8:	f800283a 	ret
   219cc:	d8800617 	ldw	r2,24(sp)
   219d0:	11400117 	ldw	r5,4(r2)
   219d4:	81401326 	beq	r16,r5,21a24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   219d8:	80c00007 	ldb	r3,0(r16)
   219dc:	00800a84 	movi	r2,42
   219e0:	18801326 	beq	r3,r2,21a30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   219e4:	8009883a 	mov	r4,r16
   219e8:	d9800115 	stw	r6,4(sp)
   219ec:	d9c00015 	stw	r7,0(sp)
   219f0:	00236b40 	call	236b4 <strcmp>
   219f4:	d9800117 	ldw	r6,4(sp)
   219f8:	d9c00017 	ldw	r7,0(sp)
   219fc:	10000926 	beq	r2,zero,21a24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   21a00:	39400117 	ldw	r5,4(r7)
   21a04:	817fe61e 	bne	r16,r5,219a0 <__alt_data_end+0xf40219a0>
   21a08:	d8800817 	ldw	r2,32(sp)
   21a0c:	d8c00817 	ldw	r3,32(sp)
   21a10:	14400015 	stw	r17,0(r2)
   21a14:	11800115 	stw	r6,4(r2)
   21a18:	00800044 	movi	r2,1
   21a1c:	18800315 	stw	r2,12(r3)
   21a20:	003fe406 	br	219b4 <__alt_data_end+0xf40219b4>
   21a24:	d8800817 	ldw	r2,32(sp)
   21a28:	11800215 	stw	r6,8(r2)
   21a2c:	003fe106 	br	219b4 <__alt_data_end+0xf40219b4>
   21a30:	38800117 	ldw	r2,4(r7)
   21a34:	80bfdf1e 	bne	r16,r2,219b4 <__alt_data_end+0xf40219b4>
   21a38:	003ff306 	br	21a08 <__alt_data_end+0xf4021a08>

00021a3c <_ZdlPv>:
   21a3c:	00229941 	jmpi	22994 <free>

00021a40 <_ZN10__cxxabiv111__terminateEPFvvE>:
   21a40:	008000b4 	movhi	r2,2
   21a44:	deffef04 	addi	sp,sp,-68
   21a48:	10840a04 	addi	r2,r2,4136
   21a4c:	d8800615 	stw	r2,24(sp)
   21a50:	008000f4 	movhi	r2,3
   21a54:	10a25b04 	addi	r2,r2,-30356
   21a58:	d8800715 	stw	r2,28(sp)
   21a5c:	008000b4 	movhi	r2,2
   21a60:	1086a604 	addi	r2,r2,6808
   21a64:	d9000d15 	stw	r4,52(sp)
   21a68:	d809883a 	mov	r4,sp
   21a6c:	d8800915 	stw	r2,36(sp)
   21a70:	dfc01015 	stw	ra,64(sp)
   21a74:	df000f15 	stw	fp,60(sp)
   21a78:	dec00815 	stw	sp,32(sp)
   21a7c:	dec00a15 	stw	sp,40(sp)
   21a80:	00226500 	call	22650 <_Unwind_SjLj_Register>
   21a84:	00800044 	movi	r2,1
   21a88:	d8800115 	stw	r2,4(sp)
   21a8c:	d8800d17 	ldw	r2,52(sp)
   21a90:	103ee83a 	callr	r2
   21a94:	00229680 	call	22968 <abort>
   21a98:	d8c00217 	ldw	r3,8(sp)
   21a9c:	d8800117 	ldw	r2,4(sp)
   21aa0:	d8c00d15 	stw	r3,52(sp)
   21aa4:	d8c00317 	ldw	r3,12(sp)
   21aa8:	d8c00e15 	stw	r3,56(sp)
   21aac:	10000b26 	beq	r2,zero,21adc <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   21ab0:	10bfffc4 	addi	r2,r2,-1
   21ab4:	10000126 	beq	r2,zero,21abc <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   21ab8:	003da0fa 	break	3
   21abc:	d8000115 	stw	zero,4(sp)
   21ac0:	0021f080 	call	21f08 <__cxa_end_catch>
   21ac4:	d8c00e17 	ldw	r3,56(sp)
   21ac8:	00bfffc4 	movi	r2,-1
   21acc:	18800826 	beq	r3,r2,21af0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   21ad0:	d9000d17 	ldw	r4,52(sp)
   21ad4:	d8800115 	stw	r2,4(sp)
   21ad8:	002284c0 	call	2284c <_Unwind_SjLj_Resume>
   21adc:	d9000d17 	ldw	r4,52(sp)
   21ae0:	0021e540 	call	21e54 <__cxa_begin_catch>
   21ae4:	00800084 	movi	r2,2
   21ae8:	d8800115 	stw	r2,4(sp)
   21aec:	00229680 	call	22968 <abort>
   21af0:	d8800e17 	ldw	r2,56(sp)
   21af4:	d9000d17 	ldw	r4,52(sp)
   21af8:	d8800115 	stw	r2,4(sp)
   21afc:	00215280 	call	21528 <__cxa_call_unexpected>

00021b00 <_ZSt9terminatev>:
   21b00:	00820034 	movhi	r2,2048
   21b04:	10877904 	addi	r2,r2,7652
   21b08:	11000017 	ldw	r4,0(r2)
   21b0c:	deffff04 	addi	sp,sp,-4
   21b10:	dfc00015 	stw	ra,0(sp)
   21b14:	0021a400 	call	21a40 <_ZN10__cxxabiv111__terminateEPFvvE>

00021b18 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   21b18:	deffff04 	addi	sp,sp,-4
   21b1c:	dfc00015 	stw	ra,0(sp)
   21b20:	203ee83a 	callr	r4
   21b24:	0021b000 	call	21b00 <_ZSt9terminatev>

00021b28 <_ZSt10unexpectedv>:
   21b28:	00820034 	movhi	r2,2048
   21b2c:	10878204 	addi	r2,r2,7688
   21b30:	11000017 	ldw	r4,0(r2)
   21b34:	deffff04 	addi	sp,sp,-4
   21b38:	dfc00015 	stw	ra,0(sp)
   21b3c:	0021b180 	call	21b18 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00021b40 <_ZSt13set_terminatePFvvE>:
   21b40:	00c20034 	movhi	r3,2048
   21b44:	18c77904 	addi	r3,r3,7652
   21b48:	18800017 	ldw	r2,0(r3)
   21b4c:	19000015 	stw	r4,0(r3)
   21b50:	f800283a 	ret

00021b54 <_ZSt13get_terminatev>:
   21b54:	00820034 	movhi	r2,2048
   21b58:	10877904 	addi	r2,r2,7652
   21b5c:	10800017 	ldw	r2,0(r2)
   21b60:	f800283a 	ret

00021b64 <_ZSt14set_unexpectedPFvvE>:
   21b64:	00c20034 	movhi	r3,2048
   21b68:	18c78204 	addi	r3,r3,7688
   21b6c:	18800017 	ldw	r2,0(r3)
   21b70:	19000015 	stw	r4,0(r3)
   21b74:	f800283a 	ret

00021b78 <_ZSt14get_unexpectedv>:
   21b78:	00820034 	movhi	r2,2048
   21b7c:	10878204 	addi	r2,r2,7688
   21b80:	10800017 	ldw	r2,0(r2)
   21b84:	f800283a 	ret

00021b88 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   21b88:	00820034 	movhi	r2,2048
   21b8c:	10805a04 	addi	r2,r2,360
   21b90:	20800015 	stw	r2,0(r4)
   21b94:	00218041 	jmpi	21804 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00021b98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   21b98:	defffe04 	addi	sp,sp,-8
   21b9c:	00820034 	movhi	r2,2048
   21ba0:	dc000015 	stw	r16,0(sp)
   21ba4:	dfc00115 	stw	ra,4(sp)
   21ba8:	10805a04 	addi	r2,r2,360
   21bac:	20800015 	stw	r2,0(r4)
   21bb0:	2021883a 	mov	r16,r4
   21bb4:	00218040 	call	21804 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   21bb8:	8009883a 	mov	r4,r16
   21bbc:	dfc00117 	ldw	ra,4(sp)
   21bc0:	dc000017 	ldw	r16,0(sp)
   21bc4:	dec00204 	addi	sp,sp,8
   21bc8:	0021a3c1 	jmpi	21a3c <_ZdlPv>

00021bcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   21bcc:	defff504 	addi	sp,sp,-44
   21bd0:	dc000115 	stw	r16,4(sp)
   21bd4:	38800117 	ldw	r2,4(r7)
   21bd8:	24000117 	ldw	r16,4(r4)
   21bdc:	ddc00815 	stw	r23,32(sp)
   21be0:	dd800715 	stw	r22,28(sp)
   21be4:	dd400615 	stw	r21,24(sp)
   21be8:	dd000515 	stw	r20,20(sp)
   21bec:	dcc00415 	stw	r19,16(sp)
   21bf0:	dc800315 	stw	r18,12(sp)
   21bf4:	dc400215 	stw	r17,8(sp)
   21bf8:	dfc00a15 	stw	ra,40(sp)
   21bfc:	df000915 	stw	fp,36(sp)
   21c00:	202b883a 	mov	r21,r4
   21c04:	382d883a 	mov	r22,r7
   21c08:	2823883a 	mov	r17,r5
   21c0c:	dc800b17 	ldw	r18,44(sp)
   21c10:	ddc00c17 	ldw	r23,48(sp)
   21c14:	dd000d17 	ldw	r20,52(sp)
   21c18:	dcc00e17 	ldw	r19,56(sp)
   21c1c:	80801f26 	beq	r16,r2,21c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21c20:	87000007 	ldb	fp,0(r16)
   21c24:	00c00a84 	movi	r3,42
   21c28:	e0c00626 	beq	fp,r3,21c44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   21c2c:	8009883a 	mov	r4,r16
   21c30:	100b883a 	mov	r5,r2
   21c34:	d9800015 	stw	r6,0(sp)
   21c38:	00236b40 	call	236b4 <strcmp>
   21c3c:	d9800017 	ldw	r6,0(sp)
   21c40:	10001626 	beq	r2,zero,21c9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21c44:	95002c26 	beq	r18,r20,21cf8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
   21c48:	a9000217 	ldw	r4,8(r21)
   21c4c:	880b883a 	mov	r5,r17
   21c50:	b00f883a 	mov	r7,r22
   21c54:	20800017 	ldw	r2,0(r4)
   21c58:	dc800b15 	stw	r18,44(sp)
   21c5c:	ddc00c15 	stw	r23,48(sp)
   21c60:	dd000d15 	stw	r20,52(sp)
   21c64:	dcc00e15 	stw	r19,56(sp)
   21c68:	10800717 	ldw	r2,28(r2)
   21c6c:	dfc00a17 	ldw	ra,40(sp)
   21c70:	df000917 	ldw	fp,36(sp)
   21c74:	ddc00817 	ldw	r23,32(sp)
   21c78:	dd800717 	ldw	r22,28(sp)
   21c7c:	dd400617 	ldw	r21,24(sp)
   21c80:	dd000517 	ldw	r20,20(sp)
   21c84:	dcc00417 	ldw	r19,16(sp)
   21c88:	dc800317 	ldw	r18,12(sp)
   21c8c:	dc400217 	ldw	r17,8(sp)
   21c90:	dc000117 	ldw	r16,4(sp)
   21c94:	dec00b04 	addi	sp,sp,44
   21c98:	1000683a 	jmp	r2
   21c9c:	9c800015 	stw	r18,0(r19)
   21ca0:	99800115 	stw	r6,4(r19)
   21ca4:	88001116 	blt	r17,zero,21cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   21ca8:	9463883a 	add	r17,r18,r17
   21cac:	a4401d26 	beq	r20,r17,21d24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   21cb0:	00800044 	movi	r2,1
   21cb4:	98800315 	stw	r2,12(r19)
   21cb8:	0005883a 	mov	r2,zero
   21cbc:	dfc00a17 	ldw	ra,40(sp)
   21cc0:	df000917 	ldw	fp,36(sp)
   21cc4:	ddc00817 	ldw	r23,32(sp)
   21cc8:	dd800717 	ldw	r22,28(sp)
   21ccc:	dd400617 	ldw	r21,24(sp)
   21cd0:	dd000517 	ldw	r20,20(sp)
   21cd4:	dcc00417 	ldw	r19,16(sp)
   21cd8:	dc800317 	ldw	r18,12(sp)
   21cdc:	dc400217 	ldw	r17,8(sp)
   21ce0:	dc000117 	ldw	r16,4(sp)
   21ce4:	dec00b04 	addi	sp,sp,44
   21ce8:	f800283a 	ret
   21cec:	00bfff84 	movi	r2,-2
   21cf0:	88bff11e 	bne	r17,r2,21cb8 <__alt_data_end+0xf4021cb8>
   21cf4:	003fee06 	br	21cb0 <__alt_data_end+0xf4021cb0>
   21cf8:	b9400117 	ldw	r5,4(r23)
   21cfc:	81400726 	beq	r16,r5,21d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   21d00:	00800a84 	movi	r2,42
   21d04:	e0bfd026 	beq	fp,r2,21c48 <__alt_data_end+0xf4021c48>
   21d08:	8009883a 	mov	r4,r16
   21d0c:	d9800015 	stw	r6,0(sp)
   21d10:	00236b40 	call	236b4 <strcmp>
   21d14:	d9800017 	ldw	r6,0(sp)
   21d18:	103fcb1e 	bne	r2,zero,21c48 <__alt_data_end+0xf4021c48>
   21d1c:	99800215 	stw	r6,8(r19)
   21d20:	003fe506 	br	21cb8 <__alt_data_end+0xf4021cb8>
   21d24:	00800184 	movi	r2,6
   21d28:	003fe206 	br	21cb4 <__alt_data_end+0xf4021cb4>

00021d2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   21d2c:	defffa04 	addi	sp,sp,-24
   21d30:	dc000215 	stw	r16,8(sp)
   21d34:	dc000617 	ldw	r16,24(sp)
   21d38:	dc800415 	stw	r18,16(sp)
   21d3c:	dc400315 	stw	r17,12(sp)
   21d40:	dfc00515 	stw	ra,20(sp)
   21d44:	2023883a 	mov	r17,r4
   21d48:	2825883a 	mov	r18,r5
   21d4c:	81800b26 	beq	r16,r6,21d7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   21d50:	89000217 	ldw	r4,8(r17)
   21d54:	900b883a 	mov	r5,r18
   21d58:	20800017 	ldw	r2,0(r4)
   21d5c:	dc000615 	stw	r16,24(sp)
   21d60:	10800817 	ldw	r2,32(r2)
   21d64:	dfc00517 	ldw	ra,20(sp)
   21d68:	dc800417 	ldw	r18,16(sp)
   21d6c:	dc400317 	ldw	r17,12(sp)
   21d70:	dc000217 	ldw	r16,8(sp)
   21d74:	dec00604 	addi	sp,sp,24
   21d78:	1000683a 	jmp	r2
   21d7c:	21000117 	ldw	r4,4(r4)
   21d80:	39400117 	ldw	r5,4(r7)
   21d84:	21400926 	beq	r4,r5,21dac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   21d88:	20c00007 	ldb	r3,0(r4)
   21d8c:	00800a84 	movi	r2,42
   21d90:	18bfef26 	beq	r3,r2,21d50 <__alt_data_end+0xf4021d50>
   21d94:	d9800015 	stw	r6,0(sp)
   21d98:	d9c00115 	stw	r7,4(sp)
   21d9c:	00236b40 	call	236b4 <strcmp>
   21da0:	d9800017 	ldw	r6,0(sp)
   21da4:	d9c00117 	ldw	r7,4(sp)
   21da8:	103fe91e 	bne	r2,zero,21d50 <__alt_data_end+0xf4021d50>
   21dac:	00800184 	movi	r2,6
   21db0:	dfc00517 	ldw	ra,20(sp)
   21db4:	dc800417 	ldw	r18,16(sp)
   21db8:	dc400317 	ldw	r17,12(sp)
   21dbc:	dc000217 	ldw	r16,8(sp)
   21dc0:	dec00604 	addi	sp,sp,24
   21dc4:	f800283a 	ret

00021dc8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   21dc8:	defffb04 	addi	sp,sp,-20
   21dcc:	dcc00315 	stw	r19,12(sp)
   21dd0:	dc800215 	stw	r18,8(sp)
   21dd4:	dc400115 	stw	r17,4(sp)
   21dd8:	dc000015 	stw	r16,0(sp)
   21ddc:	dfc00415 	stw	ra,16(sp)
   21de0:	2027883a 	mov	r19,r4
   21de4:	2825883a 	mov	r18,r5
   21de8:	3023883a 	mov	r17,r6
   21dec:	3821883a 	mov	r16,r7
   21df0:	00218480 	call	21848 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   21df4:	10c03fcc 	andi	r3,r2,255
   21df8:	18000726 	beq	r3,zero,21e18 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   21dfc:	dfc00417 	ldw	ra,16(sp)
   21e00:	dcc00317 	ldw	r19,12(sp)
   21e04:	dc800217 	ldw	r18,8(sp)
   21e08:	dc400117 	ldw	r17,4(sp)
   21e0c:	dc000017 	ldw	r16,0(sp)
   21e10:	dec00504 	addi	sp,sp,20
   21e14:	f800283a 	ret
   21e18:	99000217 	ldw	r4,8(r19)
   21e1c:	900b883a 	mov	r5,r18
   21e20:	880d883a 	mov	r6,r17
   21e24:	20800017 	ldw	r2,0(r4)
   21e28:	800f883a 	mov	r7,r16
   21e2c:	10800617 	ldw	r2,24(r2)
   21e30:	dfc00417 	ldw	ra,16(sp)
   21e34:	dcc00317 	ldw	r19,12(sp)
   21e38:	dc800217 	ldw	r18,8(sp)
   21e3c:	dc400117 	ldw	r17,4(sp)
   21e40:	dc000017 	ldw	r16,0(sp)
   21e44:	dec00504 	addi	sp,sp,20
   21e48:	1000683a 	jmp	r2

00021e4c <__cxa_get_exception_ptr>:
   21e4c:	20bfff17 	ldw	r2,-4(r4)
   21e50:	f800283a 	ret

00021e54 <__cxa_begin_catch>:
   21e54:	defffe04 	addi	sp,sp,-8
   21e58:	dc000015 	stw	r16,0(sp)
   21e5c:	dfc00115 	stw	ra,4(sp)
   21e60:	2021883a 	mov	r16,r4
   21e64:	00217680 	call	21768 <__cxa_get_globals>
   21e68:	81000017 	ldw	r4,0(r16)
   21e6c:	80c00117 	ldw	r3,4(r16)
   21e70:	01af3574 	movhi	r6,48341
   21e74:	31b54004 	addi	r6,r6,-11008
   21e78:	016e2cb4 	movhi	r5,47282
   21e7c:	296aaf04 	addi	r5,r5,-21828
   21e80:	218d883a 	add	r6,r4,r6
   21e84:	3109803a 	cmpltu	r4,r6,r4
   21e88:	1947883a 	add	r3,r3,r5
   21e8c:	20c7883a 	add	r3,r4,r3
   21e90:	817ff504 	addi	r5,r16,-44
   21e94:	11000017 	ldw	r4,0(r2)
   21e98:	18000726 	beq	r3,zero,21eb8 <__cxa_begin_catch+0x64>
   21e9c:	2000191e 	bne	r4,zero,21f04 <__cxa_begin_catch+0xb0>
   21ea0:	11400015 	stw	r5,0(r2)
   21ea4:	0005883a 	mov	r2,zero
   21ea8:	dfc00117 	ldw	ra,4(sp)
   21eac:	dc000017 	ldw	r16,0(sp)
   21eb0:	dec00204 	addi	sp,sp,8
   21eb4:	f800283a 	ret
   21eb8:	01c00044 	movi	r7,1
   21ebc:	39bff736 	bltu	r7,r6,21e9c <__alt_data_end+0xf4021e9c>
   21ec0:	80fffa17 	ldw	r3,-24(r16)
   21ec4:	18000d16 	blt	r3,zero,21efc <__cxa_begin_catch+0xa8>
   21ec8:	18c00044 	addi	r3,r3,1
   21ecc:	11800117 	ldw	r6,4(r2)
   21ed0:	80fffa15 	stw	r3,-24(r16)
   21ed4:	30ffffc4 	addi	r3,r6,-1
   21ed8:	10c00115 	stw	r3,4(r2)
   21edc:	21400226 	beq	r4,r5,21ee8 <__cxa_begin_catch+0x94>
   21ee0:	813ff915 	stw	r4,-28(r16)
   21ee4:	11400015 	stw	r5,0(r2)
   21ee8:	80bfff17 	ldw	r2,-4(r16)
   21eec:	dfc00117 	ldw	ra,4(sp)
   21ef0:	dc000017 	ldw	r16,0(sp)
   21ef4:	dec00204 	addi	sp,sp,8
   21ef8:	f800283a 	ret
   21efc:	38c7c83a 	sub	r3,r7,r3
   21f00:	003ff206 	br	21ecc <__alt_data_end+0xf4021ecc>
   21f04:	0021b000 	call	21b00 <_ZSt9terminatev>

00021f08 <__cxa_end_catch>:
   21f08:	deffff04 	addi	sp,sp,-4
   21f0c:	dfc00015 	stw	ra,0(sp)
   21f10:	002175c0 	call	2175c <__cxa_get_globals_fast>
   21f14:	11000017 	ldw	r4,0(r2)
   21f18:	20001326 	beq	r4,zero,21f68 <__cxa_end_catch+0x60>
   21f1c:	21400b17 	ldw	r5,44(r4)
   21f20:	01ef3574 	movhi	r7,48341
   21f24:	39f54004 	addi	r7,r7,-11008
   21f28:	29cf883a 	add	r7,r5,r7
   21f2c:	20c00c17 	ldw	r3,48(r4)
   21f30:	394d803a 	cmpltu	r6,r7,r5
   21f34:	016e2cb4 	movhi	r5,47282
   21f38:	296aaf04 	addi	r5,r5,-21828
   21f3c:	1947883a 	add	r3,r3,r5
   21f40:	30c7883a 	add	r3,r6,r3
   21f44:	18000b1e 	bne	r3,zero,21f74 <__cxa_end_catch+0x6c>
   21f48:	00c00044 	movi	r3,1
   21f4c:	19c00936 	bltu	r3,r7,21f74 <__cxa_end_catch+0x6c>
   21f50:	20c00517 	ldw	r3,20(r4)
   21f54:	18000c16 	blt	r3,zero,21f88 <__cxa_end_catch+0x80>
   21f58:	197fffc4 	addi	r5,r3,-1
   21f5c:	28000f26 	beq	r5,zero,21f9c <__cxa_end_catch+0x94>
   21f60:	18001426 	beq	r3,zero,21fb4 <__cxa_end_catch+0xac>
   21f64:	21400515 	stw	r5,20(r4)
   21f68:	dfc00017 	ldw	ra,0(sp)
   21f6c:	dec00104 	addi	sp,sp,4
   21f70:	f800283a 	ret
   21f74:	21000b04 	addi	r4,r4,44
   21f78:	10000015 	stw	zero,0(r2)
   21f7c:	dfc00017 	ldw	ra,0(sp)
   21f80:	dec00104 	addi	sp,sp,4
   21f84:	00228dc1 	jmpi	228dc <_Unwind_DeleteException>
   21f88:	19400044 	addi	r5,r3,1
   21f8c:	283ff51e 	bne	r5,zero,21f64 <__alt_data_end+0xf4021f64>
   21f90:	20c00417 	ldw	r3,16(r4)
   21f94:	10c00015 	stw	r3,0(r2)
   21f98:	003ff206 	br	21f64 <__alt_data_end+0xf4021f64>
   21f9c:	20c00417 	ldw	r3,16(r4)
   21fa0:	21000b04 	addi	r4,r4,44
   21fa4:	10c00015 	stw	r3,0(r2)
   21fa8:	dfc00017 	ldw	ra,0(sp)
   21fac:	dec00104 	addi	sp,sp,4
   21fb0:	00228dc1 	jmpi	228dc <_Unwind_DeleteException>
   21fb4:	0021b000 	call	21b00 <_ZSt9terminatev>

00021fb8 <_ZSt18uncaught_exceptionv>:
   21fb8:	deffff04 	addi	sp,sp,-4
   21fbc:	dfc00015 	stw	ra,0(sp)
   21fc0:	00217680 	call	21768 <__cxa_get_globals>
   21fc4:	10800117 	ldw	r2,4(r2)
   21fc8:	1004c03a 	cmpne	r2,r2,zero
   21fcc:	dfc00017 	ldw	ra,0(sp)
   21fd0:	dec00104 	addi	sp,sp,4
   21fd4:	f800283a 	ret

00021fd8 <__cxa_call_terminate>:
   21fd8:	defffe04 	addi	sp,sp,-8
   21fdc:	dc000015 	stw	r16,0(sp)
   21fe0:	dfc00115 	stw	ra,4(sp)
   21fe4:	2021883a 	mov	r16,r4
   21fe8:	20000c26 	beq	r4,zero,2201c <__cxa_call_terminate+0x44>
   21fec:	0021e540 	call	21e54 <__cxa_begin_catch>
   21ff0:	80c00017 	ldw	r3,0(r16)
   21ff4:	012f3574 	movhi	r4,48341
   21ff8:	21354004 	addi	r4,r4,-11008
   21ffc:	1909883a 	add	r4,r3,r4
   22000:	80800117 	ldw	r2,4(r16)
   22004:	20cb803a 	cmpltu	r5,r4,r3
   22008:	00ee2cb4 	movhi	r3,47282
   2200c:	18eaaf04 	addi	r3,r3,-21828
   22010:	10c5883a 	add	r2,r2,r3
   22014:	2885883a 	add	r2,r5,r2
   22018:	10000126 	beq	r2,zero,22020 <__cxa_call_terminate+0x48>
   2201c:	0021b000 	call	21b00 <_ZSt9terminatev>
   22020:	00800044 	movi	r2,1
   22024:	113ffd36 	bltu	r2,r4,2201c <__alt_data_end+0xf402201c>
   22028:	813ff817 	ldw	r4,-32(r16)
   2202c:	0021a400 	call	21a40 <_ZN10__cxxabiv111__terminateEPFvvE>

00022030 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   22030:	defffe04 	addi	sp,sp,-8
   22034:	dfc00115 	stw	ra,4(sp)
   22038:	dc000015 	stw	r16,0(sp)
   2203c:	00800044 	movi	r2,1
   22040:	11000a36 	bltu	r2,r4,2206c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   22044:	28bff617 	ldw	r2,-40(r5)
   22048:	2c000504 	addi	r16,r5,20
   2204c:	10000226 	beq	r2,zero,22058 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   22050:	8009883a 	mov	r4,r16
   22054:	103ee83a 	callr	r2
   22058:	8009883a 	mov	r4,r16
   2205c:	dfc00117 	ldw	ra,4(sp)
   22060:	dc000017 	ldw	r16,0(sp)
   22064:	dec00204 	addi	sp,sp,8
   22068:	00222901 	jmpi	22290 <__cxa_free_exception>
   2206c:	293ff817 	ldw	r4,-32(r5)
   22070:	0021a400 	call	21a40 <_ZN10__cxxabiv111__terminateEPFvvE>

00022074 <__cxa_throw>:
   22074:	defffb04 	addi	sp,sp,-20
   22078:	dfc00415 	stw	ra,16(sp)
   2207c:	dcc00315 	stw	r19,12(sp)
   22080:	dc800215 	stw	r18,8(sp)
   22084:	2827883a 	mov	r19,r5
   22088:	3025883a 	mov	r18,r6
   2208c:	dc400115 	stw	r17,4(sp)
   22090:	dc000015 	stw	r16,0(sp)
   22094:	2021883a 	mov	r16,r4
   22098:	00217680 	call	21768 <__cxa_get_globals>
   2209c:	10c00117 	ldw	r3,4(r2)
   220a0:	847ffb04 	addi	r17,r16,-20
   220a4:	18c00044 	addi	r3,r3,1
   220a8:	10c00115 	stw	r3,4(r2)
   220ac:	00800044 	movi	r2,1
   220b0:	80bfef15 	stw	r2,-68(r16)
   220b4:	84fff015 	stw	r19,-64(r16)
   220b8:	84bff115 	stw	r18,-60(r16)
   220bc:	0021b780 	call	21b78 <_ZSt14get_unexpectedv>
   220c0:	80bff215 	stw	r2,-56(r16)
   220c4:	0021b540 	call	21b54 <_ZSt13get_terminatev>
   220c8:	80bff315 	stw	r2,-52(r16)
   220cc:	0090caf4 	movhi	r2,17195
   220d0:	108ac004 	addi	r2,r2,11008
   220d4:	80bffb15 	stw	r2,-20(r16)
   220d8:	0091d3b4 	movhi	r2,18254
   220dc:	109550c4 	addi	r2,r2,21827
   220e0:	80bffc15 	stw	r2,-16(r16)
   220e4:	008000b4 	movhi	r2,2
   220e8:	10880c04 	addi	r2,r2,8240
   220ec:	8809883a 	mov	r4,r17
   220f0:	80bffd15 	stw	r2,-12(r16)
   220f4:	00227380 	call	22738 <_Unwind_SjLj_RaiseException>
   220f8:	8809883a 	mov	r4,r17
   220fc:	0021e540 	call	21e54 <__cxa_begin_catch>
   22100:	0021b000 	call	21b00 <_ZSt9terminatev>

00022104 <__cxa_rethrow>:
   22104:	defffe04 	addi	sp,sp,-8
   22108:	dfc00115 	stw	ra,4(sp)
   2210c:	dc000015 	stw	r16,0(sp)
   22110:	00217680 	call	21768 <__cxa_get_globals>
   22114:	10c00117 	ldw	r3,4(r2)
   22118:	11000017 	ldw	r4,0(r2)
   2211c:	18c00044 	addi	r3,r3,1
   22120:	10c00115 	stw	r3,4(r2)
   22124:	20001126 	beq	r4,zero,2216c <__cxa_rethrow+0x68>
   22128:	21400b17 	ldw	r5,44(r4)
   2212c:	01ef3574 	movhi	r7,48341
   22130:	39f54004 	addi	r7,r7,-11008
   22134:	29cf883a 	add	r7,r5,r7
   22138:	20c00c17 	ldw	r3,48(r4)
   2213c:	394d803a 	cmpltu	r6,r7,r5
   22140:	016e2cb4 	movhi	r5,47282
   22144:	296aaf04 	addi	r5,r5,-21828
   22148:	1947883a 	add	r3,r3,r5
   2214c:	30c7883a 	add	r3,r6,r3
   22150:	18000726 	beq	r3,zero,22170 <__cxa_rethrow+0x6c>
   22154:	10000015 	stw	zero,0(r2)
   22158:	24000b04 	addi	r16,r4,44
   2215c:	8009883a 	mov	r4,r16
   22160:	00228900 	call	22890 <_Unwind_SjLj_Resume_or_Rethrow>
   22164:	8009883a 	mov	r4,r16
   22168:	0021e540 	call	21e54 <__cxa_begin_catch>
   2216c:	0021b000 	call	21b00 <_ZSt9terminatev>
   22170:	00c00044 	movi	r3,1
   22174:	19fff736 	bltu	r3,r7,22154 <__alt_data_end+0xf4022154>
   22178:	20800517 	ldw	r2,20(r4)
   2217c:	0085c83a 	sub	r2,zero,r2
   22180:	20800515 	stw	r2,20(r4)
   22184:	003ff406 	br	22158 <__alt_data_end+0xf4022158>

00022188 <_ZNSt9type_infoD1Ev>:
   22188:	f800283a 	ret

0002218c <_ZNKSt9type_info14__is_pointer_pEv>:
   2218c:	0005883a 	mov	r2,zero
   22190:	f800283a 	ret

00022194 <_ZNKSt9type_info15__is_function_pEv>:
   22194:	0005883a 	mov	r2,zero
   22198:	f800283a 	ret

0002219c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   2219c:	0005883a 	mov	r2,zero
   221a0:	f800283a 	ret

000221a4 <_ZNSt9type_infoD0Ev>:
   221a4:	0021a3c1 	jmpi	21a3c <_ZdlPv>

000221a8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   221a8:	21000117 	ldw	r4,4(r4)
   221ac:	29400117 	ldw	r5,4(r5)
   221b0:	21400c26 	beq	r4,r5,221e4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   221b4:	20c00007 	ldb	r3,0(r4)
   221b8:	00800a84 	movi	r2,42
   221bc:	18800726 	beq	r3,r2,221dc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   221c0:	deffff04 	addi	sp,sp,-4
   221c4:	dfc00015 	stw	ra,0(sp)
   221c8:	00236b40 	call	236b4 <strcmp>
   221cc:	1005003a 	cmpeq	r2,r2,zero
   221d0:	dfc00017 	ldw	ra,0(sp)
   221d4:	dec00104 	addi	sp,sp,4
   221d8:	f800283a 	ret
   221dc:	0005883a 	mov	r2,zero
   221e0:	f800283a 	ret
   221e4:	00800044 	movi	r2,1
   221e8:	f800283a 	ret

000221ec <__cxa_allocate_exception>:
   221ec:	defffd04 	addi	sp,sp,-12
   221f0:	dc400115 	stw	r17,4(sp)
   221f4:	24401104 	addi	r17,r4,68
   221f8:	8809883a 	mov	r4,r17
   221fc:	dc000015 	stw	r16,0(sp)
   22200:	dfc00215 	stw	ra,8(sp)
   22204:	00229800 	call	22980 <malloc>
   22208:	1021883a 	mov	r16,r2
   2220c:	10000a26 	beq	r2,zero,22238 <__cxa_allocate_exception+0x4c>
   22210:	8009883a 	mov	r4,r16
   22214:	000b883a 	mov	r5,zero
   22218:	01801104 	movi	r6,68
   2221c:	00231500 	call	23150 <memset>
   22220:	80801104 	addi	r2,r16,68
   22224:	dfc00217 	ldw	ra,8(sp)
   22228:	dc400117 	ldw	r17,4(sp)
   2222c:	dc000017 	ldw	r16,0(sp)
   22230:	dec00304 	addi	sp,sp,12
   22234:	f800283a 	ret
   22238:	01420034 	movhi	r5,2048
   2223c:	29479404 	addi	r5,r5,7760
   22240:	00808004 	movi	r2,512
   22244:	29800017 	ldw	r6,0(r5)
   22248:	14400736 	bltu	r2,r17,22268 <__cxa_allocate_exception+0x7c>
   2224c:	3005883a 	mov	r2,r6
   22250:	01000104 	movi	r4,4
   22254:	10c0004c 	andi	r3,r2,1
   22258:	18000426 	beq	r3,zero,2226c <__cxa_allocate_exception+0x80>
   2225c:	84000044 	addi	r16,r16,1
   22260:	1004d07a 	srli	r2,r2,1
   22264:	813ffb1e 	bne	r16,r4,22254 <__alt_data_end+0xf4022254>
   22268:	0021b000 	call	21b00 <_ZSt9terminatev>
   2226c:	00800044 	movi	r2,1
   22270:	1404983a 	sll	r2,r2,r16
   22274:	8020927a 	slli	r16,r16,9
   22278:	118cb03a 	or	r6,r2,r6
   2227c:	00820034 	movhi	r2,2048
   22280:	1087e104 	addi	r2,r2,8068
   22284:	29800015 	stw	r6,0(r5)
   22288:	80a1883a 	add	r16,r16,r2
   2228c:	003fe006 	br	22210 <__alt_data_end+0xf4022210>

00022290 <__cxa_free_exception>:
   22290:	00820034 	movhi	r2,2048
   22294:	1087e104 	addi	r2,r2,8068
   22298:	20800236 	bltu	r4,r2,222a4 <__cxa_free_exception+0x14>
   2229c:	10c20004 	addi	r3,r2,2048
   222a0:	20c00236 	bltu	r4,r3,222ac <__cxa_free_exception+0x1c>
   222a4:	213fef04 	addi	r4,r4,-68
   222a8:	00229941 	jmpi	22994 <free>
   222ac:	2089c83a 	sub	r4,r4,r2
   222b0:	2008d27a 	srli	r4,r4,9
   222b4:	01420034 	movhi	r5,2048
   222b8:	29479404 	addi	r5,r5,7760
   222bc:	00ffff84 	movi	r3,-2
   222c0:	28800017 	ldw	r2,0(r5)
   222c4:	1908183a 	rol	r4,r3,r4
   222c8:	2088703a 	and	r4,r4,r2
   222cc:	29000015 	stw	r4,0(r5)
   222d0:	f800283a 	ret

000222d4 <__cxa_allocate_dependent_exception>:
   222d4:	defffe04 	addi	sp,sp,-8
   222d8:	01001004 	movi	r4,64
   222dc:	dc000015 	stw	r16,0(sp)
   222e0:	dfc00115 	stw	ra,4(sp)
   222e4:	00229800 	call	22980 <malloc>
   222e8:	1021883a 	mov	r16,r2
   222ec:	10000926 	beq	r2,zero,22314 <__cxa_allocate_dependent_exception+0x40>
   222f0:	8009883a 	mov	r4,r16
   222f4:	000b883a 	mov	r5,zero
   222f8:	01801004 	movi	r6,64
   222fc:	00231500 	call	23150 <memset>
   22300:	8005883a 	mov	r2,r16
   22304:	dfc00117 	ldw	ra,4(sp)
   22308:	dc000017 	ldw	r16,0(sp)
   2230c:	dec00204 	addi	sp,sp,8
   22310:	f800283a 	ret
   22314:	01c20034 	movhi	r7,2048
   22318:	39c79304 	addi	r7,r7,7756
   2231c:	39800017 	ldw	r6,0(r7)
   22320:	0005883a 	mov	r2,zero
   22324:	01400104 	movi	r5,4
   22328:	3007883a 	mov	r3,r6
   2232c:	1900004c 	andi	r4,r3,1
   22330:	20000426 	beq	r4,zero,22344 <__cxa_allocate_dependent_exception+0x70>
   22334:	10800044 	addi	r2,r2,1
   22338:	1806d07a 	srli	r3,r3,1
   2233c:	117ffb1e 	bne	r2,r5,2232c <__alt_data_end+0xf402232c>
   22340:	0021b000 	call	21b00 <_ZSt9terminatev>
   22344:	00c00044 	movi	r3,1
   22348:	1886983a 	sll	r3,r3,r2
   2234c:	100491ba 	slli	r2,r2,6
   22350:	04020034 	movhi	r16,2048
   22354:	198cb03a 	or	r6,r3,r6
   22358:	8407a104 	addi	r16,r16,7812
   2235c:	39800015 	stw	r6,0(r7)
   22360:	1421883a 	add	r16,r2,r16
   22364:	003fe206 	br	222f0 <__alt_data_end+0xf40222f0>

00022368 <__cxa_free_dependent_exception>:
   22368:	00820034 	movhi	r2,2048
   2236c:	1087a104 	addi	r2,r2,7812
   22370:	20800236 	bltu	r4,r2,2237c <__cxa_free_dependent_exception+0x14>
   22374:	10c04004 	addi	r3,r2,256
   22378:	20c00136 	bltu	r4,r3,22380 <__cxa_free_dependent_exception+0x18>
   2237c:	00229941 	jmpi	22994 <free>
   22380:	2089c83a 	sub	r4,r4,r2
   22384:	2008d1ba 	srli	r4,r4,6
   22388:	01420034 	movhi	r5,2048
   2238c:	29479304 	addi	r5,r5,7756
   22390:	00ffff84 	movi	r3,-2
   22394:	28800017 	ldw	r2,0(r5)
   22398:	1908183a 	rol	r4,r3,r4
   2239c:	2088703a 	and	r4,r4,r2
   223a0:	29000015 	stw	r4,0(r5)
   223a4:	f800283a 	ret

000223a8 <_ZNSt9exceptionD1Ev>:
   223a8:	f800283a 	ret

000223ac <_ZNSt13bad_exceptionD1Ev>:
   223ac:	f800283a 	ret

000223b0 <_ZNKSt9exception4whatEv>:
   223b0:	00820034 	movhi	r2,2048
   223b4:	10806f04 	addi	r2,r2,444
   223b8:	f800283a 	ret

000223bc <_ZNKSt13bad_exception4whatEv>:
   223bc:	00820034 	movhi	r2,2048
   223c0:	10807304 	addi	r2,r2,460
   223c4:	f800283a 	ret

000223c8 <_ZNSt9exceptionD0Ev>:
   223c8:	0021a3c1 	jmpi	21a3c <_ZdlPv>

000223cc <_ZNSt13bad_exceptionD0Ev>:
   223cc:	0021a3c1 	jmpi	21a3c <_ZdlPv>

000223d0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   223d0:	f800283a 	ret

000223d4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   223d4:	0021a3c1 	jmpi	21a3c <_ZdlPv>

000223d8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   223d8:	f800283a 	ret

000223dc <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   223dc:	0021a3c1 	jmpi	21a3c <_ZdlPv>

000223e0 <__cxa_pure_virtual>:
   223e0:	01420034 	movhi	r5,2048
   223e4:	deffff04 	addi	sp,sp,-4
   223e8:	2940a904 	addi	r5,r5,676
   223ec:	01000084 	movi	r4,2
   223f0:	018006c4 	movi	r6,27
   223f4:	dfc00015 	stw	ra,0(sp)
   223f8:	00268980 	call	26898 <write>
   223fc:	0021b000 	call	21b00 <_ZSt9terminatev>

00022400 <__cxa_deleted_virtual>:
   22400:	01420034 	movhi	r5,2048
   22404:	deffff04 	addi	sp,sp,-4
   22408:	2940b004 	addi	r5,r5,704
   2240c:	01000084 	movi	r4,2
   22410:	01800784 	movi	r6,30
   22414:	dfc00015 	stw	ra,0(sp)
   22418:	00268980 	call	26898 <write>
   2241c:	0021b000 	call	21b00 <_ZSt9terminatev>

00022420 <__mulsi3>:
   22420:	0005883a 	mov	r2,zero
   22424:	20000726 	beq	r4,zero,22444 <__mulsi3+0x24>
   22428:	20c0004c 	andi	r3,r4,1
   2242c:	2008d07a 	srli	r4,r4,1
   22430:	18000126 	beq	r3,zero,22438 <__mulsi3+0x18>
   22434:	1145883a 	add	r2,r2,r5
   22438:	294b883a 	add	r5,r5,r5
   2243c:	203ffa1e 	bne	r4,zero,22428 <__alt_data_end+0xf4022428>
   22440:	f800283a 	ret
   22444:	f800283a 	ret

00022448 <_Unwind_ForcedUnwind_Phase2>:
   22448:	defff404 	addi	sp,sp,-48
   2244c:	dd800915 	stw	r22,36(sp)
   22450:	05820034 	movhi	r22,2048
   22454:	ddc00a15 	stw	r23,40(sp)
   22458:	dd400815 	stw	r21,32(sp)
   2245c:	dd000715 	stw	r20,28(sp)
   22460:	dcc00615 	stw	r19,24(sp)
   22464:	dc400415 	stw	r17,16(sp)
   22468:	dc000315 	stw	r16,12(sp)
   2246c:	dfc00b15 	stw	ra,44(sp)
   22470:	dc800515 	stw	r18,20(sp)
   22474:	2021883a 	mov	r16,r4
   22478:	2823883a 	mov	r17,r5
   2247c:	24c00317 	ldw	r19,12(r4)
   22480:	25000417 	ldw	r20,16(r4)
   22484:	28c00017 	ldw	r3,0(r5)
   22488:	b5879504 	addi	r22,r22,7764
   2248c:	054001c4 	movi	r21,7
   22490:	05c00204 	movi	r23,8
   22494:	00001606 	br	224f0 <_Unwind_ForcedUnwind_Phase2+0xa8>
   22498:	81800017 	ldw	r6,0(r16)
   2249c:	81c00117 	ldw	r7,4(r16)
   224a0:	1c800617 	ldw	r18,24(r3)
   224a4:	dc000015 	stw	r16,0(sp)
   224a8:	dc400115 	stw	r17,4(sp)
   224ac:	dd000215 	stw	r20,8(sp)
   224b0:	983ee83a 	callr	r19
   224b4:	01000044 	movi	r4,1
   224b8:	01400284 	movi	r5,10
   224bc:	1000241e 	bne	r2,zero,22550 <_Unwind_ForcedUnwind_Phase2+0x108>
   224c0:	90000726 	beq	r18,zero,224e0 <_Unwind_ForcedUnwind_Phase2+0x98>
   224c4:	81800017 	ldw	r6,0(r16)
   224c8:	81c00117 	ldw	r7,4(r16)
   224cc:	dc000015 	stw	r16,0(sp)
   224d0:	dc400115 	stw	r17,4(sp)
   224d4:	903ee83a 	callr	r18
   224d8:	15401f26 	beq	r2,r21,22558 <_Unwind_ForcedUnwind_Phase2+0x110>
   224dc:	15c01c1e 	bne	r2,r23,22550 <_Unwind_ForcedUnwind_Phase2+0x108>
   224e0:	88800017 	ldw	r2,0(r17)
   224e4:	10c00017 	ldw	r3,0(r2)
   224e8:	b0c00015 	stw	r3,0(r22)
   224ec:	88c00015 	stw	r3,0(r17)
   224f0:	01000044 	movi	r4,1
   224f4:	01400284 	movi	r5,10
   224f8:	183fe71e 	bne	r3,zero,22498 <__alt_data_end+0xf4022498>
   224fc:	81800017 	ldw	r6,0(r16)
   22500:	81c00117 	ldw	r7,4(r16)
   22504:	01000044 	movi	r4,1
   22508:	dc000015 	stw	r16,0(sp)
   2250c:	dc400115 	stw	r17,4(sp)
   22510:	dd000215 	stw	r20,8(sp)
   22514:	01400684 	movi	r5,26
   22518:	983ee83a 	callr	r19
   2251c:	10000c1e 	bne	r2,zero,22550 <_Unwind_ForcedUnwind_Phase2+0x108>
   22520:	00800144 	movi	r2,5
   22524:	dfc00b17 	ldw	ra,44(sp)
   22528:	ddc00a17 	ldw	r23,40(sp)
   2252c:	dd800917 	ldw	r22,36(sp)
   22530:	dd400817 	ldw	r21,32(sp)
   22534:	dd000717 	ldw	r20,28(sp)
   22538:	dcc00617 	ldw	r19,24(sp)
   2253c:	dc800517 	ldw	r18,20(sp)
   22540:	dc400417 	ldw	r17,16(sp)
   22544:	dc000317 	ldw	r16,12(sp)
   22548:	dec00c04 	addi	sp,sp,48
   2254c:	f800283a 	ret
   22550:	00800084 	movi	r2,2
   22554:	003ff306 	br	22524 <__alt_data_end+0xf4022524>
   22558:	a805883a 	mov	r2,r21
   2255c:	003ff106 	br	22524 <__alt_data_end+0xf4022524>

00022560 <_Unwind_RaiseException_Phase2>:
   22560:	28c00017 	ldw	r3,0(r5)
   22564:	defff804 	addi	sp,sp,-32
   22568:	dcc00515 	stw	r19,20(sp)
   2256c:	dc800415 	stw	r18,16(sp)
   22570:	dc400315 	stw	r17,12(sp)
   22574:	dc000215 	stw	r16,8(sp)
   22578:	dfc00715 	stw	ra,28(sp)
   2257c:	dd000615 	stw	r20,24(sp)
   22580:	2823883a 	mov	r17,r5
   22584:	2021883a 	mov	r16,r4
   22588:	048001c4 	movi	r18,7
   2258c:	04c00204 	movi	r19,8
   22590:	18001326 	beq	r3,zero,225e0 <_Unwind_RaiseException_Phase2+0x80>
   22594:	81000417 	ldw	r4,16(r16)
   22598:	1a000617 	ldw	r8,24(r3)
   2259c:	19001c26 	beq	r3,r4,22610 <_Unwind_RaiseException_Phase2+0xb0>
   225a0:	40000b26 	beq	r8,zero,225d0 <_Unwind_RaiseException_Phase2+0x70>
   225a4:	01400084 	movi	r5,2
   225a8:	0029883a 	mov	r20,zero
   225ac:	81800017 	ldw	r6,0(r16)
   225b0:	81c00117 	ldw	r7,4(r16)
   225b4:	01000044 	movi	r4,1
   225b8:	dc000015 	stw	r16,0(sp)
   225bc:	dc400115 	stw	r17,4(sp)
   225c0:	403ee83a 	callr	r8
   225c4:	14800f26 	beq	r2,r18,22604 <_Unwind_RaiseException_Phase2+0xa4>
   225c8:	14c0051e 	bne	r2,r19,225e0 <_Unwind_RaiseException_Phase2+0x80>
   225cc:	a0000f1e 	bne	r20,zero,2260c <_Unwind_RaiseException_Phase2+0xac>
   225d0:	88c00017 	ldw	r3,0(r17)
   225d4:	18c00017 	ldw	r3,0(r3)
   225d8:	88c00015 	stw	r3,0(r17)
   225dc:	183fed1e 	bne	r3,zero,22594 <__alt_data_end+0xf4022594>
   225e0:	00800084 	movi	r2,2
   225e4:	dfc00717 	ldw	ra,28(sp)
   225e8:	dd000617 	ldw	r20,24(sp)
   225ec:	dcc00517 	ldw	r19,20(sp)
   225f0:	dc800417 	ldw	r18,16(sp)
   225f4:	dc400317 	ldw	r17,12(sp)
   225f8:	dc000217 	ldw	r16,8(sp)
   225fc:	dec00804 	addi	sp,sp,32
   22600:	f800283a 	ret
   22604:	9005883a 	mov	r2,r18
   22608:	003ff606 	br	225e4 <__alt_data_end+0xf40225e4>
   2260c:	00229680 	call	22968 <abort>
   22610:	403ffe26 	beq	r8,zero,2260c <__alt_data_end+0xf402260c>
   22614:	01400184 	movi	r5,6
   22618:	05000104 	movi	r20,4
   2261c:	003fe306 	br	225ac <__alt_data_end+0xf40225ac>

00022620 <uw_install_context.isra.1>:
   22620:	20c00017 	ldw	r3,0(r4)
   22624:	deffff04 	addi	sp,sp,-4
   22628:	01420034 	movhi	r5,2048
   2262c:	19000917 	ldw	r4,36(r3)
   22630:	df000015 	stw	fp,0(sp)
   22634:	18800804 	addi	r2,r3,32
   22638:	d839883a 	mov	fp,sp
   2263c:	29479504 	addi	r5,r5,7764
   22640:	28c00015 	stw	r3,0(r5)
   22644:	17000017 	ldw	fp,0(r2)
   22648:	1ec00a17 	ldw	sp,40(r3)
   2264c:	2000683a 	jmp	r4

00022650 <_Unwind_SjLj_Register>:
   22650:	00820034 	movhi	r2,2048
   22654:	10879504 	addi	r2,r2,7764
   22658:	10c00017 	ldw	r3,0(r2)
   2265c:	11000015 	stw	r4,0(r2)
   22660:	20c00015 	stw	r3,0(r4)
   22664:	f800283a 	ret

00022668 <_Unwind_SjLj_Unregister>:
   22668:	20c00017 	ldw	r3,0(r4)
   2266c:	00820034 	movhi	r2,2048
   22670:	10879504 	addi	r2,r2,7764
   22674:	10c00015 	stw	r3,0(r2)
   22678:	f800283a 	ret

0002267c <_Unwind_GetGR>:
   2267c:	20800017 	ldw	r2,0(r4)
   22680:	29400084 	addi	r5,r5,2
   22684:	294b883a 	add	r5,r5,r5
   22688:	294b883a 	add	r5,r5,r5
   2268c:	114b883a 	add	r5,r2,r5
   22690:	28800017 	ldw	r2,0(r5)
   22694:	f800283a 	ret

00022698 <_Unwind_GetCFA>:
   22698:	20800017 	ldw	r2,0(r4)
   2269c:	10000226 	beq	r2,zero,226a8 <_Unwind_GetCFA+0x10>
   226a0:	10800a17 	ldw	r2,40(r2)
   226a4:	f800283a 	ret
   226a8:	0005883a 	mov	r2,zero
   226ac:	f800283a 	ret

000226b0 <_Unwind_SetGR>:
   226b0:	20800017 	ldw	r2,0(r4)
   226b4:	29400084 	addi	r5,r5,2
   226b8:	294b883a 	add	r5,r5,r5
   226bc:	294b883a 	add	r5,r5,r5
   226c0:	114b883a 	add	r5,r2,r5
   226c4:	29800015 	stw	r6,0(r5)
   226c8:	f800283a 	ret

000226cc <_Unwind_GetIP>:
   226cc:	20800017 	ldw	r2,0(r4)
   226d0:	10800117 	ldw	r2,4(r2)
   226d4:	10800044 	addi	r2,r2,1
   226d8:	f800283a 	ret

000226dc <_Unwind_GetIPInfo>:
   226dc:	20800017 	ldw	r2,0(r4)
   226e0:	28000015 	stw	zero,0(r5)
   226e4:	10000326 	beq	r2,zero,226f4 <_Unwind_GetIPInfo+0x18>
   226e8:	10800117 	ldw	r2,4(r2)
   226ec:	10800044 	addi	r2,r2,1
   226f0:	f800283a 	ret
   226f4:	0005883a 	mov	r2,zero
   226f8:	f800283a 	ret

000226fc <_Unwind_SetIP>:
   226fc:	20800017 	ldw	r2,0(r4)
   22700:	297fffc4 	addi	r5,r5,-1
   22704:	11400115 	stw	r5,4(r2)
   22708:	f800283a 	ret

0002270c <_Unwind_GetLanguageSpecificData>:
   2270c:	20800017 	ldw	r2,0(r4)
   22710:	10800717 	ldw	r2,28(r2)
   22714:	f800283a 	ret

00022718 <_Unwind_GetRegionStart>:
   22718:	0005883a 	mov	r2,zero
   2271c:	f800283a 	ret

00022720 <_Unwind_FindEnclosingFunction>:
   22720:	0005883a 	mov	r2,zero
   22724:	f800283a 	ret

00022728 <_Unwind_GetDataRelBase>:
   22728:	0005883a 	mov	r2,zero
   2272c:	f800283a 	ret

00022730 <_Unwind_GetTextRelBase>:
   22730:	0005883a 	mov	r2,zero
   22734:	f800283a 	ret

00022738 <_Unwind_SjLj_RaiseException>:
   22738:	00820034 	movhi	r2,2048
   2273c:	defff804 	addi	sp,sp,-32
   22740:	10879504 	addi	r2,r2,7764
   22744:	dc800515 	stw	r18,20(sp)
   22748:	14800017 	ldw	r18,0(r2)
   2274c:	dfc00715 	stw	ra,28(sp)
   22750:	dcc00615 	stw	r19,24(sp)
   22754:	dc400415 	stw	r17,16(sp)
   22758:	dc000315 	stw	r16,12(sp)
   2275c:	dc800215 	stw	r18,8(sp)
   22760:	90001426 	beq	r18,zero,227b4 <_Unwind_SjLj_RaiseException+0x7c>
   22764:	2021883a 	mov	r16,r4
   22768:	9005883a 	mov	r2,r18
   2276c:	04400184 	movi	r17,6
   22770:	04c00204 	movi	r19,8
   22774:	10800617 	ldw	r2,24(r2)
   22778:	10000a26 	beq	r2,zero,227a4 <_Unwind_SjLj_RaiseException+0x6c>
   2277c:	81800017 	ldw	r6,0(r16)
   22780:	81c00117 	ldw	r7,4(r16)
   22784:	01000044 	movi	r4,1
   22788:	d8c00204 	addi	r3,sp,8
   2278c:	dc000015 	stw	r16,0(sp)
   22790:	d8c00115 	stw	r3,4(sp)
   22794:	200b883a 	mov	r5,r4
   22798:	103ee83a 	callr	r2
   2279c:	14400d26 	beq	r2,r17,227d4 <_Unwind_SjLj_RaiseException+0x9c>
   227a0:	14c0171e 	bne	r2,r19,22800 <_Unwind_SjLj_RaiseException+0xc8>
   227a4:	d8800217 	ldw	r2,8(sp)
   227a8:	10800017 	ldw	r2,0(r2)
   227ac:	d8800215 	stw	r2,8(sp)
   227b0:	103ff01e 	bne	r2,zero,22774 <__alt_data_end+0xf4022774>
   227b4:	00800144 	movi	r2,5
   227b8:	dfc00717 	ldw	ra,28(sp)
   227bc:	dcc00617 	ldw	r19,24(sp)
   227c0:	dc800517 	ldw	r18,20(sp)
   227c4:	dc400417 	ldw	r17,16(sp)
   227c8:	dc000317 	ldw	r16,12(sp)
   227cc:	dec00804 	addi	sp,sp,32
   227d0:	f800283a 	ret
   227d4:	d8800217 	ldw	r2,8(sp)
   227d8:	80000315 	stw	zero,12(r16)
   227dc:	8009883a 	mov	r4,r16
   227e0:	80800415 	stw	r2,16(r16)
   227e4:	d9400204 	addi	r5,sp,8
   227e8:	dc800215 	stw	r18,8(sp)
   227ec:	00225600 	call	22560 <_Unwind_RaiseException_Phase2>
   227f0:	00c001c4 	movi	r3,7
   227f4:	10fff01e 	bne	r2,r3,227b8 <__alt_data_end+0xf40227b8>
   227f8:	d9000204 	addi	r4,sp,8
   227fc:	00226200 	call	22620 <uw_install_context.isra.1>
   22800:	008000c4 	movi	r2,3
   22804:	003fec06 	br	227b8 <__alt_data_end+0xf40227b8>

00022808 <_Unwind_SjLj_ForcedUnwind>:
   22808:	00c20034 	movhi	r3,2048
   2280c:	18c79504 	addi	r3,r3,7764
   22810:	defffe04 	addi	sp,sp,-8
   22814:	18c00017 	ldw	r3,0(r3)
   22818:	dfc00115 	stw	ra,4(sp)
   2281c:	21400315 	stw	r5,12(r4)
   22820:	21800415 	stw	r6,16(r4)
   22824:	d80b883a 	mov	r5,sp
   22828:	d8c00015 	stw	r3,0(sp)
   2282c:	00224480 	call	22448 <_Unwind_ForcedUnwind_Phase2>
   22830:	00c001c4 	movi	r3,7
   22834:	10c00326 	beq	r2,r3,22844 <_Unwind_SjLj_ForcedUnwind+0x3c>
   22838:	dfc00117 	ldw	ra,4(sp)
   2283c:	dec00204 	addi	sp,sp,8
   22840:	f800283a 	ret
   22844:	d809883a 	mov	r4,sp
   22848:	00226200 	call	22620 <uw_install_context.isra.1>

0002284c <_Unwind_SjLj_Resume>:
   2284c:	00c20034 	movhi	r3,2048
   22850:	18c79504 	addi	r3,r3,7764
   22854:	18c00017 	ldw	r3,0(r3)
   22858:	20800317 	ldw	r2,12(r4)
   2285c:	defffe04 	addi	sp,sp,-8
   22860:	dfc00115 	stw	ra,4(sp)
   22864:	d8c00015 	stw	r3,0(sp)
   22868:	d80b883a 	mov	r5,sp
   2286c:	1000041e 	bne	r2,zero,22880 <_Unwind_SjLj_Resume+0x34>
   22870:	00225600 	call	22560 <_Unwind_RaiseException_Phase2>
   22874:	00c001c4 	movi	r3,7
   22878:	10c00326 	beq	r2,r3,22888 <_Unwind_SjLj_Resume+0x3c>
   2287c:	00229680 	call	22968 <abort>
   22880:	00224480 	call	22448 <_Unwind_ForcedUnwind_Phase2>
   22884:	003ffb06 	br	22874 <__alt_data_end+0xf4022874>
   22888:	d809883a 	mov	r4,sp
   2288c:	00226200 	call	22620 <uw_install_context.isra.1>

00022890 <_Unwind_SjLj_Resume_or_Rethrow>:
   22890:	20800317 	ldw	r2,12(r4)
   22894:	defffe04 	addi	sp,sp,-8
   22898:	dfc00115 	stw	ra,4(sp)
   2289c:	1000041e 	bne	r2,zero,228b0 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   228a0:	00227380 	call	22738 <_Unwind_SjLj_RaiseException>
   228a4:	dfc00117 	ldw	ra,4(sp)
   228a8:	dec00204 	addi	sp,sp,8
   228ac:	f800283a 	ret
   228b0:	00820034 	movhi	r2,2048
   228b4:	10879504 	addi	r2,r2,7764
   228b8:	10800017 	ldw	r2,0(r2)
   228bc:	d80b883a 	mov	r5,sp
   228c0:	d8800015 	stw	r2,0(sp)
   228c4:	00224480 	call	22448 <_Unwind_ForcedUnwind_Phase2>
   228c8:	00c001c4 	movi	r3,7
   228cc:	10c00126 	beq	r2,r3,228d4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   228d0:	00229680 	call	22968 <abort>
   228d4:	d809883a 	mov	r4,sp
   228d8:	00226200 	call	22620 <uw_install_context.isra.1>

000228dc <_Unwind_DeleteException>:
   228dc:	20800217 	ldw	r2,8(r4)
   228e0:	200b883a 	mov	r5,r4
   228e4:	10000226 	beq	r2,zero,228f0 <_Unwind_DeleteException+0x14>
   228e8:	01000044 	movi	r4,1
   228ec:	1000683a 	jmp	r2
   228f0:	f800283a 	ret

000228f4 <_Unwind_Backtrace>:
   228f4:	00820034 	movhi	r2,2048
   228f8:	10879504 	addi	r2,r2,7764
   228fc:	10800017 	ldw	r2,0(r2)
   22900:	defffc04 	addi	sp,sp,-16
   22904:	dc400215 	stw	r17,8(sp)
   22908:	dc000115 	stw	r16,4(sp)
   2290c:	dfc00315 	stw	ra,12(sp)
   22910:	2023883a 	mov	r17,r4
   22914:	2821883a 	mov	r16,r5
   22918:	d8800015 	stw	r2,0(sp)
   2291c:	00000506 	br	22934 <_Unwind_Backtrace+0x40>
   22920:	883ee83a 	callr	r17
   22924:	10000e1e 	bne	r2,zero,22960 <_Unwind_Backtrace+0x6c>
   22928:	d8800017 	ldw	r2,0(sp)
   2292c:	10800017 	ldw	r2,0(r2)
   22930:	d8800015 	stw	r2,0(sp)
   22934:	d809883a 	mov	r4,sp
   22938:	800b883a 	mov	r5,r16
   2293c:	103ff81e 	bne	r2,zero,22920 <__alt_data_end+0xf4022920>
   22940:	883ee83a 	callr	r17
   22944:	1000061e 	bne	r2,zero,22960 <_Unwind_Backtrace+0x6c>
   22948:	00800144 	movi	r2,5
   2294c:	dfc00317 	ldw	ra,12(sp)
   22950:	dc400217 	ldw	r17,8(sp)
   22954:	dc000117 	ldw	r16,4(sp)
   22958:	dec00404 	addi	sp,sp,16
   2295c:	f800283a 	ret
   22960:	008000c4 	movi	r2,3
   22964:	003ff906 	br	2294c <__alt_data_end+0xf402294c>

00022968 <abort>:
   22968:	deffff04 	addi	sp,sp,-4
   2296c:	01000184 	movi	r4,6
   22970:	dfc00015 	stw	ra,0(sp)
   22974:	00236040 	call	23604 <raise>
   22978:	01000044 	movi	r4,1
   2297c:	0025cb80 	call	25cb8 <_exit>

00022980 <malloc>:
   22980:	00820034 	movhi	r2,2048
   22984:	10878604 	addi	r2,r2,7704
   22988:	200b883a 	mov	r5,r4
   2298c:	11000017 	ldw	r4,0(r2)
   22990:	00229a81 	jmpi	229a8 <_malloc_r>

00022994 <free>:
   22994:	00820034 	movhi	r2,2048
   22998:	10878604 	addi	r2,r2,7704
   2299c:	200b883a 	mov	r5,r4
   229a0:	11000017 	ldw	r4,0(r2)
   229a4:	00239141 	jmpi	23914 <_free_r>

000229a8 <_malloc_r>:
   229a8:	defff504 	addi	sp,sp,-44
   229ac:	dc800315 	stw	r18,12(sp)
   229b0:	dfc00a15 	stw	ra,40(sp)
   229b4:	df000915 	stw	fp,36(sp)
   229b8:	ddc00815 	stw	r23,32(sp)
   229bc:	dd800715 	stw	r22,28(sp)
   229c0:	dd400615 	stw	r21,24(sp)
   229c4:	dd000515 	stw	r20,20(sp)
   229c8:	dcc00415 	stw	r19,16(sp)
   229cc:	dc400215 	stw	r17,8(sp)
   229d0:	dc000115 	stw	r16,4(sp)
   229d4:	288002c4 	addi	r2,r5,11
   229d8:	00c00584 	movi	r3,22
   229dc:	2025883a 	mov	r18,r4
   229e0:	18802a2e 	bgeu	r3,r2,22a8c <_malloc_r+0xe4>
   229e4:	047ffe04 	movi	r17,-8
   229e8:	1462703a 	and	r17,r2,r17
   229ec:	88009e16 	blt	r17,zero,22c68 <_malloc_r+0x2c0>
   229f0:	89409d36 	bltu	r17,r5,22c68 <_malloc_r+0x2c0>
   229f4:	00263180 	call	26318 <__malloc_lock>
   229f8:	00807dc4 	movi	r2,503
   229fc:	14402736 	bltu	r2,r17,22a9c <_malloc_r+0xf4>
   22a00:	8806d0fa 	srli	r3,r17,3
   22a04:	04c20034 	movhi	r19,2048
   22a08:	9cc0d204 	addi	r19,r19,840
   22a0c:	18c5883a 	add	r2,r3,r3
   22a10:	1085883a 	add	r2,r2,r2
   22a14:	1085883a 	add	r2,r2,r2
   22a18:	9885883a 	add	r2,r19,r2
   22a1c:	14000317 	ldw	r16,12(r2)
   22a20:	80814a26 	beq	r16,r2,22f4c <_malloc_r+0x5a4>
   22a24:	80c00117 	ldw	r3,4(r16)
   22a28:	81000317 	ldw	r4,12(r16)
   22a2c:	00bfff04 	movi	r2,-4
   22a30:	1884703a 	and	r2,r3,r2
   22a34:	81400217 	ldw	r5,8(r16)
   22a38:	8085883a 	add	r2,r16,r2
   22a3c:	10c00117 	ldw	r3,4(r2)
   22a40:	29000315 	stw	r4,12(r5)
   22a44:	21400215 	stw	r5,8(r4)
   22a48:	18c00054 	ori	r3,r3,1
   22a4c:	10c00115 	stw	r3,4(r2)
   22a50:	9009883a 	mov	r4,r18
   22a54:	00263380 	call	26338 <__malloc_unlock>
   22a58:	80800204 	addi	r2,r16,8
   22a5c:	dfc00a17 	ldw	ra,40(sp)
   22a60:	df000917 	ldw	fp,36(sp)
   22a64:	ddc00817 	ldw	r23,32(sp)
   22a68:	dd800717 	ldw	r22,28(sp)
   22a6c:	dd400617 	ldw	r21,24(sp)
   22a70:	dd000517 	ldw	r20,20(sp)
   22a74:	dcc00417 	ldw	r19,16(sp)
   22a78:	dc800317 	ldw	r18,12(sp)
   22a7c:	dc400217 	ldw	r17,8(sp)
   22a80:	dc000117 	ldw	r16,4(sp)
   22a84:	dec00b04 	addi	sp,sp,44
   22a88:	f800283a 	ret
   22a8c:	04400404 	movi	r17,16
   22a90:	89407536 	bltu	r17,r5,22c68 <_malloc_r+0x2c0>
   22a94:	00263180 	call	26318 <__malloc_lock>
   22a98:	003fd906 	br	22a00 <__alt_data_end+0xf4022a00>
   22a9c:	8806d27a 	srli	r3,r17,9
   22aa0:	18007526 	beq	r3,zero,22c78 <_malloc_r+0x2d0>
   22aa4:	00800104 	movi	r2,4
   22aa8:	10c0ef36 	bltu	r2,r3,22e68 <_malloc_r+0x4c0>
   22aac:	8806d1ba 	srli	r3,r17,6
   22ab0:	19c00e04 	addi	r7,r3,56
   22ab4:	39cb883a 	add	r5,r7,r7
   22ab8:	04c20034 	movhi	r19,2048
   22abc:	294b883a 	add	r5,r5,r5
   22ac0:	9cc0d204 	addi	r19,r19,840
   22ac4:	294b883a 	add	r5,r5,r5
   22ac8:	994b883a 	add	r5,r19,r5
   22acc:	2c000317 	ldw	r16,12(r5)
   22ad0:	2c000e26 	beq	r5,r16,22b0c <_malloc_r+0x164>
   22ad4:	80800117 	ldw	r2,4(r16)
   22ad8:	01bfff04 	movi	r6,-4
   22adc:	010003c4 	movi	r4,15
   22ae0:	1184703a 	and	r2,r2,r6
   22ae4:	1447c83a 	sub	r3,r2,r17
   22ae8:	20c00716 	blt	r4,r3,22b08 <_malloc_r+0x160>
   22aec:	1800650e 	bge	r3,zero,22c84 <_malloc_r+0x2dc>
   22af0:	84000317 	ldw	r16,12(r16)
   22af4:	2c000526 	beq	r5,r16,22b0c <_malloc_r+0x164>
   22af8:	80800117 	ldw	r2,4(r16)
   22afc:	1184703a 	and	r2,r2,r6
   22b00:	1447c83a 	sub	r3,r2,r17
   22b04:	20fff90e 	bge	r4,r3,22aec <__alt_data_end+0xf4022aec>
   22b08:	39ffffc4 	addi	r7,r7,-1
   22b0c:	38c00044 	addi	r3,r7,1
   22b10:	01820034 	movhi	r6,2048
   22b14:	9c000417 	ldw	r16,16(r19)
   22b18:	3180d204 	addi	r6,r6,840
   22b1c:	32400204 	addi	r9,r6,8
   22b20:	82410326 	beq	r16,r9,22f30 <_malloc_r+0x588>
   22b24:	81000117 	ldw	r4,4(r16)
   22b28:	00bfff04 	movi	r2,-4
   22b2c:	208e703a 	and	r7,r4,r2
   22b30:	3c45c83a 	sub	r2,r7,r17
   22b34:	010003c4 	movi	r4,15
   22b38:	2080ee16 	blt	r4,r2,22ef4 <_malloc_r+0x54c>
   22b3c:	32400515 	stw	r9,20(r6)
   22b40:	32400415 	stw	r9,16(r6)
   22b44:	1000510e 	bge	r2,zero,22c8c <_malloc_r+0x2e4>
   22b48:	00807fc4 	movi	r2,511
   22b4c:	11c0ce36 	bltu	r2,r7,22e88 <_malloc_r+0x4e0>
   22b50:	3808d0fa 	srli	r4,r7,3
   22b54:	01c00044 	movi	r7,1
   22b58:	30800117 	ldw	r2,4(r6)
   22b5c:	210b883a 	add	r5,r4,r4
   22b60:	294b883a 	add	r5,r5,r5
   22b64:	2009d0ba 	srai	r4,r4,2
   22b68:	294b883a 	add	r5,r5,r5
   22b6c:	298b883a 	add	r5,r5,r6
   22b70:	2a000217 	ldw	r8,8(r5)
   22b74:	3908983a 	sll	r4,r7,r4
   22b78:	81400315 	stw	r5,12(r16)
   22b7c:	82000215 	stw	r8,8(r16)
   22b80:	2088b03a 	or	r4,r4,r2
   22b84:	2c000215 	stw	r16,8(r5)
   22b88:	31000115 	stw	r4,4(r6)
   22b8c:	44000315 	stw	r16,12(r8)
   22b90:	1805d0ba 	srai	r2,r3,2
   22b94:	01400044 	movi	r5,1
   22b98:	288a983a 	sll	r5,r5,r2
   22b9c:	21404336 	bltu	r4,r5,22cac <_malloc_r+0x304>
   22ba0:	2144703a 	and	r2,r4,r5
   22ba4:	10000a1e 	bne	r2,zero,22bd0 <_malloc_r+0x228>
   22ba8:	00bfff04 	movi	r2,-4
   22bac:	294b883a 	add	r5,r5,r5
   22bb0:	1886703a 	and	r3,r3,r2
   22bb4:	2144703a 	and	r2,r4,r5
   22bb8:	18c00104 	addi	r3,r3,4
   22bbc:	1000041e 	bne	r2,zero,22bd0 <_malloc_r+0x228>
   22bc0:	294b883a 	add	r5,r5,r5
   22bc4:	2144703a 	and	r2,r4,r5
   22bc8:	18c00104 	addi	r3,r3,4
   22bcc:	103ffc26 	beq	r2,zero,22bc0 <__alt_data_end+0xf4022bc0>
   22bd0:	023fff04 	movi	r8,-4
   22bd4:	01c003c4 	movi	r7,15
   22bd8:	18c5883a 	add	r2,r3,r3
   22bdc:	1085883a 	add	r2,r2,r2
   22be0:	1085883a 	add	r2,r2,r2
   22be4:	9895883a 	add	r10,r19,r2
   22be8:	52c00304 	addi	r11,r10,12
   22bec:	1819883a 	mov	r12,r3
   22bf0:	5c000017 	ldw	r16,0(r11)
   22bf4:	59bffd04 	addi	r6,r11,-12
   22bf8:	8180041e 	bne	r16,r6,22c0c <_malloc_r+0x264>
   22bfc:	0000ce06 	br	22f38 <_malloc_r+0x590>
   22c00:	2000d70e 	bge	r4,zero,22f60 <_malloc_r+0x5b8>
   22c04:	84000317 	ldw	r16,12(r16)
   22c08:	8180cb26 	beq	r16,r6,22f38 <_malloc_r+0x590>
   22c0c:	80800117 	ldw	r2,4(r16)
   22c10:	1204703a 	and	r2,r2,r8
   22c14:	1449c83a 	sub	r4,r2,r17
   22c18:	393ff90e 	bge	r7,r4,22c00 <__alt_data_end+0xf4022c00>
   22c1c:	80800317 	ldw	r2,12(r16)
   22c20:	80c00217 	ldw	r3,8(r16)
   22c24:	89400054 	ori	r5,r17,1
   22c28:	81400115 	stw	r5,4(r16)
   22c2c:	18800315 	stw	r2,12(r3)
   22c30:	10c00215 	stw	r3,8(r2)
   22c34:	8463883a 	add	r17,r16,r17
   22c38:	9c400515 	stw	r17,20(r19)
   22c3c:	9c400415 	stw	r17,16(r19)
   22c40:	20800054 	ori	r2,r4,1
   22c44:	88800115 	stw	r2,4(r17)
   22c48:	8a400315 	stw	r9,12(r17)
   22c4c:	8a400215 	stw	r9,8(r17)
   22c50:	8923883a 	add	r17,r17,r4
   22c54:	89000015 	stw	r4,0(r17)
   22c58:	9009883a 	mov	r4,r18
   22c5c:	00263380 	call	26338 <__malloc_unlock>
   22c60:	80800204 	addi	r2,r16,8
   22c64:	003f7d06 	br	22a5c <__alt_data_end+0xf4022a5c>
   22c68:	00800304 	movi	r2,12
   22c6c:	90800015 	stw	r2,0(r18)
   22c70:	0005883a 	mov	r2,zero
   22c74:	003f7906 	br	22a5c <__alt_data_end+0xf4022a5c>
   22c78:	01401f84 	movi	r5,126
   22c7c:	01c00fc4 	movi	r7,63
   22c80:	003f8d06 	br	22ab8 <__alt_data_end+0xf4022ab8>
   22c84:	81000317 	ldw	r4,12(r16)
   22c88:	003f6a06 	br	22a34 <__alt_data_end+0xf4022a34>
   22c8c:	81c5883a 	add	r2,r16,r7
   22c90:	10c00117 	ldw	r3,4(r2)
   22c94:	9009883a 	mov	r4,r18
   22c98:	18c00054 	ori	r3,r3,1
   22c9c:	10c00115 	stw	r3,4(r2)
   22ca0:	00263380 	call	26338 <__malloc_unlock>
   22ca4:	80800204 	addi	r2,r16,8
   22ca8:	003f6c06 	br	22a5c <__alt_data_end+0xf4022a5c>
   22cac:	9c000217 	ldw	r16,8(r19)
   22cb0:	00bfff04 	movi	r2,-4
   22cb4:	85800117 	ldw	r22,4(r16)
   22cb8:	b0ac703a 	and	r22,r22,r2
   22cbc:	b4400336 	bltu	r22,r17,22ccc <_malloc_r+0x324>
   22cc0:	b445c83a 	sub	r2,r22,r17
   22cc4:	00c003c4 	movi	r3,15
   22cc8:	18805d16 	blt	r3,r2,22e40 <_malloc_r+0x498>
   22ccc:	05c20034 	movhi	r23,2048
   22cd0:	00820034 	movhi	r2,2048
   22cd4:	bdc78304 	addi	r23,r23,7692
   22cd8:	10879804 	addi	r2,r2,7776
   22cdc:	15400017 	ldw	r21,0(r2)
   22ce0:	b9000017 	ldw	r4,0(r23)
   22ce4:	00ffffc4 	movi	r3,-1
   22ce8:	858d883a 	add	r6,r16,r22
   22cec:	8d6b883a 	add	r21,r17,r21
   22cf0:	20c0e426 	beq	r4,r3,23084 <_malloc_r+0x6dc>
   22cf4:	ad4403c4 	addi	r21,r21,4111
   22cf8:	00fc0004 	movi	r3,-4096
   22cfc:	a8ea703a 	and	r21,r21,r3
   22d00:	9009883a 	mov	r4,r18
   22d04:	a80b883a 	mov	r5,r21
   22d08:	d9800015 	stw	r6,0(sp)
   22d0c:	00233600 	call	23360 <_sbrk_r>
   22d10:	00ffffc4 	movi	r3,-1
   22d14:	1029883a 	mov	r20,r2
   22d18:	d9800017 	ldw	r6,0(sp)
   22d1c:	10c0a426 	beq	r2,r3,22fb0 <_malloc_r+0x608>
   22d20:	1180a236 	bltu	r2,r6,22fac <_malloc_r+0x604>
   22d24:	07020034 	movhi	fp,2048
   22d28:	e709e104 	addi	fp,fp,10116
   22d2c:	e0c00017 	ldw	r3,0(fp)
   22d30:	a8c7883a 	add	r3,r21,r3
   22d34:	e0c00015 	stw	r3,0(fp)
   22d38:	3500da26 	beq	r6,r20,230a4 <_malloc_r+0x6fc>
   22d3c:	b9000017 	ldw	r4,0(r23)
   22d40:	00bfffc4 	movi	r2,-1
   22d44:	2080e426 	beq	r4,r2,230d8 <_malloc_r+0x730>
   22d48:	a185c83a 	sub	r2,r20,r6
   22d4c:	1885883a 	add	r2,r3,r2
   22d50:	e0800015 	stw	r2,0(fp)
   22d54:	a0c001cc 	andi	r3,r20,7
   22d58:	1800b526 	beq	r3,zero,23030 <_malloc_r+0x688>
   22d5c:	a0e9c83a 	sub	r20,r20,r3
   22d60:	00840204 	movi	r2,4104
   22d64:	a5000204 	addi	r20,r20,8
   22d68:	10c7c83a 	sub	r3,r2,r3
   22d6c:	a545883a 	add	r2,r20,r21
   22d70:	1083ffcc 	andi	r2,r2,4095
   22d74:	18abc83a 	sub	r21,r3,r2
   22d78:	9009883a 	mov	r4,r18
   22d7c:	a80b883a 	mov	r5,r21
   22d80:	00233600 	call	23360 <_sbrk_r>
   22d84:	00ffffc4 	movi	r3,-1
   22d88:	10c0d026 	beq	r2,r3,230cc <_malloc_r+0x724>
   22d8c:	1507c83a 	sub	r3,r2,r20
   22d90:	a8c7883a 	add	r3,r21,r3
   22d94:	18c00054 	ori	r3,r3,1
   22d98:	e0800017 	ldw	r2,0(fp)
   22d9c:	9d000215 	stw	r20,8(r19)
   22da0:	a0c00115 	stw	r3,4(r20)
   22da4:	a887883a 	add	r3,r21,r2
   22da8:	e0c00015 	stw	r3,0(fp)
   22dac:	84c00e26 	beq	r16,r19,22de8 <_malloc_r+0x440>
   22db0:	018003c4 	movi	r6,15
   22db4:	3580a02e 	bgeu	r6,r22,23038 <_malloc_r+0x690>
   22db8:	81400117 	ldw	r5,4(r16)
   22dbc:	013ffe04 	movi	r4,-8
   22dc0:	b0bffd04 	addi	r2,r22,-12
   22dc4:	1104703a 	and	r2,r2,r4
   22dc8:	2900004c 	andi	r4,r5,1
   22dcc:	1108b03a 	or	r4,r2,r4
   22dd0:	81000115 	stw	r4,4(r16)
   22dd4:	01400144 	movi	r5,5
   22dd8:	8089883a 	add	r4,r16,r2
   22ddc:	21400115 	stw	r5,4(r4)
   22de0:	21400215 	stw	r5,8(r4)
   22de4:	3080c036 	bltu	r6,r2,230e8 <_malloc_r+0x740>
   22de8:	00820034 	movhi	r2,2048
   22dec:	10879704 	addi	r2,r2,7772
   22df0:	11000017 	ldw	r4,0(r2)
   22df4:	20c0012e 	bgeu	r4,r3,22dfc <_malloc_r+0x454>
   22df8:	10c00015 	stw	r3,0(r2)
   22dfc:	00820034 	movhi	r2,2048
   22e00:	10879604 	addi	r2,r2,7768
   22e04:	11000017 	ldw	r4,0(r2)
   22e08:	9c000217 	ldw	r16,8(r19)
   22e0c:	20c0012e 	bgeu	r4,r3,22e14 <_malloc_r+0x46c>
   22e10:	10c00015 	stw	r3,0(r2)
   22e14:	80c00117 	ldw	r3,4(r16)
   22e18:	00bfff04 	movi	r2,-4
   22e1c:	1886703a 	and	r3,r3,r2
   22e20:	1c45c83a 	sub	r2,r3,r17
   22e24:	1c400236 	bltu	r3,r17,22e30 <_malloc_r+0x488>
   22e28:	00c003c4 	movi	r3,15
   22e2c:	18800416 	blt	r3,r2,22e40 <_malloc_r+0x498>
   22e30:	9009883a 	mov	r4,r18
   22e34:	00263380 	call	26338 <__malloc_unlock>
   22e38:	0005883a 	mov	r2,zero
   22e3c:	003f0706 	br	22a5c <__alt_data_end+0xf4022a5c>
   22e40:	88c00054 	ori	r3,r17,1
   22e44:	80c00115 	stw	r3,4(r16)
   22e48:	8463883a 	add	r17,r16,r17
   22e4c:	10800054 	ori	r2,r2,1
   22e50:	9c400215 	stw	r17,8(r19)
   22e54:	88800115 	stw	r2,4(r17)
   22e58:	9009883a 	mov	r4,r18
   22e5c:	00263380 	call	26338 <__malloc_unlock>
   22e60:	80800204 	addi	r2,r16,8
   22e64:	003efd06 	br	22a5c <__alt_data_end+0xf4022a5c>
   22e68:	00800504 	movi	r2,20
   22e6c:	10c0482e 	bgeu	r2,r3,22f90 <_malloc_r+0x5e8>
   22e70:	00801504 	movi	r2,84
   22e74:	10c06836 	bltu	r2,r3,23018 <_malloc_r+0x670>
   22e78:	8806d33a 	srli	r3,r17,12
   22e7c:	19c01b84 	addi	r7,r3,110
   22e80:	39cb883a 	add	r5,r7,r7
   22e84:	003f0c06 	br	22ab8 <__alt_data_end+0xf4022ab8>
   22e88:	3804d27a 	srli	r2,r7,9
   22e8c:	01000104 	movi	r4,4
   22e90:	2080422e 	bgeu	r4,r2,22f9c <_malloc_r+0x5f4>
   22e94:	01000504 	movi	r4,20
   22e98:	20807c36 	bltu	r4,r2,2308c <_malloc_r+0x6e4>
   22e9c:	110016c4 	addi	r4,r2,91
   22ea0:	210b883a 	add	r5,r4,r4
   22ea4:	294b883a 	add	r5,r5,r5
   22ea8:	294b883a 	add	r5,r5,r5
   22eac:	994b883a 	add	r5,r19,r5
   22eb0:	28800217 	ldw	r2,8(r5)
   22eb4:	02020034 	movhi	r8,2048
   22eb8:	4200d204 	addi	r8,r8,840
   22ebc:	11406326 	beq	r2,r5,2304c <_malloc_r+0x6a4>
   22ec0:	01bfff04 	movi	r6,-4
   22ec4:	11000117 	ldw	r4,4(r2)
   22ec8:	2188703a 	and	r4,r4,r6
   22ecc:	3900022e 	bgeu	r7,r4,22ed8 <_malloc_r+0x530>
   22ed0:	10800217 	ldw	r2,8(r2)
   22ed4:	28bffb1e 	bne	r5,r2,22ec4 <__alt_data_end+0xf4022ec4>
   22ed8:	11800317 	ldw	r6,12(r2)
   22edc:	99000117 	ldw	r4,4(r19)
   22ee0:	81800315 	stw	r6,12(r16)
   22ee4:	80800215 	stw	r2,8(r16)
   22ee8:	34000215 	stw	r16,8(r6)
   22eec:	14000315 	stw	r16,12(r2)
   22ef0:	003f2706 	br	22b90 <__alt_data_end+0xf4022b90>
   22ef4:	88c00054 	ori	r3,r17,1
   22ef8:	80c00115 	stw	r3,4(r16)
   22efc:	8463883a 	add	r17,r16,r17
   22f00:	34400515 	stw	r17,20(r6)
   22f04:	34400415 	stw	r17,16(r6)
   22f08:	10c00054 	ori	r3,r2,1
   22f0c:	8a400315 	stw	r9,12(r17)
   22f10:	8a400215 	stw	r9,8(r17)
   22f14:	88c00115 	stw	r3,4(r17)
   22f18:	88a3883a 	add	r17,r17,r2
   22f1c:	88800015 	stw	r2,0(r17)
   22f20:	9009883a 	mov	r4,r18
   22f24:	00263380 	call	26338 <__malloc_unlock>
   22f28:	80800204 	addi	r2,r16,8
   22f2c:	003ecb06 	br	22a5c <__alt_data_end+0xf4022a5c>
   22f30:	31000117 	ldw	r4,4(r6)
   22f34:	003f1606 	br	22b90 <__alt_data_end+0xf4022b90>
   22f38:	63000044 	addi	r12,r12,1
   22f3c:	608000cc 	andi	r2,r12,3
   22f40:	5ac00204 	addi	r11,r11,8
   22f44:	103f2a1e 	bne	r2,zero,22bf0 <__alt_data_end+0xf4022bf0>
   22f48:	00002106 	br	22fd0 <_malloc_r+0x628>
   22f4c:	80800204 	addi	r2,r16,8
   22f50:	84000517 	ldw	r16,20(r16)
   22f54:	143eb31e 	bne	r2,r16,22a24 <__alt_data_end+0xf4022a24>
   22f58:	18c00084 	addi	r3,r3,2
   22f5c:	003eec06 	br	22b10 <__alt_data_end+0xf4022b10>
   22f60:	8085883a 	add	r2,r16,r2
   22f64:	10c00117 	ldw	r3,4(r2)
   22f68:	81000317 	ldw	r4,12(r16)
   22f6c:	81400217 	ldw	r5,8(r16)
   22f70:	18c00054 	ori	r3,r3,1
   22f74:	10c00115 	stw	r3,4(r2)
   22f78:	29000315 	stw	r4,12(r5)
   22f7c:	21400215 	stw	r5,8(r4)
   22f80:	9009883a 	mov	r4,r18
   22f84:	00263380 	call	26338 <__malloc_unlock>
   22f88:	80800204 	addi	r2,r16,8
   22f8c:	003eb306 	br	22a5c <__alt_data_end+0xf4022a5c>
   22f90:	19c016c4 	addi	r7,r3,91
   22f94:	39cb883a 	add	r5,r7,r7
   22f98:	003ec706 	br	22ab8 <__alt_data_end+0xf4022ab8>
   22f9c:	3804d1ba 	srli	r2,r7,6
   22fa0:	11000e04 	addi	r4,r2,56
   22fa4:	210b883a 	add	r5,r4,r4
   22fa8:	003fbe06 	br	22ea4 <__alt_data_end+0xf4022ea4>
   22fac:	84ff5d26 	beq	r16,r19,22d24 <__alt_data_end+0xf4022d24>
   22fb0:	9c000217 	ldw	r16,8(r19)
   22fb4:	00bfff04 	movi	r2,-4
   22fb8:	80c00117 	ldw	r3,4(r16)
   22fbc:	1886703a 	and	r3,r3,r2
   22fc0:	003f9706 	br	22e20 <__alt_data_end+0xf4022e20>
   22fc4:	52800017 	ldw	r10,0(r10)
   22fc8:	18ffffc4 	addi	r3,r3,-1
   22fcc:	50805c1e 	bne	r10,r2,23140 <_malloc_r+0x798>
   22fd0:	190000cc 	andi	r4,r3,3
   22fd4:	50bffe04 	addi	r2,r10,-8
   22fd8:	203ffa1e 	bne	r4,zero,22fc4 <__alt_data_end+0xf4022fc4>
   22fdc:	98800117 	ldw	r2,4(r19)
   22fe0:	0146303a 	nor	r3,zero,r5
   22fe4:	1884703a 	and	r2,r3,r2
   22fe8:	98800115 	stw	r2,4(r19)
   22fec:	294b883a 	add	r5,r5,r5
   22ff0:	117f2e36 	bltu	r2,r5,22cac <__alt_data_end+0xf4022cac>
   22ff4:	283f2d26 	beq	r5,zero,22cac <__alt_data_end+0xf4022cac>
   22ff8:	1146703a 	and	r3,r2,r5
   22ffc:	1800521e 	bne	r3,zero,23148 <_malloc_r+0x7a0>
   23000:	6007883a 	mov	r3,r12
   23004:	294b883a 	add	r5,r5,r5
   23008:	1148703a 	and	r4,r2,r5
   2300c:	18c00104 	addi	r3,r3,4
   23010:	203ffc26 	beq	r4,zero,23004 <__alt_data_end+0xf4023004>
   23014:	003ef006 	br	22bd8 <__alt_data_end+0xf4022bd8>
   23018:	00805504 	movi	r2,340
   2301c:	10c01336 	bltu	r2,r3,2306c <_malloc_r+0x6c4>
   23020:	8806d3fa 	srli	r3,r17,15
   23024:	19c01dc4 	addi	r7,r3,119
   23028:	39cb883a 	add	r5,r7,r7
   2302c:	003ea206 	br	22ab8 <__alt_data_end+0xf4022ab8>
   23030:	00c40004 	movi	r3,4096
   23034:	003f4d06 	br	22d6c <__alt_data_end+0xf4022d6c>
   23038:	00800044 	movi	r2,1
   2303c:	a0800115 	stw	r2,4(r20)
   23040:	a021883a 	mov	r16,r20
   23044:	0007883a 	mov	r3,zero
   23048:	003f7506 	br	22e20 <__alt_data_end+0xf4022e20>
   2304c:	200bd0ba 	srai	r5,r4,2
   23050:	01800044 	movi	r6,1
   23054:	41000117 	ldw	r4,4(r8)
   23058:	314a983a 	sll	r5,r6,r5
   2305c:	100d883a 	mov	r6,r2
   23060:	2908b03a 	or	r4,r5,r4
   23064:	41000115 	stw	r4,4(r8)
   23068:	003f9d06 	br	22ee0 <__alt_data_end+0xf4022ee0>
   2306c:	00815504 	movi	r2,1364
   23070:	10c01336 	bltu	r2,r3,230c0 <_malloc_r+0x718>
   23074:	8806d4ba 	srli	r3,r17,18
   23078:	19c01f04 	addi	r7,r3,124
   2307c:	39cb883a 	add	r5,r7,r7
   23080:	003e8d06 	br	22ab8 <__alt_data_end+0xf4022ab8>
   23084:	ad400404 	addi	r21,r21,16
   23088:	003f1d06 	br	22d00 <__alt_data_end+0xf4022d00>
   2308c:	01001504 	movi	r4,84
   23090:	20801c36 	bltu	r4,r2,23104 <_malloc_r+0x75c>
   23094:	3804d33a 	srli	r2,r7,12
   23098:	11001b84 	addi	r4,r2,110
   2309c:	210b883a 	add	r5,r4,r4
   230a0:	003f8006 	br	22ea4 <__alt_data_end+0xf4022ea4>
   230a4:	3083ffcc 	andi	r2,r6,4095
   230a8:	103f241e 	bne	r2,zero,22d3c <__alt_data_end+0xf4022d3c>
   230ac:	99000217 	ldw	r4,8(r19)
   230b0:	ad85883a 	add	r2,r21,r22
   230b4:	10800054 	ori	r2,r2,1
   230b8:	20800115 	stw	r2,4(r4)
   230bc:	003f4a06 	br	22de8 <__alt_data_end+0xf4022de8>
   230c0:	01403f04 	movi	r5,252
   230c4:	01c01f84 	movi	r7,126
   230c8:	003e7b06 	br	22ab8 <__alt_data_end+0xf4022ab8>
   230cc:	00c00044 	movi	r3,1
   230d0:	002b883a 	mov	r21,zero
   230d4:	003f3006 	br	22d98 <__alt_data_end+0xf4022d98>
   230d8:	00820034 	movhi	r2,2048
   230dc:	10878304 	addi	r2,r2,7692
   230e0:	15000015 	stw	r20,0(r2)
   230e4:	003f1b06 	br	22d54 <__alt_data_end+0xf4022d54>
   230e8:	9009883a 	mov	r4,r18
   230ec:	81400204 	addi	r5,r16,8
   230f0:	00239140 	call	23914 <_free_r>
   230f4:	00820034 	movhi	r2,2048
   230f8:	1089e104 	addi	r2,r2,10116
   230fc:	10c00017 	ldw	r3,0(r2)
   23100:	003f3906 	br	22de8 <__alt_data_end+0xf4022de8>
   23104:	01005504 	movi	r4,340
   23108:	20800436 	bltu	r4,r2,2311c <_malloc_r+0x774>
   2310c:	3804d3fa 	srli	r2,r7,15
   23110:	11001dc4 	addi	r4,r2,119
   23114:	210b883a 	add	r5,r4,r4
   23118:	003f6206 	br	22ea4 <__alt_data_end+0xf4022ea4>
   2311c:	01015504 	movi	r4,1364
   23120:	20800436 	bltu	r4,r2,23134 <_malloc_r+0x78c>
   23124:	3804d4ba 	srli	r2,r7,18
   23128:	11001f04 	addi	r4,r2,124
   2312c:	210b883a 	add	r5,r4,r4
   23130:	003f5c06 	br	22ea4 <__alt_data_end+0xf4022ea4>
   23134:	01403f04 	movi	r5,252
   23138:	01001f84 	movi	r4,126
   2313c:	003f5906 	br	22ea4 <__alt_data_end+0xf4022ea4>
   23140:	98800117 	ldw	r2,4(r19)
   23144:	003fa906 	br	22fec <__alt_data_end+0xf4022fec>
   23148:	6007883a 	mov	r3,r12
   2314c:	003ea206 	br	22bd8 <__alt_data_end+0xf4022bd8>

00023150 <memset>:
   23150:	20c000cc 	andi	r3,r4,3
   23154:	2005883a 	mov	r2,r4
   23158:	18004326 	beq	r3,zero,23268 <memset+0x118>
   2315c:	31ffffc4 	addi	r7,r6,-1
   23160:	30004026 	beq	r6,zero,23264 <memset+0x114>
   23164:	2813883a 	mov	r9,r5
   23168:	200d883a 	mov	r6,r4
   2316c:	2007883a 	mov	r3,r4
   23170:	00000406 	br	23184 <memset+0x34>
   23174:	3a3fffc4 	addi	r8,r7,-1
   23178:	31800044 	addi	r6,r6,1
   2317c:	38003926 	beq	r7,zero,23264 <memset+0x114>
   23180:	400f883a 	mov	r7,r8
   23184:	18c00044 	addi	r3,r3,1
   23188:	32400005 	stb	r9,0(r6)
   2318c:	1a0000cc 	andi	r8,r3,3
   23190:	403ff81e 	bne	r8,zero,23174 <__alt_data_end+0xf4023174>
   23194:	010000c4 	movi	r4,3
   23198:	21c02d2e 	bgeu	r4,r7,23250 <memset+0x100>
   2319c:	29803fcc 	andi	r6,r5,255
   231a0:	3008923a 	slli	r4,r6,8
   231a4:	218cb03a 	or	r6,r4,r6
   231a8:	3008943a 	slli	r4,r6,16
   231ac:	218cb03a 	or	r6,r4,r6
   231b0:	010003c4 	movi	r4,15
   231b4:	21c0182e 	bgeu	r4,r7,23218 <memset+0xc8>
   231b8:	3b3ffc04 	addi	r12,r7,-16
   231bc:	6018d13a 	srli	r12,r12,4
   231c0:	1a000104 	addi	r8,r3,4
   231c4:	1ac00204 	addi	r11,r3,8
   231c8:	6008913a 	slli	r4,r12,4
   231cc:	1a800304 	addi	r10,r3,12
   231d0:	1813883a 	mov	r9,r3
   231d4:	21000504 	addi	r4,r4,20
   231d8:	1909883a 	add	r4,r3,r4
   231dc:	49800015 	stw	r6,0(r9)
   231e0:	41800015 	stw	r6,0(r8)
   231e4:	59800015 	stw	r6,0(r11)
   231e8:	51800015 	stw	r6,0(r10)
   231ec:	42000404 	addi	r8,r8,16
   231f0:	4a400404 	addi	r9,r9,16
   231f4:	5ac00404 	addi	r11,r11,16
   231f8:	52800404 	addi	r10,r10,16
   231fc:	413ff71e 	bne	r8,r4,231dc <__alt_data_end+0xf40231dc>
   23200:	63000044 	addi	r12,r12,1
   23204:	6018913a 	slli	r12,r12,4
   23208:	39c003cc 	andi	r7,r7,15
   2320c:	010000c4 	movi	r4,3
   23210:	1b07883a 	add	r3,r3,r12
   23214:	21c00e2e 	bgeu	r4,r7,23250 <memset+0x100>
   23218:	1813883a 	mov	r9,r3
   2321c:	3811883a 	mov	r8,r7
   23220:	010000c4 	movi	r4,3
   23224:	49800015 	stw	r6,0(r9)
   23228:	423fff04 	addi	r8,r8,-4
   2322c:	4a400104 	addi	r9,r9,4
   23230:	223ffc36 	bltu	r4,r8,23224 <__alt_data_end+0xf4023224>
   23234:	393fff04 	addi	r4,r7,-4
   23238:	2008d0ba 	srli	r4,r4,2
   2323c:	39c000cc 	andi	r7,r7,3
   23240:	21000044 	addi	r4,r4,1
   23244:	2109883a 	add	r4,r4,r4
   23248:	2109883a 	add	r4,r4,r4
   2324c:	1907883a 	add	r3,r3,r4
   23250:	38000426 	beq	r7,zero,23264 <memset+0x114>
   23254:	19cf883a 	add	r7,r3,r7
   23258:	19400005 	stb	r5,0(r3)
   2325c:	18c00044 	addi	r3,r3,1
   23260:	19fffd1e 	bne	r3,r7,23258 <__alt_data_end+0xf4023258>
   23264:	f800283a 	ret
   23268:	2007883a 	mov	r3,r4
   2326c:	300f883a 	mov	r7,r6
   23270:	003fc806 	br	23194 <__alt_data_end+0xf4023194>

00023274 <_putchar_r>:
   23274:	21800217 	ldw	r6,8(r4)
   23278:	00244241 	jmpi	24424 <_putc_r>

0002327c <putchar>:
   2327c:	00820034 	movhi	r2,2048
   23280:	10878604 	addi	r2,r2,7704
   23284:	200b883a 	mov	r5,r4
   23288:	11000017 	ldw	r4,0(r2)
   2328c:	21800217 	ldw	r6,8(r4)
   23290:	00244241 	jmpi	24424 <_putc_r>

00023294 <_puts_r>:
   23294:	defff604 	addi	sp,sp,-40
   23298:	dc000715 	stw	r16,28(sp)
   2329c:	2021883a 	mov	r16,r4
   232a0:	2809883a 	mov	r4,r5
   232a4:	dc400815 	stw	r17,32(sp)
   232a8:	dfc00915 	stw	ra,36(sp)
   232ac:	2823883a 	mov	r17,r5
   232b0:	00237580 	call	23758 <strlen>
   232b4:	00c20034 	movhi	r3,2048
   232b8:	18c78604 	addi	r3,r3,7704
   232bc:	18c00017 	ldw	r3,0(r3)
   232c0:	11000044 	addi	r4,r2,1
   232c4:	d8800115 	stw	r2,4(sp)
   232c8:	18c00217 	ldw	r3,8(r3)
   232cc:	01420034 	movhi	r5,2048
   232d0:	2940b804 	addi	r5,r5,736
   232d4:	1880030b 	ldhu	r2,12(r3)
   232d8:	d9400215 	stw	r5,8(sp)
   232dc:	d9000615 	stw	r4,24(sp)
   232e0:	01400044 	movi	r5,1
   232e4:	01000084 	movi	r4,2
   232e8:	d9000515 	stw	r4,20(sp)
   232ec:	dc400015 	stw	r17,0(sp)
   232f0:	d9400315 	stw	r5,12(sp)
   232f4:	dec00415 	stw	sp,16(sp)
   232f8:	1108000c 	andi	r4,r2,8192
   232fc:	2000061e 	bne	r4,zero,23318 <_puts_r+0x84>
   23300:	19401917 	ldw	r5,100(r3)
   23304:	0137ffc4 	movi	r4,-8193
   23308:	10880014 	ori	r2,r2,8192
   2330c:	2908703a 	and	r4,r5,r4
   23310:	1880030d 	sth	r2,12(r3)
   23314:	19001915 	stw	r4,100(r3)
   23318:	81400217 	ldw	r5,8(r16)
   2331c:	8009883a 	mov	r4,r16
   23320:	d9800404 	addi	r6,sp,16
   23324:	0023c040 	call	23c04 <__sfvwrite_r>
   23328:	1000061e 	bne	r2,zero,23344 <_puts_r+0xb0>
   2332c:	00800284 	movi	r2,10
   23330:	dfc00917 	ldw	ra,36(sp)
   23334:	dc400817 	ldw	r17,32(sp)
   23338:	dc000717 	ldw	r16,28(sp)
   2333c:	dec00a04 	addi	sp,sp,40
   23340:	f800283a 	ret
   23344:	00bfffc4 	movi	r2,-1
   23348:	003ff906 	br	23330 <__alt_data_end+0xf4023330>

0002334c <puts>:
   2334c:	00820034 	movhi	r2,2048
   23350:	10878604 	addi	r2,r2,7704
   23354:	200b883a 	mov	r5,r4
   23358:	11000017 	ldw	r4,0(r2)
   2335c:	00232941 	jmpi	23294 <_puts_r>

00023360 <_sbrk_r>:
   23360:	defffd04 	addi	sp,sp,-12
   23364:	dc000015 	stw	r16,0(sp)
   23368:	04020034 	movhi	r16,2048
   2336c:	dc400115 	stw	r17,4(sp)
   23370:	84079904 	addi	r16,r16,7780
   23374:	2023883a 	mov	r17,r4
   23378:	2809883a 	mov	r4,r5
   2337c:	dfc00215 	stw	ra,8(sp)
   23380:	80000015 	stw	zero,0(r16)
   23384:	00267980 	call	26798 <sbrk>
   23388:	00ffffc4 	movi	r3,-1
   2338c:	10c00526 	beq	r2,r3,233a4 <_sbrk_r+0x44>
   23390:	dfc00217 	ldw	ra,8(sp)
   23394:	dc400117 	ldw	r17,4(sp)
   23398:	dc000017 	ldw	r16,0(sp)
   2339c:	dec00304 	addi	sp,sp,12
   233a0:	f800283a 	ret
   233a4:	80c00017 	ldw	r3,0(r16)
   233a8:	183ff926 	beq	r3,zero,23390 <__alt_data_end+0xf4023390>
   233ac:	88c00015 	stw	r3,0(r17)
   233b0:	003ff706 	br	23390 <__alt_data_end+0xf4023390>

000233b4 <_init_signal_r>:
   233b4:	2080b717 	ldw	r2,732(r4)
   233b8:	defffe04 	addi	sp,sp,-8
   233bc:	dc000015 	stw	r16,0(sp)
   233c0:	dfc00115 	stw	ra,4(sp)
   233c4:	2021883a 	mov	r16,r4
   233c8:	10000526 	beq	r2,zero,233e0 <_init_signal_r+0x2c>
   233cc:	0005883a 	mov	r2,zero
   233d0:	dfc00117 	ldw	ra,4(sp)
   233d4:	dc000017 	ldw	r16,0(sp)
   233d8:	dec00204 	addi	sp,sp,8
   233dc:	f800283a 	ret
   233e0:	01402004 	movi	r5,128
   233e4:	00229a80 	call	229a8 <_malloc_r>
   233e8:	8080b715 	stw	r2,732(r16)
   233ec:	10000926 	beq	r2,zero,23414 <_init_signal_r+0x60>
   233f0:	0007883a 	mov	r3,zero
   233f4:	01002004 	movi	r4,128
   233f8:	00000106 	br	23400 <_init_signal_r+0x4c>
   233fc:	8080b717 	ldw	r2,732(r16)
   23400:	10c5883a 	add	r2,r2,r3
   23404:	10000015 	stw	zero,0(r2)
   23408:	18c00104 	addi	r3,r3,4
   2340c:	193ffb1e 	bne	r3,r4,233fc <__alt_data_end+0xf40233fc>
   23410:	003fee06 	br	233cc <__alt_data_end+0xf40233cc>
   23414:	00bfffc4 	movi	r2,-1
   23418:	003fed06 	br	233d0 <__alt_data_end+0xf40233d0>

0002341c <_signal_r>:
   2341c:	00c007c4 	movi	r3,31
   23420:	19401536 	bltu	r3,r5,23478 <_signal_r+0x5c>
   23424:	2080b717 	ldw	r2,732(r4)
   23428:	defffc04 	addi	sp,sp,-16
   2342c:	dc800215 	stw	r18,8(sp)
   23430:	dc400115 	stw	r17,4(sp)
   23434:	dc000015 	stw	r16,0(sp)
   23438:	dfc00315 	stw	ra,12(sp)
   2343c:	3023883a 	mov	r17,r6
   23440:	2021883a 	mov	r16,r4
   23444:	2825883a 	mov	r18,r5
   23448:	10000f26 	beq	r2,zero,23488 <_signal_r+0x6c>
   2344c:	948b883a 	add	r5,r18,r18
   23450:	294b883a 	add	r5,r5,r5
   23454:	114b883a 	add	r5,r2,r5
   23458:	28800017 	ldw	r2,0(r5)
   2345c:	2c400015 	stw	r17,0(r5)
   23460:	dfc00317 	ldw	ra,12(sp)
   23464:	dc800217 	ldw	r18,8(sp)
   23468:	dc400117 	ldw	r17,4(sp)
   2346c:	dc000017 	ldw	r16,0(sp)
   23470:	dec00404 	addi	sp,sp,16
   23474:	f800283a 	ret
   23478:	00c00584 	movi	r3,22
   2347c:	20c00015 	stw	r3,0(r4)
   23480:	00bfffc4 	movi	r2,-1
   23484:	f800283a 	ret
   23488:	00233b40 	call	233b4 <_init_signal_r>
   2348c:	1000021e 	bne	r2,zero,23498 <_signal_r+0x7c>
   23490:	8080b717 	ldw	r2,732(r16)
   23494:	003fed06 	br	2344c <__alt_data_end+0xf402344c>
   23498:	00bfffc4 	movi	r2,-1
   2349c:	003ff006 	br	23460 <__alt_data_end+0xf4023460>

000234a0 <_raise_r>:
   234a0:	008007c4 	movi	r2,31
   234a4:	11402936 	bltu	r2,r5,2354c <_raise_r+0xac>
   234a8:	20c0b717 	ldw	r3,732(r4)
   234ac:	defffd04 	addi	sp,sp,-12
   234b0:	dc400115 	stw	r17,4(sp)
   234b4:	dc000015 	stw	r16,0(sp)
   234b8:	dfc00215 	stw	ra,8(sp)
   234bc:	2023883a 	mov	r17,r4
   234c0:	2821883a 	mov	r16,r5
   234c4:	18001726 	beq	r3,zero,23524 <_raise_r+0x84>
   234c8:	2945883a 	add	r2,r5,r5
   234cc:	1085883a 	add	r2,r2,r2
   234d0:	1887883a 	add	r3,r3,r2
   234d4:	19400017 	ldw	r5,0(r3)
   234d8:	28001226 	beq	r5,zero,23524 <_raise_r+0x84>
   234dc:	00800044 	movi	r2,1
   234e0:	28800e26 	beq	r5,r2,2351c <_raise_r+0x7c>
   234e4:	013fffc4 	movi	r4,-1
   234e8:	29000926 	beq	r5,r4,23510 <_raise_r+0x70>
   234ec:	18000015 	stw	zero,0(r3)
   234f0:	8009883a 	mov	r4,r16
   234f4:	283ee83a 	callr	r5
   234f8:	0005883a 	mov	r2,zero
   234fc:	dfc00217 	ldw	ra,8(sp)
   23500:	dc400117 	ldw	r17,4(sp)
   23504:	dc000017 	ldw	r16,0(sp)
   23508:	dec00304 	addi	sp,sp,12
   2350c:	f800283a 	ret
   23510:	00c00584 	movi	r3,22
   23514:	88c00015 	stw	r3,0(r17)
   23518:	003ff806 	br	234fc <__alt_data_end+0xf40234fc>
   2351c:	0005883a 	mov	r2,zero
   23520:	003ff606 	br	234fc <__alt_data_end+0xf40234fc>
   23524:	8809883a 	mov	r4,r17
   23528:	00236b00 	call	236b0 <_getpid_r>
   2352c:	8809883a 	mov	r4,r17
   23530:	100b883a 	mov	r5,r2
   23534:	800d883a 	mov	r6,r16
   23538:	dfc00217 	ldw	ra,8(sp)
   2353c:	dc400117 	ldw	r17,4(sp)
   23540:	dc000017 	ldw	r16,0(sp)
   23544:	dec00304 	addi	sp,sp,12
   23548:	00236581 	jmpi	23658 <_kill_r>
   2354c:	00800584 	movi	r2,22
   23550:	20800015 	stw	r2,0(r4)
   23554:	00bfffc4 	movi	r2,-1
   23558:	f800283a 	ret

0002355c <__sigtramp_r>:
   2355c:	008007c4 	movi	r2,31
   23560:	11402436 	bltu	r2,r5,235f4 <__sigtramp_r+0x98>
   23564:	20c0b717 	ldw	r3,732(r4)
   23568:	defffd04 	addi	sp,sp,-12
   2356c:	dc400115 	stw	r17,4(sp)
   23570:	dc000015 	stw	r16,0(sp)
   23574:	dfc00215 	stw	ra,8(sp)
   23578:	2021883a 	mov	r16,r4
   2357c:	2823883a 	mov	r17,r5
   23580:	18001826 	beq	r3,zero,235e4 <__sigtramp_r+0x88>
   23584:	8c45883a 	add	r2,r17,r17
   23588:	1085883a 	add	r2,r2,r2
   2358c:	1885883a 	add	r2,r3,r2
   23590:	10c00017 	ldw	r3,0(r2)
   23594:	18001126 	beq	r3,zero,235dc <__sigtramp_r+0x80>
   23598:	013fffc4 	movi	r4,-1
   2359c:	19000d26 	beq	r3,r4,235d4 <__sigtramp_r+0x78>
   235a0:	01000044 	movi	r4,1
   235a4:	19000926 	beq	r3,r4,235cc <__sigtramp_r+0x70>
   235a8:	10000015 	stw	zero,0(r2)
   235ac:	8809883a 	mov	r4,r17
   235b0:	183ee83a 	callr	r3
   235b4:	0005883a 	mov	r2,zero
   235b8:	dfc00217 	ldw	ra,8(sp)
   235bc:	dc400117 	ldw	r17,4(sp)
   235c0:	dc000017 	ldw	r16,0(sp)
   235c4:	dec00304 	addi	sp,sp,12
   235c8:	f800283a 	ret
   235cc:	008000c4 	movi	r2,3
   235d0:	003ff906 	br	235b8 <__alt_data_end+0xf40235b8>
   235d4:	00800084 	movi	r2,2
   235d8:	003ff706 	br	235b8 <__alt_data_end+0xf40235b8>
   235dc:	00800044 	movi	r2,1
   235e0:	003ff506 	br	235b8 <__alt_data_end+0xf40235b8>
   235e4:	00233b40 	call	233b4 <_init_signal_r>
   235e8:	1000041e 	bne	r2,zero,235fc <__sigtramp_r+0xa0>
   235ec:	80c0b717 	ldw	r3,732(r16)
   235f0:	003fe406 	br	23584 <__alt_data_end+0xf4023584>
   235f4:	00bfffc4 	movi	r2,-1
   235f8:	f800283a 	ret
   235fc:	00bfffc4 	movi	r2,-1
   23600:	003fed06 	br	235b8 <__alt_data_end+0xf40235b8>

00023604 <raise>:
   23604:	00820034 	movhi	r2,2048
   23608:	10878604 	addi	r2,r2,7704
   2360c:	200b883a 	mov	r5,r4
   23610:	11000017 	ldw	r4,0(r2)
   23614:	00234a01 	jmpi	234a0 <_raise_r>

00023618 <signal>:
   23618:	00c20034 	movhi	r3,2048
   2361c:	18c78604 	addi	r3,r3,7704
   23620:	2005883a 	mov	r2,r4
   23624:	19000017 	ldw	r4,0(r3)
   23628:	280d883a 	mov	r6,r5
   2362c:	100b883a 	mov	r5,r2
   23630:	002341c1 	jmpi	2341c <_signal_r>

00023634 <_init_signal>:
   23634:	00820034 	movhi	r2,2048
   23638:	10878604 	addi	r2,r2,7704
   2363c:	11000017 	ldw	r4,0(r2)
   23640:	00233b41 	jmpi	233b4 <_init_signal_r>

00023644 <__sigtramp>:
   23644:	00820034 	movhi	r2,2048
   23648:	10878604 	addi	r2,r2,7704
   2364c:	200b883a 	mov	r5,r4
   23650:	11000017 	ldw	r4,0(r2)
   23654:	002355c1 	jmpi	2355c <__sigtramp_r>

00023658 <_kill_r>:
   23658:	defffd04 	addi	sp,sp,-12
   2365c:	dc000015 	stw	r16,0(sp)
   23660:	04020034 	movhi	r16,2048
   23664:	dc400115 	stw	r17,4(sp)
   23668:	84079904 	addi	r16,r16,7780
   2366c:	2023883a 	mov	r17,r4
   23670:	2809883a 	mov	r4,r5
   23674:	300b883a 	mov	r5,r6
   23678:	dfc00215 	stw	ra,8(sp)
   2367c:	80000015 	stw	zero,0(r16)
   23680:	0025f600 	call	25f60 <kill>
   23684:	00ffffc4 	movi	r3,-1
   23688:	10c00526 	beq	r2,r3,236a0 <_kill_r+0x48>
   2368c:	dfc00217 	ldw	ra,8(sp)
   23690:	dc400117 	ldw	r17,4(sp)
   23694:	dc000017 	ldw	r16,0(sp)
   23698:	dec00304 	addi	sp,sp,12
   2369c:	f800283a 	ret
   236a0:	80c00017 	ldw	r3,0(r16)
   236a4:	183ff926 	beq	r3,zero,2368c <__alt_data_end+0xf402368c>
   236a8:	88c00015 	stw	r3,0(r17)
   236ac:	003ff706 	br	2368c <__alt_data_end+0xf402368c>

000236b0 <_getpid_r>:
   236b0:	0025df41 	jmpi	25df4 <getpid>

000236b4 <strcmp>:
   236b4:	2144b03a 	or	r2,r4,r5
   236b8:	108000cc 	andi	r2,r2,3
   236bc:	1000171e 	bne	r2,zero,2371c <strcmp+0x68>
   236c0:	20800017 	ldw	r2,0(r4)
   236c4:	28c00017 	ldw	r3,0(r5)
   236c8:	10c0141e 	bne	r2,r3,2371c <strcmp+0x68>
   236cc:	027fbff4 	movhi	r9,65279
   236d0:	4a7fbfc4 	addi	r9,r9,-257
   236d4:	0086303a 	nor	r3,zero,r2
   236d8:	02202074 	movhi	r8,32897
   236dc:	1245883a 	add	r2,r2,r9
   236e0:	42202004 	addi	r8,r8,-32640
   236e4:	10c4703a 	and	r2,r2,r3
   236e8:	1204703a 	and	r2,r2,r8
   236ec:	10000226 	beq	r2,zero,236f8 <strcmp+0x44>
   236f0:	00001706 	br	23750 <strcmp+0x9c>
   236f4:	1000161e 	bne	r2,zero,23750 <strcmp+0x9c>
   236f8:	21000104 	addi	r4,r4,4
   236fc:	20c00017 	ldw	r3,0(r4)
   23700:	29400104 	addi	r5,r5,4
   23704:	29800017 	ldw	r6,0(r5)
   23708:	1a4f883a 	add	r7,r3,r9
   2370c:	00c4303a 	nor	r2,zero,r3
   23710:	3884703a 	and	r2,r7,r2
   23714:	1204703a 	and	r2,r2,r8
   23718:	19bff626 	beq	r3,r6,236f4 <__alt_data_end+0xf40236f4>
   2371c:	20800007 	ldb	r2,0(r4)
   23720:	1000051e 	bne	r2,zero,23738 <strcmp+0x84>
   23724:	00000606 	br	23740 <strcmp+0x8c>
   23728:	21000044 	addi	r4,r4,1
   2372c:	20800007 	ldb	r2,0(r4)
   23730:	29400044 	addi	r5,r5,1
   23734:	10000226 	beq	r2,zero,23740 <strcmp+0x8c>
   23738:	28c00007 	ldb	r3,0(r5)
   2373c:	10fffa26 	beq	r2,r3,23728 <__alt_data_end+0xf4023728>
   23740:	20800003 	ldbu	r2,0(r4)
   23744:	28c00003 	ldbu	r3,0(r5)
   23748:	10c5c83a 	sub	r2,r2,r3
   2374c:	f800283a 	ret
   23750:	0005883a 	mov	r2,zero
   23754:	f800283a 	ret

00023758 <strlen>:
   23758:	208000cc 	andi	r2,r4,3
   2375c:	10002026 	beq	r2,zero,237e0 <strlen+0x88>
   23760:	20800007 	ldb	r2,0(r4)
   23764:	10002026 	beq	r2,zero,237e8 <strlen+0x90>
   23768:	2005883a 	mov	r2,r4
   2376c:	00000206 	br	23778 <strlen+0x20>
   23770:	10c00007 	ldb	r3,0(r2)
   23774:	18001826 	beq	r3,zero,237d8 <strlen+0x80>
   23778:	10800044 	addi	r2,r2,1
   2377c:	10c000cc 	andi	r3,r2,3
   23780:	183ffb1e 	bne	r3,zero,23770 <__alt_data_end+0xf4023770>
   23784:	10c00017 	ldw	r3,0(r2)
   23788:	01ffbff4 	movhi	r7,65279
   2378c:	39ffbfc4 	addi	r7,r7,-257
   23790:	00ca303a 	nor	r5,zero,r3
   23794:	01a02074 	movhi	r6,32897
   23798:	19c7883a 	add	r3,r3,r7
   2379c:	31a02004 	addi	r6,r6,-32640
   237a0:	1946703a 	and	r3,r3,r5
   237a4:	1986703a 	and	r3,r3,r6
   237a8:	1800091e 	bne	r3,zero,237d0 <strlen+0x78>
   237ac:	10800104 	addi	r2,r2,4
   237b0:	10c00017 	ldw	r3,0(r2)
   237b4:	19cb883a 	add	r5,r3,r7
   237b8:	00c6303a 	nor	r3,zero,r3
   237bc:	28c6703a 	and	r3,r5,r3
   237c0:	1986703a 	and	r3,r3,r6
   237c4:	183ff926 	beq	r3,zero,237ac <__alt_data_end+0xf40237ac>
   237c8:	00000106 	br	237d0 <strlen+0x78>
   237cc:	10800044 	addi	r2,r2,1
   237d0:	10c00007 	ldb	r3,0(r2)
   237d4:	183ffd1e 	bne	r3,zero,237cc <__alt_data_end+0xf40237cc>
   237d8:	1105c83a 	sub	r2,r2,r4
   237dc:	f800283a 	ret
   237e0:	2005883a 	mov	r2,r4
   237e4:	003fe706 	br	23784 <__alt_data_end+0xf4023784>
   237e8:	0005883a 	mov	r2,zero
   237ec:	f800283a 	ret

000237f0 <_malloc_trim_r>:
   237f0:	defffb04 	addi	sp,sp,-20
   237f4:	dcc00315 	stw	r19,12(sp)
   237f8:	04c20034 	movhi	r19,2048
   237fc:	dc800215 	stw	r18,8(sp)
   23800:	dc400115 	stw	r17,4(sp)
   23804:	dc000015 	stw	r16,0(sp)
   23808:	dfc00415 	stw	ra,16(sp)
   2380c:	2821883a 	mov	r16,r5
   23810:	9cc0d204 	addi	r19,r19,840
   23814:	2025883a 	mov	r18,r4
   23818:	00263180 	call	26318 <__malloc_lock>
   2381c:	98800217 	ldw	r2,8(r19)
   23820:	14400117 	ldw	r17,4(r2)
   23824:	00bfff04 	movi	r2,-4
   23828:	88a2703a 	and	r17,r17,r2
   2382c:	8c21c83a 	sub	r16,r17,r16
   23830:	8403fbc4 	addi	r16,r16,4079
   23834:	8020d33a 	srli	r16,r16,12
   23838:	0083ffc4 	movi	r2,4095
   2383c:	843fffc4 	addi	r16,r16,-1
   23840:	8020933a 	slli	r16,r16,12
   23844:	1400060e 	bge	r2,r16,23860 <_malloc_trim_r+0x70>
   23848:	9009883a 	mov	r4,r18
   2384c:	000b883a 	mov	r5,zero
   23850:	00233600 	call	23360 <_sbrk_r>
   23854:	98c00217 	ldw	r3,8(r19)
   23858:	1c47883a 	add	r3,r3,r17
   2385c:	10c00a26 	beq	r2,r3,23888 <_malloc_trim_r+0x98>
   23860:	9009883a 	mov	r4,r18
   23864:	00263380 	call	26338 <__malloc_unlock>
   23868:	0005883a 	mov	r2,zero
   2386c:	dfc00417 	ldw	ra,16(sp)
   23870:	dcc00317 	ldw	r19,12(sp)
   23874:	dc800217 	ldw	r18,8(sp)
   23878:	dc400117 	ldw	r17,4(sp)
   2387c:	dc000017 	ldw	r16,0(sp)
   23880:	dec00504 	addi	sp,sp,20
   23884:	f800283a 	ret
   23888:	9009883a 	mov	r4,r18
   2388c:	040bc83a 	sub	r5,zero,r16
   23890:	00233600 	call	23360 <_sbrk_r>
   23894:	00ffffc4 	movi	r3,-1
   23898:	10c00d26 	beq	r2,r3,238d0 <_malloc_trim_r+0xe0>
   2389c:	00c20034 	movhi	r3,2048
   238a0:	18c9e104 	addi	r3,r3,10116
   238a4:	18800017 	ldw	r2,0(r3)
   238a8:	99000217 	ldw	r4,8(r19)
   238ac:	8c23c83a 	sub	r17,r17,r16
   238b0:	8c400054 	ori	r17,r17,1
   238b4:	1421c83a 	sub	r16,r2,r16
   238b8:	24400115 	stw	r17,4(r4)
   238bc:	9009883a 	mov	r4,r18
   238c0:	1c000015 	stw	r16,0(r3)
   238c4:	00263380 	call	26338 <__malloc_unlock>
   238c8:	00800044 	movi	r2,1
   238cc:	003fe706 	br	2386c <__alt_data_end+0xf402386c>
   238d0:	9009883a 	mov	r4,r18
   238d4:	000b883a 	mov	r5,zero
   238d8:	00233600 	call	23360 <_sbrk_r>
   238dc:	99000217 	ldw	r4,8(r19)
   238e0:	014003c4 	movi	r5,15
   238e4:	1107c83a 	sub	r3,r2,r4
   238e8:	28ffdd0e 	bge	r5,r3,23860 <__alt_data_end+0xf4023860>
   238ec:	01420034 	movhi	r5,2048
   238f0:	29478304 	addi	r5,r5,7692
   238f4:	29400017 	ldw	r5,0(r5)
   238f8:	18c00054 	ori	r3,r3,1
   238fc:	20c00115 	stw	r3,4(r4)
   23900:	00c20034 	movhi	r3,2048
   23904:	1145c83a 	sub	r2,r2,r5
   23908:	18c9e104 	addi	r3,r3,10116
   2390c:	18800015 	stw	r2,0(r3)
   23910:	003fd306 	br	23860 <__alt_data_end+0xf4023860>

00023914 <_free_r>:
   23914:	28004c26 	beq	r5,zero,23a48 <_free_r+0x134>
   23918:	defffd04 	addi	sp,sp,-12
   2391c:	dc400115 	stw	r17,4(sp)
   23920:	dc000015 	stw	r16,0(sp)
   23924:	2023883a 	mov	r17,r4
   23928:	2821883a 	mov	r16,r5
   2392c:	dfc00215 	stw	ra,8(sp)
   23930:	00263180 	call	26318 <__malloc_lock>
   23934:	813fff17 	ldw	r4,-4(r16)
   23938:	00bfff84 	movi	r2,-2
   2393c:	02420034 	movhi	r9,2048
   23940:	81bffe04 	addi	r6,r16,-8
   23944:	2084703a 	and	r2,r4,r2
   23948:	4a40d204 	addi	r9,r9,840
   2394c:	308b883a 	add	r5,r6,r2
   23950:	2a000117 	ldw	r8,4(r5)
   23954:	49c00217 	ldw	r7,8(r9)
   23958:	00ffff04 	movi	r3,-4
   2395c:	40c6703a 	and	r3,r8,r3
   23960:	39405326 	beq	r7,r5,23ab0 <_free_r+0x19c>
   23964:	28c00115 	stw	r3,4(r5)
   23968:	2100004c 	andi	r4,r4,1
   2396c:	2000091e 	bne	r4,zero,23994 <_free_r+0x80>
   23970:	81fffe17 	ldw	r7,-8(r16)
   23974:	4a000204 	addi	r8,r9,8
   23978:	31cdc83a 	sub	r6,r6,r7
   2397c:	31000217 	ldw	r4,8(r6)
   23980:	11c5883a 	add	r2,r2,r7
   23984:	22006126 	beq	r4,r8,23b0c <_free_r+0x1f8>
   23988:	31c00317 	ldw	r7,12(r6)
   2398c:	21c00315 	stw	r7,12(r4)
   23990:	39000215 	stw	r4,8(r7)
   23994:	28c9883a 	add	r4,r5,r3
   23998:	21c00117 	ldw	r7,4(r4)
   2399c:	39c0004c 	andi	r7,r7,1
   239a0:	38000d1e 	bne	r7,zero,239d8 <_free_r+0xc4>
   239a4:	29000217 	ldw	r4,8(r5)
   239a8:	10c5883a 	add	r2,r2,r3
   239ac:	00c20034 	movhi	r3,2048
   239b0:	18c0d404 	addi	r3,r3,848
   239b4:	20c07526 	beq	r4,r3,23b8c <_free_r+0x278>
   239b8:	29c00317 	ldw	r7,12(r5)
   239bc:	11400054 	ori	r5,r2,1
   239c0:	3087883a 	add	r3,r6,r2
   239c4:	21c00315 	stw	r7,12(r4)
   239c8:	39000215 	stw	r4,8(r7)
   239cc:	31400115 	stw	r5,4(r6)
   239d0:	18800015 	stw	r2,0(r3)
   239d4:	00000406 	br	239e8 <_free_r+0xd4>
   239d8:	10c00054 	ori	r3,r2,1
   239dc:	30c00115 	stw	r3,4(r6)
   239e0:	3087883a 	add	r3,r6,r2
   239e4:	18800015 	stw	r2,0(r3)
   239e8:	00c07fc4 	movi	r3,511
   239ec:	18801736 	bltu	r3,r2,23a4c <_free_r+0x138>
   239f0:	1004d0fa 	srli	r2,r2,3
   239f4:	01400044 	movi	r5,1
   239f8:	49000117 	ldw	r4,4(r9)
   239fc:	1087883a 	add	r3,r2,r2
   23a00:	18c7883a 	add	r3,r3,r3
   23a04:	1005d0ba 	srai	r2,r2,2
   23a08:	18c7883a 	add	r3,r3,r3
   23a0c:	1a47883a 	add	r3,r3,r9
   23a10:	19c00217 	ldw	r7,8(r3)
   23a14:	2884983a 	sll	r2,r5,r2
   23a18:	30c00315 	stw	r3,12(r6)
   23a1c:	31c00215 	stw	r7,8(r6)
   23a20:	1104b03a 	or	r2,r2,r4
   23a24:	19800215 	stw	r6,8(r3)
   23a28:	48800115 	stw	r2,4(r9)
   23a2c:	39800315 	stw	r6,12(r7)
   23a30:	8809883a 	mov	r4,r17
   23a34:	dfc00217 	ldw	ra,8(sp)
   23a38:	dc400117 	ldw	r17,4(sp)
   23a3c:	dc000017 	ldw	r16,0(sp)
   23a40:	dec00304 	addi	sp,sp,12
   23a44:	00263381 	jmpi	26338 <__malloc_unlock>
   23a48:	f800283a 	ret
   23a4c:	1006d27a 	srli	r3,r2,9
   23a50:	01000104 	movi	r4,4
   23a54:	20c04036 	bltu	r4,r3,23b58 <_free_r+0x244>
   23a58:	1006d1ba 	srli	r3,r2,6
   23a5c:	19400e04 	addi	r5,r3,56
   23a60:	2947883a 	add	r3,r5,r5
   23a64:	18c7883a 	add	r3,r3,r3
   23a68:	18c7883a 	add	r3,r3,r3
   23a6c:	1a49883a 	add	r4,r3,r9
   23a70:	20c00217 	ldw	r3,8(r4)
   23a74:	01c20034 	movhi	r7,2048
   23a78:	39c0d204 	addi	r7,r7,840
   23a7c:	19003b26 	beq	r3,r4,23b6c <_free_r+0x258>
   23a80:	01ffff04 	movi	r7,-4
   23a84:	19400117 	ldw	r5,4(r3)
   23a88:	29ca703a 	and	r5,r5,r7
   23a8c:	1140022e 	bgeu	r2,r5,23a98 <_free_r+0x184>
   23a90:	18c00217 	ldw	r3,8(r3)
   23a94:	20fffb1e 	bne	r4,r3,23a84 <__alt_data_end+0xf4023a84>
   23a98:	18800317 	ldw	r2,12(r3)
   23a9c:	30800315 	stw	r2,12(r6)
   23aa0:	30c00215 	stw	r3,8(r6)
   23aa4:	11800215 	stw	r6,8(r2)
   23aa8:	19800315 	stw	r6,12(r3)
   23aac:	003fe006 	br	23a30 <__alt_data_end+0xf4023a30>
   23ab0:	2100004c 	andi	r4,r4,1
   23ab4:	1885883a 	add	r2,r3,r2
   23ab8:	2000071e 	bne	r4,zero,23ad8 <_free_r+0x1c4>
   23abc:	817ffe17 	ldw	r5,-8(r16)
   23ac0:	314dc83a 	sub	r6,r6,r5
   23ac4:	30c00317 	ldw	r3,12(r6)
   23ac8:	31000217 	ldw	r4,8(r6)
   23acc:	1145883a 	add	r2,r2,r5
   23ad0:	20c00315 	stw	r3,12(r4)
   23ad4:	19000215 	stw	r4,8(r3)
   23ad8:	10c00054 	ori	r3,r2,1
   23adc:	30c00115 	stw	r3,4(r6)
   23ae0:	00c20034 	movhi	r3,2048
   23ae4:	18c78404 	addi	r3,r3,7696
   23ae8:	18c00017 	ldw	r3,0(r3)
   23aec:	49800215 	stw	r6,8(r9)
   23af0:	10ffcf36 	bltu	r2,r3,23a30 <__alt_data_end+0xf4023a30>
   23af4:	00820034 	movhi	r2,2048
   23af8:	10879804 	addi	r2,r2,7776
   23afc:	11400017 	ldw	r5,0(r2)
   23b00:	8809883a 	mov	r4,r17
   23b04:	00237f00 	call	237f0 <_malloc_trim_r>
   23b08:	003fc906 	br	23a30 <__alt_data_end+0xf4023a30>
   23b0c:	28c9883a 	add	r4,r5,r3
   23b10:	21000117 	ldw	r4,4(r4)
   23b14:	2100004c 	andi	r4,r4,1
   23b18:	20000a1e 	bne	r4,zero,23b44 <_free_r+0x230>
   23b1c:	29000317 	ldw	r4,12(r5)
   23b20:	29400217 	ldw	r5,8(r5)
   23b24:	10c5883a 	add	r2,r2,r3
   23b28:	10c00054 	ori	r3,r2,1
   23b2c:	29000315 	stw	r4,12(r5)
   23b30:	21400215 	stw	r5,8(r4)
   23b34:	30c00115 	stw	r3,4(r6)
   23b38:	308d883a 	add	r6,r6,r2
   23b3c:	30800015 	stw	r2,0(r6)
   23b40:	003fbb06 	br	23a30 <__alt_data_end+0xf4023a30>
   23b44:	10c00054 	ori	r3,r2,1
   23b48:	30c00115 	stw	r3,4(r6)
   23b4c:	308d883a 	add	r6,r6,r2
   23b50:	30800015 	stw	r2,0(r6)
   23b54:	003fb606 	br	23a30 <__alt_data_end+0xf4023a30>
   23b58:	01000504 	movi	r4,20
   23b5c:	20c01436 	bltu	r4,r3,23bb0 <_free_r+0x29c>
   23b60:	194016c4 	addi	r5,r3,91
   23b64:	2947883a 	add	r3,r5,r5
   23b68:	003fbe06 	br	23a64 <__alt_data_end+0xf4023a64>
   23b6c:	280bd0ba 	srai	r5,r5,2
   23b70:	00800044 	movi	r2,1
   23b74:	39000117 	ldw	r4,4(r7)
   23b78:	114a983a 	sll	r5,r2,r5
   23b7c:	1805883a 	mov	r2,r3
   23b80:	2908b03a 	or	r4,r5,r4
   23b84:	39000115 	stw	r4,4(r7)
   23b88:	003fc406 	br	23a9c <__alt_data_end+0xf4023a9c>
   23b8c:	49800515 	stw	r6,20(r9)
   23b90:	49800415 	stw	r6,16(r9)
   23b94:	10c00054 	ori	r3,r2,1
   23b98:	31000315 	stw	r4,12(r6)
   23b9c:	31000215 	stw	r4,8(r6)
   23ba0:	30c00115 	stw	r3,4(r6)
   23ba4:	308d883a 	add	r6,r6,r2
   23ba8:	30800015 	stw	r2,0(r6)
   23bac:	003fa006 	br	23a30 <__alt_data_end+0xf4023a30>
   23bb0:	01001504 	movi	r4,84
   23bb4:	20c00436 	bltu	r4,r3,23bc8 <_free_r+0x2b4>
   23bb8:	1006d33a 	srli	r3,r2,12
   23bbc:	19401b84 	addi	r5,r3,110
   23bc0:	2947883a 	add	r3,r5,r5
   23bc4:	003fa706 	br	23a64 <__alt_data_end+0xf4023a64>
   23bc8:	01005504 	movi	r4,340
   23bcc:	20c00436 	bltu	r4,r3,23be0 <_free_r+0x2cc>
   23bd0:	1006d3fa 	srli	r3,r2,15
   23bd4:	19401dc4 	addi	r5,r3,119
   23bd8:	2947883a 	add	r3,r5,r5
   23bdc:	003fa106 	br	23a64 <__alt_data_end+0xf4023a64>
   23be0:	01015504 	movi	r4,1364
   23be4:	20c00436 	bltu	r4,r3,23bf8 <_free_r+0x2e4>
   23be8:	1006d4ba 	srli	r3,r2,18
   23bec:	19401f04 	addi	r5,r3,124
   23bf0:	2947883a 	add	r3,r5,r5
   23bf4:	003f9b06 	br	23a64 <__alt_data_end+0xf4023a64>
   23bf8:	00c03f04 	movi	r3,252
   23bfc:	01401f84 	movi	r5,126
   23c00:	003f9806 	br	23a64 <__alt_data_end+0xf4023a64>

00023c04 <__sfvwrite_r>:
   23c04:	30800217 	ldw	r2,8(r6)
   23c08:	10004526 	beq	r2,zero,23d20 <__sfvwrite_r+0x11c>
   23c0c:	28c0030b 	ldhu	r3,12(r5)
   23c10:	defff404 	addi	sp,sp,-48
   23c14:	dd400715 	stw	r21,28(sp)
   23c18:	dcc00515 	stw	r19,20(sp)
   23c1c:	dc000215 	stw	r16,8(sp)
   23c20:	dfc00b15 	stw	ra,44(sp)
   23c24:	df000a15 	stw	fp,40(sp)
   23c28:	ddc00915 	stw	r23,36(sp)
   23c2c:	dd800815 	stw	r22,32(sp)
   23c30:	dd000615 	stw	r20,24(sp)
   23c34:	dc800415 	stw	r18,16(sp)
   23c38:	dc400315 	stw	r17,12(sp)
   23c3c:	1880020c 	andi	r2,r3,8
   23c40:	2821883a 	mov	r16,r5
   23c44:	202b883a 	mov	r21,r4
   23c48:	3027883a 	mov	r19,r6
   23c4c:	10002526 	beq	r2,zero,23ce4 <__sfvwrite_r+0xe0>
   23c50:	28800417 	ldw	r2,16(r5)
   23c54:	10002326 	beq	r2,zero,23ce4 <__sfvwrite_r+0xe0>
   23c58:	1880008c 	andi	r2,r3,2
   23c5c:	9c400017 	ldw	r17,0(r19)
   23c60:	10003126 	beq	r2,zero,23d28 <__sfvwrite_r+0x124>
   23c64:	0029883a 	mov	r20,zero
   23c68:	0025883a 	mov	r18,zero
   23c6c:	05810004 	movi	r22,1024
   23c70:	a00d883a 	mov	r6,r20
   23c74:	a809883a 	mov	r4,r21
   23c78:	90002526 	beq	r18,zero,23d10 <__sfvwrite_r+0x10c>
   23c7c:	900f883a 	mov	r7,r18
   23c80:	81400717 	ldw	r5,28(r16)
   23c84:	b480012e 	bgeu	r22,r18,23c8c <__sfvwrite_r+0x88>
   23c88:	01c10004 	movi	r7,1024
   23c8c:	80800917 	ldw	r2,36(r16)
   23c90:	103ee83a 	callr	r2
   23c94:	0080510e 	bge	zero,r2,23ddc <__sfvwrite_r+0x1d8>
   23c98:	98c00217 	ldw	r3,8(r19)
   23c9c:	a0a9883a 	add	r20,r20,r2
   23ca0:	90a5c83a 	sub	r18,r18,r2
   23ca4:	1885c83a 	sub	r2,r3,r2
   23ca8:	98800215 	stw	r2,8(r19)
   23cac:	103ff01e 	bne	r2,zero,23c70 <__alt_data_end+0xf4023c70>
   23cb0:	0005883a 	mov	r2,zero
   23cb4:	dfc00b17 	ldw	ra,44(sp)
   23cb8:	df000a17 	ldw	fp,40(sp)
   23cbc:	ddc00917 	ldw	r23,36(sp)
   23cc0:	dd800817 	ldw	r22,32(sp)
   23cc4:	dd400717 	ldw	r21,28(sp)
   23cc8:	dd000617 	ldw	r20,24(sp)
   23ccc:	dcc00517 	ldw	r19,20(sp)
   23cd0:	dc800417 	ldw	r18,16(sp)
   23cd4:	dc400317 	ldw	r17,12(sp)
   23cd8:	dc000217 	ldw	r16,8(sp)
   23cdc:	dec00c04 	addi	sp,sp,48
   23ce0:	f800283a 	ret
   23ce4:	a809883a 	mov	r4,r21
   23ce8:	800b883a 	mov	r5,r16
   23cec:	0024c9c0 	call	24c9c <__swsetup_r>
   23cf0:	80c0030b 	ldhu	r3,12(r16)
   23cf4:	103fd826 	beq	r2,zero,23c58 <__alt_data_end+0xf4023c58>
   23cf8:	18c01014 	ori	r3,r3,64
   23cfc:	80c0030d 	sth	r3,12(r16)
   23d00:	00c00244 	movi	r3,9
   23d04:	00bfffc4 	movi	r2,-1
   23d08:	a8c00015 	stw	r3,0(r21)
   23d0c:	003fe906 	br	23cb4 <__alt_data_end+0xf4023cb4>
   23d10:	8d000017 	ldw	r20,0(r17)
   23d14:	8c800117 	ldw	r18,4(r17)
   23d18:	8c400204 	addi	r17,r17,8
   23d1c:	003fd406 	br	23c70 <__alt_data_end+0xf4023c70>
   23d20:	0005883a 	mov	r2,zero
   23d24:	f800283a 	ret
   23d28:	1880004c 	andi	r2,r3,1
   23d2c:	1000301e 	bne	r2,zero,23df0 <__sfvwrite_r+0x1ec>
   23d30:	002f883a 	mov	r23,zero
   23d34:	0025883a 	mov	r18,zero
   23d38:	90001c26 	beq	r18,zero,23dac <__sfvwrite_r+0x1a8>
   23d3c:	1880800c 	andi	r2,r3,512
   23d40:	85000217 	ldw	r20,8(r16)
   23d44:	10006c26 	beq	r2,zero,23ef8 <__sfvwrite_r+0x2f4>
   23d48:	a02d883a 	mov	r22,r20
   23d4c:	95008536 	bltu	r18,r20,23f64 <__sfvwrite_r+0x360>
   23d50:	1881200c 	andi	r2,r3,1152
   23d54:	10009d1e 	bne	r2,zero,23fcc <__sfvwrite_r+0x3c8>
   23d58:	81000017 	ldw	r4,0(r16)
   23d5c:	a039883a 	mov	fp,r20
   23d60:	9029883a 	mov	r20,r18
   23d64:	b80b883a 	mov	r5,r23
   23d68:	b00d883a 	mov	r6,r22
   23d6c:	00242c80 	call	242c8 <memmove>
   23d70:	80c00217 	ldw	r3,8(r16)
   23d74:	81000017 	ldw	r4,0(r16)
   23d78:	9005883a 	mov	r2,r18
   23d7c:	1f39c83a 	sub	fp,r3,fp
   23d80:	258f883a 	add	r7,r4,r22
   23d84:	87000215 	stw	fp,8(r16)
   23d88:	81c00015 	stw	r7,0(r16)
   23d8c:	98c00217 	ldw	r3,8(r19)
   23d90:	b8af883a 	add	r23,r23,r2
   23d94:	90a5c83a 	sub	r18,r18,r2
   23d98:	1d05c83a 	sub	r2,r3,r20
   23d9c:	98800215 	stw	r2,8(r19)
   23da0:	103fc326 	beq	r2,zero,23cb0 <__alt_data_end+0xf4023cb0>
   23da4:	80c0030b 	ldhu	r3,12(r16)
   23da8:	903fe41e 	bne	r18,zero,23d3c <__alt_data_end+0xf4023d3c>
   23dac:	8dc00017 	ldw	r23,0(r17)
   23db0:	8c800117 	ldw	r18,4(r17)
   23db4:	8c400204 	addi	r17,r17,8
   23db8:	003fdf06 	br	23d38 <__alt_data_end+0xf4023d38>
   23dbc:	002458c0 	call	2458c <_realloc_r>
   23dc0:	102d883a 	mov	r22,r2
   23dc4:	1000a01e 	bne	r2,zero,24048 <__sfvwrite_r+0x444>
   23dc8:	81400417 	ldw	r5,16(r16)
   23dcc:	a809883a 	mov	r4,r21
   23dd0:	00239140 	call	23914 <_free_r>
   23dd4:	00800304 	movi	r2,12
   23dd8:	a8800015 	stw	r2,0(r21)
   23ddc:	80c0030b 	ldhu	r3,12(r16)
   23de0:	00bfffc4 	movi	r2,-1
   23de4:	18c01014 	ori	r3,r3,64
   23de8:	80c0030d 	sth	r3,12(r16)
   23dec:	003fb106 	br	23cb4 <__alt_data_end+0xf4023cb4>
   23df0:	0029883a 	mov	r20,zero
   23df4:	0011883a 	mov	r8,zero
   23df8:	0039883a 	mov	fp,zero
   23dfc:	0025883a 	mov	r18,zero
   23e00:	90001f26 	beq	r18,zero,23e80 <__sfvwrite_r+0x27c>
   23e04:	40006826 	beq	r8,zero,23fa8 <__sfvwrite_r+0x3a4>
   23e08:	a02f883a 	mov	r23,r20
   23e0c:	9500012e 	bgeu	r18,r20,23e14 <__sfvwrite_r+0x210>
   23e10:	902f883a 	mov	r23,r18
   23e14:	81000017 	ldw	r4,0(r16)
   23e18:	80800417 	ldw	r2,16(r16)
   23e1c:	b82d883a 	mov	r22,r23
   23e20:	81800217 	ldw	r6,8(r16)
   23e24:	81c00517 	ldw	r7,20(r16)
   23e28:	1100022e 	bgeu	r2,r4,23e34 <__sfvwrite_r+0x230>
   23e2c:	31c7883a 	add	r3,r6,r7
   23e30:	1dc01816 	blt	r3,r23,23e94 <__sfvwrite_r+0x290>
   23e34:	b9c03f16 	blt	r23,r7,23f34 <__sfvwrite_r+0x330>
   23e38:	80800917 	ldw	r2,36(r16)
   23e3c:	81400717 	ldw	r5,28(r16)
   23e40:	a809883a 	mov	r4,r21
   23e44:	da000115 	stw	r8,4(sp)
   23e48:	e00d883a 	mov	r6,fp
   23e4c:	103ee83a 	callr	r2
   23e50:	102d883a 	mov	r22,r2
   23e54:	da000117 	ldw	r8,4(sp)
   23e58:	00bfe00e 	bge	zero,r2,23ddc <__alt_data_end+0xf4023ddc>
   23e5c:	a5a9c83a 	sub	r20,r20,r22
   23e60:	a0001f26 	beq	r20,zero,23ee0 <__sfvwrite_r+0x2dc>
   23e64:	98800217 	ldw	r2,8(r19)
   23e68:	e5b9883a 	add	fp,fp,r22
   23e6c:	95a5c83a 	sub	r18,r18,r22
   23e70:	15adc83a 	sub	r22,r2,r22
   23e74:	9d800215 	stw	r22,8(r19)
   23e78:	b03f8d26 	beq	r22,zero,23cb0 <__alt_data_end+0xf4023cb0>
   23e7c:	903fe11e 	bne	r18,zero,23e04 <__alt_data_end+0xf4023e04>
   23e80:	8f000017 	ldw	fp,0(r17)
   23e84:	8c800117 	ldw	r18,4(r17)
   23e88:	0011883a 	mov	r8,zero
   23e8c:	8c400204 	addi	r17,r17,8
   23e90:	003fdb06 	br	23e00 <__alt_data_end+0xf4023e00>
   23e94:	180d883a 	mov	r6,r3
   23e98:	e00b883a 	mov	r5,fp
   23e9c:	da000115 	stw	r8,4(sp)
   23ea0:	d8c00015 	stw	r3,0(sp)
   23ea4:	00242c80 	call	242c8 <memmove>
   23ea8:	d8c00017 	ldw	r3,0(sp)
   23eac:	80800017 	ldw	r2,0(r16)
   23eb0:	a809883a 	mov	r4,r21
   23eb4:	800b883a 	mov	r5,r16
   23eb8:	10c5883a 	add	r2,r2,r3
   23ebc:	80800015 	stw	r2,0(r16)
   23ec0:	d8c00015 	stw	r3,0(sp)
   23ec4:	0024dcc0 	call	24dcc <_fflush_r>
   23ec8:	d8c00017 	ldw	r3,0(sp)
   23ecc:	da000117 	ldw	r8,4(sp)
   23ed0:	103fc21e 	bne	r2,zero,23ddc <__alt_data_end+0xf4023ddc>
   23ed4:	182d883a 	mov	r22,r3
   23ed8:	a5a9c83a 	sub	r20,r20,r22
   23edc:	a03fe11e 	bne	r20,zero,23e64 <__alt_data_end+0xf4023e64>
   23ee0:	a809883a 	mov	r4,r21
   23ee4:	800b883a 	mov	r5,r16
   23ee8:	0024dcc0 	call	24dcc <_fflush_r>
   23eec:	103fbb1e 	bne	r2,zero,23ddc <__alt_data_end+0xf4023ddc>
   23ef0:	0011883a 	mov	r8,zero
   23ef4:	003fdb06 	br	23e64 <__alt_data_end+0xf4023e64>
   23ef8:	81000017 	ldw	r4,0(r16)
   23efc:	80800417 	ldw	r2,16(r16)
   23f00:	1100012e 	bgeu	r2,r4,23f08 <__sfvwrite_r+0x304>
   23f04:	a4805a36 	bltu	r20,r18,24070 <__sfvwrite_r+0x46c>
   23f08:	81c00517 	ldw	r7,20(r16)
   23f0c:	91c01a36 	bltu	r18,r7,23f78 <__sfvwrite_r+0x374>
   23f10:	80800917 	ldw	r2,36(r16)
   23f14:	81400717 	ldw	r5,28(r16)
   23f18:	a809883a 	mov	r4,r21
   23f1c:	b80d883a 	mov	r6,r23
   23f20:	103ee83a 	callr	r2
   23f24:	1029883a 	mov	r20,r2
   23f28:	00bfac0e 	bge	zero,r2,23ddc <__alt_data_end+0xf4023ddc>
   23f2c:	a005883a 	mov	r2,r20
   23f30:	003f9606 	br	23d8c <__alt_data_end+0xf4023d8c>
   23f34:	b80d883a 	mov	r6,r23
   23f38:	e00b883a 	mov	r5,fp
   23f3c:	da000115 	stw	r8,4(sp)
   23f40:	00242c80 	call	242c8 <memmove>
   23f44:	80800217 	ldw	r2,8(r16)
   23f48:	80c00017 	ldw	r3,0(r16)
   23f4c:	da000117 	ldw	r8,4(sp)
   23f50:	15c5c83a 	sub	r2,r2,r23
   23f54:	1def883a 	add	r23,r3,r23
   23f58:	80800215 	stw	r2,8(r16)
   23f5c:	85c00015 	stw	r23,0(r16)
   23f60:	003fbe06 	br	23e5c <__alt_data_end+0xf4023e5c>
   23f64:	81000017 	ldw	r4,0(r16)
   23f68:	9039883a 	mov	fp,r18
   23f6c:	9029883a 	mov	r20,r18
   23f70:	902d883a 	mov	r22,r18
   23f74:	003f7b06 	br	23d64 <__alt_data_end+0xf4023d64>
   23f78:	b80b883a 	mov	r5,r23
   23f7c:	900d883a 	mov	r6,r18
   23f80:	00242c80 	call	242c8 <memmove>
   23f84:	80c00217 	ldw	r3,8(r16)
   23f88:	80800017 	ldw	r2,0(r16)
   23f8c:	9029883a 	mov	r20,r18
   23f90:	1c87c83a 	sub	r3,r3,r18
   23f94:	1485883a 	add	r2,r2,r18
   23f98:	80800015 	stw	r2,0(r16)
   23f9c:	80c00215 	stw	r3,8(r16)
   23fa0:	9005883a 	mov	r2,r18
   23fa4:	003f7906 	br	23d8c <__alt_data_end+0xf4023d8c>
   23fa8:	e009883a 	mov	r4,fp
   23fac:	01400284 	movi	r5,10
   23fb0:	900d883a 	mov	r6,r18
   23fb4:	00240a80 	call	240a8 <memchr>
   23fb8:	10003826 	beq	r2,zero,2409c <__sfvwrite_r+0x498>
   23fbc:	10800044 	addi	r2,r2,1
   23fc0:	1729c83a 	sub	r20,r2,fp
   23fc4:	02000044 	movi	r8,1
   23fc8:	003f8f06 	br	23e08 <__alt_data_end+0xf4023e08>
   23fcc:	80800517 	ldw	r2,20(r16)
   23fd0:	81400417 	ldw	r5,16(r16)
   23fd4:	87000017 	ldw	fp,0(r16)
   23fd8:	10a9883a 	add	r20,r2,r2
   23fdc:	a085883a 	add	r2,r20,r2
   23fe0:	1028d7fa 	srli	r20,r2,31
   23fe4:	e179c83a 	sub	fp,fp,r5
   23fe8:	e1000044 	addi	r4,fp,1
   23fec:	a085883a 	add	r2,r20,r2
   23ff0:	1029d07a 	srai	r20,r2,1
   23ff4:	2485883a 	add	r2,r4,r18
   23ff8:	a00d883a 	mov	r6,r20
   23ffc:	a080022e 	bgeu	r20,r2,24008 <__sfvwrite_r+0x404>
   24000:	1029883a 	mov	r20,r2
   24004:	100d883a 	mov	r6,r2
   24008:	18c1000c 	andi	r3,r3,1024
   2400c:	a809883a 	mov	r4,r21
   24010:	183f6a26 	beq	r3,zero,23dbc <__alt_data_end+0xf4023dbc>
   24014:	300b883a 	mov	r5,r6
   24018:	00229a80 	call	229a8 <_malloc_r>
   2401c:	102d883a 	mov	r22,r2
   24020:	103f6c26 	beq	r2,zero,23dd4 <__alt_data_end+0xf4023dd4>
   24024:	81400417 	ldw	r5,16(r16)
   24028:	1009883a 	mov	r4,r2
   2402c:	e00d883a 	mov	r6,fp
   24030:	00241900 	call	24190 <memcpy>
   24034:	8080030b 	ldhu	r2,12(r16)
   24038:	00fedfc4 	movi	r3,-1153
   2403c:	10c4703a 	and	r2,r2,r3
   24040:	10802014 	ori	r2,r2,128
   24044:	8080030d 	sth	r2,12(r16)
   24048:	b709883a 	add	r4,r22,fp
   2404c:	a707c83a 	sub	r3,r20,fp
   24050:	85800415 	stw	r22,16(r16)
   24054:	85000515 	stw	r20,20(r16)
   24058:	81000015 	stw	r4,0(r16)
   2405c:	9039883a 	mov	fp,r18
   24060:	80c00215 	stw	r3,8(r16)
   24064:	9029883a 	mov	r20,r18
   24068:	902d883a 	mov	r22,r18
   2406c:	003f3d06 	br	23d64 <__alt_data_end+0xf4023d64>
   24070:	b80b883a 	mov	r5,r23
   24074:	a00d883a 	mov	r6,r20
   24078:	00242c80 	call	242c8 <memmove>
   2407c:	80800017 	ldw	r2,0(r16)
   24080:	a809883a 	mov	r4,r21
   24084:	800b883a 	mov	r5,r16
   24088:	1505883a 	add	r2,r2,r20
   2408c:	80800015 	stw	r2,0(r16)
   24090:	0024dcc0 	call	24dcc <_fflush_r>
   24094:	103fa526 	beq	r2,zero,23f2c <__alt_data_end+0xf4023f2c>
   24098:	003f5006 	br	23ddc <__alt_data_end+0xf4023ddc>
   2409c:	95000044 	addi	r20,r18,1
   240a0:	02000044 	movi	r8,1
   240a4:	003f5806 	br	23e08 <__alt_data_end+0xf4023e08>

000240a8 <memchr>:
   240a8:	208000cc 	andi	r2,r4,3
   240ac:	280f883a 	mov	r7,r5
   240b0:	10003526 	beq	r2,zero,24188 <memchr+0xe0>
   240b4:	30bfffc4 	addi	r2,r6,-1
   240b8:	30001b26 	beq	r6,zero,24128 <memchr+0x80>
   240bc:	21800003 	ldbu	r6,0(r4)
   240c0:	28c03fcc 	andi	r3,r5,255
   240c4:	30c01a26 	beq	r6,r3,24130 <memchr+0x88>
   240c8:	180d883a 	mov	r6,r3
   240cc:	00000406 	br	240e0 <memchr+0x38>
   240d0:	10001526 	beq	r2,zero,24128 <memchr+0x80>
   240d4:	20c00003 	ldbu	r3,0(r4)
   240d8:	10bfffc4 	addi	r2,r2,-1
   240dc:	19801426 	beq	r3,r6,24130 <memchr+0x88>
   240e0:	21000044 	addi	r4,r4,1
   240e4:	20c000cc 	andi	r3,r4,3
   240e8:	183ff91e 	bne	r3,zero,240d0 <__alt_data_end+0xf40240d0>
   240ec:	024000c4 	movi	r9,3
   240f0:	48801136 	bltu	r9,r2,24138 <memchr+0x90>
   240f4:	10000c26 	beq	r2,zero,24128 <memchr+0x80>
   240f8:	20c00003 	ldbu	r3,0(r4)
   240fc:	29403fcc 	andi	r5,r5,255
   24100:	19400b26 	beq	r3,r5,24130 <memchr+0x88>
   24104:	20c00044 	addi	r3,r4,1
   24108:	2085883a 	add	r2,r4,r2
   2410c:	39803fcc 	andi	r6,r7,255
   24110:	00000306 	br	24120 <memchr+0x78>
   24114:	18c00044 	addi	r3,r3,1
   24118:	197fffc3 	ldbu	r5,-1(r3)
   2411c:	29800426 	beq	r5,r6,24130 <memchr+0x88>
   24120:	1809883a 	mov	r4,r3
   24124:	18bffb1e 	bne	r3,r2,24114 <__alt_data_end+0xf4024114>
   24128:	0005883a 	mov	r2,zero
   2412c:	f800283a 	ret
   24130:	2005883a 	mov	r2,r4
   24134:	f800283a 	ret
   24138:	28c03fcc 	andi	r3,r5,255
   2413c:	1810923a 	slli	r8,r3,8
   24140:	02ffbff4 	movhi	r11,65279
   24144:	02a02074 	movhi	r10,32897
   24148:	40c6b03a 	or	r3,r8,r3
   2414c:	1810943a 	slli	r8,r3,16
   24150:	5affbfc4 	addi	r11,r11,-257
   24154:	52a02004 	addi	r10,r10,-32640
   24158:	40d0b03a 	or	r8,r8,r3
   2415c:	20c00017 	ldw	r3,0(r4)
   24160:	40c6f03a 	xor	r3,r8,r3
   24164:	1acd883a 	add	r6,r3,r11
   24168:	00c6303a 	nor	r3,zero,r3
   2416c:	30c6703a 	and	r3,r6,r3
   24170:	1a86703a 	and	r3,r3,r10
   24174:	183fdf1e 	bne	r3,zero,240f4 <__alt_data_end+0xf40240f4>
   24178:	10bfff04 	addi	r2,r2,-4
   2417c:	21000104 	addi	r4,r4,4
   24180:	48bff636 	bltu	r9,r2,2415c <__alt_data_end+0xf402415c>
   24184:	003fdb06 	br	240f4 <__alt_data_end+0xf40240f4>
   24188:	3005883a 	mov	r2,r6
   2418c:	003fd706 	br	240ec <__alt_data_end+0xf40240ec>

00024190 <memcpy>:
   24190:	deffff04 	addi	sp,sp,-4
   24194:	dc000015 	stw	r16,0(sp)
   24198:	00c003c4 	movi	r3,15
   2419c:	2005883a 	mov	r2,r4
   241a0:	1980432e 	bgeu	r3,r6,242b0 <memcpy+0x120>
   241a4:	2146b03a 	or	r3,r4,r5
   241a8:	18c000cc 	andi	r3,r3,3
   241ac:	1800421e 	bne	r3,zero,242b8 <memcpy+0x128>
   241b0:	343ffc04 	addi	r16,r6,-16
   241b4:	8020d13a 	srli	r16,r16,4
   241b8:	28c00104 	addi	r3,r5,4
   241bc:	23400104 	addi	r13,r4,4
   241c0:	801e913a 	slli	r15,r16,4
   241c4:	2b000204 	addi	r12,r5,8
   241c8:	22c00204 	addi	r11,r4,8
   241cc:	7bc00504 	addi	r15,r15,20
   241d0:	2a800304 	addi	r10,r5,12
   241d4:	22400304 	addi	r9,r4,12
   241d8:	2bdf883a 	add	r15,r5,r15
   241dc:	2811883a 	mov	r8,r5
   241e0:	200f883a 	mov	r7,r4
   241e4:	41000017 	ldw	r4,0(r8)
   241e8:	39c00404 	addi	r7,r7,16
   241ec:	18c00404 	addi	r3,r3,16
   241f0:	393ffc15 	stw	r4,-16(r7)
   241f4:	1bbffc17 	ldw	r14,-16(r3)
   241f8:	6b400404 	addi	r13,r13,16
   241fc:	5ac00404 	addi	r11,r11,16
   24200:	6bbffc15 	stw	r14,-16(r13)
   24204:	63800017 	ldw	r14,0(r12)
   24208:	4a400404 	addi	r9,r9,16
   2420c:	42000404 	addi	r8,r8,16
   24210:	5bbffc15 	stw	r14,-16(r11)
   24214:	53800017 	ldw	r14,0(r10)
   24218:	63000404 	addi	r12,r12,16
   2421c:	52800404 	addi	r10,r10,16
   24220:	4bbffc15 	stw	r14,-16(r9)
   24224:	1bffef1e 	bne	r3,r15,241e4 <__alt_data_end+0xf40241e4>
   24228:	81c00044 	addi	r7,r16,1
   2422c:	380e913a 	slli	r7,r7,4
   24230:	310003cc 	andi	r4,r6,15
   24234:	02c000c4 	movi	r11,3
   24238:	11c7883a 	add	r3,r2,r7
   2423c:	29cb883a 	add	r5,r5,r7
   24240:	59001f2e 	bgeu	r11,r4,242c0 <memcpy+0x130>
   24244:	1813883a 	mov	r9,r3
   24248:	2811883a 	mov	r8,r5
   2424c:	200f883a 	mov	r7,r4
   24250:	42800017 	ldw	r10,0(r8)
   24254:	4a400104 	addi	r9,r9,4
   24258:	39ffff04 	addi	r7,r7,-4
   2425c:	4abfff15 	stw	r10,-4(r9)
   24260:	42000104 	addi	r8,r8,4
   24264:	59fffa36 	bltu	r11,r7,24250 <__alt_data_end+0xf4024250>
   24268:	213fff04 	addi	r4,r4,-4
   2426c:	2008d0ba 	srli	r4,r4,2
   24270:	318000cc 	andi	r6,r6,3
   24274:	21000044 	addi	r4,r4,1
   24278:	2109883a 	add	r4,r4,r4
   2427c:	2109883a 	add	r4,r4,r4
   24280:	1907883a 	add	r3,r3,r4
   24284:	290b883a 	add	r5,r5,r4
   24288:	30000626 	beq	r6,zero,242a4 <memcpy+0x114>
   2428c:	198d883a 	add	r6,r3,r6
   24290:	29c00003 	ldbu	r7,0(r5)
   24294:	18c00044 	addi	r3,r3,1
   24298:	29400044 	addi	r5,r5,1
   2429c:	19ffffc5 	stb	r7,-1(r3)
   242a0:	19bffb1e 	bne	r3,r6,24290 <__alt_data_end+0xf4024290>
   242a4:	dc000017 	ldw	r16,0(sp)
   242a8:	dec00104 	addi	sp,sp,4
   242ac:	f800283a 	ret
   242b0:	2007883a 	mov	r3,r4
   242b4:	003ff406 	br	24288 <__alt_data_end+0xf4024288>
   242b8:	2007883a 	mov	r3,r4
   242bc:	003ff306 	br	2428c <__alt_data_end+0xf402428c>
   242c0:	200d883a 	mov	r6,r4
   242c4:	003ff006 	br	24288 <__alt_data_end+0xf4024288>

000242c8 <memmove>:
   242c8:	2005883a 	mov	r2,r4
   242cc:	29000b2e 	bgeu	r5,r4,242fc <memmove+0x34>
   242d0:	298f883a 	add	r7,r5,r6
   242d4:	21c0092e 	bgeu	r4,r7,242fc <memmove+0x34>
   242d8:	2187883a 	add	r3,r4,r6
   242dc:	198bc83a 	sub	r5,r3,r6
   242e0:	30004b26 	beq	r6,zero,24410 <memmove+0x148>
   242e4:	39ffffc4 	addi	r7,r7,-1
   242e8:	39000003 	ldbu	r4,0(r7)
   242ec:	18ffffc4 	addi	r3,r3,-1
   242f0:	19000005 	stb	r4,0(r3)
   242f4:	197ffb1e 	bne	r3,r5,242e4 <__alt_data_end+0xf40242e4>
   242f8:	f800283a 	ret
   242fc:	00c003c4 	movi	r3,15
   24300:	1980412e 	bgeu	r3,r6,24408 <memmove+0x140>
   24304:	1146b03a 	or	r3,r2,r5
   24308:	18c000cc 	andi	r3,r3,3
   2430c:	1800411e 	bne	r3,zero,24414 <memmove+0x14c>
   24310:	33fffc04 	addi	r15,r6,-16
   24314:	781ed13a 	srli	r15,r15,4
   24318:	28c00104 	addi	r3,r5,4
   2431c:	13400104 	addi	r13,r2,4
   24320:	781c913a 	slli	r14,r15,4
   24324:	2b000204 	addi	r12,r5,8
   24328:	12c00204 	addi	r11,r2,8
   2432c:	73800504 	addi	r14,r14,20
   24330:	2a800304 	addi	r10,r5,12
   24334:	12400304 	addi	r9,r2,12
   24338:	2b9d883a 	add	r14,r5,r14
   2433c:	2811883a 	mov	r8,r5
   24340:	100f883a 	mov	r7,r2
   24344:	41000017 	ldw	r4,0(r8)
   24348:	39c00404 	addi	r7,r7,16
   2434c:	18c00404 	addi	r3,r3,16
   24350:	393ffc15 	stw	r4,-16(r7)
   24354:	193ffc17 	ldw	r4,-16(r3)
   24358:	6b400404 	addi	r13,r13,16
   2435c:	5ac00404 	addi	r11,r11,16
   24360:	693ffc15 	stw	r4,-16(r13)
   24364:	61000017 	ldw	r4,0(r12)
   24368:	4a400404 	addi	r9,r9,16
   2436c:	42000404 	addi	r8,r8,16
   24370:	593ffc15 	stw	r4,-16(r11)
   24374:	51000017 	ldw	r4,0(r10)
   24378:	63000404 	addi	r12,r12,16
   2437c:	52800404 	addi	r10,r10,16
   24380:	493ffc15 	stw	r4,-16(r9)
   24384:	1bbfef1e 	bne	r3,r14,24344 <__alt_data_end+0xf4024344>
   24388:	79000044 	addi	r4,r15,1
   2438c:	2008913a 	slli	r4,r4,4
   24390:	328003cc 	andi	r10,r6,15
   24394:	02c000c4 	movi	r11,3
   24398:	1107883a 	add	r3,r2,r4
   2439c:	290b883a 	add	r5,r5,r4
   243a0:	5a801e2e 	bgeu	r11,r10,2441c <memmove+0x154>
   243a4:	1813883a 	mov	r9,r3
   243a8:	2811883a 	mov	r8,r5
   243ac:	500f883a 	mov	r7,r10
   243b0:	41000017 	ldw	r4,0(r8)
   243b4:	4a400104 	addi	r9,r9,4
   243b8:	39ffff04 	addi	r7,r7,-4
   243bc:	493fff15 	stw	r4,-4(r9)
   243c0:	42000104 	addi	r8,r8,4
   243c4:	59fffa36 	bltu	r11,r7,243b0 <__alt_data_end+0xf40243b0>
   243c8:	513fff04 	addi	r4,r10,-4
   243cc:	2008d0ba 	srli	r4,r4,2
   243d0:	318000cc 	andi	r6,r6,3
   243d4:	21000044 	addi	r4,r4,1
   243d8:	2109883a 	add	r4,r4,r4
   243dc:	2109883a 	add	r4,r4,r4
   243e0:	1907883a 	add	r3,r3,r4
   243e4:	290b883a 	add	r5,r5,r4
   243e8:	30000926 	beq	r6,zero,24410 <memmove+0x148>
   243ec:	198d883a 	add	r6,r3,r6
   243f0:	29c00003 	ldbu	r7,0(r5)
   243f4:	18c00044 	addi	r3,r3,1
   243f8:	29400044 	addi	r5,r5,1
   243fc:	19ffffc5 	stb	r7,-1(r3)
   24400:	19bffb1e 	bne	r3,r6,243f0 <__alt_data_end+0xf40243f0>
   24404:	f800283a 	ret
   24408:	1007883a 	mov	r3,r2
   2440c:	003ff606 	br	243e8 <__alt_data_end+0xf40243e8>
   24410:	f800283a 	ret
   24414:	1007883a 	mov	r3,r2
   24418:	003ff406 	br	243ec <__alt_data_end+0xf40243ec>
   2441c:	500d883a 	mov	r6,r10
   24420:	003ff106 	br	243e8 <__alt_data_end+0xf40243e8>

00024424 <_putc_r>:
   24424:	defffc04 	addi	sp,sp,-16
   24428:	dc000215 	stw	r16,8(sp)
   2442c:	dfc00315 	stw	ra,12(sp)
   24430:	2021883a 	mov	r16,r4
   24434:	20000226 	beq	r4,zero,24440 <_putc_r+0x1c>
   24438:	20800e17 	ldw	r2,56(r4)
   2443c:	10001b26 	beq	r2,zero,244ac <_putc_r+0x88>
   24440:	30800217 	ldw	r2,8(r6)
   24444:	10bfffc4 	addi	r2,r2,-1
   24448:	30800215 	stw	r2,8(r6)
   2444c:	10000a16 	blt	r2,zero,24478 <_putc_r+0x54>
   24450:	30800017 	ldw	r2,0(r6)
   24454:	11400005 	stb	r5,0(r2)
   24458:	30800017 	ldw	r2,0(r6)
   2445c:	10c00044 	addi	r3,r2,1
   24460:	30c00015 	stw	r3,0(r6)
   24464:	10800003 	ldbu	r2,0(r2)
   24468:	dfc00317 	ldw	ra,12(sp)
   2446c:	dc000217 	ldw	r16,8(sp)
   24470:	dec00404 	addi	sp,sp,16
   24474:	f800283a 	ret
   24478:	30c00617 	ldw	r3,24(r6)
   2447c:	10c00616 	blt	r2,r3,24498 <_putc_r+0x74>
   24480:	30800017 	ldw	r2,0(r6)
   24484:	00c00284 	movi	r3,10
   24488:	11400005 	stb	r5,0(r2)
   2448c:	30800017 	ldw	r2,0(r6)
   24490:	11400003 	ldbu	r5,0(r2)
   24494:	28fff11e 	bne	r5,r3,2445c <__alt_data_end+0xf402445c>
   24498:	8009883a 	mov	r4,r16
   2449c:	dfc00317 	ldw	ra,12(sp)
   244a0:	dc000217 	ldw	r16,8(sp)
   244a4:	dec00404 	addi	sp,sp,16
   244a8:	0024b2c1 	jmpi	24b2c <__swbuf_r>
   244ac:	d9400015 	stw	r5,0(sp)
   244b0:	d9800115 	stw	r6,4(sp)
   244b4:	00253880 	call	25388 <__sinit>
   244b8:	d9800117 	ldw	r6,4(sp)
   244bc:	d9400017 	ldw	r5,0(sp)
   244c0:	003fdf06 	br	24440 <__alt_data_end+0xf4024440>

000244c4 <putc>:
   244c4:	defffc04 	addi	sp,sp,-16
   244c8:	dc400115 	stw	r17,4(sp)
   244cc:	04420034 	movhi	r17,2048
   244d0:	8c478604 	addi	r17,r17,7704
   244d4:	dc800215 	stw	r18,8(sp)
   244d8:	2025883a 	mov	r18,r4
   244dc:	89000017 	ldw	r4,0(r17)
   244e0:	dc000015 	stw	r16,0(sp)
   244e4:	dfc00315 	stw	ra,12(sp)
   244e8:	2821883a 	mov	r16,r5
   244ec:	20000226 	beq	r4,zero,244f8 <putc+0x34>
   244f0:	20c00e17 	ldw	r3,56(r4)
   244f4:	18001a26 	beq	r3,zero,24560 <putc+0x9c>
   244f8:	80800217 	ldw	r2,8(r16)
   244fc:	10bfffc4 	addi	r2,r2,-1
   24500:	80800215 	stw	r2,8(r16)
   24504:	10000c16 	blt	r2,zero,24538 <putc+0x74>
   24508:	80800017 	ldw	r2,0(r16)
   2450c:	14800005 	stb	r18,0(r2)
   24510:	80800017 	ldw	r2,0(r16)
   24514:	10c00044 	addi	r3,r2,1
   24518:	80c00015 	stw	r3,0(r16)
   2451c:	10800003 	ldbu	r2,0(r2)
   24520:	dfc00317 	ldw	ra,12(sp)
   24524:	dc800217 	ldw	r18,8(sp)
   24528:	dc400117 	ldw	r17,4(sp)
   2452c:	dc000017 	ldw	r16,0(sp)
   24530:	dec00404 	addi	sp,sp,16
   24534:	f800283a 	ret
   24538:	80c00617 	ldw	r3,24(r16)
   2453c:	10c00a16 	blt	r2,r3,24568 <putc+0xa4>
   24540:	80800017 	ldw	r2,0(r16)
   24544:	00c00284 	movi	r3,10
   24548:	14800005 	stb	r18,0(r2)
   2454c:	80800017 	ldw	r2,0(r16)
   24550:	11400003 	ldbu	r5,0(r2)
   24554:	28ffef1e 	bne	r5,r3,24514 <__alt_data_end+0xf4024514>
   24558:	89000017 	ldw	r4,0(r17)
   2455c:	00000406 	br	24570 <putc+0xac>
   24560:	00253880 	call	25388 <__sinit>
   24564:	003fe406 	br	244f8 <__alt_data_end+0xf40244f8>
   24568:	89000017 	ldw	r4,0(r17)
   2456c:	900b883a 	mov	r5,r18
   24570:	800d883a 	mov	r6,r16
   24574:	dfc00317 	ldw	ra,12(sp)
   24578:	dc800217 	ldw	r18,8(sp)
   2457c:	dc400117 	ldw	r17,4(sp)
   24580:	dc000017 	ldw	r16,0(sp)
   24584:	dec00404 	addi	sp,sp,16
   24588:	0024b2c1 	jmpi	24b2c <__swbuf_r>

0002458c <_realloc_r>:
   2458c:	defff604 	addi	sp,sp,-40
   24590:	dcc00315 	stw	r19,12(sp)
   24594:	dc400115 	stw	r17,4(sp)
   24598:	dfc00915 	stw	ra,36(sp)
   2459c:	df000815 	stw	fp,32(sp)
   245a0:	ddc00715 	stw	r23,28(sp)
   245a4:	dd800615 	stw	r22,24(sp)
   245a8:	dd400515 	stw	r21,20(sp)
   245ac:	dd000415 	stw	r20,16(sp)
   245b0:	dc800215 	stw	r18,8(sp)
   245b4:	dc000015 	stw	r16,0(sp)
   245b8:	2827883a 	mov	r19,r5
   245bc:	3023883a 	mov	r17,r6
   245c0:	2800bf26 	beq	r5,zero,248c0 <_realloc_r+0x334>
   245c4:	2025883a 	mov	r18,r4
   245c8:	00263180 	call	26318 <__malloc_lock>
   245cc:	98ffff17 	ldw	r3,-4(r19)
   245d0:	01bfff04 	movi	r6,-4
   245d4:	890002c4 	addi	r4,r17,11
   245d8:	01c00584 	movi	r7,22
   245dc:	9d7ffe04 	addi	r21,r19,-8
   245e0:	19a0703a 	and	r16,r3,r6
   245e4:	39003f2e 	bgeu	r7,r4,246e4 <_realloc_r+0x158>
   245e8:	053ffe04 	movi	r20,-8
   245ec:	2528703a 	and	r20,r4,r20
   245f0:	a00f883a 	mov	r7,r20
   245f4:	a0008216 	blt	r20,zero,24800 <_realloc_r+0x274>
   245f8:	a4408136 	bltu	r20,r17,24800 <_realloc_r+0x274>
   245fc:	81c03c0e 	bge	r16,r7,246f0 <_realloc_r+0x164>
   24600:	07020034 	movhi	fp,2048
   24604:	e700d204 	addi	fp,fp,840
   24608:	e1000217 	ldw	r4,8(fp)
   2460c:	ac05883a 	add	r2,r21,r16
   24610:	2080bf26 	beq	r4,r2,24910 <_realloc_r+0x384>
   24614:	11000117 	ldw	r4,4(r2)
   24618:	023fff84 	movi	r8,-2
   2461c:	2210703a 	and	r8,r4,r8
   24620:	1211883a 	add	r8,r2,r8
   24624:	41400117 	ldw	r5,4(r8)
   24628:	2940004c 	andi	r5,r5,1
   2462c:	28004a1e 	bne	r5,zero,24758 <_realloc_r+0x1cc>
   24630:	017fff04 	movi	r5,-4
   24634:	2148703a 	and	r4,r4,r5
   24638:	2409883a 	add	r4,r4,r16
   2463c:	21c0ad0e 	bge	r4,r7,248f4 <_realloc_r+0x368>
   24640:	18c0004c 	andi	r3,r3,1
   24644:	18007f1e 	bne	r3,zero,24844 <_realloc_r+0x2b8>
   24648:	9dfffe17 	ldw	r23,-8(r19)
   2464c:	adefc83a 	sub	r23,r21,r23
   24650:	bd800117 	ldw	r22,4(r23)
   24654:	b14a703a 	and	r5,r22,r5
   24658:	216d883a 	add	r22,r4,r5
   2465c:	b1c04516 	blt	r22,r7,24774 <_realloc_r+0x1e8>
   24660:	10c00317 	ldw	r3,12(r2)
   24664:	10800217 	ldw	r2,8(r2)
   24668:	81bfff04 	addi	r6,r16,-4
   2466c:	bc400204 	addi	r17,r23,8
   24670:	10c00315 	stw	r3,12(r2)
   24674:	18800215 	stw	r2,8(r3)
   24678:	b9400217 	ldw	r5,8(r23)
   2467c:	b8c00317 	ldw	r3,12(r23)
   24680:	00800904 	movi	r2,36
   24684:	28c00315 	stw	r3,12(r5)
   24688:	19400215 	stw	r5,8(r3)
   2468c:	1180ef36 	bltu	r2,r6,24a4c <_realloc_r+0x4c0>
   24690:	008004c4 	movi	r2,19
   24694:	1180da2e 	bgeu	r2,r6,24a00 <_realloc_r+0x474>
   24698:	98800017 	ldw	r2,0(r19)
   2469c:	b8800215 	stw	r2,8(r23)
   246a0:	98800117 	ldw	r2,4(r19)
   246a4:	b8800315 	stw	r2,12(r23)
   246a8:	008006c4 	movi	r2,27
   246ac:	1180fc2e 	bgeu	r2,r6,24aa0 <_realloc_r+0x514>
   246b0:	98800217 	ldw	r2,8(r19)
   246b4:	b8800415 	stw	r2,16(r23)
   246b8:	98800317 	ldw	r2,12(r19)
   246bc:	b8800515 	stw	r2,20(r23)
   246c0:	00800904 	movi	r2,36
   246c4:	3080421e 	bne	r6,r2,247d0 <_realloc_r+0x244>
   246c8:	98800417 	ldw	r2,16(r19)
   246cc:	9cc00604 	addi	r19,r19,24
   246d0:	b8c00804 	addi	r3,r23,32
   246d4:	b8800615 	stw	r2,24(r23)
   246d8:	98bfff17 	ldw	r2,-4(r19)
   246dc:	b8800715 	stw	r2,28(r23)
   246e0:	00003d06 	br	247d8 <_realloc_r+0x24c>
   246e4:	01c00404 	movi	r7,16
   246e8:	3829883a 	mov	r20,r7
   246ec:	003fc206 	br	245f8 <__alt_data_end+0xf40245f8>
   246f0:	9823883a 	mov	r17,r19
   246f4:	850fc83a 	sub	r7,r16,r20
   246f8:	008003c4 	movi	r2,15
   246fc:	18c0004c 	andi	r3,r3,1
   24700:	11c04336 	bltu	r2,r7,24810 <_realloc_r+0x284>
   24704:	1c06b03a 	or	r3,r3,r16
   24708:	a8c00115 	stw	r3,4(r21)
   2470c:	ac21883a 	add	r16,r21,r16
   24710:	80c00117 	ldw	r3,4(r16)
   24714:	18c00054 	ori	r3,r3,1
   24718:	80c00115 	stw	r3,4(r16)
   2471c:	9009883a 	mov	r4,r18
   24720:	00263380 	call	26338 <__malloc_unlock>
   24724:	8805883a 	mov	r2,r17
   24728:	dfc00917 	ldw	ra,36(sp)
   2472c:	df000817 	ldw	fp,32(sp)
   24730:	ddc00717 	ldw	r23,28(sp)
   24734:	dd800617 	ldw	r22,24(sp)
   24738:	dd400517 	ldw	r21,20(sp)
   2473c:	dd000417 	ldw	r20,16(sp)
   24740:	dcc00317 	ldw	r19,12(sp)
   24744:	dc800217 	ldw	r18,8(sp)
   24748:	dc400117 	ldw	r17,4(sp)
   2474c:	dc000017 	ldw	r16,0(sp)
   24750:	dec00a04 	addi	sp,sp,40
   24754:	f800283a 	ret
   24758:	18c0004c 	andi	r3,r3,1
   2475c:	1800391e 	bne	r3,zero,24844 <_realloc_r+0x2b8>
   24760:	9dfffe17 	ldw	r23,-8(r19)
   24764:	00bfff04 	movi	r2,-4
   24768:	adefc83a 	sub	r23,r21,r23
   2476c:	b9400117 	ldw	r5,4(r23)
   24770:	288a703a 	and	r5,r5,r2
   24774:	2c2d883a 	add	r22,r5,r16
   24778:	b1c03216 	blt	r22,r7,24844 <_realloc_r+0x2b8>
   2477c:	b8800317 	ldw	r2,12(r23)
   24780:	b8c00217 	ldw	r3,8(r23)
   24784:	81bfff04 	addi	r6,r16,-4
   24788:	01000904 	movi	r4,36
   2478c:	18800315 	stw	r2,12(r3)
   24790:	10c00215 	stw	r3,8(r2)
   24794:	bc400204 	addi	r17,r23,8
   24798:	2180ac36 	bltu	r4,r6,24a4c <_realloc_r+0x4c0>
   2479c:	008004c4 	movi	r2,19
   247a0:	1180972e 	bgeu	r2,r6,24a00 <_realloc_r+0x474>
   247a4:	98800017 	ldw	r2,0(r19)
   247a8:	b8800215 	stw	r2,8(r23)
   247ac:	98800117 	ldw	r2,4(r19)
   247b0:	b8800315 	stw	r2,12(r23)
   247b4:	008006c4 	movi	r2,27
   247b8:	1180b92e 	bgeu	r2,r6,24aa0 <_realloc_r+0x514>
   247bc:	98800217 	ldw	r2,8(r19)
   247c0:	b8800415 	stw	r2,16(r23)
   247c4:	98800317 	ldw	r2,12(r19)
   247c8:	b8800515 	stw	r2,20(r23)
   247cc:	313fbe26 	beq	r6,r4,246c8 <__alt_data_end+0xf40246c8>
   247d0:	b8c00604 	addi	r3,r23,24
   247d4:	9cc00404 	addi	r19,r19,16
   247d8:	98800017 	ldw	r2,0(r19)
   247dc:	b021883a 	mov	r16,r22
   247e0:	b82b883a 	mov	r21,r23
   247e4:	18800015 	stw	r2,0(r3)
   247e8:	98800117 	ldw	r2,4(r19)
   247ec:	18800115 	stw	r2,4(r3)
   247f0:	98800217 	ldw	r2,8(r19)
   247f4:	18800215 	stw	r2,8(r3)
   247f8:	b8c00117 	ldw	r3,4(r23)
   247fc:	003fbd06 	br	246f4 <__alt_data_end+0xf40246f4>
   24800:	00800304 	movi	r2,12
   24804:	90800015 	stw	r2,0(r18)
   24808:	0005883a 	mov	r2,zero
   2480c:	003fc606 	br	24728 <__alt_data_end+0xf4024728>
   24810:	1d06b03a 	or	r3,r3,r20
   24814:	ad0b883a 	add	r5,r21,r20
   24818:	a8c00115 	stw	r3,4(r21)
   2481c:	38800054 	ori	r2,r7,1
   24820:	28800115 	stw	r2,4(r5)
   24824:	29cf883a 	add	r7,r5,r7
   24828:	38800117 	ldw	r2,4(r7)
   2482c:	9009883a 	mov	r4,r18
   24830:	29400204 	addi	r5,r5,8
   24834:	10800054 	ori	r2,r2,1
   24838:	38800115 	stw	r2,4(r7)
   2483c:	00239140 	call	23914 <_free_r>
   24840:	003fb606 	br	2471c <__alt_data_end+0xf402471c>
   24844:	880b883a 	mov	r5,r17
   24848:	9009883a 	mov	r4,r18
   2484c:	00229a80 	call	229a8 <_malloc_r>
   24850:	1023883a 	mov	r17,r2
   24854:	1000aa26 	beq	r2,zero,24b00 <_realloc_r+0x574>
   24858:	98ffff17 	ldw	r3,-4(r19)
   2485c:	113ffe04 	addi	r4,r2,-8
   24860:	00bfff84 	movi	r2,-2
   24864:	1884703a 	and	r2,r3,r2
   24868:	a885883a 	add	r2,r21,r2
   2486c:	20808626 	beq	r4,r2,24a88 <_realloc_r+0x4fc>
   24870:	81bfff04 	addi	r6,r16,-4
   24874:	00800904 	movi	r2,36
   24878:	11807036 	bltu	r2,r6,24a3c <_realloc_r+0x4b0>
   2487c:	00c004c4 	movi	r3,19
   24880:	19805636 	bltu	r3,r6,249dc <_realloc_r+0x450>
   24884:	8805883a 	mov	r2,r17
   24888:	9807883a 	mov	r3,r19
   2488c:	19000017 	ldw	r4,0(r3)
   24890:	11000015 	stw	r4,0(r2)
   24894:	19000117 	ldw	r4,4(r3)
   24898:	11000115 	stw	r4,4(r2)
   2489c:	18c00217 	ldw	r3,8(r3)
   248a0:	10c00215 	stw	r3,8(r2)
   248a4:	980b883a 	mov	r5,r19
   248a8:	9009883a 	mov	r4,r18
   248ac:	00239140 	call	23914 <_free_r>
   248b0:	9009883a 	mov	r4,r18
   248b4:	00263380 	call	26338 <__malloc_unlock>
   248b8:	8805883a 	mov	r2,r17
   248bc:	003f9a06 	br	24728 <__alt_data_end+0xf4024728>
   248c0:	300b883a 	mov	r5,r6
   248c4:	dfc00917 	ldw	ra,36(sp)
   248c8:	df000817 	ldw	fp,32(sp)
   248cc:	ddc00717 	ldw	r23,28(sp)
   248d0:	dd800617 	ldw	r22,24(sp)
   248d4:	dd400517 	ldw	r21,20(sp)
   248d8:	dd000417 	ldw	r20,16(sp)
   248dc:	dcc00317 	ldw	r19,12(sp)
   248e0:	dc800217 	ldw	r18,8(sp)
   248e4:	dc400117 	ldw	r17,4(sp)
   248e8:	dc000017 	ldw	r16,0(sp)
   248ec:	dec00a04 	addi	sp,sp,40
   248f0:	00229a81 	jmpi	229a8 <_malloc_r>
   248f4:	11400317 	ldw	r5,12(r2)
   248f8:	10800217 	ldw	r2,8(r2)
   248fc:	9823883a 	mov	r17,r19
   24900:	2021883a 	mov	r16,r4
   24904:	11400315 	stw	r5,12(r2)
   24908:	28800215 	stw	r2,8(r5)
   2490c:	003f7906 	br	246f4 <__alt_data_end+0xf40246f4>
   24910:	21000117 	ldw	r4,4(r4)
   24914:	00bfff04 	movi	r2,-4
   24918:	a1800404 	addi	r6,r20,16
   2491c:	2088703a 	and	r4,r4,r2
   24920:	2409883a 	add	r4,r4,r16
   24924:	2180380e 	bge	r4,r6,24a08 <_realloc_r+0x47c>
   24928:	18c0004c 	andi	r3,r3,1
   2492c:	183fc51e 	bne	r3,zero,24844 <__alt_data_end+0xf4024844>
   24930:	9dfffe17 	ldw	r23,-8(r19)
   24934:	adefc83a 	sub	r23,r21,r23
   24938:	b9400117 	ldw	r5,4(r23)
   2493c:	288a703a 	and	r5,r5,r2
   24940:	216d883a 	add	r22,r4,r5
   24944:	b1bf8b16 	blt	r22,r6,24774 <__alt_data_end+0xf4024774>
   24948:	b8800317 	ldw	r2,12(r23)
   2494c:	b8c00217 	ldw	r3,8(r23)
   24950:	81bfff04 	addi	r6,r16,-4
   24954:	01000904 	movi	r4,36
   24958:	18800315 	stw	r2,12(r3)
   2495c:	10c00215 	stw	r3,8(r2)
   24960:	bc400204 	addi	r17,r23,8
   24964:	21805a36 	bltu	r4,r6,24ad0 <_realloc_r+0x544>
   24968:	008004c4 	movi	r2,19
   2496c:	1180562e 	bgeu	r2,r6,24ac8 <_realloc_r+0x53c>
   24970:	98800017 	ldw	r2,0(r19)
   24974:	b8800215 	stw	r2,8(r23)
   24978:	98800117 	ldw	r2,4(r19)
   2497c:	b8800315 	stw	r2,12(r23)
   24980:	008006c4 	movi	r2,27
   24984:	11805636 	bltu	r2,r6,24ae0 <_realloc_r+0x554>
   24988:	b8800404 	addi	r2,r23,16
   2498c:	9cc00204 	addi	r19,r19,8
   24990:	98c00017 	ldw	r3,0(r19)
   24994:	10c00015 	stw	r3,0(r2)
   24998:	98c00117 	ldw	r3,4(r19)
   2499c:	10c00115 	stw	r3,4(r2)
   249a0:	98c00217 	ldw	r3,8(r19)
   249a4:	10c00215 	stw	r3,8(r2)
   249a8:	bd07883a 	add	r3,r23,r20
   249ac:	b505c83a 	sub	r2,r22,r20
   249b0:	e0c00215 	stw	r3,8(fp)
   249b4:	10800054 	ori	r2,r2,1
   249b8:	18800115 	stw	r2,4(r3)
   249bc:	b8800117 	ldw	r2,4(r23)
   249c0:	9009883a 	mov	r4,r18
   249c4:	1080004c 	andi	r2,r2,1
   249c8:	a0a8b03a 	or	r20,r20,r2
   249cc:	bd000115 	stw	r20,4(r23)
   249d0:	00263380 	call	26338 <__malloc_unlock>
   249d4:	8805883a 	mov	r2,r17
   249d8:	003f5306 	br	24728 <__alt_data_end+0xf4024728>
   249dc:	98c00017 	ldw	r3,0(r19)
   249e0:	88c00015 	stw	r3,0(r17)
   249e4:	98c00117 	ldw	r3,4(r19)
   249e8:	88c00115 	stw	r3,4(r17)
   249ec:	00c006c4 	movi	r3,27
   249f0:	19801d36 	bltu	r3,r6,24a68 <_realloc_r+0x4dc>
   249f4:	88800204 	addi	r2,r17,8
   249f8:	98c00204 	addi	r3,r19,8
   249fc:	003fa306 	br	2488c <__alt_data_end+0xf402488c>
   24a00:	8807883a 	mov	r3,r17
   24a04:	003f7406 	br	247d8 <__alt_data_end+0xf40247d8>
   24a08:	ad2b883a 	add	r21,r21,r20
   24a0c:	2505c83a 	sub	r2,r4,r20
   24a10:	e5400215 	stw	r21,8(fp)
   24a14:	10800054 	ori	r2,r2,1
   24a18:	a8800115 	stw	r2,4(r21)
   24a1c:	98bfff17 	ldw	r2,-4(r19)
   24a20:	9009883a 	mov	r4,r18
   24a24:	1080004c 	andi	r2,r2,1
   24a28:	a0a8b03a 	or	r20,r20,r2
   24a2c:	9d3fff15 	stw	r20,-4(r19)
   24a30:	00263380 	call	26338 <__malloc_unlock>
   24a34:	9805883a 	mov	r2,r19
   24a38:	003f3b06 	br	24728 <__alt_data_end+0xf4024728>
   24a3c:	8809883a 	mov	r4,r17
   24a40:	980b883a 	mov	r5,r19
   24a44:	00242c80 	call	242c8 <memmove>
   24a48:	003f9606 	br	248a4 <__alt_data_end+0xf40248a4>
   24a4c:	8809883a 	mov	r4,r17
   24a50:	980b883a 	mov	r5,r19
   24a54:	00242c80 	call	242c8 <memmove>
   24a58:	b8c00117 	ldw	r3,4(r23)
   24a5c:	b021883a 	mov	r16,r22
   24a60:	b82b883a 	mov	r21,r23
   24a64:	003f2306 	br	246f4 <__alt_data_end+0xf40246f4>
   24a68:	98c00217 	ldw	r3,8(r19)
   24a6c:	88c00215 	stw	r3,8(r17)
   24a70:	98c00317 	ldw	r3,12(r19)
   24a74:	88c00315 	stw	r3,12(r17)
   24a78:	30800c26 	beq	r6,r2,24aac <_realloc_r+0x520>
   24a7c:	88800404 	addi	r2,r17,16
   24a80:	98c00404 	addi	r3,r19,16
   24a84:	003f8106 	br	2488c <__alt_data_end+0xf402488c>
   24a88:	893fff17 	ldw	r4,-4(r17)
   24a8c:	00bfff04 	movi	r2,-4
   24a90:	9823883a 	mov	r17,r19
   24a94:	2084703a 	and	r2,r4,r2
   24a98:	80a1883a 	add	r16,r16,r2
   24a9c:	003f1506 	br	246f4 <__alt_data_end+0xf40246f4>
   24aa0:	b8c00404 	addi	r3,r23,16
   24aa4:	9cc00204 	addi	r19,r19,8
   24aa8:	003f4b06 	br	247d8 <__alt_data_end+0xf40247d8>
   24aac:	99000417 	ldw	r4,16(r19)
   24ab0:	88800604 	addi	r2,r17,24
   24ab4:	98c00604 	addi	r3,r19,24
   24ab8:	89000415 	stw	r4,16(r17)
   24abc:	99000517 	ldw	r4,20(r19)
   24ac0:	89000515 	stw	r4,20(r17)
   24ac4:	003f7106 	br	2488c <__alt_data_end+0xf402488c>
   24ac8:	8805883a 	mov	r2,r17
   24acc:	003fb006 	br	24990 <__alt_data_end+0xf4024990>
   24ad0:	8809883a 	mov	r4,r17
   24ad4:	980b883a 	mov	r5,r19
   24ad8:	00242c80 	call	242c8 <memmove>
   24adc:	003fb206 	br	249a8 <__alt_data_end+0xf40249a8>
   24ae0:	98800217 	ldw	r2,8(r19)
   24ae4:	b8800415 	stw	r2,16(r23)
   24ae8:	98800317 	ldw	r2,12(r19)
   24aec:	b8800515 	stw	r2,20(r23)
   24af0:	31000726 	beq	r6,r4,24b10 <_realloc_r+0x584>
   24af4:	b8800604 	addi	r2,r23,24
   24af8:	9cc00404 	addi	r19,r19,16
   24afc:	003fa406 	br	24990 <__alt_data_end+0xf4024990>
   24b00:	9009883a 	mov	r4,r18
   24b04:	00263380 	call	26338 <__malloc_unlock>
   24b08:	0005883a 	mov	r2,zero
   24b0c:	003f0606 	br	24728 <__alt_data_end+0xf4024728>
   24b10:	98c00417 	ldw	r3,16(r19)
   24b14:	9cc00604 	addi	r19,r19,24
   24b18:	b8800804 	addi	r2,r23,32
   24b1c:	b8c00615 	stw	r3,24(r23)
   24b20:	98ffff17 	ldw	r3,-4(r19)
   24b24:	b8c00715 	stw	r3,28(r23)
   24b28:	003f9906 	br	24990 <__alt_data_end+0xf4024990>

00024b2c <__swbuf_r>:
   24b2c:	defffc04 	addi	sp,sp,-16
   24b30:	dc800215 	stw	r18,8(sp)
   24b34:	dc400115 	stw	r17,4(sp)
   24b38:	dc000015 	stw	r16,0(sp)
   24b3c:	dfc00315 	stw	ra,12(sp)
   24b40:	2025883a 	mov	r18,r4
   24b44:	2823883a 	mov	r17,r5
   24b48:	3021883a 	mov	r16,r6
   24b4c:	20000226 	beq	r4,zero,24b58 <__swbuf_r+0x2c>
   24b50:	20800e17 	ldw	r2,56(r4)
   24b54:	10004126 	beq	r2,zero,24c5c <__swbuf_r+0x130>
   24b58:	80c00617 	ldw	r3,24(r16)
   24b5c:	8180030b 	ldhu	r6,12(r16)
   24b60:	80c00215 	stw	r3,8(r16)
   24b64:	30c0020c 	andi	r3,r6,8
   24b68:	18003526 	beq	r3,zero,24c40 <__swbuf_r+0x114>
   24b6c:	80c00417 	ldw	r3,16(r16)
   24b70:	18003326 	beq	r3,zero,24c40 <__swbuf_r+0x114>
   24b74:	3088000c 	andi	r2,r6,8192
   24b78:	8c403fcc 	andi	r17,r17,255
   24b7c:	10001726 	beq	r2,zero,24bdc <__swbuf_r+0xb0>
   24b80:	80800017 	ldw	r2,0(r16)
   24b84:	81000517 	ldw	r4,20(r16)
   24b88:	10c7c83a 	sub	r3,r2,r3
   24b8c:	19001d0e 	bge	r3,r4,24c04 <__swbuf_r+0xd8>
   24b90:	18c00044 	addi	r3,r3,1
   24b94:	81400217 	ldw	r5,8(r16)
   24b98:	11000044 	addi	r4,r2,1
   24b9c:	81000015 	stw	r4,0(r16)
   24ba0:	297fffc4 	addi	r5,r5,-1
   24ba4:	81400215 	stw	r5,8(r16)
   24ba8:	14400005 	stb	r17,0(r2)
   24bac:	80800517 	ldw	r2,20(r16)
   24bb0:	10c01d26 	beq	r2,r3,24c28 <__swbuf_r+0xfc>
   24bb4:	8080030b 	ldhu	r2,12(r16)
   24bb8:	1080004c 	andi	r2,r2,1
   24bbc:	1000181e 	bne	r2,zero,24c20 <__swbuf_r+0xf4>
   24bc0:	8805883a 	mov	r2,r17
   24bc4:	dfc00317 	ldw	ra,12(sp)
   24bc8:	dc800217 	ldw	r18,8(sp)
   24bcc:	dc400117 	ldw	r17,4(sp)
   24bd0:	dc000017 	ldw	r16,0(sp)
   24bd4:	dec00404 	addi	sp,sp,16
   24bd8:	f800283a 	ret
   24bdc:	81001917 	ldw	r4,100(r16)
   24be0:	00b7ffc4 	movi	r2,-8193
   24be4:	31880014 	ori	r6,r6,8192
   24be8:	2084703a 	and	r2,r4,r2
   24bec:	80801915 	stw	r2,100(r16)
   24bf0:	80800017 	ldw	r2,0(r16)
   24bf4:	81000517 	ldw	r4,20(r16)
   24bf8:	8180030d 	sth	r6,12(r16)
   24bfc:	10c7c83a 	sub	r3,r2,r3
   24c00:	193fe316 	blt	r3,r4,24b90 <__alt_data_end+0xf4024b90>
   24c04:	9009883a 	mov	r4,r18
   24c08:	800b883a 	mov	r5,r16
   24c0c:	0024dcc0 	call	24dcc <_fflush_r>
   24c10:	1000091e 	bne	r2,zero,24c38 <__swbuf_r+0x10c>
   24c14:	80800017 	ldw	r2,0(r16)
   24c18:	00c00044 	movi	r3,1
   24c1c:	003fdd06 	br	24b94 <__alt_data_end+0xf4024b94>
   24c20:	00800284 	movi	r2,10
   24c24:	88bfe61e 	bne	r17,r2,24bc0 <__alt_data_end+0xf4024bc0>
   24c28:	9009883a 	mov	r4,r18
   24c2c:	800b883a 	mov	r5,r16
   24c30:	0024dcc0 	call	24dcc <_fflush_r>
   24c34:	103fe226 	beq	r2,zero,24bc0 <__alt_data_end+0xf4024bc0>
   24c38:	00bfffc4 	movi	r2,-1
   24c3c:	003fe106 	br	24bc4 <__alt_data_end+0xf4024bc4>
   24c40:	9009883a 	mov	r4,r18
   24c44:	800b883a 	mov	r5,r16
   24c48:	0024c9c0 	call	24c9c <__swsetup_r>
   24c4c:	1000051e 	bne	r2,zero,24c64 <__swbuf_r+0x138>
   24c50:	8180030b 	ldhu	r6,12(r16)
   24c54:	80c00417 	ldw	r3,16(r16)
   24c58:	003fc606 	br	24b74 <__alt_data_end+0xf4024b74>
   24c5c:	00253880 	call	25388 <__sinit>
   24c60:	003fbd06 	br	24b58 <__alt_data_end+0xf4024b58>
   24c64:	80c0030b 	ldhu	r3,12(r16)
   24c68:	00bfffc4 	movi	r2,-1
   24c6c:	18c01014 	ori	r3,r3,64
   24c70:	80c0030d 	sth	r3,12(r16)
   24c74:	00c00244 	movi	r3,9
   24c78:	90c00015 	stw	r3,0(r18)
   24c7c:	003fd106 	br	24bc4 <__alt_data_end+0xf4024bc4>

00024c80 <__swbuf>:
   24c80:	00c20034 	movhi	r3,2048
   24c84:	18c78604 	addi	r3,r3,7704
   24c88:	2005883a 	mov	r2,r4
   24c8c:	19000017 	ldw	r4,0(r3)
   24c90:	280d883a 	mov	r6,r5
   24c94:	100b883a 	mov	r5,r2
   24c98:	0024b2c1 	jmpi	24b2c <__swbuf_r>

00024c9c <__swsetup_r>:
   24c9c:	00820034 	movhi	r2,2048
   24ca0:	defffd04 	addi	sp,sp,-12
   24ca4:	10878604 	addi	r2,r2,7704
   24ca8:	dc400115 	stw	r17,4(sp)
   24cac:	2023883a 	mov	r17,r4
   24cb0:	11000017 	ldw	r4,0(r2)
   24cb4:	dc000015 	stw	r16,0(sp)
   24cb8:	dfc00215 	stw	ra,8(sp)
   24cbc:	2821883a 	mov	r16,r5
   24cc0:	20000226 	beq	r4,zero,24ccc <__swsetup_r+0x30>
   24cc4:	20c00e17 	ldw	r3,56(r4)
   24cc8:	18002e26 	beq	r3,zero,24d84 <__swsetup_r+0xe8>
   24ccc:	8080030b 	ldhu	r2,12(r16)
   24cd0:	10c0020c 	andi	r3,r2,8
   24cd4:	100d883a 	mov	r6,r2
   24cd8:	18000f26 	beq	r3,zero,24d18 <__swsetup_r+0x7c>
   24cdc:	80c00417 	ldw	r3,16(r16)
   24ce0:	18001526 	beq	r3,zero,24d38 <__swsetup_r+0x9c>
   24ce4:	1100004c 	andi	r4,r2,1
   24ce8:	20001c1e 	bne	r4,zero,24d5c <__swsetup_r+0xc0>
   24cec:	1080008c 	andi	r2,r2,2
   24cf0:	1000261e 	bne	r2,zero,24d8c <__swsetup_r+0xf0>
   24cf4:	80800517 	ldw	r2,20(r16)
   24cf8:	80800215 	stw	r2,8(r16)
   24cfc:	18001c26 	beq	r3,zero,24d70 <__swsetup_r+0xd4>
   24d00:	0005883a 	mov	r2,zero
   24d04:	dfc00217 	ldw	ra,8(sp)
   24d08:	dc400117 	ldw	r17,4(sp)
   24d0c:	dc000017 	ldw	r16,0(sp)
   24d10:	dec00304 	addi	sp,sp,12
   24d14:	f800283a 	ret
   24d18:	3080040c 	andi	r2,r6,16
   24d1c:	10001726 	beq	r2,zero,24d7c <__swsetup_r+0xe0>
   24d20:	3080010c 	andi	r2,r6,4
   24d24:	10001b1e 	bne	r2,zero,24d94 <__swsetup_r+0xf8>
   24d28:	80c00417 	ldw	r3,16(r16)
   24d2c:	30800214 	ori	r2,r6,8
   24d30:	8080030d 	sth	r2,12(r16)
   24d34:	183feb1e 	bne	r3,zero,24ce4 <__alt_data_end+0xf4024ce4>
   24d38:	1140a00c 	andi	r5,r2,640
   24d3c:	01008004 	movi	r4,512
   24d40:	293fe826 	beq	r5,r4,24ce4 <__alt_data_end+0xf4024ce4>
   24d44:	8809883a 	mov	r4,r17
   24d48:	800b883a 	mov	r5,r16
   24d4c:	00255480 	call	25548 <__smakebuf_r>
   24d50:	8080030b 	ldhu	r2,12(r16)
   24d54:	80c00417 	ldw	r3,16(r16)
   24d58:	003fe206 	br	24ce4 <__alt_data_end+0xf4024ce4>
   24d5c:	80800517 	ldw	r2,20(r16)
   24d60:	80000215 	stw	zero,8(r16)
   24d64:	0085c83a 	sub	r2,zero,r2
   24d68:	80800615 	stw	r2,24(r16)
   24d6c:	183fe41e 	bne	r3,zero,24d00 <__alt_data_end+0xf4024d00>
   24d70:	8080030b 	ldhu	r2,12(r16)
   24d74:	1080200c 	andi	r2,r2,128
   24d78:	103fe226 	beq	r2,zero,24d04 <__alt_data_end+0xf4024d04>
   24d7c:	00bfffc4 	movi	r2,-1
   24d80:	003fe006 	br	24d04 <__alt_data_end+0xf4024d04>
   24d84:	00253880 	call	25388 <__sinit>
   24d88:	003fd006 	br	24ccc <__alt_data_end+0xf4024ccc>
   24d8c:	0005883a 	mov	r2,zero
   24d90:	003fd906 	br	24cf8 <__alt_data_end+0xf4024cf8>
   24d94:	81400c17 	ldw	r5,48(r16)
   24d98:	28000626 	beq	r5,zero,24db4 <__swsetup_r+0x118>
   24d9c:	80801004 	addi	r2,r16,64
   24da0:	28800326 	beq	r5,r2,24db0 <__swsetup_r+0x114>
   24da4:	8809883a 	mov	r4,r17
   24da8:	00239140 	call	23914 <_free_r>
   24dac:	8180030b 	ldhu	r6,12(r16)
   24db0:	80000c15 	stw	zero,48(r16)
   24db4:	80c00417 	ldw	r3,16(r16)
   24db8:	00bff6c4 	movi	r2,-37
   24dbc:	118c703a 	and	r6,r2,r6
   24dc0:	80000115 	stw	zero,4(r16)
   24dc4:	80c00015 	stw	r3,0(r16)
   24dc8:	003fd806 	br	24d2c <__alt_data_end+0xf4024d2c>

00024dcc <_fflush_r>:
   24dcc:	defffb04 	addi	sp,sp,-20
   24dd0:	dcc00315 	stw	r19,12(sp)
   24dd4:	dc000015 	stw	r16,0(sp)
   24dd8:	dfc00415 	stw	ra,16(sp)
   24ddc:	dc800215 	stw	r18,8(sp)
   24de0:	dc400115 	stw	r17,4(sp)
   24de4:	2027883a 	mov	r19,r4
   24de8:	2821883a 	mov	r16,r5
   24dec:	20000226 	beq	r4,zero,24df8 <_fflush_r+0x2c>
   24df0:	20800e17 	ldw	r2,56(r4)
   24df4:	10005326 	beq	r2,zero,24f44 <_fflush_r+0x178>
   24df8:	8080030b 	ldhu	r2,12(r16)
   24dfc:	10ffffcc 	andi	r3,r2,65535
   24e00:	18e0001c 	xori	r3,r3,32768
   24e04:	18e00004 	addi	r3,r3,-32768
   24e08:	18002c26 	beq	r3,zero,24ebc <_fflush_r+0xf0>
   24e0c:	10c0020c 	andi	r3,r2,8
   24e10:	1800321e 	bne	r3,zero,24edc <_fflush_r+0x110>
   24e14:	80c00117 	ldw	r3,4(r16)
   24e18:	10820014 	ori	r2,r2,2048
   24e1c:	8080030d 	sth	r2,12(r16)
   24e20:	00c0570e 	bge	zero,r3,24f80 <_fflush_r+0x1b4>
   24e24:	82000a17 	ldw	r8,40(r16)
   24e28:	40002426 	beq	r8,zero,24ebc <_fflush_r+0xf0>
   24e2c:	9c400017 	ldw	r17,0(r19)
   24e30:	10c4000c 	andi	r3,r2,4096
   24e34:	98000015 	stw	zero,0(r19)
   24e38:	18004626 	beq	r3,zero,24f54 <_fflush_r+0x188>
   24e3c:	81801417 	ldw	r6,80(r16)
   24e40:	10c0010c 	andi	r3,r2,4
   24e44:	18000626 	beq	r3,zero,24e60 <_fflush_r+0x94>
   24e48:	80c00117 	ldw	r3,4(r16)
   24e4c:	80800c17 	ldw	r2,48(r16)
   24e50:	30cdc83a 	sub	r6,r6,r3
   24e54:	10000226 	beq	r2,zero,24e60 <_fflush_r+0x94>
   24e58:	80800f17 	ldw	r2,60(r16)
   24e5c:	308dc83a 	sub	r6,r6,r2
   24e60:	81400717 	ldw	r5,28(r16)
   24e64:	9809883a 	mov	r4,r19
   24e68:	000f883a 	mov	r7,zero
   24e6c:	403ee83a 	callr	r8
   24e70:	00ffffc4 	movi	r3,-1
   24e74:	10c04526 	beq	r2,r3,24f8c <_fflush_r+0x1c0>
   24e78:	80c0030b 	ldhu	r3,12(r16)
   24e7c:	81000417 	ldw	r4,16(r16)
   24e80:	80000115 	stw	zero,4(r16)
   24e84:	197dffcc 	andi	r5,r3,63487
   24e88:	8140030d 	sth	r5,12(r16)
   24e8c:	81000015 	stw	r4,0(r16)
   24e90:	18c4000c 	andi	r3,r3,4096
   24e94:	18000126 	beq	r3,zero,24e9c <_fflush_r+0xd0>
   24e98:	80801415 	stw	r2,80(r16)
   24e9c:	81400c17 	ldw	r5,48(r16)
   24ea0:	9c400015 	stw	r17,0(r19)
   24ea4:	28000526 	beq	r5,zero,24ebc <_fflush_r+0xf0>
   24ea8:	80801004 	addi	r2,r16,64
   24eac:	28800226 	beq	r5,r2,24eb8 <_fflush_r+0xec>
   24eb0:	9809883a 	mov	r4,r19
   24eb4:	00239140 	call	23914 <_free_r>
   24eb8:	80000c15 	stw	zero,48(r16)
   24ebc:	0005883a 	mov	r2,zero
   24ec0:	dfc00417 	ldw	ra,16(sp)
   24ec4:	dcc00317 	ldw	r19,12(sp)
   24ec8:	dc800217 	ldw	r18,8(sp)
   24ecc:	dc400117 	ldw	r17,4(sp)
   24ed0:	dc000017 	ldw	r16,0(sp)
   24ed4:	dec00504 	addi	sp,sp,20
   24ed8:	f800283a 	ret
   24edc:	84800417 	ldw	r18,16(r16)
   24ee0:	903ff626 	beq	r18,zero,24ebc <__alt_data_end+0xf4024ebc>
   24ee4:	84400017 	ldw	r17,0(r16)
   24ee8:	108000cc 	andi	r2,r2,3
   24eec:	84800015 	stw	r18,0(r16)
   24ef0:	8ca3c83a 	sub	r17,r17,r18
   24ef4:	10001526 	beq	r2,zero,24f4c <_fflush_r+0x180>
   24ef8:	0005883a 	mov	r2,zero
   24efc:	80800215 	stw	r2,8(r16)
   24f00:	04400316 	blt	zero,r17,24f10 <_fflush_r+0x144>
   24f04:	003fed06 	br	24ebc <__alt_data_end+0xf4024ebc>
   24f08:	90a5883a 	add	r18,r18,r2
   24f0c:	047feb0e 	bge	zero,r17,24ebc <__alt_data_end+0xf4024ebc>
   24f10:	80800917 	ldw	r2,36(r16)
   24f14:	81400717 	ldw	r5,28(r16)
   24f18:	880f883a 	mov	r7,r17
   24f1c:	900d883a 	mov	r6,r18
   24f20:	9809883a 	mov	r4,r19
   24f24:	103ee83a 	callr	r2
   24f28:	88a3c83a 	sub	r17,r17,r2
   24f2c:	00bff616 	blt	zero,r2,24f08 <__alt_data_end+0xf4024f08>
   24f30:	80c0030b 	ldhu	r3,12(r16)
   24f34:	00bfffc4 	movi	r2,-1
   24f38:	18c01014 	ori	r3,r3,64
   24f3c:	80c0030d 	sth	r3,12(r16)
   24f40:	003fdf06 	br	24ec0 <__alt_data_end+0xf4024ec0>
   24f44:	00253880 	call	25388 <__sinit>
   24f48:	003fab06 	br	24df8 <__alt_data_end+0xf4024df8>
   24f4c:	80800517 	ldw	r2,20(r16)
   24f50:	003fea06 	br	24efc <__alt_data_end+0xf4024efc>
   24f54:	81400717 	ldw	r5,28(r16)
   24f58:	000d883a 	mov	r6,zero
   24f5c:	9809883a 	mov	r4,r19
   24f60:	01c00044 	movi	r7,1
   24f64:	403ee83a 	callr	r8
   24f68:	100d883a 	mov	r6,r2
   24f6c:	00bfffc4 	movi	r2,-1
   24f70:	30801326 	beq	r6,r2,24fc0 <_fflush_r+0x1f4>
   24f74:	8080030b 	ldhu	r2,12(r16)
   24f78:	82000a17 	ldw	r8,40(r16)
   24f7c:	003fb006 	br	24e40 <__alt_data_end+0xf4024e40>
   24f80:	80c00f17 	ldw	r3,60(r16)
   24f84:	00ffa716 	blt	zero,r3,24e24 <__alt_data_end+0xf4024e24>
   24f88:	003fcc06 	br	24ebc <__alt_data_end+0xf4024ebc>
   24f8c:	98c00017 	ldw	r3,0(r19)
   24f90:	183fb926 	beq	r3,zero,24e78 <__alt_data_end+0xf4024e78>
   24f94:	01000744 	movi	r4,29
   24f98:	19000226 	beq	r3,r4,24fa4 <_fflush_r+0x1d8>
   24f9c:	01000584 	movi	r4,22
   24fa0:	1900101e 	bne	r3,r4,24fe4 <_fflush_r+0x218>
   24fa4:	8080030b 	ldhu	r2,12(r16)
   24fa8:	80c00417 	ldw	r3,16(r16)
   24fac:	80000115 	stw	zero,4(r16)
   24fb0:	10bdffcc 	andi	r2,r2,63487
   24fb4:	8080030d 	sth	r2,12(r16)
   24fb8:	80c00015 	stw	r3,0(r16)
   24fbc:	003fb706 	br	24e9c <__alt_data_end+0xf4024e9c>
   24fc0:	98800017 	ldw	r2,0(r19)
   24fc4:	103feb26 	beq	r2,zero,24f74 <__alt_data_end+0xf4024f74>
   24fc8:	00c00744 	movi	r3,29
   24fcc:	10c00226 	beq	r2,r3,24fd8 <_fflush_r+0x20c>
   24fd0:	00c00584 	movi	r3,22
   24fd4:	10ffd61e 	bne	r2,r3,24f30 <__alt_data_end+0xf4024f30>
   24fd8:	9c400015 	stw	r17,0(r19)
   24fdc:	0005883a 	mov	r2,zero
   24fe0:	003fb706 	br	24ec0 <__alt_data_end+0xf4024ec0>
   24fe4:	80c0030b 	ldhu	r3,12(r16)
   24fe8:	18c01014 	ori	r3,r3,64
   24fec:	80c0030d 	sth	r3,12(r16)
   24ff0:	003fb306 	br	24ec0 <__alt_data_end+0xf4024ec0>

00024ff4 <fflush>:
   24ff4:	20000526 	beq	r4,zero,2500c <fflush+0x18>
   24ff8:	00820034 	movhi	r2,2048
   24ffc:	10878604 	addi	r2,r2,7704
   25000:	200b883a 	mov	r5,r4
   25004:	11000017 	ldw	r4,0(r2)
   25008:	0024dcc1 	jmpi	24dcc <_fflush_r>
   2500c:	00820034 	movhi	r2,2048
   25010:	10878504 	addi	r2,r2,7700
   25014:	11000017 	ldw	r4,0(r2)
   25018:	014000b4 	movhi	r5,2
   2501c:	29537304 	addi	r5,r5,19916
   25020:	00254901 	jmpi	25490 <_fwalk_reent>

00025024 <__fp_lock>:
   25024:	0005883a 	mov	r2,zero
   25028:	f800283a 	ret

0002502c <__fp_unlock>:
   2502c:	0005883a 	mov	r2,zero
   25030:	f800283a 	ret

00025034 <_cleanup_r>:
   25034:	014000b4 	movhi	r5,2
   25038:	29567b04 	addi	r5,r5,23020
   2503c:	00253d81 	jmpi	253d8 <_fwalk>

00025040 <__sinit.part.1>:
   25040:	defff604 	addi	sp,sp,-40
   25044:	00c000b4 	movhi	r3,2
   25048:	dfc00915 	stw	ra,36(sp)
   2504c:	df000815 	stw	fp,32(sp)
   25050:	ddc00715 	stw	r23,28(sp)
   25054:	dd800615 	stw	r22,24(sp)
   25058:	dd400515 	stw	r21,20(sp)
   2505c:	dd000415 	stw	r20,16(sp)
   25060:	dcc00315 	stw	r19,12(sp)
   25064:	dc800215 	stw	r18,8(sp)
   25068:	dc400115 	stw	r17,4(sp)
   2506c:	dc000015 	stw	r16,0(sp)
   25070:	18d40d04 	addi	r3,r3,20532
   25074:	24000117 	ldw	r16,4(r4)
   25078:	20c00f15 	stw	r3,60(r4)
   2507c:	07000044 	movi	fp,1
   25080:	00c000c4 	movi	r3,3
   25084:	2080bb04 	addi	r2,r4,748
   25088:	20c0b915 	stw	r3,740(r4)
   2508c:	27000e15 	stw	fp,56(r4)
   25090:	2080ba15 	stw	r2,744(r4)
   25094:	2000b815 	stw	zero,736(r4)
   25098:	05c00204 	movi	r23,8
   2509c:	00800104 	movi	r2,4
   250a0:	2025883a 	mov	r18,r4
   250a4:	b80d883a 	mov	r6,r23
   250a8:	81001704 	addi	r4,r16,92
   250ac:	000b883a 	mov	r5,zero
   250b0:	80000015 	stw	zero,0(r16)
   250b4:	80000115 	stw	zero,4(r16)
   250b8:	80000215 	stw	zero,8(r16)
   250bc:	8080030d 	sth	r2,12(r16)
   250c0:	80001915 	stw	zero,100(r16)
   250c4:	8000038d 	sth	zero,14(r16)
   250c8:	80000415 	stw	zero,16(r16)
   250cc:	80000515 	stw	zero,20(r16)
   250d0:	80000615 	stw	zero,24(r16)
   250d4:	00231500 	call	23150 <memset>
   250d8:	058000b4 	movhi	r22,2
   250dc:	94400217 	ldw	r17,8(r18)
   250e0:	054000b4 	movhi	r21,2
   250e4:	050000b4 	movhi	r20,2
   250e8:	04c000b4 	movhi	r19,2
   250ec:	b595c004 	addi	r22,r22,22272
   250f0:	ad55d704 	addi	r21,r21,22364
   250f4:	a515f604 	addi	r20,r20,22488
   250f8:	9cd60d04 	addi	r19,r19,22580
   250fc:	85800815 	stw	r22,32(r16)
   25100:	85400915 	stw	r21,36(r16)
   25104:	85000a15 	stw	r20,40(r16)
   25108:	84c00b15 	stw	r19,44(r16)
   2510c:	84000715 	stw	r16,28(r16)
   25110:	00800284 	movi	r2,10
   25114:	89001704 	addi	r4,r17,92
   25118:	b80d883a 	mov	r6,r23
   2511c:	000b883a 	mov	r5,zero
   25120:	88000015 	stw	zero,0(r17)
   25124:	88000115 	stw	zero,4(r17)
   25128:	88000215 	stw	zero,8(r17)
   2512c:	8880030d 	sth	r2,12(r17)
   25130:	88001915 	stw	zero,100(r17)
   25134:	8f00038d 	sth	fp,14(r17)
   25138:	88000415 	stw	zero,16(r17)
   2513c:	88000515 	stw	zero,20(r17)
   25140:	88000615 	stw	zero,24(r17)
   25144:	00231500 	call	23150 <memset>
   25148:	94000317 	ldw	r16,12(r18)
   2514c:	00800484 	movi	r2,18
   25150:	8c400715 	stw	r17,28(r17)
   25154:	8d800815 	stw	r22,32(r17)
   25158:	8d400915 	stw	r21,36(r17)
   2515c:	8d000a15 	stw	r20,40(r17)
   25160:	8cc00b15 	stw	r19,44(r17)
   25164:	8080030d 	sth	r2,12(r16)
   25168:	00800084 	movi	r2,2
   2516c:	80000015 	stw	zero,0(r16)
   25170:	80000115 	stw	zero,4(r16)
   25174:	80000215 	stw	zero,8(r16)
   25178:	80001915 	stw	zero,100(r16)
   2517c:	8080038d 	sth	r2,14(r16)
   25180:	80000415 	stw	zero,16(r16)
   25184:	80000515 	stw	zero,20(r16)
   25188:	80000615 	stw	zero,24(r16)
   2518c:	81001704 	addi	r4,r16,92
   25190:	000b883a 	mov	r5,zero
   25194:	b80d883a 	mov	r6,r23
   25198:	00231500 	call	23150 <memset>
   2519c:	84000715 	stw	r16,28(r16)
   251a0:	85800815 	stw	r22,32(r16)
   251a4:	85400915 	stw	r21,36(r16)
   251a8:	85000a15 	stw	r20,40(r16)
   251ac:	84c00b15 	stw	r19,44(r16)
   251b0:	dfc00917 	ldw	ra,36(sp)
   251b4:	df000817 	ldw	fp,32(sp)
   251b8:	ddc00717 	ldw	r23,28(sp)
   251bc:	dd800617 	ldw	r22,24(sp)
   251c0:	dd400517 	ldw	r21,20(sp)
   251c4:	dd000417 	ldw	r20,16(sp)
   251c8:	dcc00317 	ldw	r19,12(sp)
   251cc:	dc800217 	ldw	r18,8(sp)
   251d0:	dc400117 	ldw	r17,4(sp)
   251d4:	dc000017 	ldw	r16,0(sp)
   251d8:	dec00a04 	addi	sp,sp,40
   251dc:	f800283a 	ret

000251e0 <__sfmoreglue>:
   251e0:	defffc04 	addi	sp,sp,-16
   251e4:	dc800215 	stw	r18,8(sp)
   251e8:	2825883a 	mov	r18,r5
   251ec:	dc000015 	stw	r16,0(sp)
   251f0:	01401a04 	movi	r5,104
   251f4:	2021883a 	mov	r16,r4
   251f8:	9009883a 	mov	r4,r18
   251fc:	dfc00315 	stw	ra,12(sp)
   25200:	dc400115 	stw	r17,4(sp)
   25204:	00224200 	call	22420 <__mulsi3>
   25208:	8009883a 	mov	r4,r16
   2520c:	11400304 	addi	r5,r2,12
   25210:	1023883a 	mov	r17,r2
   25214:	00229a80 	call	229a8 <_malloc_r>
   25218:	1021883a 	mov	r16,r2
   2521c:	10000726 	beq	r2,zero,2523c <__sfmoreglue+0x5c>
   25220:	11000304 	addi	r4,r2,12
   25224:	10000015 	stw	zero,0(r2)
   25228:	14800115 	stw	r18,4(r2)
   2522c:	11000215 	stw	r4,8(r2)
   25230:	000b883a 	mov	r5,zero
   25234:	880d883a 	mov	r6,r17
   25238:	00231500 	call	23150 <memset>
   2523c:	8005883a 	mov	r2,r16
   25240:	dfc00317 	ldw	ra,12(sp)
   25244:	dc800217 	ldw	r18,8(sp)
   25248:	dc400117 	ldw	r17,4(sp)
   2524c:	dc000017 	ldw	r16,0(sp)
   25250:	dec00404 	addi	sp,sp,16
   25254:	f800283a 	ret

00025258 <__sfp>:
   25258:	00820034 	movhi	r2,2048
   2525c:	defffb04 	addi	sp,sp,-20
   25260:	10878504 	addi	r2,r2,7700
   25264:	dc800215 	stw	r18,8(sp)
   25268:	14800017 	ldw	r18,0(r2)
   2526c:	dcc00315 	stw	r19,12(sp)
   25270:	dfc00415 	stw	ra,16(sp)
   25274:	90800e17 	ldw	r2,56(r18)
   25278:	dc400115 	stw	r17,4(sp)
   2527c:	dc000015 	stw	r16,0(sp)
   25280:	2027883a 	mov	r19,r4
   25284:	1000021e 	bne	r2,zero,25290 <__sfp+0x38>
   25288:	9009883a 	mov	r4,r18
   2528c:	00250400 	call	25040 <__sinit.part.1>
   25290:	9480b804 	addi	r18,r18,736
   25294:	047fffc4 	movi	r17,-1
   25298:	91400117 	ldw	r5,4(r18)
   2529c:	94000217 	ldw	r16,8(r18)
   252a0:	297fffc4 	addi	r5,r5,-1
   252a4:	28000a16 	blt	r5,zero,252d0 <__sfp+0x78>
   252a8:	8080030f 	ldh	r2,12(r16)
   252ac:	10000c26 	beq	r2,zero,252e0 <__sfp+0x88>
   252b0:	80c01d04 	addi	r3,r16,116
   252b4:	00000206 	br	252c0 <__sfp+0x68>
   252b8:	18bfe60f 	ldh	r2,-104(r3)
   252bc:	10000826 	beq	r2,zero,252e0 <__sfp+0x88>
   252c0:	297fffc4 	addi	r5,r5,-1
   252c4:	1c3ffd04 	addi	r16,r3,-12
   252c8:	18c01a04 	addi	r3,r3,104
   252cc:	2c7ffa1e 	bne	r5,r17,252b8 <__alt_data_end+0xf40252b8>
   252d0:	90800017 	ldw	r2,0(r18)
   252d4:	10001d26 	beq	r2,zero,2534c <__sfp+0xf4>
   252d8:	1025883a 	mov	r18,r2
   252dc:	003fee06 	br	25298 <__alt_data_end+0xf4025298>
   252e0:	00bfffc4 	movi	r2,-1
   252e4:	8080038d 	sth	r2,14(r16)
   252e8:	00800044 	movi	r2,1
   252ec:	8080030d 	sth	r2,12(r16)
   252f0:	80001915 	stw	zero,100(r16)
   252f4:	80000015 	stw	zero,0(r16)
   252f8:	80000215 	stw	zero,8(r16)
   252fc:	80000115 	stw	zero,4(r16)
   25300:	80000415 	stw	zero,16(r16)
   25304:	80000515 	stw	zero,20(r16)
   25308:	80000615 	stw	zero,24(r16)
   2530c:	81001704 	addi	r4,r16,92
   25310:	000b883a 	mov	r5,zero
   25314:	01800204 	movi	r6,8
   25318:	00231500 	call	23150 <memset>
   2531c:	8005883a 	mov	r2,r16
   25320:	80000c15 	stw	zero,48(r16)
   25324:	80000d15 	stw	zero,52(r16)
   25328:	80001115 	stw	zero,68(r16)
   2532c:	80001215 	stw	zero,72(r16)
   25330:	dfc00417 	ldw	ra,16(sp)
   25334:	dcc00317 	ldw	r19,12(sp)
   25338:	dc800217 	ldw	r18,8(sp)
   2533c:	dc400117 	ldw	r17,4(sp)
   25340:	dc000017 	ldw	r16,0(sp)
   25344:	dec00504 	addi	sp,sp,20
   25348:	f800283a 	ret
   2534c:	9809883a 	mov	r4,r19
   25350:	01400104 	movi	r5,4
   25354:	00251e00 	call	251e0 <__sfmoreglue>
   25358:	90800015 	stw	r2,0(r18)
   2535c:	103fde1e 	bne	r2,zero,252d8 <__alt_data_end+0xf40252d8>
   25360:	00800304 	movi	r2,12
   25364:	98800015 	stw	r2,0(r19)
   25368:	0005883a 	mov	r2,zero
   2536c:	003ff006 	br	25330 <__alt_data_end+0xf4025330>

00025370 <_cleanup>:
   25370:	00820034 	movhi	r2,2048
   25374:	10878504 	addi	r2,r2,7700
   25378:	11000017 	ldw	r4,0(r2)
   2537c:	014000b4 	movhi	r5,2
   25380:	29567b04 	addi	r5,r5,23020
   25384:	00253d81 	jmpi	253d8 <_fwalk>

00025388 <__sinit>:
   25388:	20800e17 	ldw	r2,56(r4)
   2538c:	10000126 	beq	r2,zero,25394 <__sinit+0xc>
   25390:	f800283a 	ret
   25394:	00250401 	jmpi	25040 <__sinit.part.1>

00025398 <__sfp_lock_acquire>:
   25398:	f800283a 	ret

0002539c <__sfp_lock_release>:
   2539c:	f800283a 	ret

000253a0 <__sinit_lock_acquire>:
   253a0:	f800283a 	ret

000253a4 <__sinit_lock_release>:
   253a4:	f800283a 	ret

000253a8 <__fp_lock_all>:
   253a8:	00820034 	movhi	r2,2048
   253ac:	10878604 	addi	r2,r2,7704
   253b0:	11000017 	ldw	r4,0(r2)
   253b4:	014000b4 	movhi	r5,2
   253b8:	29540904 	addi	r5,r5,20516
   253bc:	00253d81 	jmpi	253d8 <_fwalk>

000253c0 <__fp_unlock_all>:
   253c0:	00820034 	movhi	r2,2048
   253c4:	10878604 	addi	r2,r2,7704
   253c8:	11000017 	ldw	r4,0(r2)
   253cc:	014000b4 	movhi	r5,2
   253d0:	29540b04 	addi	r5,r5,20524
   253d4:	00253d81 	jmpi	253d8 <_fwalk>

000253d8 <_fwalk>:
   253d8:	defff804 	addi	sp,sp,-32
   253dc:	dd400515 	stw	r21,20(sp)
   253e0:	2540b804 	addi	r21,r4,736
   253e4:	dd800615 	stw	r22,24(sp)
   253e8:	dd000415 	stw	r20,16(sp)
   253ec:	dfc00715 	stw	ra,28(sp)
   253f0:	dcc00315 	stw	r19,12(sp)
   253f4:	dc800215 	stw	r18,8(sp)
   253f8:	dc400115 	stw	r17,4(sp)
   253fc:	dc000015 	stw	r16,0(sp)
   25400:	2829883a 	mov	r20,r5
   25404:	002d883a 	mov	r22,zero
   25408:	00253980 	call	25398 <__sfp_lock_acquire>
   2540c:	a8001426 	beq	r21,zero,25460 <_fwalk+0x88>
   25410:	04ffffc4 	movi	r19,-1
   25414:	ac400117 	ldw	r17,4(r21)
   25418:	ac800217 	ldw	r18,8(r21)
   2541c:	8c7fffc4 	addi	r17,r17,-1
   25420:	88000d16 	blt	r17,zero,25458 <_fwalk+0x80>
   25424:	94000304 	addi	r16,r18,12
   25428:	94800384 	addi	r18,r18,14
   2542c:	80c0000f 	ldh	r3,0(r16)
   25430:	8c7fffc4 	addi	r17,r17,-1
   25434:	813ffd04 	addi	r4,r16,-12
   25438:	18000426 	beq	r3,zero,2544c <_fwalk+0x74>
   2543c:	90c0000f 	ldh	r3,0(r18)
   25440:	1cc00226 	beq	r3,r19,2544c <_fwalk+0x74>
   25444:	a03ee83a 	callr	r20
   25448:	b0acb03a 	or	r22,r22,r2
   2544c:	84001a04 	addi	r16,r16,104
   25450:	94801a04 	addi	r18,r18,104
   25454:	8cfff51e 	bne	r17,r19,2542c <__alt_data_end+0xf402542c>
   25458:	ad400017 	ldw	r21,0(r21)
   2545c:	a83fed1e 	bne	r21,zero,25414 <__alt_data_end+0xf4025414>
   25460:	002539c0 	call	2539c <__sfp_lock_release>
   25464:	b005883a 	mov	r2,r22
   25468:	dfc00717 	ldw	ra,28(sp)
   2546c:	dd800617 	ldw	r22,24(sp)
   25470:	dd400517 	ldw	r21,20(sp)
   25474:	dd000417 	ldw	r20,16(sp)
   25478:	dcc00317 	ldw	r19,12(sp)
   2547c:	dc800217 	ldw	r18,8(sp)
   25480:	dc400117 	ldw	r17,4(sp)
   25484:	dc000017 	ldw	r16,0(sp)
   25488:	dec00804 	addi	sp,sp,32
   2548c:	f800283a 	ret

00025490 <_fwalk_reent>:
   25490:	defff804 	addi	sp,sp,-32
   25494:	dd400515 	stw	r21,20(sp)
   25498:	2540b804 	addi	r21,r4,736
   2549c:	dd800615 	stw	r22,24(sp)
   254a0:	dd000415 	stw	r20,16(sp)
   254a4:	dcc00315 	stw	r19,12(sp)
   254a8:	dfc00715 	stw	ra,28(sp)
   254ac:	dc800215 	stw	r18,8(sp)
   254b0:	dc400115 	stw	r17,4(sp)
   254b4:	dc000015 	stw	r16,0(sp)
   254b8:	2027883a 	mov	r19,r4
   254bc:	2829883a 	mov	r20,r5
   254c0:	002d883a 	mov	r22,zero
   254c4:	00253980 	call	25398 <__sfp_lock_acquire>
   254c8:	a8001326 	beq	r21,zero,25518 <_fwalk_reent+0x88>
   254cc:	04bfffc4 	movi	r18,-1
   254d0:	ac400117 	ldw	r17,4(r21)
   254d4:	ac000217 	ldw	r16,8(r21)
   254d8:	8c7fffc4 	addi	r17,r17,-1
   254dc:	88000c16 	blt	r17,zero,25510 <_fwalk_reent+0x80>
   254e0:	84000304 	addi	r16,r16,12
   254e4:	80c0000f 	ldh	r3,0(r16)
   254e8:	8c7fffc4 	addi	r17,r17,-1
   254ec:	817ffd04 	addi	r5,r16,-12
   254f0:	18000526 	beq	r3,zero,25508 <_fwalk_reent+0x78>
   254f4:	80c0008f 	ldh	r3,2(r16)
   254f8:	9809883a 	mov	r4,r19
   254fc:	1c800226 	beq	r3,r18,25508 <_fwalk_reent+0x78>
   25500:	a03ee83a 	callr	r20
   25504:	b0acb03a 	or	r22,r22,r2
   25508:	84001a04 	addi	r16,r16,104
   2550c:	8cbff51e 	bne	r17,r18,254e4 <__alt_data_end+0xf40254e4>
   25510:	ad400017 	ldw	r21,0(r21)
   25514:	a83fee1e 	bne	r21,zero,254d0 <__alt_data_end+0xf40254d0>
   25518:	002539c0 	call	2539c <__sfp_lock_release>
   2551c:	b005883a 	mov	r2,r22
   25520:	dfc00717 	ldw	ra,28(sp)
   25524:	dd800617 	ldw	r22,24(sp)
   25528:	dd400517 	ldw	r21,20(sp)
   2552c:	dd000417 	ldw	r20,16(sp)
   25530:	dcc00317 	ldw	r19,12(sp)
   25534:	dc800217 	ldw	r18,8(sp)
   25538:	dc400117 	ldw	r17,4(sp)
   2553c:	dc000017 	ldw	r16,0(sp)
   25540:	dec00804 	addi	sp,sp,32
   25544:	f800283a 	ret

00025548 <__smakebuf_r>:
   25548:	2880030b 	ldhu	r2,12(r5)
   2554c:	10c0008c 	andi	r3,r2,2
   25550:	1800401e 	bne	r3,zero,25654 <__smakebuf_r+0x10c>
   25554:	deffec04 	addi	sp,sp,-80
   25558:	dc000f15 	stw	r16,60(sp)
   2555c:	2821883a 	mov	r16,r5
   25560:	2940038f 	ldh	r5,14(r5)
   25564:	dc401015 	stw	r17,64(sp)
   25568:	dfc01315 	stw	ra,76(sp)
   2556c:	dcc01215 	stw	r19,72(sp)
   25570:	dc801115 	stw	r18,68(sp)
   25574:	2023883a 	mov	r17,r4
   25578:	28001b16 	blt	r5,zero,255e8 <__smakebuf_r+0xa0>
   2557c:	d80d883a 	mov	r6,sp
   25580:	0025a000 	call	25a00 <_fstat_r>
   25584:	10001716 	blt	r2,zero,255e4 <__smakebuf_r+0x9c>
   25588:	d8800117 	ldw	r2,4(sp)
   2558c:	00e00014 	movui	r3,32768
   25590:	10bc000c 	andi	r2,r2,61440
   25594:	10c03726 	beq	r2,r3,25674 <__smakebuf_r+0x12c>
   25598:	80c0030b 	ldhu	r3,12(r16)
   2559c:	18c20014 	ori	r3,r3,2048
   255a0:	80c0030d 	sth	r3,12(r16)
   255a4:	00c80004 	movi	r3,8192
   255a8:	10c03c1e 	bne	r2,r3,2569c <__smakebuf_r+0x154>
   255ac:	8140038f 	ldh	r5,14(r16)
   255b0:	8809883a 	mov	r4,r17
   255b4:	0025a580 	call	25a58 <_isatty_r>
   255b8:	10004e26 	beq	r2,zero,256f4 <__smakebuf_r+0x1ac>
   255bc:	8080030b 	ldhu	r2,12(r16)
   255c0:	04c00044 	movi	r19,1
   255c4:	80c010c4 	addi	r3,r16,67
   255c8:	14c4b03a 	or	r2,r2,r19
   255cc:	8080030d 	sth	r2,12(r16)
   255d0:	80c00015 	stw	r3,0(r16)
   255d4:	80c00415 	stw	r3,16(r16)
   255d8:	84c00515 	stw	r19,20(r16)
   255dc:	04810004 	movi	r18,1024
   255e0:	00000706 	br	25600 <__smakebuf_r+0xb8>
   255e4:	8080030b 	ldhu	r2,12(r16)
   255e8:	10c0200c 	andi	r3,r2,128
   255ec:	18001f1e 	bne	r3,zero,2566c <__smakebuf_r+0x124>
   255f0:	04810004 	movi	r18,1024
   255f4:	10820014 	ori	r2,r2,2048
   255f8:	8080030d 	sth	r2,12(r16)
   255fc:	0027883a 	mov	r19,zero
   25600:	8809883a 	mov	r4,r17
   25604:	900b883a 	mov	r5,r18
   25608:	00229a80 	call	229a8 <_malloc_r>
   2560c:	10002e26 	beq	r2,zero,256c8 <__smakebuf_r+0x180>
   25610:	80c0030b 	ldhu	r3,12(r16)
   25614:	010000b4 	movhi	r4,2
   25618:	21140d04 	addi	r4,r4,20532
   2561c:	89000f15 	stw	r4,60(r17)
   25620:	18c02014 	ori	r3,r3,128
   25624:	80c0030d 	sth	r3,12(r16)
   25628:	80800015 	stw	r2,0(r16)
   2562c:	80800415 	stw	r2,16(r16)
   25630:	84800515 	stw	r18,20(r16)
   25634:	98001c1e 	bne	r19,zero,256a8 <__smakebuf_r+0x160>
   25638:	dfc01317 	ldw	ra,76(sp)
   2563c:	dcc01217 	ldw	r19,72(sp)
   25640:	dc801117 	ldw	r18,68(sp)
   25644:	dc401017 	ldw	r17,64(sp)
   25648:	dc000f17 	ldw	r16,60(sp)
   2564c:	dec01404 	addi	sp,sp,80
   25650:	f800283a 	ret
   25654:	288010c4 	addi	r2,r5,67
   25658:	28800015 	stw	r2,0(r5)
   2565c:	28800415 	stw	r2,16(r5)
   25660:	00800044 	movi	r2,1
   25664:	28800515 	stw	r2,20(r5)
   25668:	f800283a 	ret
   2566c:	04801004 	movi	r18,64
   25670:	003fe006 	br	255f4 <__alt_data_end+0xf40255f4>
   25674:	81000a17 	ldw	r4,40(r16)
   25678:	00c000b4 	movhi	r3,2
   2567c:	18d5f604 	addi	r3,r3,22488
   25680:	20ffc51e 	bne	r4,r3,25598 <__alt_data_end+0xf4025598>
   25684:	80c0030b 	ldhu	r3,12(r16)
   25688:	01010004 	movi	r4,1024
   2568c:	81001315 	stw	r4,76(r16)
   25690:	1906b03a 	or	r3,r3,r4
   25694:	80c0030d 	sth	r3,12(r16)
   25698:	003fc206 	br	255a4 <__alt_data_end+0xf40255a4>
   2569c:	0027883a 	mov	r19,zero
   256a0:	04810004 	movi	r18,1024
   256a4:	003fd606 	br	25600 <__alt_data_end+0xf4025600>
   256a8:	8140038f 	ldh	r5,14(r16)
   256ac:	8809883a 	mov	r4,r17
   256b0:	0025a580 	call	25a58 <_isatty_r>
   256b4:	103fe026 	beq	r2,zero,25638 <__alt_data_end+0xf4025638>
   256b8:	8080030b 	ldhu	r2,12(r16)
   256bc:	10800054 	ori	r2,r2,1
   256c0:	8080030d 	sth	r2,12(r16)
   256c4:	003fdc06 	br	25638 <__alt_data_end+0xf4025638>
   256c8:	8080030b 	ldhu	r2,12(r16)
   256cc:	10c0800c 	andi	r3,r2,512
   256d0:	183fd91e 	bne	r3,zero,25638 <__alt_data_end+0xf4025638>
   256d4:	10800094 	ori	r2,r2,2
   256d8:	80c010c4 	addi	r3,r16,67
   256dc:	8080030d 	sth	r2,12(r16)
   256e0:	00800044 	movi	r2,1
   256e4:	80c00015 	stw	r3,0(r16)
   256e8:	80c00415 	stw	r3,16(r16)
   256ec:	80800515 	stw	r2,20(r16)
   256f0:	003fd106 	br	25638 <__alt_data_end+0xf4025638>
   256f4:	04c00044 	movi	r19,1
   256f8:	04810004 	movi	r18,1024
   256fc:	003fc006 	br	25600 <__alt_data_end+0xf4025600>

00025700 <__sread>:
   25700:	defffe04 	addi	sp,sp,-8
   25704:	dc000015 	stw	r16,0(sp)
   25708:	2821883a 	mov	r16,r5
   2570c:	2940038f 	ldh	r5,14(r5)
   25710:	dfc00115 	stw	ra,4(sp)
   25714:	0025b080 	call	25b08 <_read_r>
   25718:	10000716 	blt	r2,zero,25738 <__sread+0x38>
   2571c:	80c01417 	ldw	r3,80(r16)
   25720:	1887883a 	add	r3,r3,r2
   25724:	80c01415 	stw	r3,80(r16)
   25728:	dfc00117 	ldw	ra,4(sp)
   2572c:	dc000017 	ldw	r16,0(sp)
   25730:	dec00204 	addi	sp,sp,8
   25734:	f800283a 	ret
   25738:	80c0030b 	ldhu	r3,12(r16)
   2573c:	18fbffcc 	andi	r3,r3,61439
   25740:	80c0030d 	sth	r3,12(r16)
   25744:	dfc00117 	ldw	ra,4(sp)
   25748:	dc000017 	ldw	r16,0(sp)
   2574c:	dec00204 	addi	sp,sp,8
   25750:	f800283a 	ret

00025754 <__seofread>:
   25754:	0005883a 	mov	r2,zero
   25758:	f800283a 	ret

0002575c <__swrite>:
   2575c:	2880030b 	ldhu	r2,12(r5)
   25760:	defffb04 	addi	sp,sp,-20
   25764:	dcc00315 	stw	r19,12(sp)
   25768:	dc800215 	stw	r18,8(sp)
   2576c:	dc400115 	stw	r17,4(sp)
   25770:	dc000015 	stw	r16,0(sp)
   25774:	dfc00415 	stw	ra,16(sp)
   25778:	10c0400c 	andi	r3,r2,256
   2577c:	2821883a 	mov	r16,r5
   25780:	2027883a 	mov	r19,r4
   25784:	3025883a 	mov	r18,r6
   25788:	3823883a 	mov	r17,r7
   2578c:	18000526 	beq	r3,zero,257a4 <__swrite+0x48>
   25790:	2940038f 	ldh	r5,14(r5)
   25794:	000d883a 	mov	r6,zero
   25798:	01c00084 	movi	r7,2
   2579c:	0025aac0 	call	25aac <_lseek_r>
   257a0:	8080030b 	ldhu	r2,12(r16)
   257a4:	8140038f 	ldh	r5,14(r16)
   257a8:	10bbffcc 	andi	r2,r2,61439
   257ac:	9809883a 	mov	r4,r19
   257b0:	900d883a 	mov	r6,r18
   257b4:	880f883a 	mov	r7,r17
   257b8:	8080030d 	sth	r2,12(r16)
   257bc:	dfc00417 	ldw	ra,16(sp)
   257c0:	dcc00317 	ldw	r19,12(sp)
   257c4:	dc800217 	ldw	r18,8(sp)
   257c8:	dc400117 	ldw	r17,4(sp)
   257cc:	dc000017 	ldw	r16,0(sp)
   257d0:	dec00504 	addi	sp,sp,20
   257d4:	002583c1 	jmpi	2583c <_write_r>

000257d8 <__sseek>:
   257d8:	defffe04 	addi	sp,sp,-8
   257dc:	dc000015 	stw	r16,0(sp)
   257e0:	2821883a 	mov	r16,r5
   257e4:	2940038f 	ldh	r5,14(r5)
   257e8:	dfc00115 	stw	ra,4(sp)
   257ec:	0025aac0 	call	25aac <_lseek_r>
   257f0:	00ffffc4 	movi	r3,-1
   257f4:	10c00826 	beq	r2,r3,25818 <__sseek+0x40>
   257f8:	80c0030b 	ldhu	r3,12(r16)
   257fc:	80801415 	stw	r2,80(r16)
   25800:	18c40014 	ori	r3,r3,4096
   25804:	80c0030d 	sth	r3,12(r16)
   25808:	dfc00117 	ldw	ra,4(sp)
   2580c:	dc000017 	ldw	r16,0(sp)
   25810:	dec00204 	addi	sp,sp,8
   25814:	f800283a 	ret
   25818:	80c0030b 	ldhu	r3,12(r16)
   2581c:	18fbffcc 	andi	r3,r3,61439
   25820:	80c0030d 	sth	r3,12(r16)
   25824:	dfc00117 	ldw	ra,4(sp)
   25828:	dc000017 	ldw	r16,0(sp)
   2582c:	dec00204 	addi	sp,sp,8
   25830:	f800283a 	ret

00025834 <__sclose>:
   25834:	2940038f 	ldh	r5,14(r5)
   25838:	00258981 	jmpi	25898 <_close_r>

0002583c <_write_r>:
   2583c:	defffd04 	addi	sp,sp,-12
   25840:	dc000015 	stw	r16,0(sp)
   25844:	04020034 	movhi	r16,2048
   25848:	dc400115 	stw	r17,4(sp)
   2584c:	84079904 	addi	r16,r16,7780
   25850:	2023883a 	mov	r17,r4
   25854:	2809883a 	mov	r4,r5
   25858:	300b883a 	mov	r5,r6
   2585c:	380d883a 	mov	r6,r7
   25860:	dfc00215 	stw	ra,8(sp)
   25864:	80000015 	stw	zero,0(r16)
   25868:	00268980 	call	26898 <write>
   2586c:	00ffffc4 	movi	r3,-1
   25870:	10c00526 	beq	r2,r3,25888 <_write_r+0x4c>
   25874:	dfc00217 	ldw	ra,8(sp)
   25878:	dc400117 	ldw	r17,4(sp)
   2587c:	dc000017 	ldw	r16,0(sp)
   25880:	dec00304 	addi	sp,sp,12
   25884:	f800283a 	ret
   25888:	80c00017 	ldw	r3,0(r16)
   2588c:	183ff926 	beq	r3,zero,25874 <__alt_data_end+0xf4025874>
   25890:	88c00015 	stw	r3,0(r17)
   25894:	003ff706 	br	25874 <__alt_data_end+0xf4025874>

00025898 <_close_r>:
   25898:	defffd04 	addi	sp,sp,-12
   2589c:	dc000015 	stw	r16,0(sp)
   258a0:	04020034 	movhi	r16,2048
   258a4:	dc400115 	stw	r17,4(sp)
   258a8:	84079904 	addi	r16,r16,7780
   258ac:	2023883a 	mov	r17,r4
   258b0:	2809883a 	mov	r4,r5
   258b4:	dfc00215 	stw	ra,8(sp)
   258b8:	80000015 	stw	zero,0(r16)
   258bc:	0025bb40 	call	25bb4 <close>
   258c0:	00ffffc4 	movi	r3,-1
   258c4:	10c00526 	beq	r2,r3,258dc <_close_r+0x44>
   258c8:	dfc00217 	ldw	ra,8(sp)
   258cc:	dc400117 	ldw	r17,4(sp)
   258d0:	dc000017 	ldw	r16,0(sp)
   258d4:	dec00304 	addi	sp,sp,12
   258d8:	f800283a 	ret
   258dc:	80c00017 	ldw	r3,0(r16)
   258e0:	183ff926 	beq	r3,zero,258c8 <__alt_data_end+0xf40258c8>
   258e4:	88c00015 	stw	r3,0(r17)
   258e8:	003ff706 	br	258c8 <__alt_data_end+0xf40258c8>

000258ec <_fclose_r>:
   258ec:	28003226 	beq	r5,zero,259b8 <_fclose_r+0xcc>
   258f0:	defffc04 	addi	sp,sp,-16
   258f4:	dc400115 	stw	r17,4(sp)
   258f8:	2023883a 	mov	r17,r4
   258fc:	dc000015 	stw	r16,0(sp)
   25900:	dfc00315 	stw	ra,12(sp)
   25904:	dc800215 	stw	r18,8(sp)
   25908:	2821883a 	mov	r16,r5
   2590c:	00253980 	call	25398 <__sfp_lock_acquire>
   25910:	88000226 	beq	r17,zero,2591c <_fclose_r+0x30>
   25914:	88800e17 	ldw	r2,56(r17)
   25918:	10002926 	beq	r2,zero,259c0 <_fclose_r+0xd4>
   2591c:	8080030f 	ldh	r2,12(r16)
   25920:	10002226 	beq	r2,zero,259ac <_fclose_r+0xc0>
   25924:	8809883a 	mov	r4,r17
   25928:	800b883a 	mov	r5,r16
   2592c:	0024dcc0 	call	24dcc <_fflush_r>
   25930:	1025883a 	mov	r18,r2
   25934:	80800b17 	ldw	r2,44(r16)
   25938:	10000426 	beq	r2,zero,2594c <_fclose_r+0x60>
   2593c:	81400717 	ldw	r5,28(r16)
   25940:	8809883a 	mov	r4,r17
   25944:	103ee83a 	callr	r2
   25948:	10002616 	blt	r2,zero,259e4 <_fclose_r+0xf8>
   2594c:	8080030b 	ldhu	r2,12(r16)
   25950:	1080200c 	andi	r2,r2,128
   25954:	10001f1e 	bne	r2,zero,259d4 <_fclose_r+0xe8>
   25958:	81400c17 	ldw	r5,48(r16)
   2595c:	28000526 	beq	r5,zero,25974 <_fclose_r+0x88>
   25960:	80801004 	addi	r2,r16,64
   25964:	28800226 	beq	r5,r2,25970 <_fclose_r+0x84>
   25968:	8809883a 	mov	r4,r17
   2596c:	00239140 	call	23914 <_free_r>
   25970:	80000c15 	stw	zero,48(r16)
   25974:	81401117 	ldw	r5,68(r16)
   25978:	28000326 	beq	r5,zero,25988 <_fclose_r+0x9c>
   2597c:	8809883a 	mov	r4,r17
   25980:	00239140 	call	23914 <_free_r>
   25984:	80001115 	stw	zero,68(r16)
   25988:	8000030d 	sth	zero,12(r16)
   2598c:	002539c0 	call	2539c <__sfp_lock_release>
   25990:	9005883a 	mov	r2,r18
   25994:	dfc00317 	ldw	ra,12(sp)
   25998:	dc800217 	ldw	r18,8(sp)
   2599c:	dc400117 	ldw	r17,4(sp)
   259a0:	dc000017 	ldw	r16,0(sp)
   259a4:	dec00404 	addi	sp,sp,16
   259a8:	f800283a 	ret
   259ac:	002539c0 	call	2539c <__sfp_lock_release>
   259b0:	0005883a 	mov	r2,zero
   259b4:	003ff706 	br	25994 <__alt_data_end+0xf4025994>
   259b8:	0005883a 	mov	r2,zero
   259bc:	f800283a 	ret
   259c0:	8809883a 	mov	r4,r17
   259c4:	00253880 	call	25388 <__sinit>
   259c8:	8080030f 	ldh	r2,12(r16)
   259cc:	103fd51e 	bne	r2,zero,25924 <__alt_data_end+0xf4025924>
   259d0:	003ff606 	br	259ac <__alt_data_end+0xf40259ac>
   259d4:	81400417 	ldw	r5,16(r16)
   259d8:	8809883a 	mov	r4,r17
   259dc:	00239140 	call	23914 <_free_r>
   259e0:	003fdd06 	br	25958 <__alt_data_end+0xf4025958>
   259e4:	04bfffc4 	movi	r18,-1
   259e8:	003fd806 	br	2594c <__alt_data_end+0xf402594c>

000259ec <fclose>:
   259ec:	00820034 	movhi	r2,2048
   259f0:	10878604 	addi	r2,r2,7704
   259f4:	200b883a 	mov	r5,r4
   259f8:	11000017 	ldw	r4,0(r2)
   259fc:	00258ec1 	jmpi	258ec <_fclose_r>

00025a00 <_fstat_r>:
   25a00:	defffd04 	addi	sp,sp,-12
   25a04:	dc000015 	stw	r16,0(sp)
   25a08:	04020034 	movhi	r16,2048
   25a0c:	dc400115 	stw	r17,4(sp)
   25a10:	84079904 	addi	r16,r16,7780
   25a14:	2023883a 	mov	r17,r4
   25a18:	2809883a 	mov	r4,r5
   25a1c:	300b883a 	mov	r5,r6
   25a20:	dfc00215 	stw	ra,8(sp)
   25a24:	80000015 	stw	zero,0(r16)
   25a28:	0025d3c0 	call	25d3c <fstat>
   25a2c:	00ffffc4 	movi	r3,-1
   25a30:	10c00526 	beq	r2,r3,25a48 <_fstat_r+0x48>
   25a34:	dfc00217 	ldw	ra,8(sp)
   25a38:	dc400117 	ldw	r17,4(sp)
   25a3c:	dc000017 	ldw	r16,0(sp)
   25a40:	dec00304 	addi	sp,sp,12
   25a44:	f800283a 	ret
   25a48:	80c00017 	ldw	r3,0(r16)
   25a4c:	183ff926 	beq	r3,zero,25a34 <__alt_data_end+0xf4025a34>
   25a50:	88c00015 	stw	r3,0(r17)
   25a54:	003ff706 	br	25a34 <__alt_data_end+0xf4025a34>

00025a58 <_isatty_r>:
   25a58:	defffd04 	addi	sp,sp,-12
   25a5c:	dc000015 	stw	r16,0(sp)
   25a60:	04020034 	movhi	r16,2048
   25a64:	dc400115 	stw	r17,4(sp)
   25a68:	84079904 	addi	r16,r16,7780
   25a6c:	2023883a 	mov	r17,r4
   25a70:	2809883a 	mov	r4,r5
   25a74:	dfc00215 	stw	ra,8(sp)
   25a78:	80000015 	stw	zero,0(r16)
   25a7c:	0025e640 	call	25e64 <isatty>
   25a80:	00ffffc4 	movi	r3,-1
   25a84:	10c00526 	beq	r2,r3,25a9c <_isatty_r+0x44>
   25a88:	dfc00217 	ldw	ra,8(sp)
   25a8c:	dc400117 	ldw	r17,4(sp)
   25a90:	dc000017 	ldw	r16,0(sp)
   25a94:	dec00304 	addi	sp,sp,12
   25a98:	f800283a 	ret
   25a9c:	80c00017 	ldw	r3,0(r16)
   25aa0:	183ff926 	beq	r3,zero,25a88 <__alt_data_end+0xf4025a88>
   25aa4:	88c00015 	stw	r3,0(r17)
   25aa8:	003ff706 	br	25a88 <__alt_data_end+0xf4025a88>

00025aac <_lseek_r>:
   25aac:	defffd04 	addi	sp,sp,-12
   25ab0:	dc000015 	stw	r16,0(sp)
   25ab4:	04020034 	movhi	r16,2048
   25ab8:	dc400115 	stw	r17,4(sp)
   25abc:	84079904 	addi	r16,r16,7780
   25ac0:	2023883a 	mov	r17,r4
   25ac4:	2809883a 	mov	r4,r5
   25ac8:	300b883a 	mov	r5,r6
   25acc:	380d883a 	mov	r6,r7
   25ad0:	dfc00215 	stw	ra,8(sp)
   25ad4:	80000015 	stw	zero,0(r16)
   25ad8:	00261c40 	call	261c4 <lseek>
   25adc:	00ffffc4 	movi	r3,-1
   25ae0:	10c00526 	beq	r2,r3,25af8 <_lseek_r+0x4c>
   25ae4:	dfc00217 	ldw	ra,8(sp)
   25ae8:	dc400117 	ldw	r17,4(sp)
   25aec:	dc000017 	ldw	r16,0(sp)
   25af0:	dec00304 	addi	sp,sp,12
   25af4:	f800283a 	ret
   25af8:	80c00017 	ldw	r3,0(r16)
   25afc:	183ff926 	beq	r3,zero,25ae4 <__alt_data_end+0xf4025ae4>
   25b00:	88c00015 	stw	r3,0(r17)
   25b04:	003ff706 	br	25ae4 <__alt_data_end+0xf4025ae4>

00025b08 <_read_r>:
   25b08:	defffd04 	addi	sp,sp,-12
   25b0c:	dc000015 	stw	r16,0(sp)
   25b10:	04020034 	movhi	r16,2048
   25b14:	dc400115 	stw	r17,4(sp)
   25b18:	84079904 	addi	r16,r16,7780
   25b1c:	2023883a 	mov	r17,r4
   25b20:	2809883a 	mov	r4,r5
   25b24:	300b883a 	mov	r5,r6
   25b28:	380d883a 	mov	r6,r7
   25b2c:	dfc00215 	stw	ra,8(sp)
   25b30:	80000015 	stw	zero,0(r16)
   25b34:	00266140 	call	26614 <read>
   25b38:	00ffffc4 	movi	r3,-1
   25b3c:	10c00526 	beq	r2,r3,25b54 <_read_r+0x4c>
   25b40:	dfc00217 	ldw	ra,8(sp)
   25b44:	dc400117 	ldw	r17,4(sp)
   25b48:	dc000017 	ldw	r16,0(sp)
   25b4c:	dec00304 	addi	sp,sp,12
   25b50:	f800283a 	ret
   25b54:	80c00017 	ldw	r3,0(r16)
   25b58:	183ff926 	beq	r3,zero,25b40 <__alt_data_end+0xf4025b40>
   25b5c:	88c00015 	stw	r3,0(r17)
   25b60:	003ff706 	br	25b40 <__alt_data_end+0xf4025b40>

00025b64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25b64:	defffe04 	addi	sp,sp,-8
   25b68:	dfc00115 	stw	ra,4(sp)
   25b6c:	df000015 	stw	fp,0(sp)
   25b70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25b74:	00820034 	movhi	r2,2048
   25b78:	10878c04 	addi	r2,r2,7728
   25b7c:	10800017 	ldw	r2,0(r2)
   25b80:	10000526 	beq	r2,zero,25b98 <alt_get_errno+0x34>
   25b84:	00820034 	movhi	r2,2048
   25b88:	10878c04 	addi	r2,r2,7728
   25b8c:	10800017 	ldw	r2,0(r2)
   25b90:	103ee83a 	callr	r2
   25b94:	00000206 	br	25ba0 <alt_get_errno+0x3c>
   25b98:	00820034 	movhi	r2,2048
   25b9c:	10879904 	addi	r2,r2,7780
}
   25ba0:	e037883a 	mov	sp,fp
   25ba4:	dfc00117 	ldw	ra,4(sp)
   25ba8:	df000017 	ldw	fp,0(sp)
   25bac:	dec00204 	addi	sp,sp,8
   25bb0:	f800283a 	ret

00025bb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   25bb4:	defffb04 	addi	sp,sp,-20
   25bb8:	dfc00415 	stw	ra,16(sp)
   25bbc:	df000315 	stw	fp,12(sp)
   25bc0:	df000304 	addi	fp,sp,12
   25bc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   25bc8:	e0bfff17 	ldw	r2,-4(fp)
   25bcc:	10000816 	blt	r2,zero,25bf0 <close+0x3c>
   25bd0:	e13fff17 	ldw	r4,-4(fp)
   25bd4:	01400304 	movi	r5,12
   25bd8:	00224200 	call	22420 <__mulsi3>
   25bdc:	1007883a 	mov	r3,r2
   25be0:	00820034 	movhi	r2,2048
   25be4:	1082e704 	addi	r2,r2,2972
   25be8:	1885883a 	add	r2,r3,r2
   25bec:	00000106 	br	25bf4 <close+0x40>
   25bf0:	0005883a 	mov	r2,zero
   25bf4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   25bf8:	e0bffd17 	ldw	r2,-12(fp)
   25bfc:	10001926 	beq	r2,zero,25c64 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   25c00:	e0bffd17 	ldw	r2,-12(fp)
   25c04:	10800017 	ldw	r2,0(r2)
   25c08:	10800417 	ldw	r2,16(r2)
   25c0c:	10000626 	beq	r2,zero,25c28 <close+0x74>
   25c10:	e0bffd17 	ldw	r2,-12(fp)
   25c14:	10800017 	ldw	r2,0(r2)
   25c18:	10800417 	ldw	r2,16(r2)
   25c1c:	e13ffd17 	ldw	r4,-12(fp)
   25c20:	103ee83a 	callr	r2
   25c24:	00000106 	br	25c2c <close+0x78>
   25c28:	0005883a 	mov	r2,zero
   25c2c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   25c30:	e13fff17 	ldw	r4,-4(fp)
   25c34:	00267180 	call	26718 <alt_release_fd>
    if (rval < 0)
   25c38:	e0bffe17 	ldw	r2,-8(fp)
   25c3c:	1000070e 	bge	r2,zero,25c5c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   25c40:	0025b640 	call	25b64 <alt_get_errno>
   25c44:	1007883a 	mov	r3,r2
   25c48:	e0bffe17 	ldw	r2,-8(fp)
   25c4c:	0085c83a 	sub	r2,zero,r2
   25c50:	18800015 	stw	r2,0(r3)
      return -1;
   25c54:	00bfffc4 	movi	r2,-1
   25c58:	00000706 	br	25c78 <close+0xc4>
    }
    return 0;
   25c5c:	0005883a 	mov	r2,zero
   25c60:	00000506 	br	25c78 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25c64:	0025b640 	call	25b64 <alt_get_errno>
   25c68:	1007883a 	mov	r3,r2
   25c6c:	00801444 	movi	r2,81
   25c70:	18800015 	stw	r2,0(r3)
    return -1;
   25c74:	00bfffc4 	movi	r2,-1
  }
}
   25c78:	e037883a 	mov	sp,fp
   25c7c:	dfc00117 	ldw	ra,4(sp)
   25c80:	df000017 	ldw	fp,0(sp)
   25c84:	dec00204 	addi	sp,sp,8
   25c88:	f800283a 	ret

00025c8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   25c8c:	defffc04 	addi	sp,sp,-16
   25c90:	df000315 	stw	fp,12(sp)
   25c94:	df000304 	addi	fp,sp,12
   25c98:	e13ffd15 	stw	r4,-12(fp)
   25c9c:	e17ffe15 	stw	r5,-8(fp)
   25ca0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   25ca4:	e0bfff17 	ldw	r2,-4(fp)
}
   25ca8:	e037883a 	mov	sp,fp
   25cac:	df000017 	ldw	fp,0(sp)
   25cb0:	dec00104 	addi	sp,sp,4
   25cb4:	f800283a 	ret

00025cb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25cb8:	defffd04 	addi	sp,sp,-12
   25cbc:	df000215 	stw	fp,8(sp)
   25cc0:	df000204 	addi	fp,sp,8
   25cc4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25cc8:	0001883a 	nop
   25ccc:	e0bfff17 	ldw	r2,-4(fp)
   25cd0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25cd4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25cd8:	10000226 	beq	r2,zero,25ce4 <_exit+0x2c>
    ALT_SIM_FAIL();
   25cdc:	002af070 	cmpltui	zero,zero,43969
   25ce0:	00000106 	br	25ce8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25ce4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25ce8:	003fff06 	br	25ce8 <__alt_data_end+0xf4025ce8>

00025cec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25cec:	defffe04 	addi	sp,sp,-8
   25cf0:	dfc00115 	stw	ra,4(sp)
   25cf4:	df000015 	stw	fp,0(sp)
   25cf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25cfc:	00820034 	movhi	r2,2048
   25d00:	10878c04 	addi	r2,r2,7728
   25d04:	10800017 	ldw	r2,0(r2)
   25d08:	10000526 	beq	r2,zero,25d20 <alt_get_errno+0x34>
   25d0c:	00820034 	movhi	r2,2048
   25d10:	10878c04 	addi	r2,r2,7728
   25d14:	10800017 	ldw	r2,0(r2)
   25d18:	103ee83a 	callr	r2
   25d1c:	00000206 	br	25d28 <alt_get_errno+0x3c>
   25d20:	00820034 	movhi	r2,2048
   25d24:	10879904 	addi	r2,r2,7780
}
   25d28:	e037883a 	mov	sp,fp
   25d2c:	dfc00117 	ldw	ra,4(sp)
   25d30:	df000017 	ldw	fp,0(sp)
   25d34:	dec00204 	addi	sp,sp,8
   25d38:	f800283a 	ret

00025d3c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   25d3c:	defffb04 	addi	sp,sp,-20
   25d40:	dfc00415 	stw	ra,16(sp)
   25d44:	df000315 	stw	fp,12(sp)
   25d48:	df000304 	addi	fp,sp,12
   25d4c:	e13ffe15 	stw	r4,-8(fp)
   25d50:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25d54:	e0bffe17 	ldw	r2,-8(fp)
   25d58:	10000816 	blt	r2,zero,25d7c <fstat+0x40>
   25d5c:	e13ffe17 	ldw	r4,-8(fp)
   25d60:	01400304 	movi	r5,12
   25d64:	00224200 	call	22420 <__mulsi3>
   25d68:	1007883a 	mov	r3,r2
   25d6c:	00820034 	movhi	r2,2048
   25d70:	1082e704 	addi	r2,r2,2972
   25d74:	1885883a 	add	r2,r3,r2
   25d78:	00000106 	br	25d80 <fstat+0x44>
   25d7c:	0005883a 	mov	r2,zero
   25d80:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   25d84:	e0bffd17 	ldw	r2,-12(fp)
   25d88:	10001026 	beq	r2,zero,25dcc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   25d8c:	e0bffd17 	ldw	r2,-12(fp)
   25d90:	10800017 	ldw	r2,0(r2)
   25d94:	10800817 	ldw	r2,32(r2)
   25d98:	10000726 	beq	r2,zero,25db8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   25d9c:	e0bffd17 	ldw	r2,-12(fp)
   25da0:	10800017 	ldw	r2,0(r2)
   25da4:	10800817 	ldw	r2,32(r2)
   25da8:	e13ffd17 	ldw	r4,-12(fp)
   25dac:	e17fff17 	ldw	r5,-4(fp)
   25db0:	103ee83a 	callr	r2
   25db4:	00000a06 	br	25de0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   25db8:	e0bfff17 	ldw	r2,-4(fp)
   25dbc:	00c80004 	movi	r3,8192
   25dc0:	10c00115 	stw	r3,4(r2)
      return 0;
   25dc4:	0005883a 	mov	r2,zero
   25dc8:	00000506 	br	25de0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25dcc:	0025cec0 	call	25cec <alt_get_errno>
   25dd0:	1007883a 	mov	r3,r2
   25dd4:	00801444 	movi	r2,81
   25dd8:	18800015 	stw	r2,0(r3)
    return -1;
   25ddc:	00bfffc4 	movi	r2,-1
  }
}
   25de0:	e037883a 	mov	sp,fp
   25de4:	dfc00117 	ldw	ra,4(sp)
   25de8:	df000017 	ldw	fp,0(sp)
   25dec:	dec00204 	addi	sp,sp,8
   25df0:	f800283a 	ret

00025df4 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   25df4:	deffff04 	addi	sp,sp,-4
   25df8:	df000015 	stw	fp,0(sp)
   25dfc:	d839883a 	mov	fp,sp
  return 0;
   25e00:	0005883a 	mov	r2,zero
}
   25e04:	e037883a 	mov	sp,fp
   25e08:	df000017 	ldw	fp,0(sp)
   25e0c:	dec00104 	addi	sp,sp,4
   25e10:	f800283a 	ret

00025e14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25e14:	defffe04 	addi	sp,sp,-8
   25e18:	dfc00115 	stw	ra,4(sp)
   25e1c:	df000015 	stw	fp,0(sp)
   25e20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25e24:	00820034 	movhi	r2,2048
   25e28:	10878c04 	addi	r2,r2,7728
   25e2c:	10800017 	ldw	r2,0(r2)
   25e30:	10000526 	beq	r2,zero,25e48 <alt_get_errno+0x34>
   25e34:	00820034 	movhi	r2,2048
   25e38:	10878c04 	addi	r2,r2,7728
   25e3c:	10800017 	ldw	r2,0(r2)
   25e40:	103ee83a 	callr	r2
   25e44:	00000206 	br	25e50 <alt_get_errno+0x3c>
   25e48:	00820034 	movhi	r2,2048
   25e4c:	10879904 	addi	r2,r2,7780
}
   25e50:	e037883a 	mov	sp,fp
   25e54:	dfc00117 	ldw	ra,4(sp)
   25e58:	df000017 	ldw	fp,0(sp)
   25e5c:	dec00204 	addi	sp,sp,8
   25e60:	f800283a 	ret

00025e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   25e64:	deffed04 	addi	sp,sp,-76
   25e68:	dfc01215 	stw	ra,72(sp)
   25e6c:	df001115 	stw	fp,68(sp)
   25e70:	df001104 	addi	fp,sp,68
   25e74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   25e78:	e0bfff17 	ldw	r2,-4(fp)
   25e7c:	10000816 	blt	r2,zero,25ea0 <isatty+0x3c>
   25e80:	e13fff17 	ldw	r4,-4(fp)
   25e84:	01400304 	movi	r5,12
   25e88:	00224200 	call	22420 <__mulsi3>
   25e8c:	1007883a 	mov	r3,r2
   25e90:	00820034 	movhi	r2,2048
   25e94:	1082e704 	addi	r2,r2,2972
   25e98:	1885883a 	add	r2,r3,r2
   25e9c:	00000106 	br	25ea4 <isatty+0x40>
   25ea0:	0005883a 	mov	r2,zero
   25ea4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   25ea8:	e0bfef17 	ldw	r2,-68(fp)
   25eac:	10000e26 	beq	r2,zero,25ee8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   25eb0:	e0bfef17 	ldw	r2,-68(fp)
   25eb4:	10800017 	ldw	r2,0(r2)
   25eb8:	10800817 	ldw	r2,32(r2)
   25ebc:	1000021e 	bne	r2,zero,25ec8 <isatty+0x64>
    {
      return 1;
   25ec0:	00800044 	movi	r2,1
   25ec4:	00000d06 	br	25efc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   25ec8:	e0bff004 	addi	r2,fp,-64
   25ecc:	e13fff17 	ldw	r4,-4(fp)
   25ed0:	100b883a 	mov	r5,r2
   25ed4:	0025d3c0 	call	25d3c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   25ed8:	e0bff117 	ldw	r2,-60(fp)
   25edc:	10880020 	cmpeqi	r2,r2,8192
   25ee0:	10803fcc 	andi	r2,r2,255
   25ee4:	00000506 	br	25efc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   25ee8:	0025e140 	call	25e14 <alt_get_errno>
   25eec:	1007883a 	mov	r3,r2
   25ef0:	00801444 	movi	r2,81
   25ef4:	18800015 	stw	r2,0(r3)
    return 0;
   25ef8:	0005883a 	mov	r2,zero
  }
}
   25efc:	e037883a 	mov	sp,fp
   25f00:	dfc00117 	ldw	ra,4(sp)
   25f04:	df000017 	ldw	fp,0(sp)
   25f08:	dec00204 	addi	sp,sp,8
   25f0c:	f800283a 	ret

00025f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25f10:	defffe04 	addi	sp,sp,-8
   25f14:	dfc00115 	stw	ra,4(sp)
   25f18:	df000015 	stw	fp,0(sp)
   25f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25f20:	00820034 	movhi	r2,2048
   25f24:	10878c04 	addi	r2,r2,7728
   25f28:	10800017 	ldw	r2,0(r2)
   25f2c:	10000526 	beq	r2,zero,25f44 <alt_get_errno+0x34>
   25f30:	00820034 	movhi	r2,2048
   25f34:	10878c04 	addi	r2,r2,7728
   25f38:	10800017 	ldw	r2,0(r2)
   25f3c:	103ee83a 	callr	r2
   25f40:	00000206 	br	25f4c <alt_get_errno+0x3c>
   25f44:	00820034 	movhi	r2,2048
   25f48:	10879904 	addi	r2,r2,7780
}
   25f4c:	e037883a 	mov	sp,fp
   25f50:	dfc00117 	ldw	ra,4(sp)
   25f54:	df000017 	ldw	fp,0(sp)
   25f58:	dec00204 	addi	sp,sp,8
   25f5c:	f800283a 	ret

00025f60 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   25f60:	defffb04 	addi	sp,sp,-20
   25f64:	dfc00415 	stw	ra,16(sp)
   25f68:	df000315 	stw	fp,12(sp)
   25f6c:	df000304 	addi	fp,sp,12
   25f70:	e13ffe15 	stw	r4,-8(fp)
   25f74:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   25f78:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   25f7c:	e0bffe17 	ldw	r2,-8(fp)
   25f80:	00803116 	blt	zero,r2,26048 <kill+0xe8>
  {
    switch (sig)
   25f84:	e0bfff17 	ldw	r2,-4(fp)
   25f88:	10800828 	cmpgeui	r2,r2,32
   25f8c:	1000291e 	bne	r2,zero,26034 <kill+0xd4>
   25f90:	e0bfff17 	ldw	r2,-4(fp)
   25f94:	100690ba 	slli	r3,r2,2
   25f98:	008000b4 	movhi	r2,2
   25f9c:	1097eb04 	addi	r2,r2,24492
   25fa0:	1885883a 	add	r2,r3,r2
   25fa4:	10800017 	ldw	r2,0(r2)
   25fa8:	1000683a 	jmp	r2
   25fac:	00026040 	call	2604 <__alt_mem_onchip_sram-0x1d9fc>
   25fb0:	00026034 	movhi	zero,2432
   25fb4:	00026034 	movhi	zero,2432
   25fb8:	0002602c 	andhi	zero,zero,2432
   25fbc:	0002602c 	andhi	zero,zero,2432
   25fc0:	0002602c 	andhi	zero,zero,2432
   25fc4:	0002602c 	andhi	zero,zero,2432
   25fc8:	00026034 	movhi	zero,2432
   25fcc:	0002602c 	andhi	zero,zero,2432
   25fd0:	0002602c 	andhi	zero,zero,2432
   25fd4:	0002602c 	andhi	zero,zero,2432
   25fd8:	0002602c 	andhi	zero,zero,2432
   25fdc:	0002602c 	andhi	zero,zero,2432
   25fe0:	0002602c 	andhi	zero,zero,2432
   25fe4:	0002602c 	andhi	zero,zero,2432
   25fe8:	0002602c 	andhi	zero,zero,2432
   25fec:	00026040 	call	2604 <__alt_mem_onchip_sram-0x1d9fc>
   25ff0:	00026034 	movhi	zero,2432
   25ff4:	00026034 	movhi	zero,2432
   25ff8:	00026034 	movhi	zero,2432
   25ffc:	00026040 	call	2604 <__alt_mem_onchip_sram-0x1d9fc>
   26000:	00026034 	movhi	zero,2432
   26004:	00026034 	movhi	zero,2432
   26008:	0002602c 	andhi	zero,zero,2432
   2600c:	0002602c 	andhi	zero,zero,2432
   26010:	0002602c 	andhi	zero,zero,2432
   26014:	0002602c 	andhi	zero,zero,2432
   26018:	0002602c 	andhi	zero,zero,2432
   2601c:	00026034 	movhi	zero,2432
   26020:	00026034 	movhi	zero,2432
   26024:	0002602c 	andhi	zero,zero,2432
   26028:	0002602c 	andhi	zero,zero,2432
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   2602c:	0009883a 	mov	r4,zero
   26030:	0025cb80 	call	25cb8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   26034:	00800584 	movi	r2,22
   26038:	e0bffd15 	stw	r2,-12(fp)
   2603c:	00000606 	br	26058 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   26040:	0001883a 	nop
   26044:	00000406 	br	26058 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
   26048:	e0bffe17 	ldw	r2,-8(fp)
   2604c:	0080020e 	bge	zero,r2,26058 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   26050:	008000c4 	movi	r2,3
   26054:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
   26058:	e0bffd17 	ldw	r2,-12(fp)
   2605c:	10000626 	beq	r2,zero,26078 <kill+0x118>
  {
    ALT_ERRNO = status;
   26060:	0025f100 	call	25f10 <alt_get_errno>
   26064:	1007883a 	mov	r3,r2
   26068:	e0bffd17 	ldw	r2,-12(fp)
   2606c:	18800015 	stw	r2,0(r3)
    return -1;
   26070:	00bfffc4 	movi	r2,-1
   26074:	00000106 	br	2607c <kill+0x11c>
  }

  return 0;
   26078:	0005883a 	mov	r2,zero
}
   2607c:	e037883a 	mov	sp,fp
   26080:	dfc00117 	ldw	ra,4(sp)
   26084:	df000017 	ldw	fp,0(sp)
   26088:	dec00204 	addi	sp,sp,8
   2608c:	f800283a 	ret

00026090 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   26090:	defffc04 	addi	sp,sp,-16
   26094:	df000315 	stw	fp,12(sp)
   26098:	df000304 	addi	fp,sp,12
   2609c:	e13ffd15 	stw	r4,-12(fp)
   260a0:	e17ffe15 	stw	r5,-8(fp)
   260a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   260a8:	e0fffe17 	ldw	r3,-8(fp)
   260ac:	e0bffd17 	ldw	r2,-12(fp)
   260b0:	18800c26 	beq	r3,r2,260e4 <alt_load_section+0x54>
  {
    while( to != end )
   260b4:	00000806 	br	260d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   260b8:	e0bffe17 	ldw	r2,-8(fp)
   260bc:	10c00104 	addi	r3,r2,4
   260c0:	e0fffe15 	stw	r3,-8(fp)
   260c4:	e0fffd17 	ldw	r3,-12(fp)
   260c8:	19000104 	addi	r4,r3,4
   260cc:	e13ffd15 	stw	r4,-12(fp)
   260d0:	18c00017 	ldw	r3,0(r3)
   260d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   260d8:	e0fffe17 	ldw	r3,-8(fp)
   260dc:	e0bfff17 	ldw	r2,-4(fp)
   260e0:	18bff51e 	bne	r3,r2,260b8 <__alt_data_end+0xf40260b8>
    {
      *to++ = *from++;
    }
  }
}
   260e4:	e037883a 	mov	sp,fp
   260e8:	df000017 	ldw	fp,0(sp)
   260ec:	dec00104 	addi	sp,sp,4
   260f0:	f800283a 	ret

000260f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   260f4:	defffe04 	addi	sp,sp,-8
   260f8:	dfc00115 	stw	ra,4(sp)
   260fc:	df000015 	stw	fp,0(sp)
   26100:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   26104:	010000f4 	movhi	r4,3
   26108:	21233304 	addi	r4,r4,-29492
   2610c:	01420034 	movhi	r5,2048
   26110:	2940d204 	addi	r5,r5,840
   26114:	01820034 	movhi	r6,2048
   26118:	31879104 	addi	r6,r6,7748
   2611c:	00260900 	call	26090 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   26120:	010000b4 	movhi	r4,2
   26124:	21000804 	addi	r4,r4,32
   26128:	014000b4 	movhi	r5,2
   2612c:	29400804 	addi	r5,r5,32
   26130:	018000b4 	movhi	r6,2
   26134:	31808c04 	addi	r6,r6,560
   26138:	00260900 	call	26090 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2613c:	010000f4 	movhi	r4,3
   26140:	21226104 	addi	r4,r4,-30332
   26144:	01420034 	movhi	r5,2048
   26148:	29400004 	addi	r5,r5,0
   2614c:	01820034 	movhi	r6,2048
   26150:	3180d204 	addi	r6,r6,840
   26154:	00260900 	call	26090 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   26158:	00279740 	call	27974 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2615c:	0027bcc0 	call	27bcc <alt_icache_flush_all>
}
   26160:	e037883a 	mov	sp,fp
   26164:	dfc00117 	ldw	ra,4(sp)
   26168:	df000017 	ldw	fp,0(sp)
   2616c:	dec00204 	addi	sp,sp,8
   26170:	f800283a 	ret

00026174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26174:	defffe04 	addi	sp,sp,-8
   26178:	dfc00115 	stw	ra,4(sp)
   2617c:	df000015 	stw	fp,0(sp)
   26180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26184:	00820034 	movhi	r2,2048
   26188:	10878c04 	addi	r2,r2,7728
   2618c:	10800017 	ldw	r2,0(r2)
   26190:	10000526 	beq	r2,zero,261a8 <alt_get_errno+0x34>
   26194:	00820034 	movhi	r2,2048
   26198:	10878c04 	addi	r2,r2,7728
   2619c:	10800017 	ldw	r2,0(r2)
   261a0:	103ee83a 	callr	r2
   261a4:	00000206 	br	261b0 <alt_get_errno+0x3c>
   261a8:	00820034 	movhi	r2,2048
   261ac:	10879904 	addi	r2,r2,7780
}
   261b0:	e037883a 	mov	sp,fp
   261b4:	dfc00117 	ldw	ra,4(sp)
   261b8:	df000017 	ldw	fp,0(sp)
   261bc:	dec00204 	addi	sp,sp,8
   261c0:	f800283a 	ret

000261c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   261c4:	defff904 	addi	sp,sp,-28
   261c8:	dfc00615 	stw	ra,24(sp)
   261cc:	df000515 	stw	fp,20(sp)
   261d0:	df000504 	addi	fp,sp,20
   261d4:	e13ffd15 	stw	r4,-12(fp)
   261d8:	e17ffe15 	stw	r5,-8(fp)
   261dc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   261e0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   261e4:	e0bffd17 	ldw	r2,-12(fp)
   261e8:	10000816 	blt	r2,zero,2620c <lseek+0x48>
   261ec:	e13ffd17 	ldw	r4,-12(fp)
   261f0:	01400304 	movi	r5,12
   261f4:	00224200 	call	22420 <__mulsi3>
   261f8:	1007883a 	mov	r3,r2
   261fc:	00820034 	movhi	r2,2048
   26200:	1082e704 	addi	r2,r2,2972
   26204:	1885883a 	add	r2,r3,r2
   26208:	00000106 	br	26210 <lseek+0x4c>
   2620c:	0005883a 	mov	r2,zero
   26210:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   26214:	e0bffc17 	ldw	r2,-16(fp)
   26218:	10001026 	beq	r2,zero,2625c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2621c:	e0bffc17 	ldw	r2,-16(fp)
   26220:	10800017 	ldw	r2,0(r2)
   26224:	10800717 	ldw	r2,28(r2)
   26228:	10000926 	beq	r2,zero,26250 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2622c:	e0bffc17 	ldw	r2,-16(fp)
   26230:	10800017 	ldw	r2,0(r2)
   26234:	10800717 	ldw	r2,28(r2)
   26238:	e13ffc17 	ldw	r4,-16(fp)
   2623c:	e17ffe17 	ldw	r5,-8(fp)
   26240:	e1bfff17 	ldw	r6,-4(fp)
   26244:	103ee83a 	callr	r2
   26248:	e0bffb15 	stw	r2,-20(fp)
   2624c:	00000506 	br	26264 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   26250:	00bfde84 	movi	r2,-134
   26254:	e0bffb15 	stw	r2,-20(fp)
   26258:	00000206 	br	26264 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   2625c:	00bfebc4 	movi	r2,-81
   26260:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   26264:	e0bffb17 	ldw	r2,-20(fp)
   26268:	1000070e 	bge	r2,zero,26288 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   2626c:	00261740 	call	26174 <alt_get_errno>
   26270:	1007883a 	mov	r3,r2
   26274:	e0bffb17 	ldw	r2,-20(fp)
   26278:	0085c83a 	sub	r2,zero,r2
   2627c:	18800015 	stw	r2,0(r3)
    rc = -1;
   26280:	00bfffc4 	movi	r2,-1
   26284:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   26288:	e0bffb17 	ldw	r2,-20(fp)
}
   2628c:	e037883a 	mov	sp,fp
   26290:	dfc00117 	ldw	ra,4(sp)
   26294:	df000017 	ldw	fp,0(sp)
   26298:	dec00204 	addi	sp,sp,8
   2629c:	f800283a 	ret

000262a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   262a0:	defffd04 	addi	sp,sp,-12
   262a4:	dfc00215 	stw	ra,8(sp)
   262a8:	df000115 	stw	fp,4(sp)
   262ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   262b0:	0009883a 	mov	r4,zero
   262b4:	00269d00 	call	269d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   262b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   262bc:	0026a040 	call	26a04 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   262c0:	01020034 	movhi	r4,2048
   262c4:	2100bd04 	addi	r4,r4,756
   262c8:	01420034 	movhi	r5,2048
   262cc:	2940bd04 	addi	r5,r5,756
   262d0:	01820034 	movhi	r6,2048
   262d4:	3180bd04 	addi	r6,r6,756
   262d8:	0027cc80 	call	27cc8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   262dc:	0027a840 	call	27a84 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   262e0:	010000b4 	movhi	r4,2
   262e4:	211eb804 	addi	r4,r4,31456
   262e8:	00285d40 	call	285d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   262ec:	d1202517 	ldw	r4,-32620(gp)
   262f0:	d0e02617 	ldw	r3,-32616(gp)
   262f4:	d0a02717 	ldw	r2,-32612(gp)
   262f8:	180b883a 	mov	r5,r3
   262fc:	100d883a 	mov	r6,r2
   26300:	002075c0 	call	2075c <main>
   26304:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   26308:	01000044 	movi	r4,1
   2630c:	0025bb40 	call	25bb4 <close>
  exit (result);
   26310:	e13fff17 	ldw	r4,-4(fp)
   26314:	00285e80 	call	285e8 <exit>

00026318 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   26318:	defffe04 	addi	sp,sp,-8
   2631c:	df000115 	stw	fp,4(sp)
   26320:	df000104 	addi	fp,sp,4
   26324:	e13fff15 	stw	r4,-4(fp)
}
   26328:	e037883a 	mov	sp,fp
   2632c:	df000017 	ldw	fp,0(sp)
   26330:	dec00104 	addi	sp,sp,4
   26334:	f800283a 	ret

00026338 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   26338:	defffe04 	addi	sp,sp,-8
   2633c:	df000115 	stw	fp,4(sp)
   26340:	df000104 	addi	fp,sp,4
   26344:	e13fff15 	stw	r4,-4(fp)
}
   26348:	e037883a 	mov	sp,fp
   2634c:	df000017 	ldw	fp,0(sp)
   26350:	dec00104 	addi	sp,sp,4
   26354:	f800283a 	ret

00026358 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   26358:	defff204 	addi	sp,sp,-56
   2635c:	dfc00a15 	stw	ra,40(sp)
   26360:	df000915 	stw	fp,36(sp)
   26364:	df000904 	addi	fp,sp,36
   26368:	e1400215 	stw	r5,8(fp)
   2636c:	e1800315 	stw	r6,12(fp)
   26370:	e1c00415 	stw	r7,16(fp)
   26374:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   26378:	e0800204 	addi	r2,fp,8
   2637c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   26380:	e0bfff17 	ldw	r2,-4(fp)
   26384:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   26388:	00007106 	br	26550 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   2638c:	e0bff807 	ldb	r2,-32(fp)
   26390:	10800960 	cmpeqi	r2,r2,37
   26394:	1000041e 	bne	r2,zero,263a8 <alt_printf+0x50>
        {
            alt_putchar(c);
   26398:	e0bff807 	ldb	r2,-32(fp)
   2639c:	1009883a 	mov	r4,r2
   263a0:	00265800 	call	26580 <alt_putchar>
   263a4:	00006a06 	br	26550 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   263a8:	e0bff717 	ldw	r2,-36(fp)
   263ac:	10c00044 	addi	r3,r2,1
   263b0:	e0fff715 	stw	r3,-36(fp)
   263b4:	10800003 	ldbu	r2,0(r2)
   263b8:	e0bff805 	stb	r2,-32(fp)
   263bc:	e0bff807 	ldb	r2,-32(fp)
   263c0:	10006226 	beq	r2,zero,2654c <alt_printf+0x1f4>
            {
                if (c == '%')
   263c4:	e0bff807 	ldb	r2,-32(fp)
   263c8:	10800958 	cmpnei	r2,r2,37
   263cc:	1000041e 	bne	r2,zero,263e0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   263d0:	e0bff807 	ldb	r2,-32(fp)
   263d4:	1009883a 	mov	r4,r2
   263d8:	00265800 	call	26580 <alt_putchar>
   263dc:	00005c06 	br	26550 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   263e0:	e0bff807 	ldb	r2,-32(fp)
   263e4:	108018d8 	cmpnei	r2,r2,99
   263e8:	1000081e 	bne	r2,zero,2640c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   263ec:	e0bffe17 	ldw	r2,-8(fp)
   263f0:	10c00104 	addi	r3,r2,4
   263f4:	e0fffe15 	stw	r3,-8(fp)
   263f8:	10800017 	ldw	r2,0(r2)
   263fc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   26400:	e13ffd17 	ldw	r4,-12(fp)
   26404:	00265800 	call	26580 <alt_putchar>
   26408:	00005106 	br	26550 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   2640c:	e0bff807 	ldb	r2,-32(fp)
   26410:	10801e18 	cmpnei	r2,r2,120
   26414:	1000341e 	bne	r2,zero,264e8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   26418:	e0bffe17 	ldw	r2,-8(fp)
   2641c:	10c00104 	addi	r3,r2,4
   26420:	e0fffe15 	stw	r3,-8(fp)
   26424:	10800017 	ldw	r2,0(r2)
   26428:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2642c:	e0bffb17 	ldw	r2,-20(fp)
   26430:	1000031e 	bne	r2,zero,26440 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   26434:	01000c04 	movi	r4,48
   26438:	00265800 	call	26580 <alt_putchar>
                        continue;
   2643c:	00004406 	br	26550 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   26440:	00800704 	movi	r2,28
   26444:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   26448:	00000306 	br	26458 <alt_printf+0x100>
                        digit_shift -= 4;
   2644c:	e0bff917 	ldw	r2,-28(fp)
   26450:	10bfff04 	addi	r2,r2,-4
   26454:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   26458:	00c003c4 	movi	r3,15
   2645c:	e0bff917 	ldw	r2,-28(fp)
   26460:	1884983a 	sll	r2,r3,r2
   26464:	1007883a 	mov	r3,r2
   26468:	e0bffb17 	ldw	r2,-20(fp)
   2646c:	1884703a 	and	r2,r3,r2
   26470:	103ff626 	beq	r2,zero,2644c <__alt_data_end+0xf402644c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   26474:	00001906 	br	264dc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   26478:	00c003c4 	movi	r3,15
   2647c:	e0bff917 	ldw	r2,-28(fp)
   26480:	1884983a 	sll	r2,r3,r2
   26484:	1007883a 	mov	r3,r2
   26488:	e0bffb17 	ldw	r2,-20(fp)
   2648c:	1886703a 	and	r3,r3,r2
   26490:	e0bff917 	ldw	r2,-28(fp)
   26494:	1884d83a 	srl	r2,r3,r2
   26498:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2649c:	e0bffc17 	ldw	r2,-16(fp)
   264a0:	108002a8 	cmpgeui	r2,r2,10
   264a4:	1000041e 	bne	r2,zero,264b8 <alt_printf+0x160>
                            c = '0' + digit;
   264a8:	e0bffc17 	ldw	r2,-16(fp)
   264ac:	10800c04 	addi	r2,r2,48
   264b0:	e0bff805 	stb	r2,-32(fp)
   264b4:	00000306 	br	264c4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   264b8:	e0bffc17 	ldw	r2,-16(fp)
   264bc:	108015c4 	addi	r2,r2,87
   264c0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   264c4:	e0bff807 	ldb	r2,-32(fp)
   264c8:	1009883a 	mov	r4,r2
   264cc:	00265800 	call	26580 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   264d0:	e0bff917 	ldw	r2,-28(fp)
   264d4:	10bfff04 	addi	r2,r2,-4
   264d8:	e0bff915 	stw	r2,-28(fp)
   264dc:	e0bff917 	ldw	r2,-28(fp)
   264e0:	103fe50e 	bge	r2,zero,26478 <__alt_data_end+0xf4026478>
   264e4:	00001a06 	br	26550 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   264e8:	e0bff807 	ldb	r2,-32(fp)
   264ec:	10801cd8 	cmpnei	r2,r2,115
   264f0:	1000151e 	bne	r2,zero,26548 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   264f4:	e0bffe17 	ldw	r2,-8(fp)
   264f8:	10c00104 	addi	r3,r2,4
   264fc:	e0fffe15 	stw	r3,-8(fp)
   26500:	10800017 	ldw	r2,0(r2)
   26504:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   26508:	00000906 	br	26530 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2650c:	e0bffa17 	ldw	r2,-24(fp)
   26510:	10c00044 	addi	r3,r2,1
   26514:	e0fffa15 	stw	r3,-24(fp)
   26518:	10800003 	ldbu	r2,0(r2)
   2651c:	10803fcc 	andi	r2,r2,255
   26520:	1080201c 	xori	r2,r2,128
   26524:	10bfe004 	addi	r2,r2,-128
   26528:	1009883a 	mov	r4,r2
   2652c:	00265800 	call	26580 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   26530:	e0bffa17 	ldw	r2,-24(fp)
   26534:	10800003 	ldbu	r2,0(r2)
   26538:	10803fcc 	andi	r2,r2,255
   2653c:	1080201c 	xori	r2,r2,128
   26540:	10bfe004 	addi	r2,r2,-128
   26544:	103ff11e 	bne	r2,zero,2650c <__alt_data_end+0xf402650c>
   26548:	00000106 	br	26550 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2654c:	00000706 	br	2656c <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   26550:	e0bff717 	ldw	r2,-36(fp)
   26554:	10c00044 	addi	r3,r2,1
   26558:	e0fff715 	stw	r3,-36(fp)
   2655c:	10800003 	ldbu	r2,0(r2)
   26560:	e0bff805 	stb	r2,-32(fp)
   26564:	e0bff807 	ldb	r2,-32(fp)
   26568:	103f881e 	bne	r2,zero,2638c <__alt_data_end+0xf402638c>
            {
                break;
            }
        }
    }
}
   2656c:	e037883a 	mov	sp,fp
   26570:	dfc00117 	ldw	ra,4(sp)
   26574:	df000017 	ldw	fp,0(sp)
   26578:	dec00504 	addi	sp,sp,20
   2657c:	f800283a 	ret

00026580 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   26580:	defffd04 	addi	sp,sp,-12
   26584:	dfc00215 	stw	ra,8(sp)
   26588:	df000115 	stw	fp,4(sp)
   2658c:	df000104 	addi	fp,sp,4
   26590:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   26594:	00820034 	movhi	r2,2048
   26598:	10878604 	addi	r2,r2,7704
   2659c:	10800017 	ldw	r2,0(r2)
   265a0:	10800217 	ldw	r2,8(r2)
   265a4:	e13fff17 	ldw	r4,-4(fp)
   265a8:	100b883a 	mov	r5,r2
   265ac:	00244c40 	call	244c4 <putc>
#endif
}
   265b0:	e037883a 	mov	sp,fp
   265b4:	dfc00117 	ldw	ra,4(sp)
   265b8:	df000017 	ldw	fp,0(sp)
   265bc:	dec00204 	addi	sp,sp,8
   265c0:	f800283a 	ret

000265c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   265c4:	defffe04 	addi	sp,sp,-8
   265c8:	dfc00115 	stw	ra,4(sp)
   265cc:	df000015 	stw	fp,0(sp)
   265d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   265d4:	00820034 	movhi	r2,2048
   265d8:	10878c04 	addi	r2,r2,7728
   265dc:	10800017 	ldw	r2,0(r2)
   265e0:	10000526 	beq	r2,zero,265f8 <alt_get_errno+0x34>
   265e4:	00820034 	movhi	r2,2048
   265e8:	10878c04 	addi	r2,r2,7728
   265ec:	10800017 	ldw	r2,0(r2)
   265f0:	103ee83a 	callr	r2
   265f4:	00000206 	br	26600 <alt_get_errno+0x3c>
   265f8:	00820034 	movhi	r2,2048
   265fc:	10879904 	addi	r2,r2,7780
}
   26600:	e037883a 	mov	sp,fp
   26604:	dfc00117 	ldw	ra,4(sp)
   26608:	df000017 	ldw	fp,0(sp)
   2660c:	dec00204 	addi	sp,sp,8
   26610:	f800283a 	ret

00026614 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   26614:	defff904 	addi	sp,sp,-28
   26618:	dfc00615 	stw	ra,24(sp)
   2661c:	df000515 	stw	fp,20(sp)
   26620:	df000504 	addi	fp,sp,20
   26624:	e13ffd15 	stw	r4,-12(fp)
   26628:	e17ffe15 	stw	r5,-8(fp)
   2662c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   26630:	e0bffd17 	ldw	r2,-12(fp)
   26634:	10000816 	blt	r2,zero,26658 <read+0x44>
   26638:	e13ffd17 	ldw	r4,-12(fp)
   2663c:	01400304 	movi	r5,12
   26640:	00224200 	call	22420 <__mulsi3>
   26644:	1007883a 	mov	r3,r2
   26648:	00820034 	movhi	r2,2048
   2664c:	1082e704 	addi	r2,r2,2972
   26650:	1885883a 	add	r2,r3,r2
   26654:	00000106 	br	2665c <read+0x48>
   26658:	0005883a 	mov	r2,zero
   2665c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   26660:	e0bffb17 	ldw	r2,-20(fp)
   26664:	10002226 	beq	r2,zero,266f0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26668:	e0bffb17 	ldw	r2,-20(fp)
   2666c:	10800217 	ldw	r2,8(r2)
   26670:	108000cc 	andi	r2,r2,3
   26674:	10800060 	cmpeqi	r2,r2,1
   26678:	1000181e 	bne	r2,zero,266dc <read+0xc8>
        (fd->dev->read))
   2667c:	e0bffb17 	ldw	r2,-20(fp)
   26680:	10800017 	ldw	r2,0(r2)
   26684:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   26688:	10001426 	beq	r2,zero,266dc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2668c:	e0bffb17 	ldw	r2,-20(fp)
   26690:	10800017 	ldw	r2,0(r2)
   26694:	10800517 	ldw	r2,20(r2)
   26698:	e0ffff17 	ldw	r3,-4(fp)
   2669c:	e13ffb17 	ldw	r4,-20(fp)
   266a0:	e17ffe17 	ldw	r5,-8(fp)
   266a4:	180d883a 	mov	r6,r3
   266a8:	103ee83a 	callr	r2
   266ac:	e0bffc15 	stw	r2,-16(fp)
   266b0:	e0bffc17 	ldw	r2,-16(fp)
   266b4:	1000070e 	bge	r2,zero,266d4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   266b8:	00265c40 	call	265c4 <alt_get_errno>
   266bc:	1007883a 	mov	r3,r2
   266c0:	e0bffc17 	ldw	r2,-16(fp)
   266c4:	0085c83a 	sub	r2,zero,r2
   266c8:	18800015 	stw	r2,0(r3)
          return -1;
   266cc:	00bfffc4 	movi	r2,-1
   266d0:	00000c06 	br	26704 <read+0xf0>
        }
        return rval;
   266d4:	e0bffc17 	ldw	r2,-16(fp)
   266d8:	00000a06 	br	26704 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   266dc:	00265c40 	call	265c4 <alt_get_errno>
   266e0:	1007883a 	mov	r3,r2
   266e4:	00800344 	movi	r2,13
   266e8:	18800015 	stw	r2,0(r3)
   266ec:	00000406 	br	26700 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   266f0:	00265c40 	call	265c4 <alt_get_errno>
   266f4:	1007883a 	mov	r3,r2
   266f8:	00801444 	movi	r2,81
   266fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26700:	00bfffc4 	movi	r2,-1
}
   26704:	e037883a 	mov	sp,fp
   26708:	dfc00117 	ldw	ra,4(sp)
   2670c:	df000017 	ldw	fp,0(sp)
   26710:	dec00204 	addi	sp,sp,8
   26714:	f800283a 	ret

00026718 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   26718:	defffc04 	addi	sp,sp,-16
   2671c:	dfc00315 	stw	ra,12(sp)
   26720:	df000215 	stw	fp,8(sp)
   26724:	dc000115 	stw	r16,4(sp)
   26728:	df000204 	addi	fp,sp,8
   2672c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   26730:	e0bffe17 	ldw	r2,-8(fp)
   26734:	108000d0 	cmplti	r2,r2,3
   26738:	1000111e 	bne	r2,zero,26780 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   2673c:	04020034 	movhi	r16,2048
   26740:	8402e704 	addi	r16,r16,2972
   26744:	e0bffe17 	ldw	r2,-8(fp)
   26748:	1009883a 	mov	r4,r2
   2674c:	01400304 	movi	r5,12
   26750:	00224200 	call	22420 <__mulsi3>
   26754:	8085883a 	add	r2,r16,r2
   26758:	10800204 	addi	r2,r2,8
   2675c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   26760:	04020034 	movhi	r16,2048
   26764:	8402e704 	addi	r16,r16,2972
   26768:	e0bffe17 	ldw	r2,-8(fp)
   2676c:	1009883a 	mov	r4,r2
   26770:	01400304 	movi	r5,12
   26774:	00224200 	call	22420 <__mulsi3>
   26778:	8085883a 	add	r2,r16,r2
   2677c:	10000015 	stw	zero,0(r2)
  }
}
   26780:	e6ffff04 	addi	sp,fp,-4
   26784:	dfc00217 	ldw	ra,8(sp)
   26788:	df000117 	ldw	fp,4(sp)
   2678c:	dc000017 	ldw	r16,0(sp)
   26790:	dec00304 	addi	sp,sp,12
   26794:	f800283a 	ret

00026798 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   26798:	defff904 	addi	sp,sp,-28
   2679c:	df000615 	stw	fp,24(sp)
   267a0:	df000604 	addi	fp,sp,24
   267a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   267a8:	0005303a 	rdctl	r2,status
   267ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   267b0:	e0fffc17 	ldw	r3,-16(fp)
   267b4:	00bfff84 	movi	r2,-2
   267b8:	1884703a 	and	r2,r3,r2
   267bc:	1001703a 	wrctl	status,r2
  
  return context;
   267c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   267c4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   267c8:	d0a01817 	ldw	r2,-32672(gp)
   267cc:	10c000c4 	addi	r3,r2,3
   267d0:	00bfff04 	movi	r2,-4
   267d4:	1884703a 	and	r2,r3,r2
   267d8:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   267dc:	d0e01817 	ldw	r3,-32672(gp)
   267e0:	e0bfff17 	ldw	r2,-4(fp)
   267e4:	1887883a 	add	r3,r3,r2
   267e8:	00830034 	movhi	r2,3072
   267ec:	10800004 	addi	r2,r2,0
   267f0:	10c0062e 	bgeu	r2,r3,2680c <sbrk+0x74>
   267f4:	e0bffa17 	ldw	r2,-24(fp)
   267f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   267fc:	e0bffd17 	ldw	r2,-12(fp)
   26800:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   26804:	00bfffc4 	movi	r2,-1
   26808:	00000b06 	br	26838 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2680c:	d0a01817 	ldw	r2,-32672(gp)
   26810:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   26814:	d0e01817 	ldw	r3,-32672(gp)
   26818:	e0bfff17 	ldw	r2,-4(fp)
   2681c:	1885883a 	add	r2,r3,r2
   26820:	d0a01815 	stw	r2,-32672(gp)
   26824:	e0bffa17 	ldw	r2,-24(fp)
   26828:	e0bffe15 	stw	r2,-8(fp)
   2682c:	e0bffe17 	ldw	r2,-8(fp)
   26830:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   26834:	e0bffb17 	ldw	r2,-20(fp)
} 
   26838:	e037883a 	mov	sp,fp
   2683c:	df000017 	ldw	fp,0(sp)
   26840:	dec00104 	addi	sp,sp,4
   26844:	f800283a 	ret

00026848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26848:	defffe04 	addi	sp,sp,-8
   2684c:	dfc00115 	stw	ra,4(sp)
   26850:	df000015 	stw	fp,0(sp)
   26854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26858:	00820034 	movhi	r2,2048
   2685c:	10878c04 	addi	r2,r2,7728
   26860:	10800017 	ldw	r2,0(r2)
   26864:	10000526 	beq	r2,zero,2687c <alt_get_errno+0x34>
   26868:	00820034 	movhi	r2,2048
   2686c:	10878c04 	addi	r2,r2,7728
   26870:	10800017 	ldw	r2,0(r2)
   26874:	103ee83a 	callr	r2
   26878:	00000206 	br	26884 <alt_get_errno+0x3c>
   2687c:	00820034 	movhi	r2,2048
   26880:	10879904 	addi	r2,r2,7780
}
   26884:	e037883a 	mov	sp,fp
   26888:	dfc00117 	ldw	ra,4(sp)
   2688c:	df000017 	ldw	fp,0(sp)
   26890:	dec00204 	addi	sp,sp,8
   26894:	f800283a 	ret

00026898 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   26898:	defff904 	addi	sp,sp,-28
   2689c:	dfc00615 	stw	ra,24(sp)
   268a0:	df000515 	stw	fp,20(sp)
   268a4:	df000504 	addi	fp,sp,20
   268a8:	e13ffd15 	stw	r4,-12(fp)
   268ac:	e17ffe15 	stw	r5,-8(fp)
   268b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   268b4:	e0bffd17 	ldw	r2,-12(fp)
   268b8:	10000816 	blt	r2,zero,268dc <write+0x44>
   268bc:	e13ffd17 	ldw	r4,-12(fp)
   268c0:	01400304 	movi	r5,12
   268c4:	00224200 	call	22420 <__mulsi3>
   268c8:	1007883a 	mov	r3,r2
   268cc:	00820034 	movhi	r2,2048
   268d0:	1082e704 	addi	r2,r2,2972
   268d4:	1885883a 	add	r2,r3,r2
   268d8:	00000106 	br	268e0 <write+0x48>
   268dc:	0005883a 	mov	r2,zero
   268e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   268e4:	e0bffb17 	ldw	r2,-20(fp)
   268e8:	10002126 	beq	r2,zero,26970 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   268ec:	e0bffb17 	ldw	r2,-20(fp)
   268f0:	10800217 	ldw	r2,8(r2)
   268f4:	108000cc 	andi	r2,r2,3
   268f8:	10001826 	beq	r2,zero,2695c <write+0xc4>
   268fc:	e0bffb17 	ldw	r2,-20(fp)
   26900:	10800017 	ldw	r2,0(r2)
   26904:	10800617 	ldw	r2,24(r2)
   26908:	10001426 	beq	r2,zero,2695c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2690c:	e0bffb17 	ldw	r2,-20(fp)
   26910:	10800017 	ldw	r2,0(r2)
   26914:	10800617 	ldw	r2,24(r2)
   26918:	e0ffff17 	ldw	r3,-4(fp)
   2691c:	e13ffb17 	ldw	r4,-20(fp)
   26920:	e17ffe17 	ldw	r5,-8(fp)
   26924:	180d883a 	mov	r6,r3
   26928:	103ee83a 	callr	r2
   2692c:	e0bffc15 	stw	r2,-16(fp)
   26930:	e0bffc17 	ldw	r2,-16(fp)
   26934:	1000070e 	bge	r2,zero,26954 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   26938:	00268480 	call	26848 <alt_get_errno>
   2693c:	1007883a 	mov	r3,r2
   26940:	e0bffc17 	ldw	r2,-16(fp)
   26944:	0085c83a 	sub	r2,zero,r2
   26948:	18800015 	stw	r2,0(r3)
        return -1;
   2694c:	00bfffc4 	movi	r2,-1
   26950:	00000c06 	br	26984 <write+0xec>
      }
      return rval;
   26954:	e0bffc17 	ldw	r2,-16(fp)
   26958:	00000a06 	br	26984 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2695c:	00268480 	call	26848 <alt_get_errno>
   26960:	1007883a 	mov	r3,r2
   26964:	00800344 	movi	r2,13
   26968:	18800015 	stw	r2,0(r3)
   2696c:	00000406 	br	26980 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   26970:	00268480 	call	26848 <alt_get_errno>
   26974:	1007883a 	mov	r3,r2
   26978:	00801444 	movi	r2,81
   2697c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   26980:	00bfffc4 	movi	r2,-1
}
   26984:	e037883a 	mov	sp,fp
   26988:	dfc00117 	ldw	ra,4(sp)
   2698c:	df000017 	ldw	fp,0(sp)
   26990:	dec00204 	addi	sp,sp,8
   26994:	f800283a 	ret

00026998 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   26998:	defffd04 	addi	sp,sp,-12
   2699c:	dfc00215 	stw	ra,8(sp)
   269a0:	df000115 	stw	fp,4(sp)
   269a4:	df000104 	addi	fp,sp,4
   269a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   269ac:	e13fff17 	ldw	r4,-4(fp)
   269b0:	01420034 	movhi	r5,2048
   269b4:	29478904 	addi	r5,r5,7716
   269b8:	00279e00 	call	279e0 <alt_dev_llist_insert>
}
   269bc:	e037883a 	mov	sp,fp
   269c0:	dfc00117 	ldw	ra,4(sp)
   269c4:	df000017 	ldw	fp,0(sp)
   269c8:	dec00204 	addi	sp,sp,8
   269cc:	f800283a 	ret

000269d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   269d0:	defffd04 	addi	sp,sp,-12
   269d4:	dfc00215 	stw	ra,8(sp)
   269d8:	df000115 	stw	fp,4(sp)
   269dc:	df000104 	addi	fp,sp,4
   269e0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   269e4:	00283300 	call	28330 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   269e8:	00800044 	movi	r2,1
   269ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   269f0:	e037883a 	mov	sp,fp
   269f4:	dfc00117 	ldw	ra,4(sp)
   269f8:	df000017 	ldw	fp,0(sp)
   269fc:	dec00204 	addi	sp,sp,8
   26a00:	f800283a 	ret

00026a04 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   26a04:	defffe04 	addi	sp,sp,-8
   26a08:	dfc00115 	stw	ra,4(sp)
   26a0c:	df000015 	stw	fp,0(sp)
   26a10:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   26a14:	01020034 	movhi	r4,2048
   26a18:	21035104 	addi	r4,r4,3396
   26a1c:	000b883a 	mov	r5,zero
   26a20:	000d883a 	mov	r6,zero
   26a24:	0026bc80 	call	26bc8 <altera_avalon_jtag_uart_init>
   26a28:	01020034 	movhi	r4,2048
   26a2c:	21034704 	addi	r4,r4,3356
   26a30:	00269980 	call	26998 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   26a34:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
   26a38:	01020034 	movhi	r4,2048
   26a3c:	21075f04 	addi	r4,r4,7548
   26a40:	00269980 	call	26998 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
   26a44:	01020034 	movhi	r4,2048
   26a48:	21076a04 	addi	r4,r4,7592
   26a4c:	00269980 	call	26998 <alt_dev_reg>
}
   26a50:	e037883a 	mov	sp,fp
   26a54:	dfc00117 	ldw	ra,4(sp)
   26a58:	df000017 	ldw	fp,0(sp)
   26a5c:	dec00204 	addi	sp,sp,8
   26a60:	f800283a 	ret

00026a64 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   26a64:	defffa04 	addi	sp,sp,-24
   26a68:	dfc00515 	stw	ra,20(sp)
   26a6c:	df000415 	stw	fp,16(sp)
   26a70:	df000404 	addi	fp,sp,16
   26a74:	e13ffd15 	stw	r4,-12(fp)
   26a78:	e17ffe15 	stw	r5,-8(fp)
   26a7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   26a80:	e0bffd17 	ldw	r2,-12(fp)
   26a84:	10800017 	ldw	r2,0(r2)
   26a88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   26a8c:	e0bffc17 	ldw	r2,-16(fp)
   26a90:	10c00a04 	addi	r3,r2,40
   26a94:	e0bffd17 	ldw	r2,-12(fp)
   26a98:	10800217 	ldw	r2,8(r2)
   26a9c:	1809883a 	mov	r4,r3
   26aa0:	e17ffe17 	ldw	r5,-8(fp)
   26aa4:	e1bfff17 	ldw	r6,-4(fp)
   26aa8:	100f883a 	mov	r7,r2
   26aac:	00270840 	call	27084 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   26ab0:	e037883a 	mov	sp,fp
   26ab4:	dfc00117 	ldw	ra,4(sp)
   26ab8:	df000017 	ldw	fp,0(sp)
   26abc:	dec00204 	addi	sp,sp,8
   26ac0:	f800283a 	ret

00026ac4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   26ac4:	defffa04 	addi	sp,sp,-24
   26ac8:	dfc00515 	stw	ra,20(sp)
   26acc:	df000415 	stw	fp,16(sp)
   26ad0:	df000404 	addi	fp,sp,16
   26ad4:	e13ffd15 	stw	r4,-12(fp)
   26ad8:	e17ffe15 	stw	r5,-8(fp)
   26adc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   26ae0:	e0bffd17 	ldw	r2,-12(fp)
   26ae4:	10800017 	ldw	r2,0(r2)
   26ae8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   26aec:	e0bffc17 	ldw	r2,-16(fp)
   26af0:	10c00a04 	addi	r3,r2,40
   26af4:	e0bffd17 	ldw	r2,-12(fp)
   26af8:	10800217 	ldw	r2,8(r2)
   26afc:	1809883a 	mov	r4,r3
   26b00:	e17ffe17 	ldw	r5,-8(fp)
   26b04:	e1bfff17 	ldw	r6,-4(fp)
   26b08:	100f883a 	mov	r7,r2
   26b0c:	00272900 	call	27290 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   26b10:	e037883a 	mov	sp,fp
   26b14:	dfc00117 	ldw	ra,4(sp)
   26b18:	df000017 	ldw	fp,0(sp)
   26b1c:	dec00204 	addi	sp,sp,8
   26b20:	f800283a 	ret

00026b24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   26b24:	defffc04 	addi	sp,sp,-16
   26b28:	dfc00315 	stw	ra,12(sp)
   26b2c:	df000215 	stw	fp,8(sp)
   26b30:	df000204 	addi	fp,sp,8
   26b34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   26b38:	e0bfff17 	ldw	r2,-4(fp)
   26b3c:	10800017 	ldw	r2,0(r2)
   26b40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   26b44:	e0bffe17 	ldw	r2,-8(fp)
   26b48:	10c00a04 	addi	r3,r2,40
   26b4c:	e0bfff17 	ldw	r2,-4(fp)
   26b50:	10800217 	ldw	r2,8(r2)
   26b54:	1809883a 	mov	r4,r3
   26b58:	100b883a 	mov	r5,r2
   26b5c:	0026f300 	call	26f30 <altera_avalon_jtag_uart_close>
}
   26b60:	e037883a 	mov	sp,fp
   26b64:	dfc00117 	ldw	ra,4(sp)
   26b68:	df000017 	ldw	fp,0(sp)
   26b6c:	dec00204 	addi	sp,sp,8
   26b70:	f800283a 	ret

00026b74 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   26b74:	defffa04 	addi	sp,sp,-24
   26b78:	dfc00515 	stw	ra,20(sp)
   26b7c:	df000415 	stw	fp,16(sp)
   26b80:	df000404 	addi	fp,sp,16
   26b84:	e13ffd15 	stw	r4,-12(fp)
   26b88:	e17ffe15 	stw	r5,-8(fp)
   26b8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   26b90:	e0bffd17 	ldw	r2,-12(fp)
   26b94:	10800017 	ldw	r2,0(r2)
   26b98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   26b9c:	e0bffc17 	ldw	r2,-16(fp)
   26ba0:	10800a04 	addi	r2,r2,40
   26ba4:	1009883a 	mov	r4,r2
   26ba8:	e17ffe17 	ldw	r5,-8(fp)
   26bac:	e1bfff17 	ldw	r6,-4(fp)
   26bb0:	0026f980 	call	26f98 <altera_avalon_jtag_uart_ioctl>
}
   26bb4:	e037883a 	mov	sp,fp
   26bb8:	dfc00117 	ldw	ra,4(sp)
   26bbc:	df000017 	ldw	fp,0(sp)
   26bc0:	dec00204 	addi	sp,sp,8
   26bc4:	f800283a 	ret

00026bc8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   26bc8:	defffb04 	addi	sp,sp,-20
   26bcc:	dfc00415 	stw	ra,16(sp)
   26bd0:	df000315 	stw	fp,12(sp)
   26bd4:	df000304 	addi	fp,sp,12
   26bd8:	e13ffd15 	stw	r4,-12(fp)
   26bdc:	e17ffe15 	stw	r5,-8(fp)
   26be0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   26be4:	e0bffd17 	ldw	r2,-12(fp)
   26be8:	00c00044 	movi	r3,1
   26bec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   26bf0:	e0bffd17 	ldw	r2,-12(fp)
   26bf4:	10800017 	ldw	r2,0(r2)
   26bf8:	10800104 	addi	r2,r2,4
   26bfc:	1007883a 	mov	r3,r2
   26c00:	e0bffd17 	ldw	r2,-12(fp)
   26c04:	10800817 	ldw	r2,32(r2)
   26c08:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   26c0c:	e0bfff17 	ldw	r2,-4(fp)
   26c10:	1009883a 	mov	r4,r2
   26c14:	e17ffd17 	ldw	r5,-12(fp)
   26c18:	018000b4 	movhi	r6,2
   26c1c:	319b2004 	addi	r6,r6,27776
   26c20:	0027d400 	call	27d40 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   26c24:	e0bffd17 	ldw	r2,-12(fp)
   26c28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   26c2c:	e0bffd17 	ldw	r2,-12(fp)
   26c30:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   26c34:	00820034 	movhi	r2,2048
   26c38:	10879e04 	addi	r2,r2,7800
   26c3c:	10800017 	ldw	r2,0(r2)
   26c40:	1809883a 	mov	r4,r3
   26c44:	100b883a 	mov	r5,r2
   26c48:	018000b4 	movhi	r6,2
   26c4c:	319ba204 	addi	r6,r6,28296
   26c50:	e1fffd17 	ldw	r7,-12(fp)
   26c54:	00278340 	call	27834 <alt_alarm_start>
   26c58:	1000040e 	bge	r2,zero,26c6c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   26c5c:	e0fffd17 	ldw	r3,-12(fp)
   26c60:	00a00034 	movhi	r2,32768
   26c64:	10bfffc4 	addi	r2,r2,-1
   26c68:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   26c6c:	e037883a 	mov	sp,fp
   26c70:	dfc00117 	ldw	ra,4(sp)
   26c74:	df000017 	ldw	fp,0(sp)
   26c78:	dec00204 	addi	sp,sp,8
   26c7c:	f800283a 	ret

00026c80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   26c80:	defff704 	addi	sp,sp,-36
   26c84:	df000815 	stw	fp,32(sp)
   26c88:	df000804 	addi	fp,sp,32
   26c8c:	e13ffe15 	stw	r4,-8(fp)
   26c90:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   26c94:	e0bffe17 	ldw	r2,-8(fp)
   26c98:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   26c9c:	e0bffa17 	ldw	r2,-24(fp)
   26ca0:	10800017 	ldw	r2,0(r2)
   26ca4:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   26ca8:	e0bffb17 	ldw	r2,-20(fp)
   26cac:	10800104 	addi	r2,r2,4
   26cb0:	10800037 	ldwio	r2,0(r2)
   26cb4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   26cb8:	e0bffc17 	ldw	r2,-16(fp)
   26cbc:	1080c00c 	andi	r2,r2,768
   26cc0:	1000011e 	bne	r2,zero,26cc8 <altera_avalon_jtag_uart_irq+0x48>
      break;
   26cc4:	00006c06 	br	26e78 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   26cc8:	e0bffc17 	ldw	r2,-16(fp)
   26ccc:	1080400c 	andi	r2,r2,256
   26cd0:	10003426 	beq	r2,zero,26da4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   26cd4:	00800074 	movhi	r2,1
   26cd8:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   26cdc:	e0bffa17 	ldw	r2,-24(fp)
   26ce0:	10800a17 	ldw	r2,40(r2)
   26ce4:	10800044 	addi	r2,r2,1
   26ce8:	1081ffcc 	andi	r2,r2,2047
   26cec:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   26cf0:	e0bffa17 	ldw	r2,-24(fp)
   26cf4:	10c00b17 	ldw	r3,44(r2)
   26cf8:	e0bffd17 	ldw	r2,-12(fp)
   26cfc:	1880011e 	bne	r3,r2,26d04 <altera_avalon_jtag_uart_irq+0x84>
          break;
   26d00:	00001606 	br	26d5c <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   26d04:	e0bffb17 	ldw	r2,-20(fp)
   26d08:	10800037 	ldwio	r2,0(r2)
   26d0c:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   26d10:	e0bff817 	ldw	r2,-32(fp)
   26d14:	10a0000c 	andi	r2,r2,32768
   26d18:	1000011e 	bne	r2,zero,26d20 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   26d1c:	00000f06 	br	26d5c <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   26d20:	e0bffa17 	ldw	r2,-24(fp)
   26d24:	10800a17 	ldw	r2,40(r2)
   26d28:	e0fff817 	ldw	r3,-32(fp)
   26d2c:	1809883a 	mov	r4,r3
   26d30:	e0fffa17 	ldw	r3,-24(fp)
   26d34:	1885883a 	add	r2,r3,r2
   26d38:	10800e04 	addi	r2,r2,56
   26d3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   26d40:	e0bffa17 	ldw	r2,-24(fp)
   26d44:	10800a17 	ldw	r2,40(r2)
   26d48:	10800044 	addi	r2,r2,1
   26d4c:	10c1ffcc 	andi	r3,r2,2047
   26d50:	e0bffa17 	ldw	r2,-24(fp)
   26d54:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   26d58:	003fe006 	br	26cdc <__alt_data_end+0xf4026cdc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   26d5c:	e0bff817 	ldw	r2,-32(fp)
   26d60:	10bfffec 	andhi	r2,r2,65535
   26d64:	10000f26 	beq	r2,zero,26da4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   26d68:	e0bffa17 	ldw	r2,-24(fp)
   26d6c:	10c00817 	ldw	r3,32(r2)
   26d70:	00bfff84 	movi	r2,-2
   26d74:	1886703a 	and	r3,r3,r2
   26d78:	e0bffa17 	ldw	r2,-24(fp)
   26d7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   26d80:	e0bffb17 	ldw	r2,-20(fp)
   26d84:	10800104 	addi	r2,r2,4
   26d88:	1007883a 	mov	r3,r2
   26d8c:	e0bffa17 	ldw	r2,-24(fp)
   26d90:	10800817 	ldw	r2,32(r2)
   26d94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   26d98:	e0bffb17 	ldw	r2,-20(fp)
   26d9c:	10800104 	addi	r2,r2,4
   26da0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   26da4:	e0bffc17 	ldw	r2,-16(fp)
   26da8:	1080800c 	andi	r2,r2,512
   26dac:	10003126 	beq	r2,zero,26e74 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   26db0:	e0bffc17 	ldw	r2,-16(fp)
   26db4:	1004d43a 	srli	r2,r2,16
   26db8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   26dbc:	00001406 	br	26e10 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   26dc0:	e0bffb17 	ldw	r2,-20(fp)
   26dc4:	e0fffa17 	ldw	r3,-24(fp)
   26dc8:	18c00d17 	ldw	r3,52(r3)
   26dcc:	e13ffa17 	ldw	r4,-24(fp)
   26dd0:	20c7883a 	add	r3,r4,r3
   26dd4:	18c20e04 	addi	r3,r3,2104
   26dd8:	18c00003 	ldbu	r3,0(r3)
   26ddc:	18c03fcc 	andi	r3,r3,255
   26de0:	18c0201c 	xori	r3,r3,128
   26de4:	18ffe004 	addi	r3,r3,-128
   26de8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   26dec:	e0bffa17 	ldw	r2,-24(fp)
   26df0:	10800d17 	ldw	r2,52(r2)
   26df4:	10800044 	addi	r2,r2,1
   26df8:	10c1ffcc 	andi	r3,r2,2047
   26dfc:	e0bffa17 	ldw	r2,-24(fp)
   26e00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   26e04:	e0bff917 	ldw	r2,-28(fp)
   26e08:	10bfffc4 	addi	r2,r2,-1
   26e0c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   26e10:	e0bff917 	ldw	r2,-28(fp)
   26e14:	10000526 	beq	r2,zero,26e2c <altera_avalon_jtag_uart_irq+0x1ac>
   26e18:	e0bffa17 	ldw	r2,-24(fp)
   26e1c:	10c00d17 	ldw	r3,52(r2)
   26e20:	e0bffa17 	ldw	r2,-24(fp)
   26e24:	10800c17 	ldw	r2,48(r2)
   26e28:	18bfe51e 	bne	r3,r2,26dc0 <__alt_data_end+0xf4026dc0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   26e2c:	e0bff917 	ldw	r2,-28(fp)
   26e30:	10001026 	beq	r2,zero,26e74 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   26e34:	e0bffa17 	ldw	r2,-24(fp)
   26e38:	10c00817 	ldw	r3,32(r2)
   26e3c:	00bfff44 	movi	r2,-3
   26e40:	1886703a 	and	r3,r3,r2
   26e44:	e0bffa17 	ldw	r2,-24(fp)
   26e48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   26e4c:	e0bffa17 	ldw	r2,-24(fp)
   26e50:	10800017 	ldw	r2,0(r2)
   26e54:	10800104 	addi	r2,r2,4
   26e58:	1007883a 	mov	r3,r2
   26e5c:	e0bffa17 	ldw	r2,-24(fp)
   26e60:	10800817 	ldw	r2,32(r2)
   26e64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   26e68:	e0bffb17 	ldw	r2,-20(fp)
   26e6c:	10800104 	addi	r2,r2,4
   26e70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   26e74:	003f8c06 	br	26ca8 <__alt_data_end+0xf4026ca8>
}
   26e78:	e037883a 	mov	sp,fp
   26e7c:	df000017 	ldw	fp,0(sp)
   26e80:	dec00104 	addi	sp,sp,4
   26e84:	f800283a 	ret

00026e88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   26e88:	defff804 	addi	sp,sp,-32
   26e8c:	df000715 	stw	fp,28(sp)
   26e90:	df000704 	addi	fp,sp,28
   26e94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   26e98:	e0bffb17 	ldw	r2,-20(fp)
   26e9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   26ea0:	e0bff917 	ldw	r2,-28(fp)
   26ea4:	10800017 	ldw	r2,0(r2)
   26ea8:	10800104 	addi	r2,r2,4
   26eac:	10800037 	ldwio	r2,0(r2)
   26eb0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   26eb4:	e0bffa17 	ldw	r2,-24(fp)
   26eb8:	1081000c 	andi	r2,r2,1024
   26ebc:	10000b26 	beq	r2,zero,26eec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   26ec0:	e0bff917 	ldw	r2,-28(fp)
   26ec4:	10800017 	ldw	r2,0(r2)
   26ec8:	10800104 	addi	r2,r2,4
   26ecc:	1007883a 	mov	r3,r2
   26ed0:	e0bff917 	ldw	r2,-28(fp)
   26ed4:	10800817 	ldw	r2,32(r2)
   26ed8:	10810014 	ori	r2,r2,1024
   26edc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   26ee0:	e0bff917 	ldw	r2,-28(fp)
   26ee4:	10000915 	stw	zero,36(r2)
   26ee8:	00000a06 	br	26f14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   26eec:	e0bff917 	ldw	r2,-28(fp)
   26ef0:	10c00917 	ldw	r3,36(r2)
   26ef4:	00a00034 	movhi	r2,32768
   26ef8:	10bfff04 	addi	r2,r2,-4
   26efc:	10c00536 	bltu	r2,r3,26f14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   26f00:	e0bff917 	ldw	r2,-28(fp)
   26f04:	10800917 	ldw	r2,36(r2)
   26f08:	10c00044 	addi	r3,r2,1
   26f0c:	e0bff917 	ldw	r2,-28(fp)
   26f10:	10c00915 	stw	r3,36(r2)
   26f14:	00820034 	movhi	r2,2048
   26f18:	10879e04 	addi	r2,r2,7800
   26f1c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   26f20:	e037883a 	mov	sp,fp
   26f24:	df000017 	ldw	fp,0(sp)
   26f28:	dec00104 	addi	sp,sp,4
   26f2c:	f800283a 	ret

00026f30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   26f30:	defffd04 	addi	sp,sp,-12
   26f34:	df000215 	stw	fp,8(sp)
   26f38:	df000204 	addi	fp,sp,8
   26f3c:	e13ffe15 	stw	r4,-8(fp)
   26f40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   26f44:	00000506 	br	26f5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   26f48:	e0bfff17 	ldw	r2,-4(fp)
   26f4c:	1090000c 	andi	r2,r2,16384
   26f50:	10000226 	beq	r2,zero,26f5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   26f54:	00bffd44 	movi	r2,-11
   26f58:	00000b06 	br	26f88 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   26f5c:	e0bffe17 	ldw	r2,-8(fp)
   26f60:	10c00d17 	ldw	r3,52(r2)
   26f64:	e0bffe17 	ldw	r2,-8(fp)
   26f68:	10800c17 	ldw	r2,48(r2)
   26f6c:	18800526 	beq	r3,r2,26f84 <altera_avalon_jtag_uart_close+0x54>
   26f70:	e0bffe17 	ldw	r2,-8(fp)
   26f74:	10c00917 	ldw	r3,36(r2)
   26f78:	e0bffe17 	ldw	r2,-8(fp)
   26f7c:	10800117 	ldw	r2,4(r2)
   26f80:	18bff136 	bltu	r3,r2,26f48 <__alt_data_end+0xf4026f48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   26f84:	0005883a 	mov	r2,zero
}
   26f88:	e037883a 	mov	sp,fp
   26f8c:	df000017 	ldw	fp,0(sp)
   26f90:	dec00104 	addi	sp,sp,4
   26f94:	f800283a 	ret

00026f98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   26f98:	defffa04 	addi	sp,sp,-24
   26f9c:	df000515 	stw	fp,20(sp)
   26fa0:	df000504 	addi	fp,sp,20
   26fa4:	e13ffd15 	stw	r4,-12(fp)
   26fa8:	e17ffe15 	stw	r5,-8(fp)
   26fac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   26fb0:	00bff9c4 	movi	r2,-25
   26fb4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   26fb8:	e0bffe17 	ldw	r2,-8(fp)
   26fbc:	10da8060 	cmpeqi	r3,r2,27137
   26fc0:	1800031e 	bne	r3,zero,26fd0 <altera_avalon_jtag_uart_ioctl+0x38>
   26fc4:	109a80a0 	cmpeqi	r2,r2,27138
   26fc8:	1000191e 	bne	r2,zero,27030 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   26fcc:	00002806 	br	27070 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   26fd0:	e0bffd17 	ldw	r2,-12(fp)
   26fd4:	10c00117 	ldw	r3,4(r2)
   26fd8:	00a00034 	movhi	r2,32768
   26fdc:	10bfffc4 	addi	r2,r2,-1
   26fe0:	18801226 	beq	r3,r2,2702c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   26fe4:	e0bfff17 	ldw	r2,-4(fp)
   26fe8:	10800017 	ldw	r2,0(r2)
   26fec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   26ff0:	e0bffc17 	ldw	r2,-16(fp)
   26ff4:	10800090 	cmplti	r2,r2,2
   26ff8:	1000061e 	bne	r2,zero,27014 <altera_avalon_jtag_uart_ioctl+0x7c>
   26ffc:	e0fffc17 	ldw	r3,-16(fp)
   27000:	00a00034 	movhi	r2,32768
   27004:	10bfffc4 	addi	r2,r2,-1
   27008:	18800226 	beq	r3,r2,27014 <altera_avalon_jtag_uart_ioctl+0x7c>
   2700c:	e0bffc17 	ldw	r2,-16(fp)
   27010:	00000206 	br	2701c <altera_avalon_jtag_uart_ioctl+0x84>
   27014:	00a00034 	movhi	r2,32768
   27018:	10bfff84 	addi	r2,r2,-2
   2701c:	e0fffd17 	ldw	r3,-12(fp)
   27020:	18800115 	stw	r2,4(r3)
      rc = 0;
   27024:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   27028:	00001106 	br	27070 <altera_avalon_jtag_uart_ioctl+0xd8>
   2702c:	00001006 	br	27070 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   27030:	e0bffd17 	ldw	r2,-12(fp)
   27034:	10c00117 	ldw	r3,4(r2)
   27038:	00a00034 	movhi	r2,32768
   2703c:	10bfffc4 	addi	r2,r2,-1
   27040:	18800a26 	beq	r3,r2,2706c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   27044:	e0bffd17 	ldw	r2,-12(fp)
   27048:	10c00917 	ldw	r3,36(r2)
   2704c:	e0bffd17 	ldw	r2,-12(fp)
   27050:	10800117 	ldw	r2,4(r2)
   27054:	1885803a 	cmpltu	r2,r3,r2
   27058:	10c03fcc 	andi	r3,r2,255
   2705c:	e0bfff17 	ldw	r2,-4(fp)
   27060:	10c00015 	stw	r3,0(r2)
      rc = 0;
   27064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   27068:	00000006 	br	2706c <altera_avalon_jtag_uart_ioctl+0xd4>
   2706c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   27070:	e0bffb17 	ldw	r2,-20(fp)
}
   27074:	e037883a 	mov	sp,fp
   27078:	df000017 	ldw	fp,0(sp)
   2707c:	dec00104 	addi	sp,sp,4
   27080:	f800283a 	ret

00027084 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   27084:	defff304 	addi	sp,sp,-52
   27088:	dfc00c15 	stw	ra,48(sp)
   2708c:	df000b15 	stw	fp,44(sp)
   27090:	df000b04 	addi	fp,sp,44
   27094:	e13ffc15 	stw	r4,-16(fp)
   27098:	e17ffd15 	stw	r5,-12(fp)
   2709c:	e1bffe15 	stw	r6,-8(fp)
   270a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   270a4:	e0bffd17 	ldw	r2,-12(fp)
   270a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   270ac:	00004906 	br	271d4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   270b0:	e0bffc17 	ldw	r2,-16(fp)
   270b4:	10800a17 	ldw	r2,40(r2)
   270b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   270bc:	e0bffc17 	ldw	r2,-16(fp)
   270c0:	10800b17 	ldw	r2,44(r2)
   270c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   270c8:	e0fff717 	ldw	r3,-36(fp)
   270cc:	e0bff817 	ldw	r2,-32(fp)
   270d0:	18800536 	bltu	r3,r2,270e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   270d4:	e0fff717 	ldw	r3,-36(fp)
   270d8:	e0bff817 	ldw	r2,-32(fp)
   270dc:	1885c83a 	sub	r2,r3,r2
   270e0:	e0bff615 	stw	r2,-40(fp)
   270e4:	00000406 	br	270f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   270e8:	00c20004 	movi	r3,2048
   270ec:	e0bff817 	ldw	r2,-32(fp)
   270f0:	1885c83a 	sub	r2,r3,r2
   270f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   270f8:	e0bff617 	ldw	r2,-40(fp)
   270fc:	1000011e 	bne	r2,zero,27104 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   27100:	00001d06 	br	27178 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   27104:	e0fffe17 	ldw	r3,-8(fp)
   27108:	e0bff617 	ldw	r2,-40(fp)
   2710c:	1880022e 	bgeu	r3,r2,27118 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   27110:	e0bffe17 	ldw	r2,-8(fp)
   27114:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   27118:	e0bff817 	ldw	r2,-32(fp)
   2711c:	10800e04 	addi	r2,r2,56
   27120:	e0fffc17 	ldw	r3,-16(fp)
   27124:	1885883a 	add	r2,r3,r2
   27128:	e13ff517 	ldw	r4,-44(fp)
   2712c:	100b883a 	mov	r5,r2
   27130:	e1bff617 	ldw	r6,-40(fp)
   27134:	00241900 	call	24190 <memcpy>
      ptr   += n;
   27138:	e0fff517 	ldw	r3,-44(fp)
   2713c:	e0bff617 	ldw	r2,-40(fp)
   27140:	1885883a 	add	r2,r3,r2
   27144:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   27148:	e0fffe17 	ldw	r3,-8(fp)
   2714c:	e0bff617 	ldw	r2,-40(fp)
   27150:	1885c83a 	sub	r2,r3,r2
   27154:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   27158:	e0fff817 	ldw	r3,-32(fp)
   2715c:	e0bff617 	ldw	r2,-40(fp)
   27160:	1885883a 	add	r2,r3,r2
   27164:	10c1ffcc 	andi	r3,r2,2047
   27168:	e0bffc17 	ldw	r2,-16(fp)
   2716c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   27170:	e0bffe17 	ldw	r2,-8(fp)
   27174:	00bfce16 	blt	zero,r2,270b0 <__alt_data_end+0xf40270b0>

    /* If we read any data then return it */
    if (ptr != buffer)
   27178:	e0fff517 	ldw	r3,-44(fp)
   2717c:	e0bffd17 	ldw	r2,-12(fp)
   27180:	18800126 	beq	r3,r2,27188 <altera_avalon_jtag_uart_read+0x104>
      break;
   27184:	00001506 	br	271dc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   27188:	e0bfff17 	ldw	r2,-4(fp)
   2718c:	1090000c 	andi	r2,r2,16384
   27190:	10000126 	beq	r2,zero,27198 <altera_avalon_jtag_uart_read+0x114>
      break;
   27194:	00001106 	br	271dc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   27198:	0001883a 	nop
   2719c:	e0bffc17 	ldw	r2,-16(fp)
   271a0:	10c00a17 	ldw	r3,40(r2)
   271a4:	e0bff717 	ldw	r2,-36(fp)
   271a8:	1880051e 	bne	r3,r2,271c0 <altera_avalon_jtag_uart_read+0x13c>
   271ac:	e0bffc17 	ldw	r2,-16(fp)
   271b0:	10c00917 	ldw	r3,36(r2)
   271b4:	e0bffc17 	ldw	r2,-16(fp)
   271b8:	10800117 	ldw	r2,4(r2)
   271bc:	18bff736 	bltu	r3,r2,2719c <__alt_data_end+0xf402719c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   271c0:	e0bffc17 	ldw	r2,-16(fp)
   271c4:	10c00a17 	ldw	r3,40(r2)
   271c8:	e0bff717 	ldw	r2,-36(fp)
   271cc:	1880011e 	bne	r3,r2,271d4 <altera_avalon_jtag_uart_read+0x150>
      break;
   271d0:	00000206 	br	271dc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   271d4:	e0bffe17 	ldw	r2,-8(fp)
   271d8:	00bfb516 	blt	zero,r2,270b0 <__alt_data_end+0xf40270b0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   271dc:	e0fff517 	ldw	r3,-44(fp)
   271e0:	e0bffd17 	ldw	r2,-12(fp)
   271e4:	18801826 	beq	r3,r2,27248 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   271e8:	0005303a 	rdctl	r2,status
   271ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   271f0:	e0fffa17 	ldw	r3,-24(fp)
   271f4:	00bfff84 	movi	r2,-2
   271f8:	1884703a 	and	r2,r3,r2
   271fc:	1001703a 	wrctl	status,r2
  
  return context;
   27200:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   27204:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   27208:	e0bffc17 	ldw	r2,-16(fp)
   2720c:	10800817 	ldw	r2,32(r2)
   27210:	10c00054 	ori	r3,r2,1
   27214:	e0bffc17 	ldw	r2,-16(fp)
   27218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2721c:	e0bffc17 	ldw	r2,-16(fp)
   27220:	10800017 	ldw	r2,0(r2)
   27224:	10800104 	addi	r2,r2,4
   27228:	1007883a 	mov	r3,r2
   2722c:	e0bffc17 	ldw	r2,-16(fp)
   27230:	10800817 	ldw	r2,32(r2)
   27234:	18800035 	stwio	r2,0(r3)
   27238:	e0bff917 	ldw	r2,-28(fp)
   2723c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27240:	e0bffb17 	ldw	r2,-20(fp)
   27244:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   27248:	e0fff517 	ldw	r3,-44(fp)
   2724c:	e0bffd17 	ldw	r2,-12(fp)
   27250:	18800426 	beq	r3,r2,27264 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   27254:	e0fff517 	ldw	r3,-44(fp)
   27258:	e0bffd17 	ldw	r2,-12(fp)
   2725c:	1885c83a 	sub	r2,r3,r2
   27260:	00000606 	br	2727c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   27264:	e0bfff17 	ldw	r2,-4(fp)
   27268:	1090000c 	andi	r2,r2,16384
   2726c:	10000226 	beq	r2,zero,27278 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   27270:	00bffd44 	movi	r2,-11
   27274:	00000106 	br	2727c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   27278:	00bffec4 	movi	r2,-5
}
   2727c:	e037883a 	mov	sp,fp
   27280:	dfc00117 	ldw	ra,4(sp)
   27284:	df000017 	ldw	fp,0(sp)
   27288:	dec00204 	addi	sp,sp,8
   2728c:	f800283a 	ret

00027290 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   27290:	defff304 	addi	sp,sp,-52
   27294:	dfc00c15 	stw	ra,48(sp)
   27298:	df000b15 	stw	fp,44(sp)
   2729c:	df000b04 	addi	fp,sp,44
   272a0:	e13ffc15 	stw	r4,-16(fp)
   272a4:	e17ffd15 	stw	r5,-12(fp)
   272a8:	e1bffe15 	stw	r6,-8(fp)
   272ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   272b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   272b4:	e0bffd17 	ldw	r2,-12(fp)
   272b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   272bc:	00003806 	br	273a0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   272c0:	e0bffc17 	ldw	r2,-16(fp)
   272c4:	10800c17 	ldw	r2,48(r2)
   272c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   272cc:	e0bffc17 	ldw	r2,-16(fp)
   272d0:	10800d17 	ldw	r2,52(r2)
   272d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   272d8:	e0fff817 	ldw	r3,-32(fp)
   272dc:	e0bff517 	ldw	r2,-44(fp)
   272e0:	1880062e 	bgeu	r3,r2,272fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   272e4:	e0fff517 	ldw	r3,-44(fp)
   272e8:	e0bff817 	ldw	r2,-32(fp)
   272ec:	1885c83a 	sub	r2,r3,r2
   272f0:	10bfffc4 	addi	r2,r2,-1
   272f4:	e0bff615 	stw	r2,-40(fp)
   272f8:	00000b06 	br	27328 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   272fc:	e0bff517 	ldw	r2,-44(fp)
   27300:	10000526 	beq	r2,zero,27318 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   27304:	00c20004 	movi	r3,2048
   27308:	e0bff817 	ldw	r2,-32(fp)
   2730c:	1885c83a 	sub	r2,r3,r2
   27310:	e0bff615 	stw	r2,-40(fp)
   27314:	00000406 	br	27328 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   27318:	00c1ffc4 	movi	r3,2047
   2731c:	e0bff817 	ldw	r2,-32(fp)
   27320:	1885c83a 	sub	r2,r3,r2
   27324:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   27328:	e0bff617 	ldw	r2,-40(fp)
   2732c:	1000011e 	bne	r2,zero,27334 <altera_avalon_jtag_uart_write+0xa4>
        break;
   27330:	00001d06 	br	273a8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   27334:	e0fffe17 	ldw	r3,-8(fp)
   27338:	e0bff617 	ldw	r2,-40(fp)
   2733c:	1880022e 	bgeu	r3,r2,27348 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   27340:	e0bffe17 	ldw	r2,-8(fp)
   27344:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   27348:	e0bff817 	ldw	r2,-32(fp)
   2734c:	10820e04 	addi	r2,r2,2104
   27350:	e0fffc17 	ldw	r3,-16(fp)
   27354:	1885883a 	add	r2,r3,r2
   27358:	1009883a 	mov	r4,r2
   2735c:	e17ffd17 	ldw	r5,-12(fp)
   27360:	e1bff617 	ldw	r6,-40(fp)
   27364:	00241900 	call	24190 <memcpy>
      ptr   += n;
   27368:	e0fffd17 	ldw	r3,-12(fp)
   2736c:	e0bff617 	ldw	r2,-40(fp)
   27370:	1885883a 	add	r2,r3,r2
   27374:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   27378:	e0fffe17 	ldw	r3,-8(fp)
   2737c:	e0bff617 	ldw	r2,-40(fp)
   27380:	1885c83a 	sub	r2,r3,r2
   27384:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   27388:	e0fff817 	ldw	r3,-32(fp)
   2738c:	e0bff617 	ldw	r2,-40(fp)
   27390:	1885883a 	add	r2,r3,r2
   27394:	10c1ffcc 	andi	r3,r2,2047
   27398:	e0bffc17 	ldw	r2,-16(fp)
   2739c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   273a0:	e0bffe17 	ldw	r2,-8(fp)
   273a4:	00bfc616 	blt	zero,r2,272c0 <__alt_data_end+0xf40272c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   273a8:	0005303a 	rdctl	r2,status
   273ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   273b0:	e0fffa17 	ldw	r3,-24(fp)
   273b4:	00bfff84 	movi	r2,-2
   273b8:	1884703a 	and	r2,r3,r2
   273bc:	1001703a 	wrctl	status,r2
  
  return context;
   273c0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   273c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   273c8:	e0bffc17 	ldw	r2,-16(fp)
   273cc:	10800817 	ldw	r2,32(r2)
   273d0:	10c00094 	ori	r3,r2,2
   273d4:	e0bffc17 	ldw	r2,-16(fp)
   273d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   273dc:	e0bffc17 	ldw	r2,-16(fp)
   273e0:	10800017 	ldw	r2,0(r2)
   273e4:	10800104 	addi	r2,r2,4
   273e8:	1007883a 	mov	r3,r2
   273ec:	e0bffc17 	ldw	r2,-16(fp)
   273f0:	10800817 	ldw	r2,32(r2)
   273f4:	18800035 	stwio	r2,0(r3)
   273f8:	e0bff917 	ldw	r2,-28(fp)
   273fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27400:	e0bffb17 	ldw	r2,-20(fp)
   27404:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   27408:	e0bffe17 	ldw	r2,-8(fp)
   2740c:	0080120e 	bge	zero,r2,27458 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   27410:	e0bfff17 	ldw	r2,-4(fp)
   27414:	1090000c 	andi	r2,r2,16384
   27418:	10000126 	beq	r2,zero,27420 <altera_avalon_jtag_uart_write+0x190>
        break;
   2741c:	00001006 	br	27460 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   27420:	0001883a 	nop
   27424:	e0bffc17 	ldw	r2,-16(fp)
   27428:	10c00d17 	ldw	r3,52(r2)
   2742c:	e0bff517 	ldw	r2,-44(fp)
   27430:	1880051e 	bne	r3,r2,27448 <altera_avalon_jtag_uart_write+0x1b8>
   27434:	e0bffc17 	ldw	r2,-16(fp)
   27438:	10c00917 	ldw	r3,36(r2)
   2743c:	e0bffc17 	ldw	r2,-16(fp)
   27440:	10800117 	ldw	r2,4(r2)
   27444:	18bff736 	bltu	r3,r2,27424 <__alt_data_end+0xf4027424>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   27448:	e0bffc17 	ldw	r2,-16(fp)
   2744c:	10800917 	ldw	r2,36(r2)
   27450:	10000126 	beq	r2,zero,27458 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   27454:	00000206 	br	27460 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   27458:	e0bffe17 	ldw	r2,-8(fp)
   2745c:	00bf9716 	blt	zero,r2,272bc <__alt_data_end+0xf40272bc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   27460:	e0fffd17 	ldw	r3,-12(fp)
   27464:	e0bff717 	ldw	r2,-36(fp)
   27468:	18800426 	beq	r3,r2,2747c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   2746c:	e0fffd17 	ldw	r3,-12(fp)
   27470:	e0bff717 	ldw	r2,-36(fp)
   27474:	1885c83a 	sub	r2,r3,r2
   27478:	00000606 	br	27494 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   2747c:	e0bfff17 	ldw	r2,-4(fp)
   27480:	1090000c 	andi	r2,r2,16384
   27484:	10000226 	beq	r2,zero,27490 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   27488:	00bffd44 	movi	r2,-11
   2748c:	00000106 	br	27494 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   27490:	00bffec4 	movi	r2,-5
}
   27494:	e037883a 	mov	sp,fp
   27498:	dfc00117 	ldw	ra,4(sp)
   2749c:	df000017 	ldw	fp,0(sp)
   274a0:	dec00204 	addi	sp,sp,8
   274a4:	f800283a 	ret

000274a8 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   274a8:	defffd04 	addi	sp,sp,-12
   274ac:	df000215 	stw	fp,8(sp)
   274b0:	df000204 	addi	fp,sp,8
   274b4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   274b8:	e0bfff17 	ldw	r2,-4(fp)
   274bc:	10800a17 	ldw	r2,40(r2)
   274c0:	10800104 	addi	r2,r2,4
   274c4:	10800037 	ldwio	r2,0(r2)
   274c8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   274cc:	e0bffe17 	ldw	r2,-8(fp)
   274d0:	10800054 	ori	r2,r2,1
   274d4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   274d8:	e0bfff17 	ldw	r2,-4(fp)
   274dc:	10800a17 	ldw	r2,40(r2)
   274e0:	10800104 	addi	r2,r2,4
   274e4:	1007883a 	mov	r3,r2
   274e8:	e0bffe17 	ldw	r2,-8(fp)
   274ec:	18800035 	stwio	r2,0(r3)
}
   274f0:	e037883a 	mov	sp,fp
   274f4:	df000017 	ldw	fp,0(sp)
   274f8:	dec00104 	addi	sp,sp,4
   274fc:	f800283a 	ret

00027500 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   27500:	defffd04 	addi	sp,sp,-12
   27504:	df000215 	stw	fp,8(sp)
   27508:	df000204 	addi	fp,sp,8
   2750c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   27510:	e0bfff17 	ldw	r2,-4(fp)
   27514:	10800a17 	ldw	r2,40(r2)
   27518:	10800104 	addi	r2,r2,4
   2751c:	10800037 	ldwio	r2,0(r2)
   27520:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   27524:	e0fffe17 	ldw	r3,-8(fp)
   27528:	00bfff84 	movi	r2,-2
   2752c:	1884703a 	and	r2,r3,r2
   27530:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   27534:	e0bfff17 	ldw	r2,-4(fp)
   27538:	10800a17 	ldw	r2,40(r2)
   2753c:	10800104 	addi	r2,r2,4
   27540:	1007883a 	mov	r3,r2
   27544:	e0bffe17 	ldw	r2,-8(fp)
   27548:	18800035 	stwio	r2,0(r3)
}
   2754c:	e037883a 	mov	sp,fp
   27550:	df000017 	ldw	fp,0(sp)
   27554:	dec00104 	addi	sp,sp,4
   27558:	f800283a 	ret

0002755c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   2755c:	defffd04 	addi	sp,sp,-12
   27560:	df000215 	stw	fp,8(sp)
   27564:	df000204 	addi	fp,sp,8
   27568:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   2756c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   27570:	e0bfff17 	ldw	r2,-4(fp)
   27574:	10800a17 	ldw	r2,40(r2)
   27578:	10800084 	addi	r2,r2,2
   2757c:	1080002b 	ldhuio	r2,0(r2)
   27580:	10bfffcc 	andi	r2,r2,65535
   27584:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   27588:	e0bffe0b 	ldhu	r2,-8(fp)
}
   2758c:	e037883a 	mov	sp,fp
   27590:	df000017 	ldw	fp,0(sp)
   27594:	dec00104 	addi	sp,sp,4
   27598:	f800283a 	ret

0002759c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   2759c:	defffd04 	addi	sp,sp,-12
   275a0:	df000215 	stw	fp,8(sp)
   275a4:	df000204 	addi	fp,sp,8
   275a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   275ac:	e0bfff17 	ldw	r2,-4(fp)
   275b0:	10800a17 	ldw	r2,40(r2)
   275b4:	10800104 	addi	r2,r2,4
   275b8:	10800037 	ldwio	r2,0(r2)
   275bc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   275c0:	e0bffe17 	ldw	r2,-8(fp)
   275c4:	1004d43a 	srli	r2,r2,16
}
   275c8:	e037883a 	mov	sp,fp
   275cc:	df000017 	ldw	fp,0(sp)
   275d0:	dec00104 	addi	sp,sp,4
   275d4:	f800283a 	ret

000275d8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   275d8:	defffd04 	addi	sp,sp,-12
   275dc:	df000215 	stw	fp,8(sp)
   275e0:	df000204 	addi	fp,sp,8
   275e4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   275e8:	e0bfff17 	ldw	r2,-4(fp)
   275ec:	1080800c 	andi	r2,r2,512
   275f0:	1004d27a 	srli	r2,r2,9
   275f4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   275f8:	e0bffe17 	ldw	r2,-8(fp)
   275fc:	10000226 	beq	r2,zero,27608 <alt_up_rs232_check_parity+0x30>
   27600:	00bfffc4 	movi	r2,-1
   27604:	00000106 	br	2760c <alt_up_rs232_check_parity+0x34>
   27608:	0005883a 	mov	r2,zero
}
   2760c:	e037883a 	mov	sp,fp
   27610:	df000017 	ldw	fp,0(sp)
   27614:	dec00104 	addi	sp,sp,4
   27618:	f800283a 	ret

0002761c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   2761c:	defffd04 	addi	sp,sp,-12
   27620:	df000215 	stw	fp,8(sp)
   27624:	df000204 	addi	fp,sp,8
   27628:	e13ffe15 	stw	r4,-8(fp)
   2762c:	2805883a 	mov	r2,r5
   27630:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   27634:	e0bffe17 	ldw	r2,-8(fp)
   27638:	10800a17 	ldw	r2,40(r2)
   2763c:	1007883a 	mov	r3,r2
   27640:	e0bfff03 	ldbu	r2,-4(fp)
   27644:	18800035 	stwio	r2,0(r3)
	return 0;
   27648:	0005883a 	mov	r2,zero
}
   2764c:	e037883a 	mov	sp,fp
   27650:	df000017 	ldw	fp,0(sp)
   27654:	dec00104 	addi	sp,sp,4
   27658:	f800283a 	ret

0002765c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   2765c:	defffa04 	addi	sp,sp,-24
   27660:	dfc00515 	stw	ra,20(sp)
   27664:	df000415 	stw	fp,16(sp)
   27668:	df000404 	addi	fp,sp,16
   2766c:	e13ffd15 	stw	r4,-12(fp)
   27670:	e17ffe15 	stw	r5,-8(fp)
   27674:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   27678:	e0bffd17 	ldw	r2,-12(fp)
   2767c:	10800a17 	ldw	r2,40(r2)
   27680:	10800037 	ldwio	r2,0(r2)
   27684:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   27688:	e0bffc17 	ldw	r2,-16(fp)
   2768c:	1007883a 	mov	r3,r2
   27690:	e0bffe17 	ldw	r2,-8(fp)
   27694:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   27698:	e13ffc17 	ldw	r4,-16(fp)
   2769c:	00275d80 	call	275d8 <alt_up_rs232_check_parity>
   276a0:	1007883a 	mov	r3,r2
   276a4:	e0bfff17 	ldw	r2,-4(fp)
   276a8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   276ac:	e0bffc17 	ldw	r2,-16(fp)
   276b0:	10a0000c 	andi	r2,r2,32768
   276b4:	1004d3fa 	srli	r2,r2,15
   276b8:	10bfffc4 	addi	r2,r2,-1
}
   276bc:	e037883a 	mov	sp,fp
   276c0:	dfc00117 	ldw	ra,4(sp)
   276c4:	df000017 	ldw	fp,0(sp)
   276c8:	dec00204 	addi	sp,sp,8
   276cc:	f800283a 	ret

000276d0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   276d0:	defff804 	addi	sp,sp,-32
   276d4:	dfc00715 	stw	ra,28(sp)
   276d8:	df000615 	stw	fp,24(sp)
   276dc:	df000604 	addi	fp,sp,24
   276e0:	e13ffd15 	stw	r4,-12(fp)
   276e4:	e17ffe15 	stw	r5,-8(fp)
   276e8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   276ec:	e0bffd17 	ldw	r2,-12(fp)
   276f0:	10800017 	ldw	r2,0(r2)
   276f4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   276f8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   276fc:	00000e06 	br	27738 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   27700:	e0bffe17 	ldw	r2,-8(fp)
   27704:	10c00044 	addi	r3,r2,1
   27708:	e0fffe15 	stw	r3,-8(fp)
   2770c:	e0fffc04 	addi	r3,fp,-16
   27710:	e13ffb17 	ldw	r4,-20(fp)
   27714:	100b883a 	mov	r5,r2
   27718:	180d883a 	mov	r6,r3
   2771c:	002765c0 	call	2765c <alt_up_rs232_read_data>
   27720:	1000041e 	bne	r2,zero,27734 <alt_up_rs232_read_fd+0x64>
			count++;
   27724:	e0bffa17 	ldw	r2,-24(fp)
   27728:	10800044 	addi	r2,r2,1
   2772c:	e0bffa15 	stw	r2,-24(fp)
   27730:	00000106 	br	27738 <alt_up_rs232_read_fd+0x68>
		else
			break;
   27734:	00000406 	br	27748 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   27738:	e0bfff17 	ldw	r2,-4(fp)
   2773c:	10ffffc4 	addi	r3,r2,-1
   27740:	e0ffff15 	stw	r3,-4(fp)
   27744:	103fee1e 	bne	r2,zero,27700 <__alt_data_end+0xf4027700>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   27748:	e0bffa17 	ldw	r2,-24(fp)
}
   2774c:	e037883a 	mov	sp,fp
   27750:	dfc00117 	ldw	ra,4(sp)
   27754:	df000017 	ldw	fp,0(sp)
   27758:	dec00204 	addi	sp,sp,8
   2775c:	f800283a 	ret

00027760 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   27760:	defff904 	addi	sp,sp,-28
   27764:	dfc00615 	stw	ra,24(sp)
   27768:	df000515 	stw	fp,20(sp)
   2776c:	df000504 	addi	fp,sp,20
   27770:	e13ffd15 	stw	r4,-12(fp)
   27774:	e17ffe15 	stw	r5,-8(fp)
   27778:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   2777c:	e0bffd17 	ldw	r2,-12(fp)
   27780:	10800017 	ldw	r2,0(r2)
   27784:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   27788:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   2778c:	00000f06 	br	277cc <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   27790:	e0bffe17 	ldw	r2,-8(fp)
   27794:	10800003 	ldbu	r2,0(r2)
   27798:	10803fcc 	andi	r2,r2,255
   2779c:	e13ffc17 	ldw	r4,-16(fp)
   277a0:	100b883a 	mov	r5,r2
   277a4:	002761c0 	call	2761c <alt_up_rs232_write_data>
   277a8:	1000071e 	bne	r2,zero,277c8 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   277ac:	e0bffb17 	ldw	r2,-20(fp)
   277b0:	10800044 	addi	r2,r2,1
   277b4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   277b8:	e0bffe17 	ldw	r2,-8(fp)
   277bc:	10800044 	addi	r2,r2,1
   277c0:	e0bffe15 	stw	r2,-8(fp)
   277c4:	00000106 	br	277cc <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   277c8:	00000406 	br	277dc <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   277cc:	e0bfff17 	ldw	r2,-4(fp)
   277d0:	10ffffc4 	addi	r3,r2,-1
   277d4:	e0ffff15 	stw	r3,-4(fp)
   277d8:	103fed1e 	bne	r2,zero,27790 <__alt_data_end+0xf4027790>
			ptr++;
		}
		else
			break;
	}
	return count;
   277dc:	e0bffb17 	ldw	r2,-20(fp)
}
   277e0:	e037883a 	mov	sp,fp
   277e4:	dfc00117 	ldw	ra,4(sp)
   277e8:	df000017 	ldw	fp,0(sp)
   277ec:	dec00204 	addi	sp,sp,8
   277f0:	f800283a 	ret

000277f4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   277f4:	defffc04 	addi	sp,sp,-16
   277f8:	dfc00315 	stw	ra,12(sp)
   277fc:	df000215 	stw	fp,8(sp)
   27800:	df000204 	addi	fp,sp,8
   27804:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   27808:	e13fff17 	ldw	r4,-4(fp)
   2780c:	01420034 	movhi	r5,2048
   27810:	29478904 	addi	r5,r5,7716
   27814:	0027b3c0 	call	27b3c <alt_find_dev>
   27818:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   2781c:	e0bffe17 	ldw	r2,-8(fp)
}
   27820:	e037883a 	mov	sp,fp
   27824:	dfc00117 	ldw	ra,4(sp)
   27828:	df000017 	ldw	fp,0(sp)
   2782c:	dec00204 	addi	sp,sp,8
   27830:	f800283a 	ret

00027834 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   27834:	defff504 	addi	sp,sp,-44
   27838:	df000a15 	stw	fp,40(sp)
   2783c:	df000a04 	addi	fp,sp,40
   27840:	e13ffc15 	stw	r4,-16(fp)
   27844:	e17ffd15 	stw	r5,-12(fp)
   27848:	e1bffe15 	stw	r6,-8(fp)
   2784c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   27850:	e03ff615 	stw	zero,-40(fp)
   27854:	00820034 	movhi	r2,2048
   27858:	10879e04 	addi	r2,r2,7800
   2785c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   27860:	10003f26 	beq	r2,zero,27960 <alt_alarm_start+0x12c>
  {
    if (alarm)
   27864:	e0bffc17 	ldw	r2,-16(fp)
   27868:	10003b26 	beq	r2,zero,27958 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   2786c:	e0bffc17 	ldw	r2,-16(fp)
   27870:	e0fffe17 	ldw	r3,-8(fp)
   27874:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   27878:	e0bffc17 	ldw	r2,-16(fp)
   2787c:	e0ffff17 	ldw	r3,-4(fp)
   27880:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27884:	0005303a 	rdctl	r2,status
   27888:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2788c:	e0fff817 	ldw	r3,-32(fp)
   27890:	00bfff84 	movi	r2,-2
   27894:	1884703a 	and	r2,r3,r2
   27898:	1001703a 	wrctl	status,r2
  
  return context;
   2789c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   278a0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   278a4:	00820034 	movhi	r2,2048
   278a8:	10879f04 	addi	r2,r2,7804
   278ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   278b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   278b4:	e0fffd17 	ldw	r3,-12(fp)
   278b8:	e0bff617 	ldw	r2,-40(fp)
   278bc:	1885883a 	add	r2,r3,r2
   278c0:	10c00044 	addi	r3,r2,1
   278c4:	e0bffc17 	ldw	r2,-16(fp)
   278c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   278cc:	e0bffc17 	ldw	r2,-16(fp)
   278d0:	10c00217 	ldw	r3,8(r2)
   278d4:	e0bff617 	ldw	r2,-40(fp)
   278d8:	1880042e 	bgeu	r3,r2,278ec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   278dc:	e0bffc17 	ldw	r2,-16(fp)
   278e0:	00c00044 	movi	r3,1
   278e4:	10c00405 	stb	r3,16(r2)
   278e8:	00000206 	br	278f4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   278ec:	e0bffc17 	ldw	r2,-16(fp)
   278f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   278f4:	e0fffc17 	ldw	r3,-16(fp)
   278f8:	00820034 	movhi	r2,2048
   278fc:	10878f04 	addi	r2,r2,7740
   27900:	e0bff915 	stw	r2,-28(fp)
   27904:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   27908:	e0bffa17 	ldw	r2,-24(fp)
   2790c:	e0fff917 	ldw	r3,-28(fp)
   27910:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   27914:	e0bff917 	ldw	r2,-28(fp)
   27918:	10c00017 	ldw	r3,0(r2)
   2791c:	e0bffa17 	ldw	r2,-24(fp)
   27920:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   27924:	e0bff917 	ldw	r2,-28(fp)
   27928:	10800017 	ldw	r2,0(r2)
   2792c:	e0fffa17 	ldw	r3,-24(fp)
   27930:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   27934:	e0bff917 	ldw	r2,-28(fp)
   27938:	e0fffa17 	ldw	r3,-24(fp)
   2793c:	10c00015 	stw	r3,0(r2)
   27940:	e0bff717 	ldw	r2,-36(fp)
   27944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27948:	e0bffb17 	ldw	r2,-20(fp)
   2794c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   27950:	0005883a 	mov	r2,zero
   27954:	00000306 	br	27964 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   27958:	00bffa84 	movi	r2,-22
   2795c:	00000106 	br	27964 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   27960:	00bfde84 	movi	r2,-134
  }
}
   27964:	e037883a 	mov	sp,fp
   27968:	df000017 	ldw	fp,0(sp)
   2796c:	dec00104 	addi	sp,sp,4
   27970:	f800283a 	ret

00027974 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   27974:	deffff04 	addi	sp,sp,-4
   27978:	df000015 	stw	fp,0(sp)
   2797c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   27980:	e037883a 	mov	sp,fp
   27984:	df000017 	ldw	fp,0(sp)
   27988:	dec00104 	addi	sp,sp,4
   2798c:	f800283a 	ret

00027990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27990:	defffe04 	addi	sp,sp,-8
   27994:	dfc00115 	stw	ra,4(sp)
   27998:	df000015 	stw	fp,0(sp)
   2799c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   279a0:	00820034 	movhi	r2,2048
   279a4:	10878c04 	addi	r2,r2,7728
   279a8:	10800017 	ldw	r2,0(r2)
   279ac:	10000526 	beq	r2,zero,279c4 <alt_get_errno+0x34>
   279b0:	00820034 	movhi	r2,2048
   279b4:	10878c04 	addi	r2,r2,7728
   279b8:	10800017 	ldw	r2,0(r2)
   279bc:	103ee83a 	callr	r2
   279c0:	00000206 	br	279cc <alt_get_errno+0x3c>
   279c4:	00820034 	movhi	r2,2048
   279c8:	10879904 	addi	r2,r2,7780
}
   279cc:	e037883a 	mov	sp,fp
   279d0:	dfc00117 	ldw	ra,4(sp)
   279d4:	df000017 	ldw	fp,0(sp)
   279d8:	dec00204 	addi	sp,sp,8
   279dc:	f800283a 	ret

000279e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   279e0:	defffa04 	addi	sp,sp,-24
   279e4:	dfc00515 	stw	ra,20(sp)
   279e8:	df000415 	stw	fp,16(sp)
   279ec:	df000404 	addi	fp,sp,16
   279f0:	e13ffe15 	stw	r4,-8(fp)
   279f4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   279f8:	e0bffe17 	ldw	r2,-8(fp)
   279fc:	10000326 	beq	r2,zero,27a0c <alt_dev_llist_insert+0x2c>
   27a00:	e0bffe17 	ldw	r2,-8(fp)
   27a04:	10800217 	ldw	r2,8(r2)
   27a08:	1000061e 	bne	r2,zero,27a24 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   27a0c:	00279900 	call	27990 <alt_get_errno>
   27a10:	1007883a 	mov	r3,r2
   27a14:	00800584 	movi	r2,22
   27a18:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   27a1c:	00bffa84 	movi	r2,-22
   27a20:	00001306 	br	27a70 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   27a24:	e0bffe17 	ldw	r2,-8(fp)
   27a28:	e0ffff17 	ldw	r3,-4(fp)
   27a2c:	e0fffc15 	stw	r3,-16(fp)
   27a30:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   27a34:	e0bffd17 	ldw	r2,-12(fp)
   27a38:	e0fffc17 	ldw	r3,-16(fp)
   27a3c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   27a40:	e0bffc17 	ldw	r2,-16(fp)
   27a44:	10c00017 	ldw	r3,0(r2)
   27a48:	e0bffd17 	ldw	r2,-12(fp)
   27a4c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   27a50:	e0bffc17 	ldw	r2,-16(fp)
   27a54:	10800017 	ldw	r2,0(r2)
   27a58:	e0fffd17 	ldw	r3,-12(fp)
   27a5c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   27a60:	e0bffc17 	ldw	r2,-16(fp)
   27a64:	e0fffd17 	ldw	r3,-12(fp)
   27a68:	10c00015 	stw	r3,0(r2)

  return 0;  
   27a6c:	0005883a 	mov	r2,zero
}
   27a70:	e037883a 	mov	sp,fp
   27a74:	dfc00117 	ldw	ra,4(sp)
   27a78:	df000017 	ldw	fp,0(sp)
   27a7c:	dec00204 	addi	sp,sp,8
   27a80:	f800283a 	ret

00027a84 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   27a84:	defffd04 	addi	sp,sp,-12
   27a88:	dfc00215 	stw	ra,8(sp)
   27a8c:	df000115 	stw	fp,4(sp)
   27a90:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   27a94:	008000f4 	movhi	r2,3
   27a98:	10a26004 	addi	r2,r2,-30336
   27a9c:	e0bfff15 	stw	r2,-4(fp)
   27aa0:	00000606 	br	27abc <_do_ctors+0x38>
        (*ctor) (); 
   27aa4:	e0bfff17 	ldw	r2,-4(fp)
   27aa8:	10800017 	ldw	r2,0(r2)
   27aac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   27ab0:	e0bfff17 	ldw	r2,-4(fp)
   27ab4:	10bfff04 	addi	r2,r2,-4
   27ab8:	e0bfff15 	stw	r2,-4(fp)
   27abc:	e0ffff17 	ldw	r3,-4(fp)
   27ac0:	008000f4 	movhi	r2,3
   27ac4:	10a26104 	addi	r2,r2,-30332
   27ac8:	18bff62e 	bgeu	r3,r2,27aa4 <__alt_data_end+0xf4027aa4>
        (*ctor) (); 
}
   27acc:	e037883a 	mov	sp,fp
   27ad0:	dfc00117 	ldw	ra,4(sp)
   27ad4:	df000017 	ldw	fp,0(sp)
   27ad8:	dec00204 	addi	sp,sp,8
   27adc:	f800283a 	ret

00027ae0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   27ae0:	defffd04 	addi	sp,sp,-12
   27ae4:	dfc00215 	stw	ra,8(sp)
   27ae8:	df000115 	stw	fp,4(sp)
   27aec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   27af0:	008000f4 	movhi	r2,3
   27af4:	10a26004 	addi	r2,r2,-30336
   27af8:	e0bfff15 	stw	r2,-4(fp)
   27afc:	00000606 	br	27b18 <_do_dtors+0x38>
        (*dtor) (); 
   27b00:	e0bfff17 	ldw	r2,-4(fp)
   27b04:	10800017 	ldw	r2,0(r2)
   27b08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   27b0c:	e0bfff17 	ldw	r2,-4(fp)
   27b10:	10bfff04 	addi	r2,r2,-4
   27b14:	e0bfff15 	stw	r2,-4(fp)
   27b18:	e0ffff17 	ldw	r3,-4(fp)
   27b1c:	008000f4 	movhi	r2,3
   27b20:	10a26104 	addi	r2,r2,-30332
   27b24:	18bff62e 	bgeu	r3,r2,27b00 <__alt_data_end+0xf4027b00>
        (*dtor) (); 
}
   27b28:	e037883a 	mov	sp,fp
   27b2c:	dfc00117 	ldw	ra,4(sp)
   27b30:	df000017 	ldw	fp,0(sp)
   27b34:	dec00204 	addi	sp,sp,8
   27b38:	f800283a 	ret

00027b3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   27b3c:	defffa04 	addi	sp,sp,-24
   27b40:	dfc00515 	stw	ra,20(sp)
   27b44:	df000415 	stw	fp,16(sp)
   27b48:	df000404 	addi	fp,sp,16
   27b4c:	e13ffe15 	stw	r4,-8(fp)
   27b50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   27b54:	e0bfff17 	ldw	r2,-4(fp)
   27b58:	10800017 	ldw	r2,0(r2)
   27b5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   27b60:	e13ffe17 	ldw	r4,-8(fp)
   27b64:	00237580 	call	23758 <strlen>
   27b68:	10800044 	addi	r2,r2,1
   27b6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   27b70:	00000d06 	br	27ba8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   27b74:	e0bffc17 	ldw	r2,-16(fp)
   27b78:	10c00217 	ldw	r3,8(r2)
   27b7c:	e0bffd17 	ldw	r2,-12(fp)
   27b80:	1809883a 	mov	r4,r3
   27b84:	e17ffe17 	ldw	r5,-8(fp)
   27b88:	100d883a 	mov	r6,r2
   27b8c:	00286200 	call	28620 <memcmp>
   27b90:	1000021e 	bne	r2,zero,27b9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   27b94:	e0bffc17 	ldw	r2,-16(fp)
   27b98:	00000706 	br	27bb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   27b9c:	e0bffc17 	ldw	r2,-16(fp)
   27ba0:	10800017 	ldw	r2,0(r2)
   27ba4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   27ba8:	e0fffc17 	ldw	r3,-16(fp)
   27bac:	e0bfff17 	ldw	r2,-4(fp)
   27bb0:	18bff01e 	bne	r3,r2,27b74 <__alt_data_end+0xf4027b74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   27bb4:	0005883a 	mov	r2,zero
}
   27bb8:	e037883a 	mov	sp,fp
   27bbc:	dfc00117 	ldw	ra,4(sp)
   27bc0:	df000017 	ldw	fp,0(sp)
   27bc4:	dec00204 	addi	sp,sp,8
   27bc8:	f800283a 	ret

00027bcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   27bcc:	deffff04 	addi	sp,sp,-4
   27bd0:	df000015 	stw	fp,0(sp)
   27bd4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   27bd8:	e037883a 	mov	sp,fp
   27bdc:	df000017 	ldw	fp,0(sp)
   27be0:	dec00104 	addi	sp,sp,4
   27be4:	f800283a 	ret

00027be8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   27be8:	defff804 	addi	sp,sp,-32
   27bec:	dfc00715 	stw	ra,28(sp)
   27bf0:	df000615 	stw	fp,24(sp)
   27bf4:	dc000515 	stw	r16,20(sp)
   27bf8:	df000604 	addi	fp,sp,24
   27bfc:	e13ffb15 	stw	r4,-20(fp)
   27c00:	e17ffc15 	stw	r5,-16(fp)
   27c04:	e1bffd15 	stw	r6,-12(fp)
   27c08:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   27c0c:	e13ffc17 	ldw	r4,-16(fp)
   27c10:	e17ffd17 	ldw	r5,-12(fp)
   27c14:	e1bffe17 	ldw	r6,-8(fp)
   27c18:	00280340 	call	28034 <open>
   27c1c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   27c20:	e0bffa17 	ldw	r2,-24(fp)
   27c24:	10002216 	blt	r2,zero,27cb0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   27c28:	04020034 	movhi	r16,2048
   27c2c:	8402e704 	addi	r16,r16,2972
   27c30:	e0bffa17 	ldw	r2,-24(fp)
   27c34:	1009883a 	mov	r4,r2
   27c38:	01400304 	movi	r5,12
   27c3c:	00224200 	call	22420 <__mulsi3>
   27c40:	8085883a 	add	r2,r16,r2
   27c44:	10c00017 	ldw	r3,0(r2)
   27c48:	e0bffb17 	ldw	r2,-20(fp)
   27c4c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   27c50:	04020034 	movhi	r16,2048
   27c54:	8402e704 	addi	r16,r16,2972
   27c58:	e0bffa17 	ldw	r2,-24(fp)
   27c5c:	1009883a 	mov	r4,r2
   27c60:	01400304 	movi	r5,12
   27c64:	00224200 	call	22420 <__mulsi3>
   27c68:	8085883a 	add	r2,r16,r2
   27c6c:	10800104 	addi	r2,r2,4
   27c70:	10c00017 	ldw	r3,0(r2)
   27c74:	e0bffb17 	ldw	r2,-20(fp)
   27c78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   27c7c:	04020034 	movhi	r16,2048
   27c80:	8402e704 	addi	r16,r16,2972
   27c84:	e0bffa17 	ldw	r2,-24(fp)
   27c88:	1009883a 	mov	r4,r2
   27c8c:	01400304 	movi	r5,12
   27c90:	00224200 	call	22420 <__mulsi3>
   27c94:	8085883a 	add	r2,r16,r2
   27c98:	10800204 	addi	r2,r2,8
   27c9c:	10c00017 	ldw	r3,0(r2)
   27ca0:	e0bffb17 	ldw	r2,-20(fp)
   27ca4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   27ca8:	e13ffa17 	ldw	r4,-24(fp)
   27cac:	00267180 	call	26718 <alt_release_fd>
  }
} 
   27cb0:	e6ffff04 	addi	sp,fp,-4
   27cb4:	dfc00217 	ldw	ra,8(sp)
   27cb8:	df000117 	ldw	fp,4(sp)
   27cbc:	dc000017 	ldw	r16,0(sp)
   27cc0:	dec00304 	addi	sp,sp,12
   27cc4:	f800283a 	ret

00027cc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   27cc8:	defffb04 	addi	sp,sp,-20
   27ccc:	dfc00415 	stw	ra,16(sp)
   27cd0:	df000315 	stw	fp,12(sp)
   27cd4:	df000304 	addi	fp,sp,12
   27cd8:	e13ffd15 	stw	r4,-12(fp)
   27cdc:	e17ffe15 	stw	r5,-8(fp)
   27ce0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   27ce4:	01020034 	movhi	r4,2048
   27ce8:	2102ea04 	addi	r4,r4,2984
   27cec:	e17ffd17 	ldw	r5,-12(fp)
   27cf0:	01800044 	movi	r6,1
   27cf4:	01c07fc4 	movi	r7,511
   27cf8:	0027be80 	call	27be8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   27cfc:	01020034 	movhi	r4,2048
   27d00:	2102e704 	addi	r4,r4,2972
   27d04:	e17ffe17 	ldw	r5,-8(fp)
   27d08:	000d883a 	mov	r6,zero
   27d0c:	01c07fc4 	movi	r7,511
   27d10:	0027be80 	call	27be8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   27d14:	01020034 	movhi	r4,2048
   27d18:	2102ed04 	addi	r4,r4,2996
   27d1c:	e17fff17 	ldw	r5,-4(fp)
   27d20:	01800044 	movi	r6,1
   27d24:	01c07fc4 	movi	r7,511
   27d28:	0027be80 	call	27be8 <alt_open_fd>
}  
   27d2c:	e037883a 	mov	sp,fp
   27d30:	dfc00117 	ldw	ra,4(sp)
   27d34:	df000017 	ldw	fp,0(sp)
   27d38:	dec00204 	addi	sp,sp,8
   27d3c:	f800283a 	ret

00027d40 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   27d40:	defff004 	addi	sp,sp,-64
   27d44:	df000f15 	stw	fp,60(sp)
   27d48:	df000f04 	addi	fp,sp,60
   27d4c:	e13ffd15 	stw	r4,-12(fp)
   27d50:	e17ffe15 	stw	r5,-8(fp)
   27d54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   27d58:	00bffa84 	movi	r2,-22
   27d5c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   27d60:	e0bffd17 	ldw	r2,-12(fp)
   27d64:	10800828 	cmpgeui	r2,r2,32
   27d68:	10005c1e 	bne	r2,zero,27edc <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27d6c:	0005303a 	rdctl	r2,status
   27d70:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27d74:	e0fff317 	ldw	r3,-52(fp)
   27d78:	00bfff84 	movi	r2,-2
   27d7c:	1884703a 	and	r2,r3,r2
   27d80:	1001703a 	wrctl	status,r2
  
  return context;
   27d84:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   27d88:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   27d8c:	00820034 	movhi	r2,2048
   27d90:	1089eb04 	addi	r2,r2,10156
   27d94:	e0fffd17 	ldw	r3,-12(fp)
   27d98:	180690fa 	slli	r3,r3,3
   27d9c:	10c5883a 	add	r2,r2,r3
   27da0:	e0ffff17 	ldw	r3,-4(fp)
   27da4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   27da8:	00820034 	movhi	r2,2048
   27dac:	1089eb04 	addi	r2,r2,10156
   27db0:	e0fffd17 	ldw	r3,-12(fp)
   27db4:	180690fa 	slli	r3,r3,3
   27db8:	10c5883a 	add	r2,r2,r3
   27dbc:	10800104 	addi	r2,r2,4
   27dc0:	e0fffe17 	ldw	r3,-8(fp)
   27dc4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   27dc8:	e0bfff17 	ldw	r2,-4(fp)
   27dcc:	10001f26 	beq	r2,zero,27e4c <alt_irq_register+0x10c>
   27dd0:	e0bffd17 	ldw	r2,-12(fp)
   27dd4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27dd8:	0005303a 	rdctl	r2,status
   27ddc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27de0:	e0fff517 	ldw	r3,-44(fp)
   27de4:	00bfff84 	movi	r2,-2
   27de8:	1884703a 	and	r2,r3,r2
   27dec:	1001703a 	wrctl	status,r2
  
  return context;
   27df0:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   27df4:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   27df8:	e0bff417 	ldw	r2,-48(fp)
   27dfc:	00c00044 	movi	r3,1
   27e00:	1884983a 	sll	r2,r3,r2
   27e04:	1007883a 	mov	r3,r2
   27e08:	00820034 	movhi	r2,2048
   27e0c:	10879d04 	addi	r2,r2,7796
   27e10:	10800017 	ldw	r2,0(r2)
   27e14:	1886b03a 	or	r3,r3,r2
   27e18:	00820034 	movhi	r2,2048
   27e1c:	10879d04 	addi	r2,r2,7796
   27e20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   27e24:	00820034 	movhi	r2,2048
   27e28:	10879d04 	addi	r2,r2,7796
   27e2c:	10800017 	ldw	r2,0(r2)
   27e30:	100170fa 	wrctl	ienable,r2
   27e34:	e0bff617 	ldw	r2,-40(fp)
   27e38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27e3c:	e0bff717 	ldw	r2,-36(fp)
   27e40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   27e44:	0005883a 	mov	r2,zero
   27e48:	00001f06 	br	27ec8 <alt_irq_register+0x188>
   27e4c:	e0bffd17 	ldw	r2,-12(fp)
   27e50:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   27e54:	0005303a 	rdctl	r2,status
   27e58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   27e5c:	e0fff917 	ldw	r3,-28(fp)
   27e60:	00bfff84 	movi	r2,-2
   27e64:	1884703a 	and	r2,r3,r2
   27e68:	1001703a 	wrctl	status,r2
  
  return context;
   27e6c:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   27e70:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   27e74:	e0bff817 	ldw	r2,-32(fp)
   27e78:	00c00044 	movi	r3,1
   27e7c:	1884983a 	sll	r2,r3,r2
   27e80:	0084303a 	nor	r2,zero,r2
   27e84:	1007883a 	mov	r3,r2
   27e88:	00820034 	movhi	r2,2048
   27e8c:	10879d04 	addi	r2,r2,7796
   27e90:	10800017 	ldw	r2,0(r2)
   27e94:	1886703a 	and	r3,r3,r2
   27e98:	00820034 	movhi	r2,2048
   27e9c:	10879d04 	addi	r2,r2,7796
   27ea0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   27ea4:	00820034 	movhi	r2,2048
   27ea8:	10879d04 	addi	r2,r2,7796
   27eac:	10800017 	ldw	r2,0(r2)
   27eb0:	100170fa 	wrctl	ienable,r2
   27eb4:	e0bffa17 	ldw	r2,-24(fp)
   27eb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   27ebc:	e0bffb17 	ldw	r2,-20(fp)
   27ec0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   27ec4:	0005883a 	mov	r2,zero
   27ec8:	e0bff115 	stw	r2,-60(fp)
   27ecc:	e0bff217 	ldw	r2,-56(fp)
   27ed0:	e0bffc15 	stw	r2,-16(fp)
   27ed4:	e0bffc17 	ldw	r2,-16(fp)
   27ed8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   27edc:	e0bff117 	ldw	r2,-60(fp)
}
   27ee0:	e037883a 	mov	sp,fp
   27ee4:	df000017 	ldw	fp,0(sp)
   27ee8:	dec00104 	addi	sp,sp,4
   27eec:	f800283a 	ret

00027ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   27ef0:	defffe04 	addi	sp,sp,-8
   27ef4:	dfc00115 	stw	ra,4(sp)
   27ef8:	df000015 	stw	fp,0(sp)
   27efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   27f00:	00820034 	movhi	r2,2048
   27f04:	10878c04 	addi	r2,r2,7728
   27f08:	10800017 	ldw	r2,0(r2)
   27f0c:	10000526 	beq	r2,zero,27f24 <alt_get_errno+0x34>
   27f10:	00820034 	movhi	r2,2048
   27f14:	10878c04 	addi	r2,r2,7728
   27f18:	10800017 	ldw	r2,0(r2)
   27f1c:	103ee83a 	callr	r2
   27f20:	00000206 	br	27f2c <alt_get_errno+0x3c>
   27f24:	00820034 	movhi	r2,2048
   27f28:	10879904 	addi	r2,r2,7780
}
   27f2c:	e037883a 	mov	sp,fp
   27f30:	dfc00117 	ldw	ra,4(sp)
   27f34:	df000017 	ldw	fp,0(sp)
   27f38:	dec00204 	addi	sp,sp,8
   27f3c:	f800283a 	ret

00027f40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   27f40:	defffb04 	addi	sp,sp,-20
   27f44:	dfc00415 	stw	ra,16(sp)
   27f48:	df000315 	stw	fp,12(sp)
   27f4c:	dc000215 	stw	r16,8(sp)
   27f50:	df000304 	addi	fp,sp,12
   27f54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   27f58:	e0bffe17 	ldw	r2,-8(fp)
   27f5c:	10800217 	ldw	r2,8(r2)
   27f60:	10d00034 	orhi	r3,r2,16384
   27f64:	e0bffe17 	ldw	r2,-8(fp)
   27f68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   27f6c:	e03ffd15 	stw	zero,-12(fp)
   27f70:	00002306 	br	28000 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   27f74:	04020034 	movhi	r16,2048
   27f78:	8402e704 	addi	r16,r16,2972
   27f7c:	e0bffd17 	ldw	r2,-12(fp)
   27f80:	1009883a 	mov	r4,r2
   27f84:	01400304 	movi	r5,12
   27f88:	00224200 	call	22420 <__mulsi3>
   27f8c:	8085883a 	add	r2,r16,r2
   27f90:	10c00017 	ldw	r3,0(r2)
   27f94:	e0bffe17 	ldw	r2,-8(fp)
   27f98:	10800017 	ldw	r2,0(r2)
   27f9c:	1880151e 	bne	r3,r2,27ff4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   27fa0:	04020034 	movhi	r16,2048
   27fa4:	8402e704 	addi	r16,r16,2972
   27fa8:	e0bffd17 	ldw	r2,-12(fp)
   27fac:	1009883a 	mov	r4,r2
   27fb0:	01400304 	movi	r5,12
   27fb4:	00224200 	call	22420 <__mulsi3>
   27fb8:	8085883a 	add	r2,r16,r2
   27fbc:	10800204 	addi	r2,r2,8
   27fc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   27fc4:	10000b0e 	bge	r2,zero,27ff4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   27fc8:	e13ffd17 	ldw	r4,-12(fp)
   27fcc:	01400304 	movi	r5,12
   27fd0:	00224200 	call	22420 <__mulsi3>
   27fd4:	1007883a 	mov	r3,r2
   27fd8:	00820034 	movhi	r2,2048
   27fdc:	1082e704 	addi	r2,r2,2972
   27fe0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   27fe4:	e0bffe17 	ldw	r2,-8(fp)
   27fe8:	18800226 	beq	r3,r2,27ff4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   27fec:	00bffcc4 	movi	r2,-13
   27ff0:	00000a06 	br	2801c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   27ff4:	e0bffd17 	ldw	r2,-12(fp)
   27ff8:	10800044 	addi	r2,r2,1
   27ffc:	e0bffd15 	stw	r2,-12(fp)
   28000:	00820034 	movhi	r2,2048
   28004:	10878b04 	addi	r2,r2,7724
   28008:	10800017 	ldw	r2,0(r2)
   2800c:	1007883a 	mov	r3,r2
   28010:	e0bffd17 	ldw	r2,-12(fp)
   28014:	18bfd72e 	bgeu	r3,r2,27f74 <__alt_data_end+0xf4027f74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   28018:	0005883a 	mov	r2,zero
}
   2801c:	e6ffff04 	addi	sp,fp,-4
   28020:	dfc00217 	ldw	ra,8(sp)
   28024:	df000117 	ldw	fp,4(sp)
   28028:	dc000017 	ldw	r16,0(sp)
   2802c:	dec00304 	addi	sp,sp,12
   28030:	f800283a 	ret

00028034 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   28034:	defff604 	addi	sp,sp,-40
   28038:	dfc00915 	stw	ra,36(sp)
   2803c:	df000815 	stw	fp,32(sp)
   28040:	df000804 	addi	fp,sp,32
   28044:	e13ffd15 	stw	r4,-12(fp)
   28048:	e17ffe15 	stw	r5,-8(fp)
   2804c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   28050:	00bfffc4 	movi	r2,-1
   28054:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   28058:	00bffb44 	movi	r2,-19
   2805c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   28060:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   28064:	e13ffd17 	ldw	r4,-12(fp)
   28068:	01420034 	movhi	r5,2048
   2806c:	29478904 	addi	r5,r5,7716
   28070:	0027b3c0 	call	27b3c <alt_find_dev>
   28074:	e0bff815 	stw	r2,-32(fp)
   28078:	e0bff817 	ldw	r2,-32(fp)
   2807c:	1000051e 	bne	r2,zero,28094 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   28080:	e13ffd17 	ldw	r4,-12(fp)
   28084:	00283500 	call	28350 <alt_find_file>
   28088:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2808c:	00800044 	movi	r2,1
   28090:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   28094:	e0bff817 	ldw	r2,-32(fp)
   28098:	10002b26 	beq	r2,zero,28148 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2809c:	e13ff817 	ldw	r4,-32(fp)
   280a0:	00284640 	call	28464 <alt_get_fd>
   280a4:	e0bff915 	stw	r2,-28(fp)
   280a8:	e0bff917 	ldw	r2,-28(fp)
   280ac:	1000030e 	bge	r2,zero,280bc <open+0x88>
    {
      status = index;
   280b0:	e0bff917 	ldw	r2,-28(fp)
   280b4:	e0bffa15 	stw	r2,-24(fp)
   280b8:	00002506 	br	28150 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   280bc:	e13ff917 	ldw	r4,-28(fp)
   280c0:	01400304 	movi	r5,12
   280c4:	00224200 	call	22420 <__mulsi3>
   280c8:	1007883a 	mov	r3,r2
   280cc:	00820034 	movhi	r2,2048
   280d0:	1082e704 	addi	r2,r2,2972
   280d4:	1885883a 	add	r2,r3,r2
   280d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   280dc:	e0fffe17 	ldw	r3,-8(fp)
   280e0:	00900034 	movhi	r2,16384
   280e4:	10bfffc4 	addi	r2,r2,-1
   280e8:	1886703a 	and	r3,r3,r2
   280ec:	e0bffc17 	ldw	r2,-16(fp)
   280f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   280f4:	e0bffb17 	ldw	r2,-20(fp)
   280f8:	1000051e 	bne	r2,zero,28110 <open+0xdc>
   280fc:	e13ffc17 	ldw	r4,-16(fp)
   28100:	0027f400 	call	27f40 <alt_file_locked>
   28104:	e0bffa15 	stw	r2,-24(fp)
   28108:	e0bffa17 	ldw	r2,-24(fp)
   2810c:	10001016 	blt	r2,zero,28150 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   28110:	e0bff817 	ldw	r2,-32(fp)
   28114:	10800317 	ldw	r2,12(r2)
   28118:	10000826 	beq	r2,zero,2813c <open+0x108>
   2811c:	e0bff817 	ldw	r2,-32(fp)
   28120:	10800317 	ldw	r2,12(r2)
   28124:	e13ffc17 	ldw	r4,-16(fp)
   28128:	e17ffd17 	ldw	r5,-12(fp)
   2812c:	e1bffe17 	ldw	r6,-8(fp)
   28130:	e1ffff17 	ldw	r7,-4(fp)
   28134:	103ee83a 	callr	r2
   28138:	00000106 	br	28140 <open+0x10c>
   2813c:	0005883a 	mov	r2,zero
   28140:	e0bffa15 	stw	r2,-24(fp)
   28144:	00000206 	br	28150 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   28148:	00bffb44 	movi	r2,-19
   2814c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   28150:	e0bffa17 	ldw	r2,-24(fp)
   28154:	1000090e 	bge	r2,zero,2817c <open+0x148>
  {
    alt_release_fd (index);  
   28158:	e13ff917 	ldw	r4,-28(fp)
   2815c:	00267180 	call	26718 <alt_release_fd>
    ALT_ERRNO = -status;
   28160:	0027ef00 	call	27ef0 <alt_get_errno>
   28164:	1007883a 	mov	r3,r2
   28168:	e0bffa17 	ldw	r2,-24(fp)
   2816c:	0085c83a 	sub	r2,zero,r2
   28170:	18800015 	stw	r2,0(r3)
    return -1;
   28174:	00bfffc4 	movi	r2,-1
   28178:	00000106 	br	28180 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   2817c:	e0bff917 	ldw	r2,-28(fp)
}
   28180:	e037883a 	mov	sp,fp
   28184:	dfc00117 	ldw	ra,4(sp)
   28188:	df000017 	ldw	fp,0(sp)
   2818c:	dec00204 	addi	sp,sp,8
   28190:	f800283a 	ret

00028194 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   28194:	defffa04 	addi	sp,sp,-24
   28198:	df000515 	stw	fp,20(sp)
   2819c:	df000504 	addi	fp,sp,20
   281a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   281a4:	0005303a 	rdctl	r2,status
   281a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   281ac:	e0fffc17 	ldw	r3,-16(fp)
   281b0:	00bfff84 	movi	r2,-2
   281b4:	1884703a 	and	r2,r3,r2
   281b8:	1001703a 	wrctl	status,r2
  
  return context;
   281bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   281c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   281c4:	e0bfff17 	ldw	r2,-4(fp)
   281c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   281cc:	e0bffd17 	ldw	r2,-12(fp)
   281d0:	10800017 	ldw	r2,0(r2)
   281d4:	e0fffd17 	ldw	r3,-12(fp)
   281d8:	18c00117 	ldw	r3,4(r3)
   281dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   281e0:	e0bffd17 	ldw	r2,-12(fp)
   281e4:	10800117 	ldw	r2,4(r2)
   281e8:	e0fffd17 	ldw	r3,-12(fp)
   281ec:	18c00017 	ldw	r3,0(r3)
   281f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   281f4:	e0bffd17 	ldw	r2,-12(fp)
   281f8:	e0fffd17 	ldw	r3,-12(fp)
   281fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   28200:	e0bffd17 	ldw	r2,-12(fp)
   28204:	e0fffd17 	ldw	r3,-12(fp)
   28208:	10c00015 	stw	r3,0(r2)
   2820c:	e0bffb17 	ldw	r2,-20(fp)
   28210:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   28214:	e0bffe17 	ldw	r2,-8(fp)
   28218:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2821c:	e037883a 	mov	sp,fp
   28220:	df000017 	ldw	fp,0(sp)
   28224:	dec00104 	addi	sp,sp,4
   28228:	f800283a 	ret

0002822c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2822c:	defffb04 	addi	sp,sp,-20
   28230:	dfc00415 	stw	ra,16(sp)
   28234:	df000315 	stw	fp,12(sp)
   28238:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2823c:	d0a01a17 	ldw	r2,-32664(gp)
   28240:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   28244:	d0a02a17 	ldw	r2,-32600(gp)
   28248:	10800044 	addi	r2,r2,1
   2824c:	d0a02a15 	stw	r2,-32600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   28250:	00002e06 	br	2830c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   28254:	e0bffd17 	ldw	r2,-12(fp)
   28258:	10800017 	ldw	r2,0(r2)
   2825c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   28260:	e0bffd17 	ldw	r2,-12(fp)
   28264:	10800403 	ldbu	r2,16(r2)
   28268:	10803fcc 	andi	r2,r2,255
   2826c:	10000426 	beq	r2,zero,28280 <alt_tick+0x54>
   28270:	d0a02a17 	ldw	r2,-32600(gp)
   28274:	1000021e 	bne	r2,zero,28280 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   28278:	e0bffd17 	ldw	r2,-12(fp)
   2827c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   28280:	e0bffd17 	ldw	r2,-12(fp)
   28284:	10800217 	ldw	r2,8(r2)
   28288:	d0e02a17 	ldw	r3,-32600(gp)
   2828c:	18801d36 	bltu	r3,r2,28304 <alt_tick+0xd8>
   28290:	e0bffd17 	ldw	r2,-12(fp)
   28294:	10800403 	ldbu	r2,16(r2)
   28298:	10803fcc 	andi	r2,r2,255
   2829c:	1000191e 	bne	r2,zero,28304 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   282a0:	e0bffd17 	ldw	r2,-12(fp)
   282a4:	10800317 	ldw	r2,12(r2)
   282a8:	e0fffd17 	ldw	r3,-12(fp)
   282ac:	18c00517 	ldw	r3,20(r3)
   282b0:	1809883a 	mov	r4,r3
   282b4:	103ee83a 	callr	r2
   282b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   282bc:	e0bfff17 	ldw	r2,-4(fp)
   282c0:	1000031e 	bne	r2,zero,282d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   282c4:	e13ffd17 	ldw	r4,-12(fp)
   282c8:	00281940 	call	28194 <alt_alarm_stop>
   282cc:	00000d06 	br	28304 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   282d0:	e0bffd17 	ldw	r2,-12(fp)
   282d4:	10c00217 	ldw	r3,8(r2)
   282d8:	e0bfff17 	ldw	r2,-4(fp)
   282dc:	1887883a 	add	r3,r3,r2
   282e0:	e0bffd17 	ldw	r2,-12(fp)
   282e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   282e8:	e0bffd17 	ldw	r2,-12(fp)
   282ec:	10c00217 	ldw	r3,8(r2)
   282f0:	d0a02a17 	ldw	r2,-32600(gp)
   282f4:	1880032e 	bgeu	r3,r2,28304 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   282f8:	e0bffd17 	ldw	r2,-12(fp)
   282fc:	00c00044 	movi	r3,1
   28300:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   28304:	e0bffe17 	ldw	r2,-8(fp)
   28308:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2830c:	e0fffd17 	ldw	r3,-12(fp)
   28310:	d0a01a04 	addi	r2,gp,-32664
   28314:	18bfcf1e 	bne	r3,r2,28254 <__alt_data_end+0xf4028254>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   28318:	0001883a 	nop
}
   2831c:	e037883a 	mov	sp,fp
   28320:	dfc00117 	ldw	ra,4(sp)
   28324:	df000017 	ldw	fp,0(sp)
   28328:	dec00204 	addi	sp,sp,8
   2832c:	f800283a 	ret

00028330 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   28330:	deffff04 	addi	sp,sp,-4
   28334:	df000015 	stw	fp,0(sp)
   28338:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2833c:	000170fa 	wrctl	ienable,zero
}
   28340:	e037883a 	mov	sp,fp
   28344:	df000017 	ldw	fp,0(sp)
   28348:	dec00104 	addi	sp,sp,4
   2834c:	f800283a 	ret

00028350 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   28350:	defffb04 	addi	sp,sp,-20
   28354:	dfc00415 	stw	ra,16(sp)
   28358:	df000315 	stw	fp,12(sp)
   2835c:	df000304 	addi	fp,sp,12
   28360:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   28364:	00820034 	movhi	r2,2048
   28368:	10878704 	addi	r2,r2,7708
   2836c:	10800017 	ldw	r2,0(r2)
   28370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   28374:	00003106 	br	2843c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   28378:	e0bffd17 	ldw	r2,-12(fp)
   2837c:	10800217 	ldw	r2,8(r2)
   28380:	1009883a 	mov	r4,r2
   28384:	00237580 	call	23758 <strlen>
   28388:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2838c:	e0bffd17 	ldw	r2,-12(fp)
   28390:	10c00217 	ldw	r3,8(r2)
   28394:	e0bffe17 	ldw	r2,-8(fp)
   28398:	10bfffc4 	addi	r2,r2,-1
   2839c:	1885883a 	add	r2,r3,r2
   283a0:	10800003 	ldbu	r2,0(r2)
   283a4:	10803fcc 	andi	r2,r2,255
   283a8:	1080201c 	xori	r2,r2,128
   283ac:	10bfe004 	addi	r2,r2,-128
   283b0:	10800bd8 	cmpnei	r2,r2,47
   283b4:	1000031e 	bne	r2,zero,283c4 <alt_find_file+0x74>
    {
      len -= 1;
   283b8:	e0bffe17 	ldw	r2,-8(fp)
   283bc:	10bfffc4 	addi	r2,r2,-1
   283c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   283c4:	e0bffe17 	ldw	r2,-8(fp)
   283c8:	e0ffff17 	ldw	r3,-4(fp)
   283cc:	1885883a 	add	r2,r3,r2
   283d0:	10800003 	ldbu	r2,0(r2)
   283d4:	10803fcc 	andi	r2,r2,255
   283d8:	1080201c 	xori	r2,r2,128
   283dc:	10bfe004 	addi	r2,r2,-128
   283e0:	10800be0 	cmpeqi	r2,r2,47
   283e4:	1000081e 	bne	r2,zero,28408 <alt_find_file+0xb8>
   283e8:	e0bffe17 	ldw	r2,-8(fp)
   283ec:	e0ffff17 	ldw	r3,-4(fp)
   283f0:	1885883a 	add	r2,r3,r2
   283f4:	10800003 	ldbu	r2,0(r2)
   283f8:	10803fcc 	andi	r2,r2,255
   283fc:	1080201c 	xori	r2,r2,128
   28400:	10bfe004 	addi	r2,r2,-128
   28404:	10000a1e 	bne	r2,zero,28430 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   28408:	e0bffd17 	ldw	r2,-12(fp)
   2840c:	10c00217 	ldw	r3,8(r2)
   28410:	e0bffe17 	ldw	r2,-8(fp)
   28414:	1809883a 	mov	r4,r3
   28418:	e17fff17 	ldw	r5,-4(fp)
   2841c:	100d883a 	mov	r6,r2
   28420:	00286200 	call	28620 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   28424:	1000021e 	bne	r2,zero,28430 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   28428:	e0bffd17 	ldw	r2,-12(fp)
   2842c:	00000806 	br	28450 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   28430:	e0bffd17 	ldw	r2,-12(fp)
   28434:	10800017 	ldw	r2,0(r2)
   28438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2843c:	e0fffd17 	ldw	r3,-12(fp)
   28440:	00820034 	movhi	r2,2048
   28444:	10878704 	addi	r2,r2,7708
   28448:	18bfcb1e 	bne	r3,r2,28378 <__alt_data_end+0xf4028378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2844c:	0005883a 	mov	r2,zero
}
   28450:	e037883a 	mov	sp,fp
   28454:	dfc00117 	ldw	ra,4(sp)
   28458:	df000017 	ldw	fp,0(sp)
   2845c:	dec00204 	addi	sp,sp,8
   28460:	f800283a 	ret

00028464 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   28464:	defffa04 	addi	sp,sp,-24
   28468:	dfc00515 	stw	ra,20(sp)
   2846c:	df000415 	stw	fp,16(sp)
   28470:	dc000315 	stw	r16,12(sp)
   28474:	df000404 	addi	fp,sp,16
   28478:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   2847c:	00bffa04 	movi	r2,-24
   28480:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   28484:	e03ffc15 	stw	zero,-16(fp)
   28488:	00002106 	br	28510 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   2848c:	04020034 	movhi	r16,2048
   28490:	8402e704 	addi	r16,r16,2972
   28494:	e0bffc17 	ldw	r2,-16(fp)
   28498:	1009883a 	mov	r4,r2
   2849c:	01400304 	movi	r5,12
   284a0:	00224200 	call	22420 <__mulsi3>
   284a4:	8085883a 	add	r2,r16,r2
   284a8:	10800017 	ldw	r2,0(r2)
   284ac:	1000151e 	bne	r2,zero,28504 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   284b0:	04020034 	movhi	r16,2048
   284b4:	8402e704 	addi	r16,r16,2972
   284b8:	e0bffc17 	ldw	r2,-16(fp)
   284bc:	1009883a 	mov	r4,r2
   284c0:	01400304 	movi	r5,12
   284c4:	00224200 	call	22420 <__mulsi3>
   284c8:	8085883a 	add	r2,r16,r2
   284cc:	e0fffe17 	ldw	r3,-8(fp)
   284d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   284d4:	00820034 	movhi	r2,2048
   284d8:	10878b04 	addi	r2,r2,7724
   284dc:	10c00017 	ldw	r3,0(r2)
   284e0:	e0bffc17 	ldw	r2,-16(fp)
   284e4:	1880040e 	bge	r3,r2,284f8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   284e8:	00820034 	movhi	r2,2048
   284ec:	10878b04 	addi	r2,r2,7724
   284f0:	e0fffc17 	ldw	r3,-16(fp)
   284f4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   284f8:	e0bffc17 	ldw	r2,-16(fp)
   284fc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   28500:	00000606 	br	2851c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   28504:	e0bffc17 	ldw	r2,-16(fp)
   28508:	10800044 	addi	r2,r2,1
   2850c:	e0bffc15 	stw	r2,-16(fp)
   28510:	e0bffc17 	ldw	r2,-16(fp)
   28514:	10800810 	cmplti	r2,r2,32
   28518:	103fdc1e 	bne	r2,zero,2848c <__alt_data_end+0xf402848c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2851c:	e0bffd17 	ldw	r2,-12(fp)
}
   28520:	e6ffff04 	addi	sp,fp,-4
   28524:	dfc00217 	ldw	ra,8(sp)
   28528:	df000117 	ldw	fp,4(sp)
   2852c:	dc000017 	ldw	r16,0(sp)
   28530:	dec00304 	addi	sp,sp,12
   28534:	f800283a 	ret

00028538 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   28538:	defffe04 	addi	sp,sp,-8
   2853c:	df000115 	stw	fp,4(sp)
   28540:	df000104 	addi	fp,sp,4
   28544:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   28548:	e0bfff17 	ldw	r2,-4(fp)
   2854c:	10bffe84 	addi	r2,r2,-6
   28550:	10c00428 	cmpgeui	r3,r2,16
   28554:	18001a1e 	bne	r3,zero,285c0 <alt_exception_cause_generated_bad_addr+0x88>
   28558:	100690ba 	slli	r3,r2,2
   2855c:	008000f4 	movhi	r2,3
   28560:	10a15c04 	addi	r2,r2,-31376
   28564:	1885883a 	add	r2,r3,r2
   28568:	10800017 	ldw	r2,0(r2)
   2856c:	1000683a 	jmp	r2
   28570:	000285b0 	cmpltui	zero,zero,2582
   28574:	000285b0 	cmpltui	zero,zero,2582
   28578:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   2857c:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   28580:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   28584:	000285b0 	cmpltui	zero,zero,2582
   28588:	000285b8 	rdprs	zero,zero,2582
   2858c:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   28590:	000285b0 	cmpltui	zero,zero,2582
   28594:	000285b0 	cmpltui	zero,zero,2582
   28598:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   2859c:	000285b0 	cmpltui	zero,zero,2582
   285a0:	000285b8 	rdprs	zero,zero,2582
   285a4:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   285a8:	000285c0 	call	285c <__alt_mem_onchip_sram-0x1d7a4>
   285ac:	000285b0 	cmpltui	zero,zero,2582
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   285b0:	00800044 	movi	r2,1
   285b4:	00000306 	br	285c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   285b8:	0005883a 	mov	r2,zero
   285bc:	00000106 	br	285c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   285c0:	0005883a 	mov	r2,zero
  }
}
   285c4:	e037883a 	mov	sp,fp
   285c8:	df000017 	ldw	fp,0(sp)
   285cc:	dec00104 	addi	sp,sp,4
   285d0:	f800283a 	ret

000285d4 <atexit>:
   285d4:	200b883a 	mov	r5,r4
   285d8:	000d883a 	mov	r6,zero
   285dc:	0009883a 	mov	r4,zero
   285e0:	000f883a 	mov	r7,zero
   285e4:	002869c1 	jmpi	2869c <__register_exitproc>

000285e8 <exit>:
   285e8:	defffe04 	addi	sp,sp,-8
   285ec:	000b883a 	mov	r5,zero
   285f0:	dc000015 	stw	r16,0(sp)
   285f4:	dfc00115 	stw	ra,4(sp)
   285f8:	2021883a 	mov	r16,r4
   285fc:	00287b00 	call	287b0 <__call_exitprocs>
   28600:	00820034 	movhi	r2,2048
   28604:	10878504 	addi	r2,r2,7700
   28608:	11000017 	ldw	r4,0(r2)
   2860c:	20800f17 	ldw	r2,60(r4)
   28610:	10000126 	beq	r2,zero,28618 <exit+0x30>
   28614:	103ee83a 	callr	r2
   28618:	8009883a 	mov	r4,r16
   2861c:	0025cb80 	call	25cb8 <_exit>

00028620 <memcmp>:
   28620:	01c000c4 	movi	r7,3
   28624:	3980192e 	bgeu	r7,r6,2868c <memcmp+0x6c>
   28628:	2144b03a 	or	r2,r4,r5
   2862c:	11c4703a 	and	r2,r2,r7
   28630:	10000f26 	beq	r2,zero,28670 <memcmp+0x50>
   28634:	20800003 	ldbu	r2,0(r4)
   28638:	28c00003 	ldbu	r3,0(r5)
   2863c:	10c0151e 	bne	r2,r3,28694 <memcmp+0x74>
   28640:	31bfff84 	addi	r6,r6,-2
   28644:	01ffffc4 	movi	r7,-1
   28648:	00000406 	br	2865c <memcmp+0x3c>
   2864c:	20800003 	ldbu	r2,0(r4)
   28650:	28c00003 	ldbu	r3,0(r5)
   28654:	31bfffc4 	addi	r6,r6,-1
   28658:	10c00e1e 	bne	r2,r3,28694 <memcmp+0x74>
   2865c:	21000044 	addi	r4,r4,1
   28660:	29400044 	addi	r5,r5,1
   28664:	31fff91e 	bne	r6,r7,2864c <__alt_data_end+0xf402864c>
   28668:	0005883a 	mov	r2,zero
   2866c:	f800283a 	ret
   28670:	20c00017 	ldw	r3,0(r4)
   28674:	28800017 	ldw	r2,0(r5)
   28678:	1880041e 	bne	r3,r2,2868c <memcmp+0x6c>
   2867c:	31bfff04 	addi	r6,r6,-4
   28680:	21000104 	addi	r4,r4,4
   28684:	29400104 	addi	r5,r5,4
   28688:	39bff936 	bltu	r7,r6,28670 <__alt_data_end+0xf4028670>
   2868c:	303fe91e 	bne	r6,zero,28634 <__alt_data_end+0xf4028634>
   28690:	003ff506 	br	28668 <__alt_data_end+0xf4028668>
   28694:	10c5c83a 	sub	r2,r2,r3
   28698:	f800283a 	ret

0002869c <__register_exitproc>:
   2869c:	00820034 	movhi	r2,2048
   286a0:	defffa04 	addi	sp,sp,-24
   286a4:	10878504 	addi	r2,r2,7700
   286a8:	dc000315 	stw	r16,12(sp)
   286ac:	14000017 	ldw	r16,0(r2)
   286b0:	dc400415 	stw	r17,16(sp)
   286b4:	dfc00515 	stw	ra,20(sp)
   286b8:	80805217 	ldw	r2,328(r16)
   286bc:	2023883a 	mov	r17,r4
   286c0:	10003626 	beq	r2,zero,2879c <__register_exitproc+0x100>
   286c4:	10c00117 	ldw	r3,4(r2)
   286c8:	010007c4 	movi	r4,31
   286cc:	20c00e16 	blt	r4,r3,28708 <__register_exitproc+0x6c>
   286d0:	1a400044 	addi	r9,r3,1
   286d4:	8800211e 	bne	r17,zero,2875c <__register_exitproc+0xc0>
   286d8:	18c00084 	addi	r3,r3,2
   286dc:	18c7883a 	add	r3,r3,r3
   286e0:	18c7883a 	add	r3,r3,r3
   286e4:	12400115 	stw	r9,4(r2)
   286e8:	10c7883a 	add	r3,r2,r3
   286ec:	19400015 	stw	r5,0(r3)
   286f0:	0005883a 	mov	r2,zero
   286f4:	dfc00517 	ldw	ra,20(sp)
   286f8:	dc400417 	ldw	r17,16(sp)
   286fc:	dc000317 	ldw	r16,12(sp)
   28700:	dec00604 	addi	sp,sp,24
   28704:	f800283a 	ret
   28708:	008000b4 	movhi	r2,2
   2870c:	108a6004 	addi	r2,r2,10624
   28710:	10002526 	beq	r2,zero,287a8 <__register_exitproc+0x10c>
   28714:	01006404 	movi	r4,400
   28718:	d9400015 	stw	r5,0(sp)
   2871c:	d9800115 	stw	r6,4(sp)
   28720:	d9c00215 	stw	r7,8(sp)
   28724:	00229800 	call	22980 <malloc>
   28728:	d9400017 	ldw	r5,0(sp)
   2872c:	d9800117 	ldw	r6,4(sp)
   28730:	d9c00217 	ldw	r7,8(sp)
   28734:	10001c26 	beq	r2,zero,287a8 <__register_exitproc+0x10c>
   28738:	80c05217 	ldw	r3,328(r16)
   2873c:	10000115 	stw	zero,4(r2)
   28740:	02400044 	movi	r9,1
   28744:	10c00015 	stw	r3,0(r2)
   28748:	80805215 	stw	r2,328(r16)
   2874c:	10006215 	stw	zero,392(r2)
   28750:	10006315 	stw	zero,396(r2)
   28754:	0007883a 	mov	r3,zero
   28758:	883fdf26 	beq	r17,zero,286d8 <__alt_data_end+0xf40286d8>
   2875c:	18d1883a 	add	r8,r3,r3
   28760:	4211883a 	add	r8,r8,r8
   28764:	1211883a 	add	r8,r2,r8
   28768:	41802215 	stw	r6,136(r8)
   2876c:	01000044 	movi	r4,1
   28770:	11806217 	ldw	r6,392(r2)
   28774:	20c8983a 	sll	r4,r4,r3
   28778:	310cb03a 	or	r6,r6,r4
   2877c:	11806215 	stw	r6,392(r2)
   28780:	41c04215 	stw	r7,264(r8)
   28784:	01800084 	movi	r6,2
   28788:	89bfd31e 	bne	r17,r6,286d8 <__alt_data_end+0xf40286d8>
   2878c:	11806317 	ldw	r6,396(r2)
   28790:	3108b03a 	or	r4,r6,r4
   28794:	11006315 	stw	r4,396(r2)
   28798:	003fcf06 	br	286d8 <__alt_data_end+0xf40286d8>
   2879c:	80805304 	addi	r2,r16,332
   287a0:	80805215 	stw	r2,328(r16)
   287a4:	003fc706 	br	286c4 <__alt_data_end+0xf40286c4>
   287a8:	00bfffc4 	movi	r2,-1
   287ac:	003fd106 	br	286f4 <__alt_data_end+0xf40286f4>

000287b0 <__call_exitprocs>:
   287b0:	00820034 	movhi	r2,2048
   287b4:	10878504 	addi	r2,r2,7700
   287b8:	10800017 	ldw	r2,0(r2)
   287bc:	defff404 	addi	sp,sp,-48
   287c0:	dd800815 	stw	r22,32(sp)
   287c4:	d8800015 	stw	r2,0(sp)
   287c8:	10805204 	addi	r2,r2,328
   287cc:	dd000615 	stw	r20,24(sp)
   287d0:	dc800415 	stw	r18,16(sp)
   287d4:	dfc00b15 	stw	ra,44(sp)
   287d8:	df000a15 	stw	fp,40(sp)
   287dc:	ddc00915 	stw	r23,36(sp)
   287e0:	dd400715 	stw	r21,28(sp)
   287e4:	dcc00515 	stw	r19,20(sp)
   287e8:	dc400315 	stw	r17,12(sp)
   287ec:	dc000215 	stw	r16,8(sp)
   287f0:	2025883a 	mov	r18,r4
   287f4:	2829883a 	mov	r20,r5
   287f8:	d8800115 	stw	r2,4(sp)
   287fc:	05bfffc4 	movi	r22,-1
   28800:	d8800017 	ldw	r2,0(sp)
   28804:	14c05217 	ldw	r19,328(r2)
   28808:	98001d26 	beq	r19,zero,28880 <__call_exitprocs+0xd0>
   2880c:	dd400117 	ldw	r21,4(sp)
   28810:	98800117 	ldw	r2,4(r19)
   28814:	173fffc4 	addi	fp,r2,-1
   28818:	e0000d16 	blt	fp,zero,28850 <__call_exitprocs+0xa0>
   2881c:	14000044 	addi	r16,r2,1
   28820:	8421883a 	add	r16,r16,r16
   28824:	8421883a 	add	r16,r16,r16
   28828:	84402004 	addi	r17,r16,128
   2882c:	9c63883a 	add	r17,r19,r17
   28830:	9c21883a 	add	r16,r19,r16
   28834:	a0001e26 	beq	r20,zero,288b0 <__call_exitprocs+0x100>
   28838:	80804017 	ldw	r2,256(r16)
   2883c:	15001c26 	beq	r2,r20,288b0 <__call_exitprocs+0x100>
   28840:	e73fffc4 	addi	fp,fp,-1
   28844:	843fff04 	addi	r16,r16,-4
   28848:	8c7fff04 	addi	r17,r17,-4
   2884c:	e5bff91e 	bne	fp,r22,28834 <__alt_data_end+0xf4028834>
   28850:	008000b4 	movhi	r2,2
   28854:	108a6504 	addi	r2,r2,10644
   28858:	10000926 	beq	r2,zero,28880 <__call_exitprocs+0xd0>
   2885c:	98800117 	ldw	r2,4(r19)
   28860:	1000311e 	bne	r2,zero,28928 <__call_exitprocs+0x178>
   28864:	98800017 	ldw	r2,0(r19)
   28868:	10003426 	beq	r2,zero,2893c <__call_exitprocs+0x18c>
   2886c:	9809883a 	mov	r4,r19
   28870:	a8800015 	stw	r2,0(r21)
   28874:	00229940 	call	22994 <free>
   28878:	acc00017 	ldw	r19,0(r21)
   2887c:	983fe41e 	bne	r19,zero,28810 <__alt_data_end+0xf4028810>
   28880:	dfc00b17 	ldw	ra,44(sp)
   28884:	df000a17 	ldw	fp,40(sp)
   28888:	ddc00917 	ldw	r23,36(sp)
   2888c:	dd800817 	ldw	r22,32(sp)
   28890:	dd400717 	ldw	r21,28(sp)
   28894:	dd000617 	ldw	r20,24(sp)
   28898:	dcc00517 	ldw	r19,20(sp)
   2889c:	dc800417 	ldw	r18,16(sp)
   288a0:	dc400317 	ldw	r17,12(sp)
   288a4:	dc000217 	ldw	r16,8(sp)
   288a8:	dec00c04 	addi	sp,sp,48
   288ac:	f800283a 	ret
   288b0:	98800117 	ldw	r2,4(r19)
   288b4:	80c00017 	ldw	r3,0(r16)
   288b8:	10bfffc4 	addi	r2,r2,-1
   288bc:	17001526 	beq	r2,fp,28914 <__call_exitprocs+0x164>
   288c0:	80000015 	stw	zero,0(r16)
   288c4:	183fde26 	beq	r3,zero,28840 <__alt_data_end+0xf4028840>
   288c8:	00800044 	movi	r2,1
   288cc:	1708983a 	sll	r4,r2,fp
   288d0:	98806217 	ldw	r2,392(r19)
   288d4:	9dc00117 	ldw	r23,4(r19)
   288d8:	2084703a 	and	r2,r4,r2
   288dc:	1000061e 	bne	r2,zero,288f8 <__call_exitprocs+0x148>
   288e0:	183ee83a 	callr	r3
   288e4:	98800117 	ldw	r2,4(r19)
   288e8:	15ffc51e 	bne	r2,r23,28800 <__alt_data_end+0xf4028800>
   288ec:	a8800017 	ldw	r2,0(r21)
   288f0:	14ffd326 	beq	r2,r19,28840 <__alt_data_end+0xf4028840>
   288f4:	003fc206 	br	28800 <__alt_data_end+0xf4028800>
   288f8:	98806317 	ldw	r2,396(r19)
   288fc:	2084703a 	and	r2,r4,r2
   28900:	1000061e 	bne	r2,zero,2891c <__call_exitprocs+0x16c>
   28904:	89400017 	ldw	r5,0(r17)
   28908:	9009883a 	mov	r4,r18
   2890c:	183ee83a 	callr	r3
   28910:	003ff406 	br	288e4 <__alt_data_end+0xf40288e4>
   28914:	9f000115 	stw	fp,4(r19)
   28918:	003fea06 	br	288c4 <__alt_data_end+0xf40288c4>
   2891c:	89000017 	ldw	r4,0(r17)
   28920:	183ee83a 	callr	r3
   28924:	003fef06 	br	288e4 <__alt_data_end+0xf40288e4>
   28928:	98800017 	ldw	r2,0(r19)
   2892c:	982b883a 	mov	r21,r19
   28930:	1027883a 	mov	r19,r2
   28934:	983fb61e 	bne	r19,zero,28810 <__alt_data_end+0xf4028810>
   28938:	003fd106 	br	28880 <__alt_data_end+0xf4028880>
   2893c:	0005883a 	mov	r2,zero
   28940:	003ffa06 	br	2892c <__alt_data_end+0xf402892c>
   28944:	0201ffff 	0x201ffff
   28948:	883a0000 	call	883a000 <_gp+0x83022c>
   2894c:	010d0bff 	0x10d0bff
   28950:	01010002 	0x1010002
	...
   2895c:	010d0bff 	0x10d0bff
   28960:	01010004 	movi	r4,1024
   28964:	00000100 	call	10 <__alt_mem_onchip_sram-0x1fff0>
   28968:	00000000 	call	0 <__alt_mem_onchip_sram-0x20000>
   2896c:	01110bff 	0x1110bff
   28970:	01010004 	movi	r4,1024
   28974:	7f000105 	stb	fp,4(r15)
   28978:	007d0000 	call	7d000 <__flash_rwdata_start+0x54334>
	...
