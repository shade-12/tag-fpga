
bt_task.elf:     file format elf32-littlenios2
bt_task.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000073dc memsz 0x000073dc flags r-x
    LOAD off    0x000083fc vaddr 0x080073fc paddr 0x08007c74 align 2**12
         filesz 0x00000878 memsz 0x00000878 flags rw-
    LOAD off    0x000094ec vaddr 0x080084ec paddr 0x080084ec align 2**12
         filesz 0x00000000 memsz 0x00000a64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006db4  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  08006fe4  08006fe4  00007fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000878  080073fc  08007c74  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a64  080084ec  080084ec  000094ec  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_sram  00000000  00020000  00020000  00008c74  2**0
                  CONTENTS
  7 .sdram_controller 00000000  08008f50  08008f50  00008c74  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008c74  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c40  00000000  00000000  00008c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017350  00000000  00000000  000098d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007548  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008240  00000000  00000000  00028170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002080  00000000  00000000  000303b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000561b  00000000  00000000  00032430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000635a  00000000  00000000  00037a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003dda8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000970  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000429aa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000429ad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000429b9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000429ba  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000429bb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000429bf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000429c3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000429c7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000429d2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000429dd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000429e8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001d  00000000  00000000  000429f7  2**0
                  CONTENTS, READONLY
 30 .jdi          00007b07  00000000  00000000  00042a14  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     002e5ae1  00000000  00000000  0004a51b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08006fe4 l    d  .rodata	00000000 .rodata
080073fc l    d  .rwdata	00000000 .rwdata
080084ec l    d  .bss	00000000 .bss
00020000 l    d  .onchip_sram	00000000 .onchip_sram
08008f50 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/tag2/de1_software/nios/hc05_img_rcv/bt_task_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 bt_task.cpp
00000000 l    df *ABS*	00000000 dma.cpp
08000850 l     F .text	00000024 alt_dma_txchan_close
08000874 l     F .text	00000068 alt_dma_txchan_send
080008dc l     F .text	00000058 alt_dma_txchan_ioctl
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
08000a78 l     F .text	00000058 _ZL12read_sleb128PKhPl
08000ad0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
08000b58 l     F .text	000000a0 _ZL21size_of_encoded_valueh
08000bf8 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
08000e08 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
08000e5c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
08000f04 l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
08000f8c l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
080011cc l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
080084f0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
08002308 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
080084fc l     O .bss	00000004 _ZL14emergency_used
08008628 l     O .bss	00000800 _ZL16emergency_buffer
080084f8 l     O .bss	00000004 _ZL15dependents_used
08008528 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
08002720 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08008500 l     O .bss	00000004 fc_static
08002838 l     F .text	000000c0 _Unwind_RaiseException_Phase2
080028f8 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080037ec l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08007804 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08004434 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
08004560 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
080046e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08004868 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08007c50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08004d20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004e70 l     F .text	00000038 alt_dev_reg
080078e4 l     O .rwdata	000000a4 dma_fpga_to_hps_priv
08007988 l     O .rwdata	0000001c dma_fpga_to_hps_tx
080079a4 l     O .rwdata	0000001c dma_fpga_to_hps_rx
080079c0 l     O .rwdata	0000002c jtag_uart_0
080079ec l     O .rwdata	0000002c bt_rs232_uart
08007a18 l     O .rwdata	0000002c wifi_rs232_uart
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
08004f4c l     F .text	00000038 alt_dma_txchan_reg
08004f84 l     F .text	00000038 alt_dma_rxchan_reg
080050b0 l     F .text	00000098 alt_avalon_dma_launch_txonly
08005148 l     F .text	00000098 alt_avalon_dma_launch_rxonly
080051e0 l     F .text	00000344 alt_avalon_dma_ioctl
08005898 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
080060c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08006208 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08006234 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
08006328 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080064a0 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080067a8 l     F .text	00000050 alt_get_errno
080067f8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
08008524 g     O .bss	00000004 alt_instruction_exception_handler
08002568 g     F .text	00000044 __cxa_free_exception
0800246c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
08001e00 g     F .text	00000018 _ZSt10unexpectedv
0800494c g     F .text	00000078 alt_main
080033cc g     F .text	00000080 _puts_r
08008e50 g     O .bss	00000100 alt_irq
080026a8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
080029b4 g     F .text	00000020 .hidden _Unwind_GetIPInfo
08007c74 g       *ABS*	00000000 __flash_rwdata_start
080023dc g     F .text	00000084 __cxa_rethrow
08002940 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
08001e3c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
08000624 g     F .text	0000022c _Z7bt_taskv
080029a4 g     F .text	00000010 .hidden _Unwind_GetIP
08008f50 g       *ABS*	00000000 __alt_heap_start
08003740 g     F .text	00000054 _kill_r
08003380 g     F .text	0000004c printf
08003514 g     F .text	0000007c _signal_r
08006ffc  w    O .rodata	00000010 _ZTV6BTUart
08005a58 g     F .text	000000a8 alt_avalon_dma_init
08002640 g     F .text	00000040 __cxa_free_dependent_exception
08001e60 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
080071cc  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
080049e4 g     F .text	00000020 __malloc_unlock
08005f60 g     F .text	00000090 alt_up_rs232_read_fd
080026a8 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
08002290 g     F .text	00000020 _ZSt18uncaught_exceptionv
080026d8 g     F .text	00000020 __cxa_deleted_virtual
080005d8 g     F .text	0000004c _ZN6BTUart5flushEv
08002680 g     F .text	00000004 _ZNSt9exceptionD2Ev
08007308  w    O .rodata	00000014 _ZTVSt13bad_exception
08006acc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
080029f0 g     F .text	00000008 .hidden _Unwind_GetRegionStart
08000020 g       *ABS*	00000000 __flash_exceptions_start
08008510 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08002bcc g     F .text	00000074 .hidden _Unwind_Backtrace
08008518 g     O .bss	00000004 alt_argv
0800fbec g       *ABS*	00000000 _gp
080046c8 g     F .text	00000020 getpid
08001800 g     F .text	00000234 __cxa_call_unexpected
08002124 g     F .text	00000008 __cxa_get_exception_ptr
080045b0 g     F .text	00000054 alt_dma_txchan_open
08007a6c g     O .rwdata	00000180 alt_fd_list
08007bf4  w    O .rwdata	00000008 _ZTS6BTUart
08002ae0 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
08002970 g     F .text	00000018 .hidden _Unwind_GetCFA
08001e18 g     F .text	00000014 _ZSt13set_terminatePFvvE
08004638 g     F .text	00000090 alt_find_dev
080025ac g     F .text	00000094 __cxa_allocate_dependent_exception
08001ac4 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
08006580 g     F .text	00000078 alt_io_redirect
08006fe4 g       *ABS*	00000000 __DTOR_END__
08001adc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
08005eec g     F .text	00000074 alt_up_rs232_read_data
0800344c g     F .text	00000014 puts
08006cd4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007c08 g     O .rwdata	00000004 tag_id
08005bc0 g     F .text	000000e4 altera_avalon_jtag_uart_read
08002c78 g     F .text	00000014 malloc
08003344 g     F .text	0000003c _printf_r
08004550 g     F .text	00000008 .hidden __udivsi3
08003590 g     F .text	000000b4 _raise_r
0800850c g     O .bss	00000004 __malloc_top_pad
08007bfc g     O .rwdata	00000004 input
08003794 g     F .text	00000004 _getpid_r
08001b8c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
08003644 g     F .text	000000a8 __sigtramp_r
08003460 g     F .text	00000050 _sbrk_r
0800723c  w    O .rodata	00000020 _ZTVSt9type_info
08002688 g     F .text	0000000c _ZNKSt9exception4whatEv
08007c64 g     O .rwdata	00000004 alt_max_fd
08005e68 g     F .text	00000044 alt_up_rs232_check_parity
08008508 g     O .bss	00000004 __malloc_max_sbrked_mem
080065f8 g     F .text	000001b0 alt_irq_register
08004fbc g     F .text	000000f4 alt_avalon_dma_launch_bidir
08007200  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
08006378 g     F .text	00000054 alt_dma_rxchan_open
08001b20 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
08001d14 g     F .text	00000004 _ZdlPv
0800029c g     F .text	00000048 _ZN6BTUartD1Ev
08007c3c g     O .rwdata	00000004 _global_impure_ptr
08008f50 g       *ABS*	00000000 __bss_end
08002928 g     F .text	00000018 .hidden _Unwind_SjLj_Register
08002c40 g     F .text	00000018 abort
080021e0 g     F .text	000000b0 __cxa_end_catch
08002684 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00020000 g       *ABS*	00000000 __alt_mem_onchip_sram
08008520 g     O .bss	00000004 alt_irq_active
08007c00 g     O .rwdata	00000004 id
08001dd8 g     F .text	00000018 _ZSt9terminatev
080000fc g     F .exceptions	000000d4 alt_irq_handler
08007a44 g     O .rwdata	00000028 alt_dev_null
0800095c g     F .text	000000d8 _Z9start_dmav
080026b0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0800026c g     F .text	00000030 _ZN6BTUartC2Ev
0800026c g     F .text	00000030 _ZN6BTUartC1Ev
08007170  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
080061ec g     F .text	0000001c alt_dcache_flush_all
08007c18  w    O .rwdata	00000008 _ZTISt9exception
08007c74 g       *ABS*	00000000 __ram_rwdata_end
08002460 g     F .text	00000004 _ZNSt9type_infoD1Ev
08007c5c g     O .rwdata	00000008 alt_dev_list
080026b0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
080056ec g     F .text	00000074 alt_avalon_dma_space
08004d70 g     F .text	00000100 write
08006e08 g     F .text	00000058 _putc_r
0800247c g     F .text	00000004 _ZNSt9type_infoD0Ev
080073fc g       *ABS*	00000000 __ram_rodata_end
08005ff0 g     F .text	00000094 alt_up_rs232_write_fd
08004738 g     F .text	00000130 kill
08004558 g     F .text	00000008 .hidden __umodsi3
08002474 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
08001e2c g     F .text	00000010 _ZSt13get_terminatev
08008f50 g       *ABS*	00000000 end
08002bb4 g     F .text	00000018 .hidden _Unwind_DeleteException
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08001c44 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
08006fe4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08001a4c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
08005ca4 g     F .text	00000094 altera_avalon_jtag_uart_write
08007290  w    O .rodata	00000012 _ZTSSt13bad_exception
08003858 g     F .text	0000056c ___vfprintf_internal_r
080040a8 g     F .text	00000288 _free_r
08004a04 g     F .text	00000228 alt_printf
08005760 g     F .text	00000138 alt_avalon_dma_send
08003de8 g     F .text	0000019c __call_exitprocs
08007c44 g     O .rwdata	00000008 alt_dma_txchan_list
0800029c g     F .text	00000048 _ZN6BTUartD2Ev
08007c04 g     O .rwdata	00000004 dnn_acc
08007c34 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0800722c  w    O .rodata	0000000d _ZTSSt9type_info
080026b8 g     F .text	00000020 __cxa_pure_virtual
08003700 g     F .text	0000001c signal
08004edc g     F .text	00000070 alt_sys_init
08006e60 g     F .text	00000144 __register_exitproc
08001ea4 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
08005e2c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
080026f8 g     F .text	00000028 .hidden __mulsi3
080073fc g       *ABS*	00000000 __ram_rwdata_start
08002a10 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08006fe4 g       *ABS*	00000000 __ram_rodata_start
08008e28 g     O .bss	00000028 __malloc_current_mallinfo
08002b24 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08007330  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
08002460 g     F .text	00000004 _ZNSt9type_infoD2Ev
080026b4 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
080020a0 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
08005b00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006c00 g     F .text	000000d4 alt_get_fd
08007c28  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
08006d84 g     F .text	00000030 memcmp
08008f50 g       *ABS*	00000000 __alt_stack_base
08001e60 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
08002b68 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
08002464 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
080073fc g     O .rwdata	00000408 __malloc_av_
080072f4  w    O .rodata	00000014 _ZTVSt9exception
080026ac g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
08005d90 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
08006aec g     F .text	00000114 alt_find_file
08006284 g     F .text	000000a4 alt_dev_llist_insert
080049c4 g     F .text	00000020 __malloc_lock
08004c70 g     F .text	000000b0 sbrk
080071a0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0800234c g     F .text	00000090 __cxa_throw
080029d4 g     F .text	00000010 .hidden _Unwind_SetIP
08004330 g     F .text	000000ac __sfvwrite_small_dev
080084ec g       *ABS*	00000000 __bss_start
080003e8 g     F .text	000000b8 _ZN6BTUart7write_sEh
08003324 g     F .text	00000020 memset
08000a34 g     F .text	00000044 main
0800556c g     F .text	00000048 alt_avalon_dma_rx_ioctl
0800851c g     O .bss	00000004 alt_envp
08008504 g     O .bss	00000004 __malloc_max_total_mem
08005b60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001a34 g     F .text	0000000c __cxa_get_globals_fast
0c000000 g       *ABS*	00000000 __alt_heap_limit
08000384 g     F .text	00000064 _ZN6BTUart6read_sEv
08002ca0 g     F .text	00000684 _malloc_r
080002e4 g     F .text	00000038 _ZN6BTUartD0Ev
08002694 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08007c4c g     O .rwdata	00000004 alt_errno
0800371c g     F .text	00000010 _init_signal
08007194  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0800051c g     F .text	00000074 _ZN6BTUart7write_mEPci
08002684 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
08006db4 g     F .text	00000054 putc
080044a0 g     F .text	00000054 .hidden __divsi3
08003f84 g     F .text	00000124 _malloc_trim_r
08006fe4 g       *ABS*	00000000 __CTOR_END__
08003798 g     F .text	00000038 strcmp
08006fe4 g       *ABS*	00000000 __flash_rodata_start
0800731c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
08006fe4 g       *ABS*	00000000 __DTOR_LIST__
08006084 g     F .text	00000040 alt_up_rs232_open_dev
08004ea8 g     F .text	00000034 alt_irq_init
08006a4c g     F .text	00000080 alt_release_fd
08001e70 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
08006d70 g     F .text	00000014 atexit
080043dc g     F .text	00000058 _write_r
08002a08 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
080022b0 g     F .text	00000058 __cxa_call_terminate
08007c40 g     O .rwdata	00000004 _impure_ptr
08007c20  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08008514 g     O .bss	00000004 alt_argc
08006428 g     F .text	0000005c _do_dtors
08000934 g     F .text	00000028 _Z8dma_donePv
08007bec  w    O .rwdata	00000008 _ZTI6BTUart
08001e50 g     F .text	00000010 _ZSt14get_unexpectedv
08000020 g       .exceptions	00000000 alt_irq_entry
080029f8 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
08007c54 g     O .rwdata	00000008 alt_fs_list
080072d0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
08005d38 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
080029e4 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
08005eac g     F .text	00000040 alt_up_rs232_write_data
0800212c g     F .text	000000b4 __cxa_begin_catch
08001adc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
08001df0 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
08000020 g       *ABS*	00000000 __ram_exceptions_start
080026a4 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08007c0c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
080024c4 g     F .text	000000a4 __cxa_allocate_exception
080071f4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08007c74 g       *ABS*	00000000 _edata
08008f50 g       *ABS*	00000000 _end
08001300 g     F .text	00000500 __gxx_personality_sj0
08000230 g       *ABS*	00000000 __ram_exceptions_end
08002680 g     F .text	00000004 _ZNSt9exceptionD1Ev
08007c38 g     O .rwdata	00000004 __malloc_trim_threshold
08002c58 g     F .text	00000020 exit
08002988 g     F .text	0000001c .hidden _Unwind_SetGR
08002004 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
08001d18 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
080044f4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080072a4  w    O .rodata	0000000c _ZTISt13bad_exception
080084ec g     O .bss	00000004 dma_complete
08004604 g     F .text	00000034 _exit
08002954 g     F .text	0000001c .hidden _Unwind_GetGR
08001a40 g     F .text	0000000c __cxa_get_globals
08007c30 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
080037d0 g     F .text	0000001c strlen
080034b0 g     F .text	00000064 _init_signal_r
08007c10  w    O .rwdata	00000008 _ZTISt9type_info
080068ec g     F .text	00000160 open
08004c2c g     F .text	00000044 alt_putchar
0800031c g     F .text	00000068 _ZN6BTUart4openEPKc
08007280  w    O .rodata	0000000d _ZTSSt9exception
080026a0 g     F .text	00000004 _ZNSt9exceptionD0Ev
08006484 g     F .text	0000001c alt_icache_flush_all
08002a00 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
08007c70 g     O .rwdata	00000004 alt_priority_mask
08003dc4 g     F .text	00000024 __vfprintf_internal
080004a0 g     F .text	0000007c _ZN6BTUart6read_mEPii
080055b4 g     F .text	00000138 alt_avalon_dma_prepare
08007c68 g     O .rwdata	00000008 alt_dma_rxchan_list
080063cc g     F .text	0000005c _do_ctors
0800372c g     F .text	00000014 __sigtramp
08000590 g     F .text	00000048 _ZN6BTUart10read_readyEv
08005dec g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
08006114 g     F .text	000000d8 close
080072b0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
080048cc g     F .text	00000080 alt_load
08005524 g     F .text	00000048 alt_avalon_dma_tx_ioctl
08002480 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
080036ec g     F .text	00000014 raise
08002c8c g     F .text	00000014 free
08001aec g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001526 	beq	r2,zero,8000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a39404 	addi	r2,r2,-29104
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a39404 	addi	r2,r2,-29104
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	e17ffd17 	ldw	r5,-12(fp)
 8000178:	183ee83a 	callr	r3
#endif
        break;
 800017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000180:	0005313a 	rdctl	r2,ipending
 8000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000188:	e0bfff17 	ldw	r2,-4(fp)
 800018c:	00000706 	br	80001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8000190:	e0bffc17 	ldw	r2,-16(fp)
 8000194:	1085883a 	add	r2,r2,r2
 8000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 800019c:	e0bffd17 	ldw	r2,-12(fp)
 80001a0:	10800044 	addi	r2,r2,1
 80001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a8:	003fe006 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001b0:	e0bffb17 	ldw	r2,-20(fp)
 80001b4:	103fda1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b8:	0001883a 	nop
}
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a24e17 	ldw	r2,-30408(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a24e17 	ldw	r2,-30408(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	1809883a 	mov	r4,r3
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	e1bffe17 	ldw	r6,-8(fp)
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800023c:	d6befb14 	ori	gp,gp,64492
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10a13b14 	ori	r2,r2,34028

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18e3d414 	ori	r3,r3,36688

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80048cc0 	call	80048cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800494c0 	call	800494c <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	df000115 	stw	fp,4(sp)
 8000274:	df000104 	addi	fp,sp,4
 8000278:	e13fff15 	stw	r4,-4(fp)
 800027c:	e0ffff17 	ldw	r3,-4(fp)
 8000280:	00820034 	movhi	r2,2048
 8000284:	109c0104 	addi	r2,r2,28676
 8000288:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
 800028c:	e037883a 	mov	sp,fp
 8000290:	df000017 	ldw	fp,0(sp)
 8000294:	dec00104 	addi	sp,sp,4
 8000298:	f800283a 	ret

0800029c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
 800029c:	defffd04 	addi	sp,sp,-12
 80002a0:	dfc00215 	stw	ra,8(sp)
 80002a4:	df000115 	stw	fp,4(sp)
 80002a8:	df000104 	addi	fp,sp,4
 80002ac:	e13fff15 	stw	r4,-4(fp)
 80002b0:	e0ffff17 	ldw	r3,-4(fp)
 80002b4:	00820034 	movhi	r2,2048
 80002b8:	109c0104 	addi	r2,r2,28676
 80002bc:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
 80002c0:	0005883a 	mov	r2,zero
 80002c4:	10000226 	beq	r2,zero,80002d0 <_ZN6BTUartD1Ev+0x34>
 80002c8:	e13fff17 	ldw	r4,-4(fp)
 80002cc:	8001d140 	call	8001d14 <_ZdlPv>
 80002d0:	e037883a 	mov	sp,fp
 80002d4:	dfc00117 	ldw	ra,4(sp)
 80002d8:	df000017 	ldw	fp,0(sp)
 80002dc:	dec00204 	addi	sp,sp,8
 80002e0:	f800283a 	ret

080002e4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
 80002e4:	defffd04 	addi	sp,sp,-12
 80002e8:	dfc00215 	stw	ra,8(sp)
 80002ec:	df000115 	stw	fp,4(sp)
 80002f0:	df000104 	addi	fp,sp,4
 80002f4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
 80002f8:	e13fff17 	ldw	r4,-4(fp)
 80002fc:	800029c0 	call	800029c <_ZN6BTUartD1Ev>
 8000300:	e13fff17 	ldw	r4,-4(fp)
 8000304:	8001d140 	call	8001d14 <_ZdlPv>
 8000308:	e037883a 	mov	sp,fp
 800030c:	dfc00117 	ldw	ra,4(sp)
 8000310:	df000017 	ldw	fp,0(sp)
 8000314:	dec00204 	addi	sp,sp,8
 8000318:	f800283a 	ret

0800031c <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
 800031c:	defffc04 	addi	sp,sp,-16
 8000320:	dfc00315 	stw	ra,12(sp)
 8000324:	df000215 	stw	fp,8(sp)
 8000328:	df000204 	addi	fp,sp,8
 800032c:	e13ffe15 	stw	r4,-8(fp)
 8000330:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
 8000334:	e13fff17 	ldw	r4,-4(fp)
 8000338:	80060840 	call	8006084 <alt_up_rs232_open_dev>
 800033c:	1007883a 	mov	r3,r2
 8000340:	e0bffe17 	ldw	r2,-8(fp)
 8000344:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
 8000348:	e0bffe17 	ldw	r2,-8(fp)
 800034c:	10800117 	ldw	r2,4(r2)
 8000350:	1009883a 	mov	r4,r2
 8000354:	8005d380 	call	8005d38 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
 8000358:	e0bffe17 	ldw	r2,-8(fp)
 800035c:	10800117 	ldw	r2,4(r2)
 8000360:	1000021e 	bne	r2,zero,800036c <_ZN6BTUart4openEPKc+0x50>
        return 0;
 8000364:	0005883a 	mov	r2,zero
 8000368:	00000106 	br	8000370 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
 800036c:	00800044 	movi	r2,1
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	dfc00117 	ldw	ra,4(sp)
 8000378:	df000017 	ldw	fp,0(sp)
 800037c:	dec00204 	addi	sp,sp,8
 8000380:	f800283a 	ret

08000384 <_ZN6BTUart6read_sEv>:


int BTUart::read_s(void)
{
 8000384:	defffc04 	addi	sp,sp,-16
 8000388:	dfc00315 	stw	ra,12(sp)
 800038c:	df000215 	stw	fp,8(sp)
 8000390:	df000204 	addi	fp,sp,8
 8000394:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
 8000398:	0001883a 	nop
 800039c:	e13fff17 	ldw	r4,-4(fp)
 80003a0:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 80003a4:	1005003a 	cmpeq	r2,r2,zero
 80003a8:	10803fcc 	andi	r2,r2,255
 80003ac:	103ffb1e 	bne	r2,zero,800039c <__alt_data_end+0xfc00039c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
 80003b0:	e0bfff17 	ldw	r2,-4(fp)
 80003b4:	10c00117 	ldw	r3,4(r2)
 80003b8:	e0bffe44 	addi	r2,fp,-7
 80003bc:	1809883a 	mov	r4,r3
 80003c0:	e17ffe04 	addi	r5,fp,-8
 80003c4:	100d883a 	mov	r6,r2
 80003c8:	8005eec0 	call	8005eec <alt_up_rs232_read_data>

    return (int) buffer;
 80003cc:	e0bffe03 	ldbu	r2,-8(fp)
 80003d0:	10803fcc 	andi	r2,r2,255
}
 80003d4:	e037883a 	mov	sp,fp
 80003d8:	dfc00117 	ldw	ra,4(sp)
 80003dc:	df000017 	ldw	fp,0(sp)
 80003e0:	dec00204 	addi	sp,sp,8
 80003e4:	f800283a 	ret

080003e8 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
 80003e8:	defffb04 	addi	sp,sp,-20
 80003ec:	dfc00415 	stw	ra,16(sp)
 80003f0:	df000315 	stw	fp,12(sp)
 80003f4:	df000304 	addi	fp,sp,12
 80003f8:	e13ffe15 	stw	r4,-8(fp)
 80003fc:	2805883a 	mov	r2,r5
 8000400:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
 8000404:	e0bffe17 	ldw	r2,-8(fp)
 8000408:	10800117 	ldw	r2,4(r2)
 800040c:	1009883a 	mov	r4,r2
 8000410:	8005d900 	call	8005d90 <alt_up_rs232_disable_read_interrupt>

    int result = 0;
 8000414:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
 8000418:	e0bffe17 	ldw	r2,-8(fp)
 800041c:	10800117 	ldw	r2,4(r2)
 8000420:	1009883a 	mov	r4,r2
 8000424:	8005e2c0 	call	8005e2c <alt_up_rs232_get_available_space_in_write_FIFO>
 8000428:	1007883a 	mov	r3,r2
 800042c:	e0bffe17 	ldw	r2,-8(fp)
 8000430:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
 8000434:	e0bffe17 	ldw	r2,-8(fp)
 8000438:	10800217 	ldw	r2,8(r2)
 800043c:	10802030 	cmpltui	r2,r2,128
 8000440:	10000d1e 	bne	r2,zero,8000478 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
 8000444:	e0bffe17 	ldw	r2,-8(fp)
 8000448:	10c00117 	ldw	r3,4(r2)
 800044c:	e0bfff03 	ldbu	r2,-4(fp)
 8000450:	1809883a 	mov	r4,r3
 8000454:	100b883a 	mov	r5,r2
 8000458:	8005eac0 	call	8005eac <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
 800045c:	e0bfff03 	ldbu	r2,-4(fp)
 8000460:	01020034 	movhi	r4,2048
 8000464:	211bf904 	addi	r4,r4,28644
 8000468:	100b883a 	mov	r5,r2
 800046c:	8004a040 	call	8004a04 <alt_printf>
        result = 1;
 8000470:	00800044 	movi	r2,1
 8000474:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
 8000478:	e0bffe17 	ldw	r2,-8(fp)
 800047c:	10800117 	ldw	r2,4(r2)
 8000480:	1009883a 	mov	r4,r2
 8000484:	8005d380 	call	8005d38 <alt_up_rs232_enable_read_interrupt>
    return result;
 8000488:	e0bffd17 	ldw	r2,-12(fp)
}
 800048c:	e037883a 	mov	sp,fp
 8000490:	dfc00117 	ldw	ra,4(sp)
 8000494:	df000017 	ldw	fp,0(sp)
 8000498:	dec00204 	addi	sp,sp,8
 800049c:	f800283a 	ret

080004a0 <_ZN6BTUart6read_mEPii>:


void BTUart::read_m(int *buffer, int length)
{
 80004a0:	defff904 	addi	sp,sp,-28
 80004a4:	dfc00615 	stw	ra,24(sp)
 80004a8:	df000515 	stw	fp,20(sp)
 80004ac:	dc000415 	stw	r16,16(sp)
 80004b0:	df000504 	addi	fp,sp,20
 80004b4:	e13ffc15 	stw	r4,-16(fp)
 80004b8:	e17ffd15 	stw	r5,-12(fp)
 80004bc:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
 80004c0:	e03ffb15 	stw	zero,-20(fp)
 80004c4:	00000c06 	br	80004f8 <_ZN6BTUart6read_mEPii+0x58>
		buffer[count] = read_s();
 80004c8:	e0bffb17 	ldw	r2,-20(fp)
 80004cc:	1085883a 	add	r2,r2,r2
 80004d0:	1085883a 	add	r2,r2,r2
 80004d4:	1007883a 	mov	r3,r2
 80004d8:	e0bffd17 	ldw	r2,-12(fp)
 80004dc:	10e1883a 	add	r16,r2,r3
 80004e0:	e13ffc17 	ldw	r4,-16(fp)
 80004e4:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 80004e8:	80800015 	stw	r2,0(r16)

void BTUart::read_m(int *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
 80004ec:	e0bffb17 	ldw	r2,-20(fp)
 80004f0:	10800044 	addi	r2,r2,1
 80004f4:	e0bffb15 	stw	r2,-20(fp)
 80004f8:	e0fffb17 	ldw	r3,-20(fp)
 80004fc:	e0bffe17 	ldw	r2,-8(fp)
 8000500:	18bff116 	blt	r3,r2,80004c8 <__alt_data_end+0xfc0004c8>
		buffer[count] = read_s();
	}
}
 8000504:	e6ffff04 	addi	sp,fp,-4
 8000508:	dfc00217 	ldw	ra,8(sp)
 800050c:	df000117 	ldw	fp,4(sp)
 8000510:	dc000017 	ldw	r16,0(sp)
 8000514:	dec00304 	addi	sp,sp,12
 8000518:	f800283a 	ret

0800051c <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
 800051c:	defffa04 	addi	sp,sp,-24
 8000520:	dfc00515 	stw	ra,20(sp)
 8000524:	df000415 	stw	fp,16(sp)
 8000528:	df000404 	addi	fp,sp,16
 800052c:	e13ffd15 	stw	r4,-12(fp)
 8000530:	e17ffe15 	stw	r5,-8(fp)
 8000534:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
 8000538:	e03ffc15 	stw	zero,-16(fp)
 800053c:	00000b06 	br	800056c <_ZN6BTUart7write_mEPci+0x50>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
 8000540:	e0bffc17 	ldw	r2,-16(fp)
 8000544:	e0fffe17 	ldw	r3,-8(fp)
 8000548:	1885883a 	add	r2,r3,r2
 800054c:	10800003 	ldbu	r2,0(r2)
 8000550:	10803fcc 	andi	r2,r2,255
 8000554:	e13ffd17 	ldw	r4,-12(fp)
 8000558:	100b883a 	mov	r5,r2
 800055c:	80003e80 	call	80003e8 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
 8000560:	e0bffc17 	ldw	r2,-16(fp)
 8000564:	10800044 	addi	r2,r2,1
 8000568:	e0bffc15 	stw	r2,-16(fp)
 800056c:	e0fffc17 	ldw	r3,-16(fp)
 8000570:	e0bfff17 	ldw	r2,-4(fp)
 8000574:	18bff216 	blt	r3,r2,8000540 <__alt_data_end+0xfc000540>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
 8000578:	e0bffc17 	ldw	r2,-16(fp)
}
 800057c:	e037883a 	mov	sp,fp
 8000580:	dfc00117 	ldw	ra,4(sp)
 8000584:	df000017 	ldw	fp,0(sp)
 8000588:	dec00204 	addi	sp,sp,8
 800058c:	f800283a 	ret

08000590 <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
 8000590:	defffc04 	addi	sp,sp,-16
 8000594:	dfc00315 	stw	ra,12(sp)
 8000598:	df000215 	stw	fp,8(sp)
 800059c:	df000204 	addi	fp,sp,8
 80005a0:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
 80005a4:	e0bfff17 	ldw	r2,-4(fp)
 80005a8:	10800117 	ldw	r2,4(r2)
 80005ac:	1009883a 	mov	r4,r2
 80005b0:	8005dec0 	call	8005dec <alt_up_rs232_get_used_space_in_read_FIFO>
 80005b4:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
 80005b8:	e0bffe0b 	ldhu	r2,-8(fp)
 80005bc:	1004c03a 	cmpne	r2,r2,zero
 80005c0:	10803fcc 	andi	r2,r2,255
}
 80005c4:	e037883a 	mov	sp,fp
 80005c8:	dfc00117 	ldw	ra,4(sp)
 80005cc:	df000017 	ldw	fp,0(sp)
 80005d0:	dec00204 	addi	sp,sp,8
 80005d4:	f800283a 	ret

080005d8 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
 80005d8:	defffd04 	addi	sp,sp,-12
 80005dc:	dfc00215 	stw	ra,8(sp)
 80005e0:	df000115 	stw	fp,4(sp)
 80005e4:	df000104 	addi	fp,sp,4
 80005e8:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
 80005ec:	00000206 	br	80005f8 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
 80005f0:	e13fff17 	ldw	r4,-4(fp)
 80005f4:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
 80005f8:	e13fff17 	ldw	r4,-4(fp)
 80005fc:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 8000600:	1004c03a 	cmpne	r2,r2,zero
 8000604:	10803fcc 	andi	r2,r2,255
 8000608:	103ff91e 	bne	r2,zero,80005f0 <__alt_data_end+0xfc0005f0>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
 800060c:	0001883a 	nop
 8000610:	e037883a 	mov	sp,fp
 8000614:	dfc00117 	ldw	ra,4(sp)
 8000618:	df000017 	ldw	fp,0(sp)
 800061c:	dec00204 	addi	sp,sp,8
 8000620:	f800283a 	ret

08000624 <_Z7bt_taskv>:
volatile int *input = (volatile int *) 0x0a800000; /* input image */
volatile int *id = (volatile int *) 0x0a900000; /* tag id */


int bt_task()
{
 8000624:	deffe004 	addi	sp,sp,-128
 8000628:	dfc01f15 	stw	ra,124(sp)
 800062c:	df001e15 	stw	fp,120(sp)
 8000630:	ddc01d15 	stw	r23,116(sp)
 8000634:	dd801c15 	stw	r22,112(sp)
 8000638:	dd401b15 	stw	r21,108(sp)
 800063c:	dd001a15 	stw	r20,104(sp)
 8000640:	dcc01915 	stw	r19,100(sp)
 8000644:	dc801815 	stw	r18,96(sp)
 8000648:	dc401715 	stw	r17,92(sp)
 800064c:	dc001615 	stw	r16,88(sp)
 8000650:	df001e04 	addi	fp,sp,120
 8000654:	00820034 	movhi	r2,2048
 8000658:	1084c004 	addi	r2,r2,4864
 800065c:	e0bfee15 	stw	r2,-72(fp)
 8000660:	00820034 	movhi	r2,2048
 8000664:	109be904 	addi	r2,r2,28580
 8000668:	e0bfef15 	stw	r2,-68(fp)
 800066c:	e0bff004 	addi	r2,fp,-64
 8000670:	e0ffe204 	addi	r3,fp,-120
 8000674:	10c00015 	stw	r3,0(r2)
 8000678:	00c20034 	movhi	r3,2048
 800067c:	18c20804 	addi	r3,r3,2080
 8000680:	10c00115 	stw	r3,4(r2)
 8000684:	16c00215 	stw	sp,8(r2)
 8000688:	e0bfe804 	addi	r2,fp,-96
 800068c:	1009883a 	mov	r4,r2
 8000690:	80029280 	call	8002928 <_Unwind_SjLj_Register>
  BTUart BT_UART;
 8000694:	e0ffe504 	addi	r3,fp,-108
 8000698:	00bfffc4 	movi	r2,-1
 800069c:	e0bfe915 	stw	r2,-92(fp)
 80006a0:	1809883a 	mov	r4,r3
 80006a4:	800026c0 	call	800026c <_ZN6BTUartC1Ev>
  int dma_done = 0, count = 0;
 80006a8:	e03fe315 	stw	zero,-116(fp)
 80006ac:	e03fe215 	stw	zero,-120(fp)

  int init_success = BT_UART.open(BT_RS232_UART_NAME);
 80006b0:	e0bfe504 	addi	r2,fp,-108
 80006b4:	1009883a 	mov	r4,r2
 80006b8:	01420034 	movhi	r5,2048
 80006bc:	00800044 	movi	r2,1
 80006c0:	e0bfe915 	stw	r2,-92(fp)
 80006c4:	295c0304 	addi	r5,r5,28684
 80006c8:	800031c0 	call	800031c <_ZN6BTUart4openEPKc>
 80006cc:	e0bfe415 	stw	r2,-112(fp)
  BT_UART.flush();
 80006d0:	e0bfe504 	addi	r2,fp,-108
 80006d4:	1009883a 	mov	r4,r2
 80006d8:	80005d80 	call	80005d8 <_ZN6BTUart5flushEv>

  if (init_success)
 80006dc:	e0bfe417 	ldw	r2,-112(fp)
 80006e0:	10000326 	beq	r2,zero,80006f0 <_Z7bt_taskv+0xcc>
    printf("INIT SUCCESS: RS232 UART port.\n");
 80006e4:	01020034 	movhi	r4,2048
 80006e8:	211c0804 	addi	r4,r4,28704
 80006ec:	800344c0 	call	800344c <puts>


  printf("START READING FROM UART FIFO ...\n");
 80006f0:	01020034 	movhi	r4,2048
 80006f4:	00800044 	movi	r2,1
 80006f8:	e0bfe915 	stw	r2,-92(fp)
 80006fc:	211c1004 	addi	r4,r4,28736
 8000700:	800344c0 	call	800344c <puts>

  while (1) {
    if (BT_UART.read_ready()) {
 8000704:	e0ffe504 	addi	r3,fp,-108
 8000708:	00800044 	movi	r2,1
 800070c:	e0bfe915 	stw	r2,-92(fp)
 8000710:	1809883a 	mov	r4,r3
 8000714:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 8000718:	1004c03a 	cmpne	r2,r2,zero
 800071c:	10803fcc 	andi	r2,r2,255
 8000720:	103ff826 	beq	r2,zero,8000704 <__alt_data_end+0xfc000704>
      if (count < INPUT_SIZE) {
 8000724:	e0bfe217 	ldw	r2,-120(fp)
 8000728:	10815e08 	cmpgei	r2,r2,1400
 800072c:	1000191e 	bne	r2,zero,8000794 <_Z7bt_taskv+0x170>
        input[count] = BT_UART.read_s();  // Store received image data in 'input' array
 8000730:	d0e00417 	ldw	r3,-32752(gp)
 8000734:	e0bfe217 	ldw	r2,-120(fp)
 8000738:	1085883a 	add	r2,r2,r2
 800073c:	1085883a 	add	r2,r2,r2
 8000740:	1885883a 	add	r2,r3,r2
 8000744:	e0bff515 	stw	r2,-44(fp)
 8000748:	e0bfe504 	addi	r2,fp,-108
 800074c:	1009883a 	mov	r4,r2
 8000750:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 8000754:	e0fff517 	ldw	r3,-44(fp)
 8000758:	18800015 	stw	r2,0(r3)
        printf("%i ", input[count]);
 800075c:	d0e00417 	ldw	r3,-32752(gp)
 8000760:	e0bfe217 	ldw	r2,-120(fp)
 8000764:	1085883a 	add	r2,r2,r2
 8000768:	1085883a 	add	r2,r2,r2
 800076c:	1885883a 	add	r2,r3,r2
 8000770:	10800017 	ldw	r2,0(r2)
 8000774:	01020034 	movhi	r4,2048
 8000778:	211c1904 	addi	r4,r4,28772
 800077c:	100b883a 	mov	r5,r2
 8000780:	80033800 	call	8003380 <printf>
        count++;
 8000784:	e0bfe217 	ldw	r2,-120(fp)
 8000788:	10800044 	addi	r2,r2,1
 800078c:	e0bfe215 	stw	r2,-120(fp)
 8000790:	003fdc06 	br	8000704 <__alt_data_end+0xfc000704>
      } else {
        while (!BT_UART.read_ready()) {} // Wait for next integer (dynamodb entry id: require to store result in the correct entry in db)
 8000794:	0001883a 	nop
 8000798:	e0ffe504 	addi	r3,fp,-108
 800079c:	00800044 	movi	r2,1
 80007a0:	e0bfe915 	stw	r2,-92(fp)
 80007a4:	1809883a 	mov	r4,r3
 80007a8:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 80007ac:	1005003a 	cmpeq	r2,r2,zero
 80007b0:	10803fcc 	andi	r2,r2,255
 80007b4:	103ff81e 	bne	r2,zero,8000798 <__alt_data_end+0xfc000798>
        id[0] = BT_UART.read_s();
 80007b8:	d0a00517 	ldw	r2,-32748(gp)
 80007bc:	e0bff615 	stw	r2,-40(fp)
 80007c0:	e0bfe504 	addi	r2,fp,-108
 80007c4:	1009883a 	mov	r4,r2
 80007c8:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 80007cc:	e0fff617 	ldw	r3,-40(fp)
 80007d0:	18800015 	stw	r2,0(r3)
        printf("\nTAG ID: %d\n", id[0]);
 80007d4:	d0a00517 	ldw	r2,-32748(gp)
 80007d8:	10800017 	ldw	r2,0(r2)
 80007dc:	01020034 	movhi	r4,2048
 80007e0:	211c1a04 	addi	r4,r4,28776
 80007e4:	100b883a 	mov	r5,r2
 80007e8:	80033800 	call	8003380 <printf>

        // Write to DMA control port slave address to start DNN accelerator on HPS side
        dma_done = start_dma();
 80007ec:	800095c0 	call	800095c <_Z9start_dmav>
 80007f0:	e0bfe315 	stw	r2,-116(fp)

        if (dma_done)
 80007f4:	e0bfe317 	ldw	r2,-116(fp)
 80007f8:	10000226 	beq	r2,zero,8000804 <_Z7bt_taskv+0x1e0>
          dma_done = 0;
 80007fc:	e03fe315 	stw	zero,-116(fp)
 8000800:	00000506 	br	8000818 <_Z7bt_taskv+0x1f4>
        else
          printf("DMA ERROR: Start DMA falied.\n");
 8000804:	01020034 	movhi	r4,2048
 8000808:	00800044 	movi	r2,1
 800080c:	e0bfe915 	stw	r2,-92(fp)
 8000810:	211c1e04 	addi	r4,r4,28792
 8000814:	800344c0 	call	800344c <puts>

        count = 0;  // Reset counter, wait for next image
 8000818:	e03fe215 	stw	zero,-120(fp)
 800081c:	003fb906 	br	8000704 <__alt_data_end+0xfc000704>
 8000820:	e7001e04 	addi	fp,fp,120
 8000824:	e0bfea17 	ldw	r2,-88(fp)
 8000828:	e0bff715 	stw	r2,-36(fp)
      }
    }
  }

  return 0;
 800082c:	e0bfe504 	addi	r2,fp,-108
 8000830:	e03fe915 	stw	zero,-92(fp)
 8000834:	1009883a 	mov	r4,r2
 8000838:	800029c0 	call	800029c <_ZN6BTUartD1Ev>
 800083c:	e0fff717 	ldw	r3,-36(fp)
 8000840:	00bfffc4 	movi	r2,-1
 8000844:	e0bfe915 	stw	r2,-92(fp)
 8000848:	1809883a 	mov	r4,r3
 800084c:	8002b240 	call	8002b24 <_Unwind_SjLj_Resume>

08000850 <alt_dma_txchan_close>:
 * system that it has finished with a given DMA transmit channel. This is only
 * provided for completness.
 */

static ALT_INLINE int alt_dma_txchan_close (alt_dma_txchan dma)
{
 8000850:	defffe04 	addi	sp,sp,-8
 8000854:	df000115 	stw	fp,4(sp)
 8000858:	df000104 	addi	fp,sp,4
 800085c:	e13fff15 	stw	r4,-4(fp)
  return 0;
 8000860:	0005883a 	mov	r2,zero
}
 8000864:	e037883a 	mov	sp,fp
 8000868:	df000017 	ldw	fp,0(sp)
 800086c:	dec00104 	addi	sp,sp,4
 8000870:	f800283a 	ret

08000874 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
 8000874:	defff904 	addi	sp,sp,-28
 8000878:	dfc00615 	stw	ra,24(sp)
 800087c:	df000515 	stw	fp,20(sp)
 8000880:	df000504 	addi	fp,sp,20
 8000884:	e13ffc15 	stw	r4,-16(fp)
 8000888:	e17ffd15 	stw	r5,-12(fp)
 800088c:	e1bffe15 	stw	r6,-8(fp)
 8000890:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
 8000894:	e0bffc17 	ldw	r2,-16(fp)
 8000898:	10000a26 	beq	r2,zero,80008c4 <alt_dma_txchan_send+0x50>
 800089c:	e0bffc17 	ldw	r2,-16(fp)
 80008a0:	10800417 	ldw	r2,16(r2)
 80008a4:	e0c00217 	ldw	r3,8(fp)
 80008a8:	d8c00015 	stw	r3,0(sp)
 80008ac:	e13ffc17 	ldw	r4,-16(fp)
 80008b0:	e17ffd17 	ldw	r5,-12(fp)
 80008b4:	e1bffe17 	ldw	r6,-8(fp)
 80008b8:	e1ffff17 	ldw	r7,-4(fp)
 80008bc:	103ee83a 	callr	r2
 80008c0:	00000106 	br	80008c8 <alt_dma_txchan_send+0x54>
 80008c4:	00bffb44 	movi	r2,-19
}
 80008c8:	e037883a 	mov	sp,fp
 80008cc:	dfc00117 	ldw	ra,4(sp)
 80008d0:	df000017 	ldw	fp,0(sp)
 80008d4:	dec00204 	addi	sp,sp,8
 80008d8:	f800283a 	ret

080008dc <alt_dma_txchan_ioctl>:
 */

static ALT_INLINE int alt_dma_txchan_ioctl (alt_dma_txchan dma, 
              int            req, 
              void*          arg)
{
 80008dc:	defffb04 	addi	sp,sp,-20
 80008e0:	dfc00415 	stw	ra,16(sp)
 80008e4:	df000315 	stw	fp,12(sp)
 80008e8:	df000304 	addi	fp,sp,12
 80008ec:	e13ffd15 	stw	r4,-12(fp)
 80008f0:	e17ffe15 	stw	r5,-8(fp)
 80008f4:	e1bfff15 	stw	r6,-4(fp)
  return dma ? dma->ioctl (dma, req, arg) : -ENODEV;
 80008f8:	e0bffd17 	ldw	r2,-12(fp)
 80008fc:	10000726 	beq	r2,zero,800091c <alt_dma_txchan_ioctl+0x40>
 8000900:	e0bffd17 	ldw	r2,-12(fp)
 8000904:	10800517 	ldw	r2,20(r2)
 8000908:	e13ffd17 	ldw	r4,-12(fp)
 800090c:	e17ffe17 	ldw	r5,-8(fp)
 8000910:	e1bfff17 	ldw	r6,-4(fp)
 8000914:	103ee83a 	callr	r2
 8000918:	00000106 	br	8000920 <alt_dma_txchan_ioctl+0x44>
 800091c:	00bffb44 	movi	r2,-19
}
 8000920:	e037883a 	mov	sp,fp
 8000924:	dfc00117 	ldw	ra,4(sp)
 8000928:	df000017 	ldw	fp,0(sp)
 800092c:	dec00204 	addi	sp,sp,8
 8000930:	f800283a 	ret

08000934 <_Z8dma_donePv>:
volatile int dma_complete = 0; /* flag used to indicate the transaction is complete */


/* function that is called when the transaction completes */
void dma_done(void* handle)
{
 8000934:	defffe04 	addi	sp,sp,-8
 8000938:	df000115 	stw	fp,4(sp)
 800093c:	df000104 	addi	fp,sp,4
 8000940:	e13fff15 	stw	r4,-4(fp)
    dma_complete = 1;
 8000944:	00800044 	movi	r2,1
 8000948:	d0a24015 	stw	r2,-30464(gp)
}
 800094c:	e037883a 	mov	sp,fp
 8000950:	df000017 	ldw	fp,0(sp)
 8000954:	dec00104 	addi	sp,sp,4
 8000958:	f800283a 	ret

0800095c <_Z9start_dmav>:


int start_dma(void)
{
 800095c:	defffc04 	addi	sp,sp,-16
 8000960:	dfc00315 	stw	ra,12(sp)
 8000964:	df000215 	stw	fp,8(sp)
 8000968:	df000204 	addi	fp,sp,8
    alt_dma_txchan tx;

    /* Obtain a handle for the device */
    if ((tx = alt_dma_txchan_open (DMA_FPGA_TO_HPS_NAME)) == NULL)
 800096c:	01020034 	movhi	r4,2048
 8000970:	211c2604 	addi	r4,r4,28824
 8000974:	80045b00 	call	80045b0 <alt_dma_txchan_open>
 8000978:	e0bfff15 	stw	r2,-4(fp)
 800097c:	e0bfff17 	ldw	r2,-4(fp)
 8000980:	1005003a 	cmpeq	r2,r2,zero
 8000984:	10803fcc 	andi	r2,r2,255
 8000988:	10000526 	beq	r2,zero,80009a0 <_Z9start_dmav+0x44>
    {
        printf ("Error: failed to open device\n");
 800098c:	01020034 	movhi	r4,2048
 8000990:	211c2c04 	addi	r4,r4,28848
 8000994:	800344c0 	call	800344c <puts>
        exit (1);
 8000998:	01000044 	movi	r4,1
 800099c:	8002c580 	call	8002c58 <exit>
    }
    else
    {
        alt_dma_txchan_ioctl(tx, ALT_DMA_TX_ONLY_ON, dnn_acc);
 80009a0:	d0a00617 	ldw	r2,-32744(gp)
 80009a4:	e13fff17 	ldw	r4,-4(fp)
 80009a8:	014000c4 	movi	r5,3
 80009ac:	100d883a 	mov	r6,r2
 80009b0:	80008dc0 	call	80008dc <alt_dma_txchan_ioctl>

        /* Post the transmit request */
        if (alt_dma_txchan_send (tx, tag_id, 1, dma_done, NULL) < 0)
 80009b4:	d0a00717 	ldw	r2,-32740(gp)
 80009b8:	d8000015 	stw	zero,0(sp)
 80009bc:	e13fff17 	ldw	r4,-4(fp)
 80009c0:	100b883a 	mov	r5,r2
 80009c4:	01800044 	movi	r6,1
 80009c8:	01c20034 	movhi	r7,2048
 80009cc:	39c24d04 	addi	r7,r7,2356
 80009d0:	80008740 	call	8000874 <alt_dma_txchan_send>
 80009d4:	1004d7fa 	srli	r2,r2,31
 80009d8:	10803fcc 	andi	r2,r2,255
 80009dc:	10000526 	beq	r2,zero,80009f4 <_Z9start_dmav+0x98>
        {
            printf ("Error: failed to post transmit request\n");
 80009e0:	01020034 	movhi	r4,2048
 80009e4:	211c3404 	addi	r4,r4,28880
 80009e8:	800344c0 	call	800344c <puts>
            exit (1);
 80009ec:	01000044 	movi	r4,1
 80009f0:	8002c580 	call	8002c58 <exit>
        }
        /* Wait for the transaction to complete */
        while (!dma_complete);
 80009f4:	0001883a 	nop
 80009f8:	d0a24017 	ldw	r2,-30464(gp)
 80009fc:	1005003a 	cmpeq	r2,r2,zero
 8000a00:	10803fcc 	andi	r2,r2,255
 8000a04:	103ffc1e 	bne	r2,zero,80009f8 <__alt_data_end+0xfc0009f8>
        
        printf ("Transaction complete\n");
 8000a08:	01020034 	movhi	r4,2048
 8000a0c:	211c3e04 	addi	r4,r4,28920
 8000a10:	800344c0 	call	800344c <puts>
        alt_dma_txchan_close (tx);
 8000a14:	e13fff17 	ldw	r4,-4(fp)
 8000a18:	80008500 	call	8000850 <alt_dma_txchan_close>
    }

    return dma_complete;
 8000a1c:	d0a24017 	ldw	r2,-30464(gp)
 8000a20:	e037883a 	mov	sp,fp
 8000a24:	dfc00117 	ldw	ra,4(sp)
 8000a28:	df000017 	ldw	fp,0(sp)
 8000a2c:	dec00204 	addi	sp,sp,8
 8000a30:	f800283a 	ret

08000a34 <main>:
#include <stdio.h>
#include "../../src/terasic_includes.h"
#include "../../src/tasks.h"

int main()
{
 8000a34:	defffe04 	addi	sp,sp,-8
 8000a38:	dfc00115 	stw	ra,4(sp)
 8000a3c:	df000015 	stw	fp,0(sp)
 8000a40:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION: BLUETOOTH TEST\n");
 8000a44:	01020034 	movhi	r4,2048
 8000a48:	211c4404 	addi	r4,r4,28944
 8000a4c:	800344c0 	call	800344c <puts>
  printf("===========================================\n\n");
 8000a50:	01020034 	movhi	r4,2048
 8000a54:	211c5004 	addi	r4,r4,28992
 8000a58:	800344c0 	call	800344c <puts>

  bt_task();
 8000a5c:	80006240 	call	8000624 <_Z7bt_taskv>

  return 0;
 8000a60:	0005883a 	mov	r2,zero
}
 8000a64:	e037883a 	mov	sp,fp
 8000a68:	dfc00117 	ldw	ra,4(sp)
 8000a6c:	df000017 	ldw	fp,0(sp)
 8000a70:	dec00204 	addi	sp,sp,8
 8000a74:	f800283a 	ret

08000a78 <_ZL12read_sleb128PKhPl>:
 8000a78:	0011883a 	mov	r8,zero
 8000a7c:	000d883a 	mov	r6,zero
 8000a80:	21c00003 	ldbu	r7,0(r4)
 8000a84:	20800044 	addi	r2,r4,1
 8000a88:	1009883a 	mov	r4,r2
 8000a8c:	38c01fcc 	andi	r3,r7,127
 8000a90:	1986983a 	sll	r3,r3,r6
 8000a94:	3a403fcc 	andi	r9,r7,255
 8000a98:	4a40201c 	xori	r9,r9,128
 8000a9c:	4a7fe004 	addi	r9,r9,-128
 8000aa0:	40d0b03a 	or	r8,r8,r3
 8000aa4:	318001c4 	addi	r6,r6,7
 8000aa8:	483ff516 	blt	r9,zero,8000a80 <__alt_data_end+0xfc000a80>
 8000aac:	00c007c4 	movi	r3,31
 8000ab0:	19800536 	bltu	r3,r6,8000ac8 <_ZL12read_sleb128PKhPl+0x50>
 8000ab4:	39c0100c 	andi	r7,r7,64
 8000ab8:	38000326 	beq	r7,zero,8000ac8 <_ZL12read_sleb128PKhPl+0x50>
 8000abc:	00ffffc4 	movi	r3,-1
 8000ac0:	198c983a 	sll	r6,r3,r6
 8000ac4:	3210b03a 	or	r8,r6,r8
 8000ac8:	2a000015 	stw	r8,0(r5)
 8000acc:	f800283a 	ret

08000ad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 8000ad0:	28800017 	ldw	r2,0(r5)
 8000ad4:	30c00017 	ldw	r3,0(r6)
 8000ad8:	defffb04 	addi	sp,sp,-20
 8000adc:	10800217 	ldw	r2,8(r2)
 8000ae0:	dc400315 	stw	r17,12(sp)
 8000ae4:	dc000215 	stw	r16,8(sp)
 8000ae8:	d9400115 	stw	r5,4(sp)
 8000aec:	dfc00415 	stw	ra,16(sp)
 8000af0:	2021883a 	mov	r16,r4
 8000af4:	d8c00015 	stw	r3,0(sp)
 8000af8:	2809883a 	mov	r4,r5
 8000afc:	3023883a 	mov	r17,r6
 8000b00:	103ee83a 	callr	r2
 8000b04:	10803fcc 	andi	r2,r2,255
 8000b08:	d9400117 	ldw	r5,4(sp)
 8000b0c:	10000326 	beq	r2,zero,8000b1c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
 8000b10:	d8800017 	ldw	r2,0(sp)
 8000b14:	10800017 	ldw	r2,0(r2)
 8000b18:	d8800015 	stw	r2,0(sp)
 8000b1c:	80800017 	ldw	r2,0(r16)
 8000b20:	8009883a 	mov	r4,r16
 8000b24:	d80d883a 	mov	r6,sp
 8000b28:	10800417 	ldw	r2,16(r2)
 8000b2c:	01c00044 	movi	r7,1
 8000b30:	103ee83a 	callr	r2
 8000b34:	10c03fcc 	andi	r3,r2,255
 8000b38:	18000226 	beq	r3,zero,8000b44 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
 8000b3c:	d8c00017 	ldw	r3,0(sp)
 8000b40:	88c00015 	stw	r3,0(r17)
 8000b44:	dfc00417 	ldw	ra,16(sp)
 8000b48:	dc400317 	ldw	r17,12(sp)
 8000b4c:	dc000217 	ldw	r16,8(sp)
 8000b50:	dec00504 	addi	sp,sp,20
 8000b54:	f800283a 	ret

08000b58 <_ZL21size_of_encoded_valueh>:
 8000b58:	deffff04 	addi	sp,sp,-4
 8000b5c:	dfc00015 	stw	ra,0(sp)
 8000b60:	00803fc4 	movi	r2,255
 8000b64:	20802026 	beq	r4,r2,8000be8 <_ZL21size_of_encoded_valueh+0x90>
 8000b68:	210001cc 	andi	r4,r4,7
 8000b6c:	00800144 	movi	r2,5
 8000b70:	11001c36 	bltu	r2,r4,8000be4 <_ZL21size_of_encoded_valueh+0x8c>
 8000b74:	200890ba 	slli	r4,r4,2
 8000b78:	00820034 	movhi	r2,2048
 8000b7c:	1082e304 	addi	r2,r2,2956
 8000b80:	2089883a 	add	r4,r4,r2
 8000b84:	20800017 	ldw	r2,0(r4)
 8000b88:	1000683a 	jmp	r2
 8000b8c:	08000ba4 	muli	zero,at,46
 8000b90:	08000be4 	muli	zero,at,47
 8000b94:	08000bb4 	orhi	zero,at,46
 8000b98:	08000ba4 	muli	zero,at,46
 8000b9c:	08000bd4 	ori	zero,at,47
 8000ba0:	08000bc4 	addi	zero,at,47
 8000ba4:	00800104 	movi	r2,4
 8000ba8:	dfc00017 	ldw	ra,0(sp)
 8000bac:	dec00104 	addi	sp,sp,4
 8000bb0:	f800283a 	ret
 8000bb4:	00800084 	movi	r2,2
 8000bb8:	dfc00017 	ldw	ra,0(sp)
 8000bbc:	dec00104 	addi	sp,sp,4
 8000bc0:	f800283a 	ret
 8000bc4:	00800044 	movi	r2,1
 8000bc8:	dfc00017 	ldw	ra,0(sp)
 8000bcc:	dec00104 	addi	sp,sp,4
 8000bd0:	f800283a 	ret
 8000bd4:	00800204 	movi	r2,8
 8000bd8:	dfc00017 	ldw	ra,0(sp)
 8000bdc:	dec00104 	addi	sp,sp,4
 8000be0:	f800283a 	ret
 8000be4:	8002c400 	call	8002c40 <abort>
 8000be8:	0005883a 	mov	r2,zero
 8000bec:	dfc00017 	ldw	ra,0(sp)
 8000bf0:	dec00104 	addi	sp,sp,4
 8000bf4:	f800283a 	ret

08000bf8 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8000bf8:	defffa04 	addi	sp,sp,-24
 8000bfc:	dc000315 	stw	r16,12(sp)
 8000c00:	dfc00515 	stw	ra,20(sp)
 8000c04:	dc400415 	stw	r17,16(sp)
 8000c08:	00801404 	movi	r2,80
 8000c0c:	2021883a 	mov	r16,r4
 8000c10:	20807526 	beq	r4,r2,8000de8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
 8000c14:	208003cc 	andi	r2,r4,15
 8000c18:	00c00304 	movi	r3,12
 8000c1c:	18807136 	bltu	r3,r2,8000de4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
 8000c20:	100490ba 	slli	r2,r2,2
 8000c24:	00c20034 	movhi	r3,2048
 8000c28:	18c30f04 	addi	r3,r3,3132
 8000c2c:	10c5883a 	add	r2,r2,r3
 8000c30:	10800017 	ldw	r2,0(r2)
 8000c34:	2823883a 	mov	r17,r5
 8000c38:	1000683a 	jmp	r2
 8000c3c:	08000d24 	muli	zero,at,52
 8000c40:	08000d54 	ori	zero,at,53
 8000c44:	08000d0c 	andi	zero,at,52
 8000c48:	08000c70 	cmpltui	zero,at,49
 8000c4c:	08000cdc 	xori	zero,at,51
 8000c50:	08000d90 	cmplti	zero,at,54
 8000c54:	08000de4 	muli	zero,at,55
 8000c58:	08000de4 	muli	zero,at,55
 8000c5c:	08000de4 	muli	zero,at,55
 8000c60:	08000d9c 	xori	zero,at,54
 8000c64:	08000dc0 	call	8000dc <__alt_mem_onchip_sram+0x7e00dc>
 8000c68:	08000c70 	cmpltui	zero,at,49
 8000c6c:	08000cdc 	xori	zero,at,51
 8000c70:	30800043 	ldbu	r2,1(r6)
 8000c74:	30c00083 	ldbu	r3,2(r6)
 8000c78:	310000c3 	ldbu	r4,3(r6)
 8000c7c:	32000003 	ldbu	r8,0(r6)
 8000c80:	1004923a 	slli	r2,r2,8
 8000c84:	1806943a 	slli	r3,r3,16
 8000c88:	2008963a 	slli	r4,r4,24
 8000c8c:	1204b03a 	or	r2,r2,r8
 8000c90:	1884b03a 	or	r2,r3,r2
 8000c94:	2086b03a 	or	r3,r4,r2
 8000c98:	30800104 	addi	r2,r6,4
 8000c9c:	18000926 	beq	r3,zero,8000cc4 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 8000ca0:	81401c0c 	andi	r5,r16,112
 8000ca4:	01000404 	movi	r4,16
 8000ca8:	29005526 	beq	r5,r4,8000e00 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
 8000cac:	84003fcc 	andi	r16,r16,255
 8000cb0:	8400201c 	xori	r16,r16,128
 8000cb4:	843fe004 	addi	r16,r16,-128
 8000cb8:	1c47883a 	add	r3,r3,r17
 8000cbc:	8000010e 	bge	r16,zero,8000cc4 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 8000cc0:	18c00017 	ldw	r3,0(r3)
 8000cc4:	38c00015 	stw	r3,0(r7)
 8000cc8:	dfc00517 	ldw	ra,20(sp)
 8000ccc:	dc400417 	ldw	r17,16(sp)
 8000cd0:	dc000317 	ldw	r16,12(sp)
 8000cd4:	dec00604 	addi	sp,sp,24
 8000cd8:	f800283a 	ret
 8000cdc:	30800043 	ldbu	r2,1(r6)
 8000ce0:	30c00083 	ldbu	r3,2(r6)
 8000ce4:	310000c3 	ldbu	r4,3(r6)
 8000ce8:	32000003 	ldbu	r8,0(r6)
 8000cec:	1004923a 	slli	r2,r2,8
 8000cf0:	1806943a 	slli	r3,r3,16
 8000cf4:	2008963a 	slli	r4,r4,24
 8000cf8:	1204b03a 	or	r2,r2,r8
 8000cfc:	1884b03a 	or	r2,r3,r2
 8000d00:	2086b03a 	or	r3,r4,r2
 8000d04:	30800204 	addi	r2,r6,8
 8000d08:	003fe406 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000d0c:	30c00043 	ldbu	r3,1(r6)
 8000d10:	32000003 	ldbu	r8,0(r6)
 8000d14:	30800084 	addi	r2,r6,2
 8000d18:	1806923a 	slli	r3,r3,8
 8000d1c:	1a06b03a 	or	r3,r3,r8
 8000d20:	003fde06 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000d24:	30800043 	ldbu	r2,1(r6)
 8000d28:	30c00083 	ldbu	r3,2(r6)
 8000d2c:	314000c3 	ldbu	r5,3(r6)
 8000d30:	31000003 	ldbu	r4,0(r6)
 8000d34:	1004923a 	slli	r2,r2,8
 8000d38:	1806943a 	slli	r3,r3,16
 8000d3c:	280a963a 	slli	r5,r5,24
 8000d40:	1104b03a 	or	r2,r2,r4
 8000d44:	1884b03a 	or	r2,r3,r2
 8000d48:	2886b03a 	or	r3,r5,r2
 8000d4c:	30800104 	addi	r2,r6,4
 8000d50:	003fd206 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000d54:	3013883a 	mov	r9,r6
 8000d58:	0007883a 	mov	r3,zero
 8000d5c:	0011883a 	mov	r8,zero
 8000d60:	49000003 	ldbu	r4,0(r9)
 8000d64:	48800044 	addi	r2,r9,1
 8000d68:	1013883a 	mov	r9,r2
 8000d6c:	21401fcc 	andi	r5,r4,127
 8000d70:	2a0a983a 	sll	r5,r5,r8
 8000d74:	21003fcc 	andi	r4,r4,255
 8000d78:	2100201c 	xori	r4,r4,128
 8000d7c:	213fe004 	addi	r4,r4,-128
 8000d80:	1946b03a 	or	r3,r3,r5
 8000d84:	420001c4 	addi	r8,r8,7
 8000d88:	203ff516 	blt	r4,zero,8000d60 <__alt_data_end+0xfc000d60>
 8000d8c:	003fc306 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000d90:	30c00003 	ldbu	r3,0(r6)
 8000d94:	30800044 	addi	r2,r6,1
 8000d98:	003fc006 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000d9c:	3009883a 	mov	r4,r6
 8000da0:	d80b883a 	mov	r5,sp
 8000da4:	d9800115 	stw	r6,4(sp)
 8000da8:	d9c00215 	stw	r7,8(sp)
 8000dac:	8000a780 	call	8000a78 <_ZL12read_sleb128PKhPl>
 8000db0:	d8c00017 	ldw	r3,0(sp)
 8000db4:	d9800117 	ldw	r6,4(sp)
 8000db8:	d9c00217 	ldw	r7,8(sp)
 8000dbc:	003fb706 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000dc0:	30c00043 	ldbu	r3,1(r6)
 8000dc4:	32000003 	ldbu	r8,0(r6)
 8000dc8:	30800084 	addi	r2,r6,2
 8000dcc:	1806923a 	slli	r3,r3,8
 8000dd0:	1a06b03a 	or	r3,r3,r8
 8000dd4:	18ffffcc 	andi	r3,r3,65535
 8000dd8:	18e0001c 	xori	r3,r3,32768
 8000ddc:	18e00004 	addi	r3,r3,-32768
 8000de0:	003fae06 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000de4:	8002c400 	call	8002c40 <abort>
 8000de8:	318000c4 	addi	r6,r6,3
 8000dec:	00bfff04 	movi	r2,-4
 8000df0:	3084703a 	and	r2,r6,r2
 8000df4:	10c00017 	ldw	r3,0(r2)
 8000df8:	10800104 	addi	r2,r2,4
 8000dfc:	003fb106 	br	8000cc4 <__alt_data_end+0xfc000cc4>
 8000e00:	3023883a 	mov	r17,r6
 8000e04:	003fa906 	br	8000cac <__alt_data_end+0xfc000cac>

08000e08 <_ZL15get_ttype_entryP16lsda_header_infom>:
 8000e08:	defffc04 	addi	sp,sp,-16
 8000e0c:	dfc00315 	stw	ra,12(sp)
 8000e10:	dc000215 	stw	r16,8(sp)
 8000e14:	2021883a 	mov	r16,r4
 8000e18:	21000503 	ldbu	r4,20(r4)
 8000e1c:	d9400115 	stw	r5,4(sp)
 8000e20:	8000b580 	call	8000b58 <_ZL21size_of_encoded_valueh>
 8000e24:	d9400117 	ldw	r5,4(sp)
 8000e28:	1009883a 	mov	r4,r2
 8000e2c:	80026f80 	call	80026f8 <__mulsi3>
 8000e30:	81800317 	ldw	r6,12(r16)
 8000e34:	81000503 	ldbu	r4,20(r16)
 8000e38:	81400217 	ldw	r5,8(r16)
 8000e3c:	308dc83a 	sub	r6,r6,r2
 8000e40:	d80f883a 	mov	r7,sp
 8000e44:	8000bf80 	call	8000bf8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8000e48:	d8800017 	ldw	r2,0(sp)
 8000e4c:	dfc00317 	ldw	ra,12(sp)
 8000e50:	dc000217 	ldw	r16,8(sp)
 8000e54:	dec00404 	addi	sp,sp,16
 8000e58:	f800283a 	ret

08000e5c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 8000e5c:	defffb04 	addi	sp,sp,-20
 8000e60:	dc000115 	stw	r16,4(sp)
 8000e64:	24000317 	ldw	r16,12(r4)
 8000e68:	01ce303a 	nor	r7,zero,r7
 8000e6c:	dc800315 	stw	r18,12(sp)
 8000e70:	dc400215 	stw	r17,8(sp)
 8000e74:	dfc00415 	stw	ra,16(sp)
 8000e78:	2023883a 	mov	r17,r4
 8000e7c:	2825883a 	mov	r18,r5
 8000e80:	d9800015 	stw	r6,0(sp)
 8000e84:	81e1883a 	add	r16,r16,r7
 8000e88:	8009883a 	mov	r4,r16
 8000e8c:	000b883a 	mov	r5,zero
 8000e90:	000d883a 	mov	r6,zero
 8000e94:	20800003 	ldbu	r2,0(r4)
 8000e98:	84000044 	addi	r16,r16,1
 8000e9c:	8009883a 	mov	r4,r16
 8000ea0:	10c01fcc 	andi	r3,r2,127
 8000ea4:	1986983a 	sll	r3,r3,r6
 8000ea8:	10803fcc 	andi	r2,r2,255
 8000eac:	1080201c 	xori	r2,r2,128
 8000eb0:	10bfe004 	addi	r2,r2,-128
 8000eb4:	28cab03a 	or	r5,r5,r3
 8000eb8:	318001c4 	addi	r6,r6,7
 8000ebc:	103ff516 	blt	r2,zero,8000e94 <__alt_data_end+0xfc000e94>
 8000ec0:	28000e26 	beq	r5,zero,8000efc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 8000ec4:	8809883a 	mov	r4,r17
 8000ec8:	8000e080 	call	8000e08 <_ZL15get_ttype_entryP16lsda_header_infom>
 8000ecc:	1009883a 	mov	r4,r2
 8000ed0:	900b883a 	mov	r5,r18
 8000ed4:	d80d883a 	mov	r6,sp
 8000ed8:	8000ad00 	call	8000ad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 8000edc:	10c03fcc 	andi	r3,r2,255
 8000ee0:	183fe926 	beq	r3,zero,8000e88 <__alt_data_end+0xfc000e88>
 8000ee4:	dfc00417 	ldw	ra,16(sp)
 8000ee8:	dc800317 	ldw	r18,12(sp)
 8000eec:	dc400217 	ldw	r17,8(sp)
 8000ef0:	dc000117 	ldw	r16,4(sp)
 8000ef4:	dec00504 	addi	sp,sp,20
 8000ef8:	f800283a 	ret
 8000efc:	0005883a 	mov	r2,zero
 8000f00:	003ff806 	br	8000ee4 <__alt_data_end+0xfc000ee4>

08000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8000f04:	deffff04 	addi	sp,sp,-4
 8000f08:	dfc00015 	stw	ra,0(sp)
 8000f0c:	00803fc4 	movi	r2,255
 8000f10:	20800e26 	beq	r4,r2,8000f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8000f14:	20801c0c 	andi	r2,r4,112
 8000f18:	00c00804 	movi	r3,32
 8000f1c:	10c01726 	beq	r2,r3,8000f7c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
 8000f20:	18800e2e 	bgeu	r3,r2,8000f5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
 8000f24:	00c01004 	movi	r3,64
 8000f28:	10c01026 	beq	r2,r3,8000f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 8000f2c:	00c01404 	movi	r3,80
 8000f30:	10c00626 	beq	r2,r3,8000f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8000f34:	00c00c04 	movi	r3,48
 8000f38:	10c00b1e 	bne	r2,r3,8000f68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
 8000f3c:	2809883a 	mov	r4,r5
 8000f40:	dfc00017 	ldw	ra,0(sp)
 8000f44:	dec00104 	addi	sp,sp,4
 8000f48:	8002a001 	jmpi	8002a00 <_Unwind_GetDataRelBase>
 8000f4c:	0005883a 	mov	r2,zero
 8000f50:	dfc00017 	ldw	ra,0(sp)
 8000f54:	dec00104 	addi	sp,sp,4
 8000f58:	f800283a 	ret
 8000f5c:	103ffb26 	beq	r2,zero,8000f4c <__alt_data_end+0xfc000f4c>
 8000f60:	00c00404 	movi	r3,16
 8000f64:	10fff926 	beq	r2,r3,8000f4c <__alt_data_end+0xfc000f4c>
 8000f68:	8002c400 	call	8002c40 <abort>
 8000f6c:	2809883a 	mov	r4,r5
 8000f70:	dfc00017 	ldw	ra,0(sp)
 8000f74:	dec00104 	addi	sp,sp,4
 8000f78:	80029f01 	jmpi	80029f0 <_Unwind_GetRegionStart>
 8000f7c:	2809883a 	mov	r4,r5
 8000f80:	dfc00017 	ldw	ra,0(sp)
 8000f84:	dec00104 	addi	sp,sp,4
 8000f88:	8002a081 	jmpi	8002a08 <_Unwind_GetTextRelBase>

08000f8c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 8000f8c:	defff104 	addi	sp,sp,-60
 8000f90:	dd800b15 	stw	r22,44(sp)
 8000f94:	382dd23a 	srai	r22,r7,8
 8000f98:	dd400a15 	stw	r21,40(sp)
 8000f9c:	dd000915 	stw	r20,36(sp)
 8000fa0:	dfc00e15 	stw	ra,56(sp)
 8000fa4:	df000d15 	stw	fp,52(sp)
 8000fa8:	ddc00c15 	stw	r23,48(sp)
 8000fac:	dcc00815 	stw	r19,32(sp)
 8000fb0:	dc800715 	stw	r18,28(sp)
 8000fb4:	dc400615 	stw	r17,24(sp)
 8000fb8:	dc000515 	stw	r16,20(sp)
 8000fbc:	d9c00315 	stw	r7,12(sp)
 8000fc0:	d9400215 	stw	r5,8(sp)
 8000fc4:	2029883a 	mov	r20,r4
 8000fc8:	dd400f17 	ldw	r21,60(sp)
 8000fcc:	b000010e 	bge	r22,zero,8000fd4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
 8000fd0:	05adc83a 	sub	r22,zero,r22
 8000fd4:	01000144 	movi	r4,5
 8000fd8:	000b883a 	mov	r5,zero
 8000fdc:	d9800415 	stw	r6,16(sp)
 8000fe0:	8000f040 	call	8000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8000fe4:	d9800417 	ldw	r6,16(sp)
 8000fe8:	100b883a 	mov	r5,r2
 8000fec:	d9c00104 	addi	r7,sp,4
 8000ff0:	01000144 	movi	r4,5
 8000ff4:	8000bf80 	call	8000bf8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8000ff8:	1009883a 	mov	r4,r2
 8000ffc:	017ffe44 	movi	r5,-7
 8001000:	1021883a 	mov	r16,r2
 8001004:	80026f80 	call	80026f8 <__mulsi3>
 8001008:	1027883a 	mov	r19,r2
 800100c:	002f883a 	mov	r23,zero
 8001010:	84400003 	ldbu	r17,0(r16)
 8001014:	8009883a 	mov	r4,r16
 8001018:	014001c4 	movi	r5,7
 800101c:	80026f80 	call	80026f8 <__mulsi3>
 8001020:	88c01fcc 	andi	r3,r17,127
 8001024:	14c5883a 	add	r2,r2,r19
 8001028:	1886983a 	sll	r3,r3,r2
 800102c:	8c403fcc 	andi	r17,r17,255
 8001030:	8c40201c 	xori	r17,r17,128
 8001034:	8c7fe004 	addi	r17,r17,-128
 8001038:	84000044 	addi	r16,r16,1
 800103c:	b8eeb03a 	or	r23,r23,r3
 8001040:	883ff316 	blt	r17,zero,8001010 <__alt_data_end+0xfc001010>
 8001044:	85e1883a 	add	r16,r16,r23
 8001048:	8009883a 	mov	r4,r16
 800104c:	017ffe44 	movi	r5,-7
 8001050:	80026f80 	call	80026f8 <__mulsi3>
 8001054:	102f883a 	mov	r23,r2
 8001058:	8007883a 	mov	r3,r16
 800105c:	0025883a 	mov	r18,zero
 8001060:	1cc00003 	ldbu	r19,0(r3)
 8001064:	1809883a 	mov	r4,r3
 8001068:	014001c4 	movi	r5,7
 800106c:	1c400044 	addi	r17,r3,1
 8001070:	80026f80 	call	80026f8 <__mulsi3>
 8001074:	98c01fcc 	andi	r3,r19,127
 8001078:	15c5883a 	add	r2,r2,r23
 800107c:	1884983a 	sll	r2,r3,r2
 8001080:	9cc03fcc 	andi	r19,r19,255
 8001084:	9cc0201c 	xori	r19,r19,128
 8001088:	9cffe004 	addi	r19,r19,-128
 800108c:	8807883a 	mov	r3,r17
 8001090:	90a4b03a 	or	r18,r18,r2
 8001094:	983ff216 	blt	r19,zero,8001060 <__alt_data_end+0xfc001060>
 8001098:	b7003fcc 	andi	fp,r22,255
 800109c:	e73fffc4 	addi	fp,fp,-1
 80010a0:	8f39883a 	add	fp,r17,fp
 80010a4:	840000c4 	addi	r16,r16,3
 80010a8:	848d883a 	add	r6,r16,r18
 80010ac:	e009883a 	mov	r4,fp
 80010b0:	017ffe44 	movi	r5,-7
 80010b4:	04ffff04 	movi	r19,-4
 80010b8:	34e6703a 	and	r19,r6,r19
 80010bc:	80026f80 	call	80026f8 <__mulsi3>
 80010c0:	002f883a 	mov	r23,zero
 80010c4:	102d883a 	mov	r22,r2
 80010c8:	e4400003 	ldbu	r17,0(fp)
 80010cc:	e009883a 	mov	r4,fp
 80010d0:	014001c4 	movi	r5,7
 80010d4:	80026f80 	call	80026f8 <__mulsi3>
 80010d8:	88c01fcc 	andi	r3,r17,127
 80010dc:	1585883a 	add	r2,r2,r22
 80010e0:	1886983a 	sll	r3,r3,r2
 80010e4:	8c403fcc 	andi	r17,r17,255
 80010e8:	8c40201c 	xori	r17,r17,128
 80010ec:	e4000044 	addi	r16,fp,1
 80010f0:	8c7fe004 	addi	r17,r17,-128
 80010f4:	b8eeb03a 	or	r23,r23,r3
 80010f8:	8039883a 	mov	fp,r16
 80010fc:	883ff216 	blt	r17,zero,80010c8 <__alt_data_end+0xfc0010c8>
 8001100:	d8800317 	ldw	r2,12(sp)
 8001104:	14803fcc 	andi	r18,r2,255
 8001108:	b8002326 	beq	r23,zero,8001198 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
 800110c:	9009883a 	mov	r4,r18
 8001110:	8000b580 	call	8000b58 <_ZL21size_of_encoded_valueh>
 8001114:	1009883a 	mov	r4,r2
 8001118:	b97fffc4 	addi	r5,r23,-1
 800111c:	80026f80 	call	80026f8 <__mulsi3>
 8001120:	9009883a 	mov	r4,r18
 8001124:	a80b883a 	mov	r5,r21
 8001128:	14cd883a 	add	r6,r2,r19
 800112c:	d80f883a 	mov	r7,sp
 8001130:	8000bf80 	call	8000bf8 <_ZL28read_encoded_value_with_basehjPKhPj>
 8001134:	d9000017 	ldw	r4,0(sp)
 8001138:	a00b883a 	mov	r5,r20
 800113c:	d9800204 	addi	r6,sp,8
 8001140:	8000ad00 	call	8000ad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 8001144:	10c03fcc 	andi	r3,r2,255
 8001148:	1800141e 	bne	r3,zero,800119c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
 800114c:	8009883a 	mov	r4,r16
 8001150:	017ffe44 	movi	r5,-7
 8001154:	80026f80 	call	80026f8 <__mulsi3>
 8001158:	102d883a 	mov	r22,r2
 800115c:	002f883a 	mov	r23,zero
 8001160:	84400003 	ldbu	r17,0(r16)
 8001164:	8009883a 	mov	r4,r16
 8001168:	014001c4 	movi	r5,7
 800116c:	80026f80 	call	80026f8 <__mulsi3>
 8001170:	88c01fcc 	andi	r3,r17,127
 8001174:	1585883a 	add	r2,r2,r22
 8001178:	1886983a 	sll	r3,r3,r2
 800117c:	8c403fcc 	andi	r17,r17,255
 8001180:	8c40201c 	xori	r17,r17,128
 8001184:	8c7fe004 	addi	r17,r17,-128
 8001188:	84000044 	addi	r16,r16,1
 800118c:	b8eeb03a 	or	r23,r23,r3
 8001190:	883ff316 	blt	r17,zero,8001160 <__alt_data_end+0xfc001160>
 8001194:	003fdc06 	br	8001108 <__alt_data_end+0xfc001108>
 8001198:	0005883a 	mov	r2,zero
 800119c:	dfc00e17 	ldw	ra,56(sp)
 80011a0:	df000d17 	ldw	fp,52(sp)
 80011a4:	ddc00c17 	ldw	r23,48(sp)
 80011a8:	dd800b17 	ldw	r22,44(sp)
 80011ac:	dd400a17 	ldw	r21,40(sp)
 80011b0:	dd000917 	ldw	r20,36(sp)
 80011b4:	dcc00817 	ldw	r19,32(sp)
 80011b8:	dc800717 	ldw	r18,28(sp)
 80011bc:	dc400617 	ldw	r17,24(sp)
 80011c0:	dc000517 	ldw	r16,20(sp)
 80011c4:	dec00f04 	addi	sp,sp,60
 80011c8:	f800283a 	ret

080011cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80011cc:	defffb04 	addi	sp,sp,-20
 80011d0:	dcc00315 	stw	r19,12(sp)
 80011d4:	dc400115 	stw	r17,4(sp)
 80011d8:	dc000015 	stw	r16,0(sp)
 80011dc:	dfc00415 	stw	ra,16(sp)
 80011e0:	dc800215 	stw	r18,8(sp)
 80011e4:	2027883a 	mov	r19,r4
 80011e8:	2821883a 	mov	r16,r5
 80011ec:	3023883a 	mov	r17,r6
 80011f0:	20003f26 	beq	r4,zero,80012f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 80011f4:	80029f00 	call	80029f0 <_Unwind_GetRegionStart>
 80011f8:	88800015 	stw	r2,0(r17)
 80011fc:	84800003 	ldbu	r18,0(r16)
 8001200:	00c03fc4 	movi	r3,255
 8001204:	84000044 	addi	r16,r16,1
 8001208:	90c03726 	beq	r18,r3,80012e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 800120c:	9009883a 	mov	r4,r18
 8001210:	980b883a 	mov	r5,r19
 8001214:	8000f040 	call	8000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8001218:	800d883a 	mov	r6,r16
 800121c:	9009883a 	mov	r4,r18
 8001220:	100b883a 	mov	r5,r2
 8001224:	89c00104 	addi	r7,r17,4
 8001228:	8000bf80 	call	8000bf8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800122c:	1021883a 	mov	r16,r2
 8001230:	80c00003 	ldbu	r3,0(r16)
 8001234:	01003fc4 	movi	r4,255
 8001238:	80800044 	addi	r2,r16,1
 800123c:	88c00505 	stb	r3,20(r17)
 8001240:	18c03fcc 	andi	r3,r3,255
 8001244:	19002c26 	beq	r3,r4,80012f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 8001248:	100d883a 	mov	r6,r2
 800124c:	000f883a 	mov	r7,zero
 8001250:	000b883a 	mov	r5,zero
 8001254:	30c00003 	ldbu	r3,0(r6)
 8001258:	10800044 	addi	r2,r2,1
 800125c:	100d883a 	mov	r6,r2
 8001260:	19001fcc 	andi	r4,r3,127
 8001264:	2148983a 	sll	r4,r4,r5
 8001268:	18c03fcc 	andi	r3,r3,255
 800126c:	18c0201c 	xori	r3,r3,128
 8001270:	18ffe004 	addi	r3,r3,-128
 8001274:	390eb03a 	or	r7,r7,r4
 8001278:	294001c4 	addi	r5,r5,7
 800127c:	183ff516 	blt	r3,zero,8001254 <__alt_data_end+0xfc001254>
 8001280:	11cf883a 	add	r7,r2,r7
 8001284:	89c00315 	stw	r7,12(r17)
 8001288:	10c00003 	ldbu	r3,0(r2)
 800128c:	000f883a 	mov	r7,zero
 8001290:	10800044 	addi	r2,r2,1
 8001294:	88c00545 	stb	r3,21(r17)
 8001298:	000b883a 	mov	r5,zero
 800129c:	10c00003 	ldbu	r3,0(r2)
 80012a0:	10800044 	addi	r2,r2,1
 80012a4:	19001fcc 	andi	r4,r3,127
 80012a8:	2148983a 	sll	r4,r4,r5
 80012ac:	18c03fcc 	andi	r3,r3,255
 80012b0:	18c0201c 	xori	r3,r3,128
 80012b4:	18ffe004 	addi	r3,r3,-128
 80012b8:	390eb03a 	or	r7,r7,r4
 80012bc:	294001c4 	addi	r5,r5,7
 80012c0:	183ff616 	blt	r3,zero,800129c <__alt_data_end+0xfc00129c>
 80012c4:	11cf883a 	add	r7,r2,r7
 80012c8:	89c00415 	stw	r7,16(r17)
 80012cc:	dfc00417 	ldw	ra,16(sp)
 80012d0:	dcc00317 	ldw	r19,12(sp)
 80012d4:	dc800217 	ldw	r18,8(sp)
 80012d8:	dc400117 	ldw	r17,4(sp)
 80012dc:	dc000017 	ldw	r16,0(sp)
 80012e0:	dec00504 	addi	sp,sp,20
 80012e4:	f800283a 	ret
 80012e8:	88800115 	stw	r2,4(r17)
 80012ec:	003fd006 	br	8001230 <__alt_data_end+0xfc001230>
 80012f0:	0005883a 	mov	r2,zero
 80012f4:	003fc006 	br	80011f8 <__alt_data_end+0xfc0011f8>
 80012f8:	88000315 	stw	zero,12(r17)
 80012fc:	003fe206 	br	8001288 <__alt_data_end+0xfc001288>

08001300 <__gxx_personality_sj0>:
 8001300:	00820034 	movhi	r2,2048
 8001304:	deffde04 	addi	sp,sp,-136
 8001308:	1084c004 	addi	r2,r2,4864
 800130c:	d8801015 	stw	r2,64(sp)
 8001310:	00820034 	movhi	r2,2048
 8001314:	109beb04 	addi	r2,r2,28588
 8001318:	d8801115 	stw	r2,68(sp)
 800131c:	00820034 	movhi	r2,2048
 8001320:	1085fb04 	addi	r2,r2,6124
 8001324:	d9001715 	stw	r4,92(sp)
 8001328:	d9000a04 	addi	r4,sp,40
 800132c:	d8801315 	stw	r2,76(sp)
 8001330:	dfc02115 	stw	ra,132(sp)
 8001334:	df002015 	stw	fp,128(sp)
 8001338:	dec01215 	stw	sp,72(sp)
 800133c:	dec01415 	stw	sp,80(sp)
 8001340:	d9401a15 	stw	r5,104(sp)
 8001344:	d9801815 	stw	r6,96(sp)
 8001348:	d9c01915 	stw	r7,100(sp)
 800134c:	80029280 	call	8002928 <_Unwind_SjLj_Register>
 8001350:	d8c01717 	ldw	r3,92(sp)
 8001354:	d8000915 	stw	zero,36(sp)
 8001358:	d8000815 	stw	zero,32(sp)
 800135c:	00800044 	movi	r2,1
 8001360:	18800926 	beq	r3,r2,8001388 <__gxx_personality_sj0+0x88>
 8001364:	014000c4 	movi	r5,3
 8001368:	d9401715 	stw	r5,92(sp)
 800136c:	d9000a04 	addi	r4,sp,40
 8001370:	80029400 	call	8002940 <_Unwind_SjLj_Unregister>
 8001374:	d8801717 	ldw	r2,92(sp)
 8001378:	dfc02117 	ldw	ra,132(sp)
 800137c:	df002017 	ldw	fp,128(sp)
 8001380:	dec02204 	addi	sp,sp,136
 8001384:	f800283a 	ret
 8001388:	d9401817 	ldw	r5,96(sp)
 800138c:	012f3574 	movhi	r4,48341
 8001390:	21354004 	addi	r4,r4,-11008
 8001394:	2909883a 	add	r4,r5,r4
 8001398:	2145803a 	cmpltu	r2,r4,r5
 800139c:	d9401917 	ldw	r5,100(sp)
 80013a0:	d8c01b05 	stb	r3,108(sp)
 80013a4:	00ee2cb4 	movhi	r3,47282
 80013a8:	18eaaf04 	addi	r3,r3,-21828
 80013ac:	28c7883a 	add	r3,r5,r3
 80013b0:	10c5883a 	add	r2,r2,r3
 80013b4:	10003526 	beq	r2,zero,800148c <__gxx_personality_sj0+0x18c>
 80013b8:	d8c01a17 	ldw	r3,104(sp)
 80013bc:	00800184 	movi	r2,6
 80013c0:	18803826 	beq	r3,r2,80014a4 <__gxx_personality_sj0+0x1a4>
 80013c4:	d9002317 	ldw	r4,140(sp)
 80013c8:	00ffffc4 	movi	r3,-1
 80013cc:	d8c00b15 	stw	r3,44(sp)
 80013d0:	80029e40 	call	80029e4 <_Unwind_GetLanguageSpecificData>
 80013d4:	d8801915 	stw	r2,100(sp)
 80013d8:	1000a326 	beq	r2,zero,8001668 <__gxx_personality_sj0+0x368>
 80013dc:	d9002317 	ldw	r4,140(sp)
 80013e0:	d9401917 	ldw	r5,100(sp)
 80013e4:	d80d883a 	mov	r6,sp
 80013e8:	00bfffc4 	movi	r2,-1
 80013ec:	d8800b15 	stw	r2,44(sp)
 80013f0:	80011cc0 	call	80011cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80013f4:	d9000503 	ldbu	r4,20(sp)
 80013f8:	d9402317 	ldw	r5,140(sp)
 80013fc:	d8801715 	stw	r2,92(sp)
 8001400:	8000f040 	call	8000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8001404:	d9002317 	ldw	r4,140(sp)
 8001408:	d9400804 	addi	r5,sp,32
 800140c:	d8800215 	stw	r2,8(sp)
 8001410:	80029b40 	call	80029b4 <_Unwind_GetIPInfo>
 8001414:	d8c00817 	ldw	r3,32(sp)
 8001418:	1800011e 	bne	r3,zero,8001420 <__gxx_personality_sj0+0x120>
 800141c:	10bfffc4 	addi	r2,r2,-1
 8001420:	10009116 	blt	r2,zero,8001668 <__gxx_personality_sj0+0x368>
 8001424:	10004c1e 	bne	r2,zero,8001558 <__gxx_personality_sj0+0x258>
 8001428:	d8001c15 	stw	zero,112(sp)
 800142c:	00800044 	movi	r2,1
 8001430:	d8001715 	stw	zero,92(sp)
 8001434:	d8001815 	stw	zero,96(sp)
 8001438:	d9001a17 	ldw	r4,104(sp)
 800143c:	20c0004c 	andi	r3,r4,1
 8001440:	18008c26 	beq	r3,zero,8001674 <__gxx_personality_sj0+0x374>
 8001444:	00c00084 	movi	r3,2
 8001448:	10c08726 	beq	r2,r3,8001668 <__gxx_personality_sj0+0x368>
 800144c:	d8801b03 	ldbu	r2,108(sp)
 8001450:	1000d21e 	bne	r2,zero,800179c <__gxx_personality_sj0+0x49c>
 8001454:	d9402217 	ldw	r5,136(sp)
 8001458:	d8801717 	ldw	r2,92(sp)
 800145c:	d8c01817 	ldw	r3,96(sp)
 8001460:	d9001917 	ldw	r4,100(sp)
 8001464:	28bffb15 	stw	r2,-20(r5)
 8001468:	d8800917 	ldw	r2,36(sp)
 800146c:	28fffc15 	stw	r3,-16(r5)
 8001470:	00c00184 	movi	r3,6
 8001474:	28bfff15 	stw	r2,-4(r5)
 8001478:	d8801c17 	ldw	r2,112(sp)
 800147c:	293ffd15 	stw	r4,-12(r5)
 8001480:	d8c01715 	stw	r3,92(sp)
 8001484:	28bffe15 	stw	r2,-8(r5)
 8001488:	003fb806 	br	800136c <__alt_data_end+0xfc00136c>
 800148c:	d8801717 	ldw	r2,92(sp)
 8001490:	113fc936 	bltu	r2,r4,80013b8 <__alt_data_end+0xfc0013b8>
 8001494:	d8c01a17 	ldw	r3,104(sp)
 8001498:	d8001b05 	stb	zero,108(sp)
 800149c:	00800184 	movi	r2,6
 80014a0:	18bfc81e 	bne	r3,r2,80013c4 <__alt_data_end+0xfc0013c4>
 80014a4:	d8801b03 	ldbu	r2,108(sp)
 80014a8:	103fc61e 	bne	r2,zero,80013c4 <__alt_data_end+0xfc0013c4>
 80014ac:	d9002217 	ldw	r4,136(sp)
 80014b0:	d9402217 	ldw	r5,136(sp)
 80014b4:	d8802217 	ldw	r2,136(sp)
 80014b8:	213ffe17 	ldw	r4,-8(r4)
 80014bc:	297ffb17 	ldw	r5,-20(r5)
 80014c0:	10bffd17 	ldw	r2,-12(r2)
 80014c4:	d9001c15 	stw	r4,112(sp)
 80014c8:	d9401715 	stw	r5,92(sp)
 80014cc:	d8801915 	stw	r2,100(sp)
 80014d0:	20008726 	beq	r4,zero,80016f0 <__gxx_personality_sj0+0x3f0>
 80014d4:	d8801717 	ldw	r2,92(sp)
 80014d8:	10006f0e 	bge	r2,zero,8001698 <__gxx_personality_sj0+0x398>
 80014dc:	d9002317 	ldw	r4,140(sp)
 80014e0:	d9401917 	ldw	r5,100(sp)
 80014e4:	d80d883a 	mov	r6,sp
 80014e8:	00bfffc4 	movi	r2,-1
 80014ec:	d8800b15 	stw	r2,44(sp)
 80014f0:	80011cc0 	call	80011cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80014f4:	d9000503 	ldbu	r4,20(sp)
 80014f8:	d9402317 	ldw	r5,140(sp)
 80014fc:	8000f040 	call	8000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8001500:	d9000503 	ldbu	r4,20(sp)
 8001504:	d9402317 	ldw	r5,140(sp)
 8001508:	d8800215 	stw	r2,8(sp)
 800150c:	8000f040 	call	8000f04 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8001510:	d8c02217 	ldw	r3,136(sp)
 8001514:	18bffe15 	stw	r2,-8(r3)
 8001518:	00005f06 	br	8001698 <__gxx_personality_sj0+0x398>
 800151c:	000f883a 	mov	r7,zero
 8001520:	000d883a 	mov	r6,zero
 8001524:	19000003 	ldbu	r4,0(r3)
 8001528:	18c00044 	addi	r3,r3,1
 800152c:	d8c01715 	stw	r3,92(sp)
 8001530:	21401fcc 	andi	r5,r4,127
 8001534:	298a983a 	sll	r5,r5,r6
 8001538:	21003fcc 	andi	r4,r4,255
 800153c:	2100201c 	xori	r4,r4,128
 8001540:	213fe004 	addi	r4,r4,-128
 8001544:	394eb03a 	or	r7,r7,r5
 8001548:	318001c4 	addi	r6,r6,7
 800154c:	203ff516 	blt	r4,zero,8001524 <__alt_data_end+0xfc001524>
 8001550:	10bfffc4 	addi	r2,r2,-1
 8001554:	10000e26 	beq	r2,zero,8001590 <__gxx_personality_sj0+0x290>
 8001558:	d8c01717 	ldw	r3,92(sp)
 800155c:	0011883a 	mov	r8,zero
 8001560:	000d883a 	mov	r6,zero
 8001564:	19000003 	ldbu	r4,0(r3)
 8001568:	18c00044 	addi	r3,r3,1
 800156c:	21401fcc 	andi	r5,r4,127
 8001570:	298a983a 	sll	r5,r5,r6
 8001574:	21003fcc 	andi	r4,r4,255
 8001578:	2100201c 	xori	r4,r4,128
 800157c:	213fe004 	addi	r4,r4,-128
 8001580:	4150b03a 	or	r8,r8,r5
 8001584:	318001c4 	addi	r6,r6,7
 8001588:	203ff616 	blt	r4,zero,8001564 <__alt_data_end+0xfc001564>
 800158c:	003fe306 	br	800151c <__alt_data_end+0xfc00151c>
 8001590:	42000044 	addi	r8,r8,1
 8001594:	da001c15 	stw	r8,112(sp)
 8001598:	38004f26 	beq	r7,zero,80016d8 <__gxx_personality_sj0+0x3d8>
 800159c:	d8800417 	ldw	r2,16(sp)
 80015a0:	39ffffc4 	addi	r7,r7,-1
 80015a4:	11c5883a 	add	r2,r2,r7
 80015a8:	d8801815 	stw	r2,96(sp)
 80015ac:	40002e26 	beq	r8,zero,8001668 <__gxx_personality_sj0+0x368>
 80015b0:	10004b26 	beq	r2,zero,80016e0 <__gxx_personality_sj0+0x3e0>
 80015b4:	d8c01a17 	ldw	r3,104(sp)
 80015b8:	18c0020c 	andi	r3,r3,8
 80015bc:	d8c01e15 	stw	r3,120(sp)
 80015c0:	1800801e 	bne	r3,zero,80017c4 <__gxx_personality_sj0+0x4c4>
 80015c4:	d8801b03 	ldbu	r2,108(sp)
 80015c8:	1000821e 	bne	r2,zero,80017d4 <__gxx_personality_sj0+0x4d4>
 80015cc:	d9002217 	ldw	r4,136(sp)
 80015d0:	20800017 	ldw	r2,0(r4)
 80015d4:	1080004c 	andi	r2,r2,1
 80015d8:	1000821e 	bne	r2,zero,80017e4 <__gxx_personality_sj0+0x4e4>
 80015dc:	d9402217 	ldw	r5,136(sp)
 80015e0:	28800504 	addi	r2,r5,20
 80015e4:	d8800915 	stw	r2,36(sp)
 80015e8:	10bff017 	ldw	r2,-64(r2)
 80015ec:	d8801d15 	stw	r2,116(sp)
 80015f0:	d9001b03 	ldbu	r4,108(sp)
 80015f4:	d8001b45 	stb	zero,109(sp)
 80015f8:	d9001f15 	stw	r4,124(sp)
 80015fc:	00000e06 	br	8001638 <__gxx_personality_sj0+0x338>
 8001600:	01c03d0e 	bge	zero,r7,80016f8 <__gxx_personality_sj0+0x3f8>
 8001604:	017fffc4 	movi	r5,-1
 8001608:	d9400b15 	stw	r5,44(sp)
 800160c:	d809883a 	mov	r4,sp
 8001610:	380b883a 	mov	r5,r7
 8001614:	8000e080 	call	8000e08 <_ZL15get_ttype_entryP16lsda_header_infom>
 8001618:	10004f26 	beq	r2,zero,8001758 <__gxx_personality_sj0+0x458>
 800161c:	d8c01d17 	ldw	r3,116(sp)
 8001620:	1800611e 	bne	r3,zero,80017a8 <__gxx_personality_sj0+0x4a8>
 8001624:	d8800617 	ldw	r2,24(sp)
 8001628:	10005726 	beq	r2,zero,8001788 <__gxx_personality_sj0+0x488>
 800162c:	d9401717 	ldw	r5,92(sp)
 8001630:	2885883a 	add	r2,r5,r2
 8001634:	d8801815 	stw	r2,96(sp)
 8001638:	d9001817 	ldw	r4,96(sp)
 800163c:	d9400704 	addi	r5,sp,28
 8001640:	8000a780 	call	8000a78 <_ZL12read_sleb128PKhPl>
 8001644:	1009883a 	mov	r4,r2
 8001648:	d9400604 	addi	r5,sp,24
 800164c:	d8801715 	stw	r2,92(sp)
 8001650:	8000a780 	call	8000a78 <_ZL12read_sleb128PKhPl>
 8001654:	d9c00717 	ldw	r7,28(sp)
 8001658:	383fe91e 	bne	r7,zero,8001600 <__alt_data_end+0xfc001600>
 800165c:	01000044 	movi	r4,1
 8001660:	d9001b45 	stb	r4,109(sp)
 8001664:	003fef06 	br	8001624 <__alt_data_end+0xfc001624>
 8001668:	01000204 	movi	r4,8
 800166c:	d9001715 	stw	r4,92(sp)
 8001670:	003f3e06 	br	800136c <__alt_data_end+0xfc00136c>
 8001674:	d9001a17 	ldw	r4,104(sp)
 8001678:	20c0020c 	andi	r3,r4,8
 800167c:	1800021e 	bne	r3,zero,8001688 <__gxx_personality_sj0+0x388>
 8001680:	d8c01b03 	ldbu	r3,108(sp)
 8001684:	18001826 	beq	r3,zero,80016e8 <__gxx_personality_sj0+0x3e8>
 8001688:	00c00044 	movi	r3,1
 800168c:	10c05926 	beq	r2,r3,80017f4 <__gxx_personality_sj0+0x4f4>
 8001690:	d9401717 	ldw	r5,92(sp)
 8001694:	28005816 	blt	r5,zero,80017f8 <__gxx_personality_sj0+0x4f8>
 8001698:	d9802217 	ldw	r6,136(sp)
 800169c:	d9002317 	ldw	r4,140(sp)
 80016a0:	00bfffc4 	movi	r2,-1
 80016a4:	000b883a 	mov	r5,zero
 80016a8:	d8800b15 	stw	r2,44(sp)
 80016ac:	80029880 	call	8002988 <_Unwind_SetGR>
 80016b0:	d9002317 	ldw	r4,140(sp)
 80016b4:	d9801717 	ldw	r6,92(sp)
 80016b8:	01400044 	movi	r5,1
 80016bc:	80029880 	call	8002988 <_Unwind_SetGR>
 80016c0:	d9002317 	ldw	r4,140(sp)
 80016c4:	d9401c17 	ldw	r5,112(sp)
 80016c8:	80029d40 	call	80029d4 <_Unwind_SetIP>
 80016cc:	010001c4 	movi	r4,7
 80016d0:	d9001715 	stw	r4,92(sp)
 80016d4:	003f2506 	br	800136c <__alt_data_end+0xfc00136c>
 80016d8:	d8c01c17 	ldw	r3,112(sp)
 80016dc:	183fe226 	beq	r3,zero,8001668 <__alt_data_end+0xfc001668>
 80016e0:	00800084 	movi	r2,2
 80016e4:	003f5206 	br	8001430 <__alt_data_end+0xfc001430>
 80016e8:	00c00044 	movi	r3,1
 80016ec:	10ff791e 	bne	r2,r3,80014d4 <__alt_data_end+0xfc0014d4>
 80016f0:	d9002217 	ldw	r4,136(sp)
 80016f4:	80022b00 	call	80022b0 <__cxa_call_terminate>
 80016f8:	d9001d17 	ldw	r4,116(sp)
 80016fc:	20000426 	beq	r4,zero,8001710 <__gxx_personality_sj0+0x410>
 8001700:	d9401e17 	ldw	r5,120(sp)
 8001704:	2800021e 	bne	r5,zero,8001710 <__gxx_personality_sj0+0x410>
 8001708:	d8801f17 	ldw	r2,124(sp)
 800170c:	10001626 	beq	r2,zero,8001768 <__gxx_personality_sj0+0x468>
 8001710:	d8c00317 	ldw	r3,12(sp)
 8001714:	01ce303a 	nor	r7,zero,r7
 8001718:	000d883a 	mov	r6,zero
 800171c:	19c7883a 	add	r3,r3,r7
 8001720:	000b883a 	mov	r5,zero
 8001724:	18800003 	ldbu	r2,0(r3)
 8001728:	18c00044 	addi	r3,r3,1
 800172c:	11001fcc 	andi	r4,r2,127
 8001730:	2148983a 	sll	r4,r4,r5
 8001734:	10803fcc 	andi	r2,r2,255
 8001738:	1080201c 	xori	r2,r2,128
 800173c:	10bfe004 	addi	r2,r2,-128
 8001740:	310cb03a 	or	r6,r6,r4
 8001744:	294001c4 	addi	r5,r5,7
 8001748:	103ff616 	blt	r2,zero,8001724 <__alt_data_end+0xfc001724>
 800174c:	3005003a 	cmpeq	r2,r6,zero
 8001750:	10803fcc 	andi	r2,r2,255
 8001754:	103fb326 	beq	r2,zero,8001624 <__alt_data_end+0xfc001624>
 8001758:	d8800717 	ldw	r2,28(sp)
 800175c:	d8801715 	stw	r2,92(sp)
 8001760:	008000c4 	movi	r2,3
 8001764:	003f3406 	br	8001438 <__alt_data_end+0xfc001438>
 8001768:	d9401d17 	ldw	r5,116(sp)
 800176c:	d9800917 	ldw	r6,36(sp)
 8001770:	00ffffc4 	movi	r3,-1
 8001774:	d809883a 	mov	r4,sp
 8001778:	d8c00b15 	stw	r3,44(sp)
 800177c:	8000e5c0 	call	8000e5c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 8001780:	1080005c 	xori	r2,r2,1
 8001784:	003ff206 	br	8001750 <__alt_data_end+0xfc001750>
 8001788:	d8801b43 	ldbu	r2,109(sp)
 800178c:	103fb626 	beq	r2,zero,8001668 <__alt_data_end+0xfc001668>
 8001790:	d8001715 	stw	zero,92(sp)
 8001794:	00800084 	movi	r2,2
 8001798:	003f2706 	br	8001438 <__alt_data_end+0xfc001438>
 800179c:	00800184 	movi	r2,6
 80017a0:	d8801715 	stw	r2,92(sp)
 80017a4:	003ef106 	br	800136c <__alt_data_end+0xfc00136c>
 80017a8:	1009883a 	mov	r4,r2
 80017ac:	180b883a 	mov	r5,r3
 80017b0:	d9800904 	addi	r6,sp,36
 80017b4:	8000ad00 	call	8000ad0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 80017b8:	10803fcc 	andi	r2,r2,255
 80017bc:	103fe61e 	bne	r2,zero,8001758 <__alt_data_end+0xfc001758>
 80017c0:	003f9806 	br	8001624 <__alt_data_end+0xfc001624>
 80017c4:	00820034 	movhi	r2,2048
 80017c8:	109f0804 	addi	r2,r2,31776
 80017cc:	d8801d15 	stw	r2,116(sp)
 80017d0:	003f8706 	br	80015f0 <__alt_data_end+0xfc0015f0>
 80017d4:	00c20034 	movhi	r3,2048
 80017d8:	18df0a04 	addi	r3,r3,31784
 80017dc:	d8c01d15 	stw	r3,116(sp)
 80017e0:	003f8306 	br	80015f0 <__alt_data_end+0xfc0015f0>
 80017e4:	20bff517 	ldw	r2,-44(r4)
 80017e8:	003f7e06 	br	80015e4 <__alt_data_end+0xfc0015e4>
 80017ec:	d9000c17 	ldw	r4,48(sp)
 80017f0:	800212c0 	call	800212c <__cxa_begin_catch>
 80017f4:	8001dd80 	call	8001dd8 <_ZSt9terminatev>
 80017f8:	d8c00b15 	stw	r3,44(sp)
 80017fc:	8001e000 	call	8001e00 <_ZSt10unexpectedv>

08001800 <__cxa_call_unexpected>:
 8001800:	00820034 	movhi	r2,2048
 8001804:	deffe604 	addi	sp,sp,-104
 8001808:	1084c004 	addi	r2,r2,4864
 800180c:	d8800d15 	stw	r2,52(sp)
 8001810:	00820034 	movhi	r2,2048
 8001814:	109bef04 	addi	r2,r2,28604
 8001818:	d8800e15 	stw	r2,56(sp)
 800181c:	d8800104 	addi	r2,sp,4
 8001820:	d8800f15 	stw	r2,60(sp)
 8001824:	00820034 	movhi	r2,2048
 8001828:	10862304 	addi	r2,r2,6284
 800182c:	d9001415 	stw	r4,80(sp)
 8001830:	d9000704 	addi	r4,sp,28
 8001834:	dfc01915 	stw	ra,100(sp)
 8001838:	d8801015 	stw	r2,64(sp)
 800183c:	df001815 	stw	fp,96(sp)
 8001840:	dec01115 	stw	sp,68(sp)
 8001844:	80029280 	call	8002928 <_Unwind_SjLj_Register>
 8001848:	d9001417 	ldw	r4,80(sp)
 800184c:	800212c0 	call	800212c <__cxa_begin_catch>
 8001850:	d8c01417 	ldw	r3,80(sp)
 8001854:	18bffe17 	ldw	r2,-8(r3)
 8001858:	193ff717 	ldw	r4,-36(r3)
 800185c:	18fffd17 	ldw	r3,-12(r3)
 8001860:	d8800315 	stw	r2,12(sp)
 8001864:	d8c01615 	stw	r3,88(sp)
 8001868:	d8c01417 	ldw	r3,80(sp)
 800186c:	18fffb17 	ldw	r3,-20(r3)
 8001870:	d8c01515 	stw	r3,84(sp)
 8001874:	d8c01417 	ldw	r3,80(sp)
 8001878:	18fff817 	ldw	r3,-32(r3)
 800187c:	d8c01415 	stw	r3,80(sp)
 8001880:	00c00044 	movi	r3,1
 8001884:	d8c00815 	stw	r3,32(sp)
 8001888:	8001df00 	call	8001df0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800188c:	d8c00917 	ldw	r3,36(sp)
 8001890:	d8800817 	ldw	r2,32(sp)
 8001894:	d8c01715 	stw	r3,92(sp)
 8001898:	10000a26 	beq	r2,zero,80018c4 <__cxa_call_unexpected+0xc4>
 800189c:	10bfffc4 	addi	r2,r2,-1
 80018a0:	10000126 	beq	r2,zero,80018a8 <__cxa_call_unexpected+0xa8>
 80018a4:	003da0fa 	break	3
 80018a8:	d8000815 	stw	zero,32(sp)
 80018ac:	80021e00 	call	80021e0 <__cxa_end_catch>
 80018b0:	80021e00 	call	80021e0 <__cxa_end_catch>
 80018b4:	d9001717 	ldw	r4,92(sp)
 80018b8:	00bfffc4 	movi	r2,-1
 80018bc:	d8800815 	stw	r2,32(sp)
 80018c0:	8002b240 	call	8002b24 <_Unwind_SjLj_Resume>
 80018c4:	d9001717 	ldw	r4,92(sp)
 80018c8:	800212c0 	call	800212c <__cxa_begin_catch>
 80018cc:	8001a340 	call	8001a34 <__cxa_get_globals_fast>
 80018d0:	10800017 	ldw	r2,0(r2)
 80018d4:	10c00b17 	ldw	r3,44(r2)
 80018d8:	18c0004c 	andi	r3,r3,1
 80018dc:	18001e26 	beq	r3,zero,8001958 <__cxa_call_unexpected+0x158>
 80018e0:	10800017 	ldw	r2,0(r2)
 80018e4:	d8801715 	stw	r2,92(sp)
 80018e8:	d8801517 	ldw	r2,84(sp)
 80018ec:	00802b0e 	bge	zero,r2,800199c <__cxa_call_unexpected+0x19c>
 80018f0:	d8c01717 	ldw	r3,92(sp)
 80018f4:	d8800317 	ldw	r2,12(sp)
 80018f8:	d9801617 	ldw	r6,88(sp)
 80018fc:	193ff017 	ldw	r4,-64(r3)
 8001900:	d9c01517 	ldw	r7,84(sp)
 8001904:	d8800015 	stw	r2,0(sp)
 8001908:	180b883a 	mov	r5,r3
 800190c:	00800084 	movi	r2,2
 8001910:	d8800815 	stw	r2,32(sp)
 8001914:	8000f8c0 	call	8000f8c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 8001918:	10803fcc 	andi	r2,r2,255
 800191c:	10001e1e 	bne	r2,zero,8001998 <__cxa_call_unexpected+0x198>
 8001920:	d8800317 	ldw	r2,12(sp)
 8001924:	d9801617 	ldw	r6,88(sp)
 8001928:	d9c01517 	ldw	r7,84(sp)
 800192c:	01020034 	movhi	r4,2048
 8001930:	d8800015 	stw	r2,0(sp)
 8001934:	211ca904 	addi	r4,r4,29348
 8001938:	00800084 	movi	r2,2
 800193c:	000b883a 	mov	r5,zero
 8001940:	d8800815 	stw	r2,32(sp)
 8001944:	8000f8c0 	call	8000f8c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 8001948:	10803fcc 	andi	r2,r2,255
 800194c:	1000051e 	bne	r2,zero,8001964 <__cxa_call_unexpected+0x164>
 8001950:	d9001417 	ldw	r4,80(sp)
 8001954:	8001d180 	call	8001d18 <_ZN10__cxxabiv111__terminateEPFvvE>
 8001958:	10801004 	addi	r2,r2,64
 800195c:	d8801715 	stw	r2,92(sp)
 8001960:	003fe106 	br	80018e8 <__alt_data_end+0xfc0018e8>
 8001964:	01000104 	movi	r4,4
 8001968:	80024c40 	call	80024c4 <__cxa_allocate_exception>
 800196c:	00c20034 	movhi	r3,2048
 8001970:	18dcc404 	addi	r3,r3,29456
 8001974:	01420034 	movhi	r5,2048
 8001978:	01820034 	movhi	r6,2048
 800197c:	10c00015 	stw	r3,0(r2)
 8001980:	295ca904 	addi	r5,r5,29348
 8001984:	00c00084 	movi	r3,2
 8001988:	3189a104 	addi	r6,r6,9860
 800198c:	1009883a 	mov	r4,r2
 8001990:	d8c00815 	stw	r3,32(sp)
 8001994:	800234c0 	call	800234c <__cxa_throw>
 8001998:	80023dc0 	call	80023dc <__cxa_rethrow>
 800199c:	d9401617 	ldw	r5,88(sp)
 80019a0:	00800084 	movi	r2,2
 80019a4:	0009883a 	mov	r4,zero
 80019a8:	d9800104 	addi	r6,sp,4
 80019ac:	d8800815 	stw	r2,32(sp)
 80019b0:	80011cc0 	call	80011cc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80019b4:	d8801717 	ldw	r2,92(sp)
 80019b8:	d9c01517 	ldw	r7,84(sp)
 80019bc:	d9000104 	addi	r4,sp,4
 80019c0:	117ff017 	ldw	r5,-64(r2)
 80019c4:	100d883a 	mov	r6,r2
 80019c8:	8000e5c0 	call	8000e5c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 80019cc:	10803fcc 	andi	r2,r2,255
 80019d0:	1000171e 	bne	r2,zero,8001a30 <__cxa_call_unexpected+0x230>
 80019d4:	d9c01517 	ldw	r7,84(sp)
 80019d8:	01420034 	movhi	r5,2048
 80019dc:	00800084 	movi	r2,2
 80019e0:	295ca904 	addi	r5,r5,29348
 80019e4:	d9000104 	addi	r4,sp,4
 80019e8:	000d883a 	mov	r6,zero
 80019ec:	d8800815 	stw	r2,32(sp)
 80019f0:	8000e5c0 	call	8000e5c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 80019f4:	10803fcc 	andi	r2,r2,255
 80019f8:	103fd526 	beq	r2,zero,8001950 <__alt_data_end+0xfc001950>
 80019fc:	01000104 	movi	r4,4
 8001a00:	80024c40 	call	80024c4 <__cxa_allocate_exception>
 8001a04:	00c20034 	movhi	r3,2048
 8001a08:	18dcc404 	addi	r3,r3,29456
 8001a0c:	01420034 	movhi	r5,2048
 8001a10:	01820034 	movhi	r6,2048
 8001a14:	10c00015 	stw	r3,0(r2)
 8001a18:	295ca904 	addi	r5,r5,29348
 8001a1c:	00c00084 	movi	r3,2
 8001a20:	3189a104 	addi	r6,r6,9860
 8001a24:	1009883a 	mov	r4,r2
 8001a28:	d8c00815 	stw	r3,32(sp)
 8001a2c:	800234c0 	call	800234c <__cxa_throw>
 8001a30:	80023dc0 	call	80023dc <__cxa_rethrow>

08001a34 <__cxa_get_globals_fast>:
 8001a34:	00820074 	movhi	r2,2049
 8001a38:	10a13c04 	addi	r2,r2,-31504
 8001a3c:	f800283a 	ret

08001a40 <__cxa_get_globals>:
 8001a40:	00820074 	movhi	r2,2049
 8001a44:	10a13c04 	addi	r2,r2,-31504
 8001a48:	f800283a 	ret

08001a4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8001a4c:	20800017 	ldw	r2,0(r4)
 8001a50:	defffa04 	addi	sp,sp,-24
 8001a54:	dc000415 	stw	r16,16(sp)
 8001a58:	10800617 	ldw	r2,24(r2)
 8001a5c:	3021883a 	mov	r16,r6
 8001a60:	31800017 	ldw	r6,0(r6)
 8001a64:	00c00404 	movi	r3,16
 8001a68:	d8c00215 	stw	r3,8(sp)
 8001a6c:	dfc00515 	stw	ra,20(sp)
 8001a70:	d8000015 	stw	zero,0(sp)
 8001a74:	d8000115 	stw	zero,4(sp)
 8001a78:	d8000315 	stw	zero,12(sp)
 8001a7c:	d80f883a 	mov	r7,sp
 8001a80:	103ee83a 	callr	r2
 8001a84:	d8800117 	ldw	r2,4(sp)
 8001a88:	00c00184 	movi	r3,6
 8001a8c:	1080018c 	andi	r2,r2,6
 8001a90:	10c00526 	beq	r2,r3,8001aa8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 8001a94:	0005883a 	mov	r2,zero
 8001a98:	dfc00517 	ldw	ra,20(sp)
 8001a9c:	dc000417 	ldw	r16,16(sp)
 8001aa0:	dec00604 	addi	sp,sp,24
 8001aa4:	f800283a 	ret
 8001aa8:	d8c00017 	ldw	r3,0(sp)
 8001aac:	00800044 	movi	r2,1
 8001ab0:	80c00015 	stw	r3,0(r16)
 8001ab4:	dfc00517 	ldw	ra,20(sp)
 8001ab8:	dc000417 	ldw	r16,16(sp)
 8001abc:	dec00604 	addi	sp,sp,24
 8001ac0:	f800283a 	ret

08001ac4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8001ac4:	d8800017 	ldw	r2,0(sp)
 8001ac8:	11800226 	beq	r2,r6,8001ad4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 8001acc:	00800044 	movi	r2,1
 8001ad0:	f800283a 	ret
 8001ad4:	00800184 	movi	r2,6
 8001ad8:	f800283a 	ret

08001adc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8001adc:	00820034 	movhi	r2,2048
 8001ae0:	109c6a04 	addi	r2,r2,29096
 8001ae4:	20800015 	stw	r2,0(r4)
 8001ae8:	80024601 	jmpi	8002460 <_ZNSt9type_infoD1Ev>

08001aec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8001aec:	defffe04 	addi	sp,sp,-8
 8001af0:	00820034 	movhi	r2,2048
 8001af4:	dc000015 	stw	r16,0(sp)
 8001af8:	dfc00115 	stw	ra,4(sp)
 8001afc:	109c6a04 	addi	r2,r2,29096
 8001b00:	20800015 	stw	r2,0(r4)
 8001b04:	2021883a 	mov	r16,r4
 8001b08:	80024600 	call	8002460 <_ZNSt9type_infoD1Ev>
 8001b0c:	8009883a 	mov	r4,r16
 8001b10:	dfc00117 	ldw	ra,4(sp)
 8001b14:	dc000017 	ldw	r16,0(sp)
 8001b18:	dec00204 	addi	sp,sp,8
 8001b1c:	8001d141 	jmpi	8001d14 <_ZdlPv>

08001b20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8001b20:	21000117 	ldw	r4,4(r4)
 8001b24:	29400117 	ldw	r5,4(r5)
 8001b28:	defffd04 	addi	sp,sp,-12
 8001b2c:	dc400115 	stw	r17,4(sp)
 8001b30:	dc000015 	stw	r16,0(sp)
 8001b34:	dfc00215 	stw	ra,8(sp)
 8001b38:	3023883a 	mov	r17,r6
 8001b3c:	3821883a 	mov	r16,r7
 8001b40:	21400b26 	beq	r4,r5,8001b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8001b44:	20c00007 	ldb	r3,0(r4)
 8001b48:	00800a84 	movi	r2,42
 8001b4c:	18800226 	beq	r3,r2,8001b58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 8001b50:	80037980 	call	8003798 <strcmp>
 8001b54:	10000626 	beq	r2,zero,8001b70 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8001b58:	0005883a 	mov	r2,zero
 8001b5c:	dfc00217 	ldw	ra,8(sp)
 8001b60:	dc400117 	ldw	r17,4(sp)
 8001b64:	dc000017 	ldw	r16,0(sp)
 8001b68:	dec00304 	addi	sp,sp,12
 8001b6c:	f800283a 	ret
 8001b70:	00800204 	movi	r2,8
 8001b74:	80800315 	stw	r2,12(r16)
 8001b78:	00800184 	movi	r2,6
 8001b7c:	80800115 	stw	r2,4(r16)
 8001b80:	84400015 	stw	r17,0(r16)
 8001b84:	00800044 	movi	r2,1
 8001b88:	003ff406 	br	8001b5c <__alt_data_end+0xfc001b5c>

08001b8c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8001b8c:	20800117 	ldw	r2,4(r4)
 8001b90:	28c00117 	ldw	r3,4(r5)
 8001b94:	10c02926 	beq	r2,r3,8001c3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 8001b98:	defffb04 	addi	sp,sp,-20
 8001b9c:	dcc00315 	stw	r19,12(sp)
 8001ba0:	dc800215 	stw	r18,8(sp)
 8001ba4:	dc400115 	stw	r17,4(sp)
 8001ba8:	dc000015 	stw	r16,0(sp)
 8001bac:	dfc00415 	stw	ra,16(sp)
 8001bb0:	2821883a 	mov	r16,r5
 8001bb4:	11400007 	ldb	r5,0(r2)
 8001bb8:	2025883a 	mov	r18,r4
 8001bbc:	01000a84 	movi	r4,42
 8001bc0:	3823883a 	mov	r17,r7
 8001bc4:	3027883a 	mov	r19,r6
 8001bc8:	29000426 	beq	r5,r4,8001bdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
 8001bcc:	1009883a 	mov	r4,r2
 8001bd0:	180b883a 	mov	r5,r3
 8001bd4:	80037980 	call	8003798 <strcmp>
 8001bd8:	10000a26 	beq	r2,zero,8001c04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
 8001bdc:	008000c4 	movi	r2,3
 8001be0:	14400a2e 	bgeu	r2,r17,8001c0c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 8001be4:	0005883a 	mov	r2,zero
 8001be8:	dfc00417 	ldw	ra,16(sp)
 8001bec:	dcc00317 	ldw	r19,12(sp)
 8001bf0:	dc800217 	ldw	r18,8(sp)
 8001bf4:	dc400117 	ldw	r17,4(sp)
 8001bf8:	dc000017 	ldw	r16,0(sp)
 8001bfc:	dec00504 	addi	sp,sp,20
 8001c00:	f800283a 	ret
 8001c04:	00800044 	movi	r2,1
 8001c08:	003ff706 	br	8001be8 <__alt_data_end+0xfc001be8>
 8001c0c:	80800017 	ldw	r2,0(r16)
 8001c10:	8009883a 	mov	r4,r16
 8001c14:	900b883a 	mov	r5,r18
 8001c18:	10800517 	ldw	r2,20(r2)
 8001c1c:	980d883a 	mov	r6,r19
 8001c20:	dfc00417 	ldw	ra,16(sp)
 8001c24:	dcc00317 	ldw	r19,12(sp)
 8001c28:	dc800217 	ldw	r18,8(sp)
 8001c2c:	dc400117 	ldw	r17,4(sp)
 8001c30:	dc000017 	ldw	r16,0(sp)
 8001c34:	dec00504 	addi	sp,sp,20
 8001c38:	1000683a 	jmp	r2
 8001c3c:	00800044 	movi	r2,1
 8001c40:	f800283a 	ret

08001c44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8001c44:	defffb04 	addi	sp,sp,-20
 8001c48:	dc400315 	stw	r17,12(sp)
 8001c4c:	d8800717 	ldw	r2,28(sp)
 8001c50:	dc400517 	ldw	r17,20(sp)
 8001c54:	dc000215 	stw	r16,8(sp)
 8001c58:	dfc00415 	stw	ra,16(sp)
 8001c5c:	24000117 	ldw	r16,4(r4)
 8001c60:	88801026 	beq	r17,r2,8001ca4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8001c64:	39400117 	ldw	r5,4(r7)
 8001c68:	81401d26 	beq	r16,r5,8001ce0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8001c6c:	80c00007 	ldb	r3,0(r16)
 8001c70:	00800a84 	movi	r2,42
 8001c74:	18800526 	beq	r3,r2,8001c8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8001c78:	8009883a 	mov	r4,r16
 8001c7c:	d9800115 	stw	r6,4(sp)
 8001c80:	80037980 	call	8003798 <strcmp>
 8001c84:	d9800117 	ldw	r6,4(sp)
 8001c88:	10001526 	beq	r2,zero,8001ce0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8001c8c:	0005883a 	mov	r2,zero
 8001c90:	dfc00417 	ldw	ra,16(sp)
 8001c94:	dc400317 	ldw	r17,12(sp)
 8001c98:	dc000217 	ldw	r16,8(sp)
 8001c9c:	dec00504 	addi	sp,sp,20
 8001ca0:	f800283a 	ret
 8001ca4:	d8800617 	ldw	r2,24(sp)
 8001ca8:	11400117 	ldw	r5,4(r2)
 8001cac:	81401326 	beq	r16,r5,8001cfc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8001cb0:	80c00007 	ldb	r3,0(r16)
 8001cb4:	00800a84 	movi	r2,42
 8001cb8:	18801326 	beq	r3,r2,8001d08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 8001cbc:	8009883a 	mov	r4,r16
 8001cc0:	d9800115 	stw	r6,4(sp)
 8001cc4:	d9c00015 	stw	r7,0(sp)
 8001cc8:	80037980 	call	8003798 <strcmp>
 8001ccc:	d9800117 	ldw	r6,4(sp)
 8001cd0:	d9c00017 	ldw	r7,0(sp)
 8001cd4:	10000926 	beq	r2,zero,8001cfc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8001cd8:	39400117 	ldw	r5,4(r7)
 8001cdc:	817fe61e 	bne	r16,r5,8001c78 <__alt_data_end+0xfc001c78>
 8001ce0:	d8800817 	ldw	r2,32(sp)
 8001ce4:	d8c00817 	ldw	r3,32(sp)
 8001ce8:	14400015 	stw	r17,0(r2)
 8001cec:	11800115 	stw	r6,4(r2)
 8001cf0:	00800044 	movi	r2,1
 8001cf4:	18800315 	stw	r2,12(r3)
 8001cf8:	003fe406 	br	8001c8c <__alt_data_end+0xfc001c8c>
 8001cfc:	d8800817 	ldw	r2,32(sp)
 8001d00:	11800215 	stw	r6,8(r2)
 8001d04:	003fe106 	br	8001c8c <__alt_data_end+0xfc001c8c>
 8001d08:	38800117 	ldw	r2,4(r7)
 8001d0c:	80bfdf1e 	bne	r16,r2,8001c8c <__alt_data_end+0xfc001c8c>
 8001d10:	003ff306 	br	8001ce0 <__alt_data_end+0xfc001ce0>

08001d14 <_ZdlPv>:
 8001d14:	8002c8c1 	jmpi	8002c8c <free>

08001d18 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8001d18:	00820034 	movhi	r2,2048
 8001d1c:	deffef04 	addi	sp,sp,-68
 8001d20:	1084c004 	addi	r2,r2,4864
 8001d24:	d8800615 	stw	r2,24(sp)
 8001d28:	00820034 	movhi	r2,2048
 8001d2c:	109bf304 	addi	r2,r2,28620
 8001d30:	d8800715 	stw	r2,28(sp)
 8001d34:	00820034 	movhi	r2,2048
 8001d38:	10875c04 	addi	r2,r2,7536
 8001d3c:	d9000d15 	stw	r4,52(sp)
 8001d40:	d809883a 	mov	r4,sp
 8001d44:	d8800915 	stw	r2,36(sp)
 8001d48:	dfc01015 	stw	ra,64(sp)
 8001d4c:	df000f15 	stw	fp,60(sp)
 8001d50:	dec00815 	stw	sp,32(sp)
 8001d54:	dec00a15 	stw	sp,40(sp)
 8001d58:	80029280 	call	8002928 <_Unwind_SjLj_Register>
 8001d5c:	00800044 	movi	r2,1
 8001d60:	d8800115 	stw	r2,4(sp)
 8001d64:	d8800d17 	ldw	r2,52(sp)
 8001d68:	103ee83a 	callr	r2
 8001d6c:	8002c400 	call	8002c40 <abort>
 8001d70:	d8c00217 	ldw	r3,8(sp)
 8001d74:	d8800117 	ldw	r2,4(sp)
 8001d78:	d8c00d15 	stw	r3,52(sp)
 8001d7c:	d8c00317 	ldw	r3,12(sp)
 8001d80:	d8c00e15 	stw	r3,56(sp)
 8001d84:	10000b26 	beq	r2,zero,8001db4 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 8001d88:	10bfffc4 	addi	r2,r2,-1
 8001d8c:	10000126 	beq	r2,zero,8001d94 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 8001d90:	003da0fa 	break	3
 8001d94:	d8000115 	stw	zero,4(sp)
 8001d98:	80021e00 	call	80021e0 <__cxa_end_catch>
 8001d9c:	d8c00e17 	ldw	r3,56(sp)
 8001da0:	00bfffc4 	movi	r2,-1
 8001da4:	18800826 	beq	r3,r2,8001dc8 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 8001da8:	d9000d17 	ldw	r4,52(sp)
 8001dac:	d8800115 	stw	r2,4(sp)
 8001db0:	8002b240 	call	8002b24 <_Unwind_SjLj_Resume>
 8001db4:	d9000d17 	ldw	r4,52(sp)
 8001db8:	800212c0 	call	800212c <__cxa_begin_catch>
 8001dbc:	00800084 	movi	r2,2
 8001dc0:	d8800115 	stw	r2,4(sp)
 8001dc4:	8002c400 	call	8002c40 <abort>
 8001dc8:	d8800e17 	ldw	r2,56(sp)
 8001dcc:	d9000d17 	ldw	r4,52(sp)
 8001dd0:	d8800115 	stw	r2,4(sp)
 8001dd4:	80018000 	call	8001800 <__cxa_call_unexpected>

08001dd8 <_ZSt9terminatev>:
 8001dd8:	00820034 	movhi	r2,2048
 8001ddc:	109f0304 	addi	r2,r2,31756
 8001de0:	11000017 	ldw	r4,0(r2)
 8001de4:	deffff04 	addi	sp,sp,-4
 8001de8:	dfc00015 	stw	ra,0(sp)
 8001dec:	8001d180 	call	8001d18 <_ZN10__cxxabiv111__terminateEPFvvE>

08001df0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8001df0:	deffff04 	addi	sp,sp,-4
 8001df4:	dfc00015 	stw	ra,0(sp)
 8001df8:	203ee83a 	callr	r4
 8001dfc:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

08001e00 <_ZSt10unexpectedv>:
 8001e00:	00820034 	movhi	r2,2048
 8001e04:	109f0c04 	addi	r2,r2,31792
 8001e08:	11000017 	ldw	r4,0(r2)
 8001e0c:	deffff04 	addi	sp,sp,-4
 8001e10:	dfc00015 	stw	ra,0(sp)
 8001e14:	8001df00 	call	8001df0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08001e18 <_ZSt13set_terminatePFvvE>:
 8001e18:	00c20034 	movhi	r3,2048
 8001e1c:	18df0304 	addi	r3,r3,31756
 8001e20:	18800017 	ldw	r2,0(r3)
 8001e24:	19000015 	stw	r4,0(r3)
 8001e28:	f800283a 	ret

08001e2c <_ZSt13get_terminatev>:
 8001e2c:	00820034 	movhi	r2,2048
 8001e30:	109f0304 	addi	r2,r2,31756
 8001e34:	10800017 	ldw	r2,0(r2)
 8001e38:	f800283a 	ret

08001e3c <_ZSt14set_unexpectedPFvvE>:
 8001e3c:	00c20034 	movhi	r3,2048
 8001e40:	18df0c04 	addi	r3,r3,31792
 8001e44:	18800017 	ldw	r2,0(r3)
 8001e48:	19000015 	stw	r4,0(r3)
 8001e4c:	f800283a 	ret

08001e50 <_ZSt14get_unexpectedv>:
 8001e50:	00820034 	movhi	r2,2048
 8001e54:	109f0c04 	addi	r2,r2,31792
 8001e58:	10800017 	ldw	r2,0(r2)
 8001e5c:	f800283a 	ret

08001e60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8001e60:	00820034 	movhi	r2,2048
 8001e64:	109c8204 	addi	r2,r2,29192
 8001e68:	20800015 	stw	r2,0(r4)
 8001e6c:	8001adc1 	jmpi	8001adc <_ZN10__cxxabiv117__class_type_infoD1Ev>

08001e70 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8001e70:	defffe04 	addi	sp,sp,-8
 8001e74:	00820034 	movhi	r2,2048
 8001e78:	dc000015 	stw	r16,0(sp)
 8001e7c:	dfc00115 	stw	ra,4(sp)
 8001e80:	109c8204 	addi	r2,r2,29192
 8001e84:	20800015 	stw	r2,0(r4)
 8001e88:	2021883a 	mov	r16,r4
 8001e8c:	8001adc0 	call	8001adc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8001e90:	8009883a 	mov	r4,r16
 8001e94:	dfc00117 	ldw	ra,4(sp)
 8001e98:	dc000017 	ldw	r16,0(sp)
 8001e9c:	dec00204 	addi	sp,sp,8
 8001ea0:	8001d141 	jmpi	8001d14 <_ZdlPv>

08001ea4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8001ea4:	defff504 	addi	sp,sp,-44
 8001ea8:	dc000115 	stw	r16,4(sp)
 8001eac:	38800117 	ldw	r2,4(r7)
 8001eb0:	24000117 	ldw	r16,4(r4)
 8001eb4:	ddc00815 	stw	r23,32(sp)
 8001eb8:	dd800715 	stw	r22,28(sp)
 8001ebc:	dd400615 	stw	r21,24(sp)
 8001ec0:	dd000515 	stw	r20,20(sp)
 8001ec4:	dcc00415 	stw	r19,16(sp)
 8001ec8:	dc800315 	stw	r18,12(sp)
 8001ecc:	dc400215 	stw	r17,8(sp)
 8001ed0:	dfc00a15 	stw	ra,40(sp)
 8001ed4:	df000915 	stw	fp,36(sp)
 8001ed8:	202b883a 	mov	r21,r4
 8001edc:	382d883a 	mov	r22,r7
 8001ee0:	2823883a 	mov	r17,r5
 8001ee4:	dc800b17 	ldw	r18,44(sp)
 8001ee8:	ddc00c17 	ldw	r23,48(sp)
 8001eec:	dd000d17 	ldw	r20,52(sp)
 8001ef0:	dcc00e17 	ldw	r19,56(sp)
 8001ef4:	80801f26 	beq	r16,r2,8001f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8001ef8:	87000007 	ldb	fp,0(r16)
 8001efc:	00c00a84 	movi	r3,42
 8001f00:	e0c00626 	beq	fp,r3,8001f1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8001f04:	8009883a 	mov	r4,r16
 8001f08:	100b883a 	mov	r5,r2
 8001f0c:	d9800015 	stw	r6,0(sp)
 8001f10:	80037980 	call	8003798 <strcmp>
 8001f14:	d9800017 	ldw	r6,0(sp)
 8001f18:	10001626 	beq	r2,zero,8001f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8001f1c:	95002c26 	beq	r18,r20,8001fd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 8001f20:	a9000217 	ldw	r4,8(r21)
 8001f24:	880b883a 	mov	r5,r17
 8001f28:	b00f883a 	mov	r7,r22
 8001f2c:	20800017 	ldw	r2,0(r4)
 8001f30:	dc800b15 	stw	r18,44(sp)
 8001f34:	ddc00c15 	stw	r23,48(sp)
 8001f38:	dd000d15 	stw	r20,52(sp)
 8001f3c:	dcc00e15 	stw	r19,56(sp)
 8001f40:	10800717 	ldw	r2,28(r2)
 8001f44:	dfc00a17 	ldw	ra,40(sp)
 8001f48:	df000917 	ldw	fp,36(sp)
 8001f4c:	ddc00817 	ldw	r23,32(sp)
 8001f50:	dd800717 	ldw	r22,28(sp)
 8001f54:	dd400617 	ldw	r21,24(sp)
 8001f58:	dd000517 	ldw	r20,20(sp)
 8001f5c:	dcc00417 	ldw	r19,16(sp)
 8001f60:	dc800317 	ldw	r18,12(sp)
 8001f64:	dc400217 	ldw	r17,8(sp)
 8001f68:	dc000117 	ldw	r16,4(sp)
 8001f6c:	dec00b04 	addi	sp,sp,44
 8001f70:	1000683a 	jmp	r2
 8001f74:	9c800015 	stw	r18,0(r19)
 8001f78:	99800115 	stw	r6,4(r19)
 8001f7c:	88001116 	blt	r17,zero,8001fc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
 8001f80:	9463883a 	add	r17,r18,r17
 8001f84:	a4401d26 	beq	r20,r17,8001ffc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 8001f88:	00800044 	movi	r2,1
 8001f8c:	98800315 	stw	r2,12(r19)
 8001f90:	0005883a 	mov	r2,zero
 8001f94:	dfc00a17 	ldw	ra,40(sp)
 8001f98:	df000917 	ldw	fp,36(sp)
 8001f9c:	ddc00817 	ldw	r23,32(sp)
 8001fa0:	dd800717 	ldw	r22,28(sp)
 8001fa4:	dd400617 	ldw	r21,24(sp)
 8001fa8:	dd000517 	ldw	r20,20(sp)
 8001fac:	dcc00417 	ldw	r19,16(sp)
 8001fb0:	dc800317 	ldw	r18,12(sp)
 8001fb4:	dc400217 	ldw	r17,8(sp)
 8001fb8:	dc000117 	ldw	r16,4(sp)
 8001fbc:	dec00b04 	addi	sp,sp,44
 8001fc0:	f800283a 	ret
 8001fc4:	00bfff84 	movi	r2,-2
 8001fc8:	88bff11e 	bne	r17,r2,8001f90 <__alt_data_end+0xfc001f90>
 8001fcc:	003fee06 	br	8001f88 <__alt_data_end+0xfc001f88>
 8001fd0:	b9400117 	ldw	r5,4(r23)
 8001fd4:	81400726 	beq	r16,r5,8001ff4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 8001fd8:	00800a84 	movi	r2,42
 8001fdc:	e0bfd026 	beq	fp,r2,8001f20 <__alt_data_end+0xfc001f20>
 8001fe0:	8009883a 	mov	r4,r16
 8001fe4:	d9800015 	stw	r6,0(sp)
 8001fe8:	80037980 	call	8003798 <strcmp>
 8001fec:	d9800017 	ldw	r6,0(sp)
 8001ff0:	103fcb1e 	bne	r2,zero,8001f20 <__alt_data_end+0xfc001f20>
 8001ff4:	99800215 	stw	r6,8(r19)
 8001ff8:	003fe506 	br	8001f90 <__alt_data_end+0xfc001f90>
 8001ffc:	00800184 	movi	r2,6
 8002000:	003fe206 	br	8001f8c <__alt_data_end+0xfc001f8c>

08002004 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8002004:	defffa04 	addi	sp,sp,-24
 8002008:	dc000215 	stw	r16,8(sp)
 800200c:	dc000617 	ldw	r16,24(sp)
 8002010:	dc800415 	stw	r18,16(sp)
 8002014:	dc400315 	stw	r17,12(sp)
 8002018:	dfc00515 	stw	ra,20(sp)
 800201c:	2023883a 	mov	r17,r4
 8002020:	2825883a 	mov	r18,r5
 8002024:	81800b26 	beq	r16,r6,8002054 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 8002028:	89000217 	ldw	r4,8(r17)
 800202c:	900b883a 	mov	r5,r18
 8002030:	20800017 	ldw	r2,0(r4)
 8002034:	dc000615 	stw	r16,24(sp)
 8002038:	10800817 	ldw	r2,32(r2)
 800203c:	dfc00517 	ldw	ra,20(sp)
 8002040:	dc800417 	ldw	r18,16(sp)
 8002044:	dc400317 	ldw	r17,12(sp)
 8002048:	dc000217 	ldw	r16,8(sp)
 800204c:	dec00604 	addi	sp,sp,24
 8002050:	1000683a 	jmp	r2
 8002054:	21000117 	ldw	r4,4(r4)
 8002058:	39400117 	ldw	r5,4(r7)
 800205c:	21400926 	beq	r4,r5,8002084 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 8002060:	20c00007 	ldb	r3,0(r4)
 8002064:	00800a84 	movi	r2,42
 8002068:	18bfef26 	beq	r3,r2,8002028 <__alt_data_end+0xfc002028>
 800206c:	d9800015 	stw	r6,0(sp)
 8002070:	d9c00115 	stw	r7,4(sp)
 8002074:	80037980 	call	8003798 <strcmp>
 8002078:	d9800017 	ldw	r6,0(sp)
 800207c:	d9c00117 	ldw	r7,4(sp)
 8002080:	103fe91e 	bne	r2,zero,8002028 <__alt_data_end+0xfc002028>
 8002084:	00800184 	movi	r2,6
 8002088:	dfc00517 	ldw	ra,20(sp)
 800208c:	dc800417 	ldw	r18,16(sp)
 8002090:	dc400317 	ldw	r17,12(sp)
 8002094:	dc000217 	ldw	r16,8(sp)
 8002098:	dec00604 	addi	sp,sp,24
 800209c:	f800283a 	ret

080020a0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80020a0:	defffb04 	addi	sp,sp,-20
 80020a4:	dcc00315 	stw	r19,12(sp)
 80020a8:	dc800215 	stw	r18,8(sp)
 80020ac:	dc400115 	stw	r17,4(sp)
 80020b0:	dc000015 	stw	r16,0(sp)
 80020b4:	dfc00415 	stw	ra,16(sp)
 80020b8:	2027883a 	mov	r19,r4
 80020bc:	2825883a 	mov	r18,r5
 80020c0:	3023883a 	mov	r17,r6
 80020c4:	3821883a 	mov	r16,r7
 80020c8:	8001b200 	call	8001b20 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80020cc:	10c03fcc 	andi	r3,r2,255
 80020d0:	18000726 	beq	r3,zero,80020f0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 80020d4:	dfc00417 	ldw	ra,16(sp)
 80020d8:	dcc00317 	ldw	r19,12(sp)
 80020dc:	dc800217 	ldw	r18,8(sp)
 80020e0:	dc400117 	ldw	r17,4(sp)
 80020e4:	dc000017 	ldw	r16,0(sp)
 80020e8:	dec00504 	addi	sp,sp,20
 80020ec:	f800283a 	ret
 80020f0:	99000217 	ldw	r4,8(r19)
 80020f4:	900b883a 	mov	r5,r18
 80020f8:	880d883a 	mov	r6,r17
 80020fc:	20800017 	ldw	r2,0(r4)
 8002100:	800f883a 	mov	r7,r16
 8002104:	10800617 	ldw	r2,24(r2)
 8002108:	dfc00417 	ldw	ra,16(sp)
 800210c:	dcc00317 	ldw	r19,12(sp)
 8002110:	dc800217 	ldw	r18,8(sp)
 8002114:	dc400117 	ldw	r17,4(sp)
 8002118:	dc000017 	ldw	r16,0(sp)
 800211c:	dec00504 	addi	sp,sp,20
 8002120:	1000683a 	jmp	r2

08002124 <__cxa_get_exception_ptr>:
 8002124:	20bfff17 	ldw	r2,-4(r4)
 8002128:	f800283a 	ret

0800212c <__cxa_begin_catch>:
 800212c:	defffe04 	addi	sp,sp,-8
 8002130:	dc000015 	stw	r16,0(sp)
 8002134:	dfc00115 	stw	ra,4(sp)
 8002138:	2021883a 	mov	r16,r4
 800213c:	8001a400 	call	8001a40 <__cxa_get_globals>
 8002140:	81000017 	ldw	r4,0(r16)
 8002144:	80c00117 	ldw	r3,4(r16)
 8002148:	01af3574 	movhi	r6,48341
 800214c:	31b54004 	addi	r6,r6,-11008
 8002150:	016e2cb4 	movhi	r5,47282
 8002154:	296aaf04 	addi	r5,r5,-21828
 8002158:	218d883a 	add	r6,r4,r6
 800215c:	3109803a 	cmpltu	r4,r6,r4
 8002160:	1947883a 	add	r3,r3,r5
 8002164:	20c7883a 	add	r3,r4,r3
 8002168:	817ff504 	addi	r5,r16,-44
 800216c:	11000017 	ldw	r4,0(r2)
 8002170:	18000726 	beq	r3,zero,8002190 <__cxa_begin_catch+0x64>
 8002174:	2000191e 	bne	r4,zero,80021dc <__cxa_begin_catch+0xb0>
 8002178:	11400015 	stw	r5,0(r2)
 800217c:	0005883a 	mov	r2,zero
 8002180:	dfc00117 	ldw	ra,4(sp)
 8002184:	dc000017 	ldw	r16,0(sp)
 8002188:	dec00204 	addi	sp,sp,8
 800218c:	f800283a 	ret
 8002190:	01c00044 	movi	r7,1
 8002194:	39bff736 	bltu	r7,r6,8002174 <__alt_data_end+0xfc002174>
 8002198:	80fffa17 	ldw	r3,-24(r16)
 800219c:	18000d16 	blt	r3,zero,80021d4 <__cxa_begin_catch+0xa8>
 80021a0:	18c00044 	addi	r3,r3,1
 80021a4:	11800117 	ldw	r6,4(r2)
 80021a8:	80fffa15 	stw	r3,-24(r16)
 80021ac:	30ffffc4 	addi	r3,r6,-1
 80021b0:	10c00115 	stw	r3,4(r2)
 80021b4:	21400226 	beq	r4,r5,80021c0 <__cxa_begin_catch+0x94>
 80021b8:	813ff915 	stw	r4,-28(r16)
 80021bc:	11400015 	stw	r5,0(r2)
 80021c0:	80bfff17 	ldw	r2,-4(r16)
 80021c4:	dfc00117 	ldw	ra,4(sp)
 80021c8:	dc000017 	ldw	r16,0(sp)
 80021cc:	dec00204 	addi	sp,sp,8
 80021d0:	f800283a 	ret
 80021d4:	38c7c83a 	sub	r3,r7,r3
 80021d8:	003ff206 	br	80021a4 <__alt_data_end+0xfc0021a4>
 80021dc:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

080021e0 <__cxa_end_catch>:
 80021e0:	deffff04 	addi	sp,sp,-4
 80021e4:	dfc00015 	stw	ra,0(sp)
 80021e8:	8001a340 	call	8001a34 <__cxa_get_globals_fast>
 80021ec:	11000017 	ldw	r4,0(r2)
 80021f0:	20001326 	beq	r4,zero,8002240 <__cxa_end_catch+0x60>
 80021f4:	21400b17 	ldw	r5,44(r4)
 80021f8:	01ef3574 	movhi	r7,48341
 80021fc:	39f54004 	addi	r7,r7,-11008
 8002200:	29cf883a 	add	r7,r5,r7
 8002204:	20c00c17 	ldw	r3,48(r4)
 8002208:	394d803a 	cmpltu	r6,r7,r5
 800220c:	016e2cb4 	movhi	r5,47282
 8002210:	296aaf04 	addi	r5,r5,-21828
 8002214:	1947883a 	add	r3,r3,r5
 8002218:	30c7883a 	add	r3,r6,r3
 800221c:	18000b1e 	bne	r3,zero,800224c <__cxa_end_catch+0x6c>
 8002220:	00c00044 	movi	r3,1
 8002224:	19c00936 	bltu	r3,r7,800224c <__cxa_end_catch+0x6c>
 8002228:	20c00517 	ldw	r3,20(r4)
 800222c:	18000c16 	blt	r3,zero,8002260 <__cxa_end_catch+0x80>
 8002230:	197fffc4 	addi	r5,r3,-1
 8002234:	28000f26 	beq	r5,zero,8002274 <__cxa_end_catch+0x94>
 8002238:	18001426 	beq	r3,zero,800228c <__cxa_end_catch+0xac>
 800223c:	21400515 	stw	r5,20(r4)
 8002240:	dfc00017 	ldw	ra,0(sp)
 8002244:	dec00104 	addi	sp,sp,4
 8002248:	f800283a 	ret
 800224c:	21000b04 	addi	r4,r4,44
 8002250:	10000015 	stw	zero,0(r2)
 8002254:	dfc00017 	ldw	ra,0(sp)
 8002258:	dec00104 	addi	sp,sp,4
 800225c:	8002bb41 	jmpi	8002bb4 <_Unwind_DeleteException>
 8002260:	19400044 	addi	r5,r3,1
 8002264:	283ff51e 	bne	r5,zero,800223c <__alt_data_end+0xfc00223c>
 8002268:	20c00417 	ldw	r3,16(r4)
 800226c:	10c00015 	stw	r3,0(r2)
 8002270:	003ff206 	br	800223c <__alt_data_end+0xfc00223c>
 8002274:	20c00417 	ldw	r3,16(r4)
 8002278:	21000b04 	addi	r4,r4,44
 800227c:	10c00015 	stw	r3,0(r2)
 8002280:	dfc00017 	ldw	ra,0(sp)
 8002284:	dec00104 	addi	sp,sp,4
 8002288:	8002bb41 	jmpi	8002bb4 <_Unwind_DeleteException>
 800228c:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

08002290 <_ZSt18uncaught_exceptionv>:
 8002290:	deffff04 	addi	sp,sp,-4
 8002294:	dfc00015 	stw	ra,0(sp)
 8002298:	8001a400 	call	8001a40 <__cxa_get_globals>
 800229c:	10800117 	ldw	r2,4(r2)
 80022a0:	1004c03a 	cmpne	r2,r2,zero
 80022a4:	dfc00017 	ldw	ra,0(sp)
 80022a8:	dec00104 	addi	sp,sp,4
 80022ac:	f800283a 	ret

080022b0 <__cxa_call_terminate>:
 80022b0:	defffe04 	addi	sp,sp,-8
 80022b4:	dc000015 	stw	r16,0(sp)
 80022b8:	dfc00115 	stw	ra,4(sp)
 80022bc:	2021883a 	mov	r16,r4
 80022c0:	20000c26 	beq	r4,zero,80022f4 <__cxa_call_terminate+0x44>
 80022c4:	800212c0 	call	800212c <__cxa_begin_catch>
 80022c8:	80c00017 	ldw	r3,0(r16)
 80022cc:	012f3574 	movhi	r4,48341
 80022d0:	21354004 	addi	r4,r4,-11008
 80022d4:	1909883a 	add	r4,r3,r4
 80022d8:	80800117 	ldw	r2,4(r16)
 80022dc:	20cb803a 	cmpltu	r5,r4,r3
 80022e0:	00ee2cb4 	movhi	r3,47282
 80022e4:	18eaaf04 	addi	r3,r3,-21828
 80022e8:	10c5883a 	add	r2,r2,r3
 80022ec:	2885883a 	add	r2,r5,r2
 80022f0:	10000126 	beq	r2,zero,80022f8 <__cxa_call_terminate+0x48>
 80022f4:	8001dd80 	call	8001dd8 <_ZSt9terminatev>
 80022f8:	00800044 	movi	r2,1
 80022fc:	113ffd36 	bltu	r2,r4,80022f4 <__alt_data_end+0xfc0022f4>
 8002300:	813ff817 	ldw	r4,-32(r16)
 8002304:	8001d180 	call	8001d18 <_ZN10__cxxabiv111__terminateEPFvvE>

08002308 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 8002308:	defffe04 	addi	sp,sp,-8
 800230c:	dfc00115 	stw	ra,4(sp)
 8002310:	dc000015 	stw	r16,0(sp)
 8002314:	00800044 	movi	r2,1
 8002318:	11000a36 	bltu	r2,r4,8002344 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 800231c:	28bff617 	ldw	r2,-40(r5)
 8002320:	2c000504 	addi	r16,r5,20
 8002324:	10000226 	beq	r2,zero,8002330 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 8002328:	8009883a 	mov	r4,r16
 800232c:	103ee83a 	callr	r2
 8002330:	8009883a 	mov	r4,r16
 8002334:	dfc00117 	ldw	ra,4(sp)
 8002338:	dc000017 	ldw	r16,0(sp)
 800233c:	dec00204 	addi	sp,sp,8
 8002340:	80025681 	jmpi	8002568 <__cxa_free_exception>
 8002344:	293ff817 	ldw	r4,-32(r5)
 8002348:	8001d180 	call	8001d18 <_ZN10__cxxabiv111__terminateEPFvvE>

0800234c <__cxa_throw>:
 800234c:	defffb04 	addi	sp,sp,-20
 8002350:	dfc00415 	stw	ra,16(sp)
 8002354:	dcc00315 	stw	r19,12(sp)
 8002358:	dc800215 	stw	r18,8(sp)
 800235c:	2827883a 	mov	r19,r5
 8002360:	3025883a 	mov	r18,r6
 8002364:	dc400115 	stw	r17,4(sp)
 8002368:	dc000015 	stw	r16,0(sp)
 800236c:	2021883a 	mov	r16,r4
 8002370:	8001a400 	call	8001a40 <__cxa_get_globals>
 8002374:	10c00117 	ldw	r3,4(r2)
 8002378:	847ffb04 	addi	r17,r16,-20
 800237c:	18c00044 	addi	r3,r3,1
 8002380:	10c00115 	stw	r3,4(r2)
 8002384:	00800044 	movi	r2,1
 8002388:	80bfef15 	stw	r2,-68(r16)
 800238c:	84fff015 	stw	r19,-64(r16)
 8002390:	84bff115 	stw	r18,-60(r16)
 8002394:	8001e500 	call	8001e50 <_ZSt14get_unexpectedv>
 8002398:	80bff215 	stw	r2,-56(r16)
 800239c:	8001e2c0 	call	8001e2c <_ZSt13get_terminatev>
 80023a0:	80bff315 	stw	r2,-52(r16)
 80023a4:	0090caf4 	movhi	r2,17195
 80023a8:	108ac004 	addi	r2,r2,11008
 80023ac:	80bffb15 	stw	r2,-20(r16)
 80023b0:	0091d3b4 	movhi	r2,18254
 80023b4:	109550c4 	addi	r2,r2,21827
 80023b8:	80bffc15 	stw	r2,-16(r16)
 80023bc:	00820034 	movhi	r2,2048
 80023c0:	1088c204 	addi	r2,r2,8968
 80023c4:	8809883a 	mov	r4,r17
 80023c8:	80bffd15 	stw	r2,-12(r16)
 80023cc:	8002a100 	call	8002a10 <_Unwind_SjLj_RaiseException>
 80023d0:	8809883a 	mov	r4,r17
 80023d4:	800212c0 	call	800212c <__cxa_begin_catch>
 80023d8:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

080023dc <__cxa_rethrow>:
 80023dc:	defffe04 	addi	sp,sp,-8
 80023e0:	dfc00115 	stw	ra,4(sp)
 80023e4:	dc000015 	stw	r16,0(sp)
 80023e8:	8001a400 	call	8001a40 <__cxa_get_globals>
 80023ec:	10c00117 	ldw	r3,4(r2)
 80023f0:	11000017 	ldw	r4,0(r2)
 80023f4:	18c00044 	addi	r3,r3,1
 80023f8:	10c00115 	stw	r3,4(r2)
 80023fc:	20001126 	beq	r4,zero,8002444 <__cxa_rethrow+0x68>
 8002400:	21400b17 	ldw	r5,44(r4)
 8002404:	01ef3574 	movhi	r7,48341
 8002408:	39f54004 	addi	r7,r7,-11008
 800240c:	29cf883a 	add	r7,r5,r7
 8002410:	20c00c17 	ldw	r3,48(r4)
 8002414:	394d803a 	cmpltu	r6,r7,r5
 8002418:	016e2cb4 	movhi	r5,47282
 800241c:	296aaf04 	addi	r5,r5,-21828
 8002420:	1947883a 	add	r3,r3,r5
 8002424:	30c7883a 	add	r3,r6,r3
 8002428:	18000726 	beq	r3,zero,8002448 <__cxa_rethrow+0x6c>
 800242c:	10000015 	stw	zero,0(r2)
 8002430:	24000b04 	addi	r16,r4,44
 8002434:	8009883a 	mov	r4,r16
 8002438:	8002b680 	call	8002b68 <_Unwind_SjLj_Resume_or_Rethrow>
 800243c:	8009883a 	mov	r4,r16
 8002440:	800212c0 	call	800212c <__cxa_begin_catch>
 8002444:	8001dd80 	call	8001dd8 <_ZSt9terminatev>
 8002448:	00c00044 	movi	r3,1
 800244c:	19fff736 	bltu	r3,r7,800242c <__alt_data_end+0xfc00242c>
 8002450:	20800517 	ldw	r2,20(r4)
 8002454:	0085c83a 	sub	r2,zero,r2
 8002458:	20800515 	stw	r2,20(r4)
 800245c:	003ff406 	br	8002430 <__alt_data_end+0xfc002430>

08002460 <_ZNSt9type_infoD1Ev>:
 8002460:	f800283a 	ret

08002464 <_ZNKSt9type_info14__is_pointer_pEv>:
 8002464:	0005883a 	mov	r2,zero
 8002468:	f800283a 	ret

0800246c <_ZNKSt9type_info15__is_function_pEv>:
 800246c:	0005883a 	mov	r2,zero
 8002470:	f800283a 	ret

08002474 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8002474:	0005883a 	mov	r2,zero
 8002478:	f800283a 	ret

0800247c <_ZNSt9type_infoD0Ev>:
 800247c:	8001d141 	jmpi	8001d14 <_ZdlPv>

08002480 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8002480:	21000117 	ldw	r4,4(r4)
 8002484:	29400117 	ldw	r5,4(r5)
 8002488:	21400c26 	beq	r4,r5,80024bc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 800248c:	20c00007 	ldb	r3,0(r4)
 8002490:	00800a84 	movi	r2,42
 8002494:	18800726 	beq	r3,r2,80024b4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 8002498:	deffff04 	addi	sp,sp,-4
 800249c:	dfc00015 	stw	ra,0(sp)
 80024a0:	80037980 	call	8003798 <strcmp>
 80024a4:	1005003a 	cmpeq	r2,r2,zero
 80024a8:	dfc00017 	ldw	ra,0(sp)
 80024ac:	dec00104 	addi	sp,sp,4
 80024b0:	f800283a 	ret
 80024b4:	0005883a 	mov	r2,zero
 80024b8:	f800283a 	ret
 80024bc:	00800044 	movi	r2,1
 80024c0:	f800283a 	ret

080024c4 <__cxa_allocate_exception>:
 80024c4:	defffd04 	addi	sp,sp,-12
 80024c8:	dc400115 	stw	r17,4(sp)
 80024cc:	24401104 	addi	r17,r4,68
 80024d0:	8809883a 	mov	r4,r17
 80024d4:	dc000015 	stw	r16,0(sp)
 80024d8:	dfc00215 	stw	ra,8(sp)
 80024dc:	8002c780 	call	8002c78 <malloc>
 80024e0:	1021883a 	mov	r16,r2
 80024e4:	10000a26 	beq	r2,zero,8002510 <__cxa_allocate_exception+0x4c>
 80024e8:	8009883a 	mov	r4,r16
 80024ec:	000b883a 	mov	r5,zero
 80024f0:	01801104 	movi	r6,68
 80024f4:	80033240 	call	8003324 <memset>
 80024f8:	80801104 	addi	r2,r16,68
 80024fc:	dfc00217 	ldw	ra,8(sp)
 8002500:	dc400117 	ldw	r17,4(sp)
 8002504:	dc000017 	ldw	r16,0(sp)
 8002508:	dec00304 	addi	sp,sp,12
 800250c:	f800283a 	ret
 8002510:	01420074 	movhi	r5,2049
 8002514:	29613f04 	addi	r5,r5,-31492
 8002518:	00808004 	movi	r2,512
 800251c:	29800017 	ldw	r6,0(r5)
 8002520:	14400736 	bltu	r2,r17,8002540 <__cxa_allocate_exception+0x7c>
 8002524:	3005883a 	mov	r2,r6
 8002528:	01000104 	movi	r4,4
 800252c:	10c0004c 	andi	r3,r2,1
 8002530:	18000426 	beq	r3,zero,8002544 <__cxa_allocate_exception+0x80>
 8002534:	84000044 	addi	r16,r16,1
 8002538:	1004d07a 	srli	r2,r2,1
 800253c:	813ffb1e 	bne	r16,r4,800252c <__alt_data_end+0xfc00252c>
 8002540:	8001dd80 	call	8001dd8 <_ZSt9terminatev>
 8002544:	00800044 	movi	r2,1
 8002548:	1404983a 	sll	r2,r2,r16
 800254c:	8020927a 	slli	r16,r16,9
 8002550:	118cb03a 	or	r6,r2,r6
 8002554:	00820074 	movhi	r2,2049
 8002558:	10a18a04 	addi	r2,r2,-31192
 800255c:	29800015 	stw	r6,0(r5)
 8002560:	80a1883a 	add	r16,r16,r2
 8002564:	003fe006 	br	80024e8 <__alt_data_end+0xfc0024e8>

08002568 <__cxa_free_exception>:
 8002568:	00820074 	movhi	r2,2049
 800256c:	10a18a04 	addi	r2,r2,-31192
 8002570:	20800236 	bltu	r4,r2,800257c <__cxa_free_exception+0x14>
 8002574:	10c20004 	addi	r3,r2,2048
 8002578:	20c00236 	bltu	r4,r3,8002584 <__cxa_free_exception+0x1c>
 800257c:	213fef04 	addi	r4,r4,-68
 8002580:	8002c8c1 	jmpi	8002c8c <free>
 8002584:	2089c83a 	sub	r4,r4,r2
 8002588:	2008d27a 	srli	r4,r4,9
 800258c:	01420074 	movhi	r5,2049
 8002590:	29613f04 	addi	r5,r5,-31492
 8002594:	00ffff84 	movi	r3,-2
 8002598:	28800017 	ldw	r2,0(r5)
 800259c:	1908183a 	rol	r4,r3,r4
 80025a0:	2088703a 	and	r4,r4,r2
 80025a4:	29000015 	stw	r4,0(r5)
 80025a8:	f800283a 	ret

080025ac <__cxa_allocate_dependent_exception>:
 80025ac:	defffe04 	addi	sp,sp,-8
 80025b0:	01001004 	movi	r4,64
 80025b4:	dc000015 	stw	r16,0(sp)
 80025b8:	dfc00115 	stw	ra,4(sp)
 80025bc:	8002c780 	call	8002c78 <malloc>
 80025c0:	1021883a 	mov	r16,r2
 80025c4:	10000926 	beq	r2,zero,80025ec <__cxa_allocate_dependent_exception+0x40>
 80025c8:	8009883a 	mov	r4,r16
 80025cc:	000b883a 	mov	r5,zero
 80025d0:	01801004 	movi	r6,64
 80025d4:	80033240 	call	8003324 <memset>
 80025d8:	8005883a 	mov	r2,r16
 80025dc:	dfc00117 	ldw	ra,4(sp)
 80025e0:	dc000017 	ldw	r16,0(sp)
 80025e4:	dec00204 	addi	sp,sp,8
 80025e8:	f800283a 	ret
 80025ec:	01c20074 	movhi	r7,2049
 80025f0:	39e13e04 	addi	r7,r7,-31496
 80025f4:	39800017 	ldw	r6,0(r7)
 80025f8:	0005883a 	mov	r2,zero
 80025fc:	01400104 	movi	r5,4
 8002600:	3007883a 	mov	r3,r6
 8002604:	1900004c 	andi	r4,r3,1
 8002608:	20000426 	beq	r4,zero,800261c <__cxa_allocate_dependent_exception+0x70>
 800260c:	10800044 	addi	r2,r2,1
 8002610:	1806d07a 	srli	r3,r3,1
 8002614:	117ffb1e 	bne	r2,r5,8002604 <__alt_data_end+0xfc002604>
 8002618:	8001dd80 	call	8001dd8 <_ZSt9terminatev>
 800261c:	00c00044 	movi	r3,1
 8002620:	1886983a 	sll	r3,r3,r2
 8002624:	100491ba 	slli	r2,r2,6
 8002628:	04020074 	movhi	r16,2049
 800262c:	198cb03a 	or	r6,r3,r6
 8002630:	84214a04 	addi	r16,r16,-31448
 8002634:	39800015 	stw	r6,0(r7)
 8002638:	1421883a 	add	r16,r2,r16
 800263c:	003fe206 	br	80025c8 <__alt_data_end+0xfc0025c8>

08002640 <__cxa_free_dependent_exception>:
 8002640:	00820074 	movhi	r2,2049
 8002644:	10a14a04 	addi	r2,r2,-31448
 8002648:	20800236 	bltu	r4,r2,8002654 <__cxa_free_dependent_exception+0x14>
 800264c:	10c04004 	addi	r3,r2,256
 8002650:	20c00136 	bltu	r4,r3,8002658 <__cxa_free_dependent_exception+0x18>
 8002654:	8002c8c1 	jmpi	8002c8c <free>
 8002658:	2089c83a 	sub	r4,r4,r2
 800265c:	2008d1ba 	srli	r4,r4,6
 8002660:	01420074 	movhi	r5,2049
 8002664:	29613e04 	addi	r5,r5,-31496
 8002668:	00ffff84 	movi	r3,-2
 800266c:	28800017 	ldw	r2,0(r5)
 8002670:	1908183a 	rol	r4,r3,r4
 8002674:	2088703a 	and	r4,r4,r2
 8002678:	29000015 	stw	r4,0(r5)
 800267c:	f800283a 	ret

08002680 <_ZNSt9exceptionD1Ev>:
 8002680:	f800283a 	ret

08002684 <_ZNSt13bad_exceptionD1Ev>:
 8002684:	f800283a 	ret

08002688 <_ZNKSt9exception4whatEv>:
 8002688:	00820034 	movhi	r2,2048
 800268c:	109c9704 	addi	r2,r2,29276
 8002690:	f800283a 	ret

08002694 <_ZNKSt13bad_exception4whatEv>:
 8002694:	00820034 	movhi	r2,2048
 8002698:	109c9b04 	addi	r2,r2,29292
 800269c:	f800283a 	ret

080026a0 <_ZNSt9exceptionD0Ev>:
 80026a0:	8001d141 	jmpi	8001d14 <_ZdlPv>

080026a4 <_ZNSt13bad_exceptionD0Ev>:
 80026a4:	8001d141 	jmpi	8001d14 <_ZdlPv>

080026a8 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 80026a8:	f800283a 	ret

080026ac <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 80026ac:	8001d141 	jmpi	8001d14 <_ZdlPv>

080026b0 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 80026b0:	f800283a 	ret

080026b4 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 80026b4:	8001d141 	jmpi	8001d14 <_ZdlPv>

080026b8 <__cxa_pure_virtual>:
 80026b8:	01420034 	movhi	r5,2048
 80026bc:	deffff04 	addi	sp,sp,-4
 80026c0:	295cd104 	addi	r5,r5,29508
 80026c4:	01000084 	movi	r4,2
 80026c8:	018006c4 	movi	r6,27
 80026cc:	dfc00015 	stw	ra,0(sp)
 80026d0:	8004d700 	call	8004d70 <write>
 80026d4:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

080026d8 <__cxa_deleted_virtual>:
 80026d8:	01420034 	movhi	r5,2048
 80026dc:	deffff04 	addi	sp,sp,-4
 80026e0:	295cd804 	addi	r5,r5,29536
 80026e4:	01000084 	movi	r4,2
 80026e8:	01800784 	movi	r6,30
 80026ec:	dfc00015 	stw	ra,0(sp)
 80026f0:	8004d700 	call	8004d70 <write>
 80026f4:	8001dd80 	call	8001dd8 <_ZSt9terminatev>

080026f8 <__mulsi3>:
 80026f8:	0005883a 	mov	r2,zero
 80026fc:	20000726 	beq	r4,zero,800271c <__mulsi3+0x24>
 8002700:	20c0004c 	andi	r3,r4,1
 8002704:	2008d07a 	srli	r4,r4,1
 8002708:	18000126 	beq	r3,zero,8002710 <__mulsi3+0x18>
 800270c:	1145883a 	add	r2,r2,r5
 8002710:	294b883a 	add	r5,r5,r5
 8002714:	203ffa1e 	bne	r4,zero,8002700 <__alt_data_end+0xfc002700>
 8002718:	f800283a 	ret
 800271c:	f800283a 	ret

08002720 <_Unwind_ForcedUnwind_Phase2>:
 8002720:	defff404 	addi	sp,sp,-48
 8002724:	dd800915 	stw	r22,36(sp)
 8002728:	05820074 	movhi	r22,2049
 800272c:	ddc00a15 	stw	r23,40(sp)
 8002730:	dd400815 	stw	r21,32(sp)
 8002734:	dd000715 	stw	r20,28(sp)
 8002738:	dcc00615 	stw	r19,24(sp)
 800273c:	dc400415 	stw	r17,16(sp)
 8002740:	dc000315 	stw	r16,12(sp)
 8002744:	dfc00b15 	stw	ra,44(sp)
 8002748:	dc800515 	stw	r18,20(sp)
 800274c:	2021883a 	mov	r16,r4
 8002750:	2823883a 	mov	r17,r5
 8002754:	24c00317 	ldw	r19,12(r4)
 8002758:	25000417 	ldw	r20,16(r4)
 800275c:	28c00017 	ldw	r3,0(r5)
 8002760:	b5a14004 	addi	r22,r22,-31488
 8002764:	054001c4 	movi	r21,7
 8002768:	05c00204 	movi	r23,8
 800276c:	00001606 	br	80027c8 <_Unwind_ForcedUnwind_Phase2+0xa8>
 8002770:	81800017 	ldw	r6,0(r16)
 8002774:	81c00117 	ldw	r7,4(r16)
 8002778:	1c800617 	ldw	r18,24(r3)
 800277c:	dc000015 	stw	r16,0(sp)
 8002780:	dc400115 	stw	r17,4(sp)
 8002784:	dd000215 	stw	r20,8(sp)
 8002788:	983ee83a 	callr	r19
 800278c:	01000044 	movi	r4,1
 8002790:	01400284 	movi	r5,10
 8002794:	1000241e 	bne	r2,zero,8002828 <_Unwind_ForcedUnwind_Phase2+0x108>
 8002798:	90000726 	beq	r18,zero,80027b8 <_Unwind_ForcedUnwind_Phase2+0x98>
 800279c:	81800017 	ldw	r6,0(r16)
 80027a0:	81c00117 	ldw	r7,4(r16)
 80027a4:	dc000015 	stw	r16,0(sp)
 80027a8:	dc400115 	stw	r17,4(sp)
 80027ac:	903ee83a 	callr	r18
 80027b0:	15401f26 	beq	r2,r21,8002830 <_Unwind_ForcedUnwind_Phase2+0x110>
 80027b4:	15c01c1e 	bne	r2,r23,8002828 <_Unwind_ForcedUnwind_Phase2+0x108>
 80027b8:	88800017 	ldw	r2,0(r17)
 80027bc:	10c00017 	ldw	r3,0(r2)
 80027c0:	b0c00015 	stw	r3,0(r22)
 80027c4:	88c00015 	stw	r3,0(r17)
 80027c8:	01000044 	movi	r4,1
 80027cc:	01400284 	movi	r5,10
 80027d0:	183fe71e 	bne	r3,zero,8002770 <__alt_data_end+0xfc002770>
 80027d4:	81800017 	ldw	r6,0(r16)
 80027d8:	81c00117 	ldw	r7,4(r16)
 80027dc:	01000044 	movi	r4,1
 80027e0:	dc000015 	stw	r16,0(sp)
 80027e4:	dc400115 	stw	r17,4(sp)
 80027e8:	dd000215 	stw	r20,8(sp)
 80027ec:	01400684 	movi	r5,26
 80027f0:	983ee83a 	callr	r19
 80027f4:	10000c1e 	bne	r2,zero,8002828 <_Unwind_ForcedUnwind_Phase2+0x108>
 80027f8:	00800144 	movi	r2,5
 80027fc:	dfc00b17 	ldw	ra,44(sp)
 8002800:	ddc00a17 	ldw	r23,40(sp)
 8002804:	dd800917 	ldw	r22,36(sp)
 8002808:	dd400817 	ldw	r21,32(sp)
 800280c:	dd000717 	ldw	r20,28(sp)
 8002810:	dcc00617 	ldw	r19,24(sp)
 8002814:	dc800517 	ldw	r18,20(sp)
 8002818:	dc400417 	ldw	r17,16(sp)
 800281c:	dc000317 	ldw	r16,12(sp)
 8002820:	dec00c04 	addi	sp,sp,48
 8002824:	f800283a 	ret
 8002828:	00800084 	movi	r2,2
 800282c:	003ff306 	br	80027fc <__alt_data_end+0xfc0027fc>
 8002830:	a805883a 	mov	r2,r21
 8002834:	003ff106 	br	80027fc <__alt_data_end+0xfc0027fc>

08002838 <_Unwind_RaiseException_Phase2>:
 8002838:	28c00017 	ldw	r3,0(r5)
 800283c:	defff804 	addi	sp,sp,-32
 8002840:	dcc00515 	stw	r19,20(sp)
 8002844:	dc800415 	stw	r18,16(sp)
 8002848:	dc400315 	stw	r17,12(sp)
 800284c:	dc000215 	stw	r16,8(sp)
 8002850:	dfc00715 	stw	ra,28(sp)
 8002854:	dd000615 	stw	r20,24(sp)
 8002858:	2823883a 	mov	r17,r5
 800285c:	2021883a 	mov	r16,r4
 8002860:	048001c4 	movi	r18,7
 8002864:	04c00204 	movi	r19,8
 8002868:	18001326 	beq	r3,zero,80028b8 <_Unwind_RaiseException_Phase2+0x80>
 800286c:	81000417 	ldw	r4,16(r16)
 8002870:	1a000617 	ldw	r8,24(r3)
 8002874:	19001c26 	beq	r3,r4,80028e8 <_Unwind_RaiseException_Phase2+0xb0>
 8002878:	40000b26 	beq	r8,zero,80028a8 <_Unwind_RaiseException_Phase2+0x70>
 800287c:	01400084 	movi	r5,2
 8002880:	0029883a 	mov	r20,zero
 8002884:	81800017 	ldw	r6,0(r16)
 8002888:	81c00117 	ldw	r7,4(r16)
 800288c:	01000044 	movi	r4,1
 8002890:	dc000015 	stw	r16,0(sp)
 8002894:	dc400115 	stw	r17,4(sp)
 8002898:	403ee83a 	callr	r8
 800289c:	14800f26 	beq	r2,r18,80028dc <_Unwind_RaiseException_Phase2+0xa4>
 80028a0:	14c0051e 	bne	r2,r19,80028b8 <_Unwind_RaiseException_Phase2+0x80>
 80028a4:	a0000f1e 	bne	r20,zero,80028e4 <_Unwind_RaiseException_Phase2+0xac>
 80028a8:	88c00017 	ldw	r3,0(r17)
 80028ac:	18c00017 	ldw	r3,0(r3)
 80028b0:	88c00015 	stw	r3,0(r17)
 80028b4:	183fed1e 	bne	r3,zero,800286c <__alt_data_end+0xfc00286c>
 80028b8:	00800084 	movi	r2,2
 80028bc:	dfc00717 	ldw	ra,28(sp)
 80028c0:	dd000617 	ldw	r20,24(sp)
 80028c4:	dcc00517 	ldw	r19,20(sp)
 80028c8:	dc800417 	ldw	r18,16(sp)
 80028cc:	dc400317 	ldw	r17,12(sp)
 80028d0:	dc000217 	ldw	r16,8(sp)
 80028d4:	dec00804 	addi	sp,sp,32
 80028d8:	f800283a 	ret
 80028dc:	9005883a 	mov	r2,r18
 80028e0:	003ff606 	br	80028bc <__alt_data_end+0xfc0028bc>
 80028e4:	8002c400 	call	8002c40 <abort>
 80028e8:	403ffe26 	beq	r8,zero,80028e4 <__alt_data_end+0xfc0028e4>
 80028ec:	01400184 	movi	r5,6
 80028f0:	05000104 	movi	r20,4
 80028f4:	003fe306 	br	8002884 <__alt_data_end+0xfc002884>

080028f8 <uw_install_context.isra.1>:
 80028f8:	20c00017 	ldw	r3,0(r4)
 80028fc:	deffff04 	addi	sp,sp,-4
 8002900:	01420074 	movhi	r5,2049
 8002904:	19000917 	ldw	r4,36(r3)
 8002908:	df000015 	stw	fp,0(sp)
 800290c:	18800804 	addi	r2,r3,32
 8002910:	d839883a 	mov	fp,sp
 8002914:	29614004 	addi	r5,r5,-31488
 8002918:	28c00015 	stw	r3,0(r5)
 800291c:	17000017 	ldw	fp,0(r2)
 8002920:	1ec00a17 	ldw	sp,40(r3)
 8002924:	2000683a 	jmp	r4

08002928 <_Unwind_SjLj_Register>:
 8002928:	00820074 	movhi	r2,2049
 800292c:	10a14004 	addi	r2,r2,-31488
 8002930:	10c00017 	ldw	r3,0(r2)
 8002934:	11000015 	stw	r4,0(r2)
 8002938:	20c00015 	stw	r3,0(r4)
 800293c:	f800283a 	ret

08002940 <_Unwind_SjLj_Unregister>:
 8002940:	20c00017 	ldw	r3,0(r4)
 8002944:	00820074 	movhi	r2,2049
 8002948:	10a14004 	addi	r2,r2,-31488
 800294c:	10c00015 	stw	r3,0(r2)
 8002950:	f800283a 	ret

08002954 <_Unwind_GetGR>:
 8002954:	20800017 	ldw	r2,0(r4)
 8002958:	29400084 	addi	r5,r5,2
 800295c:	294b883a 	add	r5,r5,r5
 8002960:	294b883a 	add	r5,r5,r5
 8002964:	114b883a 	add	r5,r2,r5
 8002968:	28800017 	ldw	r2,0(r5)
 800296c:	f800283a 	ret

08002970 <_Unwind_GetCFA>:
 8002970:	20800017 	ldw	r2,0(r4)
 8002974:	10000226 	beq	r2,zero,8002980 <_Unwind_GetCFA+0x10>
 8002978:	10800a17 	ldw	r2,40(r2)
 800297c:	f800283a 	ret
 8002980:	0005883a 	mov	r2,zero
 8002984:	f800283a 	ret

08002988 <_Unwind_SetGR>:
 8002988:	20800017 	ldw	r2,0(r4)
 800298c:	29400084 	addi	r5,r5,2
 8002990:	294b883a 	add	r5,r5,r5
 8002994:	294b883a 	add	r5,r5,r5
 8002998:	114b883a 	add	r5,r2,r5
 800299c:	29800015 	stw	r6,0(r5)
 80029a0:	f800283a 	ret

080029a4 <_Unwind_GetIP>:
 80029a4:	20800017 	ldw	r2,0(r4)
 80029a8:	10800117 	ldw	r2,4(r2)
 80029ac:	10800044 	addi	r2,r2,1
 80029b0:	f800283a 	ret

080029b4 <_Unwind_GetIPInfo>:
 80029b4:	20800017 	ldw	r2,0(r4)
 80029b8:	28000015 	stw	zero,0(r5)
 80029bc:	10000326 	beq	r2,zero,80029cc <_Unwind_GetIPInfo+0x18>
 80029c0:	10800117 	ldw	r2,4(r2)
 80029c4:	10800044 	addi	r2,r2,1
 80029c8:	f800283a 	ret
 80029cc:	0005883a 	mov	r2,zero
 80029d0:	f800283a 	ret

080029d4 <_Unwind_SetIP>:
 80029d4:	20800017 	ldw	r2,0(r4)
 80029d8:	297fffc4 	addi	r5,r5,-1
 80029dc:	11400115 	stw	r5,4(r2)
 80029e0:	f800283a 	ret

080029e4 <_Unwind_GetLanguageSpecificData>:
 80029e4:	20800017 	ldw	r2,0(r4)
 80029e8:	10800717 	ldw	r2,28(r2)
 80029ec:	f800283a 	ret

080029f0 <_Unwind_GetRegionStart>:
 80029f0:	0005883a 	mov	r2,zero
 80029f4:	f800283a 	ret

080029f8 <_Unwind_FindEnclosingFunction>:
 80029f8:	0005883a 	mov	r2,zero
 80029fc:	f800283a 	ret

08002a00 <_Unwind_GetDataRelBase>:
 8002a00:	0005883a 	mov	r2,zero
 8002a04:	f800283a 	ret

08002a08 <_Unwind_GetTextRelBase>:
 8002a08:	0005883a 	mov	r2,zero
 8002a0c:	f800283a 	ret

08002a10 <_Unwind_SjLj_RaiseException>:
 8002a10:	00820074 	movhi	r2,2049
 8002a14:	defff804 	addi	sp,sp,-32
 8002a18:	10a14004 	addi	r2,r2,-31488
 8002a1c:	dc800515 	stw	r18,20(sp)
 8002a20:	14800017 	ldw	r18,0(r2)
 8002a24:	dfc00715 	stw	ra,28(sp)
 8002a28:	dcc00615 	stw	r19,24(sp)
 8002a2c:	dc400415 	stw	r17,16(sp)
 8002a30:	dc000315 	stw	r16,12(sp)
 8002a34:	dc800215 	stw	r18,8(sp)
 8002a38:	90001426 	beq	r18,zero,8002a8c <_Unwind_SjLj_RaiseException+0x7c>
 8002a3c:	2021883a 	mov	r16,r4
 8002a40:	9005883a 	mov	r2,r18
 8002a44:	04400184 	movi	r17,6
 8002a48:	04c00204 	movi	r19,8
 8002a4c:	10800617 	ldw	r2,24(r2)
 8002a50:	10000a26 	beq	r2,zero,8002a7c <_Unwind_SjLj_RaiseException+0x6c>
 8002a54:	81800017 	ldw	r6,0(r16)
 8002a58:	81c00117 	ldw	r7,4(r16)
 8002a5c:	01000044 	movi	r4,1
 8002a60:	d8c00204 	addi	r3,sp,8
 8002a64:	dc000015 	stw	r16,0(sp)
 8002a68:	d8c00115 	stw	r3,4(sp)
 8002a6c:	200b883a 	mov	r5,r4
 8002a70:	103ee83a 	callr	r2
 8002a74:	14400d26 	beq	r2,r17,8002aac <_Unwind_SjLj_RaiseException+0x9c>
 8002a78:	14c0171e 	bne	r2,r19,8002ad8 <_Unwind_SjLj_RaiseException+0xc8>
 8002a7c:	d8800217 	ldw	r2,8(sp)
 8002a80:	10800017 	ldw	r2,0(r2)
 8002a84:	d8800215 	stw	r2,8(sp)
 8002a88:	103ff01e 	bne	r2,zero,8002a4c <__alt_data_end+0xfc002a4c>
 8002a8c:	00800144 	movi	r2,5
 8002a90:	dfc00717 	ldw	ra,28(sp)
 8002a94:	dcc00617 	ldw	r19,24(sp)
 8002a98:	dc800517 	ldw	r18,20(sp)
 8002a9c:	dc400417 	ldw	r17,16(sp)
 8002aa0:	dc000317 	ldw	r16,12(sp)
 8002aa4:	dec00804 	addi	sp,sp,32
 8002aa8:	f800283a 	ret
 8002aac:	d8800217 	ldw	r2,8(sp)
 8002ab0:	80000315 	stw	zero,12(r16)
 8002ab4:	8009883a 	mov	r4,r16
 8002ab8:	80800415 	stw	r2,16(r16)
 8002abc:	d9400204 	addi	r5,sp,8
 8002ac0:	dc800215 	stw	r18,8(sp)
 8002ac4:	80028380 	call	8002838 <_Unwind_RaiseException_Phase2>
 8002ac8:	00c001c4 	movi	r3,7
 8002acc:	10fff01e 	bne	r2,r3,8002a90 <__alt_data_end+0xfc002a90>
 8002ad0:	d9000204 	addi	r4,sp,8
 8002ad4:	80028f80 	call	80028f8 <uw_install_context.isra.1>
 8002ad8:	008000c4 	movi	r2,3
 8002adc:	003fec06 	br	8002a90 <__alt_data_end+0xfc002a90>

08002ae0 <_Unwind_SjLj_ForcedUnwind>:
 8002ae0:	00c20074 	movhi	r3,2049
 8002ae4:	18e14004 	addi	r3,r3,-31488
 8002ae8:	defffe04 	addi	sp,sp,-8
 8002aec:	18c00017 	ldw	r3,0(r3)
 8002af0:	dfc00115 	stw	ra,4(sp)
 8002af4:	21400315 	stw	r5,12(r4)
 8002af8:	21800415 	stw	r6,16(r4)
 8002afc:	d80b883a 	mov	r5,sp
 8002b00:	d8c00015 	stw	r3,0(sp)
 8002b04:	80027200 	call	8002720 <_Unwind_ForcedUnwind_Phase2>
 8002b08:	00c001c4 	movi	r3,7
 8002b0c:	10c00326 	beq	r2,r3,8002b1c <_Unwind_SjLj_ForcedUnwind+0x3c>
 8002b10:	dfc00117 	ldw	ra,4(sp)
 8002b14:	dec00204 	addi	sp,sp,8
 8002b18:	f800283a 	ret
 8002b1c:	d809883a 	mov	r4,sp
 8002b20:	80028f80 	call	80028f8 <uw_install_context.isra.1>

08002b24 <_Unwind_SjLj_Resume>:
 8002b24:	00c20074 	movhi	r3,2049
 8002b28:	18e14004 	addi	r3,r3,-31488
 8002b2c:	18c00017 	ldw	r3,0(r3)
 8002b30:	20800317 	ldw	r2,12(r4)
 8002b34:	defffe04 	addi	sp,sp,-8
 8002b38:	dfc00115 	stw	ra,4(sp)
 8002b3c:	d8c00015 	stw	r3,0(sp)
 8002b40:	d80b883a 	mov	r5,sp
 8002b44:	1000041e 	bne	r2,zero,8002b58 <_Unwind_SjLj_Resume+0x34>
 8002b48:	80028380 	call	8002838 <_Unwind_RaiseException_Phase2>
 8002b4c:	00c001c4 	movi	r3,7
 8002b50:	10c00326 	beq	r2,r3,8002b60 <_Unwind_SjLj_Resume+0x3c>
 8002b54:	8002c400 	call	8002c40 <abort>
 8002b58:	80027200 	call	8002720 <_Unwind_ForcedUnwind_Phase2>
 8002b5c:	003ffb06 	br	8002b4c <__alt_data_end+0xfc002b4c>
 8002b60:	d809883a 	mov	r4,sp
 8002b64:	80028f80 	call	80028f8 <uw_install_context.isra.1>

08002b68 <_Unwind_SjLj_Resume_or_Rethrow>:
 8002b68:	20800317 	ldw	r2,12(r4)
 8002b6c:	defffe04 	addi	sp,sp,-8
 8002b70:	dfc00115 	stw	ra,4(sp)
 8002b74:	1000041e 	bne	r2,zero,8002b88 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 8002b78:	8002a100 	call	8002a10 <_Unwind_SjLj_RaiseException>
 8002b7c:	dfc00117 	ldw	ra,4(sp)
 8002b80:	dec00204 	addi	sp,sp,8
 8002b84:	f800283a 	ret
 8002b88:	00820074 	movhi	r2,2049
 8002b8c:	10a14004 	addi	r2,r2,-31488
 8002b90:	10800017 	ldw	r2,0(r2)
 8002b94:	d80b883a 	mov	r5,sp
 8002b98:	d8800015 	stw	r2,0(sp)
 8002b9c:	80027200 	call	8002720 <_Unwind_ForcedUnwind_Phase2>
 8002ba0:	00c001c4 	movi	r3,7
 8002ba4:	10c00126 	beq	r2,r3,8002bac <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 8002ba8:	8002c400 	call	8002c40 <abort>
 8002bac:	d809883a 	mov	r4,sp
 8002bb0:	80028f80 	call	80028f8 <uw_install_context.isra.1>

08002bb4 <_Unwind_DeleteException>:
 8002bb4:	20800217 	ldw	r2,8(r4)
 8002bb8:	200b883a 	mov	r5,r4
 8002bbc:	10000226 	beq	r2,zero,8002bc8 <_Unwind_DeleteException+0x14>
 8002bc0:	01000044 	movi	r4,1
 8002bc4:	1000683a 	jmp	r2
 8002bc8:	f800283a 	ret

08002bcc <_Unwind_Backtrace>:
 8002bcc:	00820074 	movhi	r2,2049
 8002bd0:	10a14004 	addi	r2,r2,-31488
 8002bd4:	10800017 	ldw	r2,0(r2)
 8002bd8:	defffc04 	addi	sp,sp,-16
 8002bdc:	dc400215 	stw	r17,8(sp)
 8002be0:	dc000115 	stw	r16,4(sp)
 8002be4:	dfc00315 	stw	ra,12(sp)
 8002be8:	2023883a 	mov	r17,r4
 8002bec:	2821883a 	mov	r16,r5
 8002bf0:	d8800015 	stw	r2,0(sp)
 8002bf4:	00000506 	br	8002c0c <_Unwind_Backtrace+0x40>
 8002bf8:	883ee83a 	callr	r17
 8002bfc:	10000e1e 	bne	r2,zero,8002c38 <_Unwind_Backtrace+0x6c>
 8002c00:	d8800017 	ldw	r2,0(sp)
 8002c04:	10800017 	ldw	r2,0(r2)
 8002c08:	d8800015 	stw	r2,0(sp)
 8002c0c:	d809883a 	mov	r4,sp
 8002c10:	800b883a 	mov	r5,r16
 8002c14:	103ff81e 	bne	r2,zero,8002bf8 <__alt_data_end+0xfc002bf8>
 8002c18:	883ee83a 	callr	r17
 8002c1c:	1000061e 	bne	r2,zero,8002c38 <_Unwind_Backtrace+0x6c>
 8002c20:	00800144 	movi	r2,5
 8002c24:	dfc00317 	ldw	ra,12(sp)
 8002c28:	dc400217 	ldw	r17,8(sp)
 8002c2c:	dc000117 	ldw	r16,4(sp)
 8002c30:	dec00404 	addi	sp,sp,16
 8002c34:	f800283a 	ret
 8002c38:	008000c4 	movi	r2,3
 8002c3c:	003ff906 	br	8002c24 <__alt_data_end+0xfc002c24>

08002c40 <abort>:
 8002c40:	deffff04 	addi	sp,sp,-4
 8002c44:	01000184 	movi	r4,6
 8002c48:	dfc00015 	stw	ra,0(sp)
 8002c4c:	80036ec0 	call	80036ec <raise>
 8002c50:	01000044 	movi	r4,1
 8002c54:	80046040 	call	8004604 <_exit>

08002c58 <exit>:
 8002c58:	defffe04 	addi	sp,sp,-8
 8002c5c:	000b883a 	mov	r5,zero
 8002c60:	dc000015 	stw	r16,0(sp)
 8002c64:	dfc00115 	stw	ra,4(sp)
 8002c68:	2021883a 	mov	r16,r4
 8002c6c:	8003de80 	call	8003de8 <__call_exitprocs>
 8002c70:	8009883a 	mov	r4,r16
 8002c74:	80046040 	call	8004604 <_exit>

08002c78 <malloc>:
 8002c78:	00820034 	movhi	r2,2048
 8002c7c:	109f1004 	addi	r2,r2,31808
 8002c80:	200b883a 	mov	r5,r4
 8002c84:	11000017 	ldw	r4,0(r2)
 8002c88:	8002ca01 	jmpi	8002ca0 <_malloc_r>

08002c8c <free>:
 8002c8c:	00820034 	movhi	r2,2048
 8002c90:	109f1004 	addi	r2,r2,31808
 8002c94:	200b883a 	mov	r5,r4
 8002c98:	11000017 	ldw	r4,0(r2)
 8002c9c:	80040a81 	jmpi	80040a8 <_free_r>

08002ca0 <_malloc_r>:
 8002ca0:	defff604 	addi	sp,sp,-40
 8002ca4:	dfc00915 	stw	ra,36(sp)
 8002ca8:	df000815 	stw	fp,32(sp)
 8002cac:	ddc00715 	stw	r23,28(sp)
 8002cb0:	dd800615 	stw	r22,24(sp)
 8002cb4:	dd400515 	stw	r21,20(sp)
 8002cb8:	dd000415 	stw	r20,16(sp)
 8002cbc:	dcc00315 	stw	r19,12(sp)
 8002cc0:	dc800215 	stw	r18,8(sp)
 8002cc4:	dc400115 	stw	r17,4(sp)
 8002cc8:	dc000015 	stw	r16,0(sp)
 8002ccc:	288002c4 	addi	r2,r5,11
 8002cd0:	00c00584 	movi	r3,22
 8002cd4:	1880042e 	bgeu	r3,r2,8002ce8 <_malloc_r+0x48>
 8002cd8:	047ffe04 	movi	r17,-8
 8002cdc:	1462703a 	and	r17,r2,r17
 8002ce0:	8800020e 	bge	r17,zero,8002cec <_malloc_r+0x4c>
 8002ce4:	00000206 	br	8002cf0 <_malloc_r+0x50>
 8002ce8:	04400404 	movi	r17,16
 8002cec:	8940032e 	bgeu	r17,r5,8002cfc <_malloc_r+0x5c>
 8002cf0:	00800304 	movi	r2,12
 8002cf4:	20800015 	stw	r2,0(r4)
 8002cf8:	00017206 	br	80032c4 <_malloc_r+0x624>
 8002cfc:	2027883a 	mov	r19,r4
 8002d00:	80049c40 	call	80049c4 <__malloc_lock>
 8002d04:	04820034 	movhi	r18,2048
 8002d08:	00807dc4 	movi	r2,503
 8002d0c:	949cff04 	addi	r18,r18,29692
 8002d10:	14401536 	bltu	r2,r17,8002d68 <_malloc_r+0xc8>
 8002d14:	8804d0fa 	srli	r2,r17,3
 8002d18:	1087883a 	add	r3,r2,r2
 8002d1c:	18c7883a 	add	r3,r3,r3
 8002d20:	18c7883a 	add	r3,r3,r3
 8002d24:	90c7883a 	add	r3,r18,r3
 8002d28:	1c000317 	ldw	r16,12(r3)
 8002d2c:	80c0031e 	bne	r16,r3,8002d3c <_malloc_r+0x9c>
 8002d30:	80c00204 	addi	r3,r16,8
 8002d34:	84000517 	ldw	r16,20(r16)
 8002d38:	80c00926 	beq	r16,r3,8002d60 <_malloc_r+0xc0>
 8002d3c:	80c00117 	ldw	r3,4(r16)
 8002d40:	00bfff04 	movi	r2,-4
 8002d44:	81000217 	ldw	r4,8(r16)
 8002d48:	1884703a 	and	r2,r3,r2
 8002d4c:	80c00317 	ldw	r3,12(r16)
 8002d50:	8085883a 	add	r2,r16,r2
 8002d54:	20c00315 	stw	r3,12(r4)
 8002d58:	19000215 	stw	r4,8(r3)
 8002d5c:	00002d06 	br	8002e14 <_malloc_r+0x174>
 8002d60:	10800084 	addi	r2,r2,2
 8002d64:	00003506 	br	8002e3c <_malloc_r+0x19c>
 8002d68:	8804d27a 	srli	r2,r17,9
 8002d6c:	10001826 	beq	r2,zero,8002dd0 <_malloc_r+0x130>
 8002d70:	00c00104 	movi	r3,4
 8002d74:	18800336 	bltu	r3,r2,8002d84 <_malloc_r+0xe4>
 8002d78:	8804d1ba 	srli	r2,r17,6
 8002d7c:	10800e04 	addi	r2,r2,56
 8002d80:	00001606 	br	8002ddc <_malloc_r+0x13c>
 8002d84:	00c00504 	movi	r3,20
 8002d88:	18800236 	bltu	r3,r2,8002d94 <_malloc_r+0xf4>
 8002d8c:	108016c4 	addi	r2,r2,91
 8002d90:	00001206 	br	8002ddc <_malloc_r+0x13c>
 8002d94:	00c01504 	movi	r3,84
 8002d98:	18800336 	bltu	r3,r2,8002da8 <_malloc_r+0x108>
 8002d9c:	8804d33a 	srli	r2,r17,12
 8002da0:	10801b84 	addi	r2,r2,110
 8002da4:	00000d06 	br	8002ddc <_malloc_r+0x13c>
 8002da8:	00c05504 	movi	r3,340
 8002dac:	18800336 	bltu	r3,r2,8002dbc <_malloc_r+0x11c>
 8002db0:	8804d3fa 	srli	r2,r17,15
 8002db4:	10801dc4 	addi	r2,r2,119
 8002db8:	00000806 	br	8002ddc <_malloc_r+0x13c>
 8002dbc:	00c15504 	movi	r3,1364
 8002dc0:	18800536 	bltu	r3,r2,8002dd8 <_malloc_r+0x138>
 8002dc4:	8804d4ba 	srli	r2,r17,18
 8002dc8:	10801f04 	addi	r2,r2,124
 8002dcc:	00000306 	br	8002ddc <_malloc_r+0x13c>
 8002dd0:	00800fc4 	movi	r2,63
 8002dd4:	00000106 	br	8002ddc <_malloc_r+0x13c>
 8002dd8:	00801f84 	movi	r2,126
 8002ddc:	1087883a 	add	r3,r2,r2
 8002de0:	18c7883a 	add	r3,r3,r3
 8002de4:	18c7883a 	add	r3,r3,r3
 8002de8:	90c7883a 	add	r3,r18,r3
 8002dec:	1c000317 	ldw	r16,12(r3)
 8002df0:	01bfff04 	movi	r6,-4
 8002df4:	01c003c4 	movi	r7,15
 8002df8:	00000906 	br	8002e20 <_malloc_r+0x180>
 8002dfc:	28000716 	blt	r5,zero,8002e1c <_malloc_r+0x17c>
 8002e00:	80800317 	ldw	r2,12(r16)
 8002e04:	80c00217 	ldw	r3,8(r16)
 8002e08:	18800315 	stw	r2,12(r3)
 8002e0c:	10c00215 	stw	r3,8(r2)
 8002e10:	8105883a 	add	r2,r16,r4
 8002e14:	10c00117 	ldw	r3,4(r2)
 8002e18:	00013106 	br	80032e0 <_malloc_r+0x640>
 8002e1c:	84000317 	ldw	r16,12(r16)
 8002e20:	80c00526 	beq	r16,r3,8002e38 <_malloc_r+0x198>
 8002e24:	81000117 	ldw	r4,4(r16)
 8002e28:	2188703a 	and	r4,r4,r6
 8002e2c:	244bc83a 	sub	r5,r4,r17
 8002e30:	397ff20e 	bge	r7,r5,8002dfc <__alt_data_end+0xfc002dfc>
 8002e34:	10bfffc4 	addi	r2,r2,-1
 8002e38:	10800044 	addi	r2,r2,1
 8002e3c:	01020034 	movhi	r4,2048
 8002e40:	94000417 	ldw	r16,16(r18)
 8002e44:	211cff04 	addi	r4,r4,29692
 8002e48:	21800204 	addi	r6,r4,8
 8002e4c:	81805c26 	beq	r16,r6,8002fc0 <_malloc_r+0x320>
 8002e50:	81400117 	ldw	r5,4(r16)
 8002e54:	00ffff04 	movi	r3,-4
 8002e58:	01c003c4 	movi	r7,15
 8002e5c:	28c6703a 	and	r3,r5,r3
 8002e60:	1c4bc83a 	sub	r5,r3,r17
 8002e64:	3940060e 	bge	r7,r5,8002e80 <_malloc_r+0x1e0>
 8002e68:	88800054 	ori	r2,r17,1
 8002e6c:	8447883a 	add	r3,r16,r17
 8002e70:	80800115 	stw	r2,4(r16)
 8002e74:	20c00515 	stw	r3,20(r4)
 8002e78:	20c00415 	stw	r3,16(r4)
 8002e7c:	00007706 	br	800305c <_malloc_r+0x3bc>
 8002e80:	21800515 	stw	r6,20(r4)
 8002e84:	21800415 	stw	r6,16(r4)
 8002e88:	28000516 	blt	r5,zero,8002ea0 <_malloc_r+0x200>
 8002e8c:	80c7883a 	add	r3,r16,r3
 8002e90:	18800117 	ldw	r2,4(r3)
 8002e94:	10800054 	ori	r2,r2,1
 8002e98:	18800115 	stw	r2,4(r3)
 8002e9c:	00011206 	br	80032e8 <_malloc_r+0x648>
 8002ea0:	01407fc4 	movi	r5,511
 8002ea4:	28c01136 	bltu	r5,r3,8002eec <_malloc_r+0x24c>
 8002ea8:	1806d0fa 	srli	r3,r3,3
 8002eac:	01400044 	movi	r5,1
 8002eb0:	180fd0ba 	srai	r7,r3,2
 8002eb4:	18c7883a 	add	r3,r3,r3
 8002eb8:	18c7883a 	add	r3,r3,r3
 8002ebc:	29ce983a 	sll	r7,r5,r7
 8002ec0:	21400117 	ldw	r5,4(r4)
 8002ec4:	18c7883a 	add	r3,r3,r3
 8002ec8:	394ab03a 	or	r5,r7,r5
 8002ecc:	21400115 	stw	r5,4(r4)
 8002ed0:	1909883a 	add	r4,r3,r4
 8002ed4:	20c00217 	ldw	r3,8(r4)
 8002ed8:	81000315 	stw	r4,12(r16)
 8002edc:	80c00215 	stw	r3,8(r16)
 8002ee0:	24000215 	stw	r16,8(r4)
 8002ee4:	1c000315 	stw	r16,12(r3)
 8002ee8:	00003506 	br	8002fc0 <_malloc_r+0x320>
 8002eec:	180ad27a 	srli	r5,r3,9
 8002ef0:	01000104 	movi	r4,4
 8002ef4:	21400336 	bltu	r4,r5,8002f04 <_malloc_r+0x264>
 8002ef8:	180ad1ba 	srli	r5,r3,6
 8002efc:	29400e04 	addi	r5,r5,56
 8002f00:	00001406 	br	8002f54 <_malloc_r+0x2b4>
 8002f04:	01000504 	movi	r4,20
 8002f08:	21400236 	bltu	r4,r5,8002f14 <_malloc_r+0x274>
 8002f0c:	294016c4 	addi	r5,r5,91
 8002f10:	00001006 	br	8002f54 <_malloc_r+0x2b4>
 8002f14:	01001504 	movi	r4,84
 8002f18:	21400336 	bltu	r4,r5,8002f28 <_malloc_r+0x288>
 8002f1c:	180ad33a 	srli	r5,r3,12
 8002f20:	29401b84 	addi	r5,r5,110
 8002f24:	00000b06 	br	8002f54 <_malloc_r+0x2b4>
 8002f28:	01005504 	movi	r4,340
 8002f2c:	21400336 	bltu	r4,r5,8002f3c <_malloc_r+0x29c>
 8002f30:	180ad3fa 	srli	r5,r3,15
 8002f34:	29401dc4 	addi	r5,r5,119
 8002f38:	00000606 	br	8002f54 <_malloc_r+0x2b4>
 8002f3c:	01015504 	movi	r4,1364
 8002f40:	21400336 	bltu	r4,r5,8002f50 <_malloc_r+0x2b0>
 8002f44:	180ad4ba 	srli	r5,r3,18
 8002f48:	29401f04 	addi	r5,r5,124
 8002f4c:	00000106 	br	8002f54 <_malloc_r+0x2b4>
 8002f50:	01401f84 	movi	r5,126
 8002f54:	2949883a 	add	r4,r5,r5
 8002f58:	2109883a 	add	r4,r4,r4
 8002f5c:	2109883a 	add	r4,r4,r4
 8002f60:	9109883a 	add	r4,r18,r4
 8002f64:	21c00217 	ldw	r7,8(r4)
 8002f68:	02020034 	movhi	r8,2048
 8002f6c:	421cff04 	addi	r8,r8,29692
 8002f70:	3900081e 	bne	r7,r4,8002f94 <_malloc_r+0x2f4>
 8002f74:	280bd0ba 	srai	r5,r5,2
 8002f78:	00c00044 	movi	r3,1
 8002f7c:	194a983a 	sll	r5,r3,r5
 8002f80:	40c00117 	ldw	r3,4(r8)
 8002f84:	28cab03a 	or	r5,r5,r3
 8002f88:	41400115 	stw	r5,4(r8)
 8002f8c:	3807883a 	mov	r3,r7
 8002f90:	00000706 	br	8002fb0 <_malloc_r+0x310>
 8002f94:	023fff04 	movi	r8,-4
 8002f98:	39400117 	ldw	r5,4(r7)
 8002f9c:	2a0a703a 	and	r5,r5,r8
 8002fa0:	1940022e 	bgeu	r3,r5,8002fac <_malloc_r+0x30c>
 8002fa4:	39c00217 	ldw	r7,8(r7)
 8002fa8:	393ffb1e 	bne	r7,r4,8002f98 <__alt_data_end+0xfc002f98>
 8002fac:	38c00317 	ldw	r3,12(r7)
 8002fb0:	80c00315 	stw	r3,12(r16)
 8002fb4:	81c00215 	stw	r7,8(r16)
 8002fb8:	1c000215 	stw	r16,8(r3)
 8002fbc:	3c000315 	stw	r16,12(r7)
 8002fc0:	1007d0ba 	srai	r3,r2,2
 8002fc4:	02000044 	movi	r8,1
 8002fc8:	40d0983a 	sll	r8,r8,r3
 8002fcc:	90c00117 	ldw	r3,4(r18)
 8002fd0:	1a004d36 	bltu	r3,r8,8003108 <_malloc_r+0x468>
 8002fd4:	40c8703a 	and	r4,r8,r3
 8002fd8:	2000061e 	bne	r4,zero,8002ff4 <_malloc_r+0x354>
 8002fdc:	013fff04 	movi	r4,-4
 8002fe0:	1104703a 	and	r2,r2,r4
 8002fe4:	4211883a 	add	r8,r8,r8
 8002fe8:	40c8703a 	and	r4,r8,r3
 8002fec:	10800104 	addi	r2,r2,4
 8002ff0:	203ffc26 	beq	r4,zero,8002fe4 <__alt_data_end+0xfc002fe4>
 8002ff4:	02bfff04 	movi	r10,-4
 8002ff8:	02c003c4 	movi	r11,15
 8002ffc:	1087883a 	add	r3,r2,r2
 8003000:	18c7883a 	add	r3,r3,r3
 8003004:	18c7883a 	add	r3,r3,r3
 8003008:	90c7883a 	add	r3,r18,r3
 800300c:	19c00304 	addi	r7,r3,12
 8003010:	1013883a 	mov	r9,r2
 8003014:	3b3ffd04 	addi	r12,r7,-12
 8003018:	3c000017 	ldw	r16,0(r7)
 800301c:	00000106 	br	8003024 <_malloc_r+0x384>
 8003020:	84000317 	ldw	r16,12(r16)
 8003024:	83001e26 	beq	r16,r12,80030a0 <_malloc_r+0x400>
 8003028:	81000117 	ldw	r4,4(r16)
 800302c:	2288703a 	and	r4,r4,r10
 8003030:	244bc83a 	sub	r5,r4,r17
 8003034:	5940100e 	bge	r11,r5,8003078 <_malloc_r+0x3d8>
 8003038:	88800054 	ori	r2,r17,1
 800303c:	80800115 	stw	r2,4(r16)
 8003040:	81000217 	ldw	r4,8(r16)
 8003044:	80800317 	ldw	r2,12(r16)
 8003048:	8447883a 	add	r3,r16,r17
 800304c:	20800315 	stw	r2,12(r4)
 8003050:	11000215 	stw	r4,8(r2)
 8003054:	90c00515 	stw	r3,20(r18)
 8003058:	90c00415 	stw	r3,16(r18)
 800305c:	28800054 	ori	r2,r5,1
 8003060:	19800315 	stw	r6,12(r3)
 8003064:	19800215 	stw	r6,8(r3)
 8003068:	18800115 	stw	r2,4(r3)
 800306c:	1947883a 	add	r3,r3,r5
 8003070:	19400015 	stw	r5,0(r3)
 8003074:	00009c06 	br	80032e8 <_malloc_r+0x648>
 8003078:	283fe916 	blt	r5,zero,8003020 <__alt_data_end+0xfc003020>
 800307c:	8105883a 	add	r2,r16,r4
 8003080:	10c00117 	ldw	r3,4(r2)
 8003084:	18c00054 	ori	r3,r3,1
 8003088:	10c00115 	stw	r3,4(r2)
 800308c:	80800317 	ldw	r2,12(r16)
 8003090:	80c00217 	ldw	r3,8(r16)
 8003094:	18800315 	stw	r2,12(r3)
 8003098:	10c00215 	stw	r3,8(r2)
 800309c:	00009206 	br	80032e8 <_malloc_r+0x648>
 80030a0:	4a400044 	addi	r9,r9,1
 80030a4:	490000cc 	andi	r4,r9,3
 80030a8:	39c00204 	addi	r7,r7,8
 80030ac:	203fd91e 	bne	r4,zero,8003014 <__alt_data_end+0xfc003014>
 80030b0:	110000cc 	andi	r4,r2,3
 80030b4:	2000051e 	bne	r4,zero,80030cc <_malloc_r+0x42c>
 80030b8:	90c00117 	ldw	r3,4(r18)
 80030bc:	0204303a 	nor	r2,zero,r8
 80030c0:	10c4703a 	and	r2,r2,r3
 80030c4:	90800115 	stw	r2,4(r18)
 80030c8:	00000406 	br	80030dc <_malloc_r+0x43c>
 80030cc:	193ffe04 	addi	r4,r3,-8
 80030d0:	18c00017 	ldw	r3,0(r3)
 80030d4:	10bfffc4 	addi	r2,r2,-1
 80030d8:	193ff526 	beq	r3,r4,80030b0 <__alt_data_end+0xfc0030b0>
 80030dc:	90800117 	ldw	r2,4(r18)
 80030e0:	4211883a 	add	r8,r8,r8
 80030e4:	12000836 	bltu	r2,r8,8003108 <_malloc_r+0x468>
 80030e8:	40000726 	beq	r8,zero,8003108 <_malloc_r+0x468>
 80030ec:	4086703a 	and	r3,r8,r2
 80030f0:	1800031e 	bne	r3,zero,8003100 <_malloc_r+0x460>
 80030f4:	4a400104 	addi	r9,r9,4
 80030f8:	4211883a 	add	r8,r8,r8
 80030fc:	003ffb06 	br	80030ec <__alt_data_end+0xfc0030ec>
 8003100:	4805883a 	mov	r2,r9
 8003104:	003fbd06 	br	8002ffc <__alt_data_end+0xfc002ffc>
 8003108:	95c00217 	ldw	r23,8(r18)
 800310c:	00bfff04 	movi	r2,-4
 8003110:	bd400117 	ldw	r21,4(r23)
 8003114:	a8aa703a 	and	r21,r21,r2
 8003118:	ac400336 	bltu	r21,r17,8003128 <_malloc_r+0x488>
 800311c:	ac47c83a 	sub	r3,r21,r17
 8003120:	008003c4 	movi	r2,15
 8003124:	10c06916 	blt	r2,r3,80032cc <_malloc_r+0x62c>
 8003128:	d0a24817 	ldw	r2,-30432(gp)
 800312c:	d0e01217 	ldw	r3,-32696(gp)
 8003130:	05bfffc4 	movi	r22,-1
 8003134:	bd61883a 	add	r16,r23,r21
 8003138:	8885883a 	add	r2,r17,r2
 800313c:	1d80021e 	bne	r3,r22,8003148 <_malloc_r+0x4a8>
 8003140:	17000404 	addi	fp,r2,16
 8003144:	00000306 	br	8003154 <_malloc_r+0x4b4>
 8003148:	108023c4 	addi	r2,r2,143
 800314c:	073fe004 	movi	fp,-128
 8003150:	1738703a 	and	fp,r2,fp
 8003154:	9809883a 	mov	r4,r19
 8003158:	e00b883a 	mov	r5,fp
 800315c:	80034600 	call	8003460 <_sbrk_r>
 8003160:	1029883a 	mov	r20,r2
 8003164:	15804d26 	beq	r2,r22,800329c <_malloc_r+0x5fc>
 8003168:	1400012e 	bgeu	r2,r16,8003170 <_malloc_r+0x4d0>
 800316c:	bc804b1e 	bne	r23,r18,800329c <_malloc_r+0x5fc>
 8003170:	05820074 	movhi	r22,2049
 8003174:	b5a38a04 	addi	r22,r22,-29144
 8003178:	b1000017 	ldw	r4,0(r22)
 800317c:	e109883a 	add	r4,fp,r4
 8003180:	b1000015 	stw	r4,0(r22)
 8003184:	a400071e 	bne	r20,r16,80031a4 <_malloc_r+0x504>
 8003188:	a0801fcc 	andi	r2,r20,127
 800318c:	1000051e 	bne	r2,zero,80031a4 <_malloc_r+0x504>
 8003190:	90c00217 	ldw	r3,8(r18)
 8003194:	e545883a 	add	r2,fp,r21
 8003198:	10800054 	ori	r2,r2,1
 800319c:	18800115 	stw	r2,4(r3)
 80031a0:	00003706 	br	8003280 <_malloc_r+0x5e0>
 80031a4:	d0e01217 	ldw	r3,-32696(gp)
 80031a8:	00bfffc4 	movi	r2,-1
 80031ac:	1880021e 	bne	r3,r2,80031b8 <_malloc_r+0x518>
 80031b0:	d5201215 	stw	r20,-32696(gp)
 80031b4:	00000306 	br	80031c4 <_malloc_r+0x524>
 80031b8:	a407c83a 	sub	r3,r20,r16
 80031bc:	20c7883a 	add	r3,r4,r3
 80031c0:	b0c00015 	stw	r3,0(r22)
 80031c4:	a40001cc 	andi	r16,r20,7
 80031c8:	80000426 	beq	r16,zero,80031dc <_malloc_r+0x53c>
 80031cc:	00c00204 	movi	r3,8
 80031d0:	1c21c83a 	sub	r16,r3,r16
 80031d4:	a429883a 	add	r20,r20,r16
 80031d8:	00000106 	br	80031e0 <_malloc_r+0x540>
 80031dc:	0021883a 	mov	r16,zero
 80031e0:	a705883a 	add	r2,r20,fp
 80031e4:	10801fcc 	andi	r2,r2,127
 80031e8:	84002004 	addi	r16,r16,128
 80031ec:	80a1c83a 	sub	r16,r16,r2
 80031f0:	9809883a 	mov	r4,r19
 80031f4:	800b883a 	mov	r5,r16
 80031f8:	80034600 	call	8003460 <_sbrk_r>
 80031fc:	00ffffc4 	movi	r3,-1
 8003200:	10c0021e 	bne	r2,r3,800320c <_malloc_r+0x56c>
 8003204:	a005883a 	mov	r2,r20
 8003208:	0021883a 	mov	r16,zero
 800320c:	b0c00017 	ldw	r3,0(r22)
 8003210:	1505c83a 	sub	r2,r2,r20
 8003214:	95000215 	stw	r20,8(r18)
 8003218:	80c7883a 	add	r3,r16,r3
 800321c:	1421883a 	add	r16,r2,r16
 8003220:	84000054 	ori	r16,r16,1
 8003224:	b0c00015 	stw	r3,0(r22)
 8003228:	a4000115 	stw	r16,4(r20)
 800322c:	bc801426 	beq	r23,r18,8003280 <_malloc_r+0x5e0>
 8003230:	00c003c4 	movi	r3,15
 8003234:	1d400336 	bltu	r3,r21,8003244 <_malloc_r+0x5a4>
 8003238:	00800044 	movi	r2,1
 800323c:	a0800115 	stw	r2,4(r20)
 8003240:	00001606 	br	800329c <_malloc_r+0x5fc>
 8003244:	00bffe04 	movi	r2,-8
 8003248:	ad7ffd04 	addi	r21,r21,-12
 800324c:	a8aa703a 	and	r21,r21,r2
 8003250:	b8800117 	ldw	r2,4(r23)
 8003254:	01000144 	movi	r4,5
 8003258:	1080004c 	andi	r2,r2,1
 800325c:	a884b03a 	or	r2,r21,r2
 8003260:	b8800115 	stw	r2,4(r23)
 8003264:	bd45883a 	add	r2,r23,r21
 8003268:	11000115 	stw	r4,4(r2)
 800326c:	11000215 	stw	r4,8(r2)
 8003270:	1d40032e 	bgeu	r3,r21,8003280 <_malloc_r+0x5e0>
 8003274:	9809883a 	mov	r4,r19
 8003278:	b9400204 	addi	r5,r23,8
 800327c:	80040a80 	call	80040a8 <_free_r>
 8003280:	b0800017 	ldw	r2,0(r22)
 8003284:	d0e24717 	ldw	r3,-30436(gp)
 8003288:	1880012e 	bgeu	r3,r2,8003290 <_malloc_r+0x5f0>
 800328c:	d0a24715 	stw	r2,-30436(gp)
 8003290:	d0e24617 	ldw	r3,-30440(gp)
 8003294:	1880012e 	bgeu	r3,r2,800329c <_malloc_r+0x5fc>
 8003298:	d0a24615 	stw	r2,-30440(gp)
 800329c:	90800217 	ldw	r2,8(r18)
 80032a0:	10c00117 	ldw	r3,4(r2)
 80032a4:	00bfff04 	movi	r2,-4
 80032a8:	1884703a 	and	r2,r3,r2
 80032ac:	1447c83a 	sub	r3,r2,r17
 80032b0:	14400236 	bltu	r2,r17,80032bc <_malloc_r+0x61c>
 80032b4:	008003c4 	movi	r2,15
 80032b8:	10c00416 	blt	r2,r3,80032cc <_malloc_r+0x62c>
 80032bc:	9809883a 	mov	r4,r19
 80032c0:	80049e40 	call	80049e4 <__malloc_unlock>
 80032c4:	0005883a 	mov	r2,zero
 80032c8:	00000a06 	br	80032f4 <_malloc_r+0x654>
 80032cc:	94000217 	ldw	r16,8(r18)
 80032d0:	88800054 	ori	r2,r17,1
 80032d4:	80800115 	stw	r2,4(r16)
 80032d8:	8445883a 	add	r2,r16,r17
 80032dc:	90800215 	stw	r2,8(r18)
 80032e0:	18c00054 	ori	r3,r3,1
 80032e4:	10c00115 	stw	r3,4(r2)
 80032e8:	9809883a 	mov	r4,r19
 80032ec:	80049e40 	call	80049e4 <__malloc_unlock>
 80032f0:	80800204 	addi	r2,r16,8
 80032f4:	dfc00917 	ldw	ra,36(sp)
 80032f8:	df000817 	ldw	fp,32(sp)
 80032fc:	ddc00717 	ldw	r23,28(sp)
 8003300:	dd800617 	ldw	r22,24(sp)
 8003304:	dd400517 	ldw	r21,20(sp)
 8003308:	dd000417 	ldw	r20,16(sp)
 800330c:	dcc00317 	ldw	r19,12(sp)
 8003310:	dc800217 	ldw	r18,8(sp)
 8003314:	dc400117 	ldw	r17,4(sp)
 8003318:	dc000017 	ldw	r16,0(sp)
 800331c:	dec00a04 	addi	sp,sp,40
 8003320:	f800283a 	ret

08003324 <memset>:
 8003324:	2005883a 	mov	r2,r4
 8003328:	2007883a 	mov	r3,r4
 800332c:	218d883a 	add	r6,r4,r6
 8003330:	19800326 	beq	r3,r6,8003340 <memset+0x1c>
 8003334:	19400005 	stb	r5,0(r3)
 8003338:	18c00044 	addi	r3,r3,1
 800333c:	003ffc06 	br	8003330 <__alt_data_end+0xfc003330>
 8003340:	f800283a 	ret

08003344 <_printf_r>:
 8003344:	defffd04 	addi	sp,sp,-12
 8003348:	dfc00015 	stw	ra,0(sp)
 800334c:	d9800115 	stw	r6,4(sp)
 8003350:	d9c00215 	stw	r7,8(sp)
 8003354:	20c00217 	ldw	r3,8(r4)
 8003358:	280d883a 	mov	r6,r5
 800335c:	01420034 	movhi	r5,2048
 8003360:	2950cc04 	addi	r5,r5,17200
 8003364:	19400115 	stw	r5,4(r3)
 8003368:	21400217 	ldw	r5,8(r4)
 800336c:	d9c00104 	addi	r7,sp,4
 8003370:	80038580 	call	8003858 <___vfprintf_internal_r>
 8003374:	dfc00017 	ldw	ra,0(sp)
 8003378:	dec00304 	addi	sp,sp,12
 800337c:	f800283a 	ret

08003380 <printf>:
 8003380:	defffc04 	addi	sp,sp,-16
 8003384:	dfc00015 	stw	ra,0(sp)
 8003388:	d9400115 	stw	r5,4(sp)
 800338c:	d9800215 	stw	r6,8(sp)
 8003390:	d9c00315 	stw	r7,12(sp)
 8003394:	00820034 	movhi	r2,2048
 8003398:	109f1004 	addi	r2,r2,31808
 800339c:	10800017 	ldw	r2,0(r2)
 80033a0:	200b883a 	mov	r5,r4
 80033a4:	01020034 	movhi	r4,2048
 80033a8:	10c00217 	ldw	r3,8(r2)
 80033ac:	2110cc04 	addi	r4,r4,17200
 80033b0:	d9800104 	addi	r6,sp,4
 80033b4:	19000115 	stw	r4,4(r3)
 80033b8:	11000217 	ldw	r4,8(r2)
 80033bc:	8003dc40 	call	8003dc4 <__vfprintf_internal>
 80033c0:	dfc00017 	ldw	ra,0(sp)
 80033c4:	dec00404 	addi	sp,sp,16
 80033c8:	f800283a 	ret

080033cc <_puts_r>:
 80033cc:	defffd04 	addi	sp,sp,-12
 80033d0:	dc000015 	stw	r16,0(sp)
 80033d4:	2021883a 	mov	r16,r4
 80033d8:	2809883a 	mov	r4,r5
 80033dc:	dfc00215 	stw	ra,8(sp)
 80033e0:	dc400115 	stw	r17,4(sp)
 80033e4:	2823883a 	mov	r17,r5
 80033e8:	80037d00 	call	80037d0 <strlen>
 80033ec:	81400217 	ldw	r5,8(r16)
 80033f0:	00c20034 	movhi	r3,2048
 80033f4:	18d0cc04 	addi	r3,r3,17200
 80033f8:	28c00115 	stw	r3,4(r5)
 80033fc:	8009883a 	mov	r4,r16
 8003400:	880d883a 	mov	r6,r17
 8003404:	100f883a 	mov	r7,r2
 8003408:	80043300 	call	8004330 <__sfvwrite_small_dev>
 800340c:	00ffffc4 	movi	r3,-1
 8003410:	10c00926 	beq	r2,r3,8003438 <_puts_r+0x6c>
 8003414:	81400217 	ldw	r5,8(r16)
 8003418:	01820034 	movhi	r6,2048
 800341c:	8009883a 	mov	r4,r16
 8003420:	28800117 	ldw	r2,4(r5)
 8003424:	319ce004 	addi	r6,r6,29568
 8003428:	01c00044 	movi	r7,1
 800342c:	103ee83a 	callr	r2
 8003430:	10bfffe0 	cmpeqi	r2,r2,-1
 8003434:	0085c83a 	sub	r2,zero,r2
 8003438:	dfc00217 	ldw	ra,8(sp)
 800343c:	dc400117 	ldw	r17,4(sp)
 8003440:	dc000017 	ldw	r16,0(sp)
 8003444:	dec00304 	addi	sp,sp,12
 8003448:	f800283a 	ret

0800344c <puts>:
 800344c:	00820034 	movhi	r2,2048
 8003450:	109f1004 	addi	r2,r2,31808
 8003454:	200b883a 	mov	r5,r4
 8003458:	11000017 	ldw	r4,0(r2)
 800345c:	80033cc1 	jmpi	80033cc <_puts_r>

08003460 <_sbrk_r>:
 8003460:	defffd04 	addi	sp,sp,-12
 8003464:	dc000015 	stw	r16,0(sp)
 8003468:	04020074 	movhi	r16,2049
 800346c:	dc400115 	stw	r17,4(sp)
 8003470:	84214404 	addi	r16,r16,-31472
 8003474:	2023883a 	mov	r17,r4
 8003478:	2809883a 	mov	r4,r5
 800347c:	dfc00215 	stw	ra,8(sp)
 8003480:	80000015 	stw	zero,0(r16)
 8003484:	8004c700 	call	8004c70 <sbrk>
 8003488:	00ffffc4 	movi	r3,-1
 800348c:	10c0031e 	bne	r2,r3,800349c <_sbrk_r+0x3c>
 8003490:	80c00017 	ldw	r3,0(r16)
 8003494:	18000126 	beq	r3,zero,800349c <_sbrk_r+0x3c>
 8003498:	88c00015 	stw	r3,0(r17)
 800349c:	dfc00217 	ldw	ra,8(sp)
 80034a0:	dc400117 	ldw	r17,4(sp)
 80034a4:	dc000017 	ldw	r16,0(sp)
 80034a8:	dec00304 	addi	sp,sp,12
 80034ac:	f800283a 	ret

080034b0 <_init_signal_r>:
 80034b0:	20800b17 	ldw	r2,44(r4)
 80034b4:	defffe04 	addi	sp,sp,-8
 80034b8:	dc000015 	stw	r16,0(sp)
 80034bc:	dfc00115 	stw	ra,4(sp)
 80034c0:	2021883a 	mov	r16,r4
 80034c4:	10000226 	beq	r2,zero,80034d0 <_init_signal_r+0x20>
 80034c8:	0005883a 	mov	r2,zero
 80034cc:	00000d06 	br	8003504 <_init_signal_r+0x54>
 80034d0:	01402004 	movi	r5,128
 80034d4:	8002ca00 	call	8002ca0 <_malloc_r>
 80034d8:	80800b15 	stw	r2,44(r16)
 80034dc:	10000826 	beq	r2,zero,8003500 <_init_signal_r+0x50>
 80034e0:	0005883a 	mov	r2,zero
 80034e4:	01002004 	movi	r4,128
 80034e8:	80c00b17 	ldw	r3,44(r16)
 80034ec:	1887883a 	add	r3,r3,r2
 80034f0:	18000015 	stw	zero,0(r3)
 80034f4:	10800104 	addi	r2,r2,4
 80034f8:	113ffb1e 	bne	r2,r4,80034e8 <__alt_data_end+0xfc0034e8>
 80034fc:	003ff206 	br	80034c8 <__alt_data_end+0xfc0034c8>
 8003500:	00bfffc4 	movi	r2,-1
 8003504:	dfc00117 	ldw	ra,4(sp)
 8003508:	dc000017 	ldw	r16,0(sp)
 800350c:	dec00204 	addi	sp,sp,8
 8003510:	f800283a 	ret

08003514 <_signal_r>:
 8003514:	defffc04 	addi	sp,sp,-16
 8003518:	dc400115 	stw	r17,4(sp)
 800351c:	dfc00315 	stw	ra,12(sp)
 8003520:	dc800215 	stw	r18,8(sp)
 8003524:	dc000015 	stw	r16,0(sp)
 8003528:	008007c4 	movi	r2,31
 800352c:	2023883a 	mov	r17,r4
 8003530:	1140032e 	bgeu	r2,r5,8003540 <_signal_r+0x2c>
 8003534:	00800584 	movi	r2,22
 8003538:	20800015 	stw	r2,0(r4)
 800353c:	00000d06 	br	8003574 <_signal_r+0x60>
 8003540:	20800b17 	ldw	r2,44(r4)
 8003544:	3025883a 	mov	r18,r6
 8003548:	2821883a 	mov	r16,r5
 800354c:	10000726 	beq	r2,zero,800356c <_signal_r+0x58>
 8003550:	88800b17 	ldw	r2,44(r17)
 8003554:	8421883a 	add	r16,r16,r16
 8003558:	8421883a 	add	r16,r16,r16
 800355c:	1421883a 	add	r16,r2,r16
 8003560:	80800017 	ldw	r2,0(r16)
 8003564:	84800015 	stw	r18,0(r16)
 8003568:	00000306 	br	8003578 <_signal_r+0x64>
 800356c:	80034b00 	call	80034b0 <_init_signal_r>
 8003570:	103ff726 	beq	r2,zero,8003550 <__alt_data_end+0xfc003550>
 8003574:	00bfffc4 	movi	r2,-1
 8003578:	dfc00317 	ldw	ra,12(sp)
 800357c:	dc800217 	ldw	r18,8(sp)
 8003580:	dc400117 	ldw	r17,4(sp)
 8003584:	dc000017 	ldw	r16,0(sp)
 8003588:	dec00404 	addi	sp,sp,16
 800358c:	f800283a 	ret

08003590 <_raise_r>:
 8003590:	008007c4 	movi	r2,31
 8003594:	1140042e 	bgeu	r2,r5,80035a8 <_raise_r+0x18>
 8003598:	00800584 	movi	r2,22
 800359c:	20800015 	stw	r2,0(r4)
 80035a0:	00bfffc4 	movi	r2,-1
 80035a4:	f800283a 	ret
 80035a8:	20c00b17 	ldw	r3,44(r4)
 80035ac:	defffd04 	addi	sp,sp,-12
 80035b0:	dc400115 	stw	r17,4(sp)
 80035b4:	dc000015 	stw	r16,0(sp)
 80035b8:	dfc00215 	stw	ra,8(sp)
 80035bc:	2821883a 	mov	r16,r5
 80035c0:	2023883a 	mov	r17,r4
 80035c4:	18000526 	beq	r3,zero,80035dc <_raise_r+0x4c>
 80035c8:	2945883a 	add	r2,r5,r5
 80035cc:	1085883a 	add	r2,r2,r2
 80035d0:	1887883a 	add	r3,r3,r2
 80035d4:	19400017 	ldw	r5,0(r3)
 80035d8:	28000a1e 	bne	r5,zero,8003604 <_raise_r+0x74>
 80035dc:	8809883a 	mov	r4,r17
 80035e0:	80037940 	call	8003794 <_getpid_r>
 80035e4:	8809883a 	mov	r4,r17
 80035e8:	100b883a 	mov	r5,r2
 80035ec:	800d883a 	mov	r6,r16
 80035f0:	dfc00217 	ldw	ra,8(sp)
 80035f4:	dc400117 	ldw	r17,4(sp)
 80035f8:	dc000017 	ldw	r16,0(sp)
 80035fc:	dec00304 	addi	sp,sp,12
 8003600:	80037401 	jmpi	8003740 <_kill_r>
 8003604:	00800044 	movi	r2,1
 8003608:	28800826 	beq	r5,r2,800362c <_raise_r+0x9c>
 800360c:	013fffc4 	movi	r4,-1
 8003610:	2900031e 	bne	r5,r4,8003620 <_raise_r+0x90>
 8003614:	00c00584 	movi	r3,22
 8003618:	88c00015 	stw	r3,0(r17)
 800361c:	00000406 	br	8003630 <_raise_r+0xa0>
 8003620:	18000015 	stw	zero,0(r3)
 8003624:	8009883a 	mov	r4,r16
 8003628:	283ee83a 	callr	r5
 800362c:	0005883a 	mov	r2,zero
 8003630:	dfc00217 	ldw	ra,8(sp)
 8003634:	dc400117 	ldw	r17,4(sp)
 8003638:	dc000017 	ldw	r16,0(sp)
 800363c:	dec00304 	addi	sp,sp,12
 8003640:	f800283a 	ret

08003644 <__sigtramp_r>:
 8003644:	008007c4 	movi	r2,31
 8003648:	11402636 	bltu	r2,r5,80036e4 <__sigtramp_r+0xa0>
 800364c:	20800b17 	ldw	r2,44(r4)
 8003650:	defffd04 	addi	sp,sp,-12
 8003654:	dc400115 	stw	r17,4(sp)
 8003658:	dc000015 	stw	r16,0(sp)
 800365c:	dfc00215 	stw	ra,8(sp)
 8003660:	2023883a 	mov	r17,r4
 8003664:	2821883a 	mov	r16,r5
 8003668:	10000726 	beq	r2,zero,8003688 <__sigtramp_r+0x44>
 800366c:	88c00b17 	ldw	r3,44(r17)
 8003670:	8405883a 	add	r2,r16,r16
 8003674:	1085883a 	add	r2,r2,r2
 8003678:	1885883a 	add	r2,r3,r2
 800367c:	10c00017 	ldw	r3,0(r2)
 8003680:	1800051e 	bne	r3,zero,8003698 <__sigtramp_r+0x54>
 8003684:	00000d06 	br	80036bc <__sigtramp_r+0x78>
 8003688:	80034b00 	call	80034b0 <_init_signal_r>
 800368c:	103ff726 	beq	r2,zero,800366c <__alt_data_end+0xfc00366c>
 8003690:	00bfffc4 	movi	r2,-1
 8003694:	00000e06 	br	80036d0 <__sigtramp_r+0x8c>
 8003698:	013fffc4 	movi	r4,-1
 800369c:	19000926 	beq	r3,r4,80036c4 <__sigtramp_r+0x80>
 80036a0:	01000044 	movi	r4,1
 80036a4:	19000926 	beq	r3,r4,80036cc <__sigtramp_r+0x88>
 80036a8:	10000015 	stw	zero,0(r2)
 80036ac:	8009883a 	mov	r4,r16
 80036b0:	183ee83a 	callr	r3
 80036b4:	0005883a 	mov	r2,zero
 80036b8:	00000506 	br	80036d0 <__sigtramp_r+0x8c>
 80036bc:	00800044 	movi	r2,1
 80036c0:	00000306 	br	80036d0 <__sigtramp_r+0x8c>
 80036c4:	00800084 	movi	r2,2
 80036c8:	00000106 	br	80036d0 <__sigtramp_r+0x8c>
 80036cc:	008000c4 	movi	r2,3
 80036d0:	dfc00217 	ldw	ra,8(sp)
 80036d4:	dc400117 	ldw	r17,4(sp)
 80036d8:	dc000017 	ldw	r16,0(sp)
 80036dc:	dec00304 	addi	sp,sp,12
 80036e0:	f800283a 	ret
 80036e4:	00bfffc4 	movi	r2,-1
 80036e8:	f800283a 	ret

080036ec <raise>:
 80036ec:	00820034 	movhi	r2,2048
 80036f0:	109f1004 	addi	r2,r2,31808
 80036f4:	200b883a 	mov	r5,r4
 80036f8:	11000017 	ldw	r4,0(r2)
 80036fc:	80035901 	jmpi	8003590 <_raise_r>

08003700 <signal>:
 8003700:	00c20034 	movhi	r3,2048
 8003704:	18df1004 	addi	r3,r3,31808
 8003708:	2005883a 	mov	r2,r4
 800370c:	19000017 	ldw	r4,0(r3)
 8003710:	280d883a 	mov	r6,r5
 8003714:	100b883a 	mov	r5,r2
 8003718:	80035141 	jmpi	8003514 <_signal_r>

0800371c <_init_signal>:
 800371c:	00820034 	movhi	r2,2048
 8003720:	109f1004 	addi	r2,r2,31808
 8003724:	11000017 	ldw	r4,0(r2)
 8003728:	80034b01 	jmpi	80034b0 <_init_signal_r>

0800372c <__sigtramp>:
 800372c:	00820034 	movhi	r2,2048
 8003730:	109f1004 	addi	r2,r2,31808
 8003734:	200b883a 	mov	r5,r4
 8003738:	11000017 	ldw	r4,0(r2)
 800373c:	80036441 	jmpi	8003644 <__sigtramp_r>

08003740 <_kill_r>:
 8003740:	defffd04 	addi	sp,sp,-12
 8003744:	dc000015 	stw	r16,0(sp)
 8003748:	04020074 	movhi	r16,2049
 800374c:	dc400115 	stw	r17,4(sp)
 8003750:	84214404 	addi	r16,r16,-31472
 8003754:	2023883a 	mov	r17,r4
 8003758:	2809883a 	mov	r4,r5
 800375c:	300b883a 	mov	r5,r6
 8003760:	dfc00215 	stw	ra,8(sp)
 8003764:	80000015 	stw	zero,0(r16)
 8003768:	80047380 	call	8004738 <kill>
 800376c:	00ffffc4 	movi	r3,-1
 8003770:	10c0031e 	bne	r2,r3,8003780 <_kill_r+0x40>
 8003774:	80c00017 	ldw	r3,0(r16)
 8003778:	18000126 	beq	r3,zero,8003780 <_kill_r+0x40>
 800377c:	88c00015 	stw	r3,0(r17)
 8003780:	dfc00217 	ldw	ra,8(sp)
 8003784:	dc400117 	ldw	r17,4(sp)
 8003788:	dc000017 	ldw	r16,0(sp)
 800378c:	dec00304 	addi	sp,sp,12
 8003790:	f800283a 	ret

08003794 <_getpid_r>:
 8003794:	80046c81 	jmpi	80046c8 <getpid>

08003798 <strcmp>:
 8003798:	20800003 	ldbu	r2,0(r4)
 800379c:	10c03fcc 	andi	r3,r2,255
 80037a0:	18c0201c 	xori	r3,r3,128
 80037a4:	18ffe004 	addi	r3,r3,-128
 80037a8:	18000526 	beq	r3,zero,80037c0 <strcmp+0x28>
 80037ac:	29800007 	ldb	r6,0(r5)
 80037b0:	1980031e 	bne	r3,r6,80037c0 <strcmp+0x28>
 80037b4:	21000044 	addi	r4,r4,1
 80037b8:	29400044 	addi	r5,r5,1
 80037bc:	003ff606 	br	8003798 <__alt_data_end+0xfc003798>
 80037c0:	28c00003 	ldbu	r3,0(r5)
 80037c4:	10803fcc 	andi	r2,r2,255
 80037c8:	10c5c83a 	sub	r2,r2,r3
 80037cc:	f800283a 	ret

080037d0 <strlen>:
 80037d0:	2005883a 	mov	r2,r4
 80037d4:	10c00007 	ldb	r3,0(r2)
 80037d8:	18000226 	beq	r3,zero,80037e4 <strlen+0x14>
 80037dc:	10800044 	addi	r2,r2,1
 80037e0:	003ffc06 	br	80037d4 <__alt_data_end+0xfc0037d4>
 80037e4:	1105c83a 	sub	r2,r2,r4
 80037e8:	f800283a 	ret

080037ec <print_repeat>:
 80037ec:	defffb04 	addi	sp,sp,-20
 80037f0:	dc800315 	stw	r18,12(sp)
 80037f4:	dc400215 	stw	r17,8(sp)
 80037f8:	dc000115 	stw	r16,4(sp)
 80037fc:	dfc00415 	stw	ra,16(sp)
 8003800:	2025883a 	mov	r18,r4
 8003804:	2823883a 	mov	r17,r5
 8003808:	d9800005 	stb	r6,0(sp)
 800380c:	3821883a 	mov	r16,r7
 8003810:	04000a0e 	bge	zero,r16,800383c <print_repeat+0x50>
 8003814:	88800117 	ldw	r2,4(r17)
 8003818:	9009883a 	mov	r4,r18
 800381c:	880b883a 	mov	r5,r17
 8003820:	d80d883a 	mov	r6,sp
 8003824:	01c00044 	movi	r7,1
 8003828:	103ee83a 	callr	r2
 800382c:	843fffc4 	addi	r16,r16,-1
 8003830:	103ff726 	beq	r2,zero,8003810 <__alt_data_end+0xfc003810>
 8003834:	00bfffc4 	movi	r2,-1
 8003838:	00000106 	br	8003840 <print_repeat+0x54>
 800383c:	0005883a 	mov	r2,zero
 8003840:	dfc00417 	ldw	ra,16(sp)
 8003844:	dc800317 	ldw	r18,12(sp)
 8003848:	dc400217 	ldw	r17,8(sp)
 800384c:	dc000117 	ldw	r16,4(sp)
 8003850:	dec00504 	addi	sp,sp,20
 8003854:	f800283a 	ret

08003858 <___vfprintf_internal_r>:
 8003858:	deffe304 	addi	sp,sp,-116
 800385c:	d8c00804 	addi	r3,sp,32
 8003860:	df001b15 	stw	fp,108(sp)
 8003864:	ddc01a15 	stw	r23,104(sp)
 8003868:	dd801915 	stw	r22,100(sp)
 800386c:	dd401815 	stw	r21,96(sp)
 8003870:	dd001715 	stw	r20,92(sp)
 8003874:	dcc01615 	stw	r19,88(sp)
 8003878:	dc801515 	stw	r18,84(sp)
 800387c:	dc401415 	stw	r17,80(sp)
 8003880:	dc001315 	stw	r16,76(sp)
 8003884:	dfc01c15 	stw	ra,112(sp)
 8003888:	2029883a 	mov	r20,r4
 800388c:	2823883a 	mov	r17,r5
 8003890:	3839883a 	mov	fp,r7
 8003894:	d9800f15 	stw	r6,60(sp)
 8003898:	0021883a 	mov	r16,zero
 800389c:	d8000e15 	stw	zero,56(sp)
 80038a0:	002f883a 	mov	r23,zero
 80038a4:	002b883a 	mov	r21,zero
 80038a8:	0027883a 	mov	r19,zero
 80038ac:	0025883a 	mov	r18,zero
 80038b0:	d8000c15 	stw	zero,48(sp)
 80038b4:	d8000b15 	stw	zero,44(sp)
 80038b8:	002d883a 	mov	r22,zero
 80038bc:	d8c00915 	stw	r3,36(sp)
 80038c0:	d8c00f17 	ldw	r3,60(sp)
 80038c4:	19000003 	ldbu	r4,0(r3)
 80038c8:	20803fcc 	andi	r2,r4,255
 80038cc:	1080201c 	xori	r2,r2,128
 80038d0:	10bfe004 	addi	r2,r2,-128
 80038d4:	10012e26 	beq	r2,zero,8003d90 <___vfprintf_internal_r+0x538>
 80038d8:	01400044 	movi	r5,1
 80038dc:	b1401426 	beq	r22,r5,8003930 <___vfprintf_internal_r+0xd8>
 80038e0:	2d800216 	blt	r5,r22,80038ec <___vfprintf_internal_r+0x94>
 80038e4:	b0000626 	beq	r22,zero,8003900 <___vfprintf_internal_r+0xa8>
 80038e8:	00012506 	br	8003d80 <___vfprintf_internal_r+0x528>
 80038ec:	01400084 	movi	r5,2
 80038f0:	b1401d26 	beq	r22,r5,8003968 <___vfprintf_internal_r+0x110>
 80038f4:	014000c4 	movi	r5,3
 80038f8:	b1402b26 	beq	r22,r5,80039a8 <___vfprintf_internal_r+0x150>
 80038fc:	00012006 	br	8003d80 <___vfprintf_internal_r+0x528>
 8003900:	01400944 	movi	r5,37
 8003904:	11410d26 	beq	r2,r5,8003d3c <___vfprintf_internal_r+0x4e4>
 8003908:	88800117 	ldw	r2,4(r17)
 800390c:	d9000005 	stb	r4,0(sp)
 8003910:	880b883a 	mov	r5,r17
 8003914:	a009883a 	mov	r4,r20
 8003918:	d80d883a 	mov	r6,sp
 800391c:	01c00044 	movi	r7,1
 8003920:	103ee83a 	callr	r2
 8003924:	1000e81e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003928:	84000044 	addi	r16,r16,1
 800392c:	00011406 	br	8003d80 <___vfprintf_internal_r+0x528>
 8003930:	01400c04 	movi	r5,48
 8003934:	11410a26 	beq	r2,r5,8003d60 <___vfprintf_internal_r+0x508>
 8003938:	01400944 	movi	r5,37
 800393c:	11400a1e 	bne	r2,r5,8003968 <___vfprintf_internal_r+0x110>
 8003940:	d8800005 	stb	r2,0(sp)
 8003944:	88800117 	ldw	r2,4(r17)
 8003948:	a009883a 	mov	r4,r20
 800394c:	880b883a 	mov	r5,r17
 8003950:	d80d883a 	mov	r6,sp
 8003954:	b00f883a 	mov	r7,r22
 8003958:	103ee83a 	callr	r2
 800395c:	1000da1e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003960:	84000044 	addi	r16,r16,1
 8003964:	00010506 	br	8003d7c <___vfprintf_internal_r+0x524>
 8003968:	25bff404 	addi	r22,r4,-48
 800396c:	b5803fcc 	andi	r22,r22,255
 8003970:	00c00244 	movi	r3,9
 8003974:	1d800936 	bltu	r3,r22,800399c <___vfprintf_internal_r+0x144>
 8003978:	00bfffc4 	movi	r2,-1
 800397c:	90800426 	beq	r18,r2,8003990 <___vfprintf_internal_r+0x138>
 8003980:	9009883a 	mov	r4,r18
 8003984:	01400284 	movi	r5,10
 8003988:	80026f80 	call	80026f8 <__mulsi3>
 800398c:	00000106 	br	8003994 <___vfprintf_internal_r+0x13c>
 8003990:	0005883a 	mov	r2,zero
 8003994:	15a5883a 	add	r18,r2,r22
 8003998:	0000f206 	br	8003d64 <___vfprintf_internal_r+0x50c>
 800399c:	01400b84 	movi	r5,46
 80039a0:	1140f426 	beq	r2,r5,8003d74 <___vfprintf_internal_r+0x51c>
 80039a4:	05800084 	movi	r22,2
 80039a8:	213ff404 	addi	r4,r4,-48
 80039ac:	20c03fcc 	andi	r3,r4,255
 80039b0:	01000244 	movi	r4,9
 80039b4:	20c00b36 	bltu	r4,r3,80039e4 <___vfprintf_internal_r+0x18c>
 80039b8:	00bfffc4 	movi	r2,-1
 80039bc:	98800626 	beq	r19,r2,80039d8 <___vfprintf_internal_r+0x180>
 80039c0:	9809883a 	mov	r4,r19
 80039c4:	01400284 	movi	r5,10
 80039c8:	d8c01115 	stw	r3,68(sp)
 80039cc:	80026f80 	call	80026f8 <__mulsi3>
 80039d0:	d8c01117 	ldw	r3,68(sp)
 80039d4:	00000106 	br	80039dc <___vfprintf_internal_r+0x184>
 80039d8:	0005883a 	mov	r2,zero
 80039dc:	10e7883a 	add	r19,r2,r3
 80039e0:	0000e706 	br	8003d80 <___vfprintf_internal_r+0x528>
 80039e4:	01401b04 	movi	r5,108
 80039e8:	1140e026 	beq	r2,r5,8003d6c <___vfprintf_internal_r+0x514>
 80039ec:	013fffc4 	movi	r4,-1
 80039f0:	99000226 	beq	r19,r4,80039fc <___vfprintf_internal_r+0x1a4>
 80039f4:	d8000b15 	stw	zero,44(sp)
 80039f8:	00000106 	br	8003a00 <___vfprintf_internal_r+0x1a8>
 80039fc:	04c00044 	movi	r19,1
 8003a00:	01001a44 	movi	r4,105
 8003a04:	11001626 	beq	r2,r4,8003a60 <___vfprintf_internal_r+0x208>
 8003a08:	20800916 	blt	r4,r2,8003a30 <___vfprintf_internal_r+0x1d8>
 8003a0c:	010018c4 	movi	r4,99
 8003a10:	11009626 	beq	r2,r4,8003c6c <___vfprintf_internal_r+0x414>
 8003a14:	01001904 	movi	r4,100
 8003a18:	11001126 	beq	r2,r4,8003a60 <___vfprintf_internal_r+0x208>
 8003a1c:	01001604 	movi	r4,88
 8003a20:	1100d61e 	bne	r2,r4,8003d7c <___vfprintf_internal_r+0x524>
 8003a24:	00c00044 	movi	r3,1
 8003a28:	d8c00e15 	stw	r3,56(sp)
 8003a2c:	00001406 	br	8003a80 <___vfprintf_internal_r+0x228>
 8003a30:	01001cc4 	movi	r4,115
 8003a34:	1100a626 	beq	r2,r4,8003cd0 <___vfprintf_internal_r+0x478>
 8003a38:	20800416 	blt	r4,r2,8003a4c <___vfprintf_internal_r+0x1f4>
 8003a3c:	01001bc4 	movi	r4,111
 8003a40:	1100ce1e 	bne	r2,r4,8003d7c <___vfprintf_internal_r+0x524>
 8003a44:	05400204 	movi	r21,8
 8003a48:	00000e06 	br	8003a84 <___vfprintf_internal_r+0x22c>
 8003a4c:	01001d44 	movi	r4,117
 8003a50:	11000c26 	beq	r2,r4,8003a84 <___vfprintf_internal_r+0x22c>
 8003a54:	01001e04 	movi	r4,120
 8003a58:	11000926 	beq	r2,r4,8003a80 <___vfprintf_internal_r+0x228>
 8003a5c:	0000c706 	br	8003d7c <___vfprintf_internal_r+0x524>
 8003a60:	e0800104 	addi	r2,fp,4
 8003a64:	b8000726 	beq	r23,zero,8003a84 <___vfprintf_internal_r+0x22c>
 8003a68:	d8800d15 	stw	r2,52(sp)
 8003a6c:	e7000017 	ldw	fp,0(fp)
 8003a70:	e000080e 	bge	fp,zero,8003a94 <___vfprintf_internal_r+0x23c>
 8003a74:	0739c83a 	sub	fp,zero,fp
 8003a78:	02000044 	movi	r8,1
 8003a7c:	00000606 	br	8003a98 <___vfprintf_internal_r+0x240>
 8003a80:	05400404 	movi	r21,16
 8003a84:	e0c00104 	addi	r3,fp,4
 8003a88:	d8c00d15 	stw	r3,52(sp)
 8003a8c:	e7000017 	ldw	fp,0(fp)
 8003a90:	002f883a 	mov	r23,zero
 8003a94:	0011883a 	mov	r8,zero
 8003a98:	002d883a 	mov	r22,zero
 8003a9c:	dd87883a 	add	r3,sp,r22
 8003aa0:	e0001a26 	beq	fp,zero,8003b0c <___vfprintf_internal_r+0x2b4>
 8003aa4:	e009883a 	mov	r4,fp
 8003aa8:	a80b883a 	mov	r5,r21
 8003aac:	d8c01115 	stw	r3,68(sp)
 8003ab0:	da001215 	stw	r8,72(sp)
 8003ab4:	80045500 	call	8004550 <__udivsi3>
 8003ab8:	a809883a 	mov	r4,r21
 8003abc:	100b883a 	mov	r5,r2
 8003ac0:	d8801015 	stw	r2,64(sp)
 8003ac4:	80026f80 	call	80026f8 <__mulsi3>
 8003ac8:	e085c83a 	sub	r2,fp,r2
 8003acc:	01000244 	movi	r4,9
 8003ad0:	d8c01117 	ldw	r3,68(sp)
 8003ad4:	d9801017 	ldw	r6,64(sp)
 8003ad8:	da001217 	ldw	r8,72(sp)
 8003adc:	20800216 	blt	r4,r2,8003ae8 <___vfprintf_internal_r+0x290>
 8003ae0:	17000c04 	addi	fp,r2,48
 8003ae4:	00000506 	br	8003afc <___vfprintf_internal_r+0x2a4>
 8003ae8:	d9400e17 	ldw	r5,56(sp)
 8003aec:	28000226 	beq	r5,zero,8003af8 <___vfprintf_internal_r+0x2a0>
 8003af0:	17000dc4 	addi	fp,r2,55
 8003af4:	00000106 	br	8003afc <___vfprintf_internal_r+0x2a4>
 8003af8:	170015c4 	addi	fp,r2,87
 8003afc:	1f000005 	stb	fp,0(r3)
 8003b00:	b5800044 	addi	r22,r22,1
 8003b04:	3039883a 	mov	fp,r6
 8003b08:	003fe406 	br	8003a9c <__alt_data_end+0xfc003a9c>
 8003b0c:	1ec5c83a 	sub	r2,r3,sp
 8003b10:	d8800a15 	stw	r2,40(sp)
 8003b14:	9885c83a 	sub	r2,r19,r2
 8003b18:	1839883a 	mov	fp,r3
 8003b1c:	00800e0e 	bge	zero,r2,8003b58 <___vfprintf_internal_r+0x300>
 8003b20:	182d883a 	mov	r22,r3
 8003b24:	1885883a 	add	r2,r3,r2
 8003b28:	01000c04 	movi	r4,48
 8003b2c:	d9400917 	ldw	r5,36(sp)
 8003b30:	b007883a 	mov	r3,r22
 8003b34:	b140052e 	bgeu	r22,r5,8003b4c <___vfprintf_internal_r+0x2f4>
 8003b38:	b5800044 	addi	r22,r22,1
 8003b3c:	19000005 	stb	r4,0(r3)
 8003b40:	b039883a 	mov	fp,r22
 8003b44:	b0bff91e 	bne	r22,r2,8003b2c <__alt_data_end+0xfc003b2c>
 8003b48:	00000106 	br	8003b50 <___vfprintf_internal_r+0x2f8>
 8003b4c:	b039883a 	mov	fp,r22
 8003b50:	b6edc83a 	sub	r22,r22,sp
 8003b54:	dd800a15 	stw	r22,40(sp)
 8003b58:	d8800a17 	ldw	r2,40(sp)
 8003b5c:	1207883a 	add	r3,r2,r8
 8003b60:	90edc83a 	sub	r22,r18,r3
 8003b64:	d8c00b17 	ldw	r3,44(sp)
 8003b68:	18001726 	beq	r3,zero,8003bc8 <___vfprintf_internal_r+0x370>
 8003b6c:	40000a26 	beq	r8,zero,8003b98 <___vfprintf_internal_r+0x340>
 8003b70:	00800b44 	movi	r2,45
 8003b74:	d8800805 	stb	r2,32(sp)
 8003b78:	88800117 	ldw	r2,4(r17)
 8003b7c:	a009883a 	mov	r4,r20
 8003b80:	880b883a 	mov	r5,r17
 8003b84:	d9800804 	addi	r6,sp,32
 8003b88:	01c00044 	movi	r7,1
 8003b8c:	103ee83a 	callr	r2
 8003b90:	10004d1e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003b94:	84000044 	addi	r16,r16,1
 8003b98:	0580070e 	bge	zero,r22,8003bb8 <___vfprintf_internal_r+0x360>
 8003b9c:	a009883a 	mov	r4,r20
 8003ba0:	880b883a 	mov	r5,r17
 8003ba4:	01800c04 	movi	r6,48
 8003ba8:	b00f883a 	mov	r7,r22
 8003bac:	80037ec0 	call	80037ec <print_repeat>
 8003bb0:	1000451e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003bb4:	85a1883a 	add	r16,r16,r22
 8003bb8:	d9000a17 	ldw	r4,40(sp)
 8003bbc:	e007883a 	mov	r3,fp
 8003bc0:	272dc83a 	sub	r22,r4,fp
 8003bc4:	00002206 	br	8003c50 <___vfprintf_internal_r+0x3f8>
 8003bc8:	0580090e 	bge	zero,r22,8003bf0 <___vfprintf_internal_r+0x398>
 8003bcc:	a009883a 	mov	r4,r20
 8003bd0:	880b883a 	mov	r5,r17
 8003bd4:	01800804 	movi	r6,32
 8003bd8:	b00f883a 	mov	r7,r22
 8003bdc:	da001215 	stw	r8,72(sp)
 8003be0:	80037ec0 	call	80037ec <print_repeat>
 8003be4:	da001217 	ldw	r8,72(sp)
 8003be8:	1000371e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003bec:	85a1883a 	add	r16,r16,r22
 8003bf0:	403ff126 	beq	r8,zero,8003bb8 <__alt_data_end+0xfc003bb8>
 8003bf4:	00800b44 	movi	r2,45
 8003bf8:	d8800805 	stb	r2,32(sp)
 8003bfc:	88800117 	ldw	r2,4(r17)
 8003c00:	a009883a 	mov	r4,r20
 8003c04:	880b883a 	mov	r5,r17
 8003c08:	d9800804 	addi	r6,sp,32
 8003c0c:	01c00044 	movi	r7,1
 8003c10:	103ee83a 	callr	r2
 8003c14:	10002c1e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003c18:	84000044 	addi	r16,r16,1
 8003c1c:	003fe606 	br	8003bb8 <__alt_data_end+0xfc003bb8>
 8003c20:	18ffffc4 	addi	r3,r3,-1
 8003c24:	18800003 	ldbu	r2,0(r3)
 8003c28:	a009883a 	mov	r4,r20
 8003c2c:	d8c01115 	stw	r3,68(sp)
 8003c30:	d8800805 	stb	r2,32(sp)
 8003c34:	88800117 	ldw	r2,4(r17)
 8003c38:	880b883a 	mov	r5,r17
 8003c3c:	d9800804 	addi	r6,sp,32
 8003c40:	01c00044 	movi	r7,1
 8003c44:	103ee83a 	callr	r2
 8003c48:	d8c01117 	ldw	r3,68(sp)
 8003c4c:	10001e1e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003c50:	80c5c83a 	sub	r2,r16,r3
 8003c54:	1d89883a 	add	r4,r3,r22
 8003c58:	e085883a 	add	r2,fp,r2
 8003c5c:	013ff016 	blt	zero,r4,8003c20 <__alt_data_end+0xfc003c20>
 8003c60:	1021883a 	mov	r16,r2
 8003c64:	df000d17 	ldw	fp,52(sp)
 8003c68:	00004406 	br	8003d7c <___vfprintf_internal_r+0x524>
 8003c6c:	01000044 	movi	r4,1
 8003c70:	2480080e 	bge	r4,r18,8003c94 <___vfprintf_internal_r+0x43c>
 8003c74:	95bfffc4 	addi	r22,r18,-1
 8003c78:	a009883a 	mov	r4,r20
 8003c7c:	880b883a 	mov	r5,r17
 8003c80:	01800804 	movi	r6,32
 8003c84:	b00f883a 	mov	r7,r22
 8003c88:	80037ec0 	call	80037ec <print_repeat>
 8003c8c:	10000e1e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003c90:	85a1883a 	add	r16,r16,r22
 8003c94:	e0800017 	ldw	r2,0(fp)
 8003c98:	a009883a 	mov	r4,r20
 8003c9c:	880b883a 	mov	r5,r17
 8003ca0:	d8800005 	stb	r2,0(sp)
 8003ca4:	88800117 	ldw	r2,4(r17)
 8003ca8:	d80d883a 	mov	r6,sp
 8003cac:	01c00044 	movi	r7,1
 8003cb0:	e5800104 	addi	r22,fp,4
 8003cb4:	103ee83a 	callr	r2
 8003cb8:	1000031e 	bne	r2,zero,8003cc8 <___vfprintf_internal_r+0x470>
 8003cbc:	84000044 	addi	r16,r16,1
 8003cc0:	b039883a 	mov	fp,r22
 8003cc4:	00002d06 	br	8003d7c <___vfprintf_internal_r+0x524>
 8003cc8:	00bfffc4 	movi	r2,-1
 8003ccc:	00003106 	br	8003d94 <___vfprintf_internal_r+0x53c>
 8003cd0:	e5800017 	ldw	r22,0(fp)
 8003cd4:	e0c00104 	addi	r3,fp,4
 8003cd8:	d8c00a15 	stw	r3,40(sp)
 8003cdc:	b009883a 	mov	r4,r22
 8003ce0:	80037d00 	call	80037d0 <strlen>
 8003ce4:	9091c83a 	sub	r8,r18,r2
 8003ce8:	1039883a 	mov	fp,r2
 8003cec:	0200090e 	bge	zero,r8,8003d14 <___vfprintf_internal_r+0x4bc>
 8003cf0:	400f883a 	mov	r7,r8
 8003cf4:	a009883a 	mov	r4,r20
 8003cf8:	880b883a 	mov	r5,r17
 8003cfc:	01800804 	movi	r6,32
 8003d00:	da001215 	stw	r8,72(sp)
 8003d04:	80037ec0 	call	80037ec <print_repeat>
 8003d08:	da001217 	ldw	r8,72(sp)
 8003d0c:	103fee1e 	bne	r2,zero,8003cc8 <__alt_data_end+0xfc003cc8>
 8003d10:	8221883a 	add	r16,r16,r8
 8003d14:	88800117 	ldw	r2,4(r17)
 8003d18:	a009883a 	mov	r4,r20
 8003d1c:	880b883a 	mov	r5,r17
 8003d20:	b00d883a 	mov	r6,r22
 8003d24:	e00f883a 	mov	r7,fp
 8003d28:	103ee83a 	callr	r2
 8003d2c:	103fe61e 	bne	r2,zero,8003cc8 <__alt_data_end+0xfc003cc8>
 8003d30:	8721883a 	add	r16,r16,fp
 8003d34:	df000a17 	ldw	fp,40(sp)
 8003d38:	00001006 	br	8003d7c <___vfprintf_internal_r+0x524>
 8003d3c:	05c00044 	movi	r23,1
 8003d40:	04ffffc4 	movi	r19,-1
 8003d44:	d8000e15 	stw	zero,56(sp)
 8003d48:	05400284 	movi	r21,10
 8003d4c:	9825883a 	mov	r18,r19
 8003d50:	d8000c15 	stw	zero,48(sp)
 8003d54:	d8000b15 	stw	zero,44(sp)
 8003d58:	b82d883a 	mov	r22,r23
 8003d5c:	00000806 	br	8003d80 <___vfprintf_internal_r+0x528>
 8003d60:	dd800b15 	stw	r22,44(sp)
 8003d64:	05800084 	movi	r22,2
 8003d68:	00000506 	br	8003d80 <___vfprintf_internal_r+0x528>
 8003d6c:	00c00044 	movi	r3,1
 8003d70:	d8c00c15 	stw	r3,48(sp)
 8003d74:	058000c4 	movi	r22,3
 8003d78:	00000106 	br	8003d80 <___vfprintf_internal_r+0x528>
 8003d7c:	002d883a 	mov	r22,zero
 8003d80:	d8c00f17 	ldw	r3,60(sp)
 8003d84:	18c00044 	addi	r3,r3,1
 8003d88:	d8c00f15 	stw	r3,60(sp)
 8003d8c:	003ecc06 	br	80038c0 <__alt_data_end+0xfc0038c0>
 8003d90:	8005883a 	mov	r2,r16
 8003d94:	dfc01c17 	ldw	ra,112(sp)
 8003d98:	df001b17 	ldw	fp,108(sp)
 8003d9c:	ddc01a17 	ldw	r23,104(sp)
 8003da0:	dd801917 	ldw	r22,100(sp)
 8003da4:	dd401817 	ldw	r21,96(sp)
 8003da8:	dd001717 	ldw	r20,92(sp)
 8003dac:	dcc01617 	ldw	r19,88(sp)
 8003db0:	dc801517 	ldw	r18,84(sp)
 8003db4:	dc401417 	ldw	r17,80(sp)
 8003db8:	dc001317 	ldw	r16,76(sp)
 8003dbc:	dec01d04 	addi	sp,sp,116
 8003dc0:	f800283a 	ret

08003dc4 <__vfprintf_internal>:
 8003dc4:	2007883a 	mov	r3,r4
 8003dc8:	01020034 	movhi	r4,2048
 8003dcc:	211f1004 	addi	r4,r4,31808
 8003dd0:	21000017 	ldw	r4,0(r4)
 8003dd4:	2805883a 	mov	r2,r5
 8003dd8:	300f883a 	mov	r7,r6
 8003ddc:	180b883a 	mov	r5,r3
 8003de0:	100d883a 	mov	r6,r2
 8003de4:	80038581 	jmpi	8003858 <___vfprintf_internal_r>

08003de8 <__call_exitprocs>:
 8003de8:	00820034 	movhi	r2,2048
 8003dec:	109f0f04 	addi	r2,r2,31804
 8003df0:	10800017 	ldw	r2,0(r2)
 8003df4:	defff304 	addi	sp,sp,-52
 8003df8:	ddc00a15 	stw	r23,40(sp)
 8003dfc:	d8800015 	stw	r2,0(sp)
 8003e00:	05c20034 	movhi	r23,2048
 8003e04:	10800c04 	addi	r2,r2,48
 8003e08:	dc800515 	stw	r18,20(sp)
 8003e0c:	dfc00c15 	stw	ra,48(sp)
 8003e10:	df000b15 	stw	fp,44(sp)
 8003e14:	dd800915 	stw	r22,36(sp)
 8003e18:	dd400815 	stw	r21,32(sp)
 8003e1c:	dd000715 	stw	r20,28(sp)
 8003e20:	dcc00615 	stw	r19,24(sp)
 8003e24:	dc400415 	stw	r17,16(sp)
 8003e28:	dc000315 	stw	r16,12(sp)
 8003e2c:	d9000115 	stw	r4,4(sp)
 8003e30:	2825883a 	mov	r18,r5
 8003e34:	d8800215 	stw	r2,8(sp)
 8003e38:	bdcb2304 	addi	r23,r23,11404
 8003e3c:	d8800017 	ldw	r2,0(sp)
 8003e40:	dc400217 	ldw	r17,8(sp)
 8003e44:	14c00c17 	ldw	r19,48(r2)
 8003e48:	98004226 	beq	r19,zero,8003f54 <__call_exitprocs+0x16c>
 8003e4c:	9c000117 	ldw	r16,4(r19)
 8003e50:	00900034 	movhi	r2,16384
 8003e54:	10bfffc4 	addi	r2,r2,-1
 8003e58:	9d002217 	ldw	r20,136(r19)
 8003e5c:	857fffc4 	addi	r21,r16,-1
 8003e60:	80a1883a 	add	r16,r16,r2
 8003e64:	8421883a 	add	r16,r16,r16
 8003e68:	8421883a 	add	r16,r16,r16
 8003e6c:	a42d883a 	add	r22,r20,r16
 8003e70:	84000204 	addi	r16,r16,8
 8003e74:	9c21883a 	add	r16,r19,r16
 8003e78:	a8002616 	blt	r21,zero,8003f14 <__call_exitprocs+0x12c>
 8003e7c:	90000326 	beq	r18,zero,8003e8c <__call_exitprocs+0xa4>
 8003e80:	a0002026 	beq	r20,zero,8003f04 <__call_exitprocs+0x11c>
 8003e84:	b1002017 	ldw	r4,128(r22)
 8003e88:	24801e1e 	bne	r4,r18,8003f04 <__call_exitprocs+0x11c>
 8003e8c:	99000117 	ldw	r4,4(r19)
 8003e90:	82000017 	ldw	r8,0(r16)
 8003e94:	213fffc4 	addi	r4,r4,-1
 8003e98:	a900021e 	bne	r21,r4,8003ea4 <__call_exitprocs+0xbc>
 8003e9c:	9d400115 	stw	r21,4(r19)
 8003ea0:	00000106 	br	8003ea8 <__call_exitprocs+0xc0>
 8003ea4:	80000015 	stw	zero,0(r16)
 8003ea8:	40001626 	beq	r8,zero,8003f04 <__call_exitprocs+0x11c>
 8003eac:	9f000117 	ldw	fp,4(r19)
 8003eb0:	a0000526 	beq	r20,zero,8003ec8 <__call_exitprocs+0xe0>
 8003eb4:	00800044 	movi	r2,1
 8003eb8:	1552983a 	sll	r9,r2,r21
 8003ebc:	a1404017 	ldw	r5,256(r20)
 8003ec0:	494a703a 	and	r5,r9,r5
 8003ec4:	2800021e 	bne	r5,zero,8003ed0 <__call_exitprocs+0xe8>
 8003ec8:	403ee83a 	callr	r8
 8003ecc:	00000906 	br	8003ef4 <__call_exitprocs+0x10c>
 8003ed0:	a1004117 	ldw	r4,260(r20)
 8003ed4:	4908703a 	and	r4,r9,r4
 8003ed8:	2000041e 	bne	r4,zero,8003eec <__call_exitprocs+0x104>
 8003edc:	d9000117 	ldw	r4,4(sp)
 8003ee0:	b1400017 	ldw	r5,0(r22)
 8003ee4:	403ee83a 	callr	r8
 8003ee8:	00000206 	br	8003ef4 <__call_exitprocs+0x10c>
 8003eec:	b1000017 	ldw	r4,0(r22)
 8003ef0:	403ee83a 	callr	r8
 8003ef4:	99000117 	ldw	r4,4(r19)
 8003ef8:	e13fd01e 	bne	fp,r4,8003e3c <__alt_data_end+0xfc003e3c>
 8003efc:	89000017 	ldw	r4,0(r17)
 8003f00:	24ffce1e 	bne	r4,r19,8003e3c <__alt_data_end+0xfc003e3c>
 8003f04:	ad7fffc4 	addi	r21,r21,-1
 8003f08:	b5bfff04 	addi	r22,r22,-4
 8003f0c:	843fff04 	addi	r16,r16,-4
 8003f10:	003fd906 	br	8003e78 <__alt_data_end+0xfc003e78>
 8003f14:	b8000f26 	beq	r23,zero,8003f54 <__call_exitprocs+0x16c>
 8003f18:	99000117 	ldw	r4,4(r19)
 8003f1c:	20000a1e 	bne	r4,zero,8003f48 <__call_exitprocs+0x160>
 8003f20:	99000017 	ldw	r4,0(r19)
 8003f24:	20000826 	beq	r4,zero,8003f48 <__call_exitprocs+0x160>
 8003f28:	89000015 	stw	r4,0(r17)
 8003f2c:	a0000226 	beq	r20,zero,8003f38 <__call_exitprocs+0x150>
 8003f30:	a009883a 	mov	r4,r20
 8003f34:	8002c8c0 	call	8002c8c <free>
 8003f38:	9809883a 	mov	r4,r19
 8003f3c:	8002c8c0 	call	8002c8c <free>
 8003f40:	8cc00017 	ldw	r19,0(r17)
 8003f44:	003fc006 	br	8003e48 <__alt_data_end+0xfc003e48>
 8003f48:	9823883a 	mov	r17,r19
 8003f4c:	9cc00017 	ldw	r19,0(r19)
 8003f50:	003fbd06 	br	8003e48 <__alt_data_end+0xfc003e48>
 8003f54:	dfc00c17 	ldw	ra,48(sp)
 8003f58:	df000b17 	ldw	fp,44(sp)
 8003f5c:	ddc00a17 	ldw	r23,40(sp)
 8003f60:	dd800917 	ldw	r22,36(sp)
 8003f64:	dd400817 	ldw	r21,32(sp)
 8003f68:	dd000717 	ldw	r20,28(sp)
 8003f6c:	dcc00617 	ldw	r19,24(sp)
 8003f70:	dc800517 	ldw	r18,20(sp)
 8003f74:	dc400417 	ldw	r17,16(sp)
 8003f78:	dc000317 	ldw	r16,12(sp)
 8003f7c:	dec00d04 	addi	sp,sp,52
 8003f80:	f800283a 	ret

08003f84 <_malloc_trim_r>:
 8003f84:	defffb04 	addi	sp,sp,-20
 8003f88:	dcc00315 	stw	r19,12(sp)
 8003f8c:	04c20034 	movhi	r19,2048
 8003f90:	dc800215 	stw	r18,8(sp)
 8003f94:	dc400115 	stw	r17,4(sp)
 8003f98:	dc000015 	stw	r16,0(sp)
 8003f9c:	dfc00415 	stw	ra,16(sp)
 8003fa0:	2821883a 	mov	r16,r5
 8003fa4:	2025883a 	mov	r18,r4
 8003fa8:	9cdcff04 	addi	r19,r19,29692
 8003fac:	80049c40 	call	80049c4 <__malloc_lock>
 8003fb0:	98800217 	ldw	r2,8(r19)
 8003fb4:	14400117 	ldw	r17,4(r2)
 8003fb8:	00bfff04 	movi	r2,-4
 8003fbc:	88a2703a 	and	r17,r17,r2
 8003fc0:	8c21c83a 	sub	r16,r17,r16
 8003fc4:	84001bc4 	addi	r16,r16,111
 8003fc8:	8020d1fa 	srli	r16,r16,7
 8003fcc:	00801fc4 	movi	r2,127
 8003fd0:	843fffc4 	addi	r16,r16,-1
 8003fd4:	802091fa 	slli	r16,r16,7
 8003fd8:	14000416 	blt	r2,r16,8003fec <_malloc_trim_r+0x68>
 8003fdc:	9009883a 	mov	r4,r18
 8003fe0:	80049e40 	call	80049e4 <__malloc_unlock>
 8003fe4:	0005883a 	mov	r2,zero
 8003fe8:	00002806 	br	800408c <_malloc_trim_r+0x108>
 8003fec:	9009883a 	mov	r4,r18
 8003ff0:	000b883a 	mov	r5,zero
 8003ff4:	80034600 	call	8003460 <_sbrk_r>
 8003ff8:	98c00217 	ldw	r3,8(r19)
 8003ffc:	1c47883a 	add	r3,r3,r17
 8004000:	10fff61e 	bne	r2,r3,8003fdc <__alt_data_end+0xfc003fdc>
 8004004:	9009883a 	mov	r4,r18
 8004008:	040bc83a 	sub	r5,zero,r16
 800400c:	80034600 	call	8003460 <_sbrk_r>
 8004010:	00ffffc4 	movi	r3,-1
 8004014:	10c0111e 	bne	r2,r3,800405c <_malloc_trim_r+0xd8>
 8004018:	9009883a 	mov	r4,r18
 800401c:	000b883a 	mov	r5,zero
 8004020:	80034600 	call	8003460 <_sbrk_r>
 8004024:	99000217 	ldw	r4,8(r19)
 8004028:	014003c4 	movi	r5,15
 800402c:	1107c83a 	sub	r3,r2,r4
 8004030:	28ffea0e 	bge	r5,r3,8003fdc <__alt_data_end+0xfc003fdc>
 8004034:	01420034 	movhi	r5,2048
 8004038:	295f0d04 	addi	r5,r5,31796
 800403c:	29400017 	ldw	r5,0(r5)
 8004040:	18c00054 	ori	r3,r3,1
 8004044:	20c00115 	stw	r3,4(r4)
 8004048:	1145c83a 	sub	r2,r2,r5
 800404c:	01420074 	movhi	r5,2049
 8004050:	29638a04 	addi	r5,r5,-29144
 8004054:	28800015 	stw	r2,0(r5)
 8004058:	003fe006 	br	8003fdc <__alt_data_end+0xfc003fdc>
 800405c:	98800217 	ldw	r2,8(r19)
 8004060:	8c23c83a 	sub	r17,r17,r16
 8004064:	00c20074 	movhi	r3,2049
 8004068:	18e38a04 	addi	r3,r3,-29144
 800406c:	8c400054 	ori	r17,r17,1
 8004070:	14400115 	stw	r17,4(r2)
 8004074:	18800017 	ldw	r2,0(r3)
 8004078:	9009883a 	mov	r4,r18
 800407c:	1421c83a 	sub	r16,r2,r16
 8004080:	1c000015 	stw	r16,0(r3)
 8004084:	80049e40 	call	80049e4 <__malloc_unlock>
 8004088:	00800044 	movi	r2,1
 800408c:	dfc00417 	ldw	ra,16(sp)
 8004090:	dcc00317 	ldw	r19,12(sp)
 8004094:	dc800217 	ldw	r18,8(sp)
 8004098:	dc400117 	ldw	r17,4(sp)
 800409c:	dc000017 	ldw	r16,0(sp)
 80040a0:	dec00504 	addi	sp,sp,20
 80040a4:	f800283a 	ret

080040a8 <_free_r>:
 80040a8:	2800a026 	beq	r5,zero,800432c <_free_r+0x284>
 80040ac:	defffd04 	addi	sp,sp,-12
 80040b0:	dc400115 	stw	r17,4(sp)
 80040b4:	dc000015 	stw	r16,0(sp)
 80040b8:	2823883a 	mov	r17,r5
 80040bc:	2021883a 	mov	r16,r4
 80040c0:	dfc00215 	stw	ra,8(sp)
 80040c4:	80049c40 	call	80049c4 <__malloc_lock>
 80040c8:	8a3fff17 	ldw	r8,-4(r17)
 80040cc:	00bfff84 	movi	r2,-2
 80040d0:	893ffe04 	addi	r4,r17,-8
 80040d4:	4084703a 	and	r2,r8,r2
 80040d8:	208d883a 	add	r6,r4,r2
 80040dc:	31400117 	ldw	r5,4(r6)
 80040e0:	00ffff04 	movi	r3,-4
 80040e4:	28c6703a 	and	r3,r5,r3
 80040e8:	01420034 	movhi	r5,2048
 80040ec:	295cff04 	addi	r5,r5,29692
 80040f0:	2a400217 	ldw	r9,8(r5)
 80040f4:	280f883a 	mov	r7,r5
 80040f8:	4140004c 	andi	r5,r8,1
 80040fc:	32401b1e 	bne	r6,r9,800416c <_free_r+0xc4>
 8004100:	1885883a 	add	r2,r3,r2
 8004104:	2800071e 	bne	r5,zero,8004124 <_free_r+0x7c>
 8004108:	88fffe17 	ldw	r3,-8(r17)
 800410c:	20c9c83a 	sub	r4,r4,r3
 8004110:	21400217 	ldw	r5,8(r4)
 8004114:	10c5883a 	add	r2,r2,r3
 8004118:	20c00317 	ldw	r3,12(r4)
 800411c:	28c00315 	stw	r3,12(r5)
 8004120:	19400215 	stw	r5,8(r3)
 8004124:	10c00054 	ori	r3,r2,1
 8004128:	20c00115 	stw	r3,4(r4)
 800412c:	00c20034 	movhi	r3,2048
 8004130:	18df0e04 	addi	r3,r3,31800
 8004134:	18c00017 	ldw	r3,0(r3)
 8004138:	39000215 	stw	r4,8(r7)
 800413c:	10c00536 	bltu	r2,r3,8004154 <_free_r+0xac>
 8004140:	00820074 	movhi	r2,2049
 8004144:	10a14304 	addi	r2,r2,-31476
 8004148:	11400017 	ldw	r5,0(r2)
 800414c:	8009883a 	mov	r4,r16
 8004150:	8003f840 	call	8003f84 <_malloc_trim_r>
 8004154:	8009883a 	mov	r4,r16
 8004158:	dfc00217 	ldw	ra,8(sp)
 800415c:	dc400117 	ldw	r17,4(sp)
 8004160:	dc000017 	ldw	r16,0(sp)
 8004164:	dec00304 	addi	sp,sp,12
 8004168:	80049e41 	jmpi	80049e4 <__malloc_unlock>
 800416c:	30c00115 	stw	r3,4(r6)
 8004170:	2800091e 	bne	r5,zero,8004198 <_free_r+0xf0>
 8004174:	897ffe17 	ldw	r5,-8(r17)
 8004178:	3a000204 	addi	r8,r7,8
 800417c:	2149c83a 	sub	r4,r4,r5
 8004180:	1145883a 	add	r2,r2,r5
 8004184:	21400217 	ldw	r5,8(r4)
 8004188:	2a000526 	beq	r5,r8,80041a0 <_free_r+0xf8>
 800418c:	22000317 	ldw	r8,12(r4)
 8004190:	2a000315 	stw	r8,12(r5)
 8004194:	41400215 	stw	r5,8(r8)
 8004198:	000b883a 	mov	r5,zero
 800419c:	00000106 	br	80041a4 <_free_r+0xfc>
 80041a0:	01400044 	movi	r5,1
 80041a4:	30d1883a 	add	r8,r6,r3
 80041a8:	42000117 	ldw	r8,4(r8)
 80041ac:	4200004c 	andi	r8,r8,1
 80041b0:	4000101e 	bne	r8,zero,80041f4 <_free_r+0x14c>
 80041b4:	10c5883a 	add	r2,r2,r3
 80041b8:	28000a1e 	bne	r5,zero,80041e4 <_free_r+0x13c>
 80041bc:	30c00217 	ldw	r3,8(r6)
 80041c0:	02020034 	movhi	r8,2048
 80041c4:	421d0104 	addi	r8,r8,29700
 80041c8:	1a00061e 	bne	r3,r8,80041e4 <_free_r+0x13c>
 80041cc:	39000515 	stw	r4,20(r7)
 80041d0:	39000415 	stw	r4,16(r7)
 80041d4:	20c00315 	stw	r3,12(r4)
 80041d8:	20c00215 	stw	r3,8(r4)
 80041dc:	01400044 	movi	r5,1
 80041e0:	00000406 	br	80041f4 <_free_r+0x14c>
 80041e4:	30c00317 	ldw	r3,12(r6)
 80041e8:	31800217 	ldw	r6,8(r6)
 80041ec:	30c00315 	stw	r3,12(r6)
 80041f0:	19800215 	stw	r6,8(r3)
 80041f4:	10c00054 	ori	r3,r2,1
 80041f8:	20c00115 	stw	r3,4(r4)
 80041fc:	2087883a 	add	r3,r4,r2
 8004200:	18800015 	stw	r2,0(r3)
 8004204:	283fd31e 	bne	r5,zero,8004154 <__alt_data_end+0xfc004154>
 8004208:	00c07fc4 	movi	r3,511
 800420c:	18801036 	bltu	r3,r2,8004250 <_free_r+0x1a8>
 8004210:	1006d0fa 	srli	r3,r2,3
 8004214:	00800044 	movi	r2,1
 8004218:	180bd0ba 	srai	r5,r3,2
 800421c:	18c7883a 	add	r3,r3,r3
 8004220:	18c7883a 	add	r3,r3,r3
 8004224:	114a983a 	sll	r5,r2,r5
 8004228:	38800117 	ldw	r2,4(r7)
 800422c:	18c7883a 	add	r3,r3,r3
 8004230:	2884b03a 	or	r2,r5,r2
 8004234:	38800115 	stw	r2,4(r7)
 8004238:	38c5883a 	add	r2,r7,r3
 800423c:	10c00217 	ldw	r3,8(r2)
 8004240:	20800315 	stw	r2,12(r4)
 8004244:	20c00215 	stw	r3,8(r4)
 8004248:	11000215 	stw	r4,8(r2)
 800424c:	00003506 	br	8004324 <_free_r+0x27c>
 8004250:	1006d27a 	srli	r3,r2,9
 8004254:	01400104 	movi	r5,4
 8004258:	28c00336 	bltu	r5,r3,8004268 <_free_r+0x1c0>
 800425c:	1006d1ba 	srli	r3,r2,6
 8004260:	18c00e04 	addi	r3,r3,56
 8004264:	00001406 	br	80042b8 <_free_r+0x210>
 8004268:	01400504 	movi	r5,20
 800426c:	28c00236 	bltu	r5,r3,8004278 <_free_r+0x1d0>
 8004270:	18c016c4 	addi	r3,r3,91
 8004274:	00001006 	br	80042b8 <_free_r+0x210>
 8004278:	01401504 	movi	r5,84
 800427c:	28c00336 	bltu	r5,r3,800428c <_free_r+0x1e4>
 8004280:	1006d33a 	srli	r3,r2,12
 8004284:	18c01b84 	addi	r3,r3,110
 8004288:	00000b06 	br	80042b8 <_free_r+0x210>
 800428c:	01405504 	movi	r5,340
 8004290:	28c00336 	bltu	r5,r3,80042a0 <_free_r+0x1f8>
 8004294:	1006d3fa 	srli	r3,r2,15
 8004298:	18c01dc4 	addi	r3,r3,119
 800429c:	00000606 	br	80042b8 <_free_r+0x210>
 80042a0:	01415504 	movi	r5,1364
 80042a4:	28c00336 	bltu	r5,r3,80042b4 <_free_r+0x20c>
 80042a8:	1006d4ba 	srli	r3,r2,18
 80042ac:	18c01f04 	addi	r3,r3,124
 80042b0:	00000106 	br	80042b8 <_free_r+0x210>
 80042b4:	00c01f84 	movi	r3,126
 80042b8:	18cd883a 	add	r6,r3,r3
 80042bc:	318d883a 	add	r6,r6,r6
 80042c0:	318d883a 	add	r6,r6,r6
 80042c4:	398b883a 	add	r5,r7,r6
 80042c8:	29800217 	ldw	r6,8(r5)
 80042cc:	02020034 	movhi	r8,2048
 80042d0:	421cff04 	addi	r8,r8,29692
 80042d4:	3140081e 	bne	r6,r5,80042f8 <_free_r+0x250>
 80042d8:	1807d0ba 	srai	r3,r3,2
 80042dc:	00800044 	movi	r2,1
 80042e0:	10c6983a 	sll	r3,r2,r3
 80042e4:	40800117 	ldw	r2,4(r8)
 80042e8:	1886b03a 	or	r3,r3,r2
 80042ec:	40c00115 	stw	r3,4(r8)
 80042f0:	3007883a 	mov	r3,r6
 80042f4:	00000806 	br	8004318 <_free_r+0x270>
 80042f8:	3007883a 	mov	r3,r6
 80042fc:	01ffff04 	movi	r7,-4
 8004300:	19800117 	ldw	r6,4(r3)
 8004304:	31cc703a 	and	r6,r6,r7
 8004308:	1180022e 	bgeu	r2,r6,8004314 <_free_r+0x26c>
 800430c:	18c00217 	ldw	r3,8(r3)
 8004310:	197ffb1e 	bne	r3,r5,8004300 <__alt_data_end+0xfc004300>
 8004314:	19800317 	ldw	r6,12(r3)
 8004318:	21800315 	stw	r6,12(r4)
 800431c:	20c00215 	stw	r3,8(r4)
 8004320:	31000215 	stw	r4,8(r6)
 8004324:	19000315 	stw	r4,12(r3)
 8004328:	003f8a06 	br	8004154 <__alt_data_end+0xfc004154>
 800432c:	f800283a 	ret

08004330 <__sfvwrite_small_dev>:
 8004330:	2880000b 	ldhu	r2,0(r5)
 8004334:	defffa04 	addi	sp,sp,-24
 8004338:	dc000015 	stw	r16,0(sp)
 800433c:	dfc00515 	stw	ra,20(sp)
 8004340:	dd000415 	stw	r20,16(sp)
 8004344:	dcc00315 	stw	r19,12(sp)
 8004348:	dc800215 	stw	r18,8(sp)
 800434c:	dc400115 	stw	r17,4(sp)
 8004350:	1080020c 	andi	r2,r2,8
 8004354:	2821883a 	mov	r16,r5
 8004358:	10001726 	beq	r2,zero,80043b8 <__sfvwrite_small_dev+0x88>
 800435c:	2880008f 	ldh	r2,2(r5)
 8004360:	10001216 	blt	r2,zero,80043ac <__sfvwrite_small_dev+0x7c>
 8004364:	2027883a 	mov	r19,r4
 8004368:	3025883a 	mov	r18,r6
 800436c:	3823883a 	mov	r17,r7
 8004370:	05010004 	movi	r20,1024
 8004374:	04400b0e 	bge	zero,r17,80043a4 <__sfvwrite_small_dev+0x74>
 8004378:	8140008f 	ldh	r5,2(r16)
 800437c:	880f883a 	mov	r7,r17
 8004380:	a440010e 	bge	r20,r17,8004388 <__sfvwrite_small_dev+0x58>
 8004384:	01c10004 	movi	r7,1024
 8004388:	9809883a 	mov	r4,r19
 800438c:	900d883a 	mov	r6,r18
 8004390:	80043dc0 	call	80043dc <_write_r>
 8004394:	0080050e 	bge	zero,r2,80043ac <__sfvwrite_small_dev+0x7c>
 8004398:	88a3c83a 	sub	r17,r17,r2
 800439c:	90a5883a 	add	r18,r18,r2
 80043a0:	003ff406 	br	8004374 <__alt_data_end+0xfc004374>
 80043a4:	0005883a 	mov	r2,zero
 80043a8:	00000406 	br	80043bc <__sfvwrite_small_dev+0x8c>
 80043ac:	8080000b 	ldhu	r2,0(r16)
 80043b0:	10801014 	ori	r2,r2,64
 80043b4:	8080000d 	sth	r2,0(r16)
 80043b8:	00bfffc4 	movi	r2,-1
 80043bc:	dfc00517 	ldw	ra,20(sp)
 80043c0:	dd000417 	ldw	r20,16(sp)
 80043c4:	dcc00317 	ldw	r19,12(sp)
 80043c8:	dc800217 	ldw	r18,8(sp)
 80043cc:	dc400117 	ldw	r17,4(sp)
 80043d0:	dc000017 	ldw	r16,0(sp)
 80043d4:	dec00604 	addi	sp,sp,24
 80043d8:	f800283a 	ret

080043dc <_write_r>:
 80043dc:	defffd04 	addi	sp,sp,-12
 80043e0:	dc000015 	stw	r16,0(sp)
 80043e4:	04020074 	movhi	r16,2049
 80043e8:	dc400115 	stw	r17,4(sp)
 80043ec:	84214404 	addi	r16,r16,-31472
 80043f0:	2023883a 	mov	r17,r4
 80043f4:	2809883a 	mov	r4,r5
 80043f8:	300b883a 	mov	r5,r6
 80043fc:	380d883a 	mov	r6,r7
 8004400:	dfc00215 	stw	ra,8(sp)
 8004404:	80000015 	stw	zero,0(r16)
 8004408:	8004d700 	call	8004d70 <write>
 800440c:	00ffffc4 	movi	r3,-1
 8004410:	10c0031e 	bne	r2,r3,8004420 <_write_r+0x44>
 8004414:	80c00017 	ldw	r3,0(r16)
 8004418:	18000126 	beq	r3,zero,8004420 <_write_r+0x44>
 800441c:	88c00015 	stw	r3,0(r17)
 8004420:	dfc00217 	ldw	ra,8(sp)
 8004424:	dc400117 	ldw	r17,4(sp)
 8004428:	dc000017 	ldw	r16,0(sp)
 800442c:	dec00304 	addi	sp,sp,12
 8004430:	f800283a 	ret

08004434 <udivmodsi4>:
 8004434:	2900182e 	bgeu	r5,r4,8004498 <udivmodsi4+0x64>
 8004438:	28001716 	blt	r5,zero,8004498 <udivmodsi4+0x64>
 800443c:	00800804 	movi	r2,32
 8004440:	00c00044 	movi	r3,1
 8004444:	00000206 	br	8004450 <udivmodsi4+0x1c>
 8004448:	10001126 	beq	r2,zero,8004490 <udivmodsi4+0x5c>
 800444c:	28000516 	blt	r5,zero,8004464 <udivmodsi4+0x30>
 8004450:	294b883a 	add	r5,r5,r5
 8004454:	10bfffc4 	addi	r2,r2,-1
 8004458:	18c7883a 	add	r3,r3,r3
 800445c:	293ffa36 	bltu	r5,r4,8004448 <__alt_data_end+0xfc004448>
 8004460:	18000b26 	beq	r3,zero,8004490 <udivmodsi4+0x5c>
 8004464:	0005883a 	mov	r2,zero
 8004468:	21400236 	bltu	r4,r5,8004474 <udivmodsi4+0x40>
 800446c:	2149c83a 	sub	r4,r4,r5
 8004470:	10c4b03a 	or	r2,r2,r3
 8004474:	1806d07a 	srli	r3,r3,1
 8004478:	280ad07a 	srli	r5,r5,1
 800447c:	183ffa1e 	bne	r3,zero,8004468 <__alt_data_end+0xfc004468>
 8004480:	3000011e 	bne	r6,zero,8004488 <udivmodsi4+0x54>
 8004484:	f800283a 	ret
 8004488:	2005883a 	mov	r2,r4
 800448c:	f800283a 	ret
 8004490:	0005883a 	mov	r2,zero
 8004494:	003ffa06 	br	8004480 <__alt_data_end+0xfc004480>
 8004498:	00c00044 	movi	r3,1
 800449c:	003ff106 	br	8004464 <__alt_data_end+0xfc004464>

080044a0 <__divsi3>:
 80044a0:	defffe04 	addi	sp,sp,-8
 80044a4:	dfc00115 	stw	ra,4(sp)
 80044a8:	dc000015 	stw	r16,0(sp)
 80044ac:	20000b16 	blt	r4,zero,80044dc <__divsi3+0x3c>
 80044b0:	0021883a 	mov	r16,zero
 80044b4:	28000c16 	blt	r5,zero,80044e8 <__divsi3+0x48>
 80044b8:	000d883a 	mov	r6,zero
 80044bc:	80044340 	call	8004434 <udivmodsi4>
 80044c0:	0407c83a 	sub	r3,zero,r16
 80044c4:	1884f03a 	xor	r2,r3,r2
 80044c8:	1405883a 	add	r2,r2,r16
 80044cc:	dfc00117 	ldw	ra,4(sp)
 80044d0:	dc000017 	ldw	r16,0(sp)
 80044d4:	dec00204 	addi	sp,sp,8
 80044d8:	f800283a 	ret
 80044dc:	0109c83a 	sub	r4,zero,r4
 80044e0:	04000044 	movi	r16,1
 80044e4:	283ff40e 	bge	r5,zero,80044b8 <__alt_data_end+0xfc0044b8>
 80044e8:	014bc83a 	sub	r5,zero,r5
 80044ec:	8400005c 	xori	r16,r16,1
 80044f0:	003ff106 	br	80044b8 <__alt_data_end+0xfc0044b8>

080044f4 <__modsi3>:
 80044f4:	defffd04 	addi	sp,sp,-12
 80044f8:	dfc00215 	stw	ra,8(sp)
 80044fc:	dc400115 	stw	r17,4(sp)
 8004500:	dc000015 	stw	r16,0(sp)
 8004504:	20000c16 	blt	r4,zero,8004538 <__modsi3+0x44>
 8004508:	0023883a 	mov	r17,zero
 800450c:	0021883a 	mov	r16,zero
 8004510:	28000d16 	blt	r5,zero,8004548 <__modsi3+0x54>
 8004514:	01800044 	movi	r6,1
 8004518:	80044340 	call	8004434 <udivmodsi4>
 800451c:	1404f03a 	xor	r2,r2,r16
 8004520:	8885883a 	add	r2,r17,r2
 8004524:	dfc00217 	ldw	ra,8(sp)
 8004528:	dc400117 	ldw	r17,4(sp)
 800452c:	dc000017 	ldw	r16,0(sp)
 8004530:	dec00304 	addi	sp,sp,12
 8004534:	f800283a 	ret
 8004538:	0109c83a 	sub	r4,zero,r4
 800453c:	04400044 	movi	r17,1
 8004540:	043fffc4 	movi	r16,-1
 8004544:	283ff30e 	bge	r5,zero,8004514 <__alt_data_end+0xfc004514>
 8004548:	014bc83a 	sub	r5,zero,r5
 800454c:	003ff106 	br	8004514 <__alt_data_end+0xfc004514>

08004550 <__udivsi3>:
 8004550:	000d883a 	mov	r6,zero
 8004554:	80044341 	jmpi	8004434 <udivmodsi4>

08004558 <__umodsi3>:
 8004558:	01800044 	movi	r6,1
 800455c:	80044341 	jmpi	8004434 <udivmodsi4>

08004560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004560:	defffe04 	addi	sp,sp,-8
 8004564:	dfc00115 	stw	ra,4(sp)
 8004568:	df000015 	stw	fp,0(sp)
 800456c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004570:	00820034 	movhi	r2,2048
 8004574:	109f1304 	addi	r2,r2,31820
 8004578:	10800017 	ldw	r2,0(r2)
 800457c:	10000526 	beq	r2,zero,8004594 <alt_get_errno+0x34>
 8004580:	00820034 	movhi	r2,2048
 8004584:	109f1304 	addi	r2,r2,31820
 8004588:	10800017 	ldw	r2,0(r2)
 800458c:	103ee83a 	callr	r2
 8004590:	00000206 	br	800459c <alt_get_errno+0x3c>
 8004594:	00820074 	movhi	r2,2049
 8004598:	10a14404 	addi	r2,r2,-31472
}
 800459c:	e037883a 	mov	sp,fp
 80045a0:	dfc00117 	ldw	ra,4(sp)
 80045a4:	df000017 	ldw	fp,0(sp)
 80045a8:	dec00204 	addi	sp,sp,8
 80045ac:	f800283a 	ret

080045b0 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 80045b0:	defffc04 	addi	sp,sp,-16
 80045b4:	dfc00315 	stw	ra,12(sp)
 80045b8:	df000215 	stw	fp,8(sp)
 80045bc:	df000204 	addi	fp,sp,8
 80045c0:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 80045c4:	e13fff17 	ldw	r4,-4(fp)
 80045c8:	d1601604 	addi	r5,gp,-32680
 80045cc:	80046380 	call	8004638 <alt_find_dev>
 80045d0:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 80045d4:	e0bffe17 	ldw	r2,-8(fp)
 80045d8:	1000041e 	bne	r2,zero,80045ec <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 80045dc:	80045600 	call	8004560 <alt_get_errno>
 80045e0:	1007883a 	mov	r3,r2
 80045e4:	008004c4 	movi	r2,19
 80045e8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80045ec:	e0bffe17 	ldw	r2,-8(fp)
}
 80045f0:	e037883a 	mov	sp,fp
 80045f4:	dfc00117 	ldw	ra,4(sp)
 80045f8:	df000017 	ldw	fp,0(sp)
 80045fc:	dec00204 	addi	sp,sp,8
 8004600:	f800283a 	ret

08004604 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8004604:	defffd04 	addi	sp,sp,-12
 8004608:	df000215 	stw	fp,8(sp)
 800460c:	df000204 	addi	fp,sp,8
 8004610:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8004614:	0001883a 	nop
 8004618:	e0bfff17 	ldw	r2,-4(fp)
 800461c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8004620:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8004624:	10000226 	beq	r2,zero,8004630 <_exit+0x2c>
    ALT_SIM_FAIL();
 8004628:	002af070 	cmpltui	zero,zero,43969
 800462c:	00000106 	br	8004634 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8004630:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8004634:	003fff06 	br	8004634 <__alt_data_end+0xfc004634>

08004638 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004638:	defffa04 	addi	sp,sp,-24
 800463c:	dfc00515 	stw	ra,20(sp)
 8004640:	df000415 	stw	fp,16(sp)
 8004644:	df000404 	addi	fp,sp,16
 8004648:	e13ffe15 	stw	r4,-8(fp)
 800464c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004650:	e0bfff17 	ldw	r2,-4(fp)
 8004654:	10800017 	ldw	r2,0(r2)
 8004658:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800465c:	e13ffe17 	ldw	r4,-8(fp)
 8004660:	80037d00 	call	80037d0 <strlen>
 8004664:	10800044 	addi	r2,r2,1
 8004668:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800466c:	00000d06 	br	80046a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004670:	e0bffc17 	ldw	r2,-16(fp)
 8004674:	10c00217 	ldw	r3,8(r2)
 8004678:	e0bffd17 	ldw	r2,-12(fp)
 800467c:	1809883a 	mov	r4,r3
 8004680:	e17ffe17 	ldw	r5,-8(fp)
 8004684:	100d883a 	mov	r6,r2
 8004688:	8006d840 	call	8006d84 <memcmp>
 800468c:	1000021e 	bne	r2,zero,8004698 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004690:	e0bffc17 	ldw	r2,-16(fp)
 8004694:	00000706 	br	80046b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004698:	e0bffc17 	ldw	r2,-16(fp)
 800469c:	10800017 	ldw	r2,0(r2)
 80046a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80046a4:	e0fffc17 	ldw	r3,-16(fp)
 80046a8:	e0bfff17 	ldw	r2,-4(fp)
 80046ac:	18bff01e 	bne	r3,r2,8004670 <__alt_data_end+0xfc004670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80046b0:	0005883a 	mov	r2,zero
}
 80046b4:	e037883a 	mov	sp,fp
 80046b8:	dfc00117 	ldw	ra,4(sp)
 80046bc:	df000017 	ldw	fp,0(sp)
 80046c0:	dec00204 	addi	sp,sp,8
 80046c4:	f800283a 	ret

080046c8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 80046c8:	deffff04 	addi	sp,sp,-4
 80046cc:	df000015 	stw	fp,0(sp)
 80046d0:	d839883a 	mov	fp,sp
  return 0;
 80046d4:	0005883a 	mov	r2,zero
}
 80046d8:	e037883a 	mov	sp,fp
 80046dc:	df000017 	ldw	fp,0(sp)
 80046e0:	dec00104 	addi	sp,sp,4
 80046e4:	f800283a 	ret

080046e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80046e8:	defffe04 	addi	sp,sp,-8
 80046ec:	dfc00115 	stw	ra,4(sp)
 80046f0:	df000015 	stw	fp,0(sp)
 80046f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80046f8:	00820034 	movhi	r2,2048
 80046fc:	109f1304 	addi	r2,r2,31820
 8004700:	10800017 	ldw	r2,0(r2)
 8004704:	10000526 	beq	r2,zero,800471c <alt_get_errno+0x34>
 8004708:	00820034 	movhi	r2,2048
 800470c:	109f1304 	addi	r2,r2,31820
 8004710:	10800017 	ldw	r2,0(r2)
 8004714:	103ee83a 	callr	r2
 8004718:	00000206 	br	8004724 <alt_get_errno+0x3c>
 800471c:	00820074 	movhi	r2,2049
 8004720:	10a14404 	addi	r2,r2,-31472
}
 8004724:	e037883a 	mov	sp,fp
 8004728:	dfc00117 	ldw	ra,4(sp)
 800472c:	df000017 	ldw	fp,0(sp)
 8004730:	dec00204 	addi	sp,sp,8
 8004734:	f800283a 	ret

08004738 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8004738:	defffb04 	addi	sp,sp,-20
 800473c:	dfc00415 	stw	ra,16(sp)
 8004740:	df000315 	stw	fp,12(sp)
 8004744:	df000304 	addi	fp,sp,12
 8004748:	e13ffe15 	stw	r4,-8(fp)
 800474c:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 8004750:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 8004754:	e0bffe17 	ldw	r2,-8(fp)
 8004758:	00803116 	blt	zero,r2,8004820 <kill+0xe8>
  {
    switch (sig)
 800475c:	e0bfff17 	ldw	r2,-4(fp)
 8004760:	10800828 	cmpgeui	r2,r2,32
 8004764:	1000291e 	bne	r2,zero,800480c <kill+0xd4>
 8004768:	e0bfff17 	ldw	r2,-4(fp)
 800476c:	100690ba 	slli	r3,r2,2
 8004770:	00820034 	movhi	r2,2048
 8004774:	1091e104 	addi	r2,r2,18308
 8004778:	1885883a 	add	r2,r3,r2
 800477c:	10800017 	ldw	r2,0(r2)
 8004780:	1000683a 	jmp	r2
 8004784:	08004818 	cmpnei	zero,at,288
 8004788:	0800480c 	andi	zero,at,288
 800478c:	0800480c 	andi	zero,at,288
 8004790:	08004804 	addi	zero,at,288
 8004794:	08004804 	addi	zero,at,288
 8004798:	08004804 	addi	zero,at,288
 800479c:	08004804 	addi	zero,at,288
 80047a0:	0800480c 	andi	zero,at,288
 80047a4:	08004804 	addi	zero,at,288
 80047a8:	08004804 	addi	zero,at,288
 80047ac:	08004804 	addi	zero,at,288
 80047b0:	08004804 	addi	zero,at,288
 80047b4:	08004804 	addi	zero,at,288
 80047b8:	08004804 	addi	zero,at,288
 80047bc:	08004804 	addi	zero,at,288
 80047c0:	08004804 	addi	zero,at,288
 80047c4:	08004818 	cmpnei	zero,at,288
 80047c8:	0800480c 	andi	zero,at,288
 80047cc:	0800480c 	andi	zero,at,288
 80047d0:	0800480c 	andi	zero,at,288
 80047d4:	08004818 	cmpnei	zero,at,288
 80047d8:	0800480c 	andi	zero,at,288
 80047dc:	0800480c 	andi	zero,at,288
 80047e0:	08004804 	addi	zero,at,288
 80047e4:	08004804 	addi	zero,at,288
 80047e8:	08004804 	addi	zero,at,288
 80047ec:	08004804 	addi	zero,at,288
 80047f0:	08004804 	addi	zero,at,288
 80047f4:	0800480c 	andi	zero,at,288
 80047f8:	0800480c 	andi	zero,at,288
 80047fc:	08004804 	addi	zero,at,288
 8004800:	08004804 	addi	zero,at,288
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 8004804:	0009883a 	mov	r4,zero
 8004808:	80046040 	call	8004604 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 800480c:	00800584 	movi	r2,22
 8004810:	e0bffd15 	stw	r2,-12(fp)
 8004814:	00000606 	br	8004830 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 8004818:	0001883a 	nop
 800481c:	00000406 	br	8004830 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
 8004820:	e0bffe17 	ldw	r2,-8(fp)
 8004824:	0080020e 	bge	zero,r2,8004830 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8004828:	008000c4 	movi	r2,3
 800482c:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
 8004830:	e0bffd17 	ldw	r2,-12(fp)
 8004834:	10000626 	beq	r2,zero,8004850 <kill+0x118>
  {
    ALT_ERRNO = status;
 8004838:	80046e80 	call	80046e8 <alt_get_errno>
 800483c:	1007883a 	mov	r3,r2
 8004840:	e0bffd17 	ldw	r2,-12(fp)
 8004844:	18800015 	stw	r2,0(r3)
    return -1;
 8004848:	00bfffc4 	movi	r2,-1
 800484c:	00000106 	br	8004854 <kill+0x11c>
  }

  return 0;
 8004850:	0005883a 	mov	r2,zero
}
 8004854:	e037883a 	mov	sp,fp
 8004858:	dfc00117 	ldw	ra,4(sp)
 800485c:	df000017 	ldw	fp,0(sp)
 8004860:	dec00204 	addi	sp,sp,8
 8004864:	f800283a 	ret

08004868 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8004868:	defffc04 	addi	sp,sp,-16
 800486c:	df000315 	stw	fp,12(sp)
 8004870:	df000304 	addi	fp,sp,12
 8004874:	e13ffd15 	stw	r4,-12(fp)
 8004878:	e17ffe15 	stw	r5,-8(fp)
 800487c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8004880:	e0fffe17 	ldw	r3,-8(fp)
 8004884:	e0bffd17 	ldw	r2,-12(fp)
 8004888:	18800c26 	beq	r3,r2,80048bc <alt_load_section+0x54>
  {
    while( to != end )
 800488c:	00000806 	br	80048b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8004890:	e0bffe17 	ldw	r2,-8(fp)
 8004894:	10c00104 	addi	r3,r2,4
 8004898:	e0fffe15 	stw	r3,-8(fp)
 800489c:	e0fffd17 	ldw	r3,-12(fp)
 80048a0:	19000104 	addi	r4,r3,4
 80048a4:	e13ffd15 	stw	r4,-12(fp)
 80048a8:	18c00017 	ldw	r3,0(r3)
 80048ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80048b0:	e0fffe17 	ldw	r3,-8(fp)
 80048b4:	e0bfff17 	ldw	r2,-4(fp)
 80048b8:	18bff51e 	bne	r3,r2,8004890 <__alt_data_end+0xfc004890>
    {
      *to++ = *from++;
    }
  }
}
 80048bc:	e037883a 	mov	sp,fp
 80048c0:	df000017 	ldw	fp,0(sp)
 80048c4:	dec00104 	addi	sp,sp,4
 80048c8:	f800283a 	ret

080048cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80048cc:	defffe04 	addi	sp,sp,-8
 80048d0:	dfc00115 	stw	ra,4(sp)
 80048d4:	df000015 	stw	fp,0(sp)
 80048d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80048dc:	01020034 	movhi	r4,2048
 80048e0:	211f1d04 	addi	r4,r4,31860
 80048e4:	01420034 	movhi	r5,2048
 80048e8:	295cff04 	addi	r5,r5,29692
 80048ec:	01820034 	movhi	r6,2048
 80048f0:	319f1d04 	addi	r6,r6,31860
 80048f4:	80048680 	call	8004868 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80048f8:	01020034 	movhi	r4,2048
 80048fc:	21000804 	addi	r4,r4,32
 8004900:	01420034 	movhi	r5,2048
 8004904:	29400804 	addi	r5,r5,32
 8004908:	01820034 	movhi	r6,2048
 800490c:	31808c04 	addi	r6,r6,560
 8004910:	80048680 	call	8004868 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8004914:	01020034 	movhi	r4,2048
 8004918:	211bf904 	addi	r4,r4,28644
 800491c:	01420034 	movhi	r5,2048
 8004920:	295bf904 	addi	r5,r5,28644
 8004924:	01820034 	movhi	r6,2048
 8004928:	319cff04 	addi	r6,r6,29692
 800492c:	80048680 	call	8004868 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8004930:	80061ec0 	call	80061ec <alt_dcache_flush_all>
  alt_icache_flush_all();
 8004934:	80064840 	call	8006484 <alt_icache_flush_all>
}
 8004938:	e037883a 	mov	sp,fp
 800493c:	dfc00117 	ldw	ra,4(sp)
 8004940:	df000017 	ldw	fp,0(sp)
 8004944:	dec00204 	addi	sp,sp,8
 8004948:	f800283a 	ret

0800494c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800494c:	defffd04 	addi	sp,sp,-12
 8004950:	dfc00215 	stw	ra,8(sp)
 8004954:	df000115 	stw	fp,4(sp)
 8004958:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800495c:	0009883a 	mov	r4,zero
 8004960:	8004ea80 	call	8004ea8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8004964:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8004968:	8004edc0 	call	8004edc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800496c:	01020034 	movhi	r4,2048
 8004970:	211ce104 	addi	r4,r4,29572
 8004974:	01420034 	movhi	r5,2048
 8004978:	295ce104 	addi	r5,r5,29572
 800497c:	01820034 	movhi	r6,2048
 8004980:	319ce104 	addi	r6,r6,29572
 8004984:	80065800 	call	8006580 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8004988:	80063cc0 	call	80063cc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800498c:	01020034 	movhi	r4,2048
 8004990:	21190a04 	addi	r4,r4,25640
 8004994:	8006d700 	call	8006d70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004998:	d1224a17 	ldw	r4,-30424(gp)
 800499c:	d0e24b17 	ldw	r3,-30420(gp)
 80049a0:	d0a24c17 	ldw	r2,-30416(gp)
 80049a4:	180b883a 	mov	r5,r3
 80049a8:	100d883a 	mov	r6,r2
 80049ac:	8000a340 	call	8000a34 <main>
 80049b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80049b4:	01000044 	movi	r4,1
 80049b8:	80061140 	call	8006114 <close>
  exit (result);
 80049bc:	e13fff17 	ldw	r4,-4(fp)
 80049c0:	8002c580 	call	8002c58 <exit>

080049c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80049c4:	defffe04 	addi	sp,sp,-8
 80049c8:	df000115 	stw	fp,4(sp)
 80049cc:	df000104 	addi	fp,sp,4
 80049d0:	e13fff15 	stw	r4,-4(fp)
}
 80049d4:	e037883a 	mov	sp,fp
 80049d8:	df000017 	ldw	fp,0(sp)
 80049dc:	dec00104 	addi	sp,sp,4
 80049e0:	f800283a 	ret

080049e4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80049e4:	defffe04 	addi	sp,sp,-8
 80049e8:	df000115 	stw	fp,4(sp)
 80049ec:	df000104 	addi	fp,sp,4
 80049f0:	e13fff15 	stw	r4,-4(fp)
}
 80049f4:	e037883a 	mov	sp,fp
 80049f8:	df000017 	ldw	fp,0(sp)
 80049fc:	dec00104 	addi	sp,sp,4
 8004a00:	f800283a 	ret

08004a04 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8004a04:	defff204 	addi	sp,sp,-56
 8004a08:	dfc00a15 	stw	ra,40(sp)
 8004a0c:	df000915 	stw	fp,36(sp)
 8004a10:	df000904 	addi	fp,sp,36
 8004a14:	e1400215 	stw	r5,8(fp)
 8004a18:	e1800315 	stw	r6,12(fp)
 8004a1c:	e1c00415 	stw	r7,16(fp)
 8004a20:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 8004a24:	e0800204 	addi	r2,fp,8
 8004a28:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8004a2c:	e0bfff17 	ldw	r2,-4(fp)
 8004a30:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8004a34:	00007106 	br	8004bfc <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8004a38:	e0bff807 	ldb	r2,-32(fp)
 8004a3c:	10800960 	cmpeqi	r2,r2,37
 8004a40:	1000041e 	bne	r2,zero,8004a54 <alt_printf+0x50>
        {
            alt_putchar(c);
 8004a44:	e0bff807 	ldb	r2,-32(fp)
 8004a48:	1009883a 	mov	r4,r2
 8004a4c:	8004c2c0 	call	8004c2c <alt_putchar>
 8004a50:	00006a06 	br	8004bfc <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8004a54:	e0bff717 	ldw	r2,-36(fp)
 8004a58:	10c00044 	addi	r3,r2,1
 8004a5c:	e0fff715 	stw	r3,-36(fp)
 8004a60:	10800003 	ldbu	r2,0(r2)
 8004a64:	e0bff805 	stb	r2,-32(fp)
 8004a68:	e0bff807 	ldb	r2,-32(fp)
 8004a6c:	10006226 	beq	r2,zero,8004bf8 <alt_printf+0x1f4>
            {
                if (c == '%')
 8004a70:	e0bff807 	ldb	r2,-32(fp)
 8004a74:	10800958 	cmpnei	r2,r2,37
 8004a78:	1000041e 	bne	r2,zero,8004a8c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8004a7c:	e0bff807 	ldb	r2,-32(fp)
 8004a80:	1009883a 	mov	r4,r2
 8004a84:	8004c2c0 	call	8004c2c <alt_putchar>
 8004a88:	00005c06 	br	8004bfc <alt_printf+0x1f8>
                } 
                else if (c == 'c')
 8004a8c:	e0bff807 	ldb	r2,-32(fp)
 8004a90:	108018d8 	cmpnei	r2,r2,99
 8004a94:	1000081e 	bne	r2,zero,8004ab8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8004a98:	e0bffe17 	ldw	r2,-8(fp)
 8004a9c:	10c00104 	addi	r3,r2,4
 8004aa0:	e0fffe15 	stw	r3,-8(fp)
 8004aa4:	10800017 	ldw	r2,0(r2)
 8004aa8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8004aac:	e13ffd17 	ldw	r4,-12(fp)
 8004ab0:	8004c2c0 	call	8004c2c <alt_putchar>
 8004ab4:	00005106 	br	8004bfc <alt_printf+0x1f8>
                }
                else if (c == 'x')
 8004ab8:	e0bff807 	ldb	r2,-32(fp)
 8004abc:	10801e18 	cmpnei	r2,r2,120
 8004ac0:	1000341e 	bne	r2,zero,8004b94 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8004ac4:	e0bffe17 	ldw	r2,-8(fp)
 8004ac8:	10c00104 	addi	r3,r2,4
 8004acc:	e0fffe15 	stw	r3,-8(fp)
 8004ad0:	10800017 	ldw	r2,0(r2)
 8004ad4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8004ad8:	e0bffb17 	ldw	r2,-20(fp)
 8004adc:	1000031e 	bne	r2,zero,8004aec <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8004ae0:	01000c04 	movi	r4,48
 8004ae4:	8004c2c0 	call	8004c2c <alt_putchar>
                        continue;
 8004ae8:	00004406 	br	8004bfc <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8004aec:	00800704 	movi	r2,28
 8004af0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8004af4:	00000306 	br	8004b04 <alt_printf+0x100>
                        digit_shift -= 4;
 8004af8:	e0bff917 	ldw	r2,-28(fp)
 8004afc:	10bfff04 	addi	r2,r2,-4
 8004b00:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8004b04:	00c003c4 	movi	r3,15
 8004b08:	e0bff917 	ldw	r2,-28(fp)
 8004b0c:	1884983a 	sll	r2,r3,r2
 8004b10:	1007883a 	mov	r3,r2
 8004b14:	e0bffb17 	ldw	r2,-20(fp)
 8004b18:	1884703a 	and	r2,r3,r2
 8004b1c:	103ff626 	beq	r2,zero,8004af8 <__alt_data_end+0xfc004af8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8004b20:	00001906 	br	8004b88 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8004b24:	00c003c4 	movi	r3,15
 8004b28:	e0bff917 	ldw	r2,-28(fp)
 8004b2c:	1884983a 	sll	r2,r3,r2
 8004b30:	1007883a 	mov	r3,r2
 8004b34:	e0bffb17 	ldw	r2,-20(fp)
 8004b38:	1886703a 	and	r3,r3,r2
 8004b3c:	e0bff917 	ldw	r2,-28(fp)
 8004b40:	1884d83a 	srl	r2,r3,r2
 8004b44:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8004b48:	e0bffc17 	ldw	r2,-16(fp)
 8004b4c:	108002a8 	cmpgeui	r2,r2,10
 8004b50:	1000041e 	bne	r2,zero,8004b64 <alt_printf+0x160>
                            c = '0' + digit;
 8004b54:	e0bffc17 	ldw	r2,-16(fp)
 8004b58:	10800c04 	addi	r2,r2,48
 8004b5c:	e0bff805 	stb	r2,-32(fp)
 8004b60:	00000306 	br	8004b70 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8004b64:	e0bffc17 	ldw	r2,-16(fp)
 8004b68:	108015c4 	addi	r2,r2,87
 8004b6c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8004b70:	e0bff807 	ldb	r2,-32(fp)
 8004b74:	1009883a 	mov	r4,r2
 8004b78:	8004c2c0 	call	8004c2c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8004b7c:	e0bff917 	ldw	r2,-28(fp)
 8004b80:	10bfff04 	addi	r2,r2,-4
 8004b84:	e0bff915 	stw	r2,-28(fp)
 8004b88:	e0bff917 	ldw	r2,-28(fp)
 8004b8c:	103fe50e 	bge	r2,zero,8004b24 <__alt_data_end+0xfc004b24>
 8004b90:	00001a06 	br	8004bfc <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8004b94:	e0bff807 	ldb	r2,-32(fp)
 8004b98:	10801cd8 	cmpnei	r2,r2,115
 8004b9c:	1000151e 	bne	r2,zero,8004bf4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8004ba0:	e0bffe17 	ldw	r2,-8(fp)
 8004ba4:	10c00104 	addi	r3,r2,4
 8004ba8:	e0fffe15 	stw	r3,-8(fp)
 8004bac:	10800017 	ldw	r2,0(r2)
 8004bb0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8004bb4:	00000906 	br	8004bdc <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8004bb8:	e0bffa17 	ldw	r2,-24(fp)
 8004bbc:	10c00044 	addi	r3,r2,1
 8004bc0:	e0fffa15 	stw	r3,-24(fp)
 8004bc4:	10800003 	ldbu	r2,0(r2)
 8004bc8:	10803fcc 	andi	r2,r2,255
 8004bcc:	1080201c 	xori	r2,r2,128
 8004bd0:	10bfe004 	addi	r2,r2,-128
 8004bd4:	1009883a 	mov	r4,r2
 8004bd8:	8004c2c0 	call	8004c2c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8004bdc:	e0bffa17 	ldw	r2,-24(fp)
 8004be0:	10800003 	ldbu	r2,0(r2)
 8004be4:	10803fcc 	andi	r2,r2,255
 8004be8:	1080201c 	xori	r2,r2,128
 8004bec:	10bfe004 	addi	r2,r2,-128
 8004bf0:	103ff11e 	bne	r2,zero,8004bb8 <__alt_data_end+0xfc004bb8>
 8004bf4:	00000106 	br	8004bfc <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8004bf8:	00000706 	br	8004c18 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8004bfc:	e0bff717 	ldw	r2,-36(fp)
 8004c00:	10c00044 	addi	r3,r2,1
 8004c04:	e0fff715 	stw	r3,-36(fp)
 8004c08:	10800003 	ldbu	r2,0(r2)
 8004c0c:	e0bff805 	stb	r2,-32(fp)
 8004c10:	e0bff807 	ldb	r2,-32(fp)
 8004c14:	103f881e 	bne	r2,zero,8004a38 <__alt_data_end+0xfc004a38>
            {
                break;
            }
        }
    }
}
 8004c18:	e037883a 	mov	sp,fp
 8004c1c:	dfc00117 	ldw	ra,4(sp)
 8004c20:	df000017 	ldw	fp,0(sp)
 8004c24:	dec00504 	addi	sp,sp,20
 8004c28:	f800283a 	ret

08004c2c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8004c2c:	defffd04 	addi	sp,sp,-12
 8004c30:	dfc00215 	stw	ra,8(sp)
 8004c34:	df000115 	stw	fp,4(sp)
 8004c38:	df000104 	addi	fp,sp,4
 8004c3c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8004c40:	00820034 	movhi	r2,2048
 8004c44:	109f1004 	addi	r2,r2,31808
 8004c48:	10800017 	ldw	r2,0(r2)
 8004c4c:	10800217 	ldw	r2,8(r2)
 8004c50:	e13fff17 	ldw	r4,-4(fp)
 8004c54:	100b883a 	mov	r5,r2
 8004c58:	8006db40 	call	8006db4 <putc>
#endif
}
 8004c5c:	e037883a 	mov	sp,fp
 8004c60:	dfc00117 	ldw	ra,4(sp)
 8004c64:	df000017 	ldw	fp,0(sp)
 8004c68:	dec00204 	addi	sp,sp,8
 8004c6c:	f800283a 	ret

08004c70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8004c70:	defff904 	addi	sp,sp,-28
 8004c74:	df000615 	stw	fp,24(sp)
 8004c78:	df000604 	addi	fp,sp,24
 8004c7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c80:	0005303a 	rdctl	r2,status
 8004c84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c88:	e0fffc17 	ldw	r3,-16(fp)
 8004c8c:	00bfff84 	movi	r2,-2
 8004c90:	1884703a 	and	r2,r3,r2
 8004c94:	1001703a 	wrctl	status,r2
  
  return context;
 8004c98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8004c9c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8004ca0:	d0a01917 	ldw	r2,-32668(gp)
 8004ca4:	10c000c4 	addi	r3,r2,3
 8004ca8:	00bfff04 	movi	r2,-4
 8004cac:	1884703a 	and	r2,r3,r2
 8004cb0:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8004cb4:	d0e01917 	ldw	r3,-32668(gp)
 8004cb8:	e0bfff17 	ldw	r2,-4(fp)
 8004cbc:	1887883a 	add	r3,r3,r2
 8004cc0:	00830034 	movhi	r2,3072
 8004cc4:	10800004 	addi	r2,r2,0
 8004cc8:	10c0062e 	bgeu	r2,r3,8004ce4 <sbrk+0x74>
 8004ccc:	e0bffa17 	ldw	r2,-24(fp)
 8004cd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004cd4:	e0bffd17 	ldw	r2,-12(fp)
 8004cd8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8004cdc:	00bfffc4 	movi	r2,-1
 8004ce0:	00000b06 	br	8004d10 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8004ce4:	d0a01917 	ldw	r2,-32668(gp)
 8004ce8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8004cec:	d0e01917 	ldw	r3,-32668(gp)
 8004cf0:	e0bfff17 	ldw	r2,-4(fp)
 8004cf4:	1885883a 	add	r2,r3,r2
 8004cf8:	d0a01915 	stw	r2,-32668(gp)
 8004cfc:	e0bffa17 	ldw	r2,-24(fp)
 8004d00:	e0bffe15 	stw	r2,-8(fp)
 8004d04:	e0bffe17 	ldw	r2,-8(fp)
 8004d08:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8004d0c:	e0bffb17 	ldw	r2,-20(fp)
} 
 8004d10:	e037883a 	mov	sp,fp
 8004d14:	df000017 	ldw	fp,0(sp)
 8004d18:	dec00104 	addi	sp,sp,4
 8004d1c:	f800283a 	ret

08004d20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004d20:	defffe04 	addi	sp,sp,-8
 8004d24:	dfc00115 	stw	ra,4(sp)
 8004d28:	df000015 	stw	fp,0(sp)
 8004d2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d30:	00820034 	movhi	r2,2048
 8004d34:	109f1304 	addi	r2,r2,31820
 8004d38:	10800017 	ldw	r2,0(r2)
 8004d3c:	10000526 	beq	r2,zero,8004d54 <alt_get_errno+0x34>
 8004d40:	00820034 	movhi	r2,2048
 8004d44:	109f1304 	addi	r2,r2,31820
 8004d48:	10800017 	ldw	r2,0(r2)
 8004d4c:	103ee83a 	callr	r2
 8004d50:	00000206 	br	8004d5c <alt_get_errno+0x3c>
 8004d54:	00820074 	movhi	r2,2049
 8004d58:	10a14404 	addi	r2,r2,-31472
}
 8004d5c:	e037883a 	mov	sp,fp
 8004d60:	dfc00117 	ldw	ra,4(sp)
 8004d64:	df000017 	ldw	fp,0(sp)
 8004d68:	dec00204 	addi	sp,sp,8
 8004d6c:	f800283a 	ret

08004d70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004d70:	defff904 	addi	sp,sp,-28
 8004d74:	dfc00615 	stw	ra,24(sp)
 8004d78:	df000515 	stw	fp,20(sp)
 8004d7c:	df000504 	addi	fp,sp,20
 8004d80:	e13ffd15 	stw	r4,-12(fp)
 8004d84:	e17ffe15 	stw	r5,-8(fp)
 8004d88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004d8c:	e0bffd17 	ldw	r2,-12(fp)
 8004d90:	10000816 	blt	r2,zero,8004db4 <write+0x44>
 8004d94:	e13ffd17 	ldw	r4,-12(fp)
 8004d98:	01400304 	movi	r5,12
 8004d9c:	80026f80 	call	80026f8 <__mulsi3>
 8004da0:	1007883a 	mov	r3,r2
 8004da4:	00820034 	movhi	r2,2048
 8004da8:	109e9b04 	addi	r2,r2,31340
 8004dac:	1885883a 	add	r2,r3,r2
 8004db0:	00000106 	br	8004db8 <write+0x48>
 8004db4:	0005883a 	mov	r2,zero
 8004db8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004dbc:	e0bffb17 	ldw	r2,-20(fp)
 8004dc0:	10002126 	beq	r2,zero,8004e48 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004dc4:	e0bffb17 	ldw	r2,-20(fp)
 8004dc8:	10800217 	ldw	r2,8(r2)
 8004dcc:	108000cc 	andi	r2,r2,3
 8004dd0:	10001826 	beq	r2,zero,8004e34 <write+0xc4>
 8004dd4:	e0bffb17 	ldw	r2,-20(fp)
 8004dd8:	10800017 	ldw	r2,0(r2)
 8004ddc:	10800617 	ldw	r2,24(r2)
 8004de0:	10001426 	beq	r2,zero,8004e34 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004de4:	e0bffb17 	ldw	r2,-20(fp)
 8004de8:	10800017 	ldw	r2,0(r2)
 8004dec:	10800617 	ldw	r2,24(r2)
 8004df0:	e0ffff17 	ldw	r3,-4(fp)
 8004df4:	e13ffb17 	ldw	r4,-20(fp)
 8004df8:	e17ffe17 	ldw	r5,-8(fp)
 8004dfc:	180d883a 	mov	r6,r3
 8004e00:	103ee83a 	callr	r2
 8004e04:	e0bffc15 	stw	r2,-16(fp)
 8004e08:	e0bffc17 	ldw	r2,-16(fp)
 8004e0c:	1000070e 	bge	r2,zero,8004e2c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8004e10:	8004d200 	call	8004d20 <alt_get_errno>
 8004e14:	1007883a 	mov	r3,r2
 8004e18:	e0bffc17 	ldw	r2,-16(fp)
 8004e1c:	0085c83a 	sub	r2,zero,r2
 8004e20:	18800015 	stw	r2,0(r3)
        return -1;
 8004e24:	00bfffc4 	movi	r2,-1
 8004e28:	00000c06 	br	8004e5c <write+0xec>
      }
      return rval;
 8004e2c:	e0bffc17 	ldw	r2,-16(fp)
 8004e30:	00000a06 	br	8004e5c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004e34:	8004d200 	call	8004d20 <alt_get_errno>
 8004e38:	1007883a 	mov	r3,r2
 8004e3c:	00800344 	movi	r2,13
 8004e40:	18800015 	stw	r2,0(r3)
 8004e44:	00000406 	br	8004e58 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004e48:	8004d200 	call	8004d20 <alt_get_errno>
 8004e4c:	1007883a 	mov	r3,r2
 8004e50:	00801444 	movi	r2,81
 8004e54:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004e58:	00bfffc4 	movi	r2,-1
}
 8004e5c:	e037883a 	mov	sp,fp
 8004e60:	dfc00117 	ldw	ra,4(sp)
 8004e64:	df000017 	ldw	fp,0(sp)
 8004e68:	dec00204 	addi	sp,sp,8
 8004e6c:	f800283a 	ret

08004e70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004e70:	defffd04 	addi	sp,sp,-12
 8004e74:	dfc00215 	stw	ra,8(sp)
 8004e78:	df000115 	stw	fp,4(sp)
 8004e7c:	df000104 	addi	fp,sp,4
 8004e80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004e84:	e13fff17 	ldw	r4,-4(fp)
 8004e88:	01420034 	movhi	r5,2048
 8004e8c:	295f1704 	addi	r5,r5,31836
 8004e90:	80062840 	call	8006284 <alt_dev_llist_insert>
}
 8004e94:	e037883a 	mov	sp,fp
 8004e98:	dfc00117 	ldw	ra,4(sp)
 8004e9c:	df000017 	ldw	fp,0(sp)
 8004ea0:	dec00204 	addi	sp,sp,8
 8004ea4:	f800283a 	ret

08004ea8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004ea8:	defffd04 	addi	sp,sp,-12
 8004eac:	dfc00215 	stw	ra,8(sp)
 8004eb0:	df000115 	stw	fp,4(sp)
 8004eb4:	df000104 	addi	fp,sp,4
 8004eb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8004ebc:	8006acc0 	call	8006acc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004ec0:	00800044 	movi	r2,1
 8004ec4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004ec8:	e037883a 	mov	sp,fp
 8004ecc:	dfc00117 	ldw	ra,4(sp)
 8004ed0:	df000017 	ldw	fp,0(sp)
 8004ed4:	dec00204 	addi	sp,sp,8
 8004ed8:	f800283a 	ret

08004edc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004edc:	defffd04 	addi	sp,sp,-12
 8004ee0:	dfc00215 	stw	ra,8(sp)
 8004ee4:	df000115 	stw	fp,4(sp)
 8004ee8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_DMA_INIT ( DMA_FPGA_TO_HPS, dma_fpga_to_hps);
 8004eec:	008000c4 	movi	r2,3
 8004ef0:	d8800015 	stw	r2,0(sp)
 8004ef4:	01020034 	movhi	r4,2048
 8004ef8:	211e6204 	addi	r4,r4,31112
 8004efc:	01420034 	movhi	r5,2048
 8004f00:	295e6904 	addi	r5,r5,31140
 8004f04:	01801004 	movi	r6,64
 8004f08:	000f883a 	mov	r7,zero
 8004f0c:	8005a580 	call	8005a58 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004f10:	01020034 	movhi	r4,2048
 8004f14:	211e7004 	addi	r4,r4,31168
 8004f18:	8004e700 	call	8004e70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8004f1c:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
 8004f20:	01020034 	movhi	r4,2048
 8004f24:	211e7b04 	addi	r4,r4,31212
 8004f28:	8004e700 	call	8004e70 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
 8004f2c:	01020034 	movhi	r4,2048
 8004f30:	211e8604 	addi	r4,r4,31256
 8004f34:	8004e700 	call	8004e70 <alt_dev_reg>
}
 8004f38:	e037883a 	mov	sp,fp
 8004f3c:	dfc00117 	ldw	ra,4(sp)
 8004f40:	df000017 	ldw	fp,0(sp)
 8004f44:	dec00204 	addi	sp,sp,8
 8004f48:	f800283a 	ret

08004f4c <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 8004f4c:	defffd04 	addi	sp,sp,-12
 8004f50:	dfc00215 	stw	ra,8(sp)
 8004f54:	df000115 	stw	fp,4(sp)
 8004f58:	df000104 	addi	fp,sp,4
 8004f5c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 8004f60:	e13fff17 	ldw	r4,-4(fp)
 8004f64:	01420034 	movhi	r5,2048
 8004f68:	295f1104 	addi	r5,r5,31812
 8004f6c:	80062840 	call	8006284 <alt_dev_llist_insert>
}
 8004f70:	e037883a 	mov	sp,fp
 8004f74:	dfc00117 	ldw	ra,4(sp)
 8004f78:	df000017 	ldw	fp,0(sp)
 8004f7c:	dec00204 	addi	sp,sp,8
 8004f80:	f800283a 	ret

08004f84 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 8004f84:	defffd04 	addi	sp,sp,-12
 8004f88:	dfc00215 	stw	ra,8(sp)
 8004f8c:	df000115 	stw	fp,4(sp)
 8004f90:	df000104 	addi	fp,sp,4
 8004f94:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 8004f98:	e13fff17 	ldw	r4,-4(fp)
 8004f9c:	01420034 	movhi	r5,2048
 8004fa0:	295f1a04 	addi	r5,r5,31848
 8004fa4:	80062840 	call	8006284 <alt_dev_llist_insert>
}
 8004fa8:	e037883a 	mov	sp,fp
 8004fac:	dfc00117 	ldw	ra,4(sp)
 8004fb0:	df000017 	ldw	fp,0(sp)
 8004fb4:	dec00204 	addi	sp,sp,8
 8004fb8:	f800283a 	ret

08004fbc <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 8004fbc:	defffc04 	addi	sp,sp,-16
 8004fc0:	df000315 	stw	fp,12(sp)
 8004fc4:	df000304 	addi	fp,sp,12
 8004fc8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 8004fcc:	e0bfff17 	ldw	r2,-4(fp)
 8004fd0:	10c00117 	ldw	r3,4(r2)
 8004fd4:	e0bfff17 	ldw	r2,-4(fp)
 8004fd8:	10800217 	ldw	r2,8(r2)
 8004fdc:	18802e26 	beq	r3,r2,8005098 <alt_avalon_dma_launch_bidir+0xdc>
 8004fe0:	e0bfff17 	ldw	r2,-4(fp)
 8004fe4:	10c00317 	ldw	r3,12(r2)
 8004fe8:	e0bfff17 	ldw	r2,-4(fp)
 8004fec:	10800417 	ldw	r2,16(r2)
 8004ff0:	18802926 	beq	r3,r2,8005098 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
 8004ff4:	e0bfff17 	ldw	r2,-4(fp)
 8004ff8:	00c00044 	movi	r3,1
 8004ffc:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
 8005000:	e0bfff17 	ldw	r2,-4(fp)
 8005004:	10800117 	ldw	r2,4(r2)
 8005008:	1004913a 	slli	r2,r2,4
 800500c:	10800904 	addi	r2,r2,36
 8005010:	e0ffff17 	ldw	r3,-4(fp)
 8005014:	1885883a 	add	r2,r3,r2
 8005018:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 800501c:	e0bfff17 	ldw	r2,-4(fp)
 8005020:	10800317 	ldw	r2,12(r2)
 8005024:	1004913a 	slli	r2,r2,4
 8005028:	10801904 	addi	r2,r2,100
 800502c:	e0ffff17 	ldw	r3,-4(fp)
 8005030:	1885883a 	add	r2,r3,r2
 8005034:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 8005038:	e0bfff17 	ldw	r2,-4(fp)
 800503c:	10800017 	ldw	r2,0(r2)
 8005040:	10800104 	addi	r2,r2,4
 8005044:	e0fffd17 	ldw	r3,-12(fp)
 8005048:	18c00017 	ldw	r3,0(r3)
 800504c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 8005050:	e0bfff17 	ldw	r2,-4(fp)
 8005054:	10800017 	ldw	r2,0(r2)
 8005058:	10800204 	addi	r2,r2,8
 800505c:	e0fffe17 	ldw	r3,-8(fp)
 8005060:	18c00017 	ldw	r3,0(r3)
 8005064:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 8005068:	e0bfff17 	ldw	r2,-4(fp)
 800506c:	10800017 	ldw	r2,0(r2)
 8005070:	11000304 	addi	r4,r2,12
 8005074:	e0bffd17 	ldw	r2,-12(fp)
 8005078:	11400117 	ldw	r5,4(r2)
 800507c:	e0bffe17 	ldw	r2,-8(fp)
 8005080:	10c00117 	ldw	r3,4(r2)
 8005084:	2805883a 	mov	r2,r5
 8005088:	1880012e 	bgeu	r3,r2,8005090 <alt_avalon_dma_launch_bidir+0xd4>
 800508c:	1805883a 	mov	r2,r3
 8005090:	20800035 	stwio	r2,0(r4)
 8005094:	00000206 	br	80050a0 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 8005098:	e0bfff17 	ldw	r2,-4(fp)
 800509c:	10000815 	stw	zero,32(r2)
  }
}
 80050a0:	e037883a 	mov	sp,fp
 80050a4:	df000017 	ldw	fp,0(sp)
 80050a8:	dec00104 	addi	sp,sp,4
 80050ac:	f800283a 	ret

080050b0 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 80050b0:	defffd04 	addi	sp,sp,-12
 80050b4:	df000215 	stw	fp,8(sp)
 80050b8:	df000204 	addi	fp,sp,8
 80050bc:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 80050c0:	e0bfff17 	ldw	r2,-4(fp)
 80050c4:	10c00117 	ldw	r3,4(r2)
 80050c8:	e0bfff17 	ldw	r2,-4(fp)
 80050cc:	10800217 	ldw	r2,8(r2)
 80050d0:	18801726 	beq	r3,r2,8005130 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
 80050d4:	e0bfff17 	ldw	r2,-4(fp)
 80050d8:	00c00044 	movi	r3,1
 80050dc:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 80050e0:	e0bfff17 	ldw	r2,-4(fp)
 80050e4:	10800117 	ldw	r2,4(r2)
 80050e8:	1004913a 	slli	r2,r2,4
 80050ec:	10800904 	addi	r2,r2,36
 80050f0:	e0ffff17 	ldw	r3,-4(fp)
 80050f4:	1885883a 	add	r2,r3,r2
 80050f8:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 80050fc:	e0bfff17 	ldw	r2,-4(fp)
 8005100:	10800017 	ldw	r2,0(r2)
 8005104:	10800104 	addi	r2,r2,4
 8005108:	e0fffe17 	ldw	r3,-8(fp)
 800510c:	18c00017 	ldw	r3,0(r3)
 8005110:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 8005114:	e0bfff17 	ldw	r2,-4(fp)
 8005118:	10800017 	ldw	r2,0(r2)
 800511c:	10800304 	addi	r2,r2,12
 8005120:	e0fffe17 	ldw	r3,-8(fp)
 8005124:	18c00117 	ldw	r3,4(r3)
 8005128:	10c00035 	stwio	r3,0(r2)
 800512c:	00000206 	br	8005138 <alt_avalon_dma_launch_txonly+0x88>
  }
  else
  {
    priv->active = 0;
 8005130:	e0bfff17 	ldw	r2,-4(fp)
 8005134:	10000815 	stw	zero,32(r2)
  }
}
 8005138:	e037883a 	mov	sp,fp
 800513c:	df000017 	ldw	fp,0(sp)
 8005140:	dec00104 	addi	sp,sp,4
 8005144:	f800283a 	ret

08005148 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 8005148:	defffd04 	addi	sp,sp,-12
 800514c:	df000215 	stw	fp,8(sp)
 8005150:	df000204 	addi	fp,sp,8
 8005154:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 8005158:	e0bfff17 	ldw	r2,-4(fp)
 800515c:	10c00317 	ldw	r3,12(r2)
 8005160:	e0bfff17 	ldw	r2,-4(fp)
 8005164:	10800417 	ldw	r2,16(r2)
 8005168:	18801726 	beq	r3,r2,80051c8 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
 800516c:	e0bfff17 	ldw	r2,-4(fp)
 8005170:	00c00044 	movi	r3,1
 8005174:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 8005178:	e0bfff17 	ldw	r2,-4(fp)
 800517c:	10800317 	ldw	r2,12(r2)
 8005180:	1004913a 	slli	r2,r2,4
 8005184:	10801904 	addi	r2,r2,100
 8005188:	e0ffff17 	ldw	r3,-4(fp)
 800518c:	1885883a 	add	r2,r3,r2
 8005190:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 8005194:	e0bfff17 	ldw	r2,-4(fp)
 8005198:	10800017 	ldw	r2,0(r2)
 800519c:	10800204 	addi	r2,r2,8
 80051a0:	e0fffe17 	ldw	r3,-8(fp)
 80051a4:	18c00017 	ldw	r3,0(r3)
 80051a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 80051ac:	e0bfff17 	ldw	r2,-4(fp)
 80051b0:	10800017 	ldw	r2,0(r2)
 80051b4:	10800304 	addi	r2,r2,12
 80051b8:	e0fffe17 	ldw	r3,-8(fp)
 80051bc:	18c00117 	ldw	r3,4(r3)
 80051c0:	10c00035 	stwio	r3,0(r2)
 80051c4:	00000206 	br	80051d0 <alt_avalon_dma_launch_rxonly+0x88>
  }
  else
  {
    priv->active = 0;
 80051c8:	e0bfff17 	ldw	r2,-4(fp)
 80051cc:	10000815 	stw	zero,32(r2)
  }
}
 80051d0:	e037883a 	mov	sp,fp
 80051d4:	df000017 	ldw	fp,0(sp)
 80051d8:	dec00104 	addi	sp,sp,4
 80051dc:	f800283a 	ret

080051e0 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 80051e0:	defffa04 	addi	sp,sp,-24
 80051e4:	df000515 	stw	fp,20(sp)
 80051e8:	df000504 	addi	fp,sp,20
 80051ec:	e13ffd15 	stw	r4,-12(fp)
 80051f0:	e17ffe15 	stw	r5,-8(fp)
 80051f4:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
 80051f8:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 80051fc:	e0bffd17 	ldw	r2,-12(fp)
 8005200:	10c00117 	ldw	r3,4(r2)
 8005204:	e0bffd17 	ldw	r2,-12(fp)
 8005208:	10800217 	ldw	r2,8(r2)
 800520c:	18800a1e 	bne	r3,r2,8005238 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
 8005210:	e0bffd17 	ldw	r2,-12(fp)
 8005214:	10c00317 	ldw	r3,12(r2)
 8005218:	e0bffd17 	ldw	r2,-12(fp)
 800521c:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 8005220:	1880051e 	bne	r3,r2,8005238 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
 8005224:	e0bffd17 	ldw	r2,-12(fp)
 8005228:	10800017 	ldw	r2,0(r2)
 800522c:	10800304 	addi	r2,r2,12
 8005230:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
 8005234:	10000226 	beq	r2,zero,8005240 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 8005238:	00bffec4 	movi	r2,-5
 800523c:	0000b506 	br	8005514 <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
 8005240:	e0bffe17 	ldw	r2,-8(fp)
 8005244:	108002a8 	cmpgeui	r2,r2,10
 8005248:	1000781e 	bne	r2,zero,800542c <alt_avalon_dma_ioctl+0x24c>
 800524c:	e0bffe17 	ldw	r2,-8(fp)
 8005250:	100690ba 	slli	r3,r2,2
 8005254:	00820034 	movhi	r2,2048
 8005258:	10949a04 	addi	r2,r2,21096
 800525c:	1885883a 	add	r2,r3,r2
 8005260:	10800017 	ldw	r2,0(r2)
 8005264:	1000683a 	jmp	r2
 8005268:	0800542c 	andhi	zero,at,336
 800526c:	08005290 	cmplti	zero,at,330
 8005270:	080052e8 	cmpgeui	zero,at,331
 8005274:	08005314 	ori	zero,at,332
 8005278:	0800536c 	andhi	zero,at,333
 800527c:	08005398 	cmpnei	zero,at,334
 8005280:	080053b4 	orhi	zero,at,334
 8005284:	080053d4 	ori	zero,at,335
 8005288:	080053f4 	orhi	zero,at,335
 800528c:	08005414 	ori	zero,at,336
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 8005290:	e0bffd17 	ldw	r2,-12(fp)
 8005294:	10800517 	ldw	r2,20(r2)
 8005298:	1080100c 	andi	r2,r2,64
 800529c:	10000f1e 	bne	r2,zero,80052dc <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 80052a0:	e0bffd17 	ldw	r2,-12(fp)
 80052a4:	10800017 	ldw	r2,0(r2)
 80052a8:	10800104 	addi	r2,r2,4
 80052ac:	e0ffff17 	ldw	r3,-4(fp)
 80052b0:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 80052b4:	e0bffd17 	ldw	r2,-12(fp)
 80052b8:	10800517 	ldw	r2,20(r2)
 80052bc:	10c00814 	ori	r3,r2,32
 80052c0:	e0bffd17 	ldw	r2,-12(fp)
 80052c4:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 80052c8:	e0fffd17 	ldw	r3,-12(fp)
 80052cc:	00820034 	movhi	r2,2048
 80052d0:	10945204 	addi	r2,r2,20808
 80052d4:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 80052d8:	00005606 	br	8005434 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
 80052dc:	00bffec4 	movi	r2,-5
 80052e0:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 80052e4:	00005306 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 80052e8:	e0bffd17 	ldw	r2,-12(fp)
 80052ec:	10c00517 	ldw	r3,20(r2)
 80052f0:	00bff7c4 	movi	r2,-33
 80052f4:	1886703a 	and	r3,r3,r2
 80052f8:	e0bffd17 	ldw	r2,-12(fp)
 80052fc:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 8005300:	e0fffd17 	ldw	r3,-12(fp)
 8005304:	00820034 	movhi	r2,2048
 8005308:	1093ef04 	addi	r2,r2,20412
 800530c:	18800715 	stw	r2,28(r3)
    break;
 8005310:	00004806 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 8005314:	e0bffd17 	ldw	r2,-12(fp)
 8005318:	10800517 	ldw	r2,20(r2)
 800531c:	1080080c 	andi	r2,r2,32
 8005320:	10000f1e 	bne	r2,zero,8005360 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 8005324:	e0bffd17 	ldw	r2,-12(fp)
 8005328:	10800017 	ldw	r2,0(r2)
 800532c:	10800204 	addi	r2,r2,8
 8005330:	e0ffff17 	ldw	r3,-4(fp)
 8005334:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 8005338:	e0bffd17 	ldw	r2,-12(fp)
 800533c:	10800517 	ldw	r2,20(r2)
 8005340:	10c01014 	ori	r3,r2,64
 8005344:	e0bffd17 	ldw	r2,-12(fp)
 8005348:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 800534c:	e0fffd17 	ldw	r3,-12(fp)
 8005350:	00820034 	movhi	r2,2048
 8005354:	10942c04 	addi	r2,r2,20656
 8005358:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 800535c:	00003506 	br	8005434 <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
 8005360:	00bffec4 	movi	r2,-5
 8005364:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 8005368:	00003206 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 800536c:	e0bffd17 	ldw	r2,-12(fp)
 8005370:	10c00517 	ldw	r3,20(r2)
 8005374:	00bfefc4 	movi	r2,-65
 8005378:	1886703a 	and	r3,r3,r2
 800537c:	e0bffd17 	ldw	r2,-12(fp)
 8005380:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 8005384:	e0fffd17 	ldw	r3,-12(fp)
 8005388:	00820034 	movhi	r2,2048
 800538c:	1093ef04 	addi	r2,r2,20412
 8005390:	18800715 	stw	r2,28(r3)
    break;
 8005394:	00002706 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 8005398:	e0bffd17 	ldw	r2,-12(fp)
 800539c:	10c00517 	ldw	r3,20(r2)
 80053a0:	00bffc04 	movi	r2,-16
 80053a4:	1886703a 	and	r3,r3,r2
 80053a8:	e0bffd17 	ldw	r2,-12(fp)
 80053ac:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 80053b0:	00002006 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053b4:	e0bffd17 	ldw	r2,-12(fp)
 80053b8:	10c00517 	ldw	r3,20(r2)
 80053bc:	00bffc04 	movi	r2,-16
 80053c0:	1884703a 	and	r2,r3,r2
 80053c4:	10c00054 	ori	r3,r2,1
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 80053d0:	00001806 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053d4:	e0bffd17 	ldw	r2,-12(fp)
 80053d8:	10c00517 	ldw	r3,20(r2)
 80053dc:	00bffc04 	movi	r2,-16
 80053e0:	1884703a 	and	r2,r3,r2
 80053e4:	10c000d4 	ori	r3,r2,3
 80053e8:	e0bffd17 	ldw	r2,-12(fp)
 80053ec:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 80053f0:	00001006 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053f4:	e0bffd17 	ldw	r2,-12(fp)
 80053f8:	10c00517 	ldw	r3,20(r2)
 80053fc:	00bffc04 	movi	r2,-16
 8005400:	1884703a 	and	r2,r3,r2
 8005404:	10c001d4 	ori	r3,r2,7
 8005408:	e0bffd17 	ldw	r2,-12(fp)
 800540c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 8005410:	00000806 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 8005414:	e0bffd17 	ldw	r2,-12(fp)
 8005418:	10800517 	ldw	r2,20(r2)
 800541c:	10c003d4 	ori	r3,r2,15
 8005420:	e0bffd17 	ldw	r2,-12(fp)
 8005424:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 8005428:	00000206 	br	8005434 <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
 800542c:	00bff9c4 	movi	r2,-25
 8005430:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
 8005434:	e0bffb17 	ldw	r2,-20(fp)
 8005438:	1000351e 	bne	r2,zero,8005510 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 800543c:	e0bffd17 	ldw	r2,-12(fp)
 8005440:	10800517 	ldw	r2,20(r2)
 8005444:	108003cc 	andi	r2,r2,15
 8005448:	10c00060 	cmpeqi	r3,r2,1
 800544c:	1800091e 	bne	r3,zero,8005474 <alt_avalon_dma_ioctl+0x294>
 8005450:	0080052e 	bgeu	zero,r2,8005468 <alt_avalon_dma_ioctl+0x288>
 8005454:	10c000e0 	cmpeqi	r3,r2,3
 8005458:	1800091e 	bne	r3,zero,8005480 <alt_avalon_dma_ioctl+0x2a0>
 800545c:	108001e0 	cmpeqi	r2,r2,7
 8005460:	10000a1e 	bne	r2,zero,800548c <alt_avalon_dma_ioctl+0x2ac>
 8005464:	00000c06 	br	8005498 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 8005468:	00800044 	movi	r2,1
 800546c:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005470:	00000b06 	br	80054a0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 8005474:	00800084 	movi	r2,2
 8005478:	e0bffc15 	stw	r2,-16(fp)
       break;
 800547c:	00000806 	br	80054a0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 8005480:	00800104 	movi	r2,4
 8005484:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005488:	00000506 	br	80054a0 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 800548c:	00810004 	movi	r2,1024
 8005490:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005494:	00000206 	br	80054a0 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 8005498:	00820004 	movi	r2,2048
 800549c:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 80054a0:	e0bffd17 	ldw	r2,-12(fp)
 80054a4:	10800517 	ldw	r2,20(r2)
 80054a8:	1080080c 	andi	r2,r2,32
 80054ac:	10000726 	beq	r2,zero,80054cc <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 80054b0:	e0bffd17 	ldw	r2,-12(fp)
 80054b4:	10800017 	ldw	r2,0(r2)
 80054b8:	10800604 	addi	r2,r2,24
 80054bc:	e0fffc17 	ldw	r3,-16(fp)
 80054c0:	18c07e14 	ori	r3,r3,504
 80054c4:	10c00035 	stwio	r3,0(r2)
 80054c8:	00001106 	br	8005510 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 80054cc:	e0bffd17 	ldw	r2,-12(fp)
 80054d0:	10800517 	ldw	r2,20(r2)
 80054d4:	1080100c 	andi	r2,r2,64
 80054d8:	10000726 	beq	r2,zero,80054f8 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 80054dc:	e0bffd17 	ldw	r2,-12(fp)
 80054e0:	10800017 	ldw	r2,0(r2)
 80054e4:	10800604 	addi	r2,r2,24
 80054e8:	e0fffc17 	ldw	r3,-16(fp)
 80054ec:	18c0be14 	ori	r3,r3,760
 80054f0:	10c00035 	stwio	r3,0(r2)
 80054f4:	00000606 	br	8005510 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 80054f8:	e0bffd17 	ldw	r2,-12(fp)
 80054fc:	10800017 	ldw	r2,0(r2)
 8005500:	10800604 	addi	r2,r2,24
 8005504:	e0fffc17 	ldw	r3,-16(fp)
 8005508:	18c03e14 	ori	r3,r3,248
 800550c:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 8005510:	e0bffb17 	ldw	r2,-20(fp)
}
 8005514:	e037883a 	mov	sp,fp
 8005518:	df000017 	ldw	fp,0(sp)
 800551c:	dec00104 	addi	sp,sp,4
 8005520:	f800283a 	ret

08005524 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 8005524:	defffb04 	addi	sp,sp,-20
 8005528:	dfc00415 	stw	ra,16(sp)
 800552c:	df000315 	stw	fp,12(sp)
 8005530:	df000304 	addi	fp,sp,12
 8005534:	e13ffd15 	stw	r4,-12(fp)
 8005538:	e17ffe15 	stw	r5,-8(fp)
 800553c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 8005540:	e0bffd17 	ldw	r2,-12(fp)
 8005544:	10800617 	ldw	r2,24(r2)
 8005548:	1009883a 	mov	r4,r2
 800554c:	e17ffe17 	ldw	r5,-8(fp)
 8005550:	e1bfff17 	ldw	r6,-4(fp)
 8005554:	80051e00 	call	80051e0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 8005558:	e037883a 	mov	sp,fp
 800555c:	dfc00117 	ldw	ra,4(sp)
 8005560:	df000017 	ldw	fp,0(sp)
 8005564:	dec00204 	addi	sp,sp,8
 8005568:	f800283a 	ret

0800556c <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 800556c:	defffb04 	addi	sp,sp,-20
 8005570:	dfc00415 	stw	ra,16(sp)
 8005574:	df000315 	stw	fp,12(sp)
 8005578:	df000304 	addi	fp,sp,12
 800557c:	e13ffd15 	stw	r4,-12(fp)
 8005580:	e17ffe15 	stw	r5,-8(fp)
 8005584:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 8005588:	e0bffd17 	ldw	r2,-12(fp)
 800558c:	10800617 	ldw	r2,24(r2)
 8005590:	1009883a 	mov	r4,r2
 8005594:	e17ffe17 	ldw	r5,-8(fp)
 8005598:	e1bfff17 	ldw	r6,-4(fp)
 800559c:	80051e00 	call	80051e0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 80055a0:	e037883a 	mov	sp,fp
 80055a4:	dfc00117 	ldw	ra,4(sp)
 80055a8:	df000017 	ldw	fp,0(sp)
 80055ac:	dec00204 	addi	sp,sp,8
 80055b0:	f800283a 	ret

080055b4 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 80055b4:	defff404 	addi	sp,sp,-48
 80055b8:	dfc00b15 	stw	ra,44(sp)
 80055bc:	df000a15 	stw	fp,40(sp)
 80055c0:	df000a04 	addi	fp,sp,40
 80055c4:	e13ffc15 	stw	r4,-16(fp)
 80055c8:	e17ffd15 	stw	r5,-12(fp)
 80055cc:	e1bffe15 	stw	r6,-8(fp)
 80055d0:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 80055d4:	e0bffc17 	ldw	r2,-16(fp)
 80055d8:	10800617 	ldw	r2,24(r2)
 80055dc:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 80055e0:	e0bff617 	ldw	r2,-40(fp)
 80055e4:	10800517 	ldw	r2,20(r2)
 80055e8:	108003cc 	andi	r2,r2,15
 80055ec:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 80055f0:	e0fffd17 	ldw	r3,-12(fp)
 80055f4:	e0bff717 	ldw	r2,-36(fp)
 80055f8:	1884703a 	and	r2,r3,r2
 80055fc:	1000081e 	bne	r2,zero,8005620 <alt_avalon_dma_prepare+0x6c>
 8005600:	e0fffe17 	ldw	r3,-8(fp)
 8005604:	e0bff717 	ldw	r2,-36(fp)
 8005608:	1884703a 	and	r2,r3,r2
 800560c:	1000041e 	bne	r2,zero,8005620 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
 8005610:	e0bff617 	ldw	r2,-40(fp)
 8005614:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 8005618:	e0bffe17 	ldw	r2,-8(fp)
 800561c:	1880022e 	bgeu	r3,r2,8005628 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
 8005620:	00bffa84 	movi	r2,-22
 8005624:	00002c06 	br	80056d8 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
 8005628:	e0bff617 	ldw	r2,-40(fp)
 800562c:	10800317 	ldw	r2,12(r2)
 8005630:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
 8005634:	e0bff617 	ldw	r2,-40(fp)
 8005638:	10800417 	ldw	r2,16(r2)
 800563c:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
 8005640:	e0bff917 	ldw	r2,-28(fp)
 8005644:	1004913a 	slli	r2,r2,4
 8005648:	10801904 	addi	r2,r2,100
 800564c:	e0fff617 	ldw	r3,-40(fp)
 8005650:	1885883a 	add	r2,r3,r2
 8005654:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005658:	e0bff917 	ldw	r2,-28(fp)
 800565c:	10800044 	addi	r2,r2,1
 8005660:	108000cc 	andi	r2,r2,3
 8005664:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 8005668:	e0fffb17 	ldw	r3,-20(fp)
 800566c:	e0bff817 	ldw	r2,-32(fp)
 8005670:	1880021e 	bne	r3,r2,800567c <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
 8005674:	00bff904 	movi	r2,-28
 8005678:	00001706 	br	80056d8 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
 800567c:	e0bffa17 	ldw	r2,-24(fp)
 8005680:	e0fffd17 	ldw	r3,-12(fp)
 8005684:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 8005688:	e0bffa17 	ldw	r2,-24(fp)
 800568c:	e0fffe17 	ldw	r3,-8(fp)
 8005690:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 8005694:	e0bffa17 	ldw	r2,-24(fp)
 8005698:	e0ffff17 	ldw	r3,-4(fp)
 800569c:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 80056a0:	e0bffa17 	ldw	r2,-24(fp)
 80056a4:	e0c00217 	ldw	r3,8(fp)
 80056a8:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
 80056ac:	e0bff617 	ldw	r2,-40(fp)
 80056b0:	e0fffb17 	ldw	r3,-20(fp)
 80056b4:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
 80056b8:	e0bff617 	ldw	r2,-40(fp)
 80056bc:	10800817 	ldw	r2,32(r2)
 80056c0:	1000041e 	bne	r2,zero,80056d4 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
 80056c4:	e0bff617 	ldw	r2,-40(fp)
 80056c8:	10800717 	ldw	r2,28(r2)
 80056cc:	e13ff617 	ldw	r4,-40(fp)
 80056d0:	103ee83a 	callr	r2
  }

  return 0;
 80056d4:	0005883a 	mov	r2,zero
}
 80056d8:	e037883a 	mov	sp,fp
 80056dc:	dfc00117 	ldw	ra,4(sp)
 80056e0:	df000017 	ldw	fp,0(sp)
 80056e4:	dec00204 	addi	sp,sp,8
 80056e8:	f800283a 	ret

080056ec <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 80056ec:	defffb04 	addi	sp,sp,-20
 80056f0:	df000415 	stw	fp,16(sp)
 80056f4:	df000404 	addi	fp,sp,16
 80056f8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 80056fc:	e0bfff17 	ldw	r2,-4(fp)
 8005700:	10800617 	ldw	r2,24(r2)
 8005704:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
 8005708:	e0bffc17 	ldw	r2,-16(fp)
 800570c:	10800117 	ldw	r2,4(r2)
 8005710:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
 8005714:	e0bffc17 	ldw	r2,-16(fp)
 8005718:	10800217 	ldw	r2,8(r2)
 800571c:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
 8005720:	e0bffd17 	ldw	r2,-12(fp)
 8005724:	e0fffe17 	ldw	r3,-8(fp)
 8005728:	1880052e 	bgeu	r3,r2,8005740 <alt_avalon_dma_space+0x54>
 800572c:	e0fffd17 	ldw	r3,-12(fp)
 8005730:	e0bffe17 	ldw	r2,-8(fp)
 8005734:	1885c83a 	sub	r2,r3,r2
 8005738:	10bfffc4 	addi	r2,r2,-1
 800573c:	00000406 	br	8005750 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
 8005740:	e0fffd17 	ldw	r3,-12(fp)
 8005744:	e0bffe17 	ldw	r2,-8(fp)
 8005748:	1885c83a 	sub	r2,r3,r2
 800574c:	108000c4 	addi	r2,r2,3
}
 8005750:	e037883a 	mov	sp,fp
 8005754:	df000017 	ldw	fp,0(sp)
 8005758:	dec00104 	addi	sp,sp,4
 800575c:	f800283a 	ret

08005760 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 8005760:	defff404 	addi	sp,sp,-48
 8005764:	dfc00b15 	stw	ra,44(sp)
 8005768:	df000a15 	stw	fp,40(sp)
 800576c:	df000a04 	addi	fp,sp,40
 8005770:	e13ffc15 	stw	r4,-16(fp)
 8005774:	e17ffd15 	stw	r5,-12(fp)
 8005778:	e1bffe15 	stw	r6,-8(fp)
 800577c:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 8005780:	e0bffc17 	ldw	r2,-16(fp)
 8005784:	10800617 	ldw	r2,24(r2)
 8005788:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 800578c:	e0bff617 	ldw	r2,-40(fp)
 8005790:	10800517 	ldw	r2,20(r2)
 8005794:	108003cc 	andi	r2,r2,15
 8005798:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 800579c:	e0fffd17 	ldw	r3,-12(fp)
 80057a0:	e0bff717 	ldw	r2,-36(fp)
 80057a4:	1884703a 	and	r2,r3,r2
 80057a8:	1000081e 	bne	r2,zero,80057cc <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
 80057ac:	e0fffe17 	ldw	r3,-8(fp)
 80057b0:	e0bff717 	ldw	r2,-36(fp)
 80057b4:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
 80057b8:	1000041e 	bne	r2,zero,80057cc <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
 80057bc:	e0bff617 	ldw	r2,-40(fp)
 80057c0:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
 80057c4:	e0bffe17 	ldw	r2,-8(fp)
 80057c8:	1880022e 	bgeu	r3,r2,80057d4 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
 80057cc:	00bffa84 	movi	r2,-22
 80057d0:	00002c06 	br	8005884 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
 80057d4:	e0bff617 	ldw	r2,-40(fp)
 80057d8:	10800117 	ldw	r2,4(r2)
 80057dc:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
 80057e0:	e0bff617 	ldw	r2,-40(fp)
 80057e4:	10800217 	ldw	r2,8(r2)
 80057e8:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
 80057ec:	e0bff917 	ldw	r2,-28(fp)
 80057f0:	1004913a 	slli	r2,r2,4
 80057f4:	10800904 	addi	r2,r2,36
 80057f8:	e0fff617 	ldw	r3,-40(fp)
 80057fc:	1885883a 	add	r2,r3,r2
 8005800:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005804:	e0bff917 	ldw	r2,-28(fp)
 8005808:	10800044 	addi	r2,r2,1
 800580c:	108000cc 	andi	r2,r2,3
 8005810:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 8005814:	e0fffb17 	ldw	r3,-20(fp)
 8005818:	e0bff817 	ldw	r2,-32(fp)
 800581c:	1880021e 	bne	r3,r2,8005828 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
 8005820:	00bff904 	movi	r2,-28
 8005824:	00001706 	br	8005884 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 8005828:	e0bffa17 	ldw	r2,-24(fp)
 800582c:	e0fffd17 	ldw	r3,-12(fp)
 8005830:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 8005834:	e0bffa17 	ldw	r2,-24(fp)
 8005838:	e0fffe17 	ldw	r3,-8(fp)
 800583c:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 8005840:	e0bffa17 	ldw	r2,-24(fp)
 8005844:	e0ffff17 	ldw	r3,-4(fp)
 8005848:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 800584c:	e0bffa17 	ldw	r2,-24(fp)
 8005850:	e0c00217 	ldw	r3,8(fp)
 8005854:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
 8005858:	e0bff617 	ldw	r2,-40(fp)
 800585c:	e0fffb17 	ldw	r3,-20(fp)
 8005860:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
 8005864:	e0bff617 	ldw	r2,-40(fp)
 8005868:	10800817 	ldw	r2,32(r2)
 800586c:	1000041e 	bne	r2,zero,8005880 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
 8005870:	e0bff617 	ldw	r2,-40(fp)
 8005874:	10800717 	ldw	r2,28(r2)
 8005878:	e13ff617 	ldw	r4,-40(fp)
 800587c:	103ee83a 	callr	r2
  }

  return 0;
 8005880:	0005883a 	mov	r2,zero
}
 8005884:	e037883a 	mov	sp,fp
 8005888:	dfc00117 	ldw	ra,4(sp)
 800588c:	df000017 	ldw	fp,0(sp)
 8005890:	dec00204 	addi	sp,sp,8
 8005894:	f800283a 	ret

08005898 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 8005898:	defff004 	addi	sp,sp,-64
 800589c:	dfc00f15 	stw	ra,60(sp)
 80058a0:	df000e15 	stw	fp,56(sp)
 80058a4:	df000e04 	addi	fp,sp,56
 80058a8:	e13ffe15 	stw	r4,-8(fp)
 80058ac:	e17fff15 	stw	r5,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 80058b0:	e0bffe17 	ldw	r2,-8(fp)
 80058b4:	e0bff215 	stw	r2,-56(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 80058b8:	e0bff217 	ldw	r2,-56(fp)
 80058bc:	10800517 	ldw	r2,20(r2)
 80058c0:	1080080c 	andi	r2,r2,32
 80058c4:	e0bff315 	stw	r2,-52(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 80058c8:	e0bff217 	ldw	r2,-56(fp)
 80058cc:	10800517 	ldw	r2,20(r2)
 80058d0:	1080100c 	andi	r2,r2,64
 80058d4:	e0bff415 	stw	r2,-48(fp)

  tx_start = priv->tx_start;
 80058d8:	e0bff217 	ldw	r2,-56(fp)
 80058dc:	10800117 	ldw	r2,4(r2)
 80058e0:	e0bff515 	stw	r2,-44(fp)
  rx_start = priv->rx_start;
 80058e4:	e0bff217 	ldw	r2,-56(fp)
 80058e8:	10800317 	ldw	r2,12(r2)
 80058ec:	e0bff615 	stw	r2,-40(fp)

  tx_slot = &priv->tx_buf[tx_start];
 80058f0:	e0bff517 	ldw	r2,-44(fp)
 80058f4:	1004913a 	slli	r2,r2,4
 80058f8:	10800904 	addi	r2,r2,36
 80058fc:	e0fff217 	ldw	r3,-56(fp)
 8005900:	1885883a 	add	r2,r3,r2
 8005904:	e0bff715 	stw	r2,-36(fp)
  rx_slot = &priv->rx_buf[rx_start];
 8005908:	e0bff617 	ldw	r2,-40(fp)
 800590c:	1004913a 	slli	r2,r2,4
 8005910:	10801904 	addi	r2,r2,100
 8005914:	e0fff217 	ldw	r3,-56(fp)
 8005918:	1885883a 	add	r2,r3,r2
 800591c:	e0bff815 	stw	r2,-32(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 8005920:	e0bff317 	ldw	r2,-52(fp)
 8005924:	1000051e 	bne	r2,zero,800593c <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005928:	e0bff517 	ldw	r2,-44(fp)
 800592c:	10800044 	addi	r2,r2,1
 8005930:	10c000cc 	andi	r3,r2,3
 8005934:	e0bff217 	ldw	r2,-56(fp)
 8005938:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 800593c:	e0bff417 	ldw	r2,-48(fp)
 8005940:	1000051e 	bne	r2,zero,8005958 <alt_avalon_dma_irq+0xc0>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005944:	e0bff617 	ldw	r2,-40(fp)
 8005948:	10800044 	addi	r2,r2,1
 800594c:	10c000cc 	andi	r3,r2,3
 8005950:	e0bff217 	ldw	r2,-56(fp)
 8005954:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 8005958:	e0bff217 	ldw	r2,-56(fp)
 800595c:	10800017 	ldw	r2,0(r2)
 8005960:	0007883a 	mov	r3,zero
 8005964:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 8005968:	e0bff217 	ldw	r2,-56(fp)
 800596c:	10800017 	ldw	r2,0(r2)
 8005970:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 8005974:	e0bff217 	ldw	r2,-56(fp)
 8005978:	10800717 	ldw	r2,28(r2)
 800597c:	e13ff217 	ldw	r4,-56(fp)
 8005980:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 8005984:	e0bff317 	ldw	r2,-52(fp)
 8005988:	1000151e 	bne	r2,zero,80059e0 <alt_avalon_dma_irq+0x148>
 800598c:	e0bff717 	ldw	r2,-36(fp)
 8005990:	10800217 	ldw	r2,8(r2)
 8005994:	10001226 	beq	r2,zero,80059e0 <alt_avalon_dma_irq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005998:	0005303a 	rdctl	r2,status
 800599c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059a0:	e0fffa17 	ldw	r3,-24(fp)
 80059a4:	00bfff84 	movi	r2,-2
 80059a8:	1884703a 	and	r2,r3,r2
 80059ac:	1001703a 	wrctl	status,r2
  
  return context;
 80059b0:	e0bffa17 	ldw	r2,-24(fp)
  {
    cpu_sr = alt_irq_disable_all();
 80059b4:	e0bff915 	stw	r2,-28(fp)
    tx_slot->done (tx_slot->handle);
 80059b8:	e0bff717 	ldw	r2,-36(fp)
 80059bc:	10800217 	ldw	r2,8(r2)
 80059c0:	e0fff717 	ldw	r3,-36(fp)
 80059c4:	18c00317 	ldw	r3,12(r3)
 80059c8:	1809883a 	mov	r4,r3
 80059cc:	103ee83a 	callr	r2
 80059d0:	e0bff917 	ldw	r2,-28(fp)
 80059d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80059d8:	e0bffb17 	ldw	r2,-20(fp)
 80059dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 80059e0:	e0bff417 	ldw	r2,-48(fp)
 80059e4:	1000171e 	bne	r2,zero,8005a44 <alt_avalon_dma_irq+0x1ac>
 80059e8:	e0bff817 	ldw	r2,-32(fp)
 80059ec:	10800217 	ldw	r2,8(r2)
 80059f0:	10001426 	beq	r2,zero,8005a44 <alt_avalon_dma_irq+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80059f4:	0005303a 	rdctl	r2,status
 80059f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059fc:	e0fffc17 	ldw	r3,-16(fp)
 8005a00:	00bfff84 	movi	r2,-2
 8005a04:	1884703a 	and	r2,r3,r2
 8005a08:	1001703a 	wrctl	status,r2
  
  return context;
 8005a0c:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
 8005a10:	e0bff915 	stw	r2,-28(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 8005a14:	e0bff817 	ldw	r2,-32(fp)
 8005a18:	10800217 	ldw	r2,8(r2)
 8005a1c:	e0fff817 	ldw	r3,-32(fp)
 8005a20:	19000317 	ldw	r4,12(r3)
 8005a24:	e0fff817 	ldw	r3,-32(fp)
 8005a28:	18c00017 	ldw	r3,0(r3)
 8005a2c:	180b883a 	mov	r5,r3
 8005a30:	103ee83a 	callr	r2
 8005a34:	e0bff917 	ldw	r2,-28(fp)
 8005a38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005a3c:	e0bffd17 	ldw	r2,-12(fp)
 8005a40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 8005a44:	e037883a 	mov	sp,fp
 8005a48:	dfc00117 	ldw	ra,4(sp)
 8005a4c:	df000017 	ldw	fp,0(sp)
 8005a50:	dec00204 	addi	sp,sp,8
 8005a54:	f800283a 	ret

08005a58 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 8005a58:	defffa04 	addi	sp,sp,-24
 8005a5c:	dfc00515 	stw	ra,20(sp)
 8005a60:	df000415 	stw	fp,16(sp)
 8005a64:	df000404 	addi	fp,sp,16
 8005a68:	e13ffc15 	stw	r4,-16(fp)
 8005a6c:	e17ffd15 	stw	r5,-12(fp)
 8005a70:	e1bffe15 	stw	r6,-8(fp)
 8005a74:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 8005a78:	e0bffe17 	ldw	r2,-8(fp)
 8005a7c:	10800604 	addi	r2,r2,24
 8005a80:	00c40004 	movi	r3,4096
 8005a84:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 8005a88:	e0bffe17 	ldw	r2,-8(fp)
 8005a8c:	10800604 	addi	r2,r2,24
 8005a90:	00c40004 	movi	r3,4096
 8005a94:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 8005a98:	e0bffe17 	ldw	r2,-8(fp)
 8005a9c:	10800604 	addi	r2,r2,24
 8005aa0:	00c03f04 	movi	r3,252
 8005aa4:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 8005aa8:	0007883a 	mov	r3,zero
 8005aac:	e0bffe17 	ldw	r2,-8(fp)
 8005ab0:	10c00035 	stwio	r3,0(r2)
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
 8005ab4:	e0bffc17 	ldw	r2,-16(fp)
 8005ab8:	10800617 	ldw	r2,24(r2)
 8005abc:	e1000217 	ldw	r4,8(fp)
 8005ac0:	100b883a 	mov	r5,r2
 8005ac4:	01820034 	movhi	r6,2048
 8005ac8:	31962604 	addi	r6,r6,22680
 8005acc:	80065f80 	call	80065f8 <alt_irq_register>
 8005ad0:	10000616 	blt	r2,zero,8005aec <alt_avalon_dma_init+0x94>
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 8005ad4:	e0bffc17 	ldw	r2,-16(fp)
 8005ad8:	1009883a 	mov	r4,r2
 8005adc:	8004f4c0 	call	8004f4c <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 8005ae0:	e0bffd17 	ldw	r2,-12(fp)
 8005ae4:	1009883a 	mov	r4,r2
 8005ae8:	8004f840 	call	8004f84 <alt_dma_rxchan_reg>
  }
}
 8005aec:	e037883a 	mov	sp,fp
 8005af0:	dfc00117 	ldw	ra,4(sp)
 8005af4:	df000017 	ldw	fp,0(sp)
 8005af8:	dec00204 	addi	sp,sp,8
 8005afc:	f800283a 	ret

08005b00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8005b00:	defffa04 	addi	sp,sp,-24
 8005b04:	dfc00515 	stw	ra,20(sp)
 8005b08:	df000415 	stw	fp,16(sp)
 8005b0c:	df000404 	addi	fp,sp,16
 8005b10:	e13ffd15 	stw	r4,-12(fp)
 8005b14:	e17ffe15 	stw	r5,-8(fp)
 8005b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005b1c:	e0bffd17 	ldw	r2,-12(fp)
 8005b20:	10800017 	ldw	r2,0(r2)
 8005b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8005b28:	e0bffc17 	ldw	r2,-16(fp)
 8005b2c:	10c00a04 	addi	r3,r2,40
 8005b30:	e0bffd17 	ldw	r2,-12(fp)
 8005b34:	10800217 	ldw	r2,8(r2)
 8005b38:	1809883a 	mov	r4,r3
 8005b3c:	e17ffe17 	ldw	r5,-8(fp)
 8005b40:	e1bfff17 	ldw	r6,-4(fp)
 8005b44:	100f883a 	mov	r7,r2
 8005b48:	8005bc00 	call	8005bc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8005b4c:	e037883a 	mov	sp,fp
 8005b50:	dfc00117 	ldw	ra,4(sp)
 8005b54:	df000017 	ldw	fp,0(sp)
 8005b58:	dec00204 	addi	sp,sp,8
 8005b5c:	f800283a 	ret

08005b60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8005b60:	defffa04 	addi	sp,sp,-24
 8005b64:	dfc00515 	stw	ra,20(sp)
 8005b68:	df000415 	stw	fp,16(sp)
 8005b6c:	df000404 	addi	fp,sp,16
 8005b70:	e13ffd15 	stw	r4,-12(fp)
 8005b74:	e17ffe15 	stw	r5,-8(fp)
 8005b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005b7c:	e0bffd17 	ldw	r2,-12(fp)
 8005b80:	10800017 	ldw	r2,0(r2)
 8005b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8005b88:	e0bffc17 	ldw	r2,-16(fp)
 8005b8c:	10c00a04 	addi	r3,r2,40
 8005b90:	e0bffd17 	ldw	r2,-12(fp)
 8005b94:	10800217 	ldw	r2,8(r2)
 8005b98:	1809883a 	mov	r4,r3
 8005b9c:	e17ffe17 	ldw	r5,-8(fp)
 8005ba0:	e1bfff17 	ldw	r6,-4(fp)
 8005ba4:	100f883a 	mov	r7,r2
 8005ba8:	8005ca40 	call	8005ca4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8005bac:	e037883a 	mov	sp,fp
 8005bb0:	dfc00117 	ldw	ra,4(sp)
 8005bb4:	df000017 	ldw	fp,0(sp)
 8005bb8:	dec00204 	addi	sp,sp,8
 8005bbc:	f800283a 	ret

08005bc0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 8005bc0:	defff704 	addi	sp,sp,-36
 8005bc4:	df000815 	stw	fp,32(sp)
 8005bc8:	df000804 	addi	fp,sp,32
 8005bcc:	e13ffc15 	stw	r4,-16(fp)
 8005bd0:	e17ffd15 	stw	r5,-12(fp)
 8005bd4:	e1bffe15 	stw	r6,-8(fp)
 8005bd8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8005bdc:	e0bffc17 	ldw	r2,-16(fp)
 8005be0:	10800017 	ldw	r2,0(r2)
 8005be4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 8005be8:	e0bffd17 	ldw	r2,-12(fp)
 8005bec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 8005bf0:	e0bffe17 	ldw	r2,-8(fp)
 8005bf4:	e0fffd17 	ldw	r3,-12(fp)
 8005bf8:	1885883a 	add	r2,r3,r2
 8005bfc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 8005c00:	00001406 	br	8005c54 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8005c04:	e0bff917 	ldw	r2,-28(fp)
 8005c08:	10800037 	ldwio	r2,0(r2)
 8005c0c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 8005c10:	e0bffb17 	ldw	r2,-20(fp)
 8005c14:	10a0000c 	andi	r2,r2,32768
 8005c18:	10000626 	beq	r2,zero,8005c34 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8005c1c:	e0bff817 	ldw	r2,-32(fp)
 8005c20:	10c00044 	addi	r3,r2,1
 8005c24:	e0fff815 	stw	r3,-32(fp)
 8005c28:	e0fffb17 	ldw	r3,-20(fp)
 8005c2c:	10c00005 	stb	r3,0(r2)
 8005c30:	00000806 	br	8005c54 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
 8005c34:	e0fff817 	ldw	r3,-32(fp)
 8005c38:	e0bffd17 	ldw	r2,-12(fp)
 8005c3c:	18800126 	beq	r3,r2,8005c44 <altera_avalon_jtag_uart_read+0x84>
      break;
 8005c40:	00000706 	br	8005c60 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
 8005c44:	e0bfff17 	ldw	r2,-4(fp)
 8005c48:	1090000c 	andi	r2,r2,16384
 8005c4c:	10000126 	beq	r2,zero,8005c54 <altera_avalon_jtag_uart_read+0x94>
      break;   
 8005c50:	00000306 	br	8005c60 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 8005c54:	e0fff817 	ldw	r3,-32(fp)
 8005c58:	e0bffa17 	ldw	r2,-24(fp)
 8005c5c:	18bfe936 	bltu	r3,r2,8005c04 <__alt_data_end+0xfc005c04>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 8005c60:	e0fff817 	ldw	r3,-32(fp)
 8005c64:	e0bffd17 	ldw	r2,-12(fp)
 8005c68:	18800426 	beq	r3,r2,8005c7c <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
 8005c6c:	e0fff817 	ldw	r3,-32(fp)
 8005c70:	e0bffd17 	ldw	r2,-12(fp)
 8005c74:	1885c83a 	sub	r2,r3,r2
 8005c78:	00000606 	br	8005c94 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
 8005c7c:	e0bfff17 	ldw	r2,-4(fp)
 8005c80:	1090000c 	andi	r2,r2,16384
 8005c84:	10000226 	beq	r2,zero,8005c90 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
 8005c88:	00bffd44 	movi	r2,-11
 8005c8c:	00000106 	br	8005c94 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
 8005c90:	00bffec4 	movi	r2,-5
}
 8005c94:	e037883a 	mov	sp,fp
 8005c98:	df000017 	ldw	fp,0(sp)
 8005c9c:	dec00104 	addi	sp,sp,4
 8005ca0:	f800283a 	ret

08005ca4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8005ca4:	defff904 	addi	sp,sp,-28
 8005ca8:	df000615 	stw	fp,24(sp)
 8005cac:	df000604 	addi	fp,sp,24
 8005cb0:	e13ffc15 	stw	r4,-16(fp)
 8005cb4:	e17ffd15 	stw	r5,-12(fp)
 8005cb8:	e1bffe15 	stw	r6,-8(fp)
 8005cbc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8005cc0:	e0bffc17 	ldw	r2,-16(fp)
 8005cc4:	10800017 	ldw	r2,0(r2)
 8005cc8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 8005ccc:	e0bffe17 	ldw	r2,-8(fp)
 8005cd0:	e0fffd17 	ldw	r3,-12(fp)
 8005cd4:	1885883a 	add	r2,r3,r2
 8005cd8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 8005cdc:	00000e06 	br	8005d18 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8005ce0:	e0bffa17 	ldw	r2,-24(fp)
 8005ce4:	10800104 	addi	r2,r2,4
 8005ce8:	10800037 	ldwio	r2,0(r2)
 8005cec:	10bfffec 	andhi	r2,r2,65535
 8005cf0:	10000926 	beq	r2,zero,8005d18 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8005cf4:	e0fffa17 	ldw	r3,-24(fp)
 8005cf8:	e0bffd17 	ldw	r2,-12(fp)
 8005cfc:	11000044 	addi	r4,r2,1
 8005d00:	e13ffd15 	stw	r4,-12(fp)
 8005d04:	10800003 	ldbu	r2,0(r2)
 8005d08:	10803fcc 	andi	r2,r2,255
 8005d0c:	1080201c 	xori	r2,r2,128
 8005d10:	10bfe004 	addi	r2,r2,-128
 8005d14:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8005d18:	e0fffd17 	ldw	r3,-12(fp)
 8005d1c:	e0bffb17 	ldw	r2,-20(fp)
 8005d20:	18bfef36 	bltu	r3,r2,8005ce0 <__alt_data_end+0xfc005ce0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8005d24:	e0bffe17 	ldw	r2,-8(fp)
}
 8005d28:	e037883a 	mov	sp,fp
 8005d2c:	df000017 	ldw	fp,0(sp)
 8005d30:	dec00104 	addi	sp,sp,4
 8005d34:	f800283a 	ret

08005d38 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8005d38:	defffd04 	addi	sp,sp,-12
 8005d3c:	df000215 	stw	fp,8(sp)
 8005d40:	df000204 	addi	fp,sp,8
 8005d44:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005d48:	e0bfff17 	ldw	r2,-4(fp)
 8005d4c:	10800a17 	ldw	r2,40(r2)
 8005d50:	10800104 	addi	r2,r2,4
 8005d54:	10800037 	ldwio	r2,0(r2)
 8005d58:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 8005d5c:	e0bffe17 	ldw	r2,-8(fp)
 8005d60:	10800054 	ori	r2,r2,1
 8005d64:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8005d68:	e0bfff17 	ldw	r2,-4(fp)
 8005d6c:	10800a17 	ldw	r2,40(r2)
 8005d70:	10800104 	addi	r2,r2,4
 8005d74:	1007883a 	mov	r3,r2
 8005d78:	e0bffe17 	ldw	r2,-8(fp)
 8005d7c:	18800035 	stwio	r2,0(r3)
}
 8005d80:	e037883a 	mov	sp,fp
 8005d84:	df000017 	ldw	fp,0(sp)
 8005d88:	dec00104 	addi	sp,sp,4
 8005d8c:	f800283a 	ret

08005d90 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8005d90:	defffd04 	addi	sp,sp,-12
 8005d94:	df000215 	stw	fp,8(sp)
 8005d98:	df000204 	addi	fp,sp,8
 8005d9c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005da0:	e0bfff17 	ldw	r2,-4(fp)
 8005da4:	10800a17 	ldw	r2,40(r2)
 8005da8:	10800104 	addi	r2,r2,4
 8005dac:	10800037 	ldwio	r2,0(r2)
 8005db0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 8005db4:	e0fffe17 	ldw	r3,-8(fp)
 8005db8:	00bfff84 	movi	r2,-2
 8005dbc:	1884703a 	and	r2,r3,r2
 8005dc0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8005dc4:	e0bfff17 	ldw	r2,-4(fp)
 8005dc8:	10800a17 	ldw	r2,40(r2)
 8005dcc:	10800104 	addi	r2,r2,4
 8005dd0:	1007883a 	mov	r3,r2
 8005dd4:	e0bffe17 	ldw	r2,-8(fp)
 8005dd8:	18800035 	stwio	r2,0(r3)
}
 8005ddc:	e037883a 	mov	sp,fp
 8005de0:	df000017 	ldw	fp,0(sp)
 8005de4:	dec00104 	addi	sp,sp,4
 8005de8:	f800283a 	ret

08005dec <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 8005dec:	defffd04 	addi	sp,sp,-12
 8005df0:	df000215 	stw	fp,8(sp)
 8005df4:	df000204 	addi	fp,sp,8
 8005df8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 8005dfc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 8005e00:	e0bfff17 	ldw	r2,-4(fp)
 8005e04:	10800a17 	ldw	r2,40(r2)
 8005e08:	10800084 	addi	r2,r2,2
 8005e0c:	1080002b 	ldhuio	r2,0(r2)
 8005e10:	10bfffcc 	andi	r2,r2,65535
 8005e14:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 8005e18:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8005e1c:	e037883a 	mov	sp,fp
 8005e20:	df000017 	ldw	fp,0(sp)
 8005e24:	dec00104 	addi	sp,sp,4
 8005e28:	f800283a 	ret

08005e2c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 8005e2c:	defffd04 	addi	sp,sp,-12
 8005e30:	df000215 	stw	fp,8(sp)
 8005e34:	df000204 	addi	fp,sp,8
 8005e38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005e3c:	e0bfff17 	ldw	r2,-4(fp)
 8005e40:	10800a17 	ldw	r2,40(r2)
 8005e44:	10800104 	addi	r2,r2,4
 8005e48:	10800037 	ldwio	r2,0(r2)
 8005e4c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 8005e50:	e0bffe17 	ldw	r2,-8(fp)
 8005e54:	1004d43a 	srli	r2,r2,16
}
 8005e58:	e037883a 	mov	sp,fp
 8005e5c:	df000017 	ldw	fp,0(sp)
 8005e60:	dec00104 	addi	sp,sp,4
 8005e64:	f800283a 	ret

08005e68 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 8005e68:	defffd04 	addi	sp,sp,-12
 8005e6c:	df000215 	stw	fp,8(sp)
 8005e70:	df000204 	addi	fp,sp,8
 8005e74:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 8005e78:	e0bfff17 	ldw	r2,-4(fp)
 8005e7c:	1080800c 	andi	r2,r2,512
 8005e80:	1004d27a 	srli	r2,r2,9
 8005e84:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 8005e88:	e0bffe17 	ldw	r2,-8(fp)
 8005e8c:	10000226 	beq	r2,zero,8005e98 <alt_up_rs232_check_parity+0x30>
 8005e90:	00bfffc4 	movi	r2,-1
 8005e94:	00000106 	br	8005e9c <alt_up_rs232_check_parity+0x34>
 8005e98:	0005883a 	mov	r2,zero
}
 8005e9c:	e037883a 	mov	sp,fp
 8005ea0:	df000017 	ldw	fp,0(sp)
 8005ea4:	dec00104 	addi	sp,sp,4
 8005ea8:	f800283a 	ret

08005eac <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 8005eac:	defffd04 	addi	sp,sp,-12
 8005eb0:	df000215 	stw	fp,8(sp)
 8005eb4:	df000204 	addi	fp,sp,8
 8005eb8:	e13ffe15 	stw	r4,-8(fp)
 8005ebc:	2805883a 	mov	r2,r5
 8005ec0:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 8005ec4:	e0bffe17 	ldw	r2,-8(fp)
 8005ec8:	10800a17 	ldw	r2,40(r2)
 8005ecc:	1007883a 	mov	r3,r2
 8005ed0:	e0bfff03 	ldbu	r2,-4(fp)
 8005ed4:	18800035 	stwio	r2,0(r3)
	return 0;
 8005ed8:	0005883a 	mov	r2,zero
}
 8005edc:	e037883a 	mov	sp,fp
 8005ee0:	df000017 	ldw	fp,0(sp)
 8005ee4:	dec00104 	addi	sp,sp,4
 8005ee8:	f800283a 	ret

08005eec <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 8005eec:	defffa04 	addi	sp,sp,-24
 8005ef0:	dfc00515 	stw	ra,20(sp)
 8005ef4:	df000415 	stw	fp,16(sp)
 8005ef8:	df000404 	addi	fp,sp,16
 8005efc:	e13ffd15 	stw	r4,-12(fp)
 8005f00:	e17ffe15 	stw	r5,-8(fp)
 8005f04:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 8005f08:	e0bffd17 	ldw	r2,-12(fp)
 8005f0c:	10800a17 	ldw	r2,40(r2)
 8005f10:	10800037 	ldwio	r2,0(r2)
 8005f14:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 8005f18:	e0bffc17 	ldw	r2,-16(fp)
 8005f1c:	1007883a 	mov	r3,r2
 8005f20:	e0bffe17 	ldw	r2,-8(fp)
 8005f24:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 8005f28:	e13ffc17 	ldw	r4,-16(fp)
 8005f2c:	8005e680 	call	8005e68 <alt_up_rs232_check_parity>
 8005f30:	1007883a 	mov	r3,r2
 8005f34:	e0bfff17 	ldw	r2,-4(fp)
 8005f38:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 8005f3c:	e0bffc17 	ldw	r2,-16(fp)
 8005f40:	10a0000c 	andi	r2,r2,32768
 8005f44:	1004d3fa 	srli	r2,r2,15
 8005f48:	10bfffc4 	addi	r2,r2,-1
}
 8005f4c:	e037883a 	mov	sp,fp
 8005f50:	dfc00117 	ldw	ra,4(sp)
 8005f54:	df000017 	ldw	fp,0(sp)
 8005f58:	dec00204 	addi	sp,sp,8
 8005f5c:	f800283a 	ret

08005f60 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 8005f60:	defff804 	addi	sp,sp,-32
 8005f64:	dfc00715 	stw	ra,28(sp)
 8005f68:	df000615 	stw	fp,24(sp)
 8005f6c:	df000604 	addi	fp,sp,24
 8005f70:	e13ffd15 	stw	r4,-12(fp)
 8005f74:	e17ffe15 	stw	r5,-8(fp)
 8005f78:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8005f7c:	e0bffd17 	ldw	r2,-12(fp)
 8005f80:	10800017 	ldw	r2,0(r2)
 8005f84:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 8005f88:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 8005f8c:	00000e06 	br	8005fc8 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 8005f90:	e0bffe17 	ldw	r2,-8(fp)
 8005f94:	10c00044 	addi	r3,r2,1
 8005f98:	e0fffe15 	stw	r3,-8(fp)
 8005f9c:	e0fffc04 	addi	r3,fp,-16
 8005fa0:	e13ffb17 	ldw	r4,-20(fp)
 8005fa4:	100b883a 	mov	r5,r2
 8005fa8:	180d883a 	mov	r6,r3
 8005fac:	8005eec0 	call	8005eec <alt_up_rs232_read_data>
 8005fb0:	1000041e 	bne	r2,zero,8005fc4 <alt_up_rs232_read_fd+0x64>
			count++;
 8005fb4:	e0bffa17 	ldw	r2,-24(fp)
 8005fb8:	10800044 	addi	r2,r2,1
 8005fbc:	e0bffa15 	stw	r2,-24(fp)
 8005fc0:	00000106 	br	8005fc8 <alt_up_rs232_read_fd+0x68>
		else
			break;
 8005fc4:	00000406 	br	8005fd8 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 8005fc8:	e0bfff17 	ldw	r2,-4(fp)
 8005fcc:	10ffffc4 	addi	r3,r2,-1
 8005fd0:	e0ffff15 	stw	r3,-4(fp)
 8005fd4:	103fee1e 	bne	r2,zero,8005f90 <__alt_data_end+0xfc005f90>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 8005fd8:	e0bffa17 	ldw	r2,-24(fp)
}
 8005fdc:	e037883a 	mov	sp,fp
 8005fe0:	dfc00117 	ldw	ra,4(sp)
 8005fe4:	df000017 	ldw	fp,0(sp)
 8005fe8:	dec00204 	addi	sp,sp,8
 8005fec:	f800283a 	ret

08005ff0 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 8005ff0:	defff904 	addi	sp,sp,-28
 8005ff4:	dfc00615 	stw	ra,24(sp)
 8005ff8:	df000515 	stw	fp,20(sp)
 8005ffc:	df000504 	addi	fp,sp,20
 8006000:	e13ffd15 	stw	r4,-12(fp)
 8006004:	e17ffe15 	stw	r5,-8(fp)
 8006008:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 800600c:	e0bffd17 	ldw	r2,-12(fp)
 8006010:	10800017 	ldw	r2,0(r2)
 8006014:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 8006018:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 800601c:	00000f06 	br	800605c <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 8006020:	e0bffe17 	ldw	r2,-8(fp)
 8006024:	10800003 	ldbu	r2,0(r2)
 8006028:	10803fcc 	andi	r2,r2,255
 800602c:	e13ffc17 	ldw	r4,-16(fp)
 8006030:	100b883a 	mov	r5,r2
 8006034:	8005eac0 	call	8005eac <alt_up_rs232_write_data>
 8006038:	1000071e 	bne	r2,zero,8006058 <alt_up_rs232_write_fd+0x68>
		{
			count++;
 800603c:	e0bffb17 	ldw	r2,-20(fp)
 8006040:	10800044 	addi	r2,r2,1
 8006044:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 8006048:	e0bffe17 	ldw	r2,-8(fp)
 800604c:	10800044 	addi	r2,r2,1
 8006050:	e0bffe15 	stw	r2,-8(fp)
 8006054:	00000106 	br	800605c <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
 8006058:	00000406 	br	800606c <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 800605c:	e0bfff17 	ldw	r2,-4(fp)
 8006060:	10ffffc4 	addi	r3,r2,-1
 8006064:	e0ffff15 	stw	r3,-4(fp)
 8006068:	103fed1e 	bne	r2,zero,8006020 <__alt_data_end+0xfc006020>
			ptr++;
		}
		else
			break;
	}
	return count;
 800606c:	e0bffb17 	ldw	r2,-20(fp)
}
 8006070:	e037883a 	mov	sp,fp
 8006074:	dfc00117 	ldw	ra,4(sp)
 8006078:	df000017 	ldw	fp,0(sp)
 800607c:	dec00204 	addi	sp,sp,8
 8006080:	f800283a 	ret

08006084 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 8006084:	defffc04 	addi	sp,sp,-16
 8006088:	dfc00315 	stw	ra,12(sp)
 800608c:	df000215 	stw	fp,8(sp)
 8006090:	df000204 	addi	fp,sp,8
 8006094:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 8006098:	e13fff17 	ldw	r4,-4(fp)
 800609c:	01420034 	movhi	r5,2048
 80060a0:	295f1704 	addi	r5,r5,31836
 80060a4:	80046380 	call	8004638 <alt_find_dev>
 80060a8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80060ac:	e0bffe17 	ldw	r2,-8(fp)
}
 80060b0:	e037883a 	mov	sp,fp
 80060b4:	dfc00117 	ldw	ra,4(sp)
 80060b8:	df000017 	ldw	fp,0(sp)
 80060bc:	dec00204 	addi	sp,sp,8
 80060c0:	f800283a 	ret

080060c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80060c4:	defffe04 	addi	sp,sp,-8
 80060c8:	dfc00115 	stw	ra,4(sp)
 80060cc:	df000015 	stw	fp,0(sp)
 80060d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80060d4:	00820034 	movhi	r2,2048
 80060d8:	109f1304 	addi	r2,r2,31820
 80060dc:	10800017 	ldw	r2,0(r2)
 80060e0:	10000526 	beq	r2,zero,80060f8 <alt_get_errno+0x34>
 80060e4:	00820034 	movhi	r2,2048
 80060e8:	109f1304 	addi	r2,r2,31820
 80060ec:	10800017 	ldw	r2,0(r2)
 80060f0:	103ee83a 	callr	r2
 80060f4:	00000206 	br	8006100 <alt_get_errno+0x3c>
 80060f8:	00820074 	movhi	r2,2049
 80060fc:	10a14404 	addi	r2,r2,-31472
}
 8006100:	e037883a 	mov	sp,fp
 8006104:	dfc00117 	ldw	ra,4(sp)
 8006108:	df000017 	ldw	fp,0(sp)
 800610c:	dec00204 	addi	sp,sp,8
 8006110:	f800283a 	ret

08006114 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8006114:	defffb04 	addi	sp,sp,-20
 8006118:	dfc00415 	stw	ra,16(sp)
 800611c:	df000315 	stw	fp,12(sp)
 8006120:	df000304 	addi	fp,sp,12
 8006124:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8006128:	e0bfff17 	ldw	r2,-4(fp)
 800612c:	10000816 	blt	r2,zero,8006150 <close+0x3c>
 8006130:	e13fff17 	ldw	r4,-4(fp)
 8006134:	01400304 	movi	r5,12
 8006138:	80026f80 	call	80026f8 <__mulsi3>
 800613c:	1007883a 	mov	r3,r2
 8006140:	00820034 	movhi	r2,2048
 8006144:	109e9b04 	addi	r2,r2,31340
 8006148:	1885883a 	add	r2,r3,r2
 800614c:	00000106 	br	8006154 <close+0x40>
 8006150:	0005883a 	mov	r2,zero
 8006154:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8006158:	e0bffd17 	ldw	r2,-12(fp)
 800615c:	10001926 	beq	r2,zero,80061c4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8006160:	e0bffd17 	ldw	r2,-12(fp)
 8006164:	10800017 	ldw	r2,0(r2)
 8006168:	10800417 	ldw	r2,16(r2)
 800616c:	10000626 	beq	r2,zero,8006188 <close+0x74>
 8006170:	e0bffd17 	ldw	r2,-12(fp)
 8006174:	10800017 	ldw	r2,0(r2)
 8006178:	10800417 	ldw	r2,16(r2)
 800617c:	e13ffd17 	ldw	r4,-12(fp)
 8006180:	103ee83a 	callr	r2
 8006184:	00000106 	br	800618c <close+0x78>
 8006188:	0005883a 	mov	r2,zero
 800618c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8006190:	e13fff17 	ldw	r4,-4(fp)
 8006194:	8006a4c0 	call	8006a4c <alt_release_fd>
    if (rval < 0)
 8006198:	e0bffe17 	ldw	r2,-8(fp)
 800619c:	1000070e 	bge	r2,zero,80061bc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80061a0:	80060c40 	call	80060c4 <alt_get_errno>
 80061a4:	1007883a 	mov	r3,r2
 80061a8:	e0bffe17 	ldw	r2,-8(fp)
 80061ac:	0085c83a 	sub	r2,zero,r2
 80061b0:	18800015 	stw	r2,0(r3)
      return -1;
 80061b4:	00bfffc4 	movi	r2,-1
 80061b8:	00000706 	br	80061d8 <close+0xc4>
    }
    return 0;
 80061bc:	0005883a 	mov	r2,zero
 80061c0:	00000506 	br	80061d8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80061c4:	80060c40 	call	80060c4 <alt_get_errno>
 80061c8:	1007883a 	mov	r3,r2
 80061cc:	00801444 	movi	r2,81
 80061d0:	18800015 	stw	r2,0(r3)
    return -1;
 80061d4:	00bfffc4 	movi	r2,-1
  }
}
 80061d8:	e037883a 	mov	sp,fp
 80061dc:	dfc00117 	ldw	ra,4(sp)
 80061e0:	df000017 	ldw	fp,0(sp)
 80061e4:	dec00204 	addi	sp,sp,8
 80061e8:	f800283a 	ret

080061ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80061ec:	deffff04 	addi	sp,sp,-4
 80061f0:	df000015 	stw	fp,0(sp)
 80061f4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80061f8:	e037883a 	mov	sp,fp
 80061fc:	df000017 	ldw	fp,0(sp)
 8006200:	dec00104 	addi	sp,sp,4
 8006204:	f800283a 	ret

08006208 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8006208:	defffc04 	addi	sp,sp,-16
 800620c:	df000315 	stw	fp,12(sp)
 8006210:	df000304 	addi	fp,sp,12
 8006214:	e13ffd15 	stw	r4,-12(fp)
 8006218:	e17ffe15 	stw	r5,-8(fp)
 800621c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8006220:	e0bfff17 	ldw	r2,-4(fp)
}
 8006224:	e037883a 	mov	sp,fp
 8006228:	df000017 	ldw	fp,0(sp)
 800622c:	dec00104 	addi	sp,sp,4
 8006230:	f800283a 	ret

08006234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006234:	defffe04 	addi	sp,sp,-8
 8006238:	dfc00115 	stw	ra,4(sp)
 800623c:	df000015 	stw	fp,0(sp)
 8006240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006244:	00820034 	movhi	r2,2048
 8006248:	109f1304 	addi	r2,r2,31820
 800624c:	10800017 	ldw	r2,0(r2)
 8006250:	10000526 	beq	r2,zero,8006268 <alt_get_errno+0x34>
 8006254:	00820034 	movhi	r2,2048
 8006258:	109f1304 	addi	r2,r2,31820
 800625c:	10800017 	ldw	r2,0(r2)
 8006260:	103ee83a 	callr	r2
 8006264:	00000206 	br	8006270 <alt_get_errno+0x3c>
 8006268:	00820074 	movhi	r2,2049
 800626c:	10a14404 	addi	r2,r2,-31472
}
 8006270:	e037883a 	mov	sp,fp
 8006274:	dfc00117 	ldw	ra,4(sp)
 8006278:	df000017 	ldw	fp,0(sp)
 800627c:	dec00204 	addi	sp,sp,8
 8006280:	f800283a 	ret

08006284 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8006284:	defffa04 	addi	sp,sp,-24
 8006288:	dfc00515 	stw	ra,20(sp)
 800628c:	df000415 	stw	fp,16(sp)
 8006290:	df000404 	addi	fp,sp,16
 8006294:	e13ffe15 	stw	r4,-8(fp)
 8006298:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800629c:	e0bffe17 	ldw	r2,-8(fp)
 80062a0:	10000326 	beq	r2,zero,80062b0 <alt_dev_llist_insert+0x2c>
 80062a4:	e0bffe17 	ldw	r2,-8(fp)
 80062a8:	10800217 	ldw	r2,8(r2)
 80062ac:	1000061e 	bne	r2,zero,80062c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80062b0:	80062340 	call	8006234 <alt_get_errno>
 80062b4:	1007883a 	mov	r3,r2
 80062b8:	00800584 	movi	r2,22
 80062bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80062c0:	00bffa84 	movi	r2,-22
 80062c4:	00001306 	br	8006314 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80062c8:	e0bffe17 	ldw	r2,-8(fp)
 80062cc:	e0ffff17 	ldw	r3,-4(fp)
 80062d0:	e0fffc15 	stw	r3,-16(fp)
 80062d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80062d8:	e0bffd17 	ldw	r2,-12(fp)
 80062dc:	e0fffc17 	ldw	r3,-16(fp)
 80062e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80062e4:	e0bffc17 	ldw	r2,-16(fp)
 80062e8:	10c00017 	ldw	r3,0(r2)
 80062ec:	e0bffd17 	ldw	r2,-12(fp)
 80062f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80062f4:	e0bffc17 	ldw	r2,-16(fp)
 80062f8:	10800017 	ldw	r2,0(r2)
 80062fc:	e0fffd17 	ldw	r3,-12(fp)
 8006300:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8006304:	e0bffc17 	ldw	r2,-16(fp)
 8006308:	e0fffd17 	ldw	r3,-12(fp)
 800630c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8006310:	0005883a 	mov	r2,zero
}
 8006314:	e037883a 	mov	sp,fp
 8006318:	dfc00117 	ldw	ra,4(sp)
 800631c:	df000017 	ldw	fp,0(sp)
 8006320:	dec00204 	addi	sp,sp,8
 8006324:	f800283a 	ret

08006328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006328:	defffe04 	addi	sp,sp,-8
 800632c:	dfc00115 	stw	ra,4(sp)
 8006330:	df000015 	stw	fp,0(sp)
 8006334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006338:	00820034 	movhi	r2,2048
 800633c:	109f1304 	addi	r2,r2,31820
 8006340:	10800017 	ldw	r2,0(r2)
 8006344:	10000526 	beq	r2,zero,800635c <alt_get_errno+0x34>
 8006348:	00820034 	movhi	r2,2048
 800634c:	109f1304 	addi	r2,r2,31820
 8006350:	10800017 	ldw	r2,0(r2)
 8006354:	103ee83a 	callr	r2
 8006358:	00000206 	br	8006364 <alt_get_errno+0x3c>
 800635c:	00820074 	movhi	r2,2049
 8006360:	10a14404 	addi	r2,r2,-31472
}
 8006364:	e037883a 	mov	sp,fp
 8006368:	dfc00117 	ldw	ra,4(sp)
 800636c:	df000017 	ldw	fp,0(sp)
 8006370:	dec00204 	addi	sp,sp,8
 8006374:	f800283a 	ret

08006378 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 8006378:	defffc04 	addi	sp,sp,-16
 800637c:	dfc00315 	stw	ra,12(sp)
 8006380:	df000215 	stw	fp,8(sp)
 8006384:	df000204 	addi	fp,sp,8
 8006388:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 800638c:	e13fff17 	ldw	r4,-4(fp)
 8006390:	d1601f04 	addi	r5,gp,-32644
 8006394:	80046380 	call	8004638 <alt_find_dev>
 8006398:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 800639c:	e0bffe17 	ldw	r2,-8(fp)
 80063a0:	1000041e 	bne	r2,zero,80063b4 <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 80063a4:	80063280 	call	8006328 <alt_get_errno>
 80063a8:	1007883a 	mov	r3,r2
 80063ac:	008004c4 	movi	r2,19
 80063b0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80063b4:	e0bffe17 	ldw	r2,-8(fp)
}
 80063b8:	e037883a 	mov	sp,fp
 80063bc:	dfc00117 	ldw	ra,4(sp)
 80063c0:	df000017 	ldw	fp,0(sp)
 80063c4:	dec00204 	addi	sp,sp,8
 80063c8:	f800283a 	ret

080063cc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80063cc:	defffd04 	addi	sp,sp,-12
 80063d0:	dfc00215 	stw	ra,8(sp)
 80063d4:	df000115 	stw	fp,4(sp)
 80063d8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80063dc:	00820034 	movhi	r2,2048
 80063e0:	109bf804 	addi	r2,r2,28640
 80063e4:	e0bfff15 	stw	r2,-4(fp)
 80063e8:	00000606 	br	8006404 <_do_ctors+0x38>
        (*ctor) (); 
 80063ec:	e0bfff17 	ldw	r2,-4(fp)
 80063f0:	10800017 	ldw	r2,0(r2)
 80063f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80063f8:	e0bfff17 	ldw	r2,-4(fp)
 80063fc:	10bfff04 	addi	r2,r2,-4
 8006400:	e0bfff15 	stw	r2,-4(fp)
 8006404:	e0ffff17 	ldw	r3,-4(fp)
 8006408:	00820034 	movhi	r2,2048
 800640c:	109bf904 	addi	r2,r2,28644
 8006410:	18bff62e 	bgeu	r3,r2,80063ec <__alt_data_end+0xfc0063ec>
        (*ctor) (); 
}
 8006414:	e037883a 	mov	sp,fp
 8006418:	dfc00117 	ldw	ra,4(sp)
 800641c:	df000017 	ldw	fp,0(sp)
 8006420:	dec00204 	addi	sp,sp,8
 8006424:	f800283a 	ret

08006428 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8006428:	defffd04 	addi	sp,sp,-12
 800642c:	dfc00215 	stw	ra,8(sp)
 8006430:	df000115 	stw	fp,4(sp)
 8006434:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006438:	00820034 	movhi	r2,2048
 800643c:	109bf804 	addi	r2,r2,28640
 8006440:	e0bfff15 	stw	r2,-4(fp)
 8006444:	00000606 	br	8006460 <_do_dtors+0x38>
        (*dtor) (); 
 8006448:	e0bfff17 	ldw	r2,-4(fp)
 800644c:	10800017 	ldw	r2,0(r2)
 8006450:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006454:	e0bfff17 	ldw	r2,-4(fp)
 8006458:	10bfff04 	addi	r2,r2,-4
 800645c:	e0bfff15 	stw	r2,-4(fp)
 8006460:	e0ffff17 	ldw	r3,-4(fp)
 8006464:	00820034 	movhi	r2,2048
 8006468:	109bf904 	addi	r2,r2,28644
 800646c:	18bff62e 	bgeu	r3,r2,8006448 <__alt_data_end+0xfc006448>
        (*dtor) (); 
}
 8006470:	e037883a 	mov	sp,fp
 8006474:	dfc00117 	ldw	ra,4(sp)
 8006478:	df000017 	ldw	fp,0(sp)
 800647c:	dec00204 	addi	sp,sp,8
 8006480:	f800283a 	ret

08006484 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8006484:	deffff04 	addi	sp,sp,-4
 8006488:	df000015 	stw	fp,0(sp)
 800648c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8006490:	e037883a 	mov	sp,fp
 8006494:	df000017 	ldw	fp,0(sp)
 8006498:	dec00104 	addi	sp,sp,4
 800649c:	f800283a 	ret

080064a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80064a0:	defff804 	addi	sp,sp,-32
 80064a4:	dfc00715 	stw	ra,28(sp)
 80064a8:	df000615 	stw	fp,24(sp)
 80064ac:	dc000515 	stw	r16,20(sp)
 80064b0:	df000604 	addi	fp,sp,24
 80064b4:	e13ffb15 	stw	r4,-20(fp)
 80064b8:	e17ffc15 	stw	r5,-16(fp)
 80064bc:	e1bffd15 	stw	r6,-12(fp)
 80064c0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80064c4:	e13ffc17 	ldw	r4,-16(fp)
 80064c8:	e17ffd17 	ldw	r5,-12(fp)
 80064cc:	e1bffe17 	ldw	r6,-8(fp)
 80064d0:	80068ec0 	call	80068ec <open>
 80064d4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80064d8:	e0bffa17 	ldw	r2,-24(fp)
 80064dc:	10002216 	blt	r2,zero,8006568 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80064e0:	04020034 	movhi	r16,2048
 80064e4:	841e9b04 	addi	r16,r16,31340
 80064e8:	e0bffa17 	ldw	r2,-24(fp)
 80064ec:	1009883a 	mov	r4,r2
 80064f0:	01400304 	movi	r5,12
 80064f4:	80026f80 	call	80026f8 <__mulsi3>
 80064f8:	8085883a 	add	r2,r16,r2
 80064fc:	10c00017 	ldw	r3,0(r2)
 8006500:	e0bffb17 	ldw	r2,-20(fp)
 8006504:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006508:	04020034 	movhi	r16,2048
 800650c:	841e9b04 	addi	r16,r16,31340
 8006510:	e0bffa17 	ldw	r2,-24(fp)
 8006514:	1009883a 	mov	r4,r2
 8006518:	01400304 	movi	r5,12
 800651c:	80026f80 	call	80026f8 <__mulsi3>
 8006520:	8085883a 	add	r2,r16,r2
 8006524:	10800104 	addi	r2,r2,4
 8006528:	10c00017 	ldw	r3,0(r2)
 800652c:	e0bffb17 	ldw	r2,-20(fp)
 8006530:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8006534:	04020034 	movhi	r16,2048
 8006538:	841e9b04 	addi	r16,r16,31340
 800653c:	e0bffa17 	ldw	r2,-24(fp)
 8006540:	1009883a 	mov	r4,r2
 8006544:	01400304 	movi	r5,12
 8006548:	80026f80 	call	80026f8 <__mulsi3>
 800654c:	8085883a 	add	r2,r16,r2
 8006550:	10800204 	addi	r2,r2,8
 8006554:	10c00017 	ldw	r3,0(r2)
 8006558:	e0bffb17 	ldw	r2,-20(fp)
 800655c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006560:	e13ffa17 	ldw	r4,-24(fp)
 8006564:	8006a4c0 	call	8006a4c <alt_release_fd>
  }
} 
 8006568:	e6ffff04 	addi	sp,fp,-4
 800656c:	dfc00217 	ldw	ra,8(sp)
 8006570:	df000117 	ldw	fp,4(sp)
 8006574:	dc000017 	ldw	r16,0(sp)
 8006578:	dec00304 	addi	sp,sp,12
 800657c:	f800283a 	ret

08006580 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8006580:	defffb04 	addi	sp,sp,-20
 8006584:	dfc00415 	stw	ra,16(sp)
 8006588:	df000315 	stw	fp,12(sp)
 800658c:	df000304 	addi	fp,sp,12
 8006590:	e13ffd15 	stw	r4,-12(fp)
 8006594:	e17ffe15 	stw	r5,-8(fp)
 8006598:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800659c:	01020034 	movhi	r4,2048
 80065a0:	211e9e04 	addi	r4,r4,31352
 80065a4:	e17ffd17 	ldw	r5,-12(fp)
 80065a8:	01800044 	movi	r6,1
 80065ac:	01c07fc4 	movi	r7,511
 80065b0:	80064a00 	call	80064a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80065b4:	01020034 	movhi	r4,2048
 80065b8:	211e9b04 	addi	r4,r4,31340
 80065bc:	e17ffe17 	ldw	r5,-8(fp)
 80065c0:	000d883a 	mov	r6,zero
 80065c4:	01c07fc4 	movi	r7,511
 80065c8:	80064a00 	call	80064a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80065cc:	01020034 	movhi	r4,2048
 80065d0:	211ea104 	addi	r4,r4,31364
 80065d4:	e17fff17 	ldw	r5,-4(fp)
 80065d8:	01800044 	movi	r6,1
 80065dc:	01c07fc4 	movi	r7,511
 80065e0:	80064a00 	call	80064a0 <alt_open_fd>
}  
 80065e4:	e037883a 	mov	sp,fp
 80065e8:	dfc00117 	ldw	ra,4(sp)
 80065ec:	df000017 	ldw	fp,0(sp)
 80065f0:	dec00204 	addi	sp,sp,8
 80065f4:	f800283a 	ret

080065f8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 80065f8:	defff004 	addi	sp,sp,-64
 80065fc:	df000f15 	stw	fp,60(sp)
 8006600:	df000f04 	addi	fp,sp,60
 8006604:	e13ffd15 	stw	r4,-12(fp)
 8006608:	e17ffe15 	stw	r5,-8(fp)
 800660c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8006610:	00bffa84 	movi	r2,-22
 8006614:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8006618:	e0bffd17 	ldw	r2,-12(fp)
 800661c:	10800828 	cmpgeui	r2,r2,32
 8006620:	10005c1e 	bne	r2,zero,8006794 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006624:	0005303a 	rdctl	r2,status
 8006628:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800662c:	e0fff317 	ldw	r3,-52(fp)
 8006630:	00bfff84 	movi	r2,-2
 8006634:	1884703a 	and	r2,r3,r2
 8006638:	1001703a 	wrctl	status,r2
  
  return context;
 800663c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8006640:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 8006644:	00820074 	movhi	r2,2049
 8006648:	10a39404 	addi	r2,r2,-29104
 800664c:	e0fffd17 	ldw	r3,-12(fp)
 8006650:	180690fa 	slli	r3,r3,3
 8006654:	10c5883a 	add	r2,r2,r3
 8006658:	e0ffff17 	ldw	r3,-4(fp)
 800665c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8006660:	00820074 	movhi	r2,2049
 8006664:	10a39404 	addi	r2,r2,-29104
 8006668:	e0fffd17 	ldw	r3,-12(fp)
 800666c:	180690fa 	slli	r3,r3,3
 8006670:	10c5883a 	add	r2,r2,r3
 8006674:	10800104 	addi	r2,r2,4
 8006678:	e0fffe17 	ldw	r3,-8(fp)
 800667c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8006680:	e0bfff17 	ldw	r2,-4(fp)
 8006684:	10001f26 	beq	r2,zero,8006704 <alt_irq_register+0x10c>
 8006688:	e0bffd17 	ldw	r2,-12(fp)
 800668c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006690:	0005303a 	rdctl	r2,status
 8006694:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006698:	e0fff517 	ldw	r3,-44(fp)
 800669c:	00bfff84 	movi	r2,-2
 80066a0:	1884703a 	and	r2,r3,r2
 80066a4:	1001703a 	wrctl	status,r2
  
  return context;
 80066a8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80066ac:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 80066b0:	e0bff417 	ldw	r2,-48(fp)
 80066b4:	00c00044 	movi	r3,1
 80066b8:	1884983a 	sll	r2,r3,r2
 80066bc:	1007883a 	mov	r3,r2
 80066c0:	00820074 	movhi	r2,2049
 80066c4:	10a14804 	addi	r2,r2,-31456
 80066c8:	10800017 	ldw	r2,0(r2)
 80066cc:	1886b03a 	or	r3,r3,r2
 80066d0:	00820074 	movhi	r2,2049
 80066d4:	10a14804 	addi	r2,r2,-31456
 80066d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80066dc:	00820074 	movhi	r2,2049
 80066e0:	10a14804 	addi	r2,r2,-31456
 80066e4:	10800017 	ldw	r2,0(r2)
 80066e8:	100170fa 	wrctl	ienable,r2
 80066ec:	e0bff617 	ldw	r2,-40(fp)
 80066f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80066f4:	e0bff717 	ldw	r2,-36(fp)
 80066f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80066fc:	0005883a 	mov	r2,zero
 8006700:	00001f06 	br	8006780 <alt_irq_register+0x188>
 8006704:	e0bffd17 	ldw	r2,-12(fp)
 8006708:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800670c:	0005303a 	rdctl	r2,status
 8006710:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006714:	e0fff917 	ldw	r3,-28(fp)
 8006718:	00bfff84 	movi	r2,-2
 800671c:	1884703a 	and	r2,r3,r2
 8006720:	1001703a 	wrctl	status,r2
  
  return context;
 8006724:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006728:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 800672c:	e0bff817 	ldw	r2,-32(fp)
 8006730:	00c00044 	movi	r3,1
 8006734:	1884983a 	sll	r2,r3,r2
 8006738:	0084303a 	nor	r2,zero,r2
 800673c:	1007883a 	mov	r3,r2
 8006740:	00820074 	movhi	r2,2049
 8006744:	10a14804 	addi	r2,r2,-31456
 8006748:	10800017 	ldw	r2,0(r2)
 800674c:	1886703a 	and	r3,r3,r2
 8006750:	00820074 	movhi	r2,2049
 8006754:	10a14804 	addi	r2,r2,-31456
 8006758:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800675c:	00820074 	movhi	r2,2049
 8006760:	10a14804 	addi	r2,r2,-31456
 8006764:	10800017 	ldw	r2,0(r2)
 8006768:	100170fa 	wrctl	ienable,r2
 800676c:	e0bffa17 	ldw	r2,-24(fp)
 8006770:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006774:	e0bffb17 	ldw	r2,-20(fp)
 8006778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800677c:	0005883a 	mov	r2,zero
 8006780:	e0bff115 	stw	r2,-60(fp)
 8006784:	e0bff217 	ldw	r2,-56(fp)
 8006788:	e0bffc15 	stw	r2,-16(fp)
 800678c:	e0bffc17 	ldw	r2,-16(fp)
 8006790:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8006794:	e0bff117 	ldw	r2,-60(fp)
}
 8006798:	e037883a 	mov	sp,fp
 800679c:	df000017 	ldw	fp,0(sp)
 80067a0:	dec00104 	addi	sp,sp,4
 80067a4:	f800283a 	ret

080067a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80067a8:	defffe04 	addi	sp,sp,-8
 80067ac:	dfc00115 	stw	ra,4(sp)
 80067b0:	df000015 	stw	fp,0(sp)
 80067b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80067b8:	00820034 	movhi	r2,2048
 80067bc:	109f1304 	addi	r2,r2,31820
 80067c0:	10800017 	ldw	r2,0(r2)
 80067c4:	10000526 	beq	r2,zero,80067dc <alt_get_errno+0x34>
 80067c8:	00820034 	movhi	r2,2048
 80067cc:	109f1304 	addi	r2,r2,31820
 80067d0:	10800017 	ldw	r2,0(r2)
 80067d4:	103ee83a 	callr	r2
 80067d8:	00000206 	br	80067e4 <alt_get_errno+0x3c>
 80067dc:	00820074 	movhi	r2,2049
 80067e0:	10a14404 	addi	r2,r2,-31472
}
 80067e4:	e037883a 	mov	sp,fp
 80067e8:	dfc00117 	ldw	ra,4(sp)
 80067ec:	df000017 	ldw	fp,0(sp)
 80067f0:	dec00204 	addi	sp,sp,8
 80067f4:	f800283a 	ret

080067f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80067f8:	defffb04 	addi	sp,sp,-20
 80067fc:	dfc00415 	stw	ra,16(sp)
 8006800:	df000315 	stw	fp,12(sp)
 8006804:	dc000215 	stw	r16,8(sp)
 8006808:	df000304 	addi	fp,sp,12
 800680c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8006810:	e0bffe17 	ldw	r2,-8(fp)
 8006814:	10800217 	ldw	r2,8(r2)
 8006818:	10d00034 	orhi	r3,r2,16384
 800681c:	e0bffe17 	ldw	r2,-8(fp)
 8006820:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006824:	e03ffd15 	stw	zero,-12(fp)
 8006828:	00002306 	br	80068b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800682c:	04020034 	movhi	r16,2048
 8006830:	841e9b04 	addi	r16,r16,31340
 8006834:	e0bffd17 	ldw	r2,-12(fp)
 8006838:	1009883a 	mov	r4,r2
 800683c:	01400304 	movi	r5,12
 8006840:	80026f80 	call	80026f8 <__mulsi3>
 8006844:	8085883a 	add	r2,r16,r2
 8006848:	10c00017 	ldw	r3,0(r2)
 800684c:	e0bffe17 	ldw	r2,-8(fp)
 8006850:	10800017 	ldw	r2,0(r2)
 8006854:	1880151e 	bne	r3,r2,80068ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8006858:	04020034 	movhi	r16,2048
 800685c:	841e9b04 	addi	r16,r16,31340
 8006860:	e0bffd17 	ldw	r2,-12(fp)
 8006864:	1009883a 	mov	r4,r2
 8006868:	01400304 	movi	r5,12
 800686c:	80026f80 	call	80026f8 <__mulsi3>
 8006870:	8085883a 	add	r2,r16,r2
 8006874:	10800204 	addi	r2,r2,8
 8006878:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800687c:	10000b0e 	bge	r2,zero,80068ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8006880:	e13ffd17 	ldw	r4,-12(fp)
 8006884:	01400304 	movi	r5,12
 8006888:	80026f80 	call	80026f8 <__mulsi3>
 800688c:	1007883a 	mov	r3,r2
 8006890:	00820034 	movhi	r2,2048
 8006894:	109e9b04 	addi	r2,r2,31340
 8006898:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800689c:	e0bffe17 	ldw	r2,-8(fp)
 80068a0:	18800226 	beq	r3,r2,80068ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80068a4:	00bffcc4 	movi	r2,-13
 80068a8:	00000a06 	br	80068d4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80068ac:	e0bffd17 	ldw	r2,-12(fp)
 80068b0:	10800044 	addi	r2,r2,1
 80068b4:	e0bffd15 	stw	r2,-12(fp)
 80068b8:	00820034 	movhi	r2,2048
 80068bc:	109f1904 	addi	r2,r2,31844
 80068c0:	10800017 	ldw	r2,0(r2)
 80068c4:	1007883a 	mov	r3,r2
 80068c8:	e0bffd17 	ldw	r2,-12(fp)
 80068cc:	18bfd72e 	bgeu	r3,r2,800682c <__alt_data_end+0xfc00682c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80068d0:	0005883a 	mov	r2,zero
}
 80068d4:	e6ffff04 	addi	sp,fp,-4
 80068d8:	dfc00217 	ldw	ra,8(sp)
 80068dc:	df000117 	ldw	fp,4(sp)
 80068e0:	dc000017 	ldw	r16,0(sp)
 80068e4:	dec00304 	addi	sp,sp,12
 80068e8:	f800283a 	ret

080068ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80068ec:	defff604 	addi	sp,sp,-40
 80068f0:	dfc00915 	stw	ra,36(sp)
 80068f4:	df000815 	stw	fp,32(sp)
 80068f8:	df000804 	addi	fp,sp,32
 80068fc:	e13ffd15 	stw	r4,-12(fp)
 8006900:	e17ffe15 	stw	r5,-8(fp)
 8006904:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8006908:	00bfffc4 	movi	r2,-1
 800690c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8006910:	00bffb44 	movi	r2,-19
 8006914:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8006918:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800691c:	e13ffd17 	ldw	r4,-12(fp)
 8006920:	01420034 	movhi	r5,2048
 8006924:	295f1704 	addi	r5,r5,31836
 8006928:	80046380 	call	8004638 <alt_find_dev>
 800692c:	e0bff815 	stw	r2,-32(fp)
 8006930:	e0bff817 	ldw	r2,-32(fp)
 8006934:	1000051e 	bne	r2,zero,800694c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8006938:	e13ffd17 	ldw	r4,-12(fp)
 800693c:	8006aec0 	call	8006aec <alt_find_file>
 8006940:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8006944:	00800044 	movi	r2,1
 8006948:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800694c:	e0bff817 	ldw	r2,-32(fp)
 8006950:	10002b26 	beq	r2,zero,8006a00 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8006954:	e13ff817 	ldw	r4,-32(fp)
 8006958:	8006c000 	call	8006c00 <alt_get_fd>
 800695c:	e0bff915 	stw	r2,-28(fp)
 8006960:	e0bff917 	ldw	r2,-28(fp)
 8006964:	1000030e 	bge	r2,zero,8006974 <open+0x88>
    {
      status = index;
 8006968:	e0bff917 	ldw	r2,-28(fp)
 800696c:	e0bffa15 	stw	r2,-24(fp)
 8006970:	00002506 	br	8006a08 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8006974:	e13ff917 	ldw	r4,-28(fp)
 8006978:	01400304 	movi	r5,12
 800697c:	80026f80 	call	80026f8 <__mulsi3>
 8006980:	1007883a 	mov	r3,r2
 8006984:	00820034 	movhi	r2,2048
 8006988:	109e9b04 	addi	r2,r2,31340
 800698c:	1885883a 	add	r2,r3,r2
 8006990:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8006994:	e0fffe17 	ldw	r3,-8(fp)
 8006998:	00900034 	movhi	r2,16384
 800699c:	10bfffc4 	addi	r2,r2,-1
 80069a0:	1886703a 	and	r3,r3,r2
 80069a4:	e0bffc17 	ldw	r2,-16(fp)
 80069a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80069ac:	e0bffb17 	ldw	r2,-20(fp)
 80069b0:	1000051e 	bne	r2,zero,80069c8 <open+0xdc>
 80069b4:	e13ffc17 	ldw	r4,-16(fp)
 80069b8:	80067f80 	call	80067f8 <alt_file_locked>
 80069bc:	e0bffa15 	stw	r2,-24(fp)
 80069c0:	e0bffa17 	ldw	r2,-24(fp)
 80069c4:	10001016 	blt	r2,zero,8006a08 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80069c8:	e0bff817 	ldw	r2,-32(fp)
 80069cc:	10800317 	ldw	r2,12(r2)
 80069d0:	10000826 	beq	r2,zero,80069f4 <open+0x108>
 80069d4:	e0bff817 	ldw	r2,-32(fp)
 80069d8:	10800317 	ldw	r2,12(r2)
 80069dc:	e13ffc17 	ldw	r4,-16(fp)
 80069e0:	e17ffd17 	ldw	r5,-12(fp)
 80069e4:	e1bffe17 	ldw	r6,-8(fp)
 80069e8:	e1ffff17 	ldw	r7,-4(fp)
 80069ec:	103ee83a 	callr	r2
 80069f0:	00000106 	br	80069f8 <open+0x10c>
 80069f4:	0005883a 	mov	r2,zero
 80069f8:	e0bffa15 	stw	r2,-24(fp)
 80069fc:	00000206 	br	8006a08 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8006a00:	00bffb44 	movi	r2,-19
 8006a04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8006a08:	e0bffa17 	ldw	r2,-24(fp)
 8006a0c:	1000090e 	bge	r2,zero,8006a34 <open+0x148>
  {
    alt_release_fd (index);  
 8006a10:	e13ff917 	ldw	r4,-28(fp)
 8006a14:	8006a4c0 	call	8006a4c <alt_release_fd>
    ALT_ERRNO = -status;
 8006a18:	80067a80 	call	80067a8 <alt_get_errno>
 8006a1c:	1007883a 	mov	r3,r2
 8006a20:	e0bffa17 	ldw	r2,-24(fp)
 8006a24:	0085c83a 	sub	r2,zero,r2
 8006a28:	18800015 	stw	r2,0(r3)
    return -1;
 8006a2c:	00bfffc4 	movi	r2,-1
 8006a30:	00000106 	br	8006a38 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8006a34:	e0bff917 	ldw	r2,-28(fp)
}
 8006a38:	e037883a 	mov	sp,fp
 8006a3c:	dfc00117 	ldw	ra,4(sp)
 8006a40:	df000017 	ldw	fp,0(sp)
 8006a44:	dec00204 	addi	sp,sp,8
 8006a48:	f800283a 	ret

08006a4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8006a4c:	defffc04 	addi	sp,sp,-16
 8006a50:	dfc00315 	stw	ra,12(sp)
 8006a54:	df000215 	stw	fp,8(sp)
 8006a58:	dc000115 	stw	r16,4(sp)
 8006a5c:	df000204 	addi	fp,sp,8
 8006a60:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8006a64:	e0bffe17 	ldw	r2,-8(fp)
 8006a68:	108000d0 	cmplti	r2,r2,3
 8006a6c:	1000111e 	bne	r2,zero,8006ab4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8006a70:	04020034 	movhi	r16,2048
 8006a74:	841e9b04 	addi	r16,r16,31340
 8006a78:	e0bffe17 	ldw	r2,-8(fp)
 8006a7c:	1009883a 	mov	r4,r2
 8006a80:	01400304 	movi	r5,12
 8006a84:	80026f80 	call	80026f8 <__mulsi3>
 8006a88:	8085883a 	add	r2,r16,r2
 8006a8c:	10800204 	addi	r2,r2,8
 8006a90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8006a94:	04020034 	movhi	r16,2048
 8006a98:	841e9b04 	addi	r16,r16,31340
 8006a9c:	e0bffe17 	ldw	r2,-8(fp)
 8006aa0:	1009883a 	mov	r4,r2
 8006aa4:	01400304 	movi	r5,12
 8006aa8:	80026f80 	call	80026f8 <__mulsi3>
 8006aac:	8085883a 	add	r2,r16,r2
 8006ab0:	10000015 	stw	zero,0(r2)
  }
}
 8006ab4:	e6ffff04 	addi	sp,fp,-4
 8006ab8:	dfc00217 	ldw	ra,8(sp)
 8006abc:	df000117 	ldw	fp,4(sp)
 8006ac0:	dc000017 	ldw	r16,0(sp)
 8006ac4:	dec00304 	addi	sp,sp,12
 8006ac8:	f800283a 	ret

08006acc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8006acc:	deffff04 	addi	sp,sp,-4
 8006ad0:	df000015 	stw	fp,0(sp)
 8006ad4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006ad8:	000170fa 	wrctl	ienable,zero
}
 8006adc:	e037883a 	mov	sp,fp
 8006ae0:	df000017 	ldw	fp,0(sp)
 8006ae4:	dec00104 	addi	sp,sp,4
 8006ae8:	f800283a 	ret

08006aec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006aec:	defffb04 	addi	sp,sp,-20
 8006af0:	dfc00415 	stw	ra,16(sp)
 8006af4:	df000315 	stw	fp,12(sp)
 8006af8:	df000304 	addi	fp,sp,12
 8006afc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006b00:	00820034 	movhi	r2,2048
 8006b04:	109f1504 	addi	r2,r2,31828
 8006b08:	10800017 	ldw	r2,0(r2)
 8006b0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006b10:	00003106 	br	8006bd8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8006b14:	e0bffd17 	ldw	r2,-12(fp)
 8006b18:	10800217 	ldw	r2,8(r2)
 8006b1c:	1009883a 	mov	r4,r2
 8006b20:	80037d00 	call	80037d0 <strlen>
 8006b24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8006b28:	e0bffd17 	ldw	r2,-12(fp)
 8006b2c:	10c00217 	ldw	r3,8(r2)
 8006b30:	e0bffe17 	ldw	r2,-8(fp)
 8006b34:	10bfffc4 	addi	r2,r2,-1
 8006b38:	1885883a 	add	r2,r3,r2
 8006b3c:	10800003 	ldbu	r2,0(r2)
 8006b40:	10803fcc 	andi	r2,r2,255
 8006b44:	1080201c 	xori	r2,r2,128
 8006b48:	10bfe004 	addi	r2,r2,-128
 8006b4c:	10800bd8 	cmpnei	r2,r2,47
 8006b50:	1000031e 	bne	r2,zero,8006b60 <alt_find_file+0x74>
    {
      len -= 1;
 8006b54:	e0bffe17 	ldw	r2,-8(fp)
 8006b58:	10bfffc4 	addi	r2,r2,-1
 8006b5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006b60:	e0bffe17 	ldw	r2,-8(fp)
 8006b64:	e0ffff17 	ldw	r3,-4(fp)
 8006b68:	1885883a 	add	r2,r3,r2
 8006b6c:	10800003 	ldbu	r2,0(r2)
 8006b70:	10803fcc 	andi	r2,r2,255
 8006b74:	1080201c 	xori	r2,r2,128
 8006b78:	10bfe004 	addi	r2,r2,-128
 8006b7c:	10800be0 	cmpeqi	r2,r2,47
 8006b80:	1000081e 	bne	r2,zero,8006ba4 <alt_find_file+0xb8>
 8006b84:	e0bffe17 	ldw	r2,-8(fp)
 8006b88:	e0ffff17 	ldw	r3,-4(fp)
 8006b8c:	1885883a 	add	r2,r3,r2
 8006b90:	10800003 	ldbu	r2,0(r2)
 8006b94:	10803fcc 	andi	r2,r2,255
 8006b98:	1080201c 	xori	r2,r2,128
 8006b9c:	10bfe004 	addi	r2,r2,-128
 8006ba0:	10000a1e 	bne	r2,zero,8006bcc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8006ba4:	e0bffd17 	ldw	r2,-12(fp)
 8006ba8:	10c00217 	ldw	r3,8(r2)
 8006bac:	e0bffe17 	ldw	r2,-8(fp)
 8006bb0:	1809883a 	mov	r4,r3
 8006bb4:	e17fff17 	ldw	r5,-4(fp)
 8006bb8:	100d883a 	mov	r6,r2
 8006bbc:	8006d840 	call	8006d84 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006bc0:	1000021e 	bne	r2,zero,8006bcc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006bc4:	e0bffd17 	ldw	r2,-12(fp)
 8006bc8:	00000806 	br	8006bec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8006bcc:	e0bffd17 	ldw	r2,-12(fp)
 8006bd0:	10800017 	ldw	r2,0(r2)
 8006bd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006bd8:	e0fffd17 	ldw	r3,-12(fp)
 8006bdc:	00820034 	movhi	r2,2048
 8006be0:	109f1504 	addi	r2,r2,31828
 8006be4:	18bfcb1e 	bne	r3,r2,8006b14 <__alt_data_end+0xfc006b14>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006be8:	0005883a 	mov	r2,zero
}
 8006bec:	e037883a 	mov	sp,fp
 8006bf0:	dfc00117 	ldw	ra,4(sp)
 8006bf4:	df000017 	ldw	fp,0(sp)
 8006bf8:	dec00204 	addi	sp,sp,8
 8006bfc:	f800283a 	ret

08006c00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006c00:	defffa04 	addi	sp,sp,-24
 8006c04:	dfc00515 	stw	ra,20(sp)
 8006c08:	df000415 	stw	fp,16(sp)
 8006c0c:	dc000315 	stw	r16,12(sp)
 8006c10:	df000404 	addi	fp,sp,16
 8006c14:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006c18:	00bffa04 	movi	r2,-24
 8006c1c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006c20:	e03ffc15 	stw	zero,-16(fp)
 8006c24:	00002106 	br	8006cac <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8006c28:	04020034 	movhi	r16,2048
 8006c2c:	841e9b04 	addi	r16,r16,31340
 8006c30:	e0bffc17 	ldw	r2,-16(fp)
 8006c34:	1009883a 	mov	r4,r2
 8006c38:	01400304 	movi	r5,12
 8006c3c:	80026f80 	call	80026f8 <__mulsi3>
 8006c40:	8085883a 	add	r2,r16,r2
 8006c44:	10800017 	ldw	r2,0(r2)
 8006c48:	1000151e 	bne	r2,zero,8006ca0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8006c4c:	04020034 	movhi	r16,2048
 8006c50:	841e9b04 	addi	r16,r16,31340
 8006c54:	e0bffc17 	ldw	r2,-16(fp)
 8006c58:	1009883a 	mov	r4,r2
 8006c5c:	01400304 	movi	r5,12
 8006c60:	80026f80 	call	80026f8 <__mulsi3>
 8006c64:	8085883a 	add	r2,r16,r2
 8006c68:	e0fffe17 	ldw	r3,-8(fp)
 8006c6c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8006c70:	00820034 	movhi	r2,2048
 8006c74:	109f1904 	addi	r2,r2,31844
 8006c78:	10c00017 	ldw	r3,0(r2)
 8006c7c:	e0bffc17 	ldw	r2,-16(fp)
 8006c80:	1880040e 	bge	r3,r2,8006c94 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8006c84:	00820034 	movhi	r2,2048
 8006c88:	109f1904 	addi	r2,r2,31844
 8006c8c:	e0fffc17 	ldw	r3,-16(fp)
 8006c90:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8006c94:	e0bffc17 	ldw	r2,-16(fp)
 8006c98:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8006c9c:	00000606 	br	8006cb8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006ca0:	e0bffc17 	ldw	r2,-16(fp)
 8006ca4:	10800044 	addi	r2,r2,1
 8006ca8:	e0bffc15 	stw	r2,-16(fp)
 8006cac:	e0bffc17 	ldw	r2,-16(fp)
 8006cb0:	10800810 	cmplti	r2,r2,32
 8006cb4:	103fdc1e 	bne	r2,zero,8006c28 <__alt_data_end+0xfc006c28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006cb8:	e0bffd17 	ldw	r2,-12(fp)
}
 8006cbc:	e6ffff04 	addi	sp,fp,-4
 8006cc0:	dfc00217 	ldw	ra,8(sp)
 8006cc4:	df000117 	ldw	fp,4(sp)
 8006cc8:	dc000017 	ldw	r16,0(sp)
 8006ccc:	dec00304 	addi	sp,sp,12
 8006cd0:	f800283a 	ret

08006cd4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8006cd4:	defffe04 	addi	sp,sp,-8
 8006cd8:	df000115 	stw	fp,4(sp)
 8006cdc:	df000104 	addi	fp,sp,4
 8006ce0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8006ce4:	e0bfff17 	ldw	r2,-4(fp)
 8006ce8:	10bffe84 	addi	r2,r2,-6
 8006cec:	10c00428 	cmpgeui	r3,r2,16
 8006cf0:	18001a1e 	bne	r3,zero,8006d5c <alt_exception_cause_generated_bad_addr+0x88>
 8006cf4:	100690ba 	slli	r3,r2,2
 8006cf8:	00820034 	movhi	r2,2048
 8006cfc:	109b4304 	addi	r2,r2,27916
 8006d00:	1885883a 	add	r2,r3,r2
 8006d04:	10800017 	ldw	r2,0(r2)
 8006d08:	1000683a 	jmp	r2
 8006d0c:	08006d4c 	andi	zero,at,437
 8006d10:	08006d4c 	andi	zero,at,437
 8006d14:	08006d5c 	xori	zero,at,437
 8006d18:	08006d5c 	xori	zero,at,437
 8006d1c:	08006d5c 	xori	zero,at,437
 8006d20:	08006d4c 	andi	zero,at,437
 8006d24:	08006d54 	ori	zero,at,437
 8006d28:	08006d5c 	xori	zero,at,437
 8006d2c:	08006d4c 	andi	zero,at,437
 8006d30:	08006d4c 	andi	zero,at,437
 8006d34:	08006d5c 	xori	zero,at,437
 8006d38:	08006d4c 	andi	zero,at,437
 8006d3c:	08006d54 	ori	zero,at,437
 8006d40:	08006d5c 	xori	zero,at,437
 8006d44:	08006d5c 	xori	zero,at,437
 8006d48:	08006d4c 	andi	zero,at,437
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006d4c:	00800044 	movi	r2,1
 8006d50:	00000306 	br	8006d60 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006d54:	0005883a 	mov	r2,zero
 8006d58:	00000106 	br	8006d60 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8006d5c:	0005883a 	mov	r2,zero
  }
}
 8006d60:	e037883a 	mov	sp,fp
 8006d64:	df000017 	ldw	fp,0(sp)
 8006d68:	dec00104 	addi	sp,sp,4
 8006d6c:	f800283a 	ret

08006d70 <atexit>:
 8006d70:	200b883a 	mov	r5,r4
 8006d74:	000d883a 	mov	r6,zero
 8006d78:	0009883a 	mov	r4,zero
 8006d7c:	000f883a 	mov	r7,zero
 8006d80:	8006e601 	jmpi	8006e60 <__register_exitproc>

08006d84 <memcmp>:
 8006d84:	218d883a 	add	r6,r4,r6
 8006d88:	21800826 	beq	r4,r6,8006dac <memcmp+0x28>
 8006d8c:	20800003 	ldbu	r2,0(r4)
 8006d90:	28c00003 	ldbu	r3,0(r5)
 8006d94:	10c00226 	beq	r2,r3,8006da0 <memcmp+0x1c>
 8006d98:	10c5c83a 	sub	r2,r2,r3
 8006d9c:	f800283a 	ret
 8006da0:	21000044 	addi	r4,r4,1
 8006da4:	29400044 	addi	r5,r5,1
 8006da8:	003ff706 	br	8006d88 <__alt_data_end+0xfc006d88>
 8006dac:	0005883a 	mov	r2,zero
 8006db0:	f800283a 	ret

08006db4 <putc>:
 8006db4:	defffd04 	addi	sp,sp,-12
 8006db8:	00820034 	movhi	r2,2048
 8006dbc:	dc000115 	stw	r16,4(sp)
 8006dc0:	dfc00215 	stw	ra,8(sp)
 8006dc4:	1090cc04 	addi	r2,r2,17200
 8006dc8:	28800115 	stw	r2,4(r5)
 8006dcc:	00820034 	movhi	r2,2048
 8006dd0:	109f1004 	addi	r2,r2,31808
 8006dd4:	d9000005 	stb	r4,0(sp)
 8006dd8:	2021883a 	mov	r16,r4
 8006ddc:	11000017 	ldw	r4,0(r2)
 8006de0:	d80d883a 	mov	r6,sp
 8006de4:	01c00044 	movi	r7,1
 8006de8:	80043300 	call	8004330 <__sfvwrite_small_dev>
 8006dec:	00ffffc4 	movi	r3,-1
 8006df0:	10c00126 	beq	r2,r3,8006df8 <putc+0x44>
 8006df4:	8005883a 	mov	r2,r16
 8006df8:	dfc00217 	ldw	ra,8(sp)
 8006dfc:	dc000117 	ldw	r16,4(sp)
 8006e00:	dec00304 	addi	sp,sp,12
 8006e04:	f800283a 	ret

08006e08 <_putc_r>:
 8006e08:	defffd04 	addi	sp,sp,-12
 8006e0c:	00820034 	movhi	r2,2048
 8006e10:	dc000115 	stw	r16,4(sp)
 8006e14:	dfc00215 	stw	ra,8(sp)
 8006e18:	1090cc04 	addi	r2,r2,17200
 8006e1c:	30800115 	stw	r2,4(r6)
 8006e20:	00820034 	movhi	r2,2048
 8006e24:	109f1004 	addi	r2,r2,31808
 8006e28:	11000017 	ldw	r4,0(r2)
 8006e2c:	2821883a 	mov	r16,r5
 8006e30:	01c00044 	movi	r7,1
 8006e34:	300b883a 	mov	r5,r6
 8006e38:	d80d883a 	mov	r6,sp
 8006e3c:	dc000005 	stb	r16,0(sp)
 8006e40:	80043300 	call	8004330 <__sfvwrite_small_dev>
 8006e44:	00ffffc4 	movi	r3,-1
 8006e48:	10c00126 	beq	r2,r3,8006e50 <_putc_r+0x48>
 8006e4c:	8005883a 	mov	r2,r16
 8006e50:	dfc00217 	ldw	ra,8(sp)
 8006e54:	dc000117 	ldw	r16,4(sp)
 8006e58:	dec00304 	addi	sp,sp,12
 8006e5c:	f800283a 	ret

08006e60 <__register_exitproc>:
 8006e60:	00820034 	movhi	r2,2048
 8006e64:	defff904 	addi	sp,sp,-28
 8006e68:	109f0f04 	addi	r2,r2,31804
 8006e6c:	dd400515 	stw	r21,20(sp)
 8006e70:	15400017 	ldw	r21,0(r2)
 8006e74:	dc000015 	stw	r16,0(sp)
 8006e78:	dd000415 	stw	r20,16(sp)
 8006e7c:	ac000c17 	ldw	r16,48(r21)
 8006e80:	dcc00315 	stw	r19,12(sp)
 8006e84:	dc800215 	stw	r18,8(sp)
 8006e88:	dc400115 	stw	r17,4(sp)
 8006e8c:	dfc00615 	stw	ra,24(sp)
 8006e90:	2025883a 	mov	r18,r4
 8006e94:	2823883a 	mov	r17,r5
 8006e98:	3029883a 	mov	r20,r6
 8006e9c:	3827883a 	mov	r19,r7
 8006ea0:	8000021e 	bne	r16,zero,8006eac <__register_exitproc+0x4c>
 8006ea4:	ac000d04 	addi	r16,r21,52
 8006ea8:	ac000c15 	stw	r16,48(r21)
 8006eac:	80800117 	ldw	r2,4(r16)
 8006eb0:	00c007c4 	movi	r3,31
 8006eb4:	18800d0e 	bge	r3,r2,8006eec <__register_exitproc+0x8c>
 8006eb8:	00820034 	movhi	r2,2048
 8006ebc:	108b1e04 	addi	r2,r2,11384
 8006ec0:	1000021e 	bne	r2,zero,8006ecc <__register_exitproc+0x6c>
 8006ec4:	00bfffc4 	movi	r2,-1
 8006ec8:	00002d06 	br	8006f80 <__register_exitproc+0x120>
 8006ecc:	01002304 	movi	r4,140
 8006ed0:	8002c780 	call	8002c78 <malloc>
 8006ed4:	1021883a 	mov	r16,r2
 8006ed8:	103ffa26 	beq	r2,zero,8006ec4 <__alt_data_end+0xfc006ec4>
 8006edc:	10000115 	stw	zero,4(r2)
 8006ee0:	a8800c17 	ldw	r2,48(r21)
 8006ee4:	80800015 	stw	r2,0(r16)
 8006ee8:	ac000c15 	stw	r16,48(r21)
 8006eec:	90001b26 	beq	r18,zero,8006f5c <__register_exitproc+0xfc>
 8006ef0:	80802217 	ldw	r2,136(r16)
 8006ef4:	1000091e 	bne	r2,zero,8006f1c <__register_exitproc+0xbc>
 8006ef8:	00820034 	movhi	r2,2048
 8006efc:	108b1e04 	addi	r2,r2,11384
 8006f00:	103ff026 	beq	r2,zero,8006ec4 <__alt_data_end+0xfc006ec4>
 8006f04:	01004204 	movi	r4,264
 8006f08:	8002c780 	call	8002c78 <malloc>
 8006f0c:	103fed26 	beq	r2,zero,8006ec4 <__alt_data_end+0xfc006ec4>
 8006f10:	10004015 	stw	zero,256(r2)
 8006f14:	10004115 	stw	zero,260(r2)
 8006f18:	80802215 	stw	r2,136(r16)
 8006f1c:	81400117 	ldw	r5,4(r16)
 8006f20:	01000044 	movi	r4,1
 8006f24:	2947883a 	add	r3,r5,r5
 8006f28:	18c7883a 	add	r3,r3,r3
 8006f2c:	10c7883a 	add	r3,r2,r3
 8006f30:	1d000015 	stw	r20,0(r3)
 8006f34:	214a983a 	sll	r5,r4,r5
 8006f38:	11004017 	ldw	r4,256(r2)
 8006f3c:	2148b03a 	or	r4,r4,r5
 8006f40:	11004015 	stw	r4,256(r2)
 8006f44:	1cc02015 	stw	r19,128(r3)
 8006f48:	00c00084 	movi	r3,2
 8006f4c:	90c0031e 	bne	r18,r3,8006f5c <__register_exitproc+0xfc>
 8006f50:	10c04117 	ldw	r3,260(r2)
 8006f54:	194ab03a 	or	r5,r3,r5
 8006f58:	11404115 	stw	r5,260(r2)
 8006f5c:	80800117 	ldw	r2,4(r16)
 8006f60:	10c00044 	addi	r3,r2,1
 8006f64:	10800084 	addi	r2,r2,2
 8006f68:	1085883a 	add	r2,r2,r2
 8006f6c:	1085883a 	add	r2,r2,r2
 8006f70:	80c00115 	stw	r3,4(r16)
 8006f74:	80a1883a 	add	r16,r16,r2
 8006f78:	84400015 	stw	r17,0(r16)
 8006f7c:	0005883a 	mov	r2,zero
 8006f80:	dfc00617 	ldw	ra,24(sp)
 8006f84:	dd400517 	ldw	r21,20(sp)
 8006f88:	dd000417 	ldw	r20,16(sp)
 8006f8c:	dcc00317 	ldw	r19,12(sp)
 8006f90:	dc800217 	ldw	r18,8(sp)
 8006f94:	dc400117 	ldw	r17,4(sp)
 8006f98:	dc000017 	ldw	r16,0(sp)
 8006f9c:	dec00704 	addi	sp,sp,28
 8006fa0:	f800283a 	ret
 8006fa4:	0201ffff 	0x201ffff
 8006fa8:	883a0000 	call	883a000 <_gp+0x82a414>
 8006fac:	010d0bff 	0x10d0bff
 8006fb0:	01010002 	0x1010002
	...
 8006fbc:	010d0bff 	0x10d0bff
 8006fc0:	01010004 	movi	r4,1024
 8006fc4:	00000100 	call	10 <__alt_mem_onchip_sram-0x1fff0>
 8006fc8:	00000000 	call	0 <__alt_mem_onchip_sram-0x20000>
 8006fcc:	01110bff 	0x1110bff
 8006fd0:	01010004 	movi	r4,1024
 8006fd4:	7f000105 	stb	fp,4(r15)
 8006fd8:	007d0000 	call	7d000 <__alt_mem_onchip_sram+0x5d000>
	...
