
bt_task.elf:     file format elf32-littlenios2
bt_task.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000073b0 memsz 0x000073b0 flags r-x
    LOAD off    0x000083d0 vaddr 0x080073d0 paddr 0x08007c48 align 2**12
         filesz 0x00000878 memsz 0x00000878 flags rw-
    LOAD off    0x000094c0 vaddr 0x080084c0 paddr 0x080084c0 align 2**12
         filesz 0x00000000 memsz 0x00000a64 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006d8c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000414  08006fbc  08006fbc  00007fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000878  080073d0  08007c48  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a64  080084c0  080084c0  000094c0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  08008f24  08008f24  00008c48  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008c48  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000c40  00000000  00000000  00008c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017350  00000000  00000000  000098b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007548  00000000  00000000  00020c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000823d  00000000  00000000  00028148  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002080  00000000  00000000  00030388  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000561b  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000635a  00000000  00000000  00037a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003dd80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000970  00000000  00000000  0003dd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00042918  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004291b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00042927  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00042928  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00042929  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004292d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00042931  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00042935  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00042940  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0004294b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  00042956  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  00042965  2**0
                  CONTENTS, READONLY
 29 .jdi          00007b07  00000000  00000000  00042982  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     002dcdb0  00000000  00000000  0004a489  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08006fbc l    d  .rodata	00000000 .rodata
080073d0 l    d  .rwdata	00000000 .rwdata
080084c0 l    d  .bss	00000000 .bss
08008f24 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/tag2/de1_software/nios/hc05_img_rcv/bt_task_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 bt_task.cpp
00000000 l    df *ABS*	00000000 dma.cpp
08000828 l     F .text	00000024 alt_dma_txchan_close
0800084c l     F .text	00000068 alt_dma_txchan_send
080008b4 l     F .text	00000058 alt_dma_txchan_ioctl
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
08000a50 l     F .text	00000058 _ZL12read_sleb128PKhPl
08000aa8 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
08000b30 l     F .text	000000a0 _ZL21size_of_encoded_valueh
08000bd0 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
08000de0 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
08000e34 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
08000edc l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
08000f64 l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
080011a4 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
080084c4 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
080022e0 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
080084d0 l     O .bss	00000004 _ZL14emergency_used
080085fc l     O .bss	00000800 _ZL16emergency_buffer
080084cc l     O .bss	00000004 _ZL15dependents_used
080084fc l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
080026f8 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
080084d4 l     O .bss	00000004 fc_static
08002810 l     F .text	000000c0 _Unwind_RaiseException_Phase2
080028d0 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080037c4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
080077d8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800440c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
08004538 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
080046c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08004840 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08007c24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08004cf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004e48 l     F .text	00000038 alt_dev_reg
080078b8 l     O .rwdata	000000a4 dma_fpga_to_hps_priv
0800795c l     O .rwdata	0000001c dma_fpga_to_hps_tx
08007978 l     O .rwdata	0000001c dma_fpga_to_hps_rx
08007994 l     O .rwdata	0000002c jtag_uart_0
080079c0 l     O .rwdata	0000002c bt_rs232_uart
080079ec l     O .rwdata	0000002c wifi_rs232_uart
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
08004f24 l     F .text	00000038 alt_dma_txchan_reg
08004f5c l     F .text	00000038 alt_dma_rxchan_reg
08005088 l     F .text	00000098 alt_avalon_dma_launch_txonly
08005120 l     F .text	00000098 alt_avalon_dma_launch_rxonly
080051b8 l     F .text	00000344 alt_avalon_dma_ioctl
08005870 l     F .text	000001c0 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
0800609c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080061e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800620c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
08006300 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006478 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08006780 l     F .text	00000050 alt_get_errno
080067d0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
080084f8 g     O .bss	00000004 alt_instruction_exception_handler
08002540 g     F .text	00000044 __cxa_free_exception
08002444 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
08001dd8 g     F .text	00000018 _ZSt10unexpectedv
08004924 g     F .text	00000078 alt_main
080033a4 g     F .text	00000080 _puts_r
08008e24 g     O .bss	00000100 alt_irq
08002680 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0800298c g     F .text	00000020 .hidden _Unwind_GetIPInfo
08007c48 g       *ABS*	00000000 __flash_rwdata_start
080023b4 g     F .text	00000084 __cxa_rethrow
08002918 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
08001e14 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
08000624 g     F .text	00000204 _Z7bt_taskv
0800297c g     F .text	00000010 .hidden _Unwind_GetIP
08008f24 g       *ABS*	00000000 __alt_heap_start
08003718 g     F .text	00000054 _kill_r
08003358 g     F .text	0000004c printf
080034ec g     F .text	0000007c _signal_r
08006fd4  w    O .rodata	00000010 _ZTV6BTUart
08005a30 g     F .text	000000a8 alt_avalon_dma_init
08002618 g     F .text	00000040 __cxa_free_dependent_exception
08001e38 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
080071a0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
080049bc g     F .text	00000020 __malloc_unlock
08005f38 g     F .text	00000090 alt_up_rs232_read_fd
08002680 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
08002268 g     F .text	00000020 _ZSt18uncaught_exceptionv
080026b0 g     F .text	00000020 __cxa_deleted_virtual
080005d8 g     F .text	0000004c _ZN6BTUart5flushEv
08002658 g     F .text	00000004 _ZNSt9exceptionD2Ev
080072dc  w    O .rodata	00000014 _ZTVSt13bad_exception
08006aa4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
080029c8 g     F .text	00000008 .hidden _Unwind_GetRegionStart
08000020 g       *ABS*	00000000 __flash_exceptions_start
080084e4 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
08002ba4 g     F .text	00000074 .hidden _Unwind_Backtrace
080084ec g     O .bss	00000004 alt_argv
0800fbc0 g       *ABS*	00000000 _gp
080046a0 g     F .text	00000020 getpid
080017d8 g     F .text	00000234 __cxa_call_unexpected
080020fc g     F .text	00000008 __cxa_get_exception_ptr
08004588 g     F .text	00000054 alt_dma_txchan_open
08007a40 g     O .rwdata	00000180 alt_fd_list
08007bc8  w    O .rwdata	00000008 _ZTS6BTUart
08002ab8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
08002948 g     F .text	00000018 .hidden _Unwind_GetCFA
08001df0 g     F .text	00000014 _ZSt13set_terminatePFvvE
08004610 g     F .text	00000090 alt_find_dev
08002584 g     F .text	00000094 __cxa_allocate_dependent_exception
08001a9c g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
08006558 g     F .text	00000078 alt_io_redirect
08006fbc g       *ABS*	00000000 __DTOR_END__
08001ab4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
08005ec4 g     F .text	00000074 alt_up_rs232_read_data
08003424 g     F .text	00000014 puts
08006cac g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007bdc g     O .rwdata	00000004 tag_id
08005b98 g     F .text	000000e4 altera_avalon_jtag_uart_read
08002c50 g     F .text	00000014 malloc
0800331c g     F .text	0000003c _printf_r
08004528 g     F .text	00000008 .hidden __udivsi3
08003568 g     F .text	000000b4 _raise_r
080084e0 g     O .bss	00000004 __malloc_top_pad
08007bd0 g     O .rwdata	00000004 input
0800376c g     F .text	00000004 _getpid_r
08001b64 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0800361c g     F .text	000000a8 __sigtramp_r
08003438 g     F .text	00000050 _sbrk_r
08007210  w    O .rodata	00000020 _ZTVSt9type_info
08002660 g     F .text	0000000c _ZNKSt9exception4whatEv
08007c38 g     O .rwdata	00000004 alt_max_fd
08005e40 g     F .text	00000044 alt_up_rs232_check_parity
080084dc g     O .bss	00000004 __malloc_max_sbrked_mem
080065d0 g     F .text	000001b0 alt_irq_register
08004f94 g     F .text	000000f4 alt_avalon_dma_launch_bidir
080071d4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
08006350 g     F .text	00000054 alt_dma_rxchan_open
08001af8 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
08001cec g     F .text	00000004 _ZdlPv
0800029c g     F .text	00000048 _ZN6BTUartD1Ev
08007c10 g     O .rwdata	00000004 _global_impure_ptr
08008f24 g       *ABS*	00000000 __bss_end
08002900 g     F .text	00000018 .hidden _Unwind_SjLj_Register
08002c18 g     F .text	00000018 abort
080021b8 g     F .text	000000b0 __cxa_end_catch
0800265c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
080084f4 g     O .bss	00000004 alt_irq_active
08007bd4 g     O .rwdata	00000004 id
08001db0 g     F .text	00000018 _ZSt9terminatev
080000fc g     F .exceptions	000000d4 alt_irq_handler
08007a18 g     O .rwdata	00000028 alt_dev_null
08000934 g     F .text	000000d8 _Z9start_dmav
08002688 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0800026c g     F .text	00000030 _ZN6BTUartC2Ev
0800026c g     F .text	00000030 _ZN6BTUartC1Ev
08007144  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
080061c4 g     F .text	0000001c alt_dcache_flush_all
08007bec  w    O .rwdata	00000008 _ZTISt9exception
08007c48 g       *ABS*	00000000 __ram_rwdata_end
08002438 g     F .text	00000004 _ZNSt9type_infoD1Ev
08007c30 g     O .rwdata	00000008 alt_dev_list
08002688 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
080056c4 g     F .text	00000074 alt_avalon_dma_space
08004d48 g     F .text	00000100 write
08006de0 g     F .text	00000058 _putc_r
08002454 g     F .text	00000004 _ZNSt9type_infoD0Ev
080073d0 g       *ABS*	00000000 __ram_rodata_end
08005fc8 g     F .text	00000094 alt_up_rs232_write_fd
08004710 g     F .text	00000130 kill
08004530 g     F .text	00000008 .hidden __umodsi3
0800244c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
08001e04 g     F .text	00000010 _ZSt13get_terminatev
08008f24 g       *ABS*	00000000 end
08002b8c g     F .text	00000018 .hidden _Unwind_DeleteException
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08001c1c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
08006fbc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08001a24 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
08005c7c g     F .text	00000094 altera_avalon_jtag_uart_write
08007264  w    O .rodata	00000012 _ZTSSt13bad_exception
08003830 g     F .text	0000056c ___vfprintf_internal_r
08004080 g     F .text	00000288 _free_r
080049dc g     F .text	00000228 alt_printf
08005738 g     F .text	00000138 alt_avalon_dma_send
08003dc0 g     F .text	0000019c __call_exitprocs
08007c18 g     O .rwdata	00000008 alt_dma_txchan_list
0800029c g     F .text	00000048 _ZN6BTUartD2Ev
08007bd8 g     O .rwdata	00000004 dnn_acc
08007c08 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08007200  w    O .rodata	0000000d _ZTSSt9type_info
08002690 g     F .text	00000020 __cxa_pure_virtual
080036d8 g     F .text	0000001c signal
08004eb4 g     F .text	00000070 alt_sys_init
08006e38 g     F .text	00000144 __register_exitproc
08001e7c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
08005e04 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
080026d0 g     F .text	00000028 .hidden __mulsi3
080073d0 g       *ABS*	00000000 __ram_rwdata_start
080029e8 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08006fbc g       *ABS*	00000000 __ram_rodata_start
08008dfc g     O .bss	00000028 __malloc_current_mallinfo
08002afc g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08007304  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
08002438 g     F .text	00000004 _ZNSt9type_infoD2Ev
0800268c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
08002078 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
08005ad8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006bd8 g     F .text	000000d4 alt_get_fd
08007bfc  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
08006d5c g     F .text	00000030 memcmp
08008f24 g       *ABS*	00000000 __alt_stack_base
08001e38 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
08002b40 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0800243c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
080073d0 g     O .rwdata	00000408 __malloc_av_
080072c8  w    O .rodata	00000014 _ZTVSt9exception
08002684 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
08005d68 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
08006ac4 g     F .text	00000114 alt_find_file
0800625c g     F .text	000000a4 alt_dev_llist_insert
0800499c g     F .text	00000020 __malloc_lock
08004c48 g     F .text	000000b0 sbrk
08007174  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
08002324 g     F .text	00000090 __cxa_throw
080029ac g     F .text	00000010 .hidden _Unwind_SetIP
08004308 g     F .text	000000ac __sfvwrite_small_dev
080084c0 g       *ABS*	00000000 __bss_start
080003e8 g     F .text	000000b8 _ZN6BTUart7write_sEh
080032fc g     F .text	00000020 memset
08000a0c g     F .text	00000044 main
08005544 g     F .text	00000048 alt_avalon_dma_rx_ioctl
080084f0 g     O .bss	00000004 alt_envp
080084d8 g     O .bss	00000004 __malloc_max_total_mem
08005b38 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001a0c g     F .text	0000000c __cxa_get_globals_fast
0c000000 g       *ABS*	00000000 __alt_heap_limit
08000384 g     F .text	00000064 _ZN6BTUart6read_sEv
08002c78 g     F .text	00000684 _malloc_r
080002e4 g     F .text	00000038 _ZN6BTUartD0Ev
0800266c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08007c20 g     O .rwdata	00000004 alt_errno
080036f4 g     F .text	00000010 _init_signal
08007168  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0800051c g     F .text	00000074 _ZN6BTUart7write_mEPci
0800265c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
08006d8c g     F .text	00000054 putc
08004478 g     F .text	00000054 .hidden __divsi3
08003f5c g     F .text	00000124 _malloc_trim_r
08006fbc g       *ABS*	00000000 __CTOR_END__
08003770 g     F .text	00000038 strcmp
08006fbc g       *ABS*	00000000 __flash_rodata_start
080072f0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
08006fbc g       *ABS*	00000000 __DTOR_LIST__
0800605c g     F .text	00000040 alt_up_rs232_open_dev
08004e80 g     F .text	00000034 alt_irq_init
08006a24 g     F .text	00000080 alt_release_fd
08001e48 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
08006d48 g     F .text	00000014 atexit
080043b4 g     F .text	00000058 _write_r
080029e0 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
08002288 g     F .text	00000058 __cxa_call_terminate
08007c14 g     O .rwdata	00000004 _impure_ptr
08007bf4  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
080084e8 g     O .bss	00000004 alt_argc
08006400 g     F .text	0000005c _do_dtors
0800090c g     F .text	00000028 _Z8dma_donePv
08007bc0  w    O .rwdata	00000008 _ZTI6BTUart
08001e28 g     F .text	00000010 _ZSt14get_unexpectedv
08000020 g       .exceptions	00000000 alt_irq_entry
080029d0 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
08007c28 g     O .rwdata	00000008 alt_fs_list
080072a4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
08005d10 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
080029bc g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
08005e84 g     F .text	00000040 alt_up_rs232_write_data
08002104 g     F .text	000000b4 __cxa_begin_catch
08001ab4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
08001dc8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800267c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08007be0 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
0800249c g     F .text	000000a4 __cxa_allocate_exception
080071c8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08007c48 g       *ABS*	00000000 _edata
08008f24 g       *ABS*	00000000 _end
080012d8 g     F .text	00000500 __gxx_personality_sj0
08000230 g       *ABS*	00000000 __ram_exceptions_end
08002658 g     F .text	00000004 _ZNSt9exceptionD1Ev
08007c0c g     O .rwdata	00000004 __malloc_trim_threshold
08002c30 g     F .text	00000020 exit
08002960 g     F .text	0000001c .hidden _Unwind_SetGR
08001fdc g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
08001cf0 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
080044cc g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08007278  w    O .rodata	0000000c _ZTISt13bad_exception
080084c0 g     O .bss	00000004 dma_complete
080045dc g     F .text	00000034 _exit
0800292c g     F .text	0000001c .hidden _Unwind_GetGR
08001a18 g     F .text	0000000c __cxa_get_globals
08007c04 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
080037a8 g     F .text	0000001c strlen
08003488 g     F .text	00000064 _init_signal_r
08007be4  w    O .rwdata	00000008 _ZTISt9type_info
080068c4 g     F .text	00000160 open
08004c04 g     F .text	00000044 alt_putchar
0800031c g     F .text	00000068 _ZN6BTUart4openEPKc
08007254  w    O .rodata	0000000d _ZTSSt9exception
08002678 g     F .text	00000004 _ZNSt9exceptionD0Ev
0800645c g     F .text	0000001c alt_icache_flush_all
080029d8 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
08007c44 g     O .rwdata	00000004 alt_priority_mask
08003d9c g     F .text	00000024 __vfprintf_internal
080004a0 g     F .text	0000007c _ZN6BTUart6read_mEPii
0800558c g     F .text	00000138 alt_avalon_dma_prepare
08007c3c g     O .rwdata	00000008 alt_dma_rxchan_list
080063a4 g     F .text	0000005c _do_ctors
08003704 g     F .text	00000014 __sigtramp
08000590 g     F .text	00000048 _ZN6BTUart10read_readyEv
08005dc4 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
080060ec g     F .text	000000d8 close
08007284  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
080048a4 g     F .text	00000080 alt_load
080054fc g     F .text	00000048 alt_avalon_dma_tx_ioctl
08002458 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
080036c4 g     F .text	00000014 raise
08002c64 g     F .text	00000014 free
08001ac4 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001526 	beq	r2,zero,8000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a38904 	addi	r2,r2,-29148
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a38904 	addi	r2,r2,-29148
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	e17ffd17 	ldw	r5,-12(fp)
 8000178:	183ee83a 	callr	r3
#endif
        break;
 800017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000180:	0005313a 	rdctl	r2,ipending
 8000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000188:	e0bfff17 	ldw	r2,-4(fp)
 800018c:	00000706 	br	80001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8000190:	e0bffc17 	ldw	r2,-16(fp)
 8000194:	1085883a 	add	r2,r2,r2
 8000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 800019c:	e0bffd17 	ldw	r2,-12(fp)
 80001a0:	10800044 	addi	r2,r2,1
 80001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a8:	003fe006 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001b0:	e0bffb17 	ldw	r2,-20(fp)
 80001b4:	103fda1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b8:	0001883a 	nop
}
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a24e17 	ldw	r2,-30408(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a24e17 	ldw	r2,-30408(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	1809883a 	mov	r4,r3
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	e1bffe17 	ldw	r6,-8(fp)
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 800023c:	d6bef014 	ori	gp,gp,64448
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000244:	10a13014 	ori	r2,r2,33984

    movhi r3, %hi(__bss_end)
 8000248:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800024c:	18e3c914 	ori	r3,r3,36644

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80048a40 	call	80048a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80049240 	call	8004924 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
 800026c:	defffe04 	addi	sp,sp,-8
 8000270:	df000115 	stw	fp,4(sp)
 8000274:	df000104 	addi	fp,sp,4
 8000278:	e13fff15 	stw	r4,-4(fp)
 800027c:	e0ffff17 	ldw	r3,-4(fp)
 8000280:	00820034 	movhi	r2,2048
 8000284:	109bf704 	addi	r2,r2,28636
 8000288:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
 800028c:	e037883a 	mov	sp,fp
 8000290:	df000017 	ldw	fp,0(sp)
 8000294:	dec00104 	addi	sp,sp,4
 8000298:	f800283a 	ret

0800029c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
 800029c:	defffd04 	addi	sp,sp,-12
 80002a0:	dfc00215 	stw	ra,8(sp)
 80002a4:	df000115 	stw	fp,4(sp)
 80002a8:	df000104 	addi	fp,sp,4
 80002ac:	e13fff15 	stw	r4,-4(fp)
 80002b0:	e0ffff17 	ldw	r3,-4(fp)
 80002b4:	00820034 	movhi	r2,2048
 80002b8:	109bf704 	addi	r2,r2,28636
 80002bc:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
 80002c0:	0005883a 	mov	r2,zero
 80002c4:	10000226 	beq	r2,zero,80002d0 <_ZN6BTUartD1Ev+0x34>
 80002c8:	e13fff17 	ldw	r4,-4(fp)
 80002cc:	8001cec0 	call	8001cec <_ZdlPv>
 80002d0:	e037883a 	mov	sp,fp
 80002d4:	dfc00117 	ldw	ra,4(sp)
 80002d8:	df000017 	ldw	fp,0(sp)
 80002dc:	dec00204 	addi	sp,sp,8
 80002e0:	f800283a 	ret

080002e4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
 80002e4:	defffd04 	addi	sp,sp,-12
 80002e8:	dfc00215 	stw	ra,8(sp)
 80002ec:	df000115 	stw	fp,4(sp)
 80002f0:	df000104 	addi	fp,sp,4
 80002f4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
 80002f8:	e13fff17 	ldw	r4,-4(fp)
 80002fc:	800029c0 	call	800029c <_ZN6BTUartD1Ev>
 8000300:	e13fff17 	ldw	r4,-4(fp)
 8000304:	8001cec0 	call	8001cec <_ZdlPv>
 8000308:	e037883a 	mov	sp,fp
 800030c:	dfc00117 	ldw	ra,4(sp)
 8000310:	df000017 	ldw	fp,0(sp)
 8000314:	dec00204 	addi	sp,sp,8
 8000318:	f800283a 	ret

0800031c <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
 800031c:	defffc04 	addi	sp,sp,-16
 8000320:	dfc00315 	stw	ra,12(sp)
 8000324:	df000215 	stw	fp,8(sp)
 8000328:	df000204 	addi	fp,sp,8
 800032c:	e13ffe15 	stw	r4,-8(fp)
 8000330:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
 8000334:	e13fff17 	ldw	r4,-4(fp)
 8000338:	800605c0 	call	800605c <alt_up_rs232_open_dev>
 800033c:	1007883a 	mov	r3,r2
 8000340:	e0bffe17 	ldw	r2,-8(fp)
 8000344:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
 8000348:	e0bffe17 	ldw	r2,-8(fp)
 800034c:	10800117 	ldw	r2,4(r2)
 8000350:	1009883a 	mov	r4,r2
 8000354:	8005d100 	call	8005d10 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
 8000358:	e0bffe17 	ldw	r2,-8(fp)
 800035c:	10800117 	ldw	r2,4(r2)
 8000360:	1000021e 	bne	r2,zero,800036c <_ZN6BTUart4openEPKc+0x50>
        return 0;
 8000364:	0005883a 	mov	r2,zero
 8000368:	00000106 	br	8000370 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
 800036c:	00800044 	movi	r2,1
}
 8000370:	e037883a 	mov	sp,fp
 8000374:	dfc00117 	ldw	ra,4(sp)
 8000378:	df000017 	ldw	fp,0(sp)
 800037c:	dec00204 	addi	sp,sp,8
 8000380:	f800283a 	ret

08000384 <_ZN6BTUart6read_sEv>:


int BTUart::read_s(void)
{
 8000384:	defffc04 	addi	sp,sp,-16
 8000388:	dfc00315 	stw	ra,12(sp)
 800038c:	df000215 	stw	fp,8(sp)
 8000390:	df000204 	addi	fp,sp,8
 8000394:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
 8000398:	0001883a 	nop
 800039c:	e13fff17 	ldw	r4,-4(fp)
 80003a0:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 80003a4:	1005003a 	cmpeq	r2,r2,zero
 80003a8:	10803fcc 	andi	r2,r2,255
 80003ac:	103ffb1e 	bne	r2,zero,800039c <__alt_data_end+0xfc00039c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
 80003b0:	e0bfff17 	ldw	r2,-4(fp)
 80003b4:	10c00117 	ldw	r3,4(r2)
 80003b8:	e0bffe44 	addi	r2,fp,-7
 80003bc:	1809883a 	mov	r4,r3
 80003c0:	e17ffe04 	addi	r5,fp,-8
 80003c4:	100d883a 	mov	r6,r2
 80003c8:	8005ec40 	call	8005ec4 <alt_up_rs232_read_data>

    return (int) buffer;
 80003cc:	e0bffe03 	ldbu	r2,-8(fp)
 80003d0:	10803fcc 	andi	r2,r2,255
}
 80003d4:	e037883a 	mov	sp,fp
 80003d8:	dfc00117 	ldw	ra,4(sp)
 80003dc:	df000017 	ldw	fp,0(sp)
 80003e0:	dec00204 	addi	sp,sp,8
 80003e4:	f800283a 	ret

080003e8 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
 80003e8:	defffb04 	addi	sp,sp,-20
 80003ec:	dfc00415 	stw	ra,16(sp)
 80003f0:	df000315 	stw	fp,12(sp)
 80003f4:	df000304 	addi	fp,sp,12
 80003f8:	e13ffe15 	stw	r4,-8(fp)
 80003fc:	2805883a 	mov	r2,r5
 8000400:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
 8000404:	e0bffe17 	ldw	r2,-8(fp)
 8000408:	10800117 	ldw	r2,4(r2)
 800040c:	1009883a 	mov	r4,r2
 8000410:	8005d680 	call	8005d68 <alt_up_rs232_disable_read_interrupt>

    int result = 0;
 8000414:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
 8000418:	e0bffe17 	ldw	r2,-8(fp)
 800041c:	10800117 	ldw	r2,4(r2)
 8000420:	1009883a 	mov	r4,r2
 8000424:	8005e040 	call	8005e04 <alt_up_rs232_get_available_space_in_write_FIFO>
 8000428:	1007883a 	mov	r3,r2
 800042c:	e0bffe17 	ldw	r2,-8(fp)
 8000430:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
 8000434:	e0bffe17 	ldw	r2,-8(fp)
 8000438:	10800217 	ldw	r2,8(r2)
 800043c:	10802030 	cmpltui	r2,r2,128
 8000440:	10000d1e 	bne	r2,zero,8000478 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
 8000444:	e0bffe17 	ldw	r2,-8(fp)
 8000448:	10c00117 	ldw	r3,4(r2)
 800044c:	e0bfff03 	ldbu	r2,-4(fp)
 8000450:	1809883a 	mov	r4,r3
 8000454:	100b883a 	mov	r5,r2
 8000458:	8005e840 	call	8005e84 <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
 800045c:	e0bfff03 	ldbu	r2,-4(fp)
 8000460:	01020034 	movhi	r4,2048
 8000464:	211bef04 	addi	r4,r4,28604
 8000468:	100b883a 	mov	r5,r2
 800046c:	80049dc0 	call	80049dc <alt_printf>
        result = 1;
 8000470:	00800044 	movi	r2,1
 8000474:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
 8000478:	e0bffe17 	ldw	r2,-8(fp)
 800047c:	10800117 	ldw	r2,4(r2)
 8000480:	1009883a 	mov	r4,r2
 8000484:	8005d100 	call	8005d10 <alt_up_rs232_enable_read_interrupt>
    return result;
 8000488:	e0bffd17 	ldw	r2,-12(fp)
}
 800048c:	e037883a 	mov	sp,fp
 8000490:	dfc00117 	ldw	ra,4(sp)
 8000494:	df000017 	ldw	fp,0(sp)
 8000498:	dec00204 	addi	sp,sp,8
 800049c:	f800283a 	ret

080004a0 <_ZN6BTUart6read_mEPii>:


void BTUart::read_m(int *buffer, int length)
{
 80004a0:	defff904 	addi	sp,sp,-28
 80004a4:	dfc00615 	stw	ra,24(sp)
 80004a8:	df000515 	stw	fp,20(sp)
 80004ac:	dc000415 	stw	r16,16(sp)
 80004b0:	df000504 	addi	fp,sp,20
 80004b4:	e13ffc15 	stw	r4,-16(fp)
 80004b8:	e17ffd15 	stw	r5,-12(fp)
 80004bc:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
 80004c0:	e03ffb15 	stw	zero,-20(fp)
 80004c4:	00000c06 	br	80004f8 <_ZN6BTUart6read_mEPii+0x58>
		buffer[count] = read_s();
 80004c8:	e0bffb17 	ldw	r2,-20(fp)
 80004cc:	1085883a 	add	r2,r2,r2
 80004d0:	1085883a 	add	r2,r2,r2
 80004d4:	1007883a 	mov	r3,r2
 80004d8:	e0bffd17 	ldw	r2,-12(fp)
 80004dc:	10e1883a 	add	r16,r2,r3
 80004e0:	e13ffc17 	ldw	r4,-16(fp)
 80004e4:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 80004e8:	80800015 	stw	r2,0(r16)

void BTUart::read_m(int *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
 80004ec:	e0bffb17 	ldw	r2,-20(fp)
 80004f0:	10800044 	addi	r2,r2,1
 80004f4:	e0bffb15 	stw	r2,-20(fp)
 80004f8:	e0fffb17 	ldw	r3,-20(fp)
 80004fc:	e0bffe17 	ldw	r2,-8(fp)
 8000500:	18bff116 	blt	r3,r2,80004c8 <__alt_data_end+0xfc0004c8>
		buffer[count] = read_s();
	}
}
 8000504:	e6ffff04 	addi	sp,fp,-4
 8000508:	dfc00217 	ldw	ra,8(sp)
 800050c:	df000117 	ldw	fp,4(sp)
 8000510:	dc000017 	ldw	r16,0(sp)
 8000514:	dec00304 	addi	sp,sp,12
 8000518:	f800283a 	ret

0800051c <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
 800051c:	defffa04 	addi	sp,sp,-24
 8000520:	dfc00515 	stw	ra,20(sp)
 8000524:	df000415 	stw	fp,16(sp)
 8000528:	df000404 	addi	fp,sp,16
 800052c:	e13ffd15 	stw	r4,-12(fp)
 8000530:	e17ffe15 	stw	r5,-8(fp)
 8000534:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
 8000538:	e03ffc15 	stw	zero,-16(fp)
 800053c:	00000b06 	br	800056c <_ZN6BTUart7write_mEPci+0x50>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
 8000540:	e0bffc17 	ldw	r2,-16(fp)
 8000544:	e0fffe17 	ldw	r3,-8(fp)
 8000548:	1885883a 	add	r2,r3,r2
 800054c:	10800003 	ldbu	r2,0(r2)
 8000550:	10803fcc 	andi	r2,r2,255
 8000554:	e13ffd17 	ldw	r4,-12(fp)
 8000558:	100b883a 	mov	r5,r2
 800055c:	80003e80 	call	80003e8 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
 8000560:	e0bffc17 	ldw	r2,-16(fp)
 8000564:	10800044 	addi	r2,r2,1
 8000568:	e0bffc15 	stw	r2,-16(fp)
 800056c:	e0fffc17 	ldw	r3,-16(fp)
 8000570:	e0bfff17 	ldw	r2,-4(fp)
 8000574:	18bff216 	blt	r3,r2,8000540 <__alt_data_end+0xfc000540>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
 8000578:	e0bffc17 	ldw	r2,-16(fp)
}
 800057c:	e037883a 	mov	sp,fp
 8000580:	dfc00117 	ldw	ra,4(sp)
 8000584:	df000017 	ldw	fp,0(sp)
 8000588:	dec00204 	addi	sp,sp,8
 800058c:	f800283a 	ret

08000590 <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
 8000590:	defffc04 	addi	sp,sp,-16
 8000594:	dfc00315 	stw	ra,12(sp)
 8000598:	df000215 	stw	fp,8(sp)
 800059c:	df000204 	addi	fp,sp,8
 80005a0:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
 80005a4:	e0bfff17 	ldw	r2,-4(fp)
 80005a8:	10800117 	ldw	r2,4(r2)
 80005ac:	1009883a 	mov	r4,r2
 80005b0:	8005dc40 	call	8005dc4 <alt_up_rs232_get_used_space_in_read_FIFO>
 80005b4:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
 80005b8:	e0bffe0b 	ldhu	r2,-8(fp)
 80005bc:	1004c03a 	cmpne	r2,r2,zero
 80005c0:	10803fcc 	andi	r2,r2,255
}
 80005c4:	e037883a 	mov	sp,fp
 80005c8:	dfc00117 	ldw	ra,4(sp)
 80005cc:	df000017 	ldw	fp,0(sp)
 80005d0:	dec00204 	addi	sp,sp,8
 80005d4:	f800283a 	ret

080005d8 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
 80005d8:	defffd04 	addi	sp,sp,-12
 80005dc:	dfc00215 	stw	ra,8(sp)
 80005e0:	df000115 	stw	fp,4(sp)
 80005e4:	df000104 	addi	fp,sp,4
 80005e8:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
 80005ec:	00000206 	br	80005f8 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
 80005f0:	e13fff17 	ldw	r4,-4(fp)
 80005f4:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
 80005f8:	e13fff17 	ldw	r4,-4(fp)
 80005fc:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 8000600:	1004c03a 	cmpne	r2,r2,zero
 8000604:	10803fcc 	andi	r2,r2,255
 8000608:	103ff91e 	bne	r2,zero,80005f0 <__alt_data_end+0xfc0005f0>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
 800060c:	0001883a 	nop
 8000610:	e037883a 	mov	sp,fp
 8000614:	dfc00117 	ldw	ra,4(sp)
 8000618:	df000017 	ldw	fp,0(sp)
 800061c:	dec00204 	addi	sp,sp,8
 8000620:	f800283a 	ret

08000624 <_Z7bt_taskv>:
volatile int *input = (volatile int *) 0x0A800000; /* input image */
volatile int *id = (volatile int *) 0x0A900000; /* tag id */


int bt_task()
{
 8000624:	deffe004 	addi	sp,sp,-128
 8000628:	dfc01f15 	stw	ra,124(sp)
 800062c:	df001e15 	stw	fp,120(sp)
 8000630:	ddc01d15 	stw	r23,116(sp)
 8000634:	dd801c15 	stw	r22,112(sp)
 8000638:	dd401b15 	stw	r21,108(sp)
 800063c:	dd001a15 	stw	r20,104(sp)
 8000640:	dcc01915 	stw	r19,100(sp)
 8000644:	dc801815 	stw	r18,96(sp)
 8000648:	dc401715 	stw	r17,92(sp)
 800064c:	dc001615 	stw	r16,88(sp)
 8000650:	df001e04 	addi	fp,sp,120
 8000654:	00820034 	movhi	r2,2048
 8000658:	1084b604 	addi	r2,r2,4824
 800065c:	e0bfee15 	stw	r2,-72(fp)
 8000660:	00820034 	movhi	r2,2048
 8000664:	109bdf04 	addi	r2,r2,28540
 8000668:	e0bfef15 	stw	r2,-68(fp)
 800066c:	e0bff004 	addi	r2,fp,-64
 8000670:	e0ffe204 	addi	r3,fp,-120
 8000674:	10c00015 	stw	r3,0(r2)
 8000678:	00c20034 	movhi	r3,2048
 800067c:	18c1fe04 	addi	r3,r3,2040
 8000680:	10c00115 	stw	r3,4(r2)
 8000684:	16c00215 	stw	sp,8(r2)
 8000688:	e0bfe804 	addi	r2,fp,-96
 800068c:	1009883a 	mov	r4,r2
 8000690:	80029000 	call	8002900 <_Unwind_SjLj_Register>
  BTUart BT_UART;
 8000694:	e0ffe504 	addi	r3,fp,-108
 8000698:	00bfffc4 	movi	r2,-1
 800069c:	e0bfe915 	stw	r2,-92(fp)
 80006a0:	1809883a 	mov	r4,r3
 80006a4:	800026c0 	call	800026c <_ZN6BTUartC1Ev>
  int dma_done = 0, count = 0;
 80006a8:	e03fe315 	stw	zero,-116(fp)
 80006ac:	e03fe215 	stw	zero,-120(fp)

  int init_success = BT_UART.open(BT_RS232_UART_NAME);
 80006b0:	e0bfe504 	addi	r2,fp,-108
 80006b4:	1009883a 	mov	r4,r2
 80006b8:	01420034 	movhi	r5,2048
 80006bc:	00800044 	movi	r2,1
 80006c0:	e0bfe915 	stw	r2,-92(fp)
 80006c4:	295bf904 	addi	r5,r5,28644
 80006c8:	800031c0 	call	800031c <_ZN6BTUart4openEPKc>
 80006cc:	e0bfe415 	stw	r2,-112(fp)
  BT_UART.flush();
 80006d0:	e0bfe504 	addi	r2,fp,-108
 80006d4:	1009883a 	mov	r4,r2
 80006d8:	80005d80 	call	80005d8 <_ZN6BTUart5flushEv>

  if (init_success)
 80006dc:	e0bfe417 	ldw	r2,-112(fp)
 80006e0:	10000326 	beq	r2,zero,80006f0 <_Z7bt_taskv+0xcc>
    printf("INIT SUCCESS: RS232 UART port.\n");
 80006e4:	01020034 	movhi	r4,2048
 80006e8:	211bfe04 	addi	r4,r4,28664
 80006ec:	80034240 	call	8003424 <puts>


  printf("START READING FROM UART FIFO ...\n");
 80006f0:	01020034 	movhi	r4,2048
 80006f4:	00800044 	movi	r2,1
 80006f8:	e0bfe915 	stw	r2,-92(fp)
 80006fc:	211c0604 	addi	r4,r4,28696
 8000700:	80034240 	call	8003424 <puts>

  while (1) {
    if (BT_UART.read_ready()) {
 8000704:	e0ffe504 	addi	r3,fp,-108
 8000708:	00800044 	movi	r2,1
 800070c:	e0bfe915 	stw	r2,-92(fp)
 8000710:	1809883a 	mov	r4,r3
 8000714:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 8000718:	1004c03a 	cmpne	r2,r2,zero
 800071c:	10803fcc 	andi	r2,r2,255
 8000720:	103ff826 	beq	r2,zero,8000704 <__alt_data_end+0xfc000704>
      if (count < INPUT_SIZE) {
 8000724:	e0bfe217 	ldw	r2,-120(fp)
 8000728:	10815e08 	cmpgei	r2,r2,1400
 800072c:	10000f1e 	bne	r2,zero,800076c <_Z7bt_taskv+0x148>
        input[count] = BT_UART.read_s();  // Store received image data in 'input' array
 8000730:	d0e00417 	ldw	r3,-32752(gp)
 8000734:	e0bfe217 	ldw	r2,-120(fp)
 8000738:	1085883a 	add	r2,r2,r2
 800073c:	1085883a 	add	r2,r2,r2
 8000740:	1885883a 	add	r2,r3,r2
 8000744:	e0bff515 	stw	r2,-44(fp)
 8000748:	e0bfe504 	addi	r2,fp,-108
 800074c:	1009883a 	mov	r4,r2
 8000750:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 8000754:	e0fff517 	ldw	r3,-44(fp)
 8000758:	18800015 	stw	r2,0(r3)
        count++;
 800075c:	e0bfe217 	ldw	r2,-120(fp)
 8000760:	10800044 	addi	r2,r2,1
 8000764:	e0bfe215 	stw	r2,-120(fp)
 8000768:	003fe606 	br	8000704 <__alt_data_end+0xfc000704>
      } else {
        while (!BT_UART.read_ready()) {} // Wait for next integer (dynamodb entry id: require to store result in the correct entry in db)
 800076c:	0001883a 	nop
 8000770:	e0ffe504 	addi	r3,fp,-108
 8000774:	00800044 	movi	r2,1
 8000778:	e0bfe915 	stw	r2,-92(fp)
 800077c:	1809883a 	mov	r4,r3
 8000780:	80005900 	call	8000590 <_ZN6BTUart10read_readyEv>
 8000784:	1005003a 	cmpeq	r2,r2,zero
 8000788:	10803fcc 	andi	r2,r2,255
 800078c:	103ff81e 	bne	r2,zero,8000770 <__alt_data_end+0xfc000770>
        id[0] = BT_UART.read_s();
 8000790:	d0a00517 	ldw	r2,-32748(gp)
 8000794:	e0bff615 	stw	r2,-40(fp)
 8000798:	e0bfe504 	addi	r2,fp,-108
 800079c:	1009883a 	mov	r4,r2
 80007a0:	80003840 	call	8000384 <_ZN6BTUart6read_sEv>
 80007a4:	e0fff617 	ldw	r3,-40(fp)
 80007a8:	18800015 	stw	r2,0(r3)
        printf("\nTAG ID: %d\n", id[0]);
 80007ac:	d0a00517 	ldw	r2,-32748(gp)
 80007b0:	10800017 	ldw	r2,0(r2)
 80007b4:	01020034 	movhi	r4,2048
 80007b8:	211c0f04 	addi	r4,r4,28732
 80007bc:	100b883a 	mov	r5,r2
 80007c0:	80033580 	call	8003358 <printf>

        // Write to DMA control port slave address to start DNN accelerator on HPS side
        dma_done = start_dma();
 80007c4:	80009340 	call	8000934 <_Z9start_dmav>
 80007c8:	e0bfe315 	stw	r2,-116(fp)

        if (dma_done)
 80007cc:	e0bfe317 	ldw	r2,-116(fp)
 80007d0:	10000226 	beq	r2,zero,80007dc <_Z7bt_taskv+0x1b8>
          dma_done = 0;
 80007d4:	e03fe315 	stw	zero,-116(fp)
 80007d8:	00000506 	br	80007f0 <_Z7bt_taskv+0x1cc>
        else
          printf("DMA ERROR: Start DMA falied.\n");
 80007dc:	01020034 	movhi	r4,2048
 80007e0:	00800044 	movi	r2,1
 80007e4:	e0bfe915 	stw	r2,-92(fp)
 80007e8:	211c1304 	addi	r4,r4,28748
 80007ec:	80034240 	call	8003424 <puts>

        count = 0;  // Reset counter, wait for next image
 80007f0:	e03fe215 	stw	zero,-120(fp)
 80007f4:	003fc306 	br	8000704 <__alt_data_end+0xfc000704>
 80007f8:	e7001e04 	addi	fp,fp,120
 80007fc:	e0bfea17 	ldw	r2,-88(fp)
 8000800:	e0bff715 	stw	r2,-36(fp)
      }
    }
  }

  return 0;
 8000804:	e0bfe504 	addi	r2,fp,-108
 8000808:	e03fe915 	stw	zero,-92(fp)
 800080c:	1009883a 	mov	r4,r2
 8000810:	800029c0 	call	800029c <_ZN6BTUartD1Ev>
 8000814:	e0fff717 	ldw	r3,-36(fp)
 8000818:	00bfffc4 	movi	r2,-1
 800081c:	e0bfe915 	stw	r2,-92(fp)
 8000820:	1809883a 	mov	r4,r3
 8000824:	8002afc0 	call	8002afc <_Unwind_SjLj_Resume>

08000828 <alt_dma_txchan_close>:
 * system that it has finished with a given DMA transmit channel. This is only
 * provided for completness.
 */

static ALT_INLINE int alt_dma_txchan_close (alt_dma_txchan dma)
{
 8000828:	defffe04 	addi	sp,sp,-8
 800082c:	df000115 	stw	fp,4(sp)
 8000830:	df000104 	addi	fp,sp,4
 8000834:	e13fff15 	stw	r4,-4(fp)
  return 0;
 8000838:	0005883a 	mov	r2,zero
}
 800083c:	e037883a 	mov	sp,fp
 8000840:	df000017 	ldw	fp,0(sp)
 8000844:	dec00104 	addi	sp,sp,4
 8000848:	f800283a 	ret

0800084c <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
 800084c:	defff904 	addi	sp,sp,-28
 8000850:	dfc00615 	stw	ra,24(sp)
 8000854:	df000515 	stw	fp,20(sp)
 8000858:	df000504 	addi	fp,sp,20
 800085c:	e13ffc15 	stw	r4,-16(fp)
 8000860:	e17ffd15 	stw	r5,-12(fp)
 8000864:	e1bffe15 	stw	r6,-8(fp)
 8000868:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
 800086c:	e0bffc17 	ldw	r2,-16(fp)
 8000870:	10000a26 	beq	r2,zero,800089c <alt_dma_txchan_send+0x50>
 8000874:	e0bffc17 	ldw	r2,-16(fp)
 8000878:	10800417 	ldw	r2,16(r2)
 800087c:	e0c00217 	ldw	r3,8(fp)
 8000880:	d8c00015 	stw	r3,0(sp)
 8000884:	e13ffc17 	ldw	r4,-16(fp)
 8000888:	e17ffd17 	ldw	r5,-12(fp)
 800088c:	e1bffe17 	ldw	r6,-8(fp)
 8000890:	e1ffff17 	ldw	r7,-4(fp)
 8000894:	103ee83a 	callr	r2
 8000898:	00000106 	br	80008a0 <alt_dma_txchan_send+0x54>
 800089c:	00bffb44 	movi	r2,-19
}
 80008a0:	e037883a 	mov	sp,fp
 80008a4:	dfc00117 	ldw	ra,4(sp)
 80008a8:	df000017 	ldw	fp,0(sp)
 80008ac:	dec00204 	addi	sp,sp,8
 80008b0:	f800283a 	ret

080008b4 <alt_dma_txchan_ioctl>:
 */

static ALT_INLINE int alt_dma_txchan_ioctl (alt_dma_txchan dma, 
              int            req, 
              void*          arg)
{
 80008b4:	defffb04 	addi	sp,sp,-20
 80008b8:	dfc00415 	stw	ra,16(sp)
 80008bc:	df000315 	stw	fp,12(sp)
 80008c0:	df000304 	addi	fp,sp,12
 80008c4:	e13ffd15 	stw	r4,-12(fp)
 80008c8:	e17ffe15 	stw	r5,-8(fp)
 80008cc:	e1bfff15 	stw	r6,-4(fp)
  return dma ? dma->ioctl (dma, req, arg) : -ENODEV;
 80008d0:	e0bffd17 	ldw	r2,-12(fp)
 80008d4:	10000726 	beq	r2,zero,80008f4 <alt_dma_txchan_ioctl+0x40>
 80008d8:	e0bffd17 	ldw	r2,-12(fp)
 80008dc:	10800517 	ldw	r2,20(r2)
 80008e0:	e13ffd17 	ldw	r4,-12(fp)
 80008e4:	e17ffe17 	ldw	r5,-8(fp)
 80008e8:	e1bfff17 	ldw	r6,-4(fp)
 80008ec:	103ee83a 	callr	r2
 80008f0:	00000106 	br	80008f8 <alt_dma_txchan_ioctl+0x44>
 80008f4:	00bffb44 	movi	r2,-19
}
 80008f8:	e037883a 	mov	sp,fp
 80008fc:	dfc00117 	ldw	ra,4(sp)
 8000900:	df000017 	ldw	fp,0(sp)
 8000904:	dec00204 	addi	sp,sp,8
 8000908:	f800283a 	ret

0800090c <_Z8dma_donePv>:
volatile int dma_complete = 0; /* flag used to indicate the transaction is complete */


/* function that is called when the transaction completes */
void dma_done(void* handle)
{
 800090c:	defffe04 	addi	sp,sp,-8
 8000910:	df000115 	stw	fp,4(sp)
 8000914:	df000104 	addi	fp,sp,4
 8000918:	e13fff15 	stw	r4,-4(fp)
    dma_complete = 1;
 800091c:	00800044 	movi	r2,1
 8000920:	d0a24015 	stw	r2,-30464(gp)
}
 8000924:	e037883a 	mov	sp,fp
 8000928:	df000017 	ldw	fp,0(sp)
 800092c:	dec00104 	addi	sp,sp,4
 8000930:	f800283a 	ret

08000934 <_Z9start_dmav>:


int start_dma(void)
{
 8000934:	defffc04 	addi	sp,sp,-16
 8000938:	dfc00315 	stw	ra,12(sp)
 800093c:	df000215 	stw	fp,8(sp)
 8000940:	df000204 	addi	fp,sp,8
    alt_dma_txchan tx;

    /* Obtain a handle for the device */
    if ((tx = alt_dma_txchan_open (DMA_FPGA_TO_HPS_NAME)) == NULL)
 8000944:	01020034 	movhi	r4,2048
 8000948:	211c1b04 	addi	r4,r4,28780
 800094c:	80045880 	call	8004588 <alt_dma_txchan_open>
 8000950:	e0bfff15 	stw	r2,-4(fp)
 8000954:	e0bfff17 	ldw	r2,-4(fp)
 8000958:	1005003a 	cmpeq	r2,r2,zero
 800095c:	10803fcc 	andi	r2,r2,255
 8000960:	10000526 	beq	r2,zero,8000978 <_Z9start_dmav+0x44>
    {
        printf ("Error: failed to open device\n");
 8000964:	01020034 	movhi	r4,2048
 8000968:	211c2104 	addi	r4,r4,28804
 800096c:	80034240 	call	8003424 <puts>
        exit (1);
 8000970:	01000044 	movi	r4,1
 8000974:	8002c300 	call	8002c30 <exit>
    }
    else
    {
        alt_dma_txchan_ioctl(tx, ALT_DMA_TX_ONLY_ON, dnn_acc);
 8000978:	d0a00617 	ldw	r2,-32744(gp)
 800097c:	e13fff17 	ldw	r4,-4(fp)
 8000980:	014000c4 	movi	r5,3
 8000984:	100d883a 	mov	r6,r2
 8000988:	80008b40 	call	80008b4 <alt_dma_txchan_ioctl>

        /* Post the transmit request */
        if (alt_dma_txchan_send (tx, tag_id, 1, dma_done, NULL) < 0)
 800098c:	d0a00717 	ldw	r2,-32740(gp)
 8000990:	d8000015 	stw	zero,0(sp)
 8000994:	e13fff17 	ldw	r4,-4(fp)
 8000998:	100b883a 	mov	r5,r2
 800099c:	01800044 	movi	r6,1
 80009a0:	01c20034 	movhi	r7,2048
 80009a4:	39c24304 	addi	r7,r7,2316
 80009a8:	800084c0 	call	800084c <alt_dma_txchan_send>
 80009ac:	1004d7fa 	srli	r2,r2,31
 80009b0:	10803fcc 	andi	r2,r2,255
 80009b4:	10000526 	beq	r2,zero,80009cc <_Z9start_dmav+0x98>
        {
            printf ("Error: failed to post transmit request\n");
 80009b8:	01020034 	movhi	r4,2048
 80009bc:	211c2904 	addi	r4,r4,28836
 80009c0:	80034240 	call	8003424 <puts>
            exit (1);
 80009c4:	01000044 	movi	r4,1
 80009c8:	8002c300 	call	8002c30 <exit>
        }
        /* Wait for the transaction to complete */
        while (!dma_complete);
 80009cc:	0001883a 	nop
 80009d0:	d0a24017 	ldw	r2,-30464(gp)
 80009d4:	1005003a 	cmpeq	r2,r2,zero
 80009d8:	10803fcc 	andi	r2,r2,255
 80009dc:	103ffc1e 	bne	r2,zero,80009d0 <__alt_data_end+0xfc0009d0>
        
        printf ("Transaction complete\n");
 80009e0:	01020034 	movhi	r4,2048
 80009e4:	211c3304 	addi	r4,r4,28876
 80009e8:	80034240 	call	8003424 <puts>
        alt_dma_txchan_close (tx);
 80009ec:	e13fff17 	ldw	r4,-4(fp)
 80009f0:	80008280 	call	8000828 <alt_dma_txchan_close>
    }

    return dma_complete;
 80009f4:	d0a24017 	ldw	r2,-30464(gp)
 80009f8:	e037883a 	mov	sp,fp
 80009fc:	dfc00117 	ldw	ra,4(sp)
 8000a00:	df000017 	ldw	fp,0(sp)
 8000a04:	dec00204 	addi	sp,sp,8
 8000a08:	f800283a 	ret

08000a0c <main>:
#include <stdio.h>
#include "../../src/terasic_includes.h"
#include "../../src/tasks.h"

int main()
{
 8000a0c:	defffe04 	addi	sp,sp,-8
 8000a10:	dfc00115 	stw	ra,4(sp)
 8000a14:	df000015 	stw	fp,0(sp)
 8000a18:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION: BLUETOOTH TEST\n");
 8000a1c:	01020034 	movhi	r4,2048
 8000a20:	211c3904 	addi	r4,r4,28900
 8000a24:	80034240 	call	8003424 <puts>
  printf("===========================================\n\n");
 8000a28:	01020034 	movhi	r4,2048
 8000a2c:	211c4504 	addi	r4,r4,28948
 8000a30:	80034240 	call	8003424 <puts>

  bt_task();
 8000a34:	80006240 	call	8000624 <_Z7bt_taskv>

  return 0;
 8000a38:	0005883a 	mov	r2,zero
}
 8000a3c:	e037883a 	mov	sp,fp
 8000a40:	dfc00117 	ldw	ra,4(sp)
 8000a44:	df000017 	ldw	fp,0(sp)
 8000a48:	dec00204 	addi	sp,sp,8
 8000a4c:	f800283a 	ret

08000a50 <_ZL12read_sleb128PKhPl>:
 8000a50:	0011883a 	mov	r8,zero
 8000a54:	000d883a 	mov	r6,zero
 8000a58:	21c00003 	ldbu	r7,0(r4)
 8000a5c:	20800044 	addi	r2,r4,1
 8000a60:	1009883a 	mov	r4,r2
 8000a64:	38c01fcc 	andi	r3,r7,127
 8000a68:	1986983a 	sll	r3,r3,r6
 8000a6c:	3a403fcc 	andi	r9,r7,255
 8000a70:	4a40201c 	xori	r9,r9,128
 8000a74:	4a7fe004 	addi	r9,r9,-128
 8000a78:	40d0b03a 	or	r8,r8,r3
 8000a7c:	318001c4 	addi	r6,r6,7
 8000a80:	483ff516 	blt	r9,zero,8000a58 <__alt_data_end+0xfc000a58>
 8000a84:	00c007c4 	movi	r3,31
 8000a88:	19800536 	bltu	r3,r6,8000aa0 <_ZL12read_sleb128PKhPl+0x50>
 8000a8c:	39c0100c 	andi	r7,r7,64
 8000a90:	38000326 	beq	r7,zero,8000aa0 <_ZL12read_sleb128PKhPl+0x50>
 8000a94:	00ffffc4 	movi	r3,-1
 8000a98:	198c983a 	sll	r6,r3,r6
 8000a9c:	3210b03a 	or	r8,r6,r8
 8000aa0:	2a000015 	stw	r8,0(r5)
 8000aa4:	f800283a 	ret

08000aa8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 8000aa8:	28800017 	ldw	r2,0(r5)
 8000aac:	30c00017 	ldw	r3,0(r6)
 8000ab0:	defffb04 	addi	sp,sp,-20
 8000ab4:	10800217 	ldw	r2,8(r2)
 8000ab8:	dc400315 	stw	r17,12(sp)
 8000abc:	dc000215 	stw	r16,8(sp)
 8000ac0:	d9400115 	stw	r5,4(sp)
 8000ac4:	dfc00415 	stw	ra,16(sp)
 8000ac8:	2021883a 	mov	r16,r4
 8000acc:	d8c00015 	stw	r3,0(sp)
 8000ad0:	2809883a 	mov	r4,r5
 8000ad4:	3023883a 	mov	r17,r6
 8000ad8:	103ee83a 	callr	r2
 8000adc:	10803fcc 	andi	r2,r2,255
 8000ae0:	d9400117 	ldw	r5,4(sp)
 8000ae4:	10000326 	beq	r2,zero,8000af4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
 8000ae8:	d8800017 	ldw	r2,0(sp)
 8000aec:	10800017 	ldw	r2,0(r2)
 8000af0:	d8800015 	stw	r2,0(sp)
 8000af4:	80800017 	ldw	r2,0(r16)
 8000af8:	8009883a 	mov	r4,r16
 8000afc:	d80d883a 	mov	r6,sp
 8000b00:	10800417 	ldw	r2,16(r2)
 8000b04:	01c00044 	movi	r7,1
 8000b08:	103ee83a 	callr	r2
 8000b0c:	10c03fcc 	andi	r3,r2,255
 8000b10:	18000226 	beq	r3,zero,8000b1c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
 8000b14:	d8c00017 	ldw	r3,0(sp)
 8000b18:	88c00015 	stw	r3,0(r17)
 8000b1c:	dfc00417 	ldw	ra,16(sp)
 8000b20:	dc400317 	ldw	r17,12(sp)
 8000b24:	dc000217 	ldw	r16,8(sp)
 8000b28:	dec00504 	addi	sp,sp,20
 8000b2c:	f800283a 	ret

08000b30 <_ZL21size_of_encoded_valueh>:
 8000b30:	deffff04 	addi	sp,sp,-4
 8000b34:	dfc00015 	stw	ra,0(sp)
 8000b38:	00803fc4 	movi	r2,255
 8000b3c:	20802026 	beq	r4,r2,8000bc0 <_ZL21size_of_encoded_valueh+0x90>
 8000b40:	210001cc 	andi	r4,r4,7
 8000b44:	00800144 	movi	r2,5
 8000b48:	11001c36 	bltu	r2,r4,8000bbc <_ZL21size_of_encoded_valueh+0x8c>
 8000b4c:	200890ba 	slli	r4,r4,2
 8000b50:	00820034 	movhi	r2,2048
 8000b54:	1082d904 	addi	r2,r2,2916
 8000b58:	2089883a 	add	r4,r4,r2
 8000b5c:	20800017 	ldw	r2,0(r4)
 8000b60:	1000683a 	jmp	r2
 8000b64:	08000b7c 	xorhi	zero,at,45
 8000b68:	08000bbc 	xorhi	zero,at,46
 8000b6c:	08000b8c 	andi	zero,at,46
 8000b70:	08000b7c 	xorhi	zero,at,45
 8000b74:	08000bac 	andhi	zero,at,46
 8000b78:	08000b9c 	xori	zero,at,46
 8000b7c:	00800104 	movi	r2,4
 8000b80:	dfc00017 	ldw	ra,0(sp)
 8000b84:	dec00104 	addi	sp,sp,4
 8000b88:	f800283a 	ret
 8000b8c:	00800084 	movi	r2,2
 8000b90:	dfc00017 	ldw	ra,0(sp)
 8000b94:	dec00104 	addi	sp,sp,4
 8000b98:	f800283a 	ret
 8000b9c:	00800044 	movi	r2,1
 8000ba0:	dfc00017 	ldw	ra,0(sp)
 8000ba4:	dec00104 	addi	sp,sp,4
 8000ba8:	f800283a 	ret
 8000bac:	00800204 	movi	r2,8
 8000bb0:	dfc00017 	ldw	ra,0(sp)
 8000bb4:	dec00104 	addi	sp,sp,4
 8000bb8:	f800283a 	ret
 8000bbc:	8002c180 	call	8002c18 <abort>
 8000bc0:	0005883a 	mov	r2,zero
 8000bc4:	dfc00017 	ldw	ra,0(sp)
 8000bc8:	dec00104 	addi	sp,sp,4
 8000bcc:	f800283a 	ret

08000bd0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8000bd0:	defffa04 	addi	sp,sp,-24
 8000bd4:	dc000315 	stw	r16,12(sp)
 8000bd8:	dfc00515 	stw	ra,20(sp)
 8000bdc:	dc400415 	stw	r17,16(sp)
 8000be0:	00801404 	movi	r2,80
 8000be4:	2021883a 	mov	r16,r4
 8000be8:	20807526 	beq	r4,r2,8000dc0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
 8000bec:	208003cc 	andi	r2,r4,15
 8000bf0:	00c00304 	movi	r3,12
 8000bf4:	18807136 	bltu	r3,r2,8000dbc <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
 8000bf8:	100490ba 	slli	r2,r2,2
 8000bfc:	00c20034 	movhi	r3,2048
 8000c00:	18c30504 	addi	r3,r3,3092
 8000c04:	10c5883a 	add	r2,r2,r3
 8000c08:	10800017 	ldw	r2,0(r2)
 8000c0c:	2823883a 	mov	r17,r5
 8000c10:	1000683a 	jmp	r2
 8000c14:	08000cfc 	xorhi	zero,at,51
 8000c18:	08000d2c 	andhi	zero,at,52
 8000c1c:	08000ce4 	muli	zero,at,51
 8000c20:	08000c48 	cmpgei	zero,at,49
 8000c24:	08000cb4 	orhi	zero,at,50
 8000c28:	08000d68 	cmpgeui	zero,at,53
 8000c2c:	08000dbc 	xorhi	zero,at,54
 8000c30:	08000dbc 	xorhi	zero,at,54
 8000c34:	08000dbc 	xorhi	zero,at,54
 8000c38:	08000d74 	orhi	zero,at,53
 8000c3c:	08000d98 	cmpnei	zero,at,54
 8000c40:	08000c48 	cmpgei	zero,at,49
 8000c44:	08000cb4 	orhi	zero,at,50
 8000c48:	30800043 	ldbu	r2,1(r6)
 8000c4c:	30c00083 	ldbu	r3,2(r6)
 8000c50:	310000c3 	ldbu	r4,3(r6)
 8000c54:	32000003 	ldbu	r8,0(r6)
 8000c58:	1004923a 	slli	r2,r2,8
 8000c5c:	1806943a 	slli	r3,r3,16
 8000c60:	2008963a 	slli	r4,r4,24
 8000c64:	1204b03a 	or	r2,r2,r8
 8000c68:	1884b03a 	or	r2,r3,r2
 8000c6c:	2086b03a 	or	r3,r4,r2
 8000c70:	30800104 	addi	r2,r6,4
 8000c74:	18000926 	beq	r3,zero,8000c9c <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 8000c78:	81401c0c 	andi	r5,r16,112
 8000c7c:	01000404 	movi	r4,16
 8000c80:	29005526 	beq	r5,r4,8000dd8 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
 8000c84:	84003fcc 	andi	r16,r16,255
 8000c88:	8400201c 	xori	r16,r16,128
 8000c8c:	843fe004 	addi	r16,r16,-128
 8000c90:	1c47883a 	add	r3,r3,r17
 8000c94:	8000010e 	bge	r16,zero,8000c9c <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 8000c98:	18c00017 	ldw	r3,0(r3)
 8000c9c:	38c00015 	stw	r3,0(r7)
 8000ca0:	dfc00517 	ldw	ra,20(sp)
 8000ca4:	dc400417 	ldw	r17,16(sp)
 8000ca8:	dc000317 	ldw	r16,12(sp)
 8000cac:	dec00604 	addi	sp,sp,24
 8000cb0:	f800283a 	ret
 8000cb4:	30800043 	ldbu	r2,1(r6)
 8000cb8:	30c00083 	ldbu	r3,2(r6)
 8000cbc:	310000c3 	ldbu	r4,3(r6)
 8000cc0:	32000003 	ldbu	r8,0(r6)
 8000cc4:	1004923a 	slli	r2,r2,8
 8000cc8:	1806943a 	slli	r3,r3,16
 8000ccc:	2008963a 	slli	r4,r4,24
 8000cd0:	1204b03a 	or	r2,r2,r8
 8000cd4:	1884b03a 	or	r2,r3,r2
 8000cd8:	2086b03a 	or	r3,r4,r2
 8000cdc:	30800204 	addi	r2,r6,8
 8000ce0:	003fe406 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000ce4:	30c00043 	ldbu	r3,1(r6)
 8000ce8:	32000003 	ldbu	r8,0(r6)
 8000cec:	30800084 	addi	r2,r6,2
 8000cf0:	1806923a 	slli	r3,r3,8
 8000cf4:	1a06b03a 	or	r3,r3,r8
 8000cf8:	003fde06 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000cfc:	30800043 	ldbu	r2,1(r6)
 8000d00:	30c00083 	ldbu	r3,2(r6)
 8000d04:	314000c3 	ldbu	r5,3(r6)
 8000d08:	31000003 	ldbu	r4,0(r6)
 8000d0c:	1004923a 	slli	r2,r2,8
 8000d10:	1806943a 	slli	r3,r3,16
 8000d14:	280a963a 	slli	r5,r5,24
 8000d18:	1104b03a 	or	r2,r2,r4
 8000d1c:	1884b03a 	or	r2,r3,r2
 8000d20:	2886b03a 	or	r3,r5,r2
 8000d24:	30800104 	addi	r2,r6,4
 8000d28:	003fd206 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000d2c:	3013883a 	mov	r9,r6
 8000d30:	0007883a 	mov	r3,zero
 8000d34:	0011883a 	mov	r8,zero
 8000d38:	49000003 	ldbu	r4,0(r9)
 8000d3c:	48800044 	addi	r2,r9,1
 8000d40:	1013883a 	mov	r9,r2
 8000d44:	21401fcc 	andi	r5,r4,127
 8000d48:	2a0a983a 	sll	r5,r5,r8
 8000d4c:	21003fcc 	andi	r4,r4,255
 8000d50:	2100201c 	xori	r4,r4,128
 8000d54:	213fe004 	addi	r4,r4,-128
 8000d58:	1946b03a 	or	r3,r3,r5
 8000d5c:	420001c4 	addi	r8,r8,7
 8000d60:	203ff516 	blt	r4,zero,8000d38 <__alt_data_end+0xfc000d38>
 8000d64:	003fc306 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000d68:	30c00003 	ldbu	r3,0(r6)
 8000d6c:	30800044 	addi	r2,r6,1
 8000d70:	003fc006 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000d74:	3009883a 	mov	r4,r6
 8000d78:	d80b883a 	mov	r5,sp
 8000d7c:	d9800115 	stw	r6,4(sp)
 8000d80:	d9c00215 	stw	r7,8(sp)
 8000d84:	8000a500 	call	8000a50 <_ZL12read_sleb128PKhPl>
 8000d88:	d8c00017 	ldw	r3,0(sp)
 8000d8c:	d9800117 	ldw	r6,4(sp)
 8000d90:	d9c00217 	ldw	r7,8(sp)
 8000d94:	003fb706 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000d98:	30c00043 	ldbu	r3,1(r6)
 8000d9c:	32000003 	ldbu	r8,0(r6)
 8000da0:	30800084 	addi	r2,r6,2
 8000da4:	1806923a 	slli	r3,r3,8
 8000da8:	1a06b03a 	or	r3,r3,r8
 8000dac:	18ffffcc 	andi	r3,r3,65535
 8000db0:	18e0001c 	xori	r3,r3,32768
 8000db4:	18e00004 	addi	r3,r3,-32768
 8000db8:	003fae06 	br	8000c74 <__alt_data_end+0xfc000c74>
 8000dbc:	8002c180 	call	8002c18 <abort>
 8000dc0:	318000c4 	addi	r6,r6,3
 8000dc4:	00bfff04 	movi	r2,-4
 8000dc8:	3084703a 	and	r2,r6,r2
 8000dcc:	10c00017 	ldw	r3,0(r2)
 8000dd0:	10800104 	addi	r2,r2,4
 8000dd4:	003fb106 	br	8000c9c <__alt_data_end+0xfc000c9c>
 8000dd8:	3023883a 	mov	r17,r6
 8000ddc:	003fa906 	br	8000c84 <__alt_data_end+0xfc000c84>

08000de0 <_ZL15get_ttype_entryP16lsda_header_infom>:
 8000de0:	defffc04 	addi	sp,sp,-16
 8000de4:	dfc00315 	stw	ra,12(sp)
 8000de8:	dc000215 	stw	r16,8(sp)
 8000dec:	2021883a 	mov	r16,r4
 8000df0:	21000503 	ldbu	r4,20(r4)
 8000df4:	d9400115 	stw	r5,4(sp)
 8000df8:	8000b300 	call	8000b30 <_ZL21size_of_encoded_valueh>
 8000dfc:	d9400117 	ldw	r5,4(sp)
 8000e00:	1009883a 	mov	r4,r2
 8000e04:	80026d00 	call	80026d0 <__mulsi3>
 8000e08:	81800317 	ldw	r6,12(r16)
 8000e0c:	81000503 	ldbu	r4,20(r16)
 8000e10:	81400217 	ldw	r5,8(r16)
 8000e14:	308dc83a 	sub	r6,r6,r2
 8000e18:	d80f883a 	mov	r7,sp
 8000e1c:	8000bd00 	call	8000bd0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8000e20:	d8800017 	ldw	r2,0(sp)
 8000e24:	dfc00317 	ldw	ra,12(sp)
 8000e28:	dc000217 	ldw	r16,8(sp)
 8000e2c:	dec00404 	addi	sp,sp,16
 8000e30:	f800283a 	ret

08000e34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 8000e34:	defffb04 	addi	sp,sp,-20
 8000e38:	dc000115 	stw	r16,4(sp)
 8000e3c:	24000317 	ldw	r16,12(r4)
 8000e40:	01ce303a 	nor	r7,zero,r7
 8000e44:	dc800315 	stw	r18,12(sp)
 8000e48:	dc400215 	stw	r17,8(sp)
 8000e4c:	dfc00415 	stw	ra,16(sp)
 8000e50:	2023883a 	mov	r17,r4
 8000e54:	2825883a 	mov	r18,r5
 8000e58:	d9800015 	stw	r6,0(sp)
 8000e5c:	81e1883a 	add	r16,r16,r7
 8000e60:	8009883a 	mov	r4,r16
 8000e64:	000b883a 	mov	r5,zero
 8000e68:	000d883a 	mov	r6,zero
 8000e6c:	20800003 	ldbu	r2,0(r4)
 8000e70:	84000044 	addi	r16,r16,1
 8000e74:	8009883a 	mov	r4,r16
 8000e78:	10c01fcc 	andi	r3,r2,127
 8000e7c:	1986983a 	sll	r3,r3,r6
 8000e80:	10803fcc 	andi	r2,r2,255
 8000e84:	1080201c 	xori	r2,r2,128
 8000e88:	10bfe004 	addi	r2,r2,-128
 8000e8c:	28cab03a 	or	r5,r5,r3
 8000e90:	318001c4 	addi	r6,r6,7
 8000e94:	103ff516 	blt	r2,zero,8000e6c <__alt_data_end+0xfc000e6c>
 8000e98:	28000e26 	beq	r5,zero,8000ed4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
 8000e9c:	8809883a 	mov	r4,r17
 8000ea0:	8000de00 	call	8000de0 <_ZL15get_ttype_entryP16lsda_header_infom>
 8000ea4:	1009883a 	mov	r4,r2
 8000ea8:	900b883a 	mov	r5,r18
 8000eac:	d80d883a 	mov	r6,sp
 8000eb0:	8000aa80 	call	8000aa8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 8000eb4:	10c03fcc 	andi	r3,r2,255
 8000eb8:	183fe926 	beq	r3,zero,8000e60 <__alt_data_end+0xfc000e60>
 8000ebc:	dfc00417 	ldw	ra,16(sp)
 8000ec0:	dc800317 	ldw	r18,12(sp)
 8000ec4:	dc400217 	ldw	r17,8(sp)
 8000ec8:	dc000117 	ldw	r16,4(sp)
 8000ecc:	dec00504 	addi	sp,sp,20
 8000ed0:	f800283a 	ret
 8000ed4:	0005883a 	mov	r2,zero
 8000ed8:	003ff806 	br	8000ebc <__alt_data_end+0xfc000ebc>

08000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8000edc:	deffff04 	addi	sp,sp,-4
 8000ee0:	dfc00015 	stw	ra,0(sp)
 8000ee4:	00803fc4 	movi	r2,255
 8000ee8:	20800e26 	beq	r4,r2,8000f24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8000eec:	20801c0c 	andi	r2,r4,112
 8000ef0:	00c00804 	movi	r3,32
 8000ef4:	10c01726 	beq	r2,r3,8000f54 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
 8000ef8:	18800e2e 	bgeu	r3,r2,8000f34 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
 8000efc:	00c01004 	movi	r3,64
 8000f00:	10c01026 	beq	r2,r3,8000f44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 8000f04:	00c01404 	movi	r3,80
 8000f08:	10c00626 	beq	r2,r3,8000f24 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
 8000f0c:	00c00c04 	movi	r3,48
 8000f10:	10c00b1e 	bne	r2,r3,8000f40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
 8000f14:	2809883a 	mov	r4,r5
 8000f18:	dfc00017 	ldw	ra,0(sp)
 8000f1c:	dec00104 	addi	sp,sp,4
 8000f20:	80029d81 	jmpi	80029d8 <_Unwind_GetDataRelBase>
 8000f24:	0005883a 	mov	r2,zero
 8000f28:	dfc00017 	ldw	ra,0(sp)
 8000f2c:	dec00104 	addi	sp,sp,4
 8000f30:	f800283a 	ret
 8000f34:	103ffb26 	beq	r2,zero,8000f24 <__alt_data_end+0xfc000f24>
 8000f38:	00c00404 	movi	r3,16
 8000f3c:	10fff926 	beq	r2,r3,8000f24 <__alt_data_end+0xfc000f24>
 8000f40:	8002c180 	call	8002c18 <abort>
 8000f44:	2809883a 	mov	r4,r5
 8000f48:	dfc00017 	ldw	ra,0(sp)
 8000f4c:	dec00104 	addi	sp,sp,4
 8000f50:	80029c81 	jmpi	80029c8 <_Unwind_GetRegionStart>
 8000f54:	2809883a 	mov	r4,r5
 8000f58:	dfc00017 	ldw	ra,0(sp)
 8000f5c:	dec00104 	addi	sp,sp,4
 8000f60:	80029e01 	jmpi	80029e0 <_Unwind_GetTextRelBase>

08000f64 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 8000f64:	defff104 	addi	sp,sp,-60
 8000f68:	dd800b15 	stw	r22,44(sp)
 8000f6c:	382dd23a 	srai	r22,r7,8
 8000f70:	dd400a15 	stw	r21,40(sp)
 8000f74:	dd000915 	stw	r20,36(sp)
 8000f78:	dfc00e15 	stw	ra,56(sp)
 8000f7c:	df000d15 	stw	fp,52(sp)
 8000f80:	ddc00c15 	stw	r23,48(sp)
 8000f84:	dcc00815 	stw	r19,32(sp)
 8000f88:	dc800715 	stw	r18,28(sp)
 8000f8c:	dc400615 	stw	r17,24(sp)
 8000f90:	dc000515 	stw	r16,20(sp)
 8000f94:	d9c00315 	stw	r7,12(sp)
 8000f98:	d9400215 	stw	r5,8(sp)
 8000f9c:	2029883a 	mov	r20,r4
 8000fa0:	dd400f17 	ldw	r21,60(sp)
 8000fa4:	b000010e 	bge	r22,zero,8000fac <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
 8000fa8:	05adc83a 	sub	r22,zero,r22
 8000fac:	01000144 	movi	r4,5
 8000fb0:	000b883a 	mov	r5,zero
 8000fb4:	d9800415 	stw	r6,16(sp)
 8000fb8:	8000edc0 	call	8000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8000fbc:	d9800417 	ldw	r6,16(sp)
 8000fc0:	100b883a 	mov	r5,r2
 8000fc4:	d9c00104 	addi	r7,sp,4
 8000fc8:	01000144 	movi	r4,5
 8000fcc:	8000bd00 	call	8000bd0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8000fd0:	1009883a 	mov	r4,r2
 8000fd4:	017ffe44 	movi	r5,-7
 8000fd8:	1021883a 	mov	r16,r2
 8000fdc:	80026d00 	call	80026d0 <__mulsi3>
 8000fe0:	1027883a 	mov	r19,r2
 8000fe4:	002f883a 	mov	r23,zero
 8000fe8:	84400003 	ldbu	r17,0(r16)
 8000fec:	8009883a 	mov	r4,r16
 8000ff0:	014001c4 	movi	r5,7
 8000ff4:	80026d00 	call	80026d0 <__mulsi3>
 8000ff8:	88c01fcc 	andi	r3,r17,127
 8000ffc:	14c5883a 	add	r2,r2,r19
 8001000:	1886983a 	sll	r3,r3,r2
 8001004:	8c403fcc 	andi	r17,r17,255
 8001008:	8c40201c 	xori	r17,r17,128
 800100c:	8c7fe004 	addi	r17,r17,-128
 8001010:	84000044 	addi	r16,r16,1
 8001014:	b8eeb03a 	or	r23,r23,r3
 8001018:	883ff316 	blt	r17,zero,8000fe8 <__alt_data_end+0xfc000fe8>
 800101c:	85e1883a 	add	r16,r16,r23
 8001020:	8009883a 	mov	r4,r16
 8001024:	017ffe44 	movi	r5,-7
 8001028:	80026d00 	call	80026d0 <__mulsi3>
 800102c:	102f883a 	mov	r23,r2
 8001030:	8007883a 	mov	r3,r16
 8001034:	0025883a 	mov	r18,zero
 8001038:	1cc00003 	ldbu	r19,0(r3)
 800103c:	1809883a 	mov	r4,r3
 8001040:	014001c4 	movi	r5,7
 8001044:	1c400044 	addi	r17,r3,1
 8001048:	80026d00 	call	80026d0 <__mulsi3>
 800104c:	98c01fcc 	andi	r3,r19,127
 8001050:	15c5883a 	add	r2,r2,r23
 8001054:	1884983a 	sll	r2,r3,r2
 8001058:	9cc03fcc 	andi	r19,r19,255
 800105c:	9cc0201c 	xori	r19,r19,128
 8001060:	9cffe004 	addi	r19,r19,-128
 8001064:	8807883a 	mov	r3,r17
 8001068:	90a4b03a 	or	r18,r18,r2
 800106c:	983ff216 	blt	r19,zero,8001038 <__alt_data_end+0xfc001038>
 8001070:	b7003fcc 	andi	fp,r22,255
 8001074:	e73fffc4 	addi	fp,fp,-1
 8001078:	8f39883a 	add	fp,r17,fp
 800107c:	840000c4 	addi	r16,r16,3
 8001080:	848d883a 	add	r6,r16,r18
 8001084:	e009883a 	mov	r4,fp
 8001088:	017ffe44 	movi	r5,-7
 800108c:	04ffff04 	movi	r19,-4
 8001090:	34e6703a 	and	r19,r6,r19
 8001094:	80026d00 	call	80026d0 <__mulsi3>
 8001098:	002f883a 	mov	r23,zero
 800109c:	102d883a 	mov	r22,r2
 80010a0:	e4400003 	ldbu	r17,0(fp)
 80010a4:	e009883a 	mov	r4,fp
 80010a8:	014001c4 	movi	r5,7
 80010ac:	80026d00 	call	80026d0 <__mulsi3>
 80010b0:	88c01fcc 	andi	r3,r17,127
 80010b4:	1585883a 	add	r2,r2,r22
 80010b8:	1886983a 	sll	r3,r3,r2
 80010bc:	8c403fcc 	andi	r17,r17,255
 80010c0:	8c40201c 	xori	r17,r17,128
 80010c4:	e4000044 	addi	r16,fp,1
 80010c8:	8c7fe004 	addi	r17,r17,-128
 80010cc:	b8eeb03a 	or	r23,r23,r3
 80010d0:	8039883a 	mov	fp,r16
 80010d4:	883ff216 	blt	r17,zero,80010a0 <__alt_data_end+0xfc0010a0>
 80010d8:	d8800317 	ldw	r2,12(sp)
 80010dc:	14803fcc 	andi	r18,r2,255
 80010e0:	b8002326 	beq	r23,zero,8001170 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
 80010e4:	9009883a 	mov	r4,r18
 80010e8:	8000b300 	call	8000b30 <_ZL21size_of_encoded_valueh>
 80010ec:	1009883a 	mov	r4,r2
 80010f0:	b97fffc4 	addi	r5,r23,-1
 80010f4:	80026d00 	call	80026d0 <__mulsi3>
 80010f8:	9009883a 	mov	r4,r18
 80010fc:	a80b883a 	mov	r5,r21
 8001100:	14cd883a 	add	r6,r2,r19
 8001104:	d80f883a 	mov	r7,sp
 8001108:	8000bd00 	call	8000bd0 <_ZL28read_encoded_value_with_basehjPKhPj>
 800110c:	d9000017 	ldw	r4,0(sp)
 8001110:	a00b883a 	mov	r5,r20
 8001114:	d9800204 	addi	r6,sp,8
 8001118:	8000aa80 	call	8000aa8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 800111c:	10c03fcc 	andi	r3,r2,255
 8001120:	1800141e 	bne	r3,zero,8001174 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
 8001124:	8009883a 	mov	r4,r16
 8001128:	017ffe44 	movi	r5,-7
 800112c:	80026d00 	call	80026d0 <__mulsi3>
 8001130:	102d883a 	mov	r22,r2
 8001134:	002f883a 	mov	r23,zero
 8001138:	84400003 	ldbu	r17,0(r16)
 800113c:	8009883a 	mov	r4,r16
 8001140:	014001c4 	movi	r5,7
 8001144:	80026d00 	call	80026d0 <__mulsi3>
 8001148:	88c01fcc 	andi	r3,r17,127
 800114c:	1585883a 	add	r2,r2,r22
 8001150:	1886983a 	sll	r3,r3,r2
 8001154:	8c403fcc 	andi	r17,r17,255
 8001158:	8c40201c 	xori	r17,r17,128
 800115c:	8c7fe004 	addi	r17,r17,-128
 8001160:	84000044 	addi	r16,r16,1
 8001164:	b8eeb03a 	or	r23,r23,r3
 8001168:	883ff316 	blt	r17,zero,8001138 <__alt_data_end+0xfc001138>
 800116c:	003fdc06 	br	80010e0 <__alt_data_end+0xfc0010e0>
 8001170:	0005883a 	mov	r2,zero
 8001174:	dfc00e17 	ldw	ra,56(sp)
 8001178:	df000d17 	ldw	fp,52(sp)
 800117c:	ddc00c17 	ldw	r23,48(sp)
 8001180:	dd800b17 	ldw	r22,44(sp)
 8001184:	dd400a17 	ldw	r21,40(sp)
 8001188:	dd000917 	ldw	r20,36(sp)
 800118c:	dcc00817 	ldw	r19,32(sp)
 8001190:	dc800717 	ldw	r18,28(sp)
 8001194:	dc400617 	ldw	r17,24(sp)
 8001198:	dc000517 	ldw	r16,20(sp)
 800119c:	dec00f04 	addi	sp,sp,60
 80011a0:	f800283a 	ret

080011a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80011a4:	defffb04 	addi	sp,sp,-20
 80011a8:	dcc00315 	stw	r19,12(sp)
 80011ac:	dc400115 	stw	r17,4(sp)
 80011b0:	dc000015 	stw	r16,0(sp)
 80011b4:	dfc00415 	stw	ra,16(sp)
 80011b8:	dc800215 	stw	r18,8(sp)
 80011bc:	2027883a 	mov	r19,r4
 80011c0:	2821883a 	mov	r16,r5
 80011c4:	3023883a 	mov	r17,r6
 80011c8:	20003f26 	beq	r4,zero,80012c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
 80011cc:	80029c80 	call	80029c8 <_Unwind_GetRegionStart>
 80011d0:	88800015 	stw	r2,0(r17)
 80011d4:	84800003 	ldbu	r18,0(r16)
 80011d8:	00c03fc4 	movi	r3,255
 80011dc:	84000044 	addi	r16,r16,1
 80011e0:	90c03726 	beq	r18,r3,80012c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
 80011e4:	9009883a 	mov	r4,r18
 80011e8:	980b883a 	mov	r5,r19
 80011ec:	8000edc0 	call	8000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80011f0:	800d883a 	mov	r6,r16
 80011f4:	9009883a 	mov	r4,r18
 80011f8:	100b883a 	mov	r5,r2
 80011fc:	89c00104 	addi	r7,r17,4
 8001200:	8000bd00 	call	8000bd0 <_ZL28read_encoded_value_with_basehjPKhPj>
 8001204:	1021883a 	mov	r16,r2
 8001208:	80c00003 	ldbu	r3,0(r16)
 800120c:	01003fc4 	movi	r4,255
 8001210:	80800044 	addi	r2,r16,1
 8001214:	88c00505 	stb	r3,20(r17)
 8001218:	18c03fcc 	andi	r3,r3,255
 800121c:	19002c26 	beq	r3,r4,80012d0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
 8001220:	100d883a 	mov	r6,r2
 8001224:	000f883a 	mov	r7,zero
 8001228:	000b883a 	mov	r5,zero
 800122c:	30c00003 	ldbu	r3,0(r6)
 8001230:	10800044 	addi	r2,r2,1
 8001234:	100d883a 	mov	r6,r2
 8001238:	19001fcc 	andi	r4,r3,127
 800123c:	2148983a 	sll	r4,r4,r5
 8001240:	18c03fcc 	andi	r3,r3,255
 8001244:	18c0201c 	xori	r3,r3,128
 8001248:	18ffe004 	addi	r3,r3,-128
 800124c:	390eb03a 	or	r7,r7,r4
 8001250:	294001c4 	addi	r5,r5,7
 8001254:	183ff516 	blt	r3,zero,800122c <__alt_data_end+0xfc00122c>
 8001258:	11cf883a 	add	r7,r2,r7
 800125c:	89c00315 	stw	r7,12(r17)
 8001260:	10c00003 	ldbu	r3,0(r2)
 8001264:	000f883a 	mov	r7,zero
 8001268:	10800044 	addi	r2,r2,1
 800126c:	88c00545 	stb	r3,21(r17)
 8001270:	000b883a 	mov	r5,zero
 8001274:	10c00003 	ldbu	r3,0(r2)
 8001278:	10800044 	addi	r2,r2,1
 800127c:	19001fcc 	andi	r4,r3,127
 8001280:	2148983a 	sll	r4,r4,r5
 8001284:	18c03fcc 	andi	r3,r3,255
 8001288:	18c0201c 	xori	r3,r3,128
 800128c:	18ffe004 	addi	r3,r3,-128
 8001290:	390eb03a 	or	r7,r7,r4
 8001294:	294001c4 	addi	r5,r5,7
 8001298:	183ff616 	blt	r3,zero,8001274 <__alt_data_end+0xfc001274>
 800129c:	11cf883a 	add	r7,r2,r7
 80012a0:	89c00415 	stw	r7,16(r17)
 80012a4:	dfc00417 	ldw	ra,16(sp)
 80012a8:	dcc00317 	ldw	r19,12(sp)
 80012ac:	dc800217 	ldw	r18,8(sp)
 80012b0:	dc400117 	ldw	r17,4(sp)
 80012b4:	dc000017 	ldw	r16,0(sp)
 80012b8:	dec00504 	addi	sp,sp,20
 80012bc:	f800283a 	ret
 80012c0:	88800115 	stw	r2,4(r17)
 80012c4:	003fd006 	br	8001208 <__alt_data_end+0xfc001208>
 80012c8:	0005883a 	mov	r2,zero
 80012cc:	003fc006 	br	80011d0 <__alt_data_end+0xfc0011d0>
 80012d0:	88000315 	stw	zero,12(r17)
 80012d4:	003fe206 	br	8001260 <__alt_data_end+0xfc001260>

080012d8 <__gxx_personality_sj0>:
 80012d8:	00820034 	movhi	r2,2048
 80012dc:	deffde04 	addi	sp,sp,-136
 80012e0:	1084b604 	addi	r2,r2,4824
 80012e4:	d8801015 	stw	r2,64(sp)
 80012e8:	00820034 	movhi	r2,2048
 80012ec:	109be104 	addi	r2,r2,28548
 80012f0:	d8801115 	stw	r2,68(sp)
 80012f4:	00820034 	movhi	r2,2048
 80012f8:	1085f104 	addi	r2,r2,6084
 80012fc:	d9001715 	stw	r4,92(sp)
 8001300:	d9000a04 	addi	r4,sp,40
 8001304:	d8801315 	stw	r2,76(sp)
 8001308:	dfc02115 	stw	ra,132(sp)
 800130c:	df002015 	stw	fp,128(sp)
 8001310:	dec01215 	stw	sp,72(sp)
 8001314:	dec01415 	stw	sp,80(sp)
 8001318:	d9401a15 	stw	r5,104(sp)
 800131c:	d9801815 	stw	r6,96(sp)
 8001320:	d9c01915 	stw	r7,100(sp)
 8001324:	80029000 	call	8002900 <_Unwind_SjLj_Register>
 8001328:	d8c01717 	ldw	r3,92(sp)
 800132c:	d8000915 	stw	zero,36(sp)
 8001330:	d8000815 	stw	zero,32(sp)
 8001334:	00800044 	movi	r2,1
 8001338:	18800926 	beq	r3,r2,8001360 <__gxx_personality_sj0+0x88>
 800133c:	014000c4 	movi	r5,3
 8001340:	d9401715 	stw	r5,92(sp)
 8001344:	d9000a04 	addi	r4,sp,40
 8001348:	80029180 	call	8002918 <_Unwind_SjLj_Unregister>
 800134c:	d8801717 	ldw	r2,92(sp)
 8001350:	dfc02117 	ldw	ra,132(sp)
 8001354:	df002017 	ldw	fp,128(sp)
 8001358:	dec02204 	addi	sp,sp,136
 800135c:	f800283a 	ret
 8001360:	d9401817 	ldw	r5,96(sp)
 8001364:	012f3574 	movhi	r4,48341
 8001368:	21354004 	addi	r4,r4,-11008
 800136c:	2909883a 	add	r4,r5,r4
 8001370:	2145803a 	cmpltu	r2,r4,r5
 8001374:	d9401917 	ldw	r5,100(sp)
 8001378:	d8c01b05 	stb	r3,108(sp)
 800137c:	00ee2cb4 	movhi	r3,47282
 8001380:	18eaaf04 	addi	r3,r3,-21828
 8001384:	28c7883a 	add	r3,r5,r3
 8001388:	10c5883a 	add	r2,r2,r3
 800138c:	10003526 	beq	r2,zero,8001464 <__gxx_personality_sj0+0x18c>
 8001390:	d8c01a17 	ldw	r3,104(sp)
 8001394:	00800184 	movi	r2,6
 8001398:	18803826 	beq	r3,r2,800147c <__gxx_personality_sj0+0x1a4>
 800139c:	d9002317 	ldw	r4,140(sp)
 80013a0:	00ffffc4 	movi	r3,-1
 80013a4:	d8c00b15 	stw	r3,44(sp)
 80013a8:	80029bc0 	call	80029bc <_Unwind_GetLanguageSpecificData>
 80013ac:	d8801915 	stw	r2,100(sp)
 80013b0:	1000a326 	beq	r2,zero,8001640 <__gxx_personality_sj0+0x368>
 80013b4:	d9002317 	ldw	r4,140(sp)
 80013b8:	d9401917 	ldw	r5,100(sp)
 80013bc:	d80d883a 	mov	r6,sp
 80013c0:	00bfffc4 	movi	r2,-1
 80013c4:	d8800b15 	stw	r2,44(sp)
 80013c8:	80011a40 	call	80011a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80013cc:	d9000503 	ldbu	r4,20(sp)
 80013d0:	d9402317 	ldw	r5,140(sp)
 80013d4:	d8801715 	stw	r2,92(sp)
 80013d8:	8000edc0 	call	8000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80013dc:	d9002317 	ldw	r4,140(sp)
 80013e0:	d9400804 	addi	r5,sp,32
 80013e4:	d8800215 	stw	r2,8(sp)
 80013e8:	800298c0 	call	800298c <_Unwind_GetIPInfo>
 80013ec:	d8c00817 	ldw	r3,32(sp)
 80013f0:	1800011e 	bne	r3,zero,80013f8 <__gxx_personality_sj0+0x120>
 80013f4:	10bfffc4 	addi	r2,r2,-1
 80013f8:	10009116 	blt	r2,zero,8001640 <__gxx_personality_sj0+0x368>
 80013fc:	10004c1e 	bne	r2,zero,8001530 <__gxx_personality_sj0+0x258>
 8001400:	d8001c15 	stw	zero,112(sp)
 8001404:	00800044 	movi	r2,1
 8001408:	d8001715 	stw	zero,92(sp)
 800140c:	d8001815 	stw	zero,96(sp)
 8001410:	d9001a17 	ldw	r4,104(sp)
 8001414:	20c0004c 	andi	r3,r4,1
 8001418:	18008c26 	beq	r3,zero,800164c <__gxx_personality_sj0+0x374>
 800141c:	00c00084 	movi	r3,2
 8001420:	10c08726 	beq	r2,r3,8001640 <__gxx_personality_sj0+0x368>
 8001424:	d8801b03 	ldbu	r2,108(sp)
 8001428:	1000d21e 	bne	r2,zero,8001774 <__gxx_personality_sj0+0x49c>
 800142c:	d9402217 	ldw	r5,136(sp)
 8001430:	d8801717 	ldw	r2,92(sp)
 8001434:	d8c01817 	ldw	r3,96(sp)
 8001438:	d9001917 	ldw	r4,100(sp)
 800143c:	28bffb15 	stw	r2,-20(r5)
 8001440:	d8800917 	ldw	r2,36(sp)
 8001444:	28fffc15 	stw	r3,-16(r5)
 8001448:	00c00184 	movi	r3,6
 800144c:	28bfff15 	stw	r2,-4(r5)
 8001450:	d8801c17 	ldw	r2,112(sp)
 8001454:	293ffd15 	stw	r4,-12(r5)
 8001458:	d8c01715 	stw	r3,92(sp)
 800145c:	28bffe15 	stw	r2,-8(r5)
 8001460:	003fb806 	br	8001344 <__alt_data_end+0xfc001344>
 8001464:	d8801717 	ldw	r2,92(sp)
 8001468:	113fc936 	bltu	r2,r4,8001390 <__alt_data_end+0xfc001390>
 800146c:	d8c01a17 	ldw	r3,104(sp)
 8001470:	d8001b05 	stb	zero,108(sp)
 8001474:	00800184 	movi	r2,6
 8001478:	18bfc81e 	bne	r3,r2,800139c <__alt_data_end+0xfc00139c>
 800147c:	d8801b03 	ldbu	r2,108(sp)
 8001480:	103fc61e 	bne	r2,zero,800139c <__alt_data_end+0xfc00139c>
 8001484:	d9002217 	ldw	r4,136(sp)
 8001488:	d9402217 	ldw	r5,136(sp)
 800148c:	d8802217 	ldw	r2,136(sp)
 8001490:	213ffe17 	ldw	r4,-8(r4)
 8001494:	297ffb17 	ldw	r5,-20(r5)
 8001498:	10bffd17 	ldw	r2,-12(r2)
 800149c:	d9001c15 	stw	r4,112(sp)
 80014a0:	d9401715 	stw	r5,92(sp)
 80014a4:	d8801915 	stw	r2,100(sp)
 80014a8:	20008726 	beq	r4,zero,80016c8 <__gxx_personality_sj0+0x3f0>
 80014ac:	d8801717 	ldw	r2,92(sp)
 80014b0:	10006f0e 	bge	r2,zero,8001670 <__gxx_personality_sj0+0x398>
 80014b4:	d9002317 	ldw	r4,140(sp)
 80014b8:	d9401917 	ldw	r5,100(sp)
 80014bc:	d80d883a 	mov	r6,sp
 80014c0:	00bfffc4 	movi	r2,-1
 80014c4:	d8800b15 	stw	r2,44(sp)
 80014c8:	80011a40 	call	80011a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80014cc:	d9000503 	ldbu	r4,20(sp)
 80014d0:	d9402317 	ldw	r5,140(sp)
 80014d4:	8000edc0 	call	8000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80014d8:	d9000503 	ldbu	r4,20(sp)
 80014dc:	d9402317 	ldw	r5,140(sp)
 80014e0:	d8800215 	stw	r2,8(sp)
 80014e4:	8000edc0 	call	8000edc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80014e8:	d8c02217 	ldw	r3,136(sp)
 80014ec:	18bffe15 	stw	r2,-8(r3)
 80014f0:	00005f06 	br	8001670 <__gxx_personality_sj0+0x398>
 80014f4:	000f883a 	mov	r7,zero
 80014f8:	000d883a 	mov	r6,zero
 80014fc:	19000003 	ldbu	r4,0(r3)
 8001500:	18c00044 	addi	r3,r3,1
 8001504:	d8c01715 	stw	r3,92(sp)
 8001508:	21401fcc 	andi	r5,r4,127
 800150c:	298a983a 	sll	r5,r5,r6
 8001510:	21003fcc 	andi	r4,r4,255
 8001514:	2100201c 	xori	r4,r4,128
 8001518:	213fe004 	addi	r4,r4,-128
 800151c:	394eb03a 	or	r7,r7,r5
 8001520:	318001c4 	addi	r6,r6,7
 8001524:	203ff516 	blt	r4,zero,80014fc <__alt_data_end+0xfc0014fc>
 8001528:	10bfffc4 	addi	r2,r2,-1
 800152c:	10000e26 	beq	r2,zero,8001568 <__gxx_personality_sj0+0x290>
 8001530:	d8c01717 	ldw	r3,92(sp)
 8001534:	0011883a 	mov	r8,zero
 8001538:	000d883a 	mov	r6,zero
 800153c:	19000003 	ldbu	r4,0(r3)
 8001540:	18c00044 	addi	r3,r3,1
 8001544:	21401fcc 	andi	r5,r4,127
 8001548:	298a983a 	sll	r5,r5,r6
 800154c:	21003fcc 	andi	r4,r4,255
 8001550:	2100201c 	xori	r4,r4,128
 8001554:	213fe004 	addi	r4,r4,-128
 8001558:	4150b03a 	or	r8,r8,r5
 800155c:	318001c4 	addi	r6,r6,7
 8001560:	203ff616 	blt	r4,zero,800153c <__alt_data_end+0xfc00153c>
 8001564:	003fe306 	br	80014f4 <__alt_data_end+0xfc0014f4>
 8001568:	42000044 	addi	r8,r8,1
 800156c:	da001c15 	stw	r8,112(sp)
 8001570:	38004f26 	beq	r7,zero,80016b0 <__gxx_personality_sj0+0x3d8>
 8001574:	d8800417 	ldw	r2,16(sp)
 8001578:	39ffffc4 	addi	r7,r7,-1
 800157c:	11c5883a 	add	r2,r2,r7
 8001580:	d8801815 	stw	r2,96(sp)
 8001584:	40002e26 	beq	r8,zero,8001640 <__gxx_personality_sj0+0x368>
 8001588:	10004b26 	beq	r2,zero,80016b8 <__gxx_personality_sj0+0x3e0>
 800158c:	d8c01a17 	ldw	r3,104(sp)
 8001590:	18c0020c 	andi	r3,r3,8
 8001594:	d8c01e15 	stw	r3,120(sp)
 8001598:	1800801e 	bne	r3,zero,800179c <__gxx_personality_sj0+0x4c4>
 800159c:	d8801b03 	ldbu	r2,108(sp)
 80015a0:	1000821e 	bne	r2,zero,80017ac <__gxx_personality_sj0+0x4d4>
 80015a4:	d9002217 	ldw	r4,136(sp)
 80015a8:	20800017 	ldw	r2,0(r4)
 80015ac:	1080004c 	andi	r2,r2,1
 80015b0:	1000821e 	bne	r2,zero,80017bc <__gxx_personality_sj0+0x4e4>
 80015b4:	d9402217 	ldw	r5,136(sp)
 80015b8:	28800504 	addi	r2,r5,20
 80015bc:	d8800915 	stw	r2,36(sp)
 80015c0:	10bff017 	ldw	r2,-64(r2)
 80015c4:	d8801d15 	stw	r2,116(sp)
 80015c8:	d9001b03 	ldbu	r4,108(sp)
 80015cc:	d8001b45 	stb	zero,109(sp)
 80015d0:	d9001f15 	stw	r4,124(sp)
 80015d4:	00000e06 	br	8001610 <__gxx_personality_sj0+0x338>
 80015d8:	01c03d0e 	bge	zero,r7,80016d0 <__gxx_personality_sj0+0x3f8>
 80015dc:	017fffc4 	movi	r5,-1
 80015e0:	d9400b15 	stw	r5,44(sp)
 80015e4:	d809883a 	mov	r4,sp
 80015e8:	380b883a 	mov	r5,r7
 80015ec:	8000de00 	call	8000de0 <_ZL15get_ttype_entryP16lsda_header_infom>
 80015f0:	10004f26 	beq	r2,zero,8001730 <__gxx_personality_sj0+0x458>
 80015f4:	d8c01d17 	ldw	r3,116(sp)
 80015f8:	1800611e 	bne	r3,zero,8001780 <__gxx_personality_sj0+0x4a8>
 80015fc:	d8800617 	ldw	r2,24(sp)
 8001600:	10005726 	beq	r2,zero,8001760 <__gxx_personality_sj0+0x488>
 8001604:	d9401717 	ldw	r5,92(sp)
 8001608:	2885883a 	add	r2,r5,r2
 800160c:	d8801815 	stw	r2,96(sp)
 8001610:	d9001817 	ldw	r4,96(sp)
 8001614:	d9400704 	addi	r5,sp,28
 8001618:	8000a500 	call	8000a50 <_ZL12read_sleb128PKhPl>
 800161c:	1009883a 	mov	r4,r2
 8001620:	d9400604 	addi	r5,sp,24
 8001624:	d8801715 	stw	r2,92(sp)
 8001628:	8000a500 	call	8000a50 <_ZL12read_sleb128PKhPl>
 800162c:	d9c00717 	ldw	r7,28(sp)
 8001630:	383fe91e 	bne	r7,zero,80015d8 <__alt_data_end+0xfc0015d8>
 8001634:	01000044 	movi	r4,1
 8001638:	d9001b45 	stb	r4,109(sp)
 800163c:	003fef06 	br	80015fc <__alt_data_end+0xfc0015fc>
 8001640:	01000204 	movi	r4,8
 8001644:	d9001715 	stw	r4,92(sp)
 8001648:	003f3e06 	br	8001344 <__alt_data_end+0xfc001344>
 800164c:	d9001a17 	ldw	r4,104(sp)
 8001650:	20c0020c 	andi	r3,r4,8
 8001654:	1800021e 	bne	r3,zero,8001660 <__gxx_personality_sj0+0x388>
 8001658:	d8c01b03 	ldbu	r3,108(sp)
 800165c:	18001826 	beq	r3,zero,80016c0 <__gxx_personality_sj0+0x3e8>
 8001660:	00c00044 	movi	r3,1
 8001664:	10c05926 	beq	r2,r3,80017cc <__gxx_personality_sj0+0x4f4>
 8001668:	d9401717 	ldw	r5,92(sp)
 800166c:	28005816 	blt	r5,zero,80017d0 <__gxx_personality_sj0+0x4f8>
 8001670:	d9802217 	ldw	r6,136(sp)
 8001674:	d9002317 	ldw	r4,140(sp)
 8001678:	00bfffc4 	movi	r2,-1
 800167c:	000b883a 	mov	r5,zero
 8001680:	d8800b15 	stw	r2,44(sp)
 8001684:	80029600 	call	8002960 <_Unwind_SetGR>
 8001688:	d9002317 	ldw	r4,140(sp)
 800168c:	d9801717 	ldw	r6,92(sp)
 8001690:	01400044 	movi	r5,1
 8001694:	80029600 	call	8002960 <_Unwind_SetGR>
 8001698:	d9002317 	ldw	r4,140(sp)
 800169c:	d9401c17 	ldw	r5,112(sp)
 80016a0:	80029ac0 	call	80029ac <_Unwind_SetIP>
 80016a4:	010001c4 	movi	r4,7
 80016a8:	d9001715 	stw	r4,92(sp)
 80016ac:	003f2506 	br	8001344 <__alt_data_end+0xfc001344>
 80016b0:	d8c01c17 	ldw	r3,112(sp)
 80016b4:	183fe226 	beq	r3,zero,8001640 <__alt_data_end+0xfc001640>
 80016b8:	00800084 	movi	r2,2
 80016bc:	003f5206 	br	8001408 <__alt_data_end+0xfc001408>
 80016c0:	00c00044 	movi	r3,1
 80016c4:	10ff791e 	bne	r2,r3,80014ac <__alt_data_end+0xfc0014ac>
 80016c8:	d9002217 	ldw	r4,136(sp)
 80016cc:	80022880 	call	8002288 <__cxa_call_terminate>
 80016d0:	d9001d17 	ldw	r4,116(sp)
 80016d4:	20000426 	beq	r4,zero,80016e8 <__gxx_personality_sj0+0x410>
 80016d8:	d9401e17 	ldw	r5,120(sp)
 80016dc:	2800021e 	bne	r5,zero,80016e8 <__gxx_personality_sj0+0x410>
 80016e0:	d8801f17 	ldw	r2,124(sp)
 80016e4:	10001626 	beq	r2,zero,8001740 <__gxx_personality_sj0+0x468>
 80016e8:	d8c00317 	ldw	r3,12(sp)
 80016ec:	01ce303a 	nor	r7,zero,r7
 80016f0:	000d883a 	mov	r6,zero
 80016f4:	19c7883a 	add	r3,r3,r7
 80016f8:	000b883a 	mov	r5,zero
 80016fc:	18800003 	ldbu	r2,0(r3)
 8001700:	18c00044 	addi	r3,r3,1
 8001704:	11001fcc 	andi	r4,r2,127
 8001708:	2148983a 	sll	r4,r4,r5
 800170c:	10803fcc 	andi	r2,r2,255
 8001710:	1080201c 	xori	r2,r2,128
 8001714:	10bfe004 	addi	r2,r2,-128
 8001718:	310cb03a 	or	r6,r6,r4
 800171c:	294001c4 	addi	r5,r5,7
 8001720:	103ff616 	blt	r2,zero,80016fc <__alt_data_end+0xfc0016fc>
 8001724:	3005003a 	cmpeq	r2,r6,zero
 8001728:	10803fcc 	andi	r2,r2,255
 800172c:	103fb326 	beq	r2,zero,80015fc <__alt_data_end+0xfc0015fc>
 8001730:	d8800717 	ldw	r2,28(sp)
 8001734:	d8801715 	stw	r2,92(sp)
 8001738:	008000c4 	movi	r2,3
 800173c:	003f3406 	br	8001410 <__alt_data_end+0xfc001410>
 8001740:	d9401d17 	ldw	r5,116(sp)
 8001744:	d9800917 	ldw	r6,36(sp)
 8001748:	00ffffc4 	movi	r3,-1
 800174c:	d809883a 	mov	r4,sp
 8001750:	d8c00b15 	stw	r3,44(sp)
 8001754:	8000e340 	call	8000e34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 8001758:	1080005c 	xori	r2,r2,1
 800175c:	003ff206 	br	8001728 <__alt_data_end+0xfc001728>
 8001760:	d8801b43 	ldbu	r2,109(sp)
 8001764:	103fb626 	beq	r2,zero,8001640 <__alt_data_end+0xfc001640>
 8001768:	d8001715 	stw	zero,92(sp)
 800176c:	00800084 	movi	r2,2
 8001770:	003f2706 	br	8001410 <__alt_data_end+0xfc001410>
 8001774:	00800184 	movi	r2,6
 8001778:	d8801715 	stw	r2,92(sp)
 800177c:	003ef106 	br	8001344 <__alt_data_end+0xfc001344>
 8001780:	1009883a 	mov	r4,r2
 8001784:	180b883a 	mov	r5,r3
 8001788:	d9800904 	addi	r6,sp,36
 800178c:	8000aa80 	call	8000aa8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
 8001790:	10803fcc 	andi	r2,r2,255
 8001794:	103fe61e 	bne	r2,zero,8001730 <__alt_data_end+0xfc001730>
 8001798:	003f9806 	br	80015fc <__alt_data_end+0xfc0015fc>
 800179c:	00820034 	movhi	r2,2048
 80017a0:	109efd04 	addi	r2,r2,31732
 80017a4:	d8801d15 	stw	r2,116(sp)
 80017a8:	003f8706 	br	80015c8 <__alt_data_end+0xfc0015c8>
 80017ac:	00c20034 	movhi	r3,2048
 80017b0:	18deff04 	addi	r3,r3,31740
 80017b4:	d8c01d15 	stw	r3,116(sp)
 80017b8:	003f8306 	br	80015c8 <__alt_data_end+0xfc0015c8>
 80017bc:	20bff517 	ldw	r2,-44(r4)
 80017c0:	003f7e06 	br	80015bc <__alt_data_end+0xfc0015bc>
 80017c4:	d9000c17 	ldw	r4,48(sp)
 80017c8:	80021040 	call	8002104 <__cxa_begin_catch>
 80017cc:	8001db00 	call	8001db0 <_ZSt9terminatev>
 80017d0:	d8c00b15 	stw	r3,44(sp)
 80017d4:	8001dd80 	call	8001dd8 <_ZSt10unexpectedv>

080017d8 <__cxa_call_unexpected>:
 80017d8:	00820034 	movhi	r2,2048
 80017dc:	deffe604 	addi	sp,sp,-104
 80017e0:	1084b604 	addi	r2,r2,4824
 80017e4:	d8800d15 	stw	r2,52(sp)
 80017e8:	00820034 	movhi	r2,2048
 80017ec:	109be504 	addi	r2,r2,28564
 80017f0:	d8800e15 	stw	r2,56(sp)
 80017f4:	d8800104 	addi	r2,sp,4
 80017f8:	d8800f15 	stw	r2,60(sp)
 80017fc:	00820034 	movhi	r2,2048
 8001800:	10861904 	addi	r2,r2,6244
 8001804:	d9001415 	stw	r4,80(sp)
 8001808:	d9000704 	addi	r4,sp,28
 800180c:	dfc01915 	stw	ra,100(sp)
 8001810:	d8801015 	stw	r2,64(sp)
 8001814:	df001815 	stw	fp,96(sp)
 8001818:	dec01115 	stw	sp,68(sp)
 800181c:	80029000 	call	8002900 <_Unwind_SjLj_Register>
 8001820:	d9001417 	ldw	r4,80(sp)
 8001824:	80021040 	call	8002104 <__cxa_begin_catch>
 8001828:	d8c01417 	ldw	r3,80(sp)
 800182c:	18bffe17 	ldw	r2,-8(r3)
 8001830:	193ff717 	ldw	r4,-36(r3)
 8001834:	18fffd17 	ldw	r3,-12(r3)
 8001838:	d8800315 	stw	r2,12(sp)
 800183c:	d8c01615 	stw	r3,88(sp)
 8001840:	d8c01417 	ldw	r3,80(sp)
 8001844:	18fffb17 	ldw	r3,-20(r3)
 8001848:	d8c01515 	stw	r3,84(sp)
 800184c:	d8c01417 	ldw	r3,80(sp)
 8001850:	18fff817 	ldw	r3,-32(r3)
 8001854:	d8c01415 	stw	r3,80(sp)
 8001858:	00c00044 	movi	r3,1
 800185c:	d8c00815 	stw	r3,32(sp)
 8001860:	8001dc80 	call	8001dc8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 8001864:	d8c00917 	ldw	r3,36(sp)
 8001868:	d8800817 	ldw	r2,32(sp)
 800186c:	d8c01715 	stw	r3,92(sp)
 8001870:	10000a26 	beq	r2,zero,800189c <__cxa_call_unexpected+0xc4>
 8001874:	10bfffc4 	addi	r2,r2,-1
 8001878:	10000126 	beq	r2,zero,8001880 <__cxa_call_unexpected+0xa8>
 800187c:	003da0fa 	break	3
 8001880:	d8000815 	stw	zero,32(sp)
 8001884:	80021b80 	call	80021b8 <__cxa_end_catch>
 8001888:	80021b80 	call	80021b8 <__cxa_end_catch>
 800188c:	d9001717 	ldw	r4,92(sp)
 8001890:	00bfffc4 	movi	r2,-1
 8001894:	d8800815 	stw	r2,32(sp)
 8001898:	8002afc0 	call	8002afc <_Unwind_SjLj_Resume>
 800189c:	d9001717 	ldw	r4,92(sp)
 80018a0:	80021040 	call	8002104 <__cxa_begin_catch>
 80018a4:	8001a0c0 	call	8001a0c <__cxa_get_globals_fast>
 80018a8:	10800017 	ldw	r2,0(r2)
 80018ac:	10c00b17 	ldw	r3,44(r2)
 80018b0:	18c0004c 	andi	r3,r3,1
 80018b4:	18001e26 	beq	r3,zero,8001930 <__cxa_call_unexpected+0x158>
 80018b8:	10800017 	ldw	r2,0(r2)
 80018bc:	d8801715 	stw	r2,92(sp)
 80018c0:	d8801517 	ldw	r2,84(sp)
 80018c4:	00802b0e 	bge	zero,r2,8001974 <__cxa_call_unexpected+0x19c>
 80018c8:	d8c01717 	ldw	r3,92(sp)
 80018cc:	d8800317 	ldw	r2,12(sp)
 80018d0:	d9801617 	ldw	r6,88(sp)
 80018d4:	193ff017 	ldw	r4,-64(r3)
 80018d8:	d9c01517 	ldw	r7,84(sp)
 80018dc:	d8800015 	stw	r2,0(sp)
 80018e0:	180b883a 	mov	r5,r3
 80018e4:	00800084 	movi	r2,2
 80018e8:	d8800815 	stw	r2,32(sp)
 80018ec:	8000f640 	call	8000f64 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 80018f0:	10803fcc 	andi	r2,r2,255
 80018f4:	10001e1e 	bne	r2,zero,8001970 <__cxa_call_unexpected+0x198>
 80018f8:	d8800317 	ldw	r2,12(sp)
 80018fc:	d9801617 	ldw	r6,88(sp)
 8001900:	d9c01517 	ldw	r7,84(sp)
 8001904:	01020034 	movhi	r4,2048
 8001908:	d8800015 	stw	r2,0(sp)
 800190c:	211c9e04 	addi	r4,r4,29304
 8001910:	00800084 	movi	r2,2
 8001914:	000b883a 	mov	r5,zero
 8001918:	d8800815 	stw	r2,32(sp)
 800191c:	8000f640 	call	8000f64 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 8001920:	10803fcc 	andi	r2,r2,255
 8001924:	1000051e 	bne	r2,zero,800193c <__cxa_call_unexpected+0x164>
 8001928:	d9001417 	ldw	r4,80(sp)
 800192c:	8001cf00 	call	8001cf0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8001930:	10801004 	addi	r2,r2,64
 8001934:	d8801715 	stw	r2,92(sp)
 8001938:	003fe106 	br	80018c0 <__alt_data_end+0xfc0018c0>
 800193c:	01000104 	movi	r4,4
 8001940:	800249c0 	call	800249c <__cxa_allocate_exception>
 8001944:	00c20034 	movhi	r3,2048
 8001948:	18dcb904 	addi	r3,r3,29412
 800194c:	01420034 	movhi	r5,2048
 8001950:	01820034 	movhi	r6,2048
 8001954:	10c00015 	stw	r3,0(r2)
 8001958:	295c9e04 	addi	r5,r5,29304
 800195c:	00c00084 	movi	r3,2
 8001960:	31899704 	addi	r6,r6,9820
 8001964:	1009883a 	mov	r4,r2
 8001968:	d8c00815 	stw	r3,32(sp)
 800196c:	80023240 	call	8002324 <__cxa_throw>
 8001970:	80023b40 	call	80023b4 <__cxa_rethrow>
 8001974:	d9401617 	ldw	r5,88(sp)
 8001978:	00800084 	movi	r2,2
 800197c:	0009883a 	mov	r4,zero
 8001980:	d9800104 	addi	r6,sp,4
 8001984:	d8800815 	stw	r2,32(sp)
 8001988:	80011a40 	call	80011a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800198c:	d8801717 	ldw	r2,92(sp)
 8001990:	d9c01517 	ldw	r7,84(sp)
 8001994:	d9000104 	addi	r4,sp,4
 8001998:	117ff017 	ldw	r5,-64(r2)
 800199c:	100d883a 	mov	r6,r2
 80019a0:	8000e340 	call	8000e34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 80019a4:	10803fcc 	andi	r2,r2,255
 80019a8:	1000171e 	bne	r2,zero,8001a08 <__cxa_call_unexpected+0x230>
 80019ac:	d9c01517 	ldw	r7,84(sp)
 80019b0:	01420034 	movhi	r5,2048
 80019b4:	00800084 	movi	r2,2
 80019b8:	295c9e04 	addi	r5,r5,29304
 80019bc:	d9000104 	addi	r4,sp,4
 80019c0:	000d883a 	mov	r6,zero
 80019c4:	d8800815 	stw	r2,32(sp)
 80019c8:	8000e340 	call	8000e34 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 80019cc:	10803fcc 	andi	r2,r2,255
 80019d0:	103fd526 	beq	r2,zero,8001928 <__alt_data_end+0xfc001928>
 80019d4:	01000104 	movi	r4,4
 80019d8:	800249c0 	call	800249c <__cxa_allocate_exception>
 80019dc:	00c20034 	movhi	r3,2048
 80019e0:	18dcb904 	addi	r3,r3,29412
 80019e4:	01420034 	movhi	r5,2048
 80019e8:	01820034 	movhi	r6,2048
 80019ec:	10c00015 	stw	r3,0(r2)
 80019f0:	295c9e04 	addi	r5,r5,29304
 80019f4:	00c00084 	movi	r3,2
 80019f8:	31899704 	addi	r6,r6,9820
 80019fc:	1009883a 	mov	r4,r2
 8001a00:	d8c00815 	stw	r3,32(sp)
 8001a04:	80023240 	call	8002324 <__cxa_throw>
 8001a08:	80023b40 	call	80023b4 <__cxa_rethrow>

08001a0c <__cxa_get_globals_fast>:
 8001a0c:	00820074 	movhi	r2,2049
 8001a10:	10a13104 	addi	r2,r2,-31548
 8001a14:	f800283a 	ret

08001a18 <__cxa_get_globals>:
 8001a18:	00820074 	movhi	r2,2049
 8001a1c:	10a13104 	addi	r2,r2,-31548
 8001a20:	f800283a 	ret

08001a24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8001a24:	20800017 	ldw	r2,0(r4)
 8001a28:	defffa04 	addi	sp,sp,-24
 8001a2c:	dc000415 	stw	r16,16(sp)
 8001a30:	10800617 	ldw	r2,24(r2)
 8001a34:	3021883a 	mov	r16,r6
 8001a38:	31800017 	ldw	r6,0(r6)
 8001a3c:	00c00404 	movi	r3,16
 8001a40:	d8c00215 	stw	r3,8(sp)
 8001a44:	dfc00515 	stw	ra,20(sp)
 8001a48:	d8000015 	stw	zero,0(sp)
 8001a4c:	d8000115 	stw	zero,4(sp)
 8001a50:	d8000315 	stw	zero,12(sp)
 8001a54:	d80f883a 	mov	r7,sp
 8001a58:	103ee83a 	callr	r2
 8001a5c:	d8800117 	ldw	r2,4(sp)
 8001a60:	00c00184 	movi	r3,6
 8001a64:	1080018c 	andi	r2,r2,6
 8001a68:	10c00526 	beq	r2,r3,8001a80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 8001a6c:	0005883a 	mov	r2,zero
 8001a70:	dfc00517 	ldw	ra,20(sp)
 8001a74:	dc000417 	ldw	r16,16(sp)
 8001a78:	dec00604 	addi	sp,sp,24
 8001a7c:	f800283a 	ret
 8001a80:	d8c00017 	ldw	r3,0(sp)
 8001a84:	00800044 	movi	r2,1
 8001a88:	80c00015 	stw	r3,0(r16)
 8001a8c:	dfc00517 	ldw	ra,20(sp)
 8001a90:	dc000417 	ldw	r16,16(sp)
 8001a94:	dec00604 	addi	sp,sp,24
 8001a98:	f800283a 	ret

08001a9c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8001a9c:	d8800017 	ldw	r2,0(sp)
 8001aa0:	11800226 	beq	r2,r6,8001aac <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 8001aa4:	00800044 	movi	r2,1
 8001aa8:	f800283a 	ret
 8001aac:	00800184 	movi	r2,6
 8001ab0:	f800283a 	ret

08001ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8001ab4:	00820034 	movhi	r2,2048
 8001ab8:	109c5f04 	addi	r2,r2,29052
 8001abc:	20800015 	stw	r2,0(r4)
 8001ac0:	80024381 	jmpi	8002438 <_ZNSt9type_infoD1Ev>

08001ac4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8001ac4:	defffe04 	addi	sp,sp,-8
 8001ac8:	00820034 	movhi	r2,2048
 8001acc:	dc000015 	stw	r16,0(sp)
 8001ad0:	dfc00115 	stw	ra,4(sp)
 8001ad4:	109c5f04 	addi	r2,r2,29052
 8001ad8:	20800015 	stw	r2,0(r4)
 8001adc:	2021883a 	mov	r16,r4
 8001ae0:	80024380 	call	8002438 <_ZNSt9type_infoD1Ev>
 8001ae4:	8009883a 	mov	r4,r16
 8001ae8:	dfc00117 	ldw	ra,4(sp)
 8001aec:	dc000017 	ldw	r16,0(sp)
 8001af0:	dec00204 	addi	sp,sp,8
 8001af4:	8001cec1 	jmpi	8001cec <_ZdlPv>

08001af8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8001af8:	21000117 	ldw	r4,4(r4)
 8001afc:	29400117 	ldw	r5,4(r5)
 8001b00:	defffd04 	addi	sp,sp,-12
 8001b04:	dc400115 	stw	r17,4(sp)
 8001b08:	dc000015 	stw	r16,0(sp)
 8001b0c:	dfc00215 	stw	ra,8(sp)
 8001b10:	3023883a 	mov	r17,r6
 8001b14:	3821883a 	mov	r16,r7
 8001b18:	21400b26 	beq	r4,r5,8001b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8001b1c:	20c00007 	ldb	r3,0(r4)
 8001b20:	00800a84 	movi	r2,42
 8001b24:	18800226 	beq	r3,r2,8001b30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 8001b28:	80037700 	call	8003770 <strcmp>
 8001b2c:	10000626 	beq	r2,zero,8001b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8001b30:	0005883a 	mov	r2,zero
 8001b34:	dfc00217 	ldw	ra,8(sp)
 8001b38:	dc400117 	ldw	r17,4(sp)
 8001b3c:	dc000017 	ldw	r16,0(sp)
 8001b40:	dec00304 	addi	sp,sp,12
 8001b44:	f800283a 	ret
 8001b48:	00800204 	movi	r2,8
 8001b4c:	80800315 	stw	r2,12(r16)
 8001b50:	00800184 	movi	r2,6
 8001b54:	80800115 	stw	r2,4(r16)
 8001b58:	84400015 	stw	r17,0(r16)
 8001b5c:	00800044 	movi	r2,1
 8001b60:	003ff406 	br	8001b34 <__alt_data_end+0xfc001b34>

08001b64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8001b64:	20800117 	ldw	r2,4(r4)
 8001b68:	28c00117 	ldw	r3,4(r5)
 8001b6c:	10c02926 	beq	r2,r3,8001c14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 8001b70:	defffb04 	addi	sp,sp,-20
 8001b74:	dcc00315 	stw	r19,12(sp)
 8001b78:	dc800215 	stw	r18,8(sp)
 8001b7c:	dc400115 	stw	r17,4(sp)
 8001b80:	dc000015 	stw	r16,0(sp)
 8001b84:	dfc00415 	stw	ra,16(sp)
 8001b88:	2821883a 	mov	r16,r5
 8001b8c:	11400007 	ldb	r5,0(r2)
 8001b90:	2025883a 	mov	r18,r4
 8001b94:	01000a84 	movi	r4,42
 8001b98:	3823883a 	mov	r17,r7
 8001b9c:	3027883a 	mov	r19,r6
 8001ba0:	29000426 	beq	r5,r4,8001bb4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
 8001ba4:	1009883a 	mov	r4,r2
 8001ba8:	180b883a 	mov	r5,r3
 8001bac:	80037700 	call	8003770 <strcmp>
 8001bb0:	10000a26 	beq	r2,zero,8001bdc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
 8001bb4:	008000c4 	movi	r2,3
 8001bb8:	14400a2e 	bgeu	r2,r17,8001be4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 8001bbc:	0005883a 	mov	r2,zero
 8001bc0:	dfc00417 	ldw	ra,16(sp)
 8001bc4:	dcc00317 	ldw	r19,12(sp)
 8001bc8:	dc800217 	ldw	r18,8(sp)
 8001bcc:	dc400117 	ldw	r17,4(sp)
 8001bd0:	dc000017 	ldw	r16,0(sp)
 8001bd4:	dec00504 	addi	sp,sp,20
 8001bd8:	f800283a 	ret
 8001bdc:	00800044 	movi	r2,1
 8001be0:	003ff706 	br	8001bc0 <__alt_data_end+0xfc001bc0>
 8001be4:	80800017 	ldw	r2,0(r16)
 8001be8:	8009883a 	mov	r4,r16
 8001bec:	900b883a 	mov	r5,r18
 8001bf0:	10800517 	ldw	r2,20(r2)
 8001bf4:	980d883a 	mov	r6,r19
 8001bf8:	dfc00417 	ldw	ra,16(sp)
 8001bfc:	dcc00317 	ldw	r19,12(sp)
 8001c00:	dc800217 	ldw	r18,8(sp)
 8001c04:	dc400117 	ldw	r17,4(sp)
 8001c08:	dc000017 	ldw	r16,0(sp)
 8001c0c:	dec00504 	addi	sp,sp,20
 8001c10:	1000683a 	jmp	r2
 8001c14:	00800044 	movi	r2,1
 8001c18:	f800283a 	ret

08001c1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8001c1c:	defffb04 	addi	sp,sp,-20
 8001c20:	dc400315 	stw	r17,12(sp)
 8001c24:	d8800717 	ldw	r2,28(sp)
 8001c28:	dc400517 	ldw	r17,20(sp)
 8001c2c:	dc000215 	stw	r16,8(sp)
 8001c30:	dfc00415 	stw	ra,16(sp)
 8001c34:	24000117 	ldw	r16,4(r4)
 8001c38:	88801026 	beq	r17,r2,8001c7c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8001c3c:	39400117 	ldw	r5,4(r7)
 8001c40:	81401d26 	beq	r16,r5,8001cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8001c44:	80c00007 	ldb	r3,0(r16)
 8001c48:	00800a84 	movi	r2,42
 8001c4c:	18800526 	beq	r3,r2,8001c64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8001c50:	8009883a 	mov	r4,r16
 8001c54:	d9800115 	stw	r6,4(sp)
 8001c58:	80037700 	call	8003770 <strcmp>
 8001c5c:	d9800117 	ldw	r6,4(sp)
 8001c60:	10001526 	beq	r2,zero,8001cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8001c64:	0005883a 	mov	r2,zero
 8001c68:	dfc00417 	ldw	ra,16(sp)
 8001c6c:	dc400317 	ldw	r17,12(sp)
 8001c70:	dc000217 	ldw	r16,8(sp)
 8001c74:	dec00504 	addi	sp,sp,20
 8001c78:	f800283a 	ret
 8001c7c:	d8800617 	ldw	r2,24(sp)
 8001c80:	11400117 	ldw	r5,4(r2)
 8001c84:	81401326 	beq	r16,r5,8001cd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8001c88:	80c00007 	ldb	r3,0(r16)
 8001c8c:	00800a84 	movi	r2,42
 8001c90:	18801326 	beq	r3,r2,8001ce0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 8001c94:	8009883a 	mov	r4,r16
 8001c98:	d9800115 	stw	r6,4(sp)
 8001c9c:	d9c00015 	stw	r7,0(sp)
 8001ca0:	80037700 	call	8003770 <strcmp>
 8001ca4:	d9800117 	ldw	r6,4(sp)
 8001ca8:	d9c00017 	ldw	r7,0(sp)
 8001cac:	10000926 	beq	r2,zero,8001cd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8001cb0:	39400117 	ldw	r5,4(r7)
 8001cb4:	817fe61e 	bne	r16,r5,8001c50 <__alt_data_end+0xfc001c50>
 8001cb8:	d8800817 	ldw	r2,32(sp)
 8001cbc:	d8c00817 	ldw	r3,32(sp)
 8001cc0:	14400015 	stw	r17,0(r2)
 8001cc4:	11800115 	stw	r6,4(r2)
 8001cc8:	00800044 	movi	r2,1
 8001ccc:	18800315 	stw	r2,12(r3)
 8001cd0:	003fe406 	br	8001c64 <__alt_data_end+0xfc001c64>
 8001cd4:	d8800817 	ldw	r2,32(sp)
 8001cd8:	11800215 	stw	r6,8(r2)
 8001cdc:	003fe106 	br	8001c64 <__alt_data_end+0xfc001c64>
 8001ce0:	38800117 	ldw	r2,4(r7)
 8001ce4:	80bfdf1e 	bne	r16,r2,8001c64 <__alt_data_end+0xfc001c64>
 8001ce8:	003ff306 	br	8001cb8 <__alt_data_end+0xfc001cb8>

08001cec <_ZdlPv>:
 8001cec:	8002c641 	jmpi	8002c64 <free>

08001cf0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8001cf0:	00820034 	movhi	r2,2048
 8001cf4:	deffef04 	addi	sp,sp,-68
 8001cf8:	1084b604 	addi	r2,r2,4824
 8001cfc:	d8800615 	stw	r2,24(sp)
 8001d00:	00820034 	movhi	r2,2048
 8001d04:	109be904 	addi	r2,r2,28580
 8001d08:	d8800715 	stw	r2,28(sp)
 8001d0c:	00820034 	movhi	r2,2048
 8001d10:	10875204 	addi	r2,r2,7496
 8001d14:	d9000d15 	stw	r4,52(sp)
 8001d18:	d809883a 	mov	r4,sp
 8001d1c:	d8800915 	stw	r2,36(sp)
 8001d20:	dfc01015 	stw	ra,64(sp)
 8001d24:	df000f15 	stw	fp,60(sp)
 8001d28:	dec00815 	stw	sp,32(sp)
 8001d2c:	dec00a15 	stw	sp,40(sp)
 8001d30:	80029000 	call	8002900 <_Unwind_SjLj_Register>
 8001d34:	00800044 	movi	r2,1
 8001d38:	d8800115 	stw	r2,4(sp)
 8001d3c:	d8800d17 	ldw	r2,52(sp)
 8001d40:	103ee83a 	callr	r2
 8001d44:	8002c180 	call	8002c18 <abort>
 8001d48:	d8c00217 	ldw	r3,8(sp)
 8001d4c:	d8800117 	ldw	r2,4(sp)
 8001d50:	d8c00d15 	stw	r3,52(sp)
 8001d54:	d8c00317 	ldw	r3,12(sp)
 8001d58:	d8c00e15 	stw	r3,56(sp)
 8001d5c:	10000b26 	beq	r2,zero,8001d8c <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
 8001d60:	10bfffc4 	addi	r2,r2,-1
 8001d64:	10000126 	beq	r2,zero,8001d6c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
 8001d68:	003da0fa 	break	3
 8001d6c:	d8000115 	stw	zero,4(sp)
 8001d70:	80021b80 	call	80021b8 <__cxa_end_catch>
 8001d74:	d8c00e17 	ldw	r3,56(sp)
 8001d78:	00bfffc4 	movi	r2,-1
 8001d7c:	18800826 	beq	r3,r2,8001da0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
 8001d80:	d9000d17 	ldw	r4,52(sp)
 8001d84:	d8800115 	stw	r2,4(sp)
 8001d88:	8002afc0 	call	8002afc <_Unwind_SjLj_Resume>
 8001d8c:	d9000d17 	ldw	r4,52(sp)
 8001d90:	80021040 	call	8002104 <__cxa_begin_catch>
 8001d94:	00800084 	movi	r2,2
 8001d98:	d8800115 	stw	r2,4(sp)
 8001d9c:	8002c180 	call	8002c18 <abort>
 8001da0:	d8800e17 	ldw	r2,56(sp)
 8001da4:	d9000d17 	ldw	r4,52(sp)
 8001da8:	d8800115 	stw	r2,4(sp)
 8001dac:	80017d80 	call	80017d8 <__cxa_call_unexpected>

08001db0 <_ZSt9terminatev>:
 8001db0:	00820034 	movhi	r2,2048
 8001db4:	109ef804 	addi	r2,r2,31712
 8001db8:	11000017 	ldw	r4,0(r2)
 8001dbc:	deffff04 	addi	sp,sp,-4
 8001dc0:	dfc00015 	stw	ra,0(sp)
 8001dc4:	8001cf00 	call	8001cf0 <_ZN10__cxxabiv111__terminateEPFvvE>

08001dc8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8001dc8:	deffff04 	addi	sp,sp,-4
 8001dcc:	dfc00015 	stw	ra,0(sp)
 8001dd0:	203ee83a 	callr	r4
 8001dd4:	8001db00 	call	8001db0 <_ZSt9terminatev>

08001dd8 <_ZSt10unexpectedv>:
 8001dd8:	00820034 	movhi	r2,2048
 8001ddc:	109f0104 	addi	r2,r2,31748
 8001de0:	11000017 	ldw	r4,0(r2)
 8001de4:	deffff04 	addi	sp,sp,-4
 8001de8:	dfc00015 	stw	ra,0(sp)
 8001dec:	8001dc80 	call	8001dc8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08001df0 <_ZSt13set_terminatePFvvE>:
 8001df0:	00c20034 	movhi	r3,2048
 8001df4:	18def804 	addi	r3,r3,31712
 8001df8:	18800017 	ldw	r2,0(r3)
 8001dfc:	19000015 	stw	r4,0(r3)
 8001e00:	f800283a 	ret

08001e04 <_ZSt13get_terminatev>:
 8001e04:	00820034 	movhi	r2,2048
 8001e08:	109ef804 	addi	r2,r2,31712
 8001e0c:	10800017 	ldw	r2,0(r2)
 8001e10:	f800283a 	ret

08001e14 <_ZSt14set_unexpectedPFvvE>:
 8001e14:	00c20034 	movhi	r3,2048
 8001e18:	18df0104 	addi	r3,r3,31748
 8001e1c:	18800017 	ldw	r2,0(r3)
 8001e20:	19000015 	stw	r4,0(r3)
 8001e24:	f800283a 	ret

08001e28 <_ZSt14get_unexpectedv>:
 8001e28:	00820034 	movhi	r2,2048
 8001e2c:	109f0104 	addi	r2,r2,31748
 8001e30:	10800017 	ldw	r2,0(r2)
 8001e34:	f800283a 	ret

08001e38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8001e38:	00820034 	movhi	r2,2048
 8001e3c:	109c7704 	addi	r2,r2,29148
 8001e40:	20800015 	stw	r2,0(r4)
 8001e44:	8001ab41 	jmpi	8001ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>

08001e48 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8001e48:	defffe04 	addi	sp,sp,-8
 8001e4c:	00820034 	movhi	r2,2048
 8001e50:	dc000015 	stw	r16,0(sp)
 8001e54:	dfc00115 	stw	ra,4(sp)
 8001e58:	109c7704 	addi	r2,r2,29148
 8001e5c:	20800015 	stw	r2,0(r4)
 8001e60:	2021883a 	mov	r16,r4
 8001e64:	8001ab40 	call	8001ab4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8001e68:	8009883a 	mov	r4,r16
 8001e6c:	dfc00117 	ldw	ra,4(sp)
 8001e70:	dc000017 	ldw	r16,0(sp)
 8001e74:	dec00204 	addi	sp,sp,8
 8001e78:	8001cec1 	jmpi	8001cec <_ZdlPv>

08001e7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8001e7c:	defff504 	addi	sp,sp,-44
 8001e80:	dc000115 	stw	r16,4(sp)
 8001e84:	38800117 	ldw	r2,4(r7)
 8001e88:	24000117 	ldw	r16,4(r4)
 8001e8c:	ddc00815 	stw	r23,32(sp)
 8001e90:	dd800715 	stw	r22,28(sp)
 8001e94:	dd400615 	stw	r21,24(sp)
 8001e98:	dd000515 	stw	r20,20(sp)
 8001e9c:	dcc00415 	stw	r19,16(sp)
 8001ea0:	dc800315 	stw	r18,12(sp)
 8001ea4:	dc400215 	stw	r17,8(sp)
 8001ea8:	dfc00a15 	stw	ra,40(sp)
 8001eac:	df000915 	stw	fp,36(sp)
 8001eb0:	202b883a 	mov	r21,r4
 8001eb4:	382d883a 	mov	r22,r7
 8001eb8:	2823883a 	mov	r17,r5
 8001ebc:	dc800b17 	ldw	r18,44(sp)
 8001ec0:	ddc00c17 	ldw	r23,48(sp)
 8001ec4:	dd000d17 	ldw	r20,52(sp)
 8001ec8:	dcc00e17 	ldw	r19,56(sp)
 8001ecc:	80801f26 	beq	r16,r2,8001f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8001ed0:	87000007 	ldb	fp,0(r16)
 8001ed4:	00c00a84 	movi	r3,42
 8001ed8:	e0c00626 	beq	fp,r3,8001ef4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8001edc:	8009883a 	mov	r4,r16
 8001ee0:	100b883a 	mov	r5,r2
 8001ee4:	d9800015 	stw	r6,0(sp)
 8001ee8:	80037700 	call	8003770 <strcmp>
 8001eec:	d9800017 	ldw	r6,0(sp)
 8001ef0:	10001626 	beq	r2,zero,8001f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8001ef4:	95002c26 	beq	r18,r20,8001fa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 8001ef8:	a9000217 	ldw	r4,8(r21)
 8001efc:	880b883a 	mov	r5,r17
 8001f00:	b00f883a 	mov	r7,r22
 8001f04:	20800017 	ldw	r2,0(r4)
 8001f08:	dc800b15 	stw	r18,44(sp)
 8001f0c:	ddc00c15 	stw	r23,48(sp)
 8001f10:	dd000d15 	stw	r20,52(sp)
 8001f14:	dcc00e15 	stw	r19,56(sp)
 8001f18:	10800717 	ldw	r2,28(r2)
 8001f1c:	dfc00a17 	ldw	ra,40(sp)
 8001f20:	df000917 	ldw	fp,36(sp)
 8001f24:	ddc00817 	ldw	r23,32(sp)
 8001f28:	dd800717 	ldw	r22,28(sp)
 8001f2c:	dd400617 	ldw	r21,24(sp)
 8001f30:	dd000517 	ldw	r20,20(sp)
 8001f34:	dcc00417 	ldw	r19,16(sp)
 8001f38:	dc800317 	ldw	r18,12(sp)
 8001f3c:	dc400217 	ldw	r17,8(sp)
 8001f40:	dc000117 	ldw	r16,4(sp)
 8001f44:	dec00b04 	addi	sp,sp,44
 8001f48:	1000683a 	jmp	r2
 8001f4c:	9c800015 	stw	r18,0(r19)
 8001f50:	99800115 	stw	r6,4(r19)
 8001f54:	88001116 	blt	r17,zero,8001f9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
 8001f58:	9463883a 	add	r17,r18,r17
 8001f5c:	a4401d26 	beq	r20,r17,8001fd4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 8001f60:	00800044 	movi	r2,1
 8001f64:	98800315 	stw	r2,12(r19)
 8001f68:	0005883a 	mov	r2,zero
 8001f6c:	dfc00a17 	ldw	ra,40(sp)
 8001f70:	df000917 	ldw	fp,36(sp)
 8001f74:	ddc00817 	ldw	r23,32(sp)
 8001f78:	dd800717 	ldw	r22,28(sp)
 8001f7c:	dd400617 	ldw	r21,24(sp)
 8001f80:	dd000517 	ldw	r20,20(sp)
 8001f84:	dcc00417 	ldw	r19,16(sp)
 8001f88:	dc800317 	ldw	r18,12(sp)
 8001f8c:	dc400217 	ldw	r17,8(sp)
 8001f90:	dc000117 	ldw	r16,4(sp)
 8001f94:	dec00b04 	addi	sp,sp,44
 8001f98:	f800283a 	ret
 8001f9c:	00bfff84 	movi	r2,-2
 8001fa0:	88bff11e 	bne	r17,r2,8001f68 <__alt_data_end+0xfc001f68>
 8001fa4:	003fee06 	br	8001f60 <__alt_data_end+0xfc001f60>
 8001fa8:	b9400117 	ldw	r5,4(r23)
 8001fac:	81400726 	beq	r16,r5,8001fcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 8001fb0:	00800a84 	movi	r2,42
 8001fb4:	e0bfd026 	beq	fp,r2,8001ef8 <__alt_data_end+0xfc001ef8>
 8001fb8:	8009883a 	mov	r4,r16
 8001fbc:	d9800015 	stw	r6,0(sp)
 8001fc0:	80037700 	call	8003770 <strcmp>
 8001fc4:	d9800017 	ldw	r6,0(sp)
 8001fc8:	103fcb1e 	bne	r2,zero,8001ef8 <__alt_data_end+0xfc001ef8>
 8001fcc:	99800215 	stw	r6,8(r19)
 8001fd0:	003fe506 	br	8001f68 <__alt_data_end+0xfc001f68>
 8001fd4:	00800184 	movi	r2,6
 8001fd8:	003fe206 	br	8001f64 <__alt_data_end+0xfc001f64>

08001fdc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8001fdc:	defffa04 	addi	sp,sp,-24
 8001fe0:	dc000215 	stw	r16,8(sp)
 8001fe4:	dc000617 	ldw	r16,24(sp)
 8001fe8:	dc800415 	stw	r18,16(sp)
 8001fec:	dc400315 	stw	r17,12(sp)
 8001ff0:	dfc00515 	stw	ra,20(sp)
 8001ff4:	2023883a 	mov	r17,r4
 8001ff8:	2825883a 	mov	r18,r5
 8001ffc:	81800b26 	beq	r16,r6,800202c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 8002000:	89000217 	ldw	r4,8(r17)
 8002004:	900b883a 	mov	r5,r18
 8002008:	20800017 	ldw	r2,0(r4)
 800200c:	dc000615 	stw	r16,24(sp)
 8002010:	10800817 	ldw	r2,32(r2)
 8002014:	dfc00517 	ldw	ra,20(sp)
 8002018:	dc800417 	ldw	r18,16(sp)
 800201c:	dc400317 	ldw	r17,12(sp)
 8002020:	dc000217 	ldw	r16,8(sp)
 8002024:	dec00604 	addi	sp,sp,24
 8002028:	1000683a 	jmp	r2
 800202c:	21000117 	ldw	r4,4(r4)
 8002030:	39400117 	ldw	r5,4(r7)
 8002034:	21400926 	beq	r4,r5,800205c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 8002038:	20c00007 	ldb	r3,0(r4)
 800203c:	00800a84 	movi	r2,42
 8002040:	18bfef26 	beq	r3,r2,8002000 <__alt_data_end+0xfc002000>
 8002044:	d9800015 	stw	r6,0(sp)
 8002048:	d9c00115 	stw	r7,4(sp)
 800204c:	80037700 	call	8003770 <strcmp>
 8002050:	d9800017 	ldw	r6,0(sp)
 8002054:	d9c00117 	ldw	r7,4(sp)
 8002058:	103fe91e 	bne	r2,zero,8002000 <__alt_data_end+0xfc002000>
 800205c:	00800184 	movi	r2,6
 8002060:	dfc00517 	ldw	ra,20(sp)
 8002064:	dc800417 	ldw	r18,16(sp)
 8002068:	dc400317 	ldw	r17,12(sp)
 800206c:	dc000217 	ldw	r16,8(sp)
 8002070:	dec00604 	addi	sp,sp,24
 8002074:	f800283a 	ret

08002078 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8002078:	defffb04 	addi	sp,sp,-20
 800207c:	dcc00315 	stw	r19,12(sp)
 8002080:	dc800215 	stw	r18,8(sp)
 8002084:	dc400115 	stw	r17,4(sp)
 8002088:	dc000015 	stw	r16,0(sp)
 800208c:	dfc00415 	stw	ra,16(sp)
 8002090:	2027883a 	mov	r19,r4
 8002094:	2825883a 	mov	r18,r5
 8002098:	3023883a 	mov	r17,r6
 800209c:	3821883a 	mov	r16,r7
 80020a0:	8001af80 	call	8001af8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80020a4:	10c03fcc 	andi	r3,r2,255
 80020a8:	18000726 	beq	r3,zero,80020c8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 80020ac:	dfc00417 	ldw	ra,16(sp)
 80020b0:	dcc00317 	ldw	r19,12(sp)
 80020b4:	dc800217 	ldw	r18,8(sp)
 80020b8:	dc400117 	ldw	r17,4(sp)
 80020bc:	dc000017 	ldw	r16,0(sp)
 80020c0:	dec00504 	addi	sp,sp,20
 80020c4:	f800283a 	ret
 80020c8:	99000217 	ldw	r4,8(r19)
 80020cc:	900b883a 	mov	r5,r18
 80020d0:	880d883a 	mov	r6,r17
 80020d4:	20800017 	ldw	r2,0(r4)
 80020d8:	800f883a 	mov	r7,r16
 80020dc:	10800617 	ldw	r2,24(r2)
 80020e0:	dfc00417 	ldw	ra,16(sp)
 80020e4:	dcc00317 	ldw	r19,12(sp)
 80020e8:	dc800217 	ldw	r18,8(sp)
 80020ec:	dc400117 	ldw	r17,4(sp)
 80020f0:	dc000017 	ldw	r16,0(sp)
 80020f4:	dec00504 	addi	sp,sp,20
 80020f8:	1000683a 	jmp	r2

080020fc <__cxa_get_exception_ptr>:
 80020fc:	20bfff17 	ldw	r2,-4(r4)
 8002100:	f800283a 	ret

08002104 <__cxa_begin_catch>:
 8002104:	defffe04 	addi	sp,sp,-8
 8002108:	dc000015 	stw	r16,0(sp)
 800210c:	dfc00115 	stw	ra,4(sp)
 8002110:	2021883a 	mov	r16,r4
 8002114:	8001a180 	call	8001a18 <__cxa_get_globals>
 8002118:	81000017 	ldw	r4,0(r16)
 800211c:	80c00117 	ldw	r3,4(r16)
 8002120:	01af3574 	movhi	r6,48341
 8002124:	31b54004 	addi	r6,r6,-11008
 8002128:	016e2cb4 	movhi	r5,47282
 800212c:	296aaf04 	addi	r5,r5,-21828
 8002130:	218d883a 	add	r6,r4,r6
 8002134:	3109803a 	cmpltu	r4,r6,r4
 8002138:	1947883a 	add	r3,r3,r5
 800213c:	20c7883a 	add	r3,r4,r3
 8002140:	817ff504 	addi	r5,r16,-44
 8002144:	11000017 	ldw	r4,0(r2)
 8002148:	18000726 	beq	r3,zero,8002168 <__cxa_begin_catch+0x64>
 800214c:	2000191e 	bne	r4,zero,80021b4 <__cxa_begin_catch+0xb0>
 8002150:	11400015 	stw	r5,0(r2)
 8002154:	0005883a 	mov	r2,zero
 8002158:	dfc00117 	ldw	ra,4(sp)
 800215c:	dc000017 	ldw	r16,0(sp)
 8002160:	dec00204 	addi	sp,sp,8
 8002164:	f800283a 	ret
 8002168:	01c00044 	movi	r7,1
 800216c:	39bff736 	bltu	r7,r6,800214c <__alt_data_end+0xfc00214c>
 8002170:	80fffa17 	ldw	r3,-24(r16)
 8002174:	18000d16 	blt	r3,zero,80021ac <__cxa_begin_catch+0xa8>
 8002178:	18c00044 	addi	r3,r3,1
 800217c:	11800117 	ldw	r6,4(r2)
 8002180:	80fffa15 	stw	r3,-24(r16)
 8002184:	30ffffc4 	addi	r3,r6,-1
 8002188:	10c00115 	stw	r3,4(r2)
 800218c:	21400226 	beq	r4,r5,8002198 <__cxa_begin_catch+0x94>
 8002190:	813ff915 	stw	r4,-28(r16)
 8002194:	11400015 	stw	r5,0(r2)
 8002198:	80bfff17 	ldw	r2,-4(r16)
 800219c:	dfc00117 	ldw	ra,4(sp)
 80021a0:	dc000017 	ldw	r16,0(sp)
 80021a4:	dec00204 	addi	sp,sp,8
 80021a8:	f800283a 	ret
 80021ac:	38c7c83a 	sub	r3,r7,r3
 80021b0:	003ff206 	br	800217c <__alt_data_end+0xfc00217c>
 80021b4:	8001db00 	call	8001db0 <_ZSt9terminatev>

080021b8 <__cxa_end_catch>:
 80021b8:	deffff04 	addi	sp,sp,-4
 80021bc:	dfc00015 	stw	ra,0(sp)
 80021c0:	8001a0c0 	call	8001a0c <__cxa_get_globals_fast>
 80021c4:	11000017 	ldw	r4,0(r2)
 80021c8:	20001326 	beq	r4,zero,8002218 <__cxa_end_catch+0x60>
 80021cc:	21400b17 	ldw	r5,44(r4)
 80021d0:	01ef3574 	movhi	r7,48341
 80021d4:	39f54004 	addi	r7,r7,-11008
 80021d8:	29cf883a 	add	r7,r5,r7
 80021dc:	20c00c17 	ldw	r3,48(r4)
 80021e0:	394d803a 	cmpltu	r6,r7,r5
 80021e4:	016e2cb4 	movhi	r5,47282
 80021e8:	296aaf04 	addi	r5,r5,-21828
 80021ec:	1947883a 	add	r3,r3,r5
 80021f0:	30c7883a 	add	r3,r6,r3
 80021f4:	18000b1e 	bne	r3,zero,8002224 <__cxa_end_catch+0x6c>
 80021f8:	00c00044 	movi	r3,1
 80021fc:	19c00936 	bltu	r3,r7,8002224 <__cxa_end_catch+0x6c>
 8002200:	20c00517 	ldw	r3,20(r4)
 8002204:	18000c16 	blt	r3,zero,8002238 <__cxa_end_catch+0x80>
 8002208:	197fffc4 	addi	r5,r3,-1
 800220c:	28000f26 	beq	r5,zero,800224c <__cxa_end_catch+0x94>
 8002210:	18001426 	beq	r3,zero,8002264 <__cxa_end_catch+0xac>
 8002214:	21400515 	stw	r5,20(r4)
 8002218:	dfc00017 	ldw	ra,0(sp)
 800221c:	dec00104 	addi	sp,sp,4
 8002220:	f800283a 	ret
 8002224:	21000b04 	addi	r4,r4,44
 8002228:	10000015 	stw	zero,0(r2)
 800222c:	dfc00017 	ldw	ra,0(sp)
 8002230:	dec00104 	addi	sp,sp,4
 8002234:	8002b8c1 	jmpi	8002b8c <_Unwind_DeleteException>
 8002238:	19400044 	addi	r5,r3,1
 800223c:	283ff51e 	bne	r5,zero,8002214 <__alt_data_end+0xfc002214>
 8002240:	20c00417 	ldw	r3,16(r4)
 8002244:	10c00015 	stw	r3,0(r2)
 8002248:	003ff206 	br	8002214 <__alt_data_end+0xfc002214>
 800224c:	20c00417 	ldw	r3,16(r4)
 8002250:	21000b04 	addi	r4,r4,44
 8002254:	10c00015 	stw	r3,0(r2)
 8002258:	dfc00017 	ldw	ra,0(sp)
 800225c:	dec00104 	addi	sp,sp,4
 8002260:	8002b8c1 	jmpi	8002b8c <_Unwind_DeleteException>
 8002264:	8001db00 	call	8001db0 <_ZSt9terminatev>

08002268 <_ZSt18uncaught_exceptionv>:
 8002268:	deffff04 	addi	sp,sp,-4
 800226c:	dfc00015 	stw	ra,0(sp)
 8002270:	8001a180 	call	8001a18 <__cxa_get_globals>
 8002274:	10800117 	ldw	r2,4(r2)
 8002278:	1004c03a 	cmpne	r2,r2,zero
 800227c:	dfc00017 	ldw	ra,0(sp)
 8002280:	dec00104 	addi	sp,sp,4
 8002284:	f800283a 	ret

08002288 <__cxa_call_terminate>:
 8002288:	defffe04 	addi	sp,sp,-8
 800228c:	dc000015 	stw	r16,0(sp)
 8002290:	dfc00115 	stw	ra,4(sp)
 8002294:	2021883a 	mov	r16,r4
 8002298:	20000c26 	beq	r4,zero,80022cc <__cxa_call_terminate+0x44>
 800229c:	80021040 	call	8002104 <__cxa_begin_catch>
 80022a0:	80c00017 	ldw	r3,0(r16)
 80022a4:	012f3574 	movhi	r4,48341
 80022a8:	21354004 	addi	r4,r4,-11008
 80022ac:	1909883a 	add	r4,r3,r4
 80022b0:	80800117 	ldw	r2,4(r16)
 80022b4:	20cb803a 	cmpltu	r5,r4,r3
 80022b8:	00ee2cb4 	movhi	r3,47282
 80022bc:	18eaaf04 	addi	r3,r3,-21828
 80022c0:	10c5883a 	add	r2,r2,r3
 80022c4:	2885883a 	add	r2,r5,r2
 80022c8:	10000126 	beq	r2,zero,80022d0 <__cxa_call_terminate+0x48>
 80022cc:	8001db00 	call	8001db0 <_ZSt9terminatev>
 80022d0:	00800044 	movi	r2,1
 80022d4:	113ffd36 	bltu	r2,r4,80022cc <__alt_data_end+0xfc0022cc>
 80022d8:	813ff817 	ldw	r4,-32(r16)
 80022dc:	8001cf00 	call	8001cf0 <_ZN10__cxxabiv111__terminateEPFvvE>

080022e0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 80022e0:	defffe04 	addi	sp,sp,-8
 80022e4:	dfc00115 	stw	ra,4(sp)
 80022e8:	dc000015 	stw	r16,0(sp)
 80022ec:	00800044 	movi	r2,1
 80022f0:	11000a36 	bltu	r2,r4,800231c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
 80022f4:	28bff617 	ldw	r2,-40(r5)
 80022f8:	2c000504 	addi	r16,r5,20
 80022fc:	10000226 	beq	r2,zero,8002308 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
 8002300:	8009883a 	mov	r4,r16
 8002304:	103ee83a 	callr	r2
 8002308:	8009883a 	mov	r4,r16
 800230c:	dfc00117 	ldw	ra,4(sp)
 8002310:	dc000017 	ldw	r16,0(sp)
 8002314:	dec00204 	addi	sp,sp,8
 8002318:	80025401 	jmpi	8002540 <__cxa_free_exception>
 800231c:	293ff817 	ldw	r4,-32(r5)
 8002320:	8001cf00 	call	8001cf0 <_ZN10__cxxabiv111__terminateEPFvvE>

08002324 <__cxa_throw>:
 8002324:	defffb04 	addi	sp,sp,-20
 8002328:	dfc00415 	stw	ra,16(sp)
 800232c:	dcc00315 	stw	r19,12(sp)
 8002330:	dc800215 	stw	r18,8(sp)
 8002334:	2827883a 	mov	r19,r5
 8002338:	3025883a 	mov	r18,r6
 800233c:	dc400115 	stw	r17,4(sp)
 8002340:	dc000015 	stw	r16,0(sp)
 8002344:	2021883a 	mov	r16,r4
 8002348:	8001a180 	call	8001a18 <__cxa_get_globals>
 800234c:	10c00117 	ldw	r3,4(r2)
 8002350:	847ffb04 	addi	r17,r16,-20
 8002354:	18c00044 	addi	r3,r3,1
 8002358:	10c00115 	stw	r3,4(r2)
 800235c:	00800044 	movi	r2,1
 8002360:	80bfef15 	stw	r2,-68(r16)
 8002364:	84fff015 	stw	r19,-64(r16)
 8002368:	84bff115 	stw	r18,-60(r16)
 800236c:	8001e280 	call	8001e28 <_ZSt14get_unexpectedv>
 8002370:	80bff215 	stw	r2,-56(r16)
 8002374:	8001e040 	call	8001e04 <_ZSt13get_terminatev>
 8002378:	80bff315 	stw	r2,-52(r16)
 800237c:	0090caf4 	movhi	r2,17195
 8002380:	108ac004 	addi	r2,r2,11008
 8002384:	80bffb15 	stw	r2,-20(r16)
 8002388:	0091d3b4 	movhi	r2,18254
 800238c:	109550c4 	addi	r2,r2,21827
 8002390:	80bffc15 	stw	r2,-16(r16)
 8002394:	00820034 	movhi	r2,2048
 8002398:	1088b804 	addi	r2,r2,8928
 800239c:	8809883a 	mov	r4,r17
 80023a0:	80bffd15 	stw	r2,-12(r16)
 80023a4:	80029e80 	call	80029e8 <_Unwind_SjLj_RaiseException>
 80023a8:	8809883a 	mov	r4,r17
 80023ac:	80021040 	call	8002104 <__cxa_begin_catch>
 80023b0:	8001db00 	call	8001db0 <_ZSt9terminatev>

080023b4 <__cxa_rethrow>:
 80023b4:	defffe04 	addi	sp,sp,-8
 80023b8:	dfc00115 	stw	ra,4(sp)
 80023bc:	dc000015 	stw	r16,0(sp)
 80023c0:	8001a180 	call	8001a18 <__cxa_get_globals>
 80023c4:	10c00117 	ldw	r3,4(r2)
 80023c8:	11000017 	ldw	r4,0(r2)
 80023cc:	18c00044 	addi	r3,r3,1
 80023d0:	10c00115 	stw	r3,4(r2)
 80023d4:	20001126 	beq	r4,zero,800241c <__cxa_rethrow+0x68>
 80023d8:	21400b17 	ldw	r5,44(r4)
 80023dc:	01ef3574 	movhi	r7,48341
 80023e0:	39f54004 	addi	r7,r7,-11008
 80023e4:	29cf883a 	add	r7,r5,r7
 80023e8:	20c00c17 	ldw	r3,48(r4)
 80023ec:	394d803a 	cmpltu	r6,r7,r5
 80023f0:	016e2cb4 	movhi	r5,47282
 80023f4:	296aaf04 	addi	r5,r5,-21828
 80023f8:	1947883a 	add	r3,r3,r5
 80023fc:	30c7883a 	add	r3,r6,r3
 8002400:	18000726 	beq	r3,zero,8002420 <__cxa_rethrow+0x6c>
 8002404:	10000015 	stw	zero,0(r2)
 8002408:	24000b04 	addi	r16,r4,44
 800240c:	8009883a 	mov	r4,r16
 8002410:	8002b400 	call	8002b40 <_Unwind_SjLj_Resume_or_Rethrow>
 8002414:	8009883a 	mov	r4,r16
 8002418:	80021040 	call	8002104 <__cxa_begin_catch>
 800241c:	8001db00 	call	8001db0 <_ZSt9terminatev>
 8002420:	00c00044 	movi	r3,1
 8002424:	19fff736 	bltu	r3,r7,8002404 <__alt_data_end+0xfc002404>
 8002428:	20800517 	ldw	r2,20(r4)
 800242c:	0085c83a 	sub	r2,zero,r2
 8002430:	20800515 	stw	r2,20(r4)
 8002434:	003ff406 	br	8002408 <__alt_data_end+0xfc002408>

08002438 <_ZNSt9type_infoD1Ev>:
 8002438:	f800283a 	ret

0800243c <_ZNKSt9type_info14__is_pointer_pEv>:
 800243c:	0005883a 	mov	r2,zero
 8002440:	f800283a 	ret

08002444 <_ZNKSt9type_info15__is_function_pEv>:
 8002444:	0005883a 	mov	r2,zero
 8002448:	f800283a 	ret

0800244c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800244c:	0005883a 	mov	r2,zero
 8002450:	f800283a 	ret

08002454 <_ZNSt9type_infoD0Ev>:
 8002454:	8001cec1 	jmpi	8001cec <_ZdlPv>

08002458 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8002458:	21000117 	ldw	r4,4(r4)
 800245c:	29400117 	ldw	r5,4(r5)
 8002460:	21400c26 	beq	r4,r5,8002494 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 8002464:	20c00007 	ldb	r3,0(r4)
 8002468:	00800a84 	movi	r2,42
 800246c:	18800726 	beq	r3,r2,800248c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 8002470:	deffff04 	addi	sp,sp,-4
 8002474:	dfc00015 	stw	ra,0(sp)
 8002478:	80037700 	call	8003770 <strcmp>
 800247c:	1005003a 	cmpeq	r2,r2,zero
 8002480:	dfc00017 	ldw	ra,0(sp)
 8002484:	dec00104 	addi	sp,sp,4
 8002488:	f800283a 	ret
 800248c:	0005883a 	mov	r2,zero
 8002490:	f800283a 	ret
 8002494:	00800044 	movi	r2,1
 8002498:	f800283a 	ret

0800249c <__cxa_allocate_exception>:
 800249c:	defffd04 	addi	sp,sp,-12
 80024a0:	dc400115 	stw	r17,4(sp)
 80024a4:	24401104 	addi	r17,r4,68
 80024a8:	8809883a 	mov	r4,r17
 80024ac:	dc000015 	stw	r16,0(sp)
 80024b0:	dfc00215 	stw	ra,8(sp)
 80024b4:	8002c500 	call	8002c50 <malloc>
 80024b8:	1021883a 	mov	r16,r2
 80024bc:	10000a26 	beq	r2,zero,80024e8 <__cxa_allocate_exception+0x4c>
 80024c0:	8009883a 	mov	r4,r16
 80024c4:	000b883a 	mov	r5,zero
 80024c8:	01801104 	movi	r6,68
 80024cc:	80032fc0 	call	80032fc <memset>
 80024d0:	80801104 	addi	r2,r16,68
 80024d4:	dfc00217 	ldw	ra,8(sp)
 80024d8:	dc400117 	ldw	r17,4(sp)
 80024dc:	dc000017 	ldw	r16,0(sp)
 80024e0:	dec00304 	addi	sp,sp,12
 80024e4:	f800283a 	ret
 80024e8:	01420074 	movhi	r5,2049
 80024ec:	29613404 	addi	r5,r5,-31536
 80024f0:	00808004 	movi	r2,512
 80024f4:	29800017 	ldw	r6,0(r5)
 80024f8:	14400736 	bltu	r2,r17,8002518 <__cxa_allocate_exception+0x7c>
 80024fc:	3005883a 	mov	r2,r6
 8002500:	01000104 	movi	r4,4
 8002504:	10c0004c 	andi	r3,r2,1
 8002508:	18000426 	beq	r3,zero,800251c <__cxa_allocate_exception+0x80>
 800250c:	84000044 	addi	r16,r16,1
 8002510:	1004d07a 	srli	r2,r2,1
 8002514:	813ffb1e 	bne	r16,r4,8002504 <__alt_data_end+0xfc002504>
 8002518:	8001db00 	call	8001db0 <_ZSt9terminatev>
 800251c:	00800044 	movi	r2,1
 8002520:	1404983a 	sll	r2,r2,r16
 8002524:	8020927a 	slli	r16,r16,9
 8002528:	118cb03a 	or	r6,r2,r6
 800252c:	00820074 	movhi	r2,2049
 8002530:	10a17f04 	addi	r2,r2,-31236
 8002534:	29800015 	stw	r6,0(r5)
 8002538:	80a1883a 	add	r16,r16,r2
 800253c:	003fe006 	br	80024c0 <__alt_data_end+0xfc0024c0>

08002540 <__cxa_free_exception>:
 8002540:	00820074 	movhi	r2,2049
 8002544:	10a17f04 	addi	r2,r2,-31236
 8002548:	20800236 	bltu	r4,r2,8002554 <__cxa_free_exception+0x14>
 800254c:	10c20004 	addi	r3,r2,2048
 8002550:	20c00236 	bltu	r4,r3,800255c <__cxa_free_exception+0x1c>
 8002554:	213fef04 	addi	r4,r4,-68
 8002558:	8002c641 	jmpi	8002c64 <free>
 800255c:	2089c83a 	sub	r4,r4,r2
 8002560:	2008d27a 	srli	r4,r4,9
 8002564:	01420074 	movhi	r5,2049
 8002568:	29613404 	addi	r5,r5,-31536
 800256c:	00ffff84 	movi	r3,-2
 8002570:	28800017 	ldw	r2,0(r5)
 8002574:	1908183a 	rol	r4,r3,r4
 8002578:	2088703a 	and	r4,r4,r2
 800257c:	29000015 	stw	r4,0(r5)
 8002580:	f800283a 	ret

08002584 <__cxa_allocate_dependent_exception>:
 8002584:	defffe04 	addi	sp,sp,-8
 8002588:	01001004 	movi	r4,64
 800258c:	dc000015 	stw	r16,0(sp)
 8002590:	dfc00115 	stw	ra,4(sp)
 8002594:	8002c500 	call	8002c50 <malloc>
 8002598:	1021883a 	mov	r16,r2
 800259c:	10000926 	beq	r2,zero,80025c4 <__cxa_allocate_dependent_exception+0x40>
 80025a0:	8009883a 	mov	r4,r16
 80025a4:	000b883a 	mov	r5,zero
 80025a8:	01801004 	movi	r6,64
 80025ac:	80032fc0 	call	80032fc <memset>
 80025b0:	8005883a 	mov	r2,r16
 80025b4:	dfc00117 	ldw	ra,4(sp)
 80025b8:	dc000017 	ldw	r16,0(sp)
 80025bc:	dec00204 	addi	sp,sp,8
 80025c0:	f800283a 	ret
 80025c4:	01c20074 	movhi	r7,2049
 80025c8:	39e13304 	addi	r7,r7,-31540
 80025cc:	39800017 	ldw	r6,0(r7)
 80025d0:	0005883a 	mov	r2,zero
 80025d4:	01400104 	movi	r5,4
 80025d8:	3007883a 	mov	r3,r6
 80025dc:	1900004c 	andi	r4,r3,1
 80025e0:	20000426 	beq	r4,zero,80025f4 <__cxa_allocate_dependent_exception+0x70>
 80025e4:	10800044 	addi	r2,r2,1
 80025e8:	1806d07a 	srli	r3,r3,1
 80025ec:	117ffb1e 	bne	r2,r5,80025dc <__alt_data_end+0xfc0025dc>
 80025f0:	8001db00 	call	8001db0 <_ZSt9terminatev>
 80025f4:	00c00044 	movi	r3,1
 80025f8:	1886983a 	sll	r3,r3,r2
 80025fc:	100491ba 	slli	r2,r2,6
 8002600:	04020074 	movhi	r16,2049
 8002604:	198cb03a 	or	r6,r3,r6
 8002608:	84213f04 	addi	r16,r16,-31492
 800260c:	39800015 	stw	r6,0(r7)
 8002610:	1421883a 	add	r16,r2,r16
 8002614:	003fe206 	br	80025a0 <__alt_data_end+0xfc0025a0>

08002618 <__cxa_free_dependent_exception>:
 8002618:	00820074 	movhi	r2,2049
 800261c:	10a13f04 	addi	r2,r2,-31492
 8002620:	20800236 	bltu	r4,r2,800262c <__cxa_free_dependent_exception+0x14>
 8002624:	10c04004 	addi	r3,r2,256
 8002628:	20c00136 	bltu	r4,r3,8002630 <__cxa_free_dependent_exception+0x18>
 800262c:	8002c641 	jmpi	8002c64 <free>
 8002630:	2089c83a 	sub	r4,r4,r2
 8002634:	2008d1ba 	srli	r4,r4,6
 8002638:	01420074 	movhi	r5,2049
 800263c:	29613304 	addi	r5,r5,-31540
 8002640:	00ffff84 	movi	r3,-2
 8002644:	28800017 	ldw	r2,0(r5)
 8002648:	1908183a 	rol	r4,r3,r4
 800264c:	2088703a 	and	r4,r4,r2
 8002650:	29000015 	stw	r4,0(r5)
 8002654:	f800283a 	ret

08002658 <_ZNSt9exceptionD1Ev>:
 8002658:	f800283a 	ret

0800265c <_ZNSt13bad_exceptionD1Ev>:
 800265c:	f800283a 	ret

08002660 <_ZNKSt9exception4whatEv>:
 8002660:	00820034 	movhi	r2,2048
 8002664:	109c8c04 	addi	r2,r2,29232
 8002668:	f800283a 	ret

0800266c <_ZNKSt13bad_exception4whatEv>:
 800266c:	00820034 	movhi	r2,2048
 8002670:	109c9004 	addi	r2,r2,29248
 8002674:	f800283a 	ret

08002678 <_ZNSt9exceptionD0Ev>:
 8002678:	8001cec1 	jmpi	8001cec <_ZdlPv>

0800267c <_ZNSt13bad_exceptionD0Ev>:
 800267c:	8001cec1 	jmpi	8001cec <_ZdlPv>

08002680 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 8002680:	f800283a 	ret

08002684 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 8002684:	8001cec1 	jmpi	8001cec <_ZdlPv>

08002688 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 8002688:	f800283a 	ret

0800268c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 800268c:	8001cec1 	jmpi	8001cec <_ZdlPv>

08002690 <__cxa_pure_virtual>:
 8002690:	01420034 	movhi	r5,2048
 8002694:	deffff04 	addi	sp,sp,-4
 8002698:	295cc604 	addi	r5,r5,29464
 800269c:	01000084 	movi	r4,2
 80026a0:	018006c4 	movi	r6,27
 80026a4:	dfc00015 	stw	ra,0(sp)
 80026a8:	8004d480 	call	8004d48 <write>
 80026ac:	8001db00 	call	8001db0 <_ZSt9terminatev>

080026b0 <__cxa_deleted_virtual>:
 80026b0:	01420034 	movhi	r5,2048
 80026b4:	deffff04 	addi	sp,sp,-4
 80026b8:	295ccd04 	addi	r5,r5,29492
 80026bc:	01000084 	movi	r4,2
 80026c0:	01800784 	movi	r6,30
 80026c4:	dfc00015 	stw	ra,0(sp)
 80026c8:	8004d480 	call	8004d48 <write>
 80026cc:	8001db00 	call	8001db0 <_ZSt9terminatev>

080026d0 <__mulsi3>:
 80026d0:	0005883a 	mov	r2,zero
 80026d4:	20000726 	beq	r4,zero,80026f4 <__mulsi3+0x24>
 80026d8:	20c0004c 	andi	r3,r4,1
 80026dc:	2008d07a 	srli	r4,r4,1
 80026e0:	18000126 	beq	r3,zero,80026e8 <__mulsi3+0x18>
 80026e4:	1145883a 	add	r2,r2,r5
 80026e8:	294b883a 	add	r5,r5,r5
 80026ec:	203ffa1e 	bne	r4,zero,80026d8 <__alt_data_end+0xfc0026d8>
 80026f0:	f800283a 	ret
 80026f4:	f800283a 	ret

080026f8 <_Unwind_ForcedUnwind_Phase2>:
 80026f8:	defff404 	addi	sp,sp,-48
 80026fc:	dd800915 	stw	r22,36(sp)
 8002700:	05820074 	movhi	r22,2049
 8002704:	ddc00a15 	stw	r23,40(sp)
 8002708:	dd400815 	stw	r21,32(sp)
 800270c:	dd000715 	stw	r20,28(sp)
 8002710:	dcc00615 	stw	r19,24(sp)
 8002714:	dc400415 	stw	r17,16(sp)
 8002718:	dc000315 	stw	r16,12(sp)
 800271c:	dfc00b15 	stw	ra,44(sp)
 8002720:	dc800515 	stw	r18,20(sp)
 8002724:	2021883a 	mov	r16,r4
 8002728:	2823883a 	mov	r17,r5
 800272c:	24c00317 	ldw	r19,12(r4)
 8002730:	25000417 	ldw	r20,16(r4)
 8002734:	28c00017 	ldw	r3,0(r5)
 8002738:	b5a13504 	addi	r22,r22,-31532
 800273c:	054001c4 	movi	r21,7
 8002740:	05c00204 	movi	r23,8
 8002744:	00001606 	br	80027a0 <_Unwind_ForcedUnwind_Phase2+0xa8>
 8002748:	81800017 	ldw	r6,0(r16)
 800274c:	81c00117 	ldw	r7,4(r16)
 8002750:	1c800617 	ldw	r18,24(r3)
 8002754:	dc000015 	stw	r16,0(sp)
 8002758:	dc400115 	stw	r17,4(sp)
 800275c:	dd000215 	stw	r20,8(sp)
 8002760:	983ee83a 	callr	r19
 8002764:	01000044 	movi	r4,1
 8002768:	01400284 	movi	r5,10
 800276c:	1000241e 	bne	r2,zero,8002800 <_Unwind_ForcedUnwind_Phase2+0x108>
 8002770:	90000726 	beq	r18,zero,8002790 <_Unwind_ForcedUnwind_Phase2+0x98>
 8002774:	81800017 	ldw	r6,0(r16)
 8002778:	81c00117 	ldw	r7,4(r16)
 800277c:	dc000015 	stw	r16,0(sp)
 8002780:	dc400115 	stw	r17,4(sp)
 8002784:	903ee83a 	callr	r18
 8002788:	15401f26 	beq	r2,r21,8002808 <_Unwind_ForcedUnwind_Phase2+0x110>
 800278c:	15c01c1e 	bne	r2,r23,8002800 <_Unwind_ForcedUnwind_Phase2+0x108>
 8002790:	88800017 	ldw	r2,0(r17)
 8002794:	10c00017 	ldw	r3,0(r2)
 8002798:	b0c00015 	stw	r3,0(r22)
 800279c:	88c00015 	stw	r3,0(r17)
 80027a0:	01000044 	movi	r4,1
 80027a4:	01400284 	movi	r5,10
 80027a8:	183fe71e 	bne	r3,zero,8002748 <__alt_data_end+0xfc002748>
 80027ac:	81800017 	ldw	r6,0(r16)
 80027b0:	81c00117 	ldw	r7,4(r16)
 80027b4:	01000044 	movi	r4,1
 80027b8:	dc000015 	stw	r16,0(sp)
 80027bc:	dc400115 	stw	r17,4(sp)
 80027c0:	dd000215 	stw	r20,8(sp)
 80027c4:	01400684 	movi	r5,26
 80027c8:	983ee83a 	callr	r19
 80027cc:	10000c1e 	bne	r2,zero,8002800 <_Unwind_ForcedUnwind_Phase2+0x108>
 80027d0:	00800144 	movi	r2,5
 80027d4:	dfc00b17 	ldw	ra,44(sp)
 80027d8:	ddc00a17 	ldw	r23,40(sp)
 80027dc:	dd800917 	ldw	r22,36(sp)
 80027e0:	dd400817 	ldw	r21,32(sp)
 80027e4:	dd000717 	ldw	r20,28(sp)
 80027e8:	dcc00617 	ldw	r19,24(sp)
 80027ec:	dc800517 	ldw	r18,20(sp)
 80027f0:	dc400417 	ldw	r17,16(sp)
 80027f4:	dc000317 	ldw	r16,12(sp)
 80027f8:	dec00c04 	addi	sp,sp,48
 80027fc:	f800283a 	ret
 8002800:	00800084 	movi	r2,2
 8002804:	003ff306 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002808:	a805883a 	mov	r2,r21
 800280c:	003ff106 	br	80027d4 <__alt_data_end+0xfc0027d4>

08002810 <_Unwind_RaiseException_Phase2>:
 8002810:	28c00017 	ldw	r3,0(r5)
 8002814:	defff804 	addi	sp,sp,-32
 8002818:	dcc00515 	stw	r19,20(sp)
 800281c:	dc800415 	stw	r18,16(sp)
 8002820:	dc400315 	stw	r17,12(sp)
 8002824:	dc000215 	stw	r16,8(sp)
 8002828:	dfc00715 	stw	ra,28(sp)
 800282c:	dd000615 	stw	r20,24(sp)
 8002830:	2823883a 	mov	r17,r5
 8002834:	2021883a 	mov	r16,r4
 8002838:	048001c4 	movi	r18,7
 800283c:	04c00204 	movi	r19,8
 8002840:	18001326 	beq	r3,zero,8002890 <_Unwind_RaiseException_Phase2+0x80>
 8002844:	81000417 	ldw	r4,16(r16)
 8002848:	1a000617 	ldw	r8,24(r3)
 800284c:	19001c26 	beq	r3,r4,80028c0 <_Unwind_RaiseException_Phase2+0xb0>
 8002850:	40000b26 	beq	r8,zero,8002880 <_Unwind_RaiseException_Phase2+0x70>
 8002854:	01400084 	movi	r5,2
 8002858:	0029883a 	mov	r20,zero
 800285c:	81800017 	ldw	r6,0(r16)
 8002860:	81c00117 	ldw	r7,4(r16)
 8002864:	01000044 	movi	r4,1
 8002868:	dc000015 	stw	r16,0(sp)
 800286c:	dc400115 	stw	r17,4(sp)
 8002870:	403ee83a 	callr	r8
 8002874:	14800f26 	beq	r2,r18,80028b4 <_Unwind_RaiseException_Phase2+0xa4>
 8002878:	14c0051e 	bne	r2,r19,8002890 <_Unwind_RaiseException_Phase2+0x80>
 800287c:	a0000f1e 	bne	r20,zero,80028bc <_Unwind_RaiseException_Phase2+0xac>
 8002880:	88c00017 	ldw	r3,0(r17)
 8002884:	18c00017 	ldw	r3,0(r3)
 8002888:	88c00015 	stw	r3,0(r17)
 800288c:	183fed1e 	bne	r3,zero,8002844 <__alt_data_end+0xfc002844>
 8002890:	00800084 	movi	r2,2
 8002894:	dfc00717 	ldw	ra,28(sp)
 8002898:	dd000617 	ldw	r20,24(sp)
 800289c:	dcc00517 	ldw	r19,20(sp)
 80028a0:	dc800417 	ldw	r18,16(sp)
 80028a4:	dc400317 	ldw	r17,12(sp)
 80028a8:	dc000217 	ldw	r16,8(sp)
 80028ac:	dec00804 	addi	sp,sp,32
 80028b0:	f800283a 	ret
 80028b4:	9005883a 	mov	r2,r18
 80028b8:	003ff606 	br	8002894 <__alt_data_end+0xfc002894>
 80028bc:	8002c180 	call	8002c18 <abort>
 80028c0:	403ffe26 	beq	r8,zero,80028bc <__alt_data_end+0xfc0028bc>
 80028c4:	01400184 	movi	r5,6
 80028c8:	05000104 	movi	r20,4
 80028cc:	003fe306 	br	800285c <__alt_data_end+0xfc00285c>

080028d0 <uw_install_context.isra.1>:
 80028d0:	20c00017 	ldw	r3,0(r4)
 80028d4:	deffff04 	addi	sp,sp,-4
 80028d8:	01420074 	movhi	r5,2049
 80028dc:	19000917 	ldw	r4,36(r3)
 80028e0:	df000015 	stw	fp,0(sp)
 80028e4:	18800804 	addi	r2,r3,32
 80028e8:	d839883a 	mov	fp,sp
 80028ec:	29613504 	addi	r5,r5,-31532
 80028f0:	28c00015 	stw	r3,0(r5)
 80028f4:	17000017 	ldw	fp,0(r2)
 80028f8:	1ec00a17 	ldw	sp,40(r3)
 80028fc:	2000683a 	jmp	r4

08002900 <_Unwind_SjLj_Register>:
 8002900:	00820074 	movhi	r2,2049
 8002904:	10a13504 	addi	r2,r2,-31532
 8002908:	10c00017 	ldw	r3,0(r2)
 800290c:	11000015 	stw	r4,0(r2)
 8002910:	20c00015 	stw	r3,0(r4)
 8002914:	f800283a 	ret

08002918 <_Unwind_SjLj_Unregister>:
 8002918:	20c00017 	ldw	r3,0(r4)
 800291c:	00820074 	movhi	r2,2049
 8002920:	10a13504 	addi	r2,r2,-31532
 8002924:	10c00015 	stw	r3,0(r2)
 8002928:	f800283a 	ret

0800292c <_Unwind_GetGR>:
 800292c:	20800017 	ldw	r2,0(r4)
 8002930:	29400084 	addi	r5,r5,2
 8002934:	294b883a 	add	r5,r5,r5
 8002938:	294b883a 	add	r5,r5,r5
 800293c:	114b883a 	add	r5,r2,r5
 8002940:	28800017 	ldw	r2,0(r5)
 8002944:	f800283a 	ret

08002948 <_Unwind_GetCFA>:
 8002948:	20800017 	ldw	r2,0(r4)
 800294c:	10000226 	beq	r2,zero,8002958 <_Unwind_GetCFA+0x10>
 8002950:	10800a17 	ldw	r2,40(r2)
 8002954:	f800283a 	ret
 8002958:	0005883a 	mov	r2,zero
 800295c:	f800283a 	ret

08002960 <_Unwind_SetGR>:
 8002960:	20800017 	ldw	r2,0(r4)
 8002964:	29400084 	addi	r5,r5,2
 8002968:	294b883a 	add	r5,r5,r5
 800296c:	294b883a 	add	r5,r5,r5
 8002970:	114b883a 	add	r5,r2,r5
 8002974:	29800015 	stw	r6,0(r5)
 8002978:	f800283a 	ret

0800297c <_Unwind_GetIP>:
 800297c:	20800017 	ldw	r2,0(r4)
 8002980:	10800117 	ldw	r2,4(r2)
 8002984:	10800044 	addi	r2,r2,1
 8002988:	f800283a 	ret

0800298c <_Unwind_GetIPInfo>:
 800298c:	20800017 	ldw	r2,0(r4)
 8002990:	28000015 	stw	zero,0(r5)
 8002994:	10000326 	beq	r2,zero,80029a4 <_Unwind_GetIPInfo+0x18>
 8002998:	10800117 	ldw	r2,4(r2)
 800299c:	10800044 	addi	r2,r2,1
 80029a0:	f800283a 	ret
 80029a4:	0005883a 	mov	r2,zero
 80029a8:	f800283a 	ret

080029ac <_Unwind_SetIP>:
 80029ac:	20800017 	ldw	r2,0(r4)
 80029b0:	297fffc4 	addi	r5,r5,-1
 80029b4:	11400115 	stw	r5,4(r2)
 80029b8:	f800283a 	ret

080029bc <_Unwind_GetLanguageSpecificData>:
 80029bc:	20800017 	ldw	r2,0(r4)
 80029c0:	10800717 	ldw	r2,28(r2)
 80029c4:	f800283a 	ret

080029c8 <_Unwind_GetRegionStart>:
 80029c8:	0005883a 	mov	r2,zero
 80029cc:	f800283a 	ret

080029d0 <_Unwind_FindEnclosingFunction>:
 80029d0:	0005883a 	mov	r2,zero
 80029d4:	f800283a 	ret

080029d8 <_Unwind_GetDataRelBase>:
 80029d8:	0005883a 	mov	r2,zero
 80029dc:	f800283a 	ret

080029e0 <_Unwind_GetTextRelBase>:
 80029e0:	0005883a 	mov	r2,zero
 80029e4:	f800283a 	ret

080029e8 <_Unwind_SjLj_RaiseException>:
 80029e8:	00820074 	movhi	r2,2049
 80029ec:	defff804 	addi	sp,sp,-32
 80029f0:	10a13504 	addi	r2,r2,-31532
 80029f4:	dc800515 	stw	r18,20(sp)
 80029f8:	14800017 	ldw	r18,0(r2)
 80029fc:	dfc00715 	stw	ra,28(sp)
 8002a00:	dcc00615 	stw	r19,24(sp)
 8002a04:	dc400415 	stw	r17,16(sp)
 8002a08:	dc000315 	stw	r16,12(sp)
 8002a0c:	dc800215 	stw	r18,8(sp)
 8002a10:	90001426 	beq	r18,zero,8002a64 <_Unwind_SjLj_RaiseException+0x7c>
 8002a14:	2021883a 	mov	r16,r4
 8002a18:	9005883a 	mov	r2,r18
 8002a1c:	04400184 	movi	r17,6
 8002a20:	04c00204 	movi	r19,8
 8002a24:	10800617 	ldw	r2,24(r2)
 8002a28:	10000a26 	beq	r2,zero,8002a54 <_Unwind_SjLj_RaiseException+0x6c>
 8002a2c:	81800017 	ldw	r6,0(r16)
 8002a30:	81c00117 	ldw	r7,4(r16)
 8002a34:	01000044 	movi	r4,1
 8002a38:	d8c00204 	addi	r3,sp,8
 8002a3c:	dc000015 	stw	r16,0(sp)
 8002a40:	d8c00115 	stw	r3,4(sp)
 8002a44:	200b883a 	mov	r5,r4
 8002a48:	103ee83a 	callr	r2
 8002a4c:	14400d26 	beq	r2,r17,8002a84 <_Unwind_SjLj_RaiseException+0x9c>
 8002a50:	14c0171e 	bne	r2,r19,8002ab0 <_Unwind_SjLj_RaiseException+0xc8>
 8002a54:	d8800217 	ldw	r2,8(sp)
 8002a58:	10800017 	ldw	r2,0(r2)
 8002a5c:	d8800215 	stw	r2,8(sp)
 8002a60:	103ff01e 	bne	r2,zero,8002a24 <__alt_data_end+0xfc002a24>
 8002a64:	00800144 	movi	r2,5
 8002a68:	dfc00717 	ldw	ra,28(sp)
 8002a6c:	dcc00617 	ldw	r19,24(sp)
 8002a70:	dc800517 	ldw	r18,20(sp)
 8002a74:	dc400417 	ldw	r17,16(sp)
 8002a78:	dc000317 	ldw	r16,12(sp)
 8002a7c:	dec00804 	addi	sp,sp,32
 8002a80:	f800283a 	ret
 8002a84:	d8800217 	ldw	r2,8(sp)
 8002a88:	80000315 	stw	zero,12(r16)
 8002a8c:	8009883a 	mov	r4,r16
 8002a90:	80800415 	stw	r2,16(r16)
 8002a94:	d9400204 	addi	r5,sp,8
 8002a98:	dc800215 	stw	r18,8(sp)
 8002a9c:	80028100 	call	8002810 <_Unwind_RaiseException_Phase2>
 8002aa0:	00c001c4 	movi	r3,7
 8002aa4:	10fff01e 	bne	r2,r3,8002a68 <__alt_data_end+0xfc002a68>
 8002aa8:	d9000204 	addi	r4,sp,8
 8002aac:	80028d00 	call	80028d0 <uw_install_context.isra.1>
 8002ab0:	008000c4 	movi	r2,3
 8002ab4:	003fec06 	br	8002a68 <__alt_data_end+0xfc002a68>

08002ab8 <_Unwind_SjLj_ForcedUnwind>:
 8002ab8:	00c20074 	movhi	r3,2049
 8002abc:	18e13504 	addi	r3,r3,-31532
 8002ac0:	defffe04 	addi	sp,sp,-8
 8002ac4:	18c00017 	ldw	r3,0(r3)
 8002ac8:	dfc00115 	stw	ra,4(sp)
 8002acc:	21400315 	stw	r5,12(r4)
 8002ad0:	21800415 	stw	r6,16(r4)
 8002ad4:	d80b883a 	mov	r5,sp
 8002ad8:	d8c00015 	stw	r3,0(sp)
 8002adc:	80026f80 	call	80026f8 <_Unwind_ForcedUnwind_Phase2>
 8002ae0:	00c001c4 	movi	r3,7
 8002ae4:	10c00326 	beq	r2,r3,8002af4 <_Unwind_SjLj_ForcedUnwind+0x3c>
 8002ae8:	dfc00117 	ldw	ra,4(sp)
 8002aec:	dec00204 	addi	sp,sp,8
 8002af0:	f800283a 	ret
 8002af4:	d809883a 	mov	r4,sp
 8002af8:	80028d00 	call	80028d0 <uw_install_context.isra.1>

08002afc <_Unwind_SjLj_Resume>:
 8002afc:	00c20074 	movhi	r3,2049
 8002b00:	18e13504 	addi	r3,r3,-31532
 8002b04:	18c00017 	ldw	r3,0(r3)
 8002b08:	20800317 	ldw	r2,12(r4)
 8002b0c:	defffe04 	addi	sp,sp,-8
 8002b10:	dfc00115 	stw	ra,4(sp)
 8002b14:	d8c00015 	stw	r3,0(sp)
 8002b18:	d80b883a 	mov	r5,sp
 8002b1c:	1000041e 	bne	r2,zero,8002b30 <_Unwind_SjLj_Resume+0x34>
 8002b20:	80028100 	call	8002810 <_Unwind_RaiseException_Phase2>
 8002b24:	00c001c4 	movi	r3,7
 8002b28:	10c00326 	beq	r2,r3,8002b38 <_Unwind_SjLj_Resume+0x3c>
 8002b2c:	8002c180 	call	8002c18 <abort>
 8002b30:	80026f80 	call	80026f8 <_Unwind_ForcedUnwind_Phase2>
 8002b34:	003ffb06 	br	8002b24 <__alt_data_end+0xfc002b24>
 8002b38:	d809883a 	mov	r4,sp
 8002b3c:	80028d00 	call	80028d0 <uw_install_context.isra.1>

08002b40 <_Unwind_SjLj_Resume_or_Rethrow>:
 8002b40:	20800317 	ldw	r2,12(r4)
 8002b44:	defffe04 	addi	sp,sp,-8
 8002b48:	dfc00115 	stw	ra,4(sp)
 8002b4c:	1000041e 	bne	r2,zero,8002b60 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
 8002b50:	80029e80 	call	80029e8 <_Unwind_SjLj_RaiseException>
 8002b54:	dfc00117 	ldw	ra,4(sp)
 8002b58:	dec00204 	addi	sp,sp,8
 8002b5c:	f800283a 	ret
 8002b60:	00820074 	movhi	r2,2049
 8002b64:	10a13504 	addi	r2,r2,-31532
 8002b68:	10800017 	ldw	r2,0(r2)
 8002b6c:	d80b883a 	mov	r5,sp
 8002b70:	d8800015 	stw	r2,0(sp)
 8002b74:	80026f80 	call	80026f8 <_Unwind_ForcedUnwind_Phase2>
 8002b78:	00c001c4 	movi	r3,7
 8002b7c:	10c00126 	beq	r2,r3,8002b84 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
 8002b80:	8002c180 	call	8002c18 <abort>
 8002b84:	d809883a 	mov	r4,sp
 8002b88:	80028d00 	call	80028d0 <uw_install_context.isra.1>

08002b8c <_Unwind_DeleteException>:
 8002b8c:	20800217 	ldw	r2,8(r4)
 8002b90:	200b883a 	mov	r5,r4
 8002b94:	10000226 	beq	r2,zero,8002ba0 <_Unwind_DeleteException+0x14>
 8002b98:	01000044 	movi	r4,1
 8002b9c:	1000683a 	jmp	r2
 8002ba0:	f800283a 	ret

08002ba4 <_Unwind_Backtrace>:
 8002ba4:	00820074 	movhi	r2,2049
 8002ba8:	10a13504 	addi	r2,r2,-31532
 8002bac:	10800017 	ldw	r2,0(r2)
 8002bb0:	defffc04 	addi	sp,sp,-16
 8002bb4:	dc400215 	stw	r17,8(sp)
 8002bb8:	dc000115 	stw	r16,4(sp)
 8002bbc:	dfc00315 	stw	ra,12(sp)
 8002bc0:	2023883a 	mov	r17,r4
 8002bc4:	2821883a 	mov	r16,r5
 8002bc8:	d8800015 	stw	r2,0(sp)
 8002bcc:	00000506 	br	8002be4 <_Unwind_Backtrace+0x40>
 8002bd0:	883ee83a 	callr	r17
 8002bd4:	10000e1e 	bne	r2,zero,8002c10 <_Unwind_Backtrace+0x6c>
 8002bd8:	d8800017 	ldw	r2,0(sp)
 8002bdc:	10800017 	ldw	r2,0(r2)
 8002be0:	d8800015 	stw	r2,0(sp)
 8002be4:	d809883a 	mov	r4,sp
 8002be8:	800b883a 	mov	r5,r16
 8002bec:	103ff81e 	bne	r2,zero,8002bd0 <__alt_data_end+0xfc002bd0>
 8002bf0:	883ee83a 	callr	r17
 8002bf4:	1000061e 	bne	r2,zero,8002c10 <_Unwind_Backtrace+0x6c>
 8002bf8:	00800144 	movi	r2,5
 8002bfc:	dfc00317 	ldw	ra,12(sp)
 8002c00:	dc400217 	ldw	r17,8(sp)
 8002c04:	dc000117 	ldw	r16,4(sp)
 8002c08:	dec00404 	addi	sp,sp,16
 8002c0c:	f800283a 	ret
 8002c10:	008000c4 	movi	r2,3
 8002c14:	003ff906 	br	8002bfc <__alt_data_end+0xfc002bfc>

08002c18 <abort>:
 8002c18:	deffff04 	addi	sp,sp,-4
 8002c1c:	01000184 	movi	r4,6
 8002c20:	dfc00015 	stw	ra,0(sp)
 8002c24:	80036c40 	call	80036c4 <raise>
 8002c28:	01000044 	movi	r4,1
 8002c2c:	80045dc0 	call	80045dc <_exit>

08002c30 <exit>:
 8002c30:	defffe04 	addi	sp,sp,-8
 8002c34:	000b883a 	mov	r5,zero
 8002c38:	dc000015 	stw	r16,0(sp)
 8002c3c:	dfc00115 	stw	ra,4(sp)
 8002c40:	2021883a 	mov	r16,r4
 8002c44:	8003dc00 	call	8003dc0 <__call_exitprocs>
 8002c48:	8009883a 	mov	r4,r16
 8002c4c:	80045dc0 	call	80045dc <_exit>

08002c50 <malloc>:
 8002c50:	00820034 	movhi	r2,2048
 8002c54:	109f0504 	addi	r2,r2,31764
 8002c58:	200b883a 	mov	r5,r4
 8002c5c:	11000017 	ldw	r4,0(r2)
 8002c60:	8002c781 	jmpi	8002c78 <_malloc_r>

08002c64 <free>:
 8002c64:	00820034 	movhi	r2,2048
 8002c68:	109f0504 	addi	r2,r2,31764
 8002c6c:	200b883a 	mov	r5,r4
 8002c70:	11000017 	ldw	r4,0(r2)
 8002c74:	80040801 	jmpi	8004080 <_free_r>

08002c78 <_malloc_r>:
 8002c78:	defff604 	addi	sp,sp,-40
 8002c7c:	dfc00915 	stw	ra,36(sp)
 8002c80:	df000815 	stw	fp,32(sp)
 8002c84:	ddc00715 	stw	r23,28(sp)
 8002c88:	dd800615 	stw	r22,24(sp)
 8002c8c:	dd400515 	stw	r21,20(sp)
 8002c90:	dd000415 	stw	r20,16(sp)
 8002c94:	dcc00315 	stw	r19,12(sp)
 8002c98:	dc800215 	stw	r18,8(sp)
 8002c9c:	dc400115 	stw	r17,4(sp)
 8002ca0:	dc000015 	stw	r16,0(sp)
 8002ca4:	288002c4 	addi	r2,r5,11
 8002ca8:	00c00584 	movi	r3,22
 8002cac:	1880042e 	bgeu	r3,r2,8002cc0 <_malloc_r+0x48>
 8002cb0:	047ffe04 	movi	r17,-8
 8002cb4:	1462703a 	and	r17,r2,r17
 8002cb8:	8800020e 	bge	r17,zero,8002cc4 <_malloc_r+0x4c>
 8002cbc:	00000206 	br	8002cc8 <_malloc_r+0x50>
 8002cc0:	04400404 	movi	r17,16
 8002cc4:	8940032e 	bgeu	r17,r5,8002cd4 <_malloc_r+0x5c>
 8002cc8:	00800304 	movi	r2,12
 8002ccc:	20800015 	stw	r2,0(r4)
 8002cd0:	00017206 	br	800329c <_malloc_r+0x624>
 8002cd4:	2027883a 	mov	r19,r4
 8002cd8:	800499c0 	call	800499c <__malloc_lock>
 8002cdc:	04820034 	movhi	r18,2048
 8002ce0:	00807dc4 	movi	r2,503
 8002ce4:	949cf404 	addi	r18,r18,29648
 8002ce8:	14401536 	bltu	r2,r17,8002d40 <_malloc_r+0xc8>
 8002cec:	8804d0fa 	srli	r2,r17,3
 8002cf0:	1087883a 	add	r3,r2,r2
 8002cf4:	18c7883a 	add	r3,r3,r3
 8002cf8:	18c7883a 	add	r3,r3,r3
 8002cfc:	90c7883a 	add	r3,r18,r3
 8002d00:	1c000317 	ldw	r16,12(r3)
 8002d04:	80c0031e 	bne	r16,r3,8002d14 <_malloc_r+0x9c>
 8002d08:	80c00204 	addi	r3,r16,8
 8002d0c:	84000517 	ldw	r16,20(r16)
 8002d10:	80c00926 	beq	r16,r3,8002d38 <_malloc_r+0xc0>
 8002d14:	80c00117 	ldw	r3,4(r16)
 8002d18:	00bfff04 	movi	r2,-4
 8002d1c:	81000217 	ldw	r4,8(r16)
 8002d20:	1884703a 	and	r2,r3,r2
 8002d24:	80c00317 	ldw	r3,12(r16)
 8002d28:	8085883a 	add	r2,r16,r2
 8002d2c:	20c00315 	stw	r3,12(r4)
 8002d30:	19000215 	stw	r4,8(r3)
 8002d34:	00002d06 	br	8002dec <_malloc_r+0x174>
 8002d38:	10800084 	addi	r2,r2,2
 8002d3c:	00003506 	br	8002e14 <_malloc_r+0x19c>
 8002d40:	8804d27a 	srli	r2,r17,9
 8002d44:	10001826 	beq	r2,zero,8002da8 <_malloc_r+0x130>
 8002d48:	00c00104 	movi	r3,4
 8002d4c:	18800336 	bltu	r3,r2,8002d5c <_malloc_r+0xe4>
 8002d50:	8804d1ba 	srli	r2,r17,6
 8002d54:	10800e04 	addi	r2,r2,56
 8002d58:	00001606 	br	8002db4 <_malloc_r+0x13c>
 8002d5c:	00c00504 	movi	r3,20
 8002d60:	18800236 	bltu	r3,r2,8002d6c <_malloc_r+0xf4>
 8002d64:	108016c4 	addi	r2,r2,91
 8002d68:	00001206 	br	8002db4 <_malloc_r+0x13c>
 8002d6c:	00c01504 	movi	r3,84
 8002d70:	18800336 	bltu	r3,r2,8002d80 <_malloc_r+0x108>
 8002d74:	8804d33a 	srli	r2,r17,12
 8002d78:	10801b84 	addi	r2,r2,110
 8002d7c:	00000d06 	br	8002db4 <_malloc_r+0x13c>
 8002d80:	00c05504 	movi	r3,340
 8002d84:	18800336 	bltu	r3,r2,8002d94 <_malloc_r+0x11c>
 8002d88:	8804d3fa 	srli	r2,r17,15
 8002d8c:	10801dc4 	addi	r2,r2,119
 8002d90:	00000806 	br	8002db4 <_malloc_r+0x13c>
 8002d94:	00c15504 	movi	r3,1364
 8002d98:	18800536 	bltu	r3,r2,8002db0 <_malloc_r+0x138>
 8002d9c:	8804d4ba 	srli	r2,r17,18
 8002da0:	10801f04 	addi	r2,r2,124
 8002da4:	00000306 	br	8002db4 <_malloc_r+0x13c>
 8002da8:	00800fc4 	movi	r2,63
 8002dac:	00000106 	br	8002db4 <_malloc_r+0x13c>
 8002db0:	00801f84 	movi	r2,126
 8002db4:	1087883a 	add	r3,r2,r2
 8002db8:	18c7883a 	add	r3,r3,r3
 8002dbc:	18c7883a 	add	r3,r3,r3
 8002dc0:	90c7883a 	add	r3,r18,r3
 8002dc4:	1c000317 	ldw	r16,12(r3)
 8002dc8:	01bfff04 	movi	r6,-4
 8002dcc:	01c003c4 	movi	r7,15
 8002dd0:	00000906 	br	8002df8 <_malloc_r+0x180>
 8002dd4:	28000716 	blt	r5,zero,8002df4 <_malloc_r+0x17c>
 8002dd8:	80800317 	ldw	r2,12(r16)
 8002ddc:	80c00217 	ldw	r3,8(r16)
 8002de0:	18800315 	stw	r2,12(r3)
 8002de4:	10c00215 	stw	r3,8(r2)
 8002de8:	8105883a 	add	r2,r16,r4
 8002dec:	10c00117 	ldw	r3,4(r2)
 8002df0:	00013106 	br	80032b8 <_malloc_r+0x640>
 8002df4:	84000317 	ldw	r16,12(r16)
 8002df8:	80c00526 	beq	r16,r3,8002e10 <_malloc_r+0x198>
 8002dfc:	81000117 	ldw	r4,4(r16)
 8002e00:	2188703a 	and	r4,r4,r6
 8002e04:	244bc83a 	sub	r5,r4,r17
 8002e08:	397ff20e 	bge	r7,r5,8002dd4 <__alt_data_end+0xfc002dd4>
 8002e0c:	10bfffc4 	addi	r2,r2,-1
 8002e10:	10800044 	addi	r2,r2,1
 8002e14:	01020034 	movhi	r4,2048
 8002e18:	94000417 	ldw	r16,16(r18)
 8002e1c:	211cf404 	addi	r4,r4,29648
 8002e20:	21800204 	addi	r6,r4,8
 8002e24:	81805c26 	beq	r16,r6,8002f98 <_malloc_r+0x320>
 8002e28:	81400117 	ldw	r5,4(r16)
 8002e2c:	00ffff04 	movi	r3,-4
 8002e30:	01c003c4 	movi	r7,15
 8002e34:	28c6703a 	and	r3,r5,r3
 8002e38:	1c4bc83a 	sub	r5,r3,r17
 8002e3c:	3940060e 	bge	r7,r5,8002e58 <_malloc_r+0x1e0>
 8002e40:	88800054 	ori	r2,r17,1
 8002e44:	8447883a 	add	r3,r16,r17
 8002e48:	80800115 	stw	r2,4(r16)
 8002e4c:	20c00515 	stw	r3,20(r4)
 8002e50:	20c00415 	stw	r3,16(r4)
 8002e54:	00007706 	br	8003034 <_malloc_r+0x3bc>
 8002e58:	21800515 	stw	r6,20(r4)
 8002e5c:	21800415 	stw	r6,16(r4)
 8002e60:	28000516 	blt	r5,zero,8002e78 <_malloc_r+0x200>
 8002e64:	80c7883a 	add	r3,r16,r3
 8002e68:	18800117 	ldw	r2,4(r3)
 8002e6c:	10800054 	ori	r2,r2,1
 8002e70:	18800115 	stw	r2,4(r3)
 8002e74:	00011206 	br	80032c0 <_malloc_r+0x648>
 8002e78:	01407fc4 	movi	r5,511
 8002e7c:	28c01136 	bltu	r5,r3,8002ec4 <_malloc_r+0x24c>
 8002e80:	1806d0fa 	srli	r3,r3,3
 8002e84:	01400044 	movi	r5,1
 8002e88:	180fd0ba 	srai	r7,r3,2
 8002e8c:	18c7883a 	add	r3,r3,r3
 8002e90:	18c7883a 	add	r3,r3,r3
 8002e94:	29ce983a 	sll	r7,r5,r7
 8002e98:	21400117 	ldw	r5,4(r4)
 8002e9c:	18c7883a 	add	r3,r3,r3
 8002ea0:	394ab03a 	or	r5,r7,r5
 8002ea4:	21400115 	stw	r5,4(r4)
 8002ea8:	1909883a 	add	r4,r3,r4
 8002eac:	20c00217 	ldw	r3,8(r4)
 8002eb0:	81000315 	stw	r4,12(r16)
 8002eb4:	80c00215 	stw	r3,8(r16)
 8002eb8:	24000215 	stw	r16,8(r4)
 8002ebc:	1c000315 	stw	r16,12(r3)
 8002ec0:	00003506 	br	8002f98 <_malloc_r+0x320>
 8002ec4:	180ad27a 	srli	r5,r3,9
 8002ec8:	01000104 	movi	r4,4
 8002ecc:	21400336 	bltu	r4,r5,8002edc <_malloc_r+0x264>
 8002ed0:	180ad1ba 	srli	r5,r3,6
 8002ed4:	29400e04 	addi	r5,r5,56
 8002ed8:	00001406 	br	8002f2c <_malloc_r+0x2b4>
 8002edc:	01000504 	movi	r4,20
 8002ee0:	21400236 	bltu	r4,r5,8002eec <_malloc_r+0x274>
 8002ee4:	294016c4 	addi	r5,r5,91
 8002ee8:	00001006 	br	8002f2c <_malloc_r+0x2b4>
 8002eec:	01001504 	movi	r4,84
 8002ef0:	21400336 	bltu	r4,r5,8002f00 <_malloc_r+0x288>
 8002ef4:	180ad33a 	srli	r5,r3,12
 8002ef8:	29401b84 	addi	r5,r5,110
 8002efc:	00000b06 	br	8002f2c <_malloc_r+0x2b4>
 8002f00:	01005504 	movi	r4,340
 8002f04:	21400336 	bltu	r4,r5,8002f14 <_malloc_r+0x29c>
 8002f08:	180ad3fa 	srli	r5,r3,15
 8002f0c:	29401dc4 	addi	r5,r5,119
 8002f10:	00000606 	br	8002f2c <_malloc_r+0x2b4>
 8002f14:	01015504 	movi	r4,1364
 8002f18:	21400336 	bltu	r4,r5,8002f28 <_malloc_r+0x2b0>
 8002f1c:	180ad4ba 	srli	r5,r3,18
 8002f20:	29401f04 	addi	r5,r5,124
 8002f24:	00000106 	br	8002f2c <_malloc_r+0x2b4>
 8002f28:	01401f84 	movi	r5,126
 8002f2c:	2949883a 	add	r4,r5,r5
 8002f30:	2109883a 	add	r4,r4,r4
 8002f34:	2109883a 	add	r4,r4,r4
 8002f38:	9109883a 	add	r4,r18,r4
 8002f3c:	21c00217 	ldw	r7,8(r4)
 8002f40:	02020034 	movhi	r8,2048
 8002f44:	421cf404 	addi	r8,r8,29648
 8002f48:	3900081e 	bne	r7,r4,8002f6c <_malloc_r+0x2f4>
 8002f4c:	280bd0ba 	srai	r5,r5,2
 8002f50:	00c00044 	movi	r3,1
 8002f54:	194a983a 	sll	r5,r3,r5
 8002f58:	40c00117 	ldw	r3,4(r8)
 8002f5c:	28cab03a 	or	r5,r5,r3
 8002f60:	41400115 	stw	r5,4(r8)
 8002f64:	3807883a 	mov	r3,r7
 8002f68:	00000706 	br	8002f88 <_malloc_r+0x310>
 8002f6c:	023fff04 	movi	r8,-4
 8002f70:	39400117 	ldw	r5,4(r7)
 8002f74:	2a0a703a 	and	r5,r5,r8
 8002f78:	1940022e 	bgeu	r3,r5,8002f84 <_malloc_r+0x30c>
 8002f7c:	39c00217 	ldw	r7,8(r7)
 8002f80:	393ffb1e 	bne	r7,r4,8002f70 <__alt_data_end+0xfc002f70>
 8002f84:	38c00317 	ldw	r3,12(r7)
 8002f88:	80c00315 	stw	r3,12(r16)
 8002f8c:	81c00215 	stw	r7,8(r16)
 8002f90:	1c000215 	stw	r16,8(r3)
 8002f94:	3c000315 	stw	r16,12(r7)
 8002f98:	1007d0ba 	srai	r3,r2,2
 8002f9c:	02000044 	movi	r8,1
 8002fa0:	40d0983a 	sll	r8,r8,r3
 8002fa4:	90c00117 	ldw	r3,4(r18)
 8002fa8:	1a004d36 	bltu	r3,r8,80030e0 <_malloc_r+0x468>
 8002fac:	40c8703a 	and	r4,r8,r3
 8002fb0:	2000061e 	bne	r4,zero,8002fcc <_malloc_r+0x354>
 8002fb4:	013fff04 	movi	r4,-4
 8002fb8:	1104703a 	and	r2,r2,r4
 8002fbc:	4211883a 	add	r8,r8,r8
 8002fc0:	40c8703a 	and	r4,r8,r3
 8002fc4:	10800104 	addi	r2,r2,4
 8002fc8:	203ffc26 	beq	r4,zero,8002fbc <__alt_data_end+0xfc002fbc>
 8002fcc:	02bfff04 	movi	r10,-4
 8002fd0:	02c003c4 	movi	r11,15
 8002fd4:	1087883a 	add	r3,r2,r2
 8002fd8:	18c7883a 	add	r3,r3,r3
 8002fdc:	18c7883a 	add	r3,r3,r3
 8002fe0:	90c7883a 	add	r3,r18,r3
 8002fe4:	19c00304 	addi	r7,r3,12
 8002fe8:	1013883a 	mov	r9,r2
 8002fec:	3b3ffd04 	addi	r12,r7,-12
 8002ff0:	3c000017 	ldw	r16,0(r7)
 8002ff4:	00000106 	br	8002ffc <_malloc_r+0x384>
 8002ff8:	84000317 	ldw	r16,12(r16)
 8002ffc:	83001e26 	beq	r16,r12,8003078 <_malloc_r+0x400>
 8003000:	81000117 	ldw	r4,4(r16)
 8003004:	2288703a 	and	r4,r4,r10
 8003008:	244bc83a 	sub	r5,r4,r17
 800300c:	5940100e 	bge	r11,r5,8003050 <_malloc_r+0x3d8>
 8003010:	88800054 	ori	r2,r17,1
 8003014:	80800115 	stw	r2,4(r16)
 8003018:	81000217 	ldw	r4,8(r16)
 800301c:	80800317 	ldw	r2,12(r16)
 8003020:	8447883a 	add	r3,r16,r17
 8003024:	20800315 	stw	r2,12(r4)
 8003028:	11000215 	stw	r4,8(r2)
 800302c:	90c00515 	stw	r3,20(r18)
 8003030:	90c00415 	stw	r3,16(r18)
 8003034:	28800054 	ori	r2,r5,1
 8003038:	19800315 	stw	r6,12(r3)
 800303c:	19800215 	stw	r6,8(r3)
 8003040:	18800115 	stw	r2,4(r3)
 8003044:	1947883a 	add	r3,r3,r5
 8003048:	19400015 	stw	r5,0(r3)
 800304c:	00009c06 	br	80032c0 <_malloc_r+0x648>
 8003050:	283fe916 	blt	r5,zero,8002ff8 <__alt_data_end+0xfc002ff8>
 8003054:	8105883a 	add	r2,r16,r4
 8003058:	10c00117 	ldw	r3,4(r2)
 800305c:	18c00054 	ori	r3,r3,1
 8003060:	10c00115 	stw	r3,4(r2)
 8003064:	80800317 	ldw	r2,12(r16)
 8003068:	80c00217 	ldw	r3,8(r16)
 800306c:	18800315 	stw	r2,12(r3)
 8003070:	10c00215 	stw	r3,8(r2)
 8003074:	00009206 	br	80032c0 <_malloc_r+0x648>
 8003078:	4a400044 	addi	r9,r9,1
 800307c:	490000cc 	andi	r4,r9,3
 8003080:	39c00204 	addi	r7,r7,8
 8003084:	203fd91e 	bne	r4,zero,8002fec <__alt_data_end+0xfc002fec>
 8003088:	110000cc 	andi	r4,r2,3
 800308c:	2000051e 	bne	r4,zero,80030a4 <_malloc_r+0x42c>
 8003090:	90c00117 	ldw	r3,4(r18)
 8003094:	0204303a 	nor	r2,zero,r8
 8003098:	10c4703a 	and	r2,r2,r3
 800309c:	90800115 	stw	r2,4(r18)
 80030a0:	00000406 	br	80030b4 <_malloc_r+0x43c>
 80030a4:	193ffe04 	addi	r4,r3,-8
 80030a8:	18c00017 	ldw	r3,0(r3)
 80030ac:	10bfffc4 	addi	r2,r2,-1
 80030b0:	193ff526 	beq	r3,r4,8003088 <__alt_data_end+0xfc003088>
 80030b4:	90800117 	ldw	r2,4(r18)
 80030b8:	4211883a 	add	r8,r8,r8
 80030bc:	12000836 	bltu	r2,r8,80030e0 <_malloc_r+0x468>
 80030c0:	40000726 	beq	r8,zero,80030e0 <_malloc_r+0x468>
 80030c4:	4086703a 	and	r3,r8,r2
 80030c8:	1800031e 	bne	r3,zero,80030d8 <_malloc_r+0x460>
 80030cc:	4a400104 	addi	r9,r9,4
 80030d0:	4211883a 	add	r8,r8,r8
 80030d4:	003ffb06 	br	80030c4 <__alt_data_end+0xfc0030c4>
 80030d8:	4805883a 	mov	r2,r9
 80030dc:	003fbd06 	br	8002fd4 <__alt_data_end+0xfc002fd4>
 80030e0:	95c00217 	ldw	r23,8(r18)
 80030e4:	00bfff04 	movi	r2,-4
 80030e8:	bd400117 	ldw	r21,4(r23)
 80030ec:	a8aa703a 	and	r21,r21,r2
 80030f0:	ac400336 	bltu	r21,r17,8003100 <_malloc_r+0x488>
 80030f4:	ac47c83a 	sub	r3,r21,r17
 80030f8:	008003c4 	movi	r2,15
 80030fc:	10c06916 	blt	r2,r3,80032a4 <_malloc_r+0x62c>
 8003100:	d0a24817 	ldw	r2,-30432(gp)
 8003104:	d0e01217 	ldw	r3,-32696(gp)
 8003108:	05bfffc4 	movi	r22,-1
 800310c:	bd61883a 	add	r16,r23,r21
 8003110:	8885883a 	add	r2,r17,r2
 8003114:	1d80021e 	bne	r3,r22,8003120 <_malloc_r+0x4a8>
 8003118:	17000404 	addi	fp,r2,16
 800311c:	00000306 	br	800312c <_malloc_r+0x4b4>
 8003120:	108023c4 	addi	r2,r2,143
 8003124:	073fe004 	movi	fp,-128
 8003128:	1738703a 	and	fp,r2,fp
 800312c:	9809883a 	mov	r4,r19
 8003130:	e00b883a 	mov	r5,fp
 8003134:	80034380 	call	8003438 <_sbrk_r>
 8003138:	1029883a 	mov	r20,r2
 800313c:	15804d26 	beq	r2,r22,8003274 <_malloc_r+0x5fc>
 8003140:	1400012e 	bgeu	r2,r16,8003148 <_malloc_r+0x4d0>
 8003144:	bc804b1e 	bne	r23,r18,8003274 <_malloc_r+0x5fc>
 8003148:	05820074 	movhi	r22,2049
 800314c:	b5a37f04 	addi	r22,r22,-29188
 8003150:	b1000017 	ldw	r4,0(r22)
 8003154:	e109883a 	add	r4,fp,r4
 8003158:	b1000015 	stw	r4,0(r22)
 800315c:	a400071e 	bne	r20,r16,800317c <_malloc_r+0x504>
 8003160:	a0801fcc 	andi	r2,r20,127
 8003164:	1000051e 	bne	r2,zero,800317c <_malloc_r+0x504>
 8003168:	90c00217 	ldw	r3,8(r18)
 800316c:	e545883a 	add	r2,fp,r21
 8003170:	10800054 	ori	r2,r2,1
 8003174:	18800115 	stw	r2,4(r3)
 8003178:	00003706 	br	8003258 <_malloc_r+0x5e0>
 800317c:	d0e01217 	ldw	r3,-32696(gp)
 8003180:	00bfffc4 	movi	r2,-1
 8003184:	1880021e 	bne	r3,r2,8003190 <_malloc_r+0x518>
 8003188:	d5201215 	stw	r20,-32696(gp)
 800318c:	00000306 	br	800319c <_malloc_r+0x524>
 8003190:	a407c83a 	sub	r3,r20,r16
 8003194:	20c7883a 	add	r3,r4,r3
 8003198:	b0c00015 	stw	r3,0(r22)
 800319c:	a40001cc 	andi	r16,r20,7
 80031a0:	80000426 	beq	r16,zero,80031b4 <_malloc_r+0x53c>
 80031a4:	00c00204 	movi	r3,8
 80031a8:	1c21c83a 	sub	r16,r3,r16
 80031ac:	a429883a 	add	r20,r20,r16
 80031b0:	00000106 	br	80031b8 <_malloc_r+0x540>
 80031b4:	0021883a 	mov	r16,zero
 80031b8:	a705883a 	add	r2,r20,fp
 80031bc:	10801fcc 	andi	r2,r2,127
 80031c0:	84002004 	addi	r16,r16,128
 80031c4:	80a1c83a 	sub	r16,r16,r2
 80031c8:	9809883a 	mov	r4,r19
 80031cc:	800b883a 	mov	r5,r16
 80031d0:	80034380 	call	8003438 <_sbrk_r>
 80031d4:	00ffffc4 	movi	r3,-1
 80031d8:	10c0021e 	bne	r2,r3,80031e4 <_malloc_r+0x56c>
 80031dc:	a005883a 	mov	r2,r20
 80031e0:	0021883a 	mov	r16,zero
 80031e4:	b0c00017 	ldw	r3,0(r22)
 80031e8:	1505c83a 	sub	r2,r2,r20
 80031ec:	95000215 	stw	r20,8(r18)
 80031f0:	80c7883a 	add	r3,r16,r3
 80031f4:	1421883a 	add	r16,r2,r16
 80031f8:	84000054 	ori	r16,r16,1
 80031fc:	b0c00015 	stw	r3,0(r22)
 8003200:	a4000115 	stw	r16,4(r20)
 8003204:	bc801426 	beq	r23,r18,8003258 <_malloc_r+0x5e0>
 8003208:	00c003c4 	movi	r3,15
 800320c:	1d400336 	bltu	r3,r21,800321c <_malloc_r+0x5a4>
 8003210:	00800044 	movi	r2,1
 8003214:	a0800115 	stw	r2,4(r20)
 8003218:	00001606 	br	8003274 <_malloc_r+0x5fc>
 800321c:	00bffe04 	movi	r2,-8
 8003220:	ad7ffd04 	addi	r21,r21,-12
 8003224:	a8aa703a 	and	r21,r21,r2
 8003228:	b8800117 	ldw	r2,4(r23)
 800322c:	01000144 	movi	r4,5
 8003230:	1080004c 	andi	r2,r2,1
 8003234:	a884b03a 	or	r2,r21,r2
 8003238:	b8800115 	stw	r2,4(r23)
 800323c:	bd45883a 	add	r2,r23,r21
 8003240:	11000115 	stw	r4,4(r2)
 8003244:	11000215 	stw	r4,8(r2)
 8003248:	1d40032e 	bgeu	r3,r21,8003258 <_malloc_r+0x5e0>
 800324c:	9809883a 	mov	r4,r19
 8003250:	b9400204 	addi	r5,r23,8
 8003254:	80040800 	call	8004080 <_free_r>
 8003258:	b0800017 	ldw	r2,0(r22)
 800325c:	d0e24717 	ldw	r3,-30436(gp)
 8003260:	1880012e 	bgeu	r3,r2,8003268 <_malloc_r+0x5f0>
 8003264:	d0a24715 	stw	r2,-30436(gp)
 8003268:	d0e24617 	ldw	r3,-30440(gp)
 800326c:	1880012e 	bgeu	r3,r2,8003274 <_malloc_r+0x5fc>
 8003270:	d0a24615 	stw	r2,-30440(gp)
 8003274:	90800217 	ldw	r2,8(r18)
 8003278:	10c00117 	ldw	r3,4(r2)
 800327c:	00bfff04 	movi	r2,-4
 8003280:	1884703a 	and	r2,r3,r2
 8003284:	1447c83a 	sub	r3,r2,r17
 8003288:	14400236 	bltu	r2,r17,8003294 <_malloc_r+0x61c>
 800328c:	008003c4 	movi	r2,15
 8003290:	10c00416 	blt	r2,r3,80032a4 <_malloc_r+0x62c>
 8003294:	9809883a 	mov	r4,r19
 8003298:	80049bc0 	call	80049bc <__malloc_unlock>
 800329c:	0005883a 	mov	r2,zero
 80032a0:	00000a06 	br	80032cc <_malloc_r+0x654>
 80032a4:	94000217 	ldw	r16,8(r18)
 80032a8:	88800054 	ori	r2,r17,1
 80032ac:	80800115 	stw	r2,4(r16)
 80032b0:	8445883a 	add	r2,r16,r17
 80032b4:	90800215 	stw	r2,8(r18)
 80032b8:	18c00054 	ori	r3,r3,1
 80032bc:	10c00115 	stw	r3,4(r2)
 80032c0:	9809883a 	mov	r4,r19
 80032c4:	80049bc0 	call	80049bc <__malloc_unlock>
 80032c8:	80800204 	addi	r2,r16,8
 80032cc:	dfc00917 	ldw	ra,36(sp)
 80032d0:	df000817 	ldw	fp,32(sp)
 80032d4:	ddc00717 	ldw	r23,28(sp)
 80032d8:	dd800617 	ldw	r22,24(sp)
 80032dc:	dd400517 	ldw	r21,20(sp)
 80032e0:	dd000417 	ldw	r20,16(sp)
 80032e4:	dcc00317 	ldw	r19,12(sp)
 80032e8:	dc800217 	ldw	r18,8(sp)
 80032ec:	dc400117 	ldw	r17,4(sp)
 80032f0:	dc000017 	ldw	r16,0(sp)
 80032f4:	dec00a04 	addi	sp,sp,40
 80032f8:	f800283a 	ret

080032fc <memset>:
 80032fc:	2005883a 	mov	r2,r4
 8003300:	2007883a 	mov	r3,r4
 8003304:	218d883a 	add	r6,r4,r6
 8003308:	19800326 	beq	r3,r6,8003318 <memset+0x1c>
 800330c:	19400005 	stb	r5,0(r3)
 8003310:	18c00044 	addi	r3,r3,1
 8003314:	003ffc06 	br	8003308 <__alt_data_end+0xfc003308>
 8003318:	f800283a 	ret

0800331c <_printf_r>:
 800331c:	defffd04 	addi	sp,sp,-12
 8003320:	dfc00015 	stw	ra,0(sp)
 8003324:	d9800115 	stw	r6,4(sp)
 8003328:	d9c00215 	stw	r7,8(sp)
 800332c:	20c00217 	ldw	r3,8(r4)
 8003330:	280d883a 	mov	r6,r5
 8003334:	01420034 	movhi	r5,2048
 8003338:	2950c204 	addi	r5,r5,17160
 800333c:	19400115 	stw	r5,4(r3)
 8003340:	21400217 	ldw	r5,8(r4)
 8003344:	d9c00104 	addi	r7,sp,4
 8003348:	80038300 	call	8003830 <___vfprintf_internal_r>
 800334c:	dfc00017 	ldw	ra,0(sp)
 8003350:	dec00304 	addi	sp,sp,12
 8003354:	f800283a 	ret

08003358 <printf>:
 8003358:	defffc04 	addi	sp,sp,-16
 800335c:	dfc00015 	stw	ra,0(sp)
 8003360:	d9400115 	stw	r5,4(sp)
 8003364:	d9800215 	stw	r6,8(sp)
 8003368:	d9c00315 	stw	r7,12(sp)
 800336c:	00820034 	movhi	r2,2048
 8003370:	109f0504 	addi	r2,r2,31764
 8003374:	10800017 	ldw	r2,0(r2)
 8003378:	200b883a 	mov	r5,r4
 800337c:	01020034 	movhi	r4,2048
 8003380:	10c00217 	ldw	r3,8(r2)
 8003384:	2110c204 	addi	r4,r4,17160
 8003388:	d9800104 	addi	r6,sp,4
 800338c:	19000115 	stw	r4,4(r3)
 8003390:	11000217 	ldw	r4,8(r2)
 8003394:	8003d9c0 	call	8003d9c <__vfprintf_internal>
 8003398:	dfc00017 	ldw	ra,0(sp)
 800339c:	dec00404 	addi	sp,sp,16
 80033a0:	f800283a 	ret

080033a4 <_puts_r>:
 80033a4:	defffd04 	addi	sp,sp,-12
 80033a8:	dc000015 	stw	r16,0(sp)
 80033ac:	2021883a 	mov	r16,r4
 80033b0:	2809883a 	mov	r4,r5
 80033b4:	dfc00215 	stw	ra,8(sp)
 80033b8:	dc400115 	stw	r17,4(sp)
 80033bc:	2823883a 	mov	r17,r5
 80033c0:	80037a80 	call	80037a8 <strlen>
 80033c4:	81400217 	ldw	r5,8(r16)
 80033c8:	00c20034 	movhi	r3,2048
 80033cc:	18d0c204 	addi	r3,r3,17160
 80033d0:	28c00115 	stw	r3,4(r5)
 80033d4:	8009883a 	mov	r4,r16
 80033d8:	880d883a 	mov	r6,r17
 80033dc:	100f883a 	mov	r7,r2
 80033e0:	80043080 	call	8004308 <__sfvwrite_small_dev>
 80033e4:	00ffffc4 	movi	r3,-1
 80033e8:	10c00926 	beq	r2,r3,8003410 <_puts_r+0x6c>
 80033ec:	81400217 	ldw	r5,8(r16)
 80033f0:	01820034 	movhi	r6,2048
 80033f4:	8009883a 	mov	r4,r16
 80033f8:	28800117 	ldw	r2,4(r5)
 80033fc:	319cd504 	addi	r6,r6,29524
 8003400:	01c00044 	movi	r7,1
 8003404:	103ee83a 	callr	r2
 8003408:	10bfffe0 	cmpeqi	r2,r2,-1
 800340c:	0085c83a 	sub	r2,zero,r2
 8003410:	dfc00217 	ldw	ra,8(sp)
 8003414:	dc400117 	ldw	r17,4(sp)
 8003418:	dc000017 	ldw	r16,0(sp)
 800341c:	dec00304 	addi	sp,sp,12
 8003420:	f800283a 	ret

08003424 <puts>:
 8003424:	00820034 	movhi	r2,2048
 8003428:	109f0504 	addi	r2,r2,31764
 800342c:	200b883a 	mov	r5,r4
 8003430:	11000017 	ldw	r4,0(r2)
 8003434:	80033a41 	jmpi	80033a4 <_puts_r>

08003438 <_sbrk_r>:
 8003438:	defffd04 	addi	sp,sp,-12
 800343c:	dc000015 	stw	r16,0(sp)
 8003440:	04020074 	movhi	r16,2049
 8003444:	dc400115 	stw	r17,4(sp)
 8003448:	84213904 	addi	r16,r16,-31516
 800344c:	2023883a 	mov	r17,r4
 8003450:	2809883a 	mov	r4,r5
 8003454:	dfc00215 	stw	ra,8(sp)
 8003458:	80000015 	stw	zero,0(r16)
 800345c:	8004c480 	call	8004c48 <sbrk>
 8003460:	00ffffc4 	movi	r3,-1
 8003464:	10c0031e 	bne	r2,r3,8003474 <_sbrk_r+0x3c>
 8003468:	80c00017 	ldw	r3,0(r16)
 800346c:	18000126 	beq	r3,zero,8003474 <_sbrk_r+0x3c>
 8003470:	88c00015 	stw	r3,0(r17)
 8003474:	dfc00217 	ldw	ra,8(sp)
 8003478:	dc400117 	ldw	r17,4(sp)
 800347c:	dc000017 	ldw	r16,0(sp)
 8003480:	dec00304 	addi	sp,sp,12
 8003484:	f800283a 	ret

08003488 <_init_signal_r>:
 8003488:	20800b17 	ldw	r2,44(r4)
 800348c:	defffe04 	addi	sp,sp,-8
 8003490:	dc000015 	stw	r16,0(sp)
 8003494:	dfc00115 	stw	ra,4(sp)
 8003498:	2021883a 	mov	r16,r4
 800349c:	10000226 	beq	r2,zero,80034a8 <_init_signal_r+0x20>
 80034a0:	0005883a 	mov	r2,zero
 80034a4:	00000d06 	br	80034dc <_init_signal_r+0x54>
 80034a8:	01402004 	movi	r5,128
 80034ac:	8002c780 	call	8002c78 <_malloc_r>
 80034b0:	80800b15 	stw	r2,44(r16)
 80034b4:	10000826 	beq	r2,zero,80034d8 <_init_signal_r+0x50>
 80034b8:	0005883a 	mov	r2,zero
 80034bc:	01002004 	movi	r4,128
 80034c0:	80c00b17 	ldw	r3,44(r16)
 80034c4:	1887883a 	add	r3,r3,r2
 80034c8:	18000015 	stw	zero,0(r3)
 80034cc:	10800104 	addi	r2,r2,4
 80034d0:	113ffb1e 	bne	r2,r4,80034c0 <__alt_data_end+0xfc0034c0>
 80034d4:	003ff206 	br	80034a0 <__alt_data_end+0xfc0034a0>
 80034d8:	00bfffc4 	movi	r2,-1
 80034dc:	dfc00117 	ldw	ra,4(sp)
 80034e0:	dc000017 	ldw	r16,0(sp)
 80034e4:	dec00204 	addi	sp,sp,8
 80034e8:	f800283a 	ret

080034ec <_signal_r>:
 80034ec:	defffc04 	addi	sp,sp,-16
 80034f0:	dc400115 	stw	r17,4(sp)
 80034f4:	dfc00315 	stw	ra,12(sp)
 80034f8:	dc800215 	stw	r18,8(sp)
 80034fc:	dc000015 	stw	r16,0(sp)
 8003500:	008007c4 	movi	r2,31
 8003504:	2023883a 	mov	r17,r4
 8003508:	1140032e 	bgeu	r2,r5,8003518 <_signal_r+0x2c>
 800350c:	00800584 	movi	r2,22
 8003510:	20800015 	stw	r2,0(r4)
 8003514:	00000d06 	br	800354c <_signal_r+0x60>
 8003518:	20800b17 	ldw	r2,44(r4)
 800351c:	3025883a 	mov	r18,r6
 8003520:	2821883a 	mov	r16,r5
 8003524:	10000726 	beq	r2,zero,8003544 <_signal_r+0x58>
 8003528:	88800b17 	ldw	r2,44(r17)
 800352c:	8421883a 	add	r16,r16,r16
 8003530:	8421883a 	add	r16,r16,r16
 8003534:	1421883a 	add	r16,r2,r16
 8003538:	80800017 	ldw	r2,0(r16)
 800353c:	84800015 	stw	r18,0(r16)
 8003540:	00000306 	br	8003550 <_signal_r+0x64>
 8003544:	80034880 	call	8003488 <_init_signal_r>
 8003548:	103ff726 	beq	r2,zero,8003528 <__alt_data_end+0xfc003528>
 800354c:	00bfffc4 	movi	r2,-1
 8003550:	dfc00317 	ldw	ra,12(sp)
 8003554:	dc800217 	ldw	r18,8(sp)
 8003558:	dc400117 	ldw	r17,4(sp)
 800355c:	dc000017 	ldw	r16,0(sp)
 8003560:	dec00404 	addi	sp,sp,16
 8003564:	f800283a 	ret

08003568 <_raise_r>:
 8003568:	008007c4 	movi	r2,31
 800356c:	1140042e 	bgeu	r2,r5,8003580 <_raise_r+0x18>
 8003570:	00800584 	movi	r2,22
 8003574:	20800015 	stw	r2,0(r4)
 8003578:	00bfffc4 	movi	r2,-1
 800357c:	f800283a 	ret
 8003580:	20c00b17 	ldw	r3,44(r4)
 8003584:	defffd04 	addi	sp,sp,-12
 8003588:	dc400115 	stw	r17,4(sp)
 800358c:	dc000015 	stw	r16,0(sp)
 8003590:	dfc00215 	stw	ra,8(sp)
 8003594:	2821883a 	mov	r16,r5
 8003598:	2023883a 	mov	r17,r4
 800359c:	18000526 	beq	r3,zero,80035b4 <_raise_r+0x4c>
 80035a0:	2945883a 	add	r2,r5,r5
 80035a4:	1085883a 	add	r2,r2,r2
 80035a8:	1887883a 	add	r3,r3,r2
 80035ac:	19400017 	ldw	r5,0(r3)
 80035b0:	28000a1e 	bne	r5,zero,80035dc <_raise_r+0x74>
 80035b4:	8809883a 	mov	r4,r17
 80035b8:	800376c0 	call	800376c <_getpid_r>
 80035bc:	8809883a 	mov	r4,r17
 80035c0:	100b883a 	mov	r5,r2
 80035c4:	800d883a 	mov	r6,r16
 80035c8:	dfc00217 	ldw	ra,8(sp)
 80035cc:	dc400117 	ldw	r17,4(sp)
 80035d0:	dc000017 	ldw	r16,0(sp)
 80035d4:	dec00304 	addi	sp,sp,12
 80035d8:	80037181 	jmpi	8003718 <_kill_r>
 80035dc:	00800044 	movi	r2,1
 80035e0:	28800826 	beq	r5,r2,8003604 <_raise_r+0x9c>
 80035e4:	013fffc4 	movi	r4,-1
 80035e8:	2900031e 	bne	r5,r4,80035f8 <_raise_r+0x90>
 80035ec:	00c00584 	movi	r3,22
 80035f0:	88c00015 	stw	r3,0(r17)
 80035f4:	00000406 	br	8003608 <_raise_r+0xa0>
 80035f8:	18000015 	stw	zero,0(r3)
 80035fc:	8009883a 	mov	r4,r16
 8003600:	283ee83a 	callr	r5
 8003604:	0005883a 	mov	r2,zero
 8003608:	dfc00217 	ldw	ra,8(sp)
 800360c:	dc400117 	ldw	r17,4(sp)
 8003610:	dc000017 	ldw	r16,0(sp)
 8003614:	dec00304 	addi	sp,sp,12
 8003618:	f800283a 	ret

0800361c <__sigtramp_r>:
 800361c:	008007c4 	movi	r2,31
 8003620:	11402636 	bltu	r2,r5,80036bc <__sigtramp_r+0xa0>
 8003624:	20800b17 	ldw	r2,44(r4)
 8003628:	defffd04 	addi	sp,sp,-12
 800362c:	dc400115 	stw	r17,4(sp)
 8003630:	dc000015 	stw	r16,0(sp)
 8003634:	dfc00215 	stw	ra,8(sp)
 8003638:	2023883a 	mov	r17,r4
 800363c:	2821883a 	mov	r16,r5
 8003640:	10000726 	beq	r2,zero,8003660 <__sigtramp_r+0x44>
 8003644:	88c00b17 	ldw	r3,44(r17)
 8003648:	8405883a 	add	r2,r16,r16
 800364c:	1085883a 	add	r2,r2,r2
 8003650:	1885883a 	add	r2,r3,r2
 8003654:	10c00017 	ldw	r3,0(r2)
 8003658:	1800051e 	bne	r3,zero,8003670 <__sigtramp_r+0x54>
 800365c:	00000d06 	br	8003694 <__sigtramp_r+0x78>
 8003660:	80034880 	call	8003488 <_init_signal_r>
 8003664:	103ff726 	beq	r2,zero,8003644 <__alt_data_end+0xfc003644>
 8003668:	00bfffc4 	movi	r2,-1
 800366c:	00000e06 	br	80036a8 <__sigtramp_r+0x8c>
 8003670:	013fffc4 	movi	r4,-1
 8003674:	19000926 	beq	r3,r4,800369c <__sigtramp_r+0x80>
 8003678:	01000044 	movi	r4,1
 800367c:	19000926 	beq	r3,r4,80036a4 <__sigtramp_r+0x88>
 8003680:	10000015 	stw	zero,0(r2)
 8003684:	8009883a 	mov	r4,r16
 8003688:	183ee83a 	callr	r3
 800368c:	0005883a 	mov	r2,zero
 8003690:	00000506 	br	80036a8 <__sigtramp_r+0x8c>
 8003694:	00800044 	movi	r2,1
 8003698:	00000306 	br	80036a8 <__sigtramp_r+0x8c>
 800369c:	00800084 	movi	r2,2
 80036a0:	00000106 	br	80036a8 <__sigtramp_r+0x8c>
 80036a4:	008000c4 	movi	r2,3
 80036a8:	dfc00217 	ldw	ra,8(sp)
 80036ac:	dc400117 	ldw	r17,4(sp)
 80036b0:	dc000017 	ldw	r16,0(sp)
 80036b4:	dec00304 	addi	sp,sp,12
 80036b8:	f800283a 	ret
 80036bc:	00bfffc4 	movi	r2,-1
 80036c0:	f800283a 	ret

080036c4 <raise>:
 80036c4:	00820034 	movhi	r2,2048
 80036c8:	109f0504 	addi	r2,r2,31764
 80036cc:	200b883a 	mov	r5,r4
 80036d0:	11000017 	ldw	r4,0(r2)
 80036d4:	80035681 	jmpi	8003568 <_raise_r>

080036d8 <signal>:
 80036d8:	00c20034 	movhi	r3,2048
 80036dc:	18df0504 	addi	r3,r3,31764
 80036e0:	2005883a 	mov	r2,r4
 80036e4:	19000017 	ldw	r4,0(r3)
 80036e8:	280d883a 	mov	r6,r5
 80036ec:	100b883a 	mov	r5,r2
 80036f0:	80034ec1 	jmpi	80034ec <_signal_r>

080036f4 <_init_signal>:
 80036f4:	00820034 	movhi	r2,2048
 80036f8:	109f0504 	addi	r2,r2,31764
 80036fc:	11000017 	ldw	r4,0(r2)
 8003700:	80034881 	jmpi	8003488 <_init_signal_r>

08003704 <__sigtramp>:
 8003704:	00820034 	movhi	r2,2048
 8003708:	109f0504 	addi	r2,r2,31764
 800370c:	200b883a 	mov	r5,r4
 8003710:	11000017 	ldw	r4,0(r2)
 8003714:	800361c1 	jmpi	800361c <__sigtramp_r>

08003718 <_kill_r>:
 8003718:	defffd04 	addi	sp,sp,-12
 800371c:	dc000015 	stw	r16,0(sp)
 8003720:	04020074 	movhi	r16,2049
 8003724:	dc400115 	stw	r17,4(sp)
 8003728:	84213904 	addi	r16,r16,-31516
 800372c:	2023883a 	mov	r17,r4
 8003730:	2809883a 	mov	r4,r5
 8003734:	300b883a 	mov	r5,r6
 8003738:	dfc00215 	stw	ra,8(sp)
 800373c:	80000015 	stw	zero,0(r16)
 8003740:	80047100 	call	8004710 <kill>
 8003744:	00ffffc4 	movi	r3,-1
 8003748:	10c0031e 	bne	r2,r3,8003758 <_kill_r+0x40>
 800374c:	80c00017 	ldw	r3,0(r16)
 8003750:	18000126 	beq	r3,zero,8003758 <_kill_r+0x40>
 8003754:	88c00015 	stw	r3,0(r17)
 8003758:	dfc00217 	ldw	ra,8(sp)
 800375c:	dc400117 	ldw	r17,4(sp)
 8003760:	dc000017 	ldw	r16,0(sp)
 8003764:	dec00304 	addi	sp,sp,12
 8003768:	f800283a 	ret

0800376c <_getpid_r>:
 800376c:	80046a01 	jmpi	80046a0 <getpid>

08003770 <strcmp>:
 8003770:	20800003 	ldbu	r2,0(r4)
 8003774:	10c03fcc 	andi	r3,r2,255
 8003778:	18c0201c 	xori	r3,r3,128
 800377c:	18ffe004 	addi	r3,r3,-128
 8003780:	18000526 	beq	r3,zero,8003798 <strcmp+0x28>
 8003784:	29800007 	ldb	r6,0(r5)
 8003788:	1980031e 	bne	r3,r6,8003798 <strcmp+0x28>
 800378c:	21000044 	addi	r4,r4,1
 8003790:	29400044 	addi	r5,r5,1
 8003794:	003ff606 	br	8003770 <__alt_data_end+0xfc003770>
 8003798:	28c00003 	ldbu	r3,0(r5)
 800379c:	10803fcc 	andi	r2,r2,255
 80037a0:	10c5c83a 	sub	r2,r2,r3
 80037a4:	f800283a 	ret

080037a8 <strlen>:
 80037a8:	2005883a 	mov	r2,r4
 80037ac:	10c00007 	ldb	r3,0(r2)
 80037b0:	18000226 	beq	r3,zero,80037bc <strlen+0x14>
 80037b4:	10800044 	addi	r2,r2,1
 80037b8:	003ffc06 	br	80037ac <__alt_data_end+0xfc0037ac>
 80037bc:	1105c83a 	sub	r2,r2,r4
 80037c0:	f800283a 	ret

080037c4 <print_repeat>:
 80037c4:	defffb04 	addi	sp,sp,-20
 80037c8:	dc800315 	stw	r18,12(sp)
 80037cc:	dc400215 	stw	r17,8(sp)
 80037d0:	dc000115 	stw	r16,4(sp)
 80037d4:	dfc00415 	stw	ra,16(sp)
 80037d8:	2025883a 	mov	r18,r4
 80037dc:	2823883a 	mov	r17,r5
 80037e0:	d9800005 	stb	r6,0(sp)
 80037e4:	3821883a 	mov	r16,r7
 80037e8:	04000a0e 	bge	zero,r16,8003814 <print_repeat+0x50>
 80037ec:	88800117 	ldw	r2,4(r17)
 80037f0:	9009883a 	mov	r4,r18
 80037f4:	880b883a 	mov	r5,r17
 80037f8:	d80d883a 	mov	r6,sp
 80037fc:	01c00044 	movi	r7,1
 8003800:	103ee83a 	callr	r2
 8003804:	843fffc4 	addi	r16,r16,-1
 8003808:	103ff726 	beq	r2,zero,80037e8 <__alt_data_end+0xfc0037e8>
 800380c:	00bfffc4 	movi	r2,-1
 8003810:	00000106 	br	8003818 <print_repeat+0x54>
 8003814:	0005883a 	mov	r2,zero
 8003818:	dfc00417 	ldw	ra,16(sp)
 800381c:	dc800317 	ldw	r18,12(sp)
 8003820:	dc400217 	ldw	r17,8(sp)
 8003824:	dc000117 	ldw	r16,4(sp)
 8003828:	dec00504 	addi	sp,sp,20
 800382c:	f800283a 	ret

08003830 <___vfprintf_internal_r>:
 8003830:	deffe304 	addi	sp,sp,-116
 8003834:	d8c00804 	addi	r3,sp,32
 8003838:	df001b15 	stw	fp,108(sp)
 800383c:	ddc01a15 	stw	r23,104(sp)
 8003840:	dd801915 	stw	r22,100(sp)
 8003844:	dd401815 	stw	r21,96(sp)
 8003848:	dd001715 	stw	r20,92(sp)
 800384c:	dcc01615 	stw	r19,88(sp)
 8003850:	dc801515 	stw	r18,84(sp)
 8003854:	dc401415 	stw	r17,80(sp)
 8003858:	dc001315 	stw	r16,76(sp)
 800385c:	dfc01c15 	stw	ra,112(sp)
 8003860:	2029883a 	mov	r20,r4
 8003864:	2823883a 	mov	r17,r5
 8003868:	3839883a 	mov	fp,r7
 800386c:	d9800f15 	stw	r6,60(sp)
 8003870:	0021883a 	mov	r16,zero
 8003874:	d8000e15 	stw	zero,56(sp)
 8003878:	002f883a 	mov	r23,zero
 800387c:	002b883a 	mov	r21,zero
 8003880:	0027883a 	mov	r19,zero
 8003884:	0025883a 	mov	r18,zero
 8003888:	d8000c15 	stw	zero,48(sp)
 800388c:	d8000b15 	stw	zero,44(sp)
 8003890:	002d883a 	mov	r22,zero
 8003894:	d8c00915 	stw	r3,36(sp)
 8003898:	d8c00f17 	ldw	r3,60(sp)
 800389c:	19000003 	ldbu	r4,0(r3)
 80038a0:	20803fcc 	andi	r2,r4,255
 80038a4:	1080201c 	xori	r2,r2,128
 80038a8:	10bfe004 	addi	r2,r2,-128
 80038ac:	10012e26 	beq	r2,zero,8003d68 <___vfprintf_internal_r+0x538>
 80038b0:	01400044 	movi	r5,1
 80038b4:	b1401426 	beq	r22,r5,8003908 <___vfprintf_internal_r+0xd8>
 80038b8:	2d800216 	blt	r5,r22,80038c4 <___vfprintf_internal_r+0x94>
 80038bc:	b0000626 	beq	r22,zero,80038d8 <___vfprintf_internal_r+0xa8>
 80038c0:	00012506 	br	8003d58 <___vfprintf_internal_r+0x528>
 80038c4:	01400084 	movi	r5,2
 80038c8:	b1401d26 	beq	r22,r5,8003940 <___vfprintf_internal_r+0x110>
 80038cc:	014000c4 	movi	r5,3
 80038d0:	b1402b26 	beq	r22,r5,8003980 <___vfprintf_internal_r+0x150>
 80038d4:	00012006 	br	8003d58 <___vfprintf_internal_r+0x528>
 80038d8:	01400944 	movi	r5,37
 80038dc:	11410d26 	beq	r2,r5,8003d14 <___vfprintf_internal_r+0x4e4>
 80038e0:	88800117 	ldw	r2,4(r17)
 80038e4:	d9000005 	stb	r4,0(sp)
 80038e8:	880b883a 	mov	r5,r17
 80038ec:	a009883a 	mov	r4,r20
 80038f0:	d80d883a 	mov	r6,sp
 80038f4:	01c00044 	movi	r7,1
 80038f8:	103ee83a 	callr	r2
 80038fc:	1000e81e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003900:	84000044 	addi	r16,r16,1
 8003904:	00011406 	br	8003d58 <___vfprintf_internal_r+0x528>
 8003908:	01400c04 	movi	r5,48
 800390c:	11410a26 	beq	r2,r5,8003d38 <___vfprintf_internal_r+0x508>
 8003910:	01400944 	movi	r5,37
 8003914:	11400a1e 	bne	r2,r5,8003940 <___vfprintf_internal_r+0x110>
 8003918:	d8800005 	stb	r2,0(sp)
 800391c:	88800117 	ldw	r2,4(r17)
 8003920:	a009883a 	mov	r4,r20
 8003924:	880b883a 	mov	r5,r17
 8003928:	d80d883a 	mov	r6,sp
 800392c:	b00f883a 	mov	r7,r22
 8003930:	103ee83a 	callr	r2
 8003934:	1000da1e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003938:	84000044 	addi	r16,r16,1
 800393c:	00010506 	br	8003d54 <___vfprintf_internal_r+0x524>
 8003940:	25bff404 	addi	r22,r4,-48
 8003944:	b5803fcc 	andi	r22,r22,255
 8003948:	00c00244 	movi	r3,9
 800394c:	1d800936 	bltu	r3,r22,8003974 <___vfprintf_internal_r+0x144>
 8003950:	00bfffc4 	movi	r2,-1
 8003954:	90800426 	beq	r18,r2,8003968 <___vfprintf_internal_r+0x138>
 8003958:	9009883a 	mov	r4,r18
 800395c:	01400284 	movi	r5,10
 8003960:	80026d00 	call	80026d0 <__mulsi3>
 8003964:	00000106 	br	800396c <___vfprintf_internal_r+0x13c>
 8003968:	0005883a 	mov	r2,zero
 800396c:	15a5883a 	add	r18,r2,r22
 8003970:	0000f206 	br	8003d3c <___vfprintf_internal_r+0x50c>
 8003974:	01400b84 	movi	r5,46
 8003978:	1140f426 	beq	r2,r5,8003d4c <___vfprintf_internal_r+0x51c>
 800397c:	05800084 	movi	r22,2
 8003980:	213ff404 	addi	r4,r4,-48
 8003984:	20c03fcc 	andi	r3,r4,255
 8003988:	01000244 	movi	r4,9
 800398c:	20c00b36 	bltu	r4,r3,80039bc <___vfprintf_internal_r+0x18c>
 8003990:	00bfffc4 	movi	r2,-1
 8003994:	98800626 	beq	r19,r2,80039b0 <___vfprintf_internal_r+0x180>
 8003998:	9809883a 	mov	r4,r19
 800399c:	01400284 	movi	r5,10
 80039a0:	d8c01115 	stw	r3,68(sp)
 80039a4:	80026d00 	call	80026d0 <__mulsi3>
 80039a8:	d8c01117 	ldw	r3,68(sp)
 80039ac:	00000106 	br	80039b4 <___vfprintf_internal_r+0x184>
 80039b0:	0005883a 	mov	r2,zero
 80039b4:	10e7883a 	add	r19,r2,r3
 80039b8:	0000e706 	br	8003d58 <___vfprintf_internal_r+0x528>
 80039bc:	01401b04 	movi	r5,108
 80039c0:	1140e026 	beq	r2,r5,8003d44 <___vfprintf_internal_r+0x514>
 80039c4:	013fffc4 	movi	r4,-1
 80039c8:	99000226 	beq	r19,r4,80039d4 <___vfprintf_internal_r+0x1a4>
 80039cc:	d8000b15 	stw	zero,44(sp)
 80039d0:	00000106 	br	80039d8 <___vfprintf_internal_r+0x1a8>
 80039d4:	04c00044 	movi	r19,1
 80039d8:	01001a44 	movi	r4,105
 80039dc:	11001626 	beq	r2,r4,8003a38 <___vfprintf_internal_r+0x208>
 80039e0:	20800916 	blt	r4,r2,8003a08 <___vfprintf_internal_r+0x1d8>
 80039e4:	010018c4 	movi	r4,99
 80039e8:	11009626 	beq	r2,r4,8003c44 <___vfprintf_internal_r+0x414>
 80039ec:	01001904 	movi	r4,100
 80039f0:	11001126 	beq	r2,r4,8003a38 <___vfprintf_internal_r+0x208>
 80039f4:	01001604 	movi	r4,88
 80039f8:	1100d61e 	bne	r2,r4,8003d54 <___vfprintf_internal_r+0x524>
 80039fc:	00c00044 	movi	r3,1
 8003a00:	d8c00e15 	stw	r3,56(sp)
 8003a04:	00001406 	br	8003a58 <___vfprintf_internal_r+0x228>
 8003a08:	01001cc4 	movi	r4,115
 8003a0c:	1100a626 	beq	r2,r4,8003ca8 <___vfprintf_internal_r+0x478>
 8003a10:	20800416 	blt	r4,r2,8003a24 <___vfprintf_internal_r+0x1f4>
 8003a14:	01001bc4 	movi	r4,111
 8003a18:	1100ce1e 	bne	r2,r4,8003d54 <___vfprintf_internal_r+0x524>
 8003a1c:	05400204 	movi	r21,8
 8003a20:	00000e06 	br	8003a5c <___vfprintf_internal_r+0x22c>
 8003a24:	01001d44 	movi	r4,117
 8003a28:	11000c26 	beq	r2,r4,8003a5c <___vfprintf_internal_r+0x22c>
 8003a2c:	01001e04 	movi	r4,120
 8003a30:	11000926 	beq	r2,r4,8003a58 <___vfprintf_internal_r+0x228>
 8003a34:	0000c706 	br	8003d54 <___vfprintf_internal_r+0x524>
 8003a38:	e0800104 	addi	r2,fp,4
 8003a3c:	b8000726 	beq	r23,zero,8003a5c <___vfprintf_internal_r+0x22c>
 8003a40:	d8800d15 	stw	r2,52(sp)
 8003a44:	e7000017 	ldw	fp,0(fp)
 8003a48:	e000080e 	bge	fp,zero,8003a6c <___vfprintf_internal_r+0x23c>
 8003a4c:	0739c83a 	sub	fp,zero,fp
 8003a50:	02000044 	movi	r8,1
 8003a54:	00000606 	br	8003a70 <___vfprintf_internal_r+0x240>
 8003a58:	05400404 	movi	r21,16
 8003a5c:	e0c00104 	addi	r3,fp,4
 8003a60:	d8c00d15 	stw	r3,52(sp)
 8003a64:	e7000017 	ldw	fp,0(fp)
 8003a68:	002f883a 	mov	r23,zero
 8003a6c:	0011883a 	mov	r8,zero
 8003a70:	002d883a 	mov	r22,zero
 8003a74:	dd87883a 	add	r3,sp,r22
 8003a78:	e0001a26 	beq	fp,zero,8003ae4 <___vfprintf_internal_r+0x2b4>
 8003a7c:	e009883a 	mov	r4,fp
 8003a80:	a80b883a 	mov	r5,r21
 8003a84:	d8c01115 	stw	r3,68(sp)
 8003a88:	da001215 	stw	r8,72(sp)
 8003a8c:	80045280 	call	8004528 <__udivsi3>
 8003a90:	a809883a 	mov	r4,r21
 8003a94:	100b883a 	mov	r5,r2
 8003a98:	d8801015 	stw	r2,64(sp)
 8003a9c:	80026d00 	call	80026d0 <__mulsi3>
 8003aa0:	e085c83a 	sub	r2,fp,r2
 8003aa4:	01000244 	movi	r4,9
 8003aa8:	d8c01117 	ldw	r3,68(sp)
 8003aac:	d9801017 	ldw	r6,64(sp)
 8003ab0:	da001217 	ldw	r8,72(sp)
 8003ab4:	20800216 	blt	r4,r2,8003ac0 <___vfprintf_internal_r+0x290>
 8003ab8:	17000c04 	addi	fp,r2,48
 8003abc:	00000506 	br	8003ad4 <___vfprintf_internal_r+0x2a4>
 8003ac0:	d9400e17 	ldw	r5,56(sp)
 8003ac4:	28000226 	beq	r5,zero,8003ad0 <___vfprintf_internal_r+0x2a0>
 8003ac8:	17000dc4 	addi	fp,r2,55
 8003acc:	00000106 	br	8003ad4 <___vfprintf_internal_r+0x2a4>
 8003ad0:	170015c4 	addi	fp,r2,87
 8003ad4:	1f000005 	stb	fp,0(r3)
 8003ad8:	b5800044 	addi	r22,r22,1
 8003adc:	3039883a 	mov	fp,r6
 8003ae0:	003fe406 	br	8003a74 <__alt_data_end+0xfc003a74>
 8003ae4:	1ec5c83a 	sub	r2,r3,sp
 8003ae8:	d8800a15 	stw	r2,40(sp)
 8003aec:	9885c83a 	sub	r2,r19,r2
 8003af0:	1839883a 	mov	fp,r3
 8003af4:	00800e0e 	bge	zero,r2,8003b30 <___vfprintf_internal_r+0x300>
 8003af8:	182d883a 	mov	r22,r3
 8003afc:	1885883a 	add	r2,r3,r2
 8003b00:	01000c04 	movi	r4,48
 8003b04:	d9400917 	ldw	r5,36(sp)
 8003b08:	b007883a 	mov	r3,r22
 8003b0c:	b140052e 	bgeu	r22,r5,8003b24 <___vfprintf_internal_r+0x2f4>
 8003b10:	b5800044 	addi	r22,r22,1
 8003b14:	19000005 	stb	r4,0(r3)
 8003b18:	b039883a 	mov	fp,r22
 8003b1c:	b0bff91e 	bne	r22,r2,8003b04 <__alt_data_end+0xfc003b04>
 8003b20:	00000106 	br	8003b28 <___vfprintf_internal_r+0x2f8>
 8003b24:	b039883a 	mov	fp,r22
 8003b28:	b6edc83a 	sub	r22,r22,sp
 8003b2c:	dd800a15 	stw	r22,40(sp)
 8003b30:	d8800a17 	ldw	r2,40(sp)
 8003b34:	1207883a 	add	r3,r2,r8
 8003b38:	90edc83a 	sub	r22,r18,r3
 8003b3c:	d8c00b17 	ldw	r3,44(sp)
 8003b40:	18001726 	beq	r3,zero,8003ba0 <___vfprintf_internal_r+0x370>
 8003b44:	40000a26 	beq	r8,zero,8003b70 <___vfprintf_internal_r+0x340>
 8003b48:	00800b44 	movi	r2,45
 8003b4c:	d8800805 	stb	r2,32(sp)
 8003b50:	88800117 	ldw	r2,4(r17)
 8003b54:	a009883a 	mov	r4,r20
 8003b58:	880b883a 	mov	r5,r17
 8003b5c:	d9800804 	addi	r6,sp,32
 8003b60:	01c00044 	movi	r7,1
 8003b64:	103ee83a 	callr	r2
 8003b68:	10004d1e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003b6c:	84000044 	addi	r16,r16,1
 8003b70:	0580070e 	bge	zero,r22,8003b90 <___vfprintf_internal_r+0x360>
 8003b74:	a009883a 	mov	r4,r20
 8003b78:	880b883a 	mov	r5,r17
 8003b7c:	01800c04 	movi	r6,48
 8003b80:	b00f883a 	mov	r7,r22
 8003b84:	80037c40 	call	80037c4 <print_repeat>
 8003b88:	1000451e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003b8c:	85a1883a 	add	r16,r16,r22
 8003b90:	d9000a17 	ldw	r4,40(sp)
 8003b94:	e007883a 	mov	r3,fp
 8003b98:	272dc83a 	sub	r22,r4,fp
 8003b9c:	00002206 	br	8003c28 <___vfprintf_internal_r+0x3f8>
 8003ba0:	0580090e 	bge	zero,r22,8003bc8 <___vfprintf_internal_r+0x398>
 8003ba4:	a009883a 	mov	r4,r20
 8003ba8:	880b883a 	mov	r5,r17
 8003bac:	01800804 	movi	r6,32
 8003bb0:	b00f883a 	mov	r7,r22
 8003bb4:	da001215 	stw	r8,72(sp)
 8003bb8:	80037c40 	call	80037c4 <print_repeat>
 8003bbc:	da001217 	ldw	r8,72(sp)
 8003bc0:	1000371e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003bc4:	85a1883a 	add	r16,r16,r22
 8003bc8:	403ff126 	beq	r8,zero,8003b90 <__alt_data_end+0xfc003b90>
 8003bcc:	00800b44 	movi	r2,45
 8003bd0:	d8800805 	stb	r2,32(sp)
 8003bd4:	88800117 	ldw	r2,4(r17)
 8003bd8:	a009883a 	mov	r4,r20
 8003bdc:	880b883a 	mov	r5,r17
 8003be0:	d9800804 	addi	r6,sp,32
 8003be4:	01c00044 	movi	r7,1
 8003be8:	103ee83a 	callr	r2
 8003bec:	10002c1e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003bf0:	84000044 	addi	r16,r16,1
 8003bf4:	003fe606 	br	8003b90 <__alt_data_end+0xfc003b90>
 8003bf8:	18ffffc4 	addi	r3,r3,-1
 8003bfc:	18800003 	ldbu	r2,0(r3)
 8003c00:	a009883a 	mov	r4,r20
 8003c04:	d8c01115 	stw	r3,68(sp)
 8003c08:	d8800805 	stb	r2,32(sp)
 8003c0c:	88800117 	ldw	r2,4(r17)
 8003c10:	880b883a 	mov	r5,r17
 8003c14:	d9800804 	addi	r6,sp,32
 8003c18:	01c00044 	movi	r7,1
 8003c1c:	103ee83a 	callr	r2
 8003c20:	d8c01117 	ldw	r3,68(sp)
 8003c24:	10001e1e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003c28:	80c5c83a 	sub	r2,r16,r3
 8003c2c:	1d89883a 	add	r4,r3,r22
 8003c30:	e085883a 	add	r2,fp,r2
 8003c34:	013ff016 	blt	zero,r4,8003bf8 <__alt_data_end+0xfc003bf8>
 8003c38:	1021883a 	mov	r16,r2
 8003c3c:	df000d17 	ldw	fp,52(sp)
 8003c40:	00004406 	br	8003d54 <___vfprintf_internal_r+0x524>
 8003c44:	01000044 	movi	r4,1
 8003c48:	2480080e 	bge	r4,r18,8003c6c <___vfprintf_internal_r+0x43c>
 8003c4c:	95bfffc4 	addi	r22,r18,-1
 8003c50:	a009883a 	mov	r4,r20
 8003c54:	880b883a 	mov	r5,r17
 8003c58:	01800804 	movi	r6,32
 8003c5c:	b00f883a 	mov	r7,r22
 8003c60:	80037c40 	call	80037c4 <print_repeat>
 8003c64:	10000e1e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003c68:	85a1883a 	add	r16,r16,r22
 8003c6c:	e0800017 	ldw	r2,0(fp)
 8003c70:	a009883a 	mov	r4,r20
 8003c74:	880b883a 	mov	r5,r17
 8003c78:	d8800005 	stb	r2,0(sp)
 8003c7c:	88800117 	ldw	r2,4(r17)
 8003c80:	d80d883a 	mov	r6,sp
 8003c84:	01c00044 	movi	r7,1
 8003c88:	e5800104 	addi	r22,fp,4
 8003c8c:	103ee83a 	callr	r2
 8003c90:	1000031e 	bne	r2,zero,8003ca0 <___vfprintf_internal_r+0x470>
 8003c94:	84000044 	addi	r16,r16,1
 8003c98:	b039883a 	mov	fp,r22
 8003c9c:	00002d06 	br	8003d54 <___vfprintf_internal_r+0x524>
 8003ca0:	00bfffc4 	movi	r2,-1
 8003ca4:	00003106 	br	8003d6c <___vfprintf_internal_r+0x53c>
 8003ca8:	e5800017 	ldw	r22,0(fp)
 8003cac:	e0c00104 	addi	r3,fp,4
 8003cb0:	d8c00a15 	stw	r3,40(sp)
 8003cb4:	b009883a 	mov	r4,r22
 8003cb8:	80037a80 	call	80037a8 <strlen>
 8003cbc:	9091c83a 	sub	r8,r18,r2
 8003cc0:	1039883a 	mov	fp,r2
 8003cc4:	0200090e 	bge	zero,r8,8003cec <___vfprintf_internal_r+0x4bc>
 8003cc8:	400f883a 	mov	r7,r8
 8003ccc:	a009883a 	mov	r4,r20
 8003cd0:	880b883a 	mov	r5,r17
 8003cd4:	01800804 	movi	r6,32
 8003cd8:	da001215 	stw	r8,72(sp)
 8003cdc:	80037c40 	call	80037c4 <print_repeat>
 8003ce0:	da001217 	ldw	r8,72(sp)
 8003ce4:	103fee1e 	bne	r2,zero,8003ca0 <__alt_data_end+0xfc003ca0>
 8003ce8:	8221883a 	add	r16,r16,r8
 8003cec:	88800117 	ldw	r2,4(r17)
 8003cf0:	a009883a 	mov	r4,r20
 8003cf4:	880b883a 	mov	r5,r17
 8003cf8:	b00d883a 	mov	r6,r22
 8003cfc:	e00f883a 	mov	r7,fp
 8003d00:	103ee83a 	callr	r2
 8003d04:	103fe61e 	bne	r2,zero,8003ca0 <__alt_data_end+0xfc003ca0>
 8003d08:	8721883a 	add	r16,r16,fp
 8003d0c:	df000a17 	ldw	fp,40(sp)
 8003d10:	00001006 	br	8003d54 <___vfprintf_internal_r+0x524>
 8003d14:	05c00044 	movi	r23,1
 8003d18:	04ffffc4 	movi	r19,-1
 8003d1c:	d8000e15 	stw	zero,56(sp)
 8003d20:	05400284 	movi	r21,10
 8003d24:	9825883a 	mov	r18,r19
 8003d28:	d8000c15 	stw	zero,48(sp)
 8003d2c:	d8000b15 	stw	zero,44(sp)
 8003d30:	b82d883a 	mov	r22,r23
 8003d34:	00000806 	br	8003d58 <___vfprintf_internal_r+0x528>
 8003d38:	dd800b15 	stw	r22,44(sp)
 8003d3c:	05800084 	movi	r22,2
 8003d40:	00000506 	br	8003d58 <___vfprintf_internal_r+0x528>
 8003d44:	00c00044 	movi	r3,1
 8003d48:	d8c00c15 	stw	r3,48(sp)
 8003d4c:	058000c4 	movi	r22,3
 8003d50:	00000106 	br	8003d58 <___vfprintf_internal_r+0x528>
 8003d54:	002d883a 	mov	r22,zero
 8003d58:	d8c00f17 	ldw	r3,60(sp)
 8003d5c:	18c00044 	addi	r3,r3,1
 8003d60:	d8c00f15 	stw	r3,60(sp)
 8003d64:	003ecc06 	br	8003898 <__alt_data_end+0xfc003898>
 8003d68:	8005883a 	mov	r2,r16
 8003d6c:	dfc01c17 	ldw	ra,112(sp)
 8003d70:	df001b17 	ldw	fp,108(sp)
 8003d74:	ddc01a17 	ldw	r23,104(sp)
 8003d78:	dd801917 	ldw	r22,100(sp)
 8003d7c:	dd401817 	ldw	r21,96(sp)
 8003d80:	dd001717 	ldw	r20,92(sp)
 8003d84:	dcc01617 	ldw	r19,88(sp)
 8003d88:	dc801517 	ldw	r18,84(sp)
 8003d8c:	dc401417 	ldw	r17,80(sp)
 8003d90:	dc001317 	ldw	r16,76(sp)
 8003d94:	dec01d04 	addi	sp,sp,116
 8003d98:	f800283a 	ret

08003d9c <__vfprintf_internal>:
 8003d9c:	2007883a 	mov	r3,r4
 8003da0:	01020034 	movhi	r4,2048
 8003da4:	211f0504 	addi	r4,r4,31764
 8003da8:	21000017 	ldw	r4,0(r4)
 8003dac:	2805883a 	mov	r2,r5
 8003db0:	300f883a 	mov	r7,r6
 8003db4:	180b883a 	mov	r5,r3
 8003db8:	100d883a 	mov	r6,r2
 8003dbc:	80038301 	jmpi	8003830 <___vfprintf_internal_r>

08003dc0 <__call_exitprocs>:
 8003dc0:	00820034 	movhi	r2,2048
 8003dc4:	109f0404 	addi	r2,r2,31760
 8003dc8:	10800017 	ldw	r2,0(r2)
 8003dcc:	defff304 	addi	sp,sp,-52
 8003dd0:	ddc00a15 	stw	r23,40(sp)
 8003dd4:	d8800015 	stw	r2,0(sp)
 8003dd8:	05c20034 	movhi	r23,2048
 8003ddc:	10800c04 	addi	r2,r2,48
 8003de0:	dc800515 	stw	r18,20(sp)
 8003de4:	dfc00c15 	stw	ra,48(sp)
 8003de8:	df000b15 	stw	fp,44(sp)
 8003dec:	dd800915 	stw	r22,36(sp)
 8003df0:	dd400815 	stw	r21,32(sp)
 8003df4:	dd000715 	stw	r20,28(sp)
 8003df8:	dcc00615 	stw	r19,24(sp)
 8003dfc:	dc400415 	stw	r17,16(sp)
 8003e00:	dc000315 	stw	r16,12(sp)
 8003e04:	d9000115 	stw	r4,4(sp)
 8003e08:	2825883a 	mov	r18,r5
 8003e0c:	d8800215 	stw	r2,8(sp)
 8003e10:	bdcb1904 	addi	r23,r23,11364
 8003e14:	d8800017 	ldw	r2,0(sp)
 8003e18:	dc400217 	ldw	r17,8(sp)
 8003e1c:	14c00c17 	ldw	r19,48(r2)
 8003e20:	98004226 	beq	r19,zero,8003f2c <__call_exitprocs+0x16c>
 8003e24:	9c000117 	ldw	r16,4(r19)
 8003e28:	00900034 	movhi	r2,16384
 8003e2c:	10bfffc4 	addi	r2,r2,-1
 8003e30:	9d002217 	ldw	r20,136(r19)
 8003e34:	857fffc4 	addi	r21,r16,-1
 8003e38:	80a1883a 	add	r16,r16,r2
 8003e3c:	8421883a 	add	r16,r16,r16
 8003e40:	8421883a 	add	r16,r16,r16
 8003e44:	a42d883a 	add	r22,r20,r16
 8003e48:	84000204 	addi	r16,r16,8
 8003e4c:	9c21883a 	add	r16,r19,r16
 8003e50:	a8002616 	blt	r21,zero,8003eec <__call_exitprocs+0x12c>
 8003e54:	90000326 	beq	r18,zero,8003e64 <__call_exitprocs+0xa4>
 8003e58:	a0002026 	beq	r20,zero,8003edc <__call_exitprocs+0x11c>
 8003e5c:	b1002017 	ldw	r4,128(r22)
 8003e60:	24801e1e 	bne	r4,r18,8003edc <__call_exitprocs+0x11c>
 8003e64:	99000117 	ldw	r4,4(r19)
 8003e68:	82000017 	ldw	r8,0(r16)
 8003e6c:	213fffc4 	addi	r4,r4,-1
 8003e70:	a900021e 	bne	r21,r4,8003e7c <__call_exitprocs+0xbc>
 8003e74:	9d400115 	stw	r21,4(r19)
 8003e78:	00000106 	br	8003e80 <__call_exitprocs+0xc0>
 8003e7c:	80000015 	stw	zero,0(r16)
 8003e80:	40001626 	beq	r8,zero,8003edc <__call_exitprocs+0x11c>
 8003e84:	9f000117 	ldw	fp,4(r19)
 8003e88:	a0000526 	beq	r20,zero,8003ea0 <__call_exitprocs+0xe0>
 8003e8c:	00800044 	movi	r2,1
 8003e90:	1552983a 	sll	r9,r2,r21
 8003e94:	a1404017 	ldw	r5,256(r20)
 8003e98:	494a703a 	and	r5,r9,r5
 8003e9c:	2800021e 	bne	r5,zero,8003ea8 <__call_exitprocs+0xe8>
 8003ea0:	403ee83a 	callr	r8
 8003ea4:	00000906 	br	8003ecc <__call_exitprocs+0x10c>
 8003ea8:	a1004117 	ldw	r4,260(r20)
 8003eac:	4908703a 	and	r4,r9,r4
 8003eb0:	2000041e 	bne	r4,zero,8003ec4 <__call_exitprocs+0x104>
 8003eb4:	d9000117 	ldw	r4,4(sp)
 8003eb8:	b1400017 	ldw	r5,0(r22)
 8003ebc:	403ee83a 	callr	r8
 8003ec0:	00000206 	br	8003ecc <__call_exitprocs+0x10c>
 8003ec4:	b1000017 	ldw	r4,0(r22)
 8003ec8:	403ee83a 	callr	r8
 8003ecc:	99000117 	ldw	r4,4(r19)
 8003ed0:	e13fd01e 	bne	fp,r4,8003e14 <__alt_data_end+0xfc003e14>
 8003ed4:	89000017 	ldw	r4,0(r17)
 8003ed8:	24ffce1e 	bne	r4,r19,8003e14 <__alt_data_end+0xfc003e14>
 8003edc:	ad7fffc4 	addi	r21,r21,-1
 8003ee0:	b5bfff04 	addi	r22,r22,-4
 8003ee4:	843fff04 	addi	r16,r16,-4
 8003ee8:	003fd906 	br	8003e50 <__alt_data_end+0xfc003e50>
 8003eec:	b8000f26 	beq	r23,zero,8003f2c <__call_exitprocs+0x16c>
 8003ef0:	99000117 	ldw	r4,4(r19)
 8003ef4:	20000a1e 	bne	r4,zero,8003f20 <__call_exitprocs+0x160>
 8003ef8:	99000017 	ldw	r4,0(r19)
 8003efc:	20000826 	beq	r4,zero,8003f20 <__call_exitprocs+0x160>
 8003f00:	89000015 	stw	r4,0(r17)
 8003f04:	a0000226 	beq	r20,zero,8003f10 <__call_exitprocs+0x150>
 8003f08:	a009883a 	mov	r4,r20
 8003f0c:	8002c640 	call	8002c64 <free>
 8003f10:	9809883a 	mov	r4,r19
 8003f14:	8002c640 	call	8002c64 <free>
 8003f18:	8cc00017 	ldw	r19,0(r17)
 8003f1c:	003fc006 	br	8003e20 <__alt_data_end+0xfc003e20>
 8003f20:	9823883a 	mov	r17,r19
 8003f24:	9cc00017 	ldw	r19,0(r19)
 8003f28:	003fbd06 	br	8003e20 <__alt_data_end+0xfc003e20>
 8003f2c:	dfc00c17 	ldw	ra,48(sp)
 8003f30:	df000b17 	ldw	fp,44(sp)
 8003f34:	ddc00a17 	ldw	r23,40(sp)
 8003f38:	dd800917 	ldw	r22,36(sp)
 8003f3c:	dd400817 	ldw	r21,32(sp)
 8003f40:	dd000717 	ldw	r20,28(sp)
 8003f44:	dcc00617 	ldw	r19,24(sp)
 8003f48:	dc800517 	ldw	r18,20(sp)
 8003f4c:	dc400417 	ldw	r17,16(sp)
 8003f50:	dc000317 	ldw	r16,12(sp)
 8003f54:	dec00d04 	addi	sp,sp,52
 8003f58:	f800283a 	ret

08003f5c <_malloc_trim_r>:
 8003f5c:	defffb04 	addi	sp,sp,-20
 8003f60:	dcc00315 	stw	r19,12(sp)
 8003f64:	04c20034 	movhi	r19,2048
 8003f68:	dc800215 	stw	r18,8(sp)
 8003f6c:	dc400115 	stw	r17,4(sp)
 8003f70:	dc000015 	stw	r16,0(sp)
 8003f74:	dfc00415 	stw	ra,16(sp)
 8003f78:	2821883a 	mov	r16,r5
 8003f7c:	2025883a 	mov	r18,r4
 8003f80:	9cdcf404 	addi	r19,r19,29648
 8003f84:	800499c0 	call	800499c <__malloc_lock>
 8003f88:	98800217 	ldw	r2,8(r19)
 8003f8c:	14400117 	ldw	r17,4(r2)
 8003f90:	00bfff04 	movi	r2,-4
 8003f94:	88a2703a 	and	r17,r17,r2
 8003f98:	8c21c83a 	sub	r16,r17,r16
 8003f9c:	84001bc4 	addi	r16,r16,111
 8003fa0:	8020d1fa 	srli	r16,r16,7
 8003fa4:	00801fc4 	movi	r2,127
 8003fa8:	843fffc4 	addi	r16,r16,-1
 8003fac:	802091fa 	slli	r16,r16,7
 8003fb0:	14000416 	blt	r2,r16,8003fc4 <_malloc_trim_r+0x68>
 8003fb4:	9009883a 	mov	r4,r18
 8003fb8:	80049bc0 	call	80049bc <__malloc_unlock>
 8003fbc:	0005883a 	mov	r2,zero
 8003fc0:	00002806 	br	8004064 <_malloc_trim_r+0x108>
 8003fc4:	9009883a 	mov	r4,r18
 8003fc8:	000b883a 	mov	r5,zero
 8003fcc:	80034380 	call	8003438 <_sbrk_r>
 8003fd0:	98c00217 	ldw	r3,8(r19)
 8003fd4:	1c47883a 	add	r3,r3,r17
 8003fd8:	10fff61e 	bne	r2,r3,8003fb4 <__alt_data_end+0xfc003fb4>
 8003fdc:	9009883a 	mov	r4,r18
 8003fe0:	040bc83a 	sub	r5,zero,r16
 8003fe4:	80034380 	call	8003438 <_sbrk_r>
 8003fe8:	00ffffc4 	movi	r3,-1
 8003fec:	10c0111e 	bne	r2,r3,8004034 <_malloc_trim_r+0xd8>
 8003ff0:	9009883a 	mov	r4,r18
 8003ff4:	000b883a 	mov	r5,zero
 8003ff8:	80034380 	call	8003438 <_sbrk_r>
 8003ffc:	99000217 	ldw	r4,8(r19)
 8004000:	014003c4 	movi	r5,15
 8004004:	1107c83a 	sub	r3,r2,r4
 8004008:	28ffea0e 	bge	r5,r3,8003fb4 <__alt_data_end+0xfc003fb4>
 800400c:	01420034 	movhi	r5,2048
 8004010:	295f0204 	addi	r5,r5,31752
 8004014:	29400017 	ldw	r5,0(r5)
 8004018:	18c00054 	ori	r3,r3,1
 800401c:	20c00115 	stw	r3,4(r4)
 8004020:	1145c83a 	sub	r2,r2,r5
 8004024:	01420074 	movhi	r5,2049
 8004028:	29637f04 	addi	r5,r5,-29188
 800402c:	28800015 	stw	r2,0(r5)
 8004030:	003fe006 	br	8003fb4 <__alt_data_end+0xfc003fb4>
 8004034:	98800217 	ldw	r2,8(r19)
 8004038:	8c23c83a 	sub	r17,r17,r16
 800403c:	00c20074 	movhi	r3,2049
 8004040:	18e37f04 	addi	r3,r3,-29188
 8004044:	8c400054 	ori	r17,r17,1
 8004048:	14400115 	stw	r17,4(r2)
 800404c:	18800017 	ldw	r2,0(r3)
 8004050:	9009883a 	mov	r4,r18
 8004054:	1421c83a 	sub	r16,r2,r16
 8004058:	1c000015 	stw	r16,0(r3)
 800405c:	80049bc0 	call	80049bc <__malloc_unlock>
 8004060:	00800044 	movi	r2,1
 8004064:	dfc00417 	ldw	ra,16(sp)
 8004068:	dcc00317 	ldw	r19,12(sp)
 800406c:	dc800217 	ldw	r18,8(sp)
 8004070:	dc400117 	ldw	r17,4(sp)
 8004074:	dc000017 	ldw	r16,0(sp)
 8004078:	dec00504 	addi	sp,sp,20
 800407c:	f800283a 	ret

08004080 <_free_r>:
 8004080:	2800a026 	beq	r5,zero,8004304 <_free_r+0x284>
 8004084:	defffd04 	addi	sp,sp,-12
 8004088:	dc400115 	stw	r17,4(sp)
 800408c:	dc000015 	stw	r16,0(sp)
 8004090:	2823883a 	mov	r17,r5
 8004094:	2021883a 	mov	r16,r4
 8004098:	dfc00215 	stw	ra,8(sp)
 800409c:	800499c0 	call	800499c <__malloc_lock>
 80040a0:	8a3fff17 	ldw	r8,-4(r17)
 80040a4:	00bfff84 	movi	r2,-2
 80040a8:	893ffe04 	addi	r4,r17,-8
 80040ac:	4084703a 	and	r2,r8,r2
 80040b0:	208d883a 	add	r6,r4,r2
 80040b4:	31400117 	ldw	r5,4(r6)
 80040b8:	00ffff04 	movi	r3,-4
 80040bc:	28c6703a 	and	r3,r5,r3
 80040c0:	01420034 	movhi	r5,2048
 80040c4:	295cf404 	addi	r5,r5,29648
 80040c8:	2a400217 	ldw	r9,8(r5)
 80040cc:	280f883a 	mov	r7,r5
 80040d0:	4140004c 	andi	r5,r8,1
 80040d4:	32401b1e 	bne	r6,r9,8004144 <_free_r+0xc4>
 80040d8:	1885883a 	add	r2,r3,r2
 80040dc:	2800071e 	bne	r5,zero,80040fc <_free_r+0x7c>
 80040e0:	88fffe17 	ldw	r3,-8(r17)
 80040e4:	20c9c83a 	sub	r4,r4,r3
 80040e8:	21400217 	ldw	r5,8(r4)
 80040ec:	10c5883a 	add	r2,r2,r3
 80040f0:	20c00317 	ldw	r3,12(r4)
 80040f4:	28c00315 	stw	r3,12(r5)
 80040f8:	19400215 	stw	r5,8(r3)
 80040fc:	10c00054 	ori	r3,r2,1
 8004100:	20c00115 	stw	r3,4(r4)
 8004104:	00c20034 	movhi	r3,2048
 8004108:	18df0304 	addi	r3,r3,31756
 800410c:	18c00017 	ldw	r3,0(r3)
 8004110:	39000215 	stw	r4,8(r7)
 8004114:	10c00536 	bltu	r2,r3,800412c <_free_r+0xac>
 8004118:	00820074 	movhi	r2,2049
 800411c:	10a13804 	addi	r2,r2,-31520
 8004120:	11400017 	ldw	r5,0(r2)
 8004124:	8009883a 	mov	r4,r16
 8004128:	8003f5c0 	call	8003f5c <_malloc_trim_r>
 800412c:	8009883a 	mov	r4,r16
 8004130:	dfc00217 	ldw	ra,8(sp)
 8004134:	dc400117 	ldw	r17,4(sp)
 8004138:	dc000017 	ldw	r16,0(sp)
 800413c:	dec00304 	addi	sp,sp,12
 8004140:	80049bc1 	jmpi	80049bc <__malloc_unlock>
 8004144:	30c00115 	stw	r3,4(r6)
 8004148:	2800091e 	bne	r5,zero,8004170 <_free_r+0xf0>
 800414c:	897ffe17 	ldw	r5,-8(r17)
 8004150:	3a000204 	addi	r8,r7,8
 8004154:	2149c83a 	sub	r4,r4,r5
 8004158:	1145883a 	add	r2,r2,r5
 800415c:	21400217 	ldw	r5,8(r4)
 8004160:	2a000526 	beq	r5,r8,8004178 <_free_r+0xf8>
 8004164:	22000317 	ldw	r8,12(r4)
 8004168:	2a000315 	stw	r8,12(r5)
 800416c:	41400215 	stw	r5,8(r8)
 8004170:	000b883a 	mov	r5,zero
 8004174:	00000106 	br	800417c <_free_r+0xfc>
 8004178:	01400044 	movi	r5,1
 800417c:	30d1883a 	add	r8,r6,r3
 8004180:	42000117 	ldw	r8,4(r8)
 8004184:	4200004c 	andi	r8,r8,1
 8004188:	4000101e 	bne	r8,zero,80041cc <_free_r+0x14c>
 800418c:	10c5883a 	add	r2,r2,r3
 8004190:	28000a1e 	bne	r5,zero,80041bc <_free_r+0x13c>
 8004194:	30c00217 	ldw	r3,8(r6)
 8004198:	02020034 	movhi	r8,2048
 800419c:	421cf604 	addi	r8,r8,29656
 80041a0:	1a00061e 	bne	r3,r8,80041bc <_free_r+0x13c>
 80041a4:	39000515 	stw	r4,20(r7)
 80041a8:	39000415 	stw	r4,16(r7)
 80041ac:	20c00315 	stw	r3,12(r4)
 80041b0:	20c00215 	stw	r3,8(r4)
 80041b4:	01400044 	movi	r5,1
 80041b8:	00000406 	br	80041cc <_free_r+0x14c>
 80041bc:	30c00317 	ldw	r3,12(r6)
 80041c0:	31800217 	ldw	r6,8(r6)
 80041c4:	30c00315 	stw	r3,12(r6)
 80041c8:	19800215 	stw	r6,8(r3)
 80041cc:	10c00054 	ori	r3,r2,1
 80041d0:	20c00115 	stw	r3,4(r4)
 80041d4:	2087883a 	add	r3,r4,r2
 80041d8:	18800015 	stw	r2,0(r3)
 80041dc:	283fd31e 	bne	r5,zero,800412c <__alt_data_end+0xfc00412c>
 80041e0:	00c07fc4 	movi	r3,511
 80041e4:	18801036 	bltu	r3,r2,8004228 <_free_r+0x1a8>
 80041e8:	1006d0fa 	srli	r3,r2,3
 80041ec:	00800044 	movi	r2,1
 80041f0:	180bd0ba 	srai	r5,r3,2
 80041f4:	18c7883a 	add	r3,r3,r3
 80041f8:	18c7883a 	add	r3,r3,r3
 80041fc:	114a983a 	sll	r5,r2,r5
 8004200:	38800117 	ldw	r2,4(r7)
 8004204:	18c7883a 	add	r3,r3,r3
 8004208:	2884b03a 	or	r2,r5,r2
 800420c:	38800115 	stw	r2,4(r7)
 8004210:	38c5883a 	add	r2,r7,r3
 8004214:	10c00217 	ldw	r3,8(r2)
 8004218:	20800315 	stw	r2,12(r4)
 800421c:	20c00215 	stw	r3,8(r4)
 8004220:	11000215 	stw	r4,8(r2)
 8004224:	00003506 	br	80042fc <_free_r+0x27c>
 8004228:	1006d27a 	srli	r3,r2,9
 800422c:	01400104 	movi	r5,4
 8004230:	28c00336 	bltu	r5,r3,8004240 <_free_r+0x1c0>
 8004234:	1006d1ba 	srli	r3,r2,6
 8004238:	18c00e04 	addi	r3,r3,56
 800423c:	00001406 	br	8004290 <_free_r+0x210>
 8004240:	01400504 	movi	r5,20
 8004244:	28c00236 	bltu	r5,r3,8004250 <_free_r+0x1d0>
 8004248:	18c016c4 	addi	r3,r3,91
 800424c:	00001006 	br	8004290 <_free_r+0x210>
 8004250:	01401504 	movi	r5,84
 8004254:	28c00336 	bltu	r5,r3,8004264 <_free_r+0x1e4>
 8004258:	1006d33a 	srli	r3,r2,12
 800425c:	18c01b84 	addi	r3,r3,110
 8004260:	00000b06 	br	8004290 <_free_r+0x210>
 8004264:	01405504 	movi	r5,340
 8004268:	28c00336 	bltu	r5,r3,8004278 <_free_r+0x1f8>
 800426c:	1006d3fa 	srli	r3,r2,15
 8004270:	18c01dc4 	addi	r3,r3,119
 8004274:	00000606 	br	8004290 <_free_r+0x210>
 8004278:	01415504 	movi	r5,1364
 800427c:	28c00336 	bltu	r5,r3,800428c <_free_r+0x20c>
 8004280:	1006d4ba 	srli	r3,r2,18
 8004284:	18c01f04 	addi	r3,r3,124
 8004288:	00000106 	br	8004290 <_free_r+0x210>
 800428c:	00c01f84 	movi	r3,126
 8004290:	18cd883a 	add	r6,r3,r3
 8004294:	318d883a 	add	r6,r6,r6
 8004298:	318d883a 	add	r6,r6,r6
 800429c:	398b883a 	add	r5,r7,r6
 80042a0:	29800217 	ldw	r6,8(r5)
 80042a4:	02020034 	movhi	r8,2048
 80042a8:	421cf404 	addi	r8,r8,29648
 80042ac:	3140081e 	bne	r6,r5,80042d0 <_free_r+0x250>
 80042b0:	1807d0ba 	srai	r3,r3,2
 80042b4:	00800044 	movi	r2,1
 80042b8:	10c6983a 	sll	r3,r2,r3
 80042bc:	40800117 	ldw	r2,4(r8)
 80042c0:	1886b03a 	or	r3,r3,r2
 80042c4:	40c00115 	stw	r3,4(r8)
 80042c8:	3007883a 	mov	r3,r6
 80042cc:	00000806 	br	80042f0 <_free_r+0x270>
 80042d0:	3007883a 	mov	r3,r6
 80042d4:	01ffff04 	movi	r7,-4
 80042d8:	19800117 	ldw	r6,4(r3)
 80042dc:	31cc703a 	and	r6,r6,r7
 80042e0:	1180022e 	bgeu	r2,r6,80042ec <_free_r+0x26c>
 80042e4:	18c00217 	ldw	r3,8(r3)
 80042e8:	197ffb1e 	bne	r3,r5,80042d8 <__alt_data_end+0xfc0042d8>
 80042ec:	19800317 	ldw	r6,12(r3)
 80042f0:	21800315 	stw	r6,12(r4)
 80042f4:	20c00215 	stw	r3,8(r4)
 80042f8:	31000215 	stw	r4,8(r6)
 80042fc:	19000315 	stw	r4,12(r3)
 8004300:	003f8a06 	br	800412c <__alt_data_end+0xfc00412c>
 8004304:	f800283a 	ret

08004308 <__sfvwrite_small_dev>:
 8004308:	2880000b 	ldhu	r2,0(r5)
 800430c:	defffa04 	addi	sp,sp,-24
 8004310:	dc000015 	stw	r16,0(sp)
 8004314:	dfc00515 	stw	ra,20(sp)
 8004318:	dd000415 	stw	r20,16(sp)
 800431c:	dcc00315 	stw	r19,12(sp)
 8004320:	dc800215 	stw	r18,8(sp)
 8004324:	dc400115 	stw	r17,4(sp)
 8004328:	1080020c 	andi	r2,r2,8
 800432c:	2821883a 	mov	r16,r5
 8004330:	10001726 	beq	r2,zero,8004390 <__sfvwrite_small_dev+0x88>
 8004334:	2880008f 	ldh	r2,2(r5)
 8004338:	10001216 	blt	r2,zero,8004384 <__sfvwrite_small_dev+0x7c>
 800433c:	2027883a 	mov	r19,r4
 8004340:	3025883a 	mov	r18,r6
 8004344:	3823883a 	mov	r17,r7
 8004348:	05010004 	movi	r20,1024
 800434c:	04400b0e 	bge	zero,r17,800437c <__sfvwrite_small_dev+0x74>
 8004350:	8140008f 	ldh	r5,2(r16)
 8004354:	880f883a 	mov	r7,r17
 8004358:	a440010e 	bge	r20,r17,8004360 <__sfvwrite_small_dev+0x58>
 800435c:	01c10004 	movi	r7,1024
 8004360:	9809883a 	mov	r4,r19
 8004364:	900d883a 	mov	r6,r18
 8004368:	80043b40 	call	80043b4 <_write_r>
 800436c:	0080050e 	bge	zero,r2,8004384 <__sfvwrite_small_dev+0x7c>
 8004370:	88a3c83a 	sub	r17,r17,r2
 8004374:	90a5883a 	add	r18,r18,r2
 8004378:	003ff406 	br	800434c <__alt_data_end+0xfc00434c>
 800437c:	0005883a 	mov	r2,zero
 8004380:	00000406 	br	8004394 <__sfvwrite_small_dev+0x8c>
 8004384:	8080000b 	ldhu	r2,0(r16)
 8004388:	10801014 	ori	r2,r2,64
 800438c:	8080000d 	sth	r2,0(r16)
 8004390:	00bfffc4 	movi	r2,-1
 8004394:	dfc00517 	ldw	ra,20(sp)
 8004398:	dd000417 	ldw	r20,16(sp)
 800439c:	dcc00317 	ldw	r19,12(sp)
 80043a0:	dc800217 	ldw	r18,8(sp)
 80043a4:	dc400117 	ldw	r17,4(sp)
 80043a8:	dc000017 	ldw	r16,0(sp)
 80043ac:	dec00604 	addi	sp,sp,24
 80043b0:	f800283a 	ret

080043b4 <_write_r>:
 80043b4:	defffd04 	addi	sp,sp,-12
 80043b8:	dc000015 	stw	r16,0(sp)
 80043bc:	04020074 	movhi	r16,2049
 80043c0:	dc400115 	stw	r17,4(sp)
 80043c4:	84213904 	addi	r16,r16,-31516
 80043c8:	2023883a 	mov	r17,r4
 80043cc:	2809883a 	mov	r4,r5
 80043d0:	300b883a 	mov	r5,r6
 80043d4:	380d883a 	mov	r6,r7
 80043d8:	dfc00215 	stw	ra,8(sp)
 80043dc:	80000015 	stw	zero,0(r16)
 80043e0:	8004d480 	call	8004d48 <write>
 80043e4:	00ffffc4 	movi	r3,-1
 80043e8:	10c0031e 	bne	r2,r3,80043f8 <_write_r+0x44>
 80043ec:	80c00017 	ldw	r3,0(r16)
 80043f0:	18000126 	beq	r3,zero,80043f8 <_write_r+0x44>
 80043f4:	88c00015 	stw	r3,0(r17)
 80043f8:	dfc00217 	ldw	ra,8(sp)
 80043fc:	dc400117 	ldw	r17,4(sp)
 8004400:	dc000017 	ldw	r16,0(sp)
 8004404:	dec00304 	addi	sp,sp,12
 8004408:	f800283a 	ret

0800440c <udivmodsi4>:
 800440c:	2900182e 	bgeu	r5,r4,8004470 <udivmodsi4+0x64>
 8004410:	28001716 	blt	r5,zero,8004470 <udivmodsi4+0x64>
 8004414:	00800804 	movi	r2,32
 8004418:	00c00044 	movi	r3,1
 800441c:	00000206 	br	8004428 <udivmodsi4+0x1c>
 8004420:	10001126 	beq	r2,zero,8004468 <udivmodsi4+0x5c>
 8004424:	28000516 	blt	r5,zero,800443c <udivmodsi4+0x30>
 8004428:	294b883a 	add	r5,r5,r5
 800442c:	10bfffc4 	addi	r2,r2,-1
 8004430:	18c7883a 	add	r3,r3,r3
 8004434:	293ffa36 	bltu	r5,r4,8004420 <__alt_data_end+0xfc004420>
 8004438:	18000b26 	beq	r3,zero,8004468 <udivmodsi4+0x5c>
 800443c:	0005883a 	mov	r2,zero
 8004440:	21400236 	bltu	r4,r5,800444c <udivmodsi4+0x40>
 8004444:	2149c83a 	sub	r4,r4,r5
 8004448:	10c4b03a 	or	r2,r2,r3
 800444c:	1806d07a 	srli	r3,r3,1
 8004450:	280ad07a 	srli	r5,r5,1
 8004454:	183ffa1e 	bne	r3,zero,8004440 <__alt_data_end+0xfc004440>
 8004458:	3000011e 	bne	r6,zero,8004460 <udivmodsi4+0x54>
 800445c:	f800283a 	ret
 8004460:	2005883a 	mov	r2,r4
 8004464:	f800283a 	ret
 8004468:	0005883a 	mov	r2,zero
 800446c:	003ffa06 	br	8004458 <__alt_data_end+0xfc004458>
 8004470:	00c00044 	movi	r3,1
 8004474:	003ff106 	br	800443c <__alt_data_end+0xfc00443c>

08004478 <__divsi3>:
 8004478:	defffe04 	addi	sp,sp,-8
 800447c:	dfc00115 	stw	ra,4(sp)
 8004480:	dc000015 	stw	r16,0(sp)
 8004484:	20000b16 	blt	r4,zero,80044b4 <__divsi3+0x3c>
 8004488:	0021883a 	mov	r16,zero
 800448c:	28000c16 	blt	r5,zero,80044c0 <__divsi3+0x48>
 8004490:	000d883a 	mov	r6,zero
 8004494:	800440c0 	call	800440c <udivmodsi4>
 8004498:	0407c83a 	sub	r3,zero,r16
 800449c:	1884f03a 	xor	r2,r3,r2
 80044a0:	1405883a 	add	r2,r2,r16
 80044a4:	dfc00117 	ldw	ra,4(sp)
 80044a8:	dc000017 	ldw	r16,0(sp)
 80044ac:	dec00204 	addi	sp,sp,8
 80044b0:	f800283a 	ret
 80044b4:	0109c83a 	sub	r4,zero,r4
 80044b8:	04000044 	movi	r16,1
 80044bc:	283ff40e 	bge	r5,zero,8004490 <__alt_data_end+0xfc004490>
 80044c0:	014bc83a 	sub	r5,zero,r5
 80044c4:	8400005c 	xori	r16,r16,1
 80044c8:	003ff106 	br	8004490 <__alt_data_end+0xfc004490>

080044cc <__modsi3>:
 80044cc:	defffd04 	addi	sp,sp,-12
 80044d0:	dfc00215 	stw	ra,8(sp)
 80044d4:	dc400115 	stw	r17,4(sp)
 80044d8:	dc000015 	stw	r16,0(sp)
 80044dc:	20000c16 	blt	r4,zero,8004510 <__modsi3+0x44>
 80044e0:	0023883a 	mov	r17,zero
 80044e4:	0021883a 	mov	r16,zero
 80044e8:	28000d16 	blt	r5,zero,8004520 <__modsi3+0x54>
 80044ec:	01800044 	movi	r6,1
 80044f0:	800440c0 	call	800440c <udivmodsi4>
 80044f4:	1404f03a 	xor	r2,r2,r16
 80044f8:	8885883a 	add	r2,r17,r2
 80044fc:	dfc00217 	ldw	ra,8(sp)
 8004500:	dc400117 	ldw	r17,4(sp)
 8004504:	dc000017 	ldw	r16,0(sp)
 8004508:	dec00304 	addi	sp,sp,12
 800450c:	f800283a 	ret
 8004510:	0109c83a 	sub	r4,zero,r4
 8004514:	04400044 	movi	r17,1
 8004518:	043fffc4 	movi	r16,-1
 800451c:	283ff30e 	bge	r5,zero,80044ec <__alt_data_end+0xfc0044ec>
 8004520:	014bc83a 	sub	r5,zero,r5
 8004524:	003ff106 	br	80044ec <__alt_data_end+0xfc0044ec>

08004528 <__udivsi3>:
 8004528:	000d883a 	mov	r6,zero
 800452c:	800440c1 	jmpi	800440c <udivmodsi4>

08004530 <__umodsi3>:
 8004530:	01800044 	movi	r6,1
 8004534:	800440c1 	jmpi	800440c <udivmodsi4>

08004538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004538:	defffe04 	addi	sp,sp,-8
 800453c:	dfc00115 	stw	ra,4(sp)
 8004540:	df000015 	stw	fp,0(sp)
 8004544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004548:	00820034 	movhi	r2,2048
 800454c:	109f0804 	addi	r2,r2,31776
 8004550:	10800017 	ldw	r2,0(r2)
 8004554:	10000526 	beq	r2,zero,800456c <alt_get_errno+0x34>
 8004558:	00820034 	movhi	r2,2048
 800455c:	109f0804 	addi	r2,r2,31776
 8004560:	10800017 	ldw	r2,0(r2)
 8004564:	103ee83a 	callr	r2
 8004568:	00000206 	br	8004574 <alt_get_errno+0x3c>
 800456c:	00820074 	movhi	r2,2049
 8004570:	10a13904 	addi	r2,r2,-31516
}
 8004574:	e037883a 	mov	sp,fp
 8004578:	dfc00117 	ldw	ra,4(sp)
 800457c:	df000017 	ldw	fp,0(sp)
 8004580:	dec00204 	addi	sp,sp,8
 8004584:	f800283a 	ret

08004588 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 8004588:	defffc04 	addi	sp,sp,-16
 800458c:	dfc00315 	stw	ra,12(sp)
 8004590:	df000215 	stw	fp,8(sp)
 8004594:	df000204 	addi	fp,sp,8
 8004598:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 800459c:	e13fff17 	ldw	r4,-4(fp)
 80045a0:	d1601604 	addi	r5,gp,-32680
 80045a4:	80046100 	call	8004610 <alt_find_dev>
 80045a8:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 80045ac:	e0bffe17 	ldw	r2,-8(fp)
 80045b0:	1000041e 	bne	r2,zero,80045c4 <alt_dma_txchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 80045b4:	80045380 	call	8004538 <alt_get_errno>
 80045b8:	1007883a 	mov	r3,r2
 80045bc:	008004c4 	movi	r2,19
 80045c0:	18800015 	stw	r2,0(r3)
  }

  return dev;
 80045c4:	e0bffe17 	ldw	r2,-8(fp)
}
 80045c8:	e037883a 	mov	sp,fp
 80045cc:	dfc00117 	ldw	ra,4(sp)
 80045d0:	df000017 	ldw	fp,0(sp)
 80045d4:	dec00204 	addi	sp,sp,8
 80045d8:	f800283a 	ret

080045dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80045dc:	defffd04 	addi	sp,sp,-12
 80045e0:	df000215 	stw	fp,8(sp)
 80045e4:	df000204 	addi	fp,sp,8
 80045e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80045ec:	0001883a 	nop
 80045f0:	e0bfff17 	ldw	r2,-4(fp)
 80045f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80045f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80045fc:	10000226 	beq	r2,zero,8004608 <_exit+0x2c>
    ALT_SIM_FAIL();
 8004600:	002af070 	cmpltui	zero,zero,43969
 8004604:	00000106 	br	800460c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8004608:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800460c:	003fff06 	br	800460c <__alt_data_end+0xfc00460c>

08004610 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004610:	defffa04 	addi	sp,sp,-24
 8004614:	dfc00515 	stw	ra,20(sp)
 8004618:	df000415 	stw	fp,16(sp)
 800461c:	df000404 	addi	fp,sp,16
 8004620:	e13ffe15 	stw	r4,-8(fp)
 8004624:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004628:	e0bfff17 	ldw	r2,-4(fp)
 800462c:	10800017 	ldw	r2,0(r2)
 8004630:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004634:	e13ffe17 	ldw	r4,-8(fp)
 8004638:	80037a80 	call	80037a8 <strlen>
 800463c:	10800044 	addi	r2,r2,1
 8004640:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004644:	00000d06 	br	800467c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004648:	e0bffc17 	ldw	r2,-16(fp)
 800464c:	10c00217 	ldw	r3,8(r2)
 8004650:	e0bffd17 	ldw	r2,-12(fp)
 8004654:	1809883a 	mov	r4,r3
 8004658:	e17ffe17 	ldw	r5,-8(fp)
 800465c:	100d883a 	mov	r6,r2
 8004660:	8006d5c0 	call	8006d5c <memcmp>
 8004664:	1000021e 	bne	r2,zero,8004670 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004668:	e0bffc17 	ldw	r2,-16(fp)
 800466c:	00000706 	br	800468c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004670:	e0bffc17 	ldw	r2,-16(fp)
 8004674:	10800017 	ldw	r2,0(r2)
 8004678:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800467c:	e0fffc17 	ldw	r3,-16(fp)
 8004680:	e0bfff17 	ldw	r2,-4(fp)
 8004684:	18bff01e 	bne	r3,r2,8004648 <__alt_data_end+0xfc004648>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004688:	0005883a 	mov	r2,zero
}
 800468c:	e037883a 	mov	sp,fp
 8004690:	dfc00117 	ldw	ra,4(sp)
 8004694:	df000017 	ldw	fp,0(sp)
 8004698:	dec00204 	addi	sp,sp,8
 800469c:	f800283a 	ret

080046a0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 80046a0:	deffff04 	addi	sp,sp,-4
 80046a4:	df000015 	stw	fp,0(sp)
 80046a8:	d839883a 	mov	fp,sp
  return 0;
 80046ac:	0005883a 	mov	r2,zero
}
 80046b0:	e037883a 	mov	sp,fp
 80046b4:	df000017 	ldw	fp,0(sp)
 80046b8:	dec00104 	addi	sp,sp,4
 80046bc:	f800283a 	ret

080046c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80046c0:	defffe04 	addi	sp,sp,-8
 80046c4:	dfc00115 	stw	ra,4(sp)
 80046c8:	df000015 	stw	fp,0(sp)
 80046cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80046d0:	00820034 	movhi	r2,2048
 80046d4:	109f0804 	addi	r2,r2,31776
 80046d8:	10800017 	ldw	r2,0(r2)
 80046dc:	10000526 	beq	r2,zero,80046f4 <alt_get_errno+0x34>
 80046e0:	00820034 	movhi	r2,2048
 80046e4:	109f0804 	addi	r2,r2,31776
 80046e8:	10800017 	ldw	r2,0(r2)
 80046ec:	103ee83a 	callr	r2
 80046f0:	00000206 	br	80046fc <alt_get_errno+0x3c>
 80046f4:	00820074 	movhi	r2,2049
 80046f8:	10a13904 	addi	r2,r2,-31516
}
 80046fc:	e037883a 	mov	sp,fp
 8004700:	dfc00117 	ldw	ra,4(sp)
 8004704:	df000017 	ldw	fp,0(sp)
 8004708:	dec00204 	addi	sp,sp,8
 800470c:	f800283a 	ret

08004710 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 8004710:	defffb04 	addi	sp,sp,-20
 8004714:	dfc00415 	stw	ra,16(sp)
 8004718:	df000315 	stw	fp,12(sp)
 800471c:	df000304 	addi	fp,sp,12
 8004720:	e13ffe15 	stw	r4,-8(fp)
 8004724:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 8004728:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 800472c:	e0bffe17 	ldw	r2,-8(fp)
 8004730:	00803116 	blt	zero,r2,80047f8 <kill+0xe8>
  {
    switch (sig)
 8004734:	e0bfff17 	ldw	r2,-4(fp)
 8004738:	10800828 	cmpgeui	r2,r2,32
 800473c:	1000291e 	bne	r2,zero,80047e4 <kill+0xd4>
 8004740:	e0bfff17 	ldw	r2,-4(fp)
 8004744:	100690ba 	slli	r3,r2,2
 8004748:	00820034 	movhi	r2,2048
 800474c:	1091d704 	addi	r2,r2,18268
 8004750:	1885883a 	add	r2,r3,r2
 8004754:	10800017 	ldw	r2,0(r2)
 8004758:	1000683a 	jmp	r2
 800475c:	080047f0 	cmpltui	zero,at,287
 8004760:	080047e4 	muli	zero,at,287
 8004764:	080047e4 	muli	zero,at,287
 8004768:	080047dc 	xori	zero,at,287
 800476c:	080047dc 	xori	zero,at,287
 8004770:	080047dc 	xori	zero,at,287
 8004774:	080047dc 	xori	zero,at,287
 8004778:	080047e4 	muli	zero,at,287
 800477c:	080047dc 	xori	zero,at,287
 8004780:	080047dc 	xori	zero,at,287
 8004784:	080047dc 	xori	zero,at,287
 8004788:	080047dc 	xori	zero,at,287
 800478c:	080047dc 	xori	zero,at,287
 8004790:	080047dc 	xori	zero,at,287
 8004794:	080047dc 	xori	zero,at,287
 8004798:	080047dc 	xori	zero,at,287
 800479c:	080047f0 	cmpltui	zero,at,287
 80047a0:	080047e4 	muli	zero,at,287
 80047a4:	080047e4 	muli	zero,at,287
 80047a8:	080047e4 	muli	zero,at,287
 80047ac:	080047f0 	cmpltui	zero,at,287
 80047b0:	080047e4 	muli	zero,at,287
 80047b4:	080047e4 	muli	zero,at,287
 80047b8:	080047dc 	xori	zero,at,287
 80047bc:	080047dc 	xori	zero,at,287
 80047c0:	080047dc 	xori	zero,at,287
 80047c4:	080047dc 	xori	zero,at,287
 80047c8:	080047dc 	xori	zero,at,287
 80047cc:	080047e4 	muli	zero,at,287
 80047d0:	080047e4 	muli	zero,at,287
 80047d4:	080047dc 	xori	zero,at,287
 80047d8:	080047dc 	xori	zero,at,287
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 80047dc:	0009883a 	mov	r4,zero
 80047e0:	80045dc0 	call	80045dc <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 80047e4:	00800584 	movi	r2,22
 80047e8:	e0bffd15 	stw	r2,-12(fp)
 80047ec:	00000606 	br	8004808 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 80047f0:	0001883a 	nop
 80047f4:	00000406 	br	8004808 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
 80047f8:	e0bffe17 	ldw	r2,-8(fp)
 80047fc:	0080020e 	bge	zero,r2,8004808 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 8004800:	008000c4 	movi	r2,3
 8004804:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
 8004808:	e0bffd17 	ldw	r2,-12(fp)
 800480c:	10000626 	beq	r2,zero,8004828 <kill+0x118>
  {
    ALT_ERRNO = status;
 8004810:	80046c00 	call	80046c0 <alt_get_errno>
 8004814:	1007883a 	mov	r3,r2
 8004818:	e0bffd17 	ldw	r2,-12(fp)
 800481c:	18800015 	stw	r2,0(r3)
    return -1;
 8004820:	00bfffc4 	movi	r2,-1
 8004824:	00000106 	br	800482c <kill+0x11c>
  }

  return 0;
 8004828:	0005883a 	mov	r2,zero
}
 800482c:	e037883a 	mov	sp,fp
 8004830:	dfc00117 	ldw	ra,4(sp)
 8004834:	df000017 	ldw	fp,0(sp)
 8004838:	dec00204 	addi	sp,sp,8
 800483c:	f800283a 	ret

08004840 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8004840:	defffc04 	addi	sp,sp,-16
 8004844:	df000315 	stw	fp,12(sp)
 8004848:	df000304 	addi	fp,sp,12
 800484c:	e13ffd15 	stw	r4,-12(fp)
 8004850:	e17ffe15 	stw	r5,-8(fp)
 8004854:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8004858:	e0fffe17 	ldw	r3,-8(fp)
 800485c:	e0bffd17 	ldw	r2,-12(fp)
 8004860:	18800c26 	beq	r3,r2,8004894 <alt_load_section+0x54>
  {
    while( to != end )
 8004864:	00000806 	br	8004888 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8004868:	e0bffe17 	ldw	r2,-8(fp)
 800486c:	10c00104 	addi	r3,r2,4
 8004870:	e0fffe15 	stw	r3,-8(fp)
 8004874:	e0fffd17 	ldw	r3,-12(fp)
 8004878:	19000104 	addi	r4,r3,4
 800487c:	e13ffd15 	stw	r4,-12(fp)
 8004880:	18c00017 	ldw	r3,0(r3)
 8004884:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8004888:	e0fffe17 	ldw	r3,-8(fp)
 800488c:	e0bfff17 	ldw	r2,-4(fp)
 8004890:	18bff51e 	bne	r3,r2,8004868 <__alt_data_end+0xfc004868>
    {
      *to++ = *from++;
    }
  }
}
 8004894:	e037883a 	mov	sp,fp
 8004898:	df000017 	ldw	fp,0(sp)
 800489c:	dec00104 	addi	sp,sp,4
 80048a0:	f800283a 	ret

080048a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80048a4:	defffe04 	addi	sp,sp,-8
 80048a8:	dfc00115 	stw	ra,4(sp)
 80048ac:	df000015 	stw	fp,0(sp)
 80048b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80048b4:	01020034 	movhi	r4,2048
 80048b8:	211f1204 	addi	r4,r4,31816
 80048bc:	01420034 	movhi	r5,2048
 80048c0:	295cf404 	addi	r5,r5,29648
 80048c4:	01820034 	movhi	r6,2048
 80048c8:	319f1204 	addi	r6,r6,31816
 80048cc:	80048400 	call	8004840 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80048d0:	01020034 	movhi	r4,2048
 80048d4:	21000804 	addi	r4,r4,32
 80048d8:	01420034 	movhi	r5,2048
 80048dc:	29400804 	addi	r5,r5,32
 80048e0:	01820034 	movhi	r6,2048
 80048e4:	31808c04 	addi	r6,r6,560
 80048e8:	80048400 	call	8004840 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80048ec:	01020034 	movhi	r4,2048
 80048f0:	211bef04 	addi	r4,r4,28604
 80048f4:	01420034 	movhi	r5,2048
 80048f8:	295bef04 	addi	r5,r5,28604
 80048fc:	01820034 	movhi	r6,2048
 8004900:	319cf404 	addi	r6,r6,29648
 8004904:	80048400 	call	8004840 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8004908:	80061c40 	call	80061c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800490c:	800645c0 	call	800645c <alt_icache_flush_all>
}
 8004910:	e037883a 	mov	sp,fp
 8004914:	dfc00117 	ldw	ra,4(sp)
 8004918:	df000017 	ldw	fp,0(sp)
 800491c:	dec00204 	addi	sp,sp,8
 8004920:	f800283a 	ret

08004924 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8004924:	defffd04 	addi	sp,sp,-12
 8004928:	dfc00215 	stw	ra,8(sp)
 800492c:	df000115 	stw	fp,4(sp)
 8004930:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8004934:	0009883a 	mov	r4,zero
 8004938:	8004e800 	call	8004e80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800493c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8004940:	8004eb40 	call	8004eb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8004944:	01020034 	movhi	r4,2048
 8004948:	211cd604 	addi	r4,r4,29528
 800494c:	01420034 	movhi	r5,2048
 8004950:	295cd604 	addi	r5,r5,29528
 8004954:	01820034 	movhi	r6,2048
 8004958:	319cd604 	addi	r6,r6,29528
 800495c:	80065580 	call	8006558 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8004960:	80063a40 	call	80063a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8004964:	01020034 	movhi	r4,2048
 8004968:	21190004 	addi	r4,r4,25600
 800496c:	8006d480 	call	8006d48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004970:	d1224a17 	ldw	r4,-30424(gp)
 8004974:	d0e24b17 	ldw	r3,-30420(gp)
 8004978:	d0a24c17 	ldw	r2,-30416(gp)
 800497c:	180b883a 	mov	r5,r3
 8004980:	100d883a 	mov	r6,r2
 8004984:	8000a0c0 	call	8000a0c <main>
 8004988:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800498c:	01000044 	movi	r4,1
 8004990:	80060ec0 	call	80060ec <close>
  exit (result);
 8004994:	e13fff17 	ldw	r4,-4(fp)
 8004998:	8002c300 	call	8002c30 <exit>

0800499c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800499c:	defffe04 	addi	sp,sp,-8
 80049a0:	df000115 	stw	fp,4(sp)
 80049a4:	df000104 	addi	fp,sp,4
 80049a8:	e13fff15 	stw	r4,-4(fp)
}
 80049ac:	e037883a 	mov	sp,fp
 80049b0:	df000017 	ldw	fp,0(sp)
 80049b4:	dec00104 	addi	sp,sp,4
 80049b8:	f800283a 	ret

080049bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 80049bc:	defffe04 	addi	sp,sp,-8
 80049c0:	df000115 	stw	fp,4(sp)
 80049c4:	df000104 	addi	fp,sp,4
 80049c8:	e13fff15 	stw	r4,-4(fp)
}
 80049cc:	e037883a 	mov	sp,fp
 80049d0:	df000017 	ldw	fp,0(sp)
 80049d4:	dec00104 	addi	sp,sp,4
 80049d8:	f800283a 	ret

080049dc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 80049dc:	defff204 	addi	sp,sp,-56
 80049e0:	dfc00a15 	stw	ra,40(sp)
 80049e4:	df000915 	stw	fp,36(sp)
 80049e8:	df000904 	addi	fp,sp,36
 80049ec:	e1400215 	stw	r5,8(fp)
 80049f0:	e1800315 	stw	r6,12(fp)
 80049f4:	e1c00415 	stw	r7,16(fp)
 80049f8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
 80049fc:	e0800204 	addi	r2,fp,8
 8004a00:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8004a04:	e0bfff17 	ldw	r2,-4(fp)
 8004a08:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8004a0c:	00007106 	br	8004bd4 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8004a10:	e0bff807 	ldb	r2,-32(fp)
 8004a14:	10800960 	cmpeqi	r2,r2,37
 8004a18:	1000041e 	bne	r2,zero,8004a2c <alt_printf+0x50>
        {
            alt_putchar(c);
 8004a1c:	e0bff807 	ldb	r2,-32(fp)
 8004a20:	1009883a 	mov	r4,r2
 8004a24:	8004c040 	call	8004c04 <alt_putchar>
 8004a28:	00006a06 	br	8004bd4 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8004a2c:	e0bff717 	ldw	r2,-36(fp)
 8004a30:	10c00044 	addi	r3,r2,1
 8004a34:	e0fff715 	stw	r3,-36(fp)
 8004a38:	10800003 	ldbu	r2,0(r2)
 8004a3c:	e0bff805 	stb	r2,-32(fp)
 8004a40:	e0bff807 	ldb	r2,-32(fp)
 8004a44:	10006226 	beq	r2,zero,8004bd0 <alt_printf+0x1f4>
            {
                if (c == '%')
 8004a48:	e0bff807 	ldb	r2,-32(fp)
 8004a4c:	10800958 	cmpnei	r2,r2,37
 8004a50:	1000041e 	bne	r2,zero,8004a64 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8004a54:	e0bff807 	ldb	r2,-32(fp)
 8004a58:	1009883a 	mov	r4,r2
 8004a5c:	8004c040 	call	8004c04 <alt_putchar>
 8004a60:	00005c06 	br	8004bd4 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
 8004a64:	e0bff807 	ldb	r2,-32(fp)
 8004a68:	108018d8 	cmpnei	r2,r2,99
 8004a6c:	1000081e 	bne	r2,zero,8004a90 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8004a70:	e0bffe17 	ldw	r2,-8(fp)
 8004a74:	10c00104 	addi	r3,r2,4
 8004a78:	e0fffe15 	stw	r3,-8(fp)
 8004a7c:	10800017 	ldw	r2,0(r2)
 8004a80:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8004a84:	e13ffd17 	ldw	r4,-12(fp)
 8004a88:	8004c040 	call	8004c04 <alt_putchar>
 8004a8c:	00005106 	br	8004bd4 <alt_printf+0x1f8>
                }
                else if (c == 'x')
 8004a90:	e0bff807 	ldb	r2,-32(fp)
 8004a94:	10801e18 	cmpnei	r2,r2,120
 8004a98:	1000341e 	bne	r2,zero,8004b6c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8004a9c:	e0bffe17 	ldw	r2,-8(fp)
 8004aa0:	10c00104 	addi	r3,r2,4
 8004aa4:	e0fffe15 	stw	r3,-8(fp)
 8004aa8:	10800017 	ldw	r2,0(r2)
 8004aac:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8004ab0:	e0bffb17 	ldw	r2,-20(fp)
 8004ab4:	1000031e 	bne	r2,zero,8004ac4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8004ab8:	01000c04 	movi	r4,48
 8004abc:	8004c040 	call	8004c04 <alt_putchar>
                        continue;
 8004ac0:	00004406 	br	8004bd4 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8004ac4:	00800704 	movi	r2,28
 8004ac8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8004acc:	00000306 	br	8004adc <alt_printf+0x100>
                        digit_shift -= 4;
 8004ad0:	e0bff917 	ldw	r2,-28(fp)
 8004ad4:	10bfff04 	addi	r2,r2,-4
 8004ad8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8004adc:	00c003c4 	movi	r3,15
 8004ae0:	e0bff917 	ldw	r2,-28(fp)
 8004ae4:	1884983a 	sll	r2,r3,r2
 8004ae8:	1007883a 	mov	r3,r2
 8004aec:	e0bffb17 	ldw	r2,-20(fp)
 8004af0:	1884703a 	and	r2,r3,r2
 8004af4:	103ff626 	beq	r2,zero,8004ad0 <__alt_data_end+0xfc004ad0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8004af8:	00001906 	br	8004b60 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8004afc:	00c003c4 	movi	r3,15
 8004b00:	e0bff917 	ldw	r2,-28(fp)
 8004b04:	1884983a 	sll	r2,r3,r2
 8004b08:	1007883a 	mov	r3,r2
 8004b0c:	e0bffb17 	ldw	r2,-20(fp)
 8004b10:	1886703a 	and	r3,r3,r2
 8004b14:	e0bff917 	ldw	r2,-28(fp)
 8004b18:	1884d83a 	srl	r2,r3,r2
 8004b1c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8004b20:	e0bffc17 	ldw	r2,-16(fp)
 8004b24:	108002a8 	cmpgeui	r2,r2,10
 8004b28:	1000041e 	bne	r2,zero,8004b3c <alt_printf+0x160>
                            c = '0' + digit;
 8004b2c:	e0bffc17 	ldw	r2,-16(fp)
 8004b30:	10800c04 	addi	r2,r2,48
 8004b34:	e0bff805 	stb	r2,-32(fp)
 8004b38:	00000306 	br	8004b48 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8004b3c:	e0bffc17 	ldw	r2,-16(fp)
 8004b40:	108015c4 	addi	r2,r2,87
 8004b44:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8004b48:	e0bff807 	ldb	r2,-32(fp)
 8004b4c:	1009883a 	mov	r4,r2
 8004b50:	8004c040 	call	8004c04 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8004b54:	e0bff917 	ldw	r2,-28(fp)
 8004b58:	10bfff04 	addi	r2,r2,-4
 8004b5c:	e0bff915 	stw	r2,-28(fp)
 8004b60:	e0bff917 	ldw	r2,-28(fp)
 8004b64:	103fe50e 	bge	r2,zero,8004afc <__alt_data_end+0xfc004afc>
 8004b68:	00001a06 	br	8004bd4 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8004b6c:	e0bff807 	ldb	r2,-32(fp)
 8004b70:	10801cd8 	cmpnei	r2,r2,115
 8004b74:	1000151e 	bne	r2,zero,8004bcc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8004b78:	e0bffe17 	ldw	r2,-8(fp)
 8004b7c:	10c00104 	addi	r3,r2,4
 8004b80:	e0fffe15 	stw	r3,-8(fp)
 8004b84:	10800017 	ldw	r2,0(r2)
 8004b88:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8004b8c:	00000906 	br	8004bb4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8004b90:	e0bffa17 	ldw	r2,-24(fp)
 8004b94:	10c00044 	addi	r3,r2,1
 8004b98:	e0fffa15 	stw	r3,-24(fp)
 8004b9c:	10800003 	ldbu	r2,0(r2)
 8004ba0:	10803fcc 	andi	r2,r2,255
 8004ba4:	1080201c 	xori	r2,r2,128
 8004ba8:	10bfe004 	addi	r2,r2,-128
 8004bac:	1009883a 	mov	r4,r2
 8004bb0:	8004c040 	call	8004c04 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8004bb4:	e0bffa17 	ldw	r2,-24(fp)
 8004bb8:	10800003 	ldbu	r2,0(r2)
 8004bbc:	10803fcc 	andi	r2,r2,255
 8004bc0:	1080201c 	xori	r2,r2,128
 8004bc4:	10bfe004 	addi	r2,r2,-128
 8004bc8:	103ff11e 	bne	r2,zero,8004b90 <__alt_data_end+0xfc004b90>
 8004bcc:	00000106 	br	8004bd4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8004bd0:	00000706 	br	8004bf0 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8004bd4:	e0bff717 	ldw	r2,-36(fp)
 8004bd8:	10c00044 	addi	r3,r2,1
 8004bdc:	e0fff715 	stw	r3,-36(fp)
 8004be0:	10800003 	ldbu	r2,0(r2)
 8004be4:	e0bff805 	stb	r2,-32(fp)
 8004be8:	e0bff807 	ldb	r2,-32(fp)
 8004bec:	103f881e 	bne	r2,zero,8004a10 <__alt_data_end+0xfc004a10>
            {
                break;
            }
        }
    }
}
 8004bf0:	e037883a 	mov	sp,fp
 8004bf4:	dfc00117 	ldw	ra,4(sp)
 8004bf8:	df000017 	ldw	fp,0(sp)
 8004bfc:	dec00504 	addi	sp,sp,20
 8004c00:	f800283a 	ret

08004c04 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8004c04:	defffd04 	addi	sp,sp,-12
 8004c08:	dfc00215 	stw	ra,8(sp)
 8004c0c:	df000115 	stw	fp,4(sp)
 8004c10:	df000104 	addi	fp,sp,4
 8004c14:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8004c18:	00820034 	movhi	r2,2048
 8004c1c:	109f0504 	addi	r2,r2,31764
 8004c20:	10800017 	ldw	r2,0(r2)
 8004c24:	10800217 	ldw	r2,8(r2)
 8004c28:	e13fff17 	ldw	r4,-4(fp)
 8004c2c:	100b883a 	mov	r5,r2
 8004c30:	8006d8c0 	call	8006d8c <putc>
#endif
}
 8004c34:	e037883a 	mov	sp,fp
 8004c38:	dfc00117 	ldw	ra,4(sp)
 8004c3c:	df000017 	ldw	fp,0(sp)
 8004c40:	dec00204 	addi	sp,sp,8
 8004c44:	f800283a 	ret

08004c48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8004c48:	defff904 	addi	sp,sp,-28
 8004c4c:	df000615 	stw	fp,24(sp)
 8004c50:	df000604 	addi	fp,sp,24
 8004c54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c58:	0005303a 	rdctl	r2,status
 8004c5c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c60:	e0fffc17 	ldw	r3,-16(fp)
 8004c64:	00bfff84 	movi	r2,-2
 8004c68:	1884703a 	and	r2,r3,r2
 8004c6c:	1001703a 	wrctl	status,r2
  
  return context;
 8004c70:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8004c74:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8004c78:	d0a01917 	ldw	r2,-32668(gp)
 8004c7c:	10c000c4 	addi	r3,r2,3
 8004c80:	00bfff04 	movi	r2,-4
 8004c84:	1884703a 	and	r2,r3,r2
 8004c88:	d0a01915 	stw	r2,-32668(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8004c8c:	d0e01917 	ldw	r3,-32668(gp)
 8004c90:	e0bfff17 	ldw	r2,-4(fp)
 8004c94:	1887883a 	add	r3,r3,r2
 8004c98:	00830034 	movhi	r2,3072
 8004c9c:	10800004 	addi	r2,r2,0
 8004ca0:	10c0062e 	bgeu	r2,r3,8004cbc <sbrk+0x74>
 8004ca4:	e0bffa17 	ldw	r2,-24(fp)
 8004ca8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004cac:	e0bffd17 	ldw	r2,-12(fp)
 8004cb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8004cb4:	00bfffc4 	movi	r2,-1
 8004cb8:	00000b06 	br	8004ce8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8004cbc:	d0a01917 	ldw	r2,-32668(gp)
 8004cc0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 8004cc4:	d0e01917 	ldw	r3,-32668(gp)
 8004cc8:	e0bfff17 	ldw	r2,-4(fp)
 8004ccc:	1885883a 	add	r2,r3,r2
 8004cd0:	d0a01915 	stw	r2,-32668(gp)
 8004cd4:	e0bffa17 	ldw	r2,-24(fp)
 8004cd8:	e0bffe15 	stw	r2,-8(fp)
 8004cdc:	e0bffe17 	ldw	r2,-8(fp)
 8004ce0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8004ce4:	e0bffb17 	ldw	r2,-20(fp)
} 
 8004ce8:	e037883a 	mov	sp,fp
 8004cec:	df000017 	ldw	fp,0(sp)
 8004cf0:	dec00104 	addi	sp,sp,4
 8004cf4:	f800283a 	ret

08004cf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004cf8:	defffe04 	addi	sp,sp,-8
 8004cfc:	dfc00115 	stw	ra,4(sp)
 8004d00:	df000015 	stw	fp,0(sp)
 8004d04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d08:	00820034 	movhi	r2,2048
 8004d0c:	109f0804 	addi	r2,r2,31776
 8004d10:	10800017 	ldw	r2,0(r2)
 8004d14:	10000526 	beq	r2,zero,8004d2c <alt_get_errno+0x34>
 8004d18:	00820034 	movhi	r2,2048
 8004d1c:	109f0804 	addi	r2,r2,31776
 8004d20:	10800017 	ldw	r2,0(r2)
 8004d24:	103ee83a 	callr	r2
 8004d28:	00000206 	br	8004d34 <alt_get_errno+0x3c>
 8004d2c:	00820074 	movhi	r2,2049
 8004d30:	10a13904 	addi	r2,r2,-31516
}
 8004d34:	e037883a 	mov	sp,fp
 8004d38:	dfc00117 	ldw	ra,4(sp)
 8004d3c:	df000017 	ldw	fp,0(sp)
 8004d40:	dec00204 	addi	sp,sp,8
 8004d44:	f800283a 	ret

08004d48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004d48:	defff904 	addi	sp,sp,-28
 8004d4c:	dfc00615 	stw	ra,24(sp)
 8004d50:	df000515 	stw	fp,20(sp)
 8004d54:	df000504 	addi	fp,sp,20
 8004d58:	e13ffd15 	stw	r4,-12(fp)
 8004d5c:	e17ffe15 	stw	r5,-8(fp)
 8004d60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004d64:	e0bffd17 	ldw	r2,-12(fp)
 8004d68:	10000816 	blt	r2,zero,8004d8c <write+0x44>
 8004d6c:	e13ffd17 	ldw	r4,-12(fp)
 8004d70:	01400304 	movi	r5,12
 8004d74:	80026d00 	call	80026d0 <__mulsi3>
 8004d78:	1007883a 	mov	r3,r2
 8004d7c:	00820034 	movhi	r2,2048
 8004d80:	109e9004 	addi	r2,r2,31296
 8004d84:	1885883a 	add	r2,r3,r2
 8004d88:	00000106 	br	8004d90 <write+0x48>
 8004d8c:	0005883a 	mov	r2,zero
 8004d90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004d94:	e0bffb17 	ldw	r2,-20(fp)
 8004d98:	10002126 	beq	r2,zero,8004e20 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004d9c:	e0bffb17 	ldw	r2,-20(fp)
 8004da0:	10800217 	ldw	r2,8(r2)
 8004da4:	108000cc 	andi	r2,r2,3
 8004da8:	10001826 	beq	r2,zero,8004e0c <write+0xc4>
 8004dac:	e0bffb17 	ldw	r2,-20(fp)
 8004db0:	10800017 	ldw	r2,0(r2)
 8004db4:	10800617 	ldw	r2,24(r2)
 8004db8:	10001426 	beq	r2,zero,8004e0c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004dbc:	e0bffb17 	ldw	r2,-20(fp)
 8004dc0:	10800017 	ldw	r2,0(r2)
 8004dc4:	10800617 	ldw	r2,24(r2)
 8004dc8:	e0ffff17 	ldw	r3,-4(fp)
 8004dcc:	e13ffb17 	ldw	r4,-20(fp)
 8004dd0:	e17ffe17 	ldw	r5,-8(fp)
 8004dd4:	180d883a 	mov	r6,r3
 8004dd8:	103ee83a 	callr	r2
 8004ddc:	e0bffc15 	stw	r2,-16(fp)
 8004de0:	e0bffc17 	ldw	r2,-16(fp)
 8004de4:	1000070e 	bge	r2,zero,8004e04 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8004de8:	8004cf80 	call	8004cf8 <alt_get_errno>
 8004dec:	1007883a 	mov	r3,r2
 8004df0:	e0bffc17 	ldw	r2,-16(fp)
 8004df4:	0085c83a 	sub	r2,zero,r2
 8004df8:	18800015 	stw	r2,0(r3)
        return -1;
 8004dfc:	00bfffc4 	movi	r2,-1
 8004e00:	00000c06 	br	8004e34 <write+0xec>
      }
      return rval;
 8004e04:	e0bffc17 	ldw	r2,-16(fp)
 8004e08:	00000a06 	br	8004e34 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004e0c:	8004cf80 	call	8004cf8 <alt_get_errno>
 8004e10:	1007883a 	mov	r3,r2
 8004e14:	00800344 	movi	r2,13
 8004e18:	18800015 	stw	r2,0(r3)
 8004e1c:	00000406 	br	8004e30 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004e20:	8004cf80 	call	8004cf8 <alt_get_errno>
 8004e24:	1007883a 	mov	r3,r2
 8004e28:	00801444 	movi	r2,81
 8004e2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004e30:	00bfffc4 	movi	r2,-1
}
 8004e34:	e037883a 	mov	sp,fp
 8004e38:	dfc00117 	ldw	ra,4(sp)
 8004e3c:	df000017 	ldw	fp,0(sp)
 8004e40:	dec00204 	addi	sp,sp,8
 8004e44:	f800283a 	ret

08004e48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004e48:	defffd04 	addi	sp,sp,-12
 8004e4c:	dfc00215 	stw	ra,8(sp)
 8004e50:	df000115 	stw	fp,4(sp)
 8004e54:	df000104 	addi	fp,sp,4
 8004e58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004e5c:	e13fff17 	ldw	r4,-4(fp)
 8004e60:	01420034 	movhi	r5,2048
 8004e64:	295f0c04 	addi	r5,r5,31792
 8004e68:	800625c0 	call	800625c <alt_dev_llist_insert>
}
 8004e6c:	e037883a 	mov	sp,fp
 8004e70:	dfc00117 	ldw	ra,4(sp)
 8004e74:	df000017 	ldw	fp,0(sp)
 8004e78:	dec00204 	addi	sp,sp,8
 8004e7c:	f800283a 	ret

08004e80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004e80:	defffd04 	addi	sp,sp,-12
 8004e84:	dfc00215 	stw	ra,8(sp)
 8004e88:	df000115 	stw	fp,4(sp)
 8004e8c:	df000104 	addi	fp,sp,4
 8004e90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8004e94:	8006aa40 	call	8006aa4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004e98:	00800044 	movi	r2,1
 8004e9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004ea0:	e037883a 	mov	sp,fp
 8004ea4:	dfc00117 	ldw	ra,4(sp)
 8004ea8:	df000017 	ldw	fp,0(sp)
 8004eac:	dec00204 	addi	sp,sp,8
 8004eb0:	f800283a 	ret

08004eb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004eb4:	defffd04 	addi	sp,sp,-12
 8004eb8:	dfc00215 	stw	ra,8(sp)
 8004ebc:	df000115 	stw	fp,4(sp)
 8004ec0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_DMA_INIT ( DMA_FPGA_TO_HPS, dma_fpga_to_hps);
 8004ec4:	008000c4 	movi	r2,3
 8004ec8:	d8800015 	stw	r2,0(sp)
 8004ecc:	01020034 	movhi	r4,2048
 8004ed0:	211e5704 	addi	r4,r4,31068
 8004ed4:	01420034 	movhi	r5,2048
 8004ed8:	295e5e04 	addi	r5,r5,31096
 8004edc:	01801004 	movi	r6,64
 8004ee0:	000f883a 	mov	r7,zero
 8004ee4:	8005a300 	call	8005a30 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004ee8:	01020034 	movhi	r4,2048
 8004eec:	211e6504 	addi	r4,r4,31124
 8004ef0:	8004e480 	call	8004e48 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 8004ef4:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
 8004ef8:	01020034 	movhi	r4,2048
 8004efc:	211e7004 	addi	r4,r4,31168
 8004f00:	8004e480 	call	8004e48 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
 8004f04:	01020034 	movhi	r4,2048
 8004f08:	211e7b04 	addi	r4,r4,31212
 8004f0c:	8004e480 	call	8004e48 <alt_dev_reg>
}
 8004f10:	e037883a 	mov	sp,fp
 8004f14:	dfc00117 	ldw	ra,4(sp)
 8004f18:	df000017 	ldw	fp,0(sp)
 8004f1c:	dec00204 	addi	sp,sp,8
 8004f20:	f800283a 	ret

08004f24 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 8004f24:	defffd04 	addi	sp,sp,-12
 8004f28:	dfc00215 	stw	ra,8(sp)
 8004f2c:	df000115 	stw	fp,4(sp)
 8004f30:	df000104 	addi	fp,sp,4
 8004f34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 8004f38:	e13fff17 	ldw	r4,-4(fp)
 8004f3c:	01420034 	movhi	r5,2048
 8004f40:	295f0604 	addi	r5,r5,31768
 8004f44:	800625c0 	call	800625c <alt_dev_llist_insert>
}
 8004f48:	e037883a 	mov	sp,fp
 8004f4c:	dfc00117 	ldw	ra,4(sp)
 8004f50:	df000017 	ldw	fp,0(sp)
 8004f54:	dec00204 	addi	sp,sp,8
 8004f58:	f800283a 	ret

08004f5c <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 8004f5c:	defffd04 	addi	sp,sp,-12
 8004f60:	dfc00215 	stw	ra,8(sp)
 8004f64:	df000115 	stw	fp,4(sp)
 8004f68:	df000104 	addi	fp,sp,4
 8004f6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 8004f70:	e13fff17 	ldw	r4,-4(fp)
 8004f74:	01420034 	movhi	r5,2048
 8004f78:	295f0f04 	addi	r5,r5,31804
 8004f7c:	800625c0 	call	800625c <alt_dev_llist_insert>
}
 8004f80:	e037883a 	mov	sp,fp
 8004f84:	dfc00117 	ldw	ra,4(sp)
 8004f88:	df000017 	ldw	fp,0(sp)
 8004f8c:	dec00204 	addi	sp,sp,8
 8004f90:	f800283a 	ret

08004f94 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 8004f94:	defffc04 	addi	sp,sp,-16
 8004f98:	df000315 	stw	fp,12(sp)
 8004f9c:	df000304 	addi	fp,sp,12
 8004fa0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 8004fa4:	e0bfff17 	ldw	r2,-4(fp)
 8004fa8:	10c00117 	ldw	r3,4(r2)
 8004fac:	e0bfff17 	ldw	r2,-4(fp)
 8004fb0:	10800217 	ldw	r2,8(r2)
 8004fb4:	18802e26 	beq	r3,r2,8005070 <alt_avalon_dma_launch_bidir+0xdc>
 8004fb8:	e0bfff17 	ldw	r2,-4(fp)
 8004fbc:	10c00317 	ldw	r3,12(r2)
 8004fc0:	e0bfff17 	ldw	r2,-4(fp)
 8004fc4:	10800417 	ldw	r2,16(r2)
 8004fc8:	18802926 	beq	r3,r2,8005070 <alt_avalon_dma_launch_bidir+0xdc>
  {
    priv->active = 1;
 8004fcc:	e0bfff17 	ldw	r2,-4(fp)
 8004fd0:	00c00044 	movi	r3,1
 8004fd4:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
 8004fd8:	e0bfff17 	ldw	r2,-4(fp)
 8004fdc:	10800117 	ldw	r2,4(r2)
 8004fe0:	1004913a 	slli	r2,r2,4
 8004fe4:	10800904 	addi	r2,r2,36
 8004fe8:	e0ffff17 	ldw	r3,-4(fp)
 8004fec:	1885883a 	add	r2,r3,r2
 8004ff0:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 8004ff4:	e0bfff17 	ldw	r2,-4(fp)
 8004ff8:	10800317 	ldw	r2,12(r2)
 8004ffc:	1004913a 	slli	r2,r2,4
 8005000:	10801904 	addi	r2,r2,100
 8005004:	e0ffff17 	ldw	r3,-4(fp)
 8005008:	1885883a 	add	r2,r3,r2
 800500c:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 8005010:	e0bfff17 	ldw	r2,-4(fp)
 8005014:	10800017 	ldw	r2,0(r2)
 8005018:	10800104 	addi	r2,r2,4
 800501c:	e0fffd17 	ldw	r3,-12(fp)
 8005020:	18c00017 	ldw	r3,0(r3)
 8005024:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 8005028:	e0bfff17 	ldw	r2,-4(fp)
 800502c:	10800017 	ldw	r2,0(r2)
 8005030:	10800204 	addi	r2,r2,8
 8005034:	e0fffe17 	ldw	r3,-8(fp)
 8005038:	18c00017 	ldw	r3,0(r3)
 800503c:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 8005040:	e0bfff17 	ldw	r2,-4(fp)
 8005044:	10800017 	ldw	r2,0(r2)
 8005048:	11000304 	addi	r4,r2,12
 800504c:	e0bffd17 	ldw	r2,-12(fp)
 8005050:	11400117 	ldw	r5,4(r2)
 8005054:	e0bffe17 	ldw	r2,-8(fp)
 8005058:	10c00117 	ldw	r3,4(r2)
 800505c:	2805883a 	mov	r2,r5
 8005060:	1880012e 	bgeu	r3,r2,8005068 <alt_avalon_dma_launch_bidir+0xd4>
 8005064:	1805883a 	mov	r2,r3
 8005068:	20800035 	stwio	r2,0(r4)
 800506c:	00000206 	br	8005078 <alt_avalon_dma_launch_bidir+0xe4>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 8005070:	e0bfff17 	ldw	r2,-4(fp)
 8005074:	10000815 	stw	zero,32(r2)
  }
}
 8005078:	e037883a 	mov	sp,fp
 800507c:	df000017 	ldw	fp,0(sp)
 8005080:	dec00104 	addi	sp,sp,4
 8005084:	f800283a 	ret

08005088 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 8005088:	defffd04 	addi	sp,sp,-12
 800508c:	df000215 	stw	fp,8(sp)
 8005090:	df000204 	addi	fp,sp,8
 8005094:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 8005098:	e0bfff17 	ldw	r2,-4(fp)
 800509c:	10c00117 	ldw	r3,4(r2)
 80050a0:	e0bfff17 	ldw	r2,-4(fp)
 80050a4:	10800217 	ldw	r2,8(r2)
 80050a8:	18801726 	beq	r3,r2,8005108 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
 80050ac:	e0bfff17 	ldw	r2,-4(fp)
 80050b0:	00c00044 	movi	r3,1
 80050b4:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 80050b8:	e0bfff17 	ldw	r2,-4(fp)
 80050bc:	10800117 	ldw	r2,4(r2)
 80050c0:	1004913a 	slli	r2,r2,4
 80050c4:	10800904 	addi	r2,r2,36
 80050c8:	e0ffff17 	ldw	r3,-4(fp)
 80050cc:	1885883a 	add	r2,r3,r2
 80050d0:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 80050d4:	e0bfff17 	ldw	r2,-4(fp)
 80050d8:	10800017 	ldw	r2,0(r2)
 80050dc:	10800104 	addi	r2,r2,4
 80050e0:	e0fffe17 	ldw	r3,-8(fp)
 80050e4:	18c00017 	ldw	r3,0(r3)
 80050e8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 80050ec:	e0bfff17 	ldw	r2,-4(fp)
 80050f0:	10800017 	ldw	r2,0(r2)
 80050f4:	10800304 	addi	r2,r2,12
 80050f8:	e0fffe17 	ldw	r3,-8(fp)
 80050fc:	18c00117 	ldw	r3,4(r3)
 8005100:	10c00035 	stwio	r3,0(r2)
 8005104:	00000206 	br	8005110 <alt_avalon_dma_launch_txonly+0x88>
  }
  else
  {
    priv->active = 0;
 8005108:	e0bfff17 	ldw	r2,-4(fp)
 800510c:	10000815 	stw	zero,32(r2)
  }
}
 8005110:	e037883a 	mov	sp,fp
 8005114:	df000017 	ldw	fp,0(sp)
 8005118:	dec00104 	addi	sp,sp,4
 800511c:	f800283a 	ret

08005120 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 8005120:	defffd04 	addi	sp,sp,-12
 8005124:	df000215 	stw	fp,8(sp)
 8005128:	df000204 	addi	fp,sp,8
 800512c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 8005130:	e0bfff17 	ldw	r2,-4(fp)
 8005134:	10c00317 	ldw	r3,12(r2)
 8005138:	e0bfff17 	ldw	r2,-4(fp)
 800513c:	10800417 	ldw	r2,16(r2)
 8005140:	18801726 	beq	r3,r2,80051a0 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
 8005144:	e0bfff17 	ldw	r2,-4(fp)
 8005148:	00c00044 	movi	r3,1
 800514c:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 8005150:	e0bfff17 	ldw	r2,-4(fp)
 8005154:	10800317 	ldw	r2,12(r2)
 8005158:	1004913a 	slli	r2,r2,4
 800515c:	10801904 	addi	r2,r2,100
 8005160:	e0ffff17 	ldw	r3,-4(fp)
 8005164:	1885883a 	add	r2,r3,r2
 8005168:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 800516c:	e0bfff17 	ldw	r2,-4(fp)
 8005170:	10800017 	ldw	r2,0(r2)
 8005174:	10800204 	addi	r2,r2,8
 8005178:	e0fffe17 	ldw	r3,-8(fp)
 800517c:	18c00017 	ldw	r3,0(r3)
 8005180:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 8005184:	e0bfff17 	ldw	r2,-4(fp)
 8005188:	10800017 	ldw	r2,0(r2)
 800518c:	10800304 	addi	r2,r2,12
 8005190:	e0fffe17 	ldw	r3,-8(fp)
 8005194:	18c00117 	ldw	r3,4(r3)
 8005198:	10c00035 	stwio	r3,0(r2)
 800519c:	00000206 	br	80051a8 <alt_avalon_dma_launch_rxonly+0x88>
  }
  else
  {
    priv->active = 0;
 80051a0:	e0bfff17 	ldw	r2,-4(fp)
 80051a4:	10000815 	stw	zero,32(r2)
  }
}
 80051a8:	e037883a 	mov	sp,fp
 80051ac:	df000017 	ldw	fp,0(sp)
 80051b0:	dec00104 	addi	sp,sp,4
 80051b4:	f800283a 	ret

080051b8 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 80051b8:	defffa04 	addi	sp,sp,-24
 80051bc:	df000515 	stw	fp,20(sp)
 80051c0:	df000504 	addi	fp,sp,20
 80051c4:	e13ffd15 	stw	r4,-12(fp)
 80051c8:	e17ffe15 	stw	r5,-8(fp)
 80051cc:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
 80051d0:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 80051d4:	e0bffd17 	ldw	r2,-12(fp)
 80051d8:	10c00117 	ldw	r3,4(r2)
 80051dc:	e0bffd17 	ldw	r2,-12(fp)
 80051e0:	10800217 	ldw	r2,8(r2)
 80051e4:	18800a1e 	bne	r3,r2,8005210 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
 80051e8:	e0bffd17 	ldw	r2,-12(fp)
 80051ec:	10c00317 	ldw	r3,12(r2)
 80051f0:	e0bffd17 	ldw	r2,-12(fp)
 80051f4:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 80051f8:	1880051e 	bne	r3,r2,8005210 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
 80051fc:	e0bffd17 	ldw	r2,-12(fp)
 8005200:	10800017 	ldw	r2,0(r2)
 8005204:	10800304 	addi	r2,r2,12
 8005208:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
 800520c:	10000226 	beq	r2,zero,8005218 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 8005210:	00bffec4 	movi	r2,-5
 8005214:	0000b506 	br	80054ec <alt_avalon_dma_ioctl+0x334>
  }

  /* Now process the ioctl. */

  switch (req)
 8005218:	e0bffe17 	ldw	r2,-8(fp)
 800521c:	108002a8 	cmpgeui	r2,r2,10
 8005220:	1000781e 	bne	r2,zero,8005404 <alt_avalon_dma_ioctl+0x24c>
 8005224:	e0bffe17 	ldw	r2,-8(fp)
 8005228:	100690ba 	slli	r3,r2,2
 800522c:	00820034 	movhi	r2,2048
 8005230:	10949004 	addi	r2,r2,21056
 8005234:	1885883a 	add	r2,r3,r2
 8005238:	10800017 	ldw	r2,0(r2)
 800523c:	1000683a 	jmp	r2
 8005240:	08005404 	addi	zero,at,336
 8005244:	08005268 	cmpgeui	zero,at,329
 8005248:	080052c0 	call	80052c <__alt_mem_sdram_controller-0x77ffad4>
 800524c:	080052ec 	andhi	zero,at,331
 8005250:	08005344 	addi	zero,at,333
 8005254:	08005370 	cmpltui	zero,at,333
 8005258:	0800538c 	andi	zero,at,334
 800525c:	080053ac 	andhi	zero,at,334
 8005260:	080053cc 	andi	zero,at,335
 8005264:	080053ec 	andhi	zero,at,335
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 8005268:	e0bffd17 	ldw	r2,-12(fp)
 800526c:	10800517 	ldw	r2,20(r2)
 8005270:	1080100c 	andi	r2,r2,64
 8005274:	10000f1e 	bne	r2,zero,80052b4 <alt_avalon_dma_ioctl+0xfc>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 8005278:	e0bffd17 	ldw	r2,-12(fp)
 800527c:	10800017 	ldw	r2,0(r2)
 8005280:	10800104 	addi	r2,r2,4
 8005284:	e0ffff17 	ldw	r3,-4(fp)
 8005288:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 800528c:	e0bffd17 	ldw	r2,-12(fp)
 8005290:	10800517 	ldw	r2,20(r2)
 8005294:	10c00814 	ori	r3,r2,32
 8005298:	e0bffd17 	ldw	r2,-12(fp)
 800529c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 80052a0:	e0fffd17 	ldw	r3,-12(fp)
 80052a4:	00820034 	movhi	r2,2048
 80052a8:	10944804 	addi	r2,r2,20768
 80052ac:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 80052b0:	00005606 	br	800540c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
 80052b4:	00bffec4 	movi	r2,-5
 80052b8:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 80052bc:	00005306 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 80052c0:	e0bffd17 	ldw	r2,-12(fp)
 80052c4:	10c00517 	ldw	r3,20(r2)
 80052c8:	00bff7c4 	movi	r2,-33
 80052cc:	1886703a 	and	r3,r3,r2
 80052d0:	e0bffd17 	ldw	r2,-12(fp)
 80052d4:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 80052d8:	e0fffd17 	ldw	r3,-12(fp)
 80052dc:	00820034 	movhi	r2,2048
 80052e0:	1093e504 	addi	r2,r2,20372
 80052e4:	18800715 	stw	r2,28(r3)
    break;
 80052e8:	00004806 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 80052ec:	e0bffd17 	ldw	r2,-12(fp)
 80052f0:	10800517 	ldw	r2,20(r2)
 80052f4:	1080080c 	andi	r2,r2,32
 80052f8:	10000f1e 	bne	r2,zero,8005338 <alt_avalon_dma_ioctl+0x180>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 80052fc:	e0bffd17 	ldw	r2,-12(fp)
 8005300:	10800017 	ldw	r2,0(r2)
 8005304:	10800204 	addi	r2,r2,8
 8005308:	e0ffff17 	ldw	r3,-4(fp)
 800530c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 8005310:	e0bffd17 	ldw	r2,-12(fp)
 8005314:	10800517 	ldw	r2,20(r2)
 8005318:	10c01014 	ori	r3,r2,64
 800531c:	e0bffd17 	ldw	r2,-12(fp)
 8005320:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 8005324:	e0fffd17 	ldw	r3,-12(fp)
 8005328:	00820034 	movhi	r2,2048
 800532c:	10942204 	addi	r2,r2,20616
 8005330:	18800715 	stw	r2,28(r3)
    }
    else
    {
      status = -EIO;
    }
    break;
 8005334:	00003506 	br	800540c <alt_avalon_dma_ioctl+0x254>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
 8005338:	00bffec4 	movi	r2,-5
 800533c:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
 8005340:	00003206 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 8005344:	e0bffd17 	ldw	r2,-12(fp)
 8005348:	10c00517 	ldw	r3,20(r2)
 800534c:	00bfefc4 	movi	r2,-65
 8005350:	1886703a 	and	r3,r3,r2
 8005354:	e0bffd17 	ldw	r2,-12(fp)
 8005358:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 800535c:	e0fffd17 	ldw	r3,-12(fp)
 8005360:	00820034 	movhi	r2,2048
 8005364:	1093e504 	addi	r2,r2,20372
 8005368:	18800715 	stw	r2,28(r3)
    break;
 800536c:	00002706 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 8005370:	e0bffd17 	ldw	r2,-12(fp)
 8005374:	10c00517 	ldw	r3,20(r2)
 8005378:	00bffc04 	movi	r2,-16
 800537c:	1886703a 	and	r3,r3,r2
 8005380:	e0bffd17 	ldw	r2,-12(fp)
 8005384:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 8005388:	00002006 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 800538c:	e0bffd17 	ldw	r2,-12(fp)
 8005390:	10c00517 	ldw	r3,20(r2)
 8005394:	00bffc04 	movi	r2,-16
 8005398:	1884703a 	and	r2,r3,r2
 800539c:	10c00054 	ori	r3,r2,1
 80053a0:	e0bffd17 	ldw	r2,-12(fp)
 80053a4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 80053a8:	00001806 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053ac:	e0bffd17 	ldw	r2,-12(fp)
 80053b0:	10c00517 	ldw	r3,20(r2)
 80053b4:	00bffc04 	movi	r2,-16
 80053b8:	1884703a 	and	r2,r3,r2
 80053bc:	10c000d4 	ori	r3,r2,3
 80053c0:	e0bffd17 	ldw	r2,-12(fp)
 80053c4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 80053c8:	00001006 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053cc:	e0bffd17 	ldw	r2,-12(fp)
 80053d0:	10c00517 	ldw	r3,20(r2)
 80053d4:	00bffc04 	movi	r2,-16
 80053d8:	1884703a 	and	r2,r3,r2
 80053dc:	10c001d4 	ori	r3,r2,7
 80053e0:	e0bffd17 	ldw	r2,-12(fp)
 80053e4:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 80053e8:	00000806 	br	800540c <alt_avalon_dma_ioctl+0x254>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 80053ec:	e0bffd17 	ldw	r2,-12(fp)
 80053f0:	10800517 	ldw	r2,20(r2)
 80053f4:	10c003d4 	ori	r3,r2,15
 80053f8:	e0bffd17 	ldw	r2,-12(fp)
 80053fc:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 8005400:	00000206 	br	800540c <alt_avalon_dma_ioctl+0x254>
  default:
    status = -ENOTTY;
 8005404:	00bff9c4 	movi	r2,-25
 8005408:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
 800540c:	e0bffb17 	ldw	r2,-20(fp)
 8005410:	1000351e 	bne	r2,zero,80054e8 <alt_avalon_dma_ioctl+0x330>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 8005414:	e0bffd17 	ldw	r2,-12(fp)
 8005418:	10800517 	ldw	r2,20(r2)
 800541c:	108003cc 	andi	r2,r2,15
 8005420:	10c00060 	cmpeqi	r3,r2,1
 8005424:	1800091e 	bne	r3,zero,800544c <alt_avalon_dma_ioctl+0x294>
 8005428:	0080052e 	bgeu	zero,r2,8005440 <alt_avalon_dma_ioctl+0x288>
 800542c:	10c000e0 	cmpeqi	r3,r2,3
 8005430:	1800091e 	bne	r3,zero,8005458 <alt_avalon_dma_ioctl+0x2a0>
 8005434:	108001e0 	cmpeqi	r2,r2,7
 8005438:	10000a1e 	bne	r2,zero,8005464 <alt_avalon_dma_ioctl+0x2ac>
 800543c:	00000c06 	br	8005470 <alt_avalon_dma_ioctl+0x2b8>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 8005440:	00800044 	movi	r2,1
 8005444:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005448:	00000b06 	br	8005478 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 800544c:	00800084 	movi	r2,2
 8005450:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005454:	00000806 	br	8005478 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 8005458:	00800104 	movi	r2,4
 800545c:	e0bffc15 	stw	r2,-16(fp)
       break;
 8005460:	00000506 	br	8005478 <alt_avalon_dma_ioctl+0x2c0>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 8005464:	00810004 	movi	r2,1024
 8005468:	e0bffc15 	stw	r2,-16(fp)
       break;
 800546c:	00000206 	br	8005478 <alt_avalon_dma_ioctl+0x2c0>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 8005470:	00820004 	movi	r2,2048
 8005474:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 8005478:	e0bffd17 	ldw	r2,-12(fp)
 800547c:	10800517 	ldw	r2,20(r2)
 8005480:	1080080c 	andi	r2,r2,32
 8005484:	10000726 	beq	r2,zero,80054a4 <alt_avalon_dma_ioctl+0x2ec>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 8005488:	e0bffd17 	ldw	r2,-12(fp)
 800548c:	10800017 	ldw	r2,0(r2)
 8005490:	10800604 	addi	r2,r2,24
 8005494:	e0fffc17 	ldw	r3,-16(fp)
 8005498:	18c07e14 	ori	r3,r3,504
 800549c:	10c00035 	stwio	r3,0(r2)
 80054a0:	00001106 	br	80054e8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 80054a4:	e0bffd17 	ldw	r2,-12(fp)
 80054a8:	10800517 	ldw	r2,20(r2)
 80054ac:	1080100c 	andi	r2,r2,64
 80054b0:	10000726 	beq	r2,zero,80054d0 <alt_avalon_dma_ioctl+0x318>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 80054b4:	e0bffd17 	ldw	r2,-12(fp)
 80054b8:	10800017 	ldw	r2,0(r2)
 80054bc:	10800604 	addi	r2,r2,24
 80054c0:	e0fffc17 	ldw	r3,-16(fp)
 80054c4:	18c0be14 	ori	r3,r3,760
 80054c8:	10c00035 	stwio	r3,0(r2)
 80054cc:	00000606 	br	80054e8 <alt_avalon_dma_ioctl+0x330>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 80054d0:	e0bffd17 	ldw	r2,-12(fp)
 80054d4:	10800017 	ldw	r2,0(r2)
 80054d8:	10800604 	addi	r2,r2,24
 80054dc:	e0fffc17 	ldw	r3,-16(fp)
 80054e0:	18c03e14 	ori	r3,r3,248
 80054e4:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 80054e8:	e0bffb17 	ldw	r2,-20(fp)
}
 80054ec:	e037883a 	mov	sp,fp
 80054f0:	df000017 	ldw	fp,0(sp)
 80054f4:	dec00104 	addi	sp,sp,4
 80054f8:	f800283a 	ret

080054fc <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 80054fc:	defffb04 	addi	sp,sp,-20
 8005500:	dfc00415 	stw	ra,16(sp)
 8005504:	df000315 	stw	fp,12(sp)
 8005508:	df000304 	addi	fp,sp,12
 800550c:	e13ffd15 	stw	r4,-12(fp)
 8005510:	e17ffe15 	stw	r5,-8(fp)
 8005514:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 8005518:	e0bffd17 	ldw	r2,-12(fp)
 800551c:	10800617 	ldw	r2,24(r2)
 8005520:	1009883a 	mov	r4,r2
 8005524:	e17ffe17 	ldw	r5,-8(fp)
 8005528:	e1bfff17 	ldw	r6,-4(fp)
 800552c:	80051b80 	call	80051b8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 8005530:	e037883a 	mov	sp,fp
 8005534:	dfc00117 	ldw	ra,4(sp)
 8005538:	df000017 	ldw	fp,0(sp)
 800553c:	dec00204 	addi	sp,sp,8
 8005540:	f800283a 	ret

08005544 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 8005544:	defffb04 	addi	sp,sp,-20
 8005548:	dfc00415 	stw	ra,16(sp)
 800554c:	df000315 	stw	fp,12(sp)
 8005550:	df000304 	addi	fp,sp,12
 8005554:	e13ffd15 	stw	r4,-12(fp)
 8005558:	e17ffe15 	stw	r5,-8(fp)
 800555c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 8005560:	e0bffd17 	ldw	r2,-12(fp)
 8005564:	10800617 	ldw	r2,24(r2)
 8005568:	1009883a 	mov	r4,r2
 800556c:	e17ffe17 	ldw	r5,-8(fp)
 8005570:	e1bfff17 	ldw	r6,-4(fp)
 8005574:	80051b80 	call	80051b8 <alt_avalon_dma_ioctl>
             req,
             arg);
}
 8005578:	e037883a 	mov	sp,fp
 800557c:	dfc00117 	ldw	ra,4(sp)
 8005580:	df000017 	ldw	fp,0(sp)
 8005584:	dec00204 	addi	sp,sp,8
 8005588:	f800283a 	ret

0800558c <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 800558c:	defff404 	addi	sp,sp,-48
 8005590:	dfc00b15 	stw	ra,44(sp)
 8005594:	df000a15 	stw	fp,40(sp)
 8005598:	df000a04 	addi	fp,sp,40
 800559c:	e13ffc15 	stw	r4,-16(fp)
 80055a0:	e17ffd15 	stw	r5,-12(fp)
 80055a4:	e1bffe15 	stw	r6,-8(fp)
 80055a8:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 80055ac:	e0bffc17 	ldw	r2,-16(fp)
 80055b0:	10800617 	ldw	r2,24(r2)
 80055b4:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 80055b8:	e0bff617 	ldw	r2,-40(fp)
 80055bc:	10800517 	ldw	r2,20(r2)
 80055c0:	108003cc 	andi	r2,r2,15
 80055c4:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 80055c8:	e0fffd17 	ldw	r3,-12(fp)
 80055cc:	e0bff717 	ldw	r2,-36(fp)
 80055d0:	1884703a 	and	r2,r3,r2
 80055d4:	1000081e 	bne	r2,zero,80055f8 <alt_avalon_dma_prepare+0x6c>
 80055d8:	e0fffe17 	ldw	r3,-8(fp)
 80055dc:	e0bff717 	ldw	r2,-36(fp)
 80055e0:	1884703a 	and	r2,r3,r2
 80055e4:	1000041e 	bne	r2,zero,80055f8 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
 80055e8:	e0bff617 	ldw	r2,-40(fp)
 80055ec:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 80055f0:	e0bffe17 	ldw	r2,-8(fp)
 80055f4:	1880022e 	bgeu	r3,r2,8005600 <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
 80055f8:	00bffa84 	movi	r2,-22
 80055fc:	00002c06 	br	80056b0 <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
 8005600:	e0bff617 	ldw	r2,-40(fp)
 8005604:	10800317 	ldw	r2,12(r2)
 8005608:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
 800560c:	e0bff617 	ldw	r2,-40(fp)
 8005610:	10800417 	ldw	r2,16(r2)
 8005614:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
 8005618:	e0bff917 	ldw	r2,-28(fp)
 800561c:	1004913a 	slli	r2,r2,4
 8005620:	10801904 	addi	r2,r2,100
 8005624:	e0fff617 	ldw	r3,-40(fp)
 8005628:	1885883a 	add	r2,r3,r2
 800562c:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005630:	e0bff917 	ldw	r2,-28(fp)
 8005634:	10800044 	addi	r2,r2,1
 8005638:	108000cc 	andi	r2,r2,3
 800563c:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 8005640:	e0fffb17 	ldw	r3,-20(fp)
 8005644:	e0bff817 	ldw	r2,-32(fp)
 8005648:	1880021e 	bne	r3,r2,8005654 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
 800564c:	00bff904 	movi	r2,-28
 8005650:	00001706 	br	80056b0 <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
 8005654:	e0bffa17 	ldw	r2,-24(fp)
 8005658:	e0fffd17 	ldw	r3,-12(fp)
 800565c:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 8005660:	e0bffa17 	ldw	r2,-24(fp)
 8005664:	e0fffe17 	ldw	r3,-8(fp)
 8005668:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 800566c:	e0bffa17 	ldw	r2,-24(fp)
 8005670:	e0ffff17 	ldw	r3,-4(fp)
 8005674:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 8005678:	e0bffa17 	ldw	r2,-24(fp)
 800567c:	e0c00217 	ldw	r3,8(fp)
 8005680:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
 8005684:	e0bff617 	ldw	r2,-40(fp)
 8005688:	e0fffb17 	ldw	r3,-20(fp)
 800568c:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
 8005690:	e0bff617 	ldw	r2,-40(fp)
 8005694:	10800817 	ldw	r2,32(r2)
 8005698:	1000041e 	bne	r2,zero,80056ac <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
 800569c:	e0bff617 	ldw	r2,-40(fp)
 80056a0:	10800717 	ldw	r2,28(r2)
 80056a4:	e13ff617 	ldw	r4,-40(fp)
 80056a8:	103ee83a 	callr	r2
  }

  return 0;
 80056ac:	0005883a 	mov	r2,zero
}
 80056b0:	e037883a 	mov	sp,fp
 80056b4:	dfc00117 	ldw	ra,4(sp)
 80056b8:	df000017 	ldw	fp,0(sp)
 80056bc:	dec00204 	addi	sp,sp,8
 80056c0:	f800283a 	ret

080056c4 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 80056c4:	defffb04 	addi	sp,sp,-20
 80056c8:	df000415 	stw	fp,16(sp)
 80056cc:	df000404 	addi	fp,sp,16
 80056d0:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 80056d4:	e0bfff17 	ldw	r2,-4(fp)
 80056d8:	10800617 	ldw	r2,24(r2)
 80056dc:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
 80056e0:	e0bffc17 	ldw	r2,-16(fp)
 80056e4:	10800117 	ldw	r2,4(r2)
 80056e8:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
 80056ec:	e0bffc17 	ldw	r2,-16(fp)
 80056f0:	10800217 	ldw	r2,8(r2)
 80056f4:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
 80056f8:	e0bffd17 	ldw	r2,-12(fp)
 80056fc:	e0fffe17 	ldw	r3,-8(fp)
 8005700:	1880052e 	bgeu	r3,r2,8005718 <alt_avalon_dma_space+0x54>
 8005704:	e0fffd17 	ldw	r3,-12(fp)
 8005708:	e0bffe17 	ldw	r2,-8(fp)
 800570c:	1885c83a 	sub	r2,r3,r2
 8005710:	10bfffc4 	addi	r2,r2,-1
 8005714:	00000406 	br	8005728 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
 8005718:	e0fffd17 	ldw	r3,-12(fp)
 800571c:	e0bffe17 	ldw	r2,-8(fp)
 8005720:	1885c83a 	sub	r2,r3,r2
 8005724:	108000c4 	addi	r2,r2,3
}
 8005728:	e037883a 	mov	sp,fp
 800572c:	df000017 	ldw	fp,0(sp)
 8005730:	dec00104 	addi	sp,sp,4
 8005734:	f800283a 	ret

08005738 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 8005738:	defff404 	addi	sp,sp,-48
 800573c:	dfc00b15 	stw	ra,44(sp)
 8005740:	df000a15 	stw	fp,40(sp)
 8005744:	df000a04 	addi	fp,sp,40
 8005748:	e13ffc15 	stw	r4,-16(fp)
 800574c:	e17ffd15 	stw	r5,-12(fp)
 8005750:	e1bffe15 	stw	r6,-8(fp)
 8005754:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 8005758:	e0bffc17 	ldw	r2,-16(fp)
 800575c:	10800617 	ldw	r2,24(r2)
 8005760:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 8005764:	e0bff617 	ldw	r2,-40(fp)
 8005768:	10800517 	ldw	r2,20(r2)
 800576c:	108003cc 	andi	r2,r2,15
 8005770:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 8005774:	e0fffd17 	ldw	r3,-12(fp)
 8005778:	e0bff717 	ldw	r2,-36(fp)
 800577c:	1884703a 	and	r2,r3,r2
 8005780:	1000081e 	bne	r2,zero,80057a4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
 8005784:	e0fffe17 	ldw	r3,-8(fp)
 8005788:	e0bff717 	ldw	r2,-36(fp)
 800578c:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
 8005790:	1000041e 	bne	r2,zero,80057a4 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
 8005794:	e0bff617 	ldw	r2,-40(fp)
 8005798:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
 800579c:	e0bffe17 	ldw	r2,-8(fp)
 80057a0:	1880022e 	bgeu	r3,r2,80057ac <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
 80057a4:	00bffa84 	movi	r2,-22
 80057a8:	00002c06 	br	800585c <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
 80057ac:	e0bff617 	ldw	r2,-40(fp)
 80057b0:	10800117 	ldw	r2,4(r2)
 80057b4:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
 80057b8:	e0bff617 	ldw	r2,-40(fp)
 80057bc:	10800217 	ldw	r2,8(r2)
 80057c0:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
 80057c4:	e0bff917 	ldw	r2,-28(fp)
 80057c8:	1004913a 	slli	r2,r2,4
 80057cc:	10800904 	addi	r2,r2,36
 80057d0:	e0fff617 	ldw	r3,-40(fp)
 80057d4:	1885883a 	add	r2,r3,r2
 80057d8:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 80057dc:	e0bff917 	ldw	r2,-28(fp)
 80057e0:	10800044 	addi	r2,r2,1
 80057e4:	108000cc 	andi	r2,r2,3
 80057e8:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
 80057ec:	e0fffb17 	ldw	r3,-20(fp)
 80057f0:	e0bff817 	ldw	r2,-32(fp)
 80057f4:	1880021e 	bne	r3,r2,8005800 <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
 80057f8:	00bff904 	movi	r2,-28
 80057fc:	00001706 	br	800585c <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 8005800:	e0bffa17 	ldw	r2,-24(fp)
 8005804:	e0fffd17 	ldw	r3,-12(fp)
 8005808:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
 800580c:	e0bffa17 	ldw	r2,-24(fp)
 8005810:	e0fffe17 	ldw	r3,-8(fp)
 8005814:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
 8005818:	e0bffa17 	ldw	r2,-24(fp)
 800581c:	e0ffff17 	ldw	r3,-4(fp)
 8005820:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
 8005824:	e0bffa17 	ldw	r2,-24(fp)
 8005828:	e0c00217 	ldw	r3,8(fp)
 800582c:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
 8005830:	e0bff617 	ldw	r2,-40(fp)
 8005834:	e0fffb17 	ldw	r3,-20(fp)
 8005838:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
 800583c:	e0bff617 	ldw	r2,-40(fp)
 8005840:	10800817 	ldw	r2,32(r2)
 8005844:	1000041e 	bne	r2,zero,8005858 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
 8005848:	e0bff617 	ldw	r2,-40(fp)
 800584c:	10800717 	ldw	r2,28(r2)
 8005850:	e13ff617 	ldw	r4,-40(fp)
 8005854:	103ee83a 	callr	r2
  }

  return 0;
 8005858:	0005883a 	mov	r2,zero
}
 800585c:	e037883a 	mov	sp,fp
 8005860:	dfc00117 	ldw	ra,4(sp)
 8005864:	df000017 	ldw	fp,0(sp)
 8005868:	dec00204 	addi	sp,sp,8
 800586c:	f800283a 	ret

08005870 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 8005870:	defff004 	addi	sp,sp,-64
 8005874:	dfc00f15 	stw	ra,60(sp)
 8005878:	df000e15 	stw	fp,56(sp)
 800587c:	df000e04 	addi	fp,sp,56
 8005880:	e13ffe15 	stw	r4,-8(fp)
 8005884:	e17fff15 	stw	r5,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 8005888:	e0bffe17 	ldw	r2,-8(fp)
 800588c:	e0bff215 	stw	r2,-56(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 8005890:	e0bff217 	ldw	r2,-56(fp)
 8005894:	10800517 	ldw	r2,20(r2)
 8005898:	1080080c 	andi	r2,r2,32
 800589c:	e0bff315 	stw	r2,-52(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 80058a0:	e0bff217 	ldw	r2,-56(fp)
 80058a4:	10800517 	ldw	r2,20(r2)
 80058a8:	1080100c 	andi	r2,r2,64
 80058ac:	e0bff415 	stw	r2,-48(fp)

  tx_start = priv->tx_start;
 80058b0:	e0bff217 	ldw	r2,-56(fp)
 80058b4:	10800117 	ldw	r2,4(r2)
 80058b8:	e0bff515 	stw	r2,-44(fp)
  rx_start = priv->rx_start;
 80058bc:	e0bff217 	ldw	r2,-56(fp)
 80058c0:	10800317 	ldw	r2,12(r2)
 80058c4:	e0bff615 	stw	r2,-40(fp)

  tx_slot = &priv->tx_buf[tx_start];
 80058c8:	e0bff517 	ldw	r2,-44(fp)
 80058cc:	1004913a 	slli	r2,r2,4
 80058d0:	10800904 	addi	r2,r2,36
 80058d4:	e0fff217 	ldw	r3,-56(fp)
 80058d8:	1885883a 	add	r2,r3,r2
 80058dc:	e0bff715 	stw	r2,-36(fp)
  rx_slot = &priv->rx_buf[rx_start];
 80058e0:	e0bff617 	ldw	r2,-40(fp)
 80058e4:	1004913a 	slli	r2,r2,4
 80058e8:	10801904 	addi	r2,r2,100
 80058ec:	e0fff217 	ldw	r3,-56(fp)
 80058f0:	1885883a 	add	r2,r3,r2
 80058f4:	e0bff815 	stw	r2,-32(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 80058f8:	e0bff317 	ldw	r2,-52(fp)
 80058fc:	1000051e 	bne	r2,zero,8005914 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 8005900:	e0bff517 	ldw	r2,-44(fp)
 8005904:	10800044 	addi	r2,r2,1
 8005908:	10c000cc 	andi	r3,r2,3
 800590c:	e0bff217 	ldw	r2,-56(fp)
 8005910:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 8005914:	e0bff417 	ldw	r2,-48(fp)
 8005918:	1000051e 	bne	r2,zero,8005930 <alt_avalon_dma_irq+0xc0>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 800591c:	e0bff617 	ldw	r2,-40(fp)
 8005920:	10800044 	addi	r2,r2,1
 8005924:	10c000cc 	andi	r3,r2,3
 8005928:	e0bff217 	ldw	r2,-56(fp)
 800592c:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 8005930:	e0bff217 	ldw	r2,-56(fp)
 8005934:	10800017 	ldw	r2,0(r2)
 8005938:	0007883a 	mov	r3,zero
 800593c:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 8005940:	e0bff217 	ldw	r2,-56(fp)
 8005944:	10800017 	ldw	r2,0(r2)
 8005948:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 800594c:	e0bff217 	ldw	r2,-56(fp)
 8005950:	10800717 	ldw	r2,28(r2)
 8005954:	e13ff217 	ldw	r4,-56(fp)
 8005958:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 800595c:	e0bff317 	ldw	r2,-52(fp)
 8005960:	1000151e 	bne	r2,zero,80059b8 <alt_avalon_dma_irq+0x148>
 8005964:	e0bff717 	ldw	r2,-36(fp)
 8005968:	10800217 	ldw	r2,8(r2)
 800596c:	10001226 	beq	r2,zero,80059b8 <alt_avalon_dma_irq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005970:	0005303a 	rdctl	r2,status
 8005974:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005978:	e0fffa17 	ldw	r3,-24(fp)
 800597c:	00bfff84 	movi	r2,-2
 8005980:	1884703a 	and	r2,r3,r2
 8005984:	1001703a 	wrctl	status,r2
  
  return context;
 8005988:	e0bffa17 	ldw	r2,-24(fp)
  {
    cpu_sr = alt_irq_disable_all();
 800598c:	e0bff915 	stw	r2,-28(fp)
    tx_slot->done (tx_slot->handle);
 8005990:	e0bff717 	ldw	r2,-36(fp)
 8005994:	10800217 	ldw	r2,8(r2)
 8005998:	e0fff717 	ldw	r3,-36(fp)
 800599c:	18c00317 	ldw	r3,12(r3)
 80059a0:	1809883a 	mov	r4,r3
 80059a4:	103ee83a 	callr	r2
 80059a8:	e0bff917 	ldw	r2,-28(fp)
 80059ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80059b0:	e0bffb17 	ldw	r2,-20(fp)
 80059b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 80059b8:	e0bff417 	ldw	r2,-48(fp)
 80059bc:	1000171e 	bne	r2,zero,8005a1c <alt_avalon_dma_irq+0x1ac>
 80059c0:	e0bff817 	ldw	r2,-32(fp)
 80059c4:	10800217 	ldw	r2,8(r2)
 80059c8:	10001426 	beq	r2,zero,8005a1c <alt_avalon_dma_irq+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80059cc:	0005303a 	rdctl	r2,status
 80059d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059d4:	e0fffc17 	ldw	r3,-16(fp)
 80059d8:	00bfff84 	movi	r2,-2
 80059dc:	1884703a 	and	r2,r3,r2
 80059e0:	1001703a 	wrctl	status,r2
  
  return context;
 80059e4:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
 80059e8:	e0bff915 	stw	r2,-28(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 80059ec:	e0bff817 	ldw	r2,-32(fp)
 80059f0:	10800217 	ldw	r2,8(r2)
 80059f4:	e0fff817 	ldw	r3,-32(fp)
 80059f8:	19000317 	ldw	r4,12(r3)
 80059fc:	e0fff817 	ldw	r3,-32(fp)
 8005a00:	18c00017 	ldw	r3,0(r3)
 8005a04:	180b883a 	mov	r5,r3
 8005a08:	103ee83a 	callr	r2
 8005a0c:	e0bff917 	ldw	r2,-28(fp)
 8005a10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005a14:	e0bffd17 	ldw	r2,-12(fp)
 8005a18:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 8005a1c:	e037883a 	mov	sp,fp
 8005a20:	dfc00117 	ldw	ra,4(sp)
 8005a24:	df000017 	ldw	fp,0(sp)
 8005a28:	dec00204 	addi	sp,sp,8
 8005a2c:	f800283a 	ret

08005a30 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 8005a30:	defffa04 	addi	sp,sp,-24
 8005a34:	dfc00515 	stw	ra,20(sp)
 8005a38:	df000415 	stw	fp,16(sp)
 8005a3c:	df000404 	addi	fp,sp,16
 8005a40:	e13ffc15 	stw	r4,-16(fp)
 8005a44:	e17ffd15 	stw	r5,-12(fp)
 8005a48:	e1bffe15 	stw	r6,-8(fp)
 8005a4c:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 8005a50:	e0bffe17 	ldw	r2,-8(fp)
 8005a54:	10800604 	addi	r2,r2,24
 8005a58:	00c40004 	movi	r3,4096
 8005a5c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 8005a60:	e0bffe17 	ldw	r2,-8(fp)
 8005a64:	10800604 	addi	r2,r2,24
 8005a68:	00c40004 	movi	r3,4096
 8005a6c:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 8005a70:	e0bffe17 	ldw	r2,-8(fp)
 8005a74:	10800604 	addi	r2,r2,24
 8005a78:	00c03f04 	movi	r3,252
 8005a7c:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 8005a80:	0007883a 	mov	r3,zero
 8005a84:	e0bffe17 	ldw	r2,-8(fp)
 8005a88:	10c00035 	stwio	r3,0(r2)
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
 8005a8c:	e0bffc17 	ldw	r2,-16(fp)
 8005a90:	10800617 	ldw	r2,24(r2)
 8005a94:	e1000217 	ldw	r4,8(fp)
 8005a98:	100b883a 	mov	r5,r2
 8005a9c:	01820034 	movhi	r6,2048
 8005aa0:	31961c04 	addi	r6,r6,22640
 8005aa4:	80065d00 	call	80065d0 <alt_irq_register>
 8005aa8:	10000616 	blt	r2,zero,8005ac4 <alt_avalon_dma_init+0x94>
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 8005aac:	e0bffc17 	ldw	r2,-16(fp)
 8005ab0:	1009883a 	mov	r4,r2
 8005ab4:	8004f240 	call	8004f24 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 8005ab8:	e0bffd17 	ldw	r2,-12(fp)
 8005abc:	1009883a 	mov	r4,r2
 8005ac0:	8004f5c0 	call	8004f5c <alt_dma_rxchan_reg>
  }
}
 8005ac4:	e037883a 	mov	sp,fp
 8005ac8:	dfc00117 	ldw	ra,4(sp)
 8005acc:	df000017 	ldw	fp,0(sp)
 8005ad0:	dec00204 	addi	sp,sp,8
 8005ad4:	f800283a 	ret

08005ad8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8005ad8:	defffa04 	addi	sp,sp,-24
 8005adc:	dfc00515 	stw	ra,20(sp)
 8005ae0:	df000415 	stw	fp,16(sp)
 8005ae4:	df000404 	addi	fp,sp,16
 8005ae8:	e13ffd15 	stw	r4,-12(fp)
 8005aec:	e17ffe15 	stw	r5,-8(fp)
 8005af0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005af4:	e0bffd17 	ldw	r2,-12(fp)
 8005af8:	10800017 	ldw	r2,0(r2)
 8005afc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8005b00:	e0bffc17 	ldw	r2,-16(fp)
 8005b04:	10c00a04 	addi	r3,r2,40
 8005b08:	e0bffd17 	ldw	r2,-12(fp)
 8005b0c:	10800217 	ldw	r2,8(r2)
 8005b10:	1809883a 	mov	r4,r3
 8005b14:	e17ffe17 	ldw	r5,-8(fp)
 8005b18:	e1bfff17 	ldw	r6,-4(fp)
 8005b1c:	100f883a 	mov	r7,r2
 8005b20:	8005b980 	call	8005b98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8005b24:	e037883a 	mov	sp,fp
 8005b28:	dfc00117 	ldw	ra,4(sp)
 8005b2c:	df000017 	ldw	fp,0(sp)
 8005b30:	dec00204 	addi	sp,sp,8
 8005b34:	f800283a 	ret

08005b38 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8005b38:	defffa04 	addi	sp,sp,-24
 8005b3c:	dfc00515 	stw	ra,20(sp)
 8005b40:	df000415 	stw	fp,16(sp)
 8005b44:	df000404 	addi	fp,sp,16
 8005b48:	e13ffd15 	stw	r4,-12(fp)
 8005b4c:	e17ffe15 	stw	r5,-8(fp)
 8005b50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005b54:	e0bffd17 	ldw	r2,-12(fp)
 8005b58:	10800017 	ldw	r2,0(r2)
 8005b5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8005b60:	e0bffc17 	ldw	r2,-16(fp)
 8005b64:	10c00a04 	addi	r3,r2,40
 8005b68:	e0bffd17 	ldw	r2,-12(fp)
 8005b6c:	10800217 	ldw	r2,8(r2)
 8005b70:	1809883a 	mov	r4,r3
 8005b74:	e17ffe17 	ldw	r5,-8(fp)
 8005b78:	e1bfff17 	ldw	r6,-4(fp)
 8005b7c:	100f883a 	mov	r7,r2
 8005b80:	8005c7c0 	call	8005c7c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8005b84:	e037883a 	mov	sp,fp
 8005b88:	dfc00117 	ldw	ra,4(sp)
 8005b8c:	df000017 	ldw	fp,0(sp)
 8005b90:	dec00204 	addi	sp,sp,8
 8005b94:	f800283a 	ret

08005b98 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 8005b98:	defff704 	addi	sp,sp,-36
 8005b9c:	df000815 	stw	fp,32(sp)
 8005ba0:	df000804 	addi	fp,sp,32
 8005ba4:	e13ffc15 	stw	r4,-16(fp)
 8005ba8:	e17ffd15 	stw	r5,-12(fp)
 8005bac:	e1bffe15 	stw	r6,-8(fp)
 8005bb0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8005bb4:	e0bffc17 	ldw	r2,-16(fp)
 8005bb8:	10800017 	ldw	r2,0(r2)
 8005bbc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 8005bc0:	e0bffd17 	ldw	r2,-12(fp)
 8005bc4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 8005bc8:	e0bffe17 	ldw	r2,-8(fp)
 8005bcc:	e0fffd17 	ldw	r3,-12(fp)
 8005bd0:	1885883a 	add	r2,r3,r2
 8005bd4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 8005bd8:	00001406 	br	8005c2c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8005bdc:	e0bff917 	ldw	r2,-28(fp)
 8005be0:	10800037 	ldwio	r2,0(r2)
 8005be4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 8005be8:	e0bffb17 	ldw	r2,-20(fp)
 8005bec:	10a0000c 	andi	r2,r2,32768
 8005bf0:	10000626 	beq	r2,zero,8005c0c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8005bf4:	e0bff817 	ldw	r2,-32(fp)
 8005bf8:	10c00044 	addi	r3,r2,1
 8005bfc:	e0fff815 	stw	r3,-32(fp)
 8005c00:	e0fffb17 	ldw	r3,-20(fp)
 8005c04:	10c00005 	stb	r3,0(r2)
 8005c08:	00000806 	br	8005c2c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
 8005c0c:	e0fff817 	ldw	r3,-32(fp)
 8005c10:	e0bffd17 	ldw	r2,-12(fp)
 8005c14:	18800126 	beq	r3,r2,8005c1c <altera_avalon_jtag_uart_read+0x84>
      break;
 8005c18:	00000706 	br	8005c38 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
 8005c1c:	e0bfff17 	ldw	r2,-4(fp)
 8005c20:	1090000c 	andi	r2,r2,16384
 8005c24:	10000126 	beq	r2,zero,8005c2c <altera_avalon_jtag_uart_read+0x94>
      break;   
 8005c28:	00000306 	br	8005c38 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 8005c2c:	e0fff817 	ldw	r3,-32(fp)
 8005c30:	e0bffa17 	ldw	r2,-24(fp)
 8005c34:	18bfe936 	bltu	r3,r2,8005bdc <__alt_data_end+0xfc005bdc>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 8005c38:	e0fff817 	ldw	r3,-32(fp)
 8005c3c:	e0bffd17 	ldw	r2,-12(fp)
 8005c40:	18800426 	beq	r3,r2,8005c54 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
 8005c44:	e0fff817 	ldw	r3,-32(fp)
 8005c48:	e0bffd17 	ldw	r2,-12(fp)
 8005c4c:	1885c83a 	sub	r2,r3,r2
 8005c50:	00000606 	br	8005c6c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
 8005c54:	e0bfff17 	ldw	r2,-4(fp)
 8005c58:	1090000c 	andi	r2,r2,16384
 8005c5c:	10000226 	beq	r2,zero,8005c68 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
 8005c60:	00bffd44 	movi	r2,-11
 8005c64:	00000106 	br	8005c6c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
 8005c68:	00bffec4 	movi	r2,-5
}
 8005c6c:	e037883a 	mov	sp,fp
 8005c70:	df000017 	ldw	fp,0(sp)
 8005c74:	dec00104 	addi	sp,sp,4
 8005c78:	f800283a 	ret

08005c7c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8005c7c:	defff904 	addi	sp,sp,-28
 8005c80:	df000615 	stw	fp,24(sp)
 8005c84:	df000604 	addi	fp,sp,24
 8005c88:	e13ffc15 	stw	r4,-16(fp)
 8005c8c:	e17ffd15 	stw	r5,-12(fp)
 8005c90:	e1bffe15 	stw	r6,-8(fp)
 8005c94:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8005c98:	e0bffc17 	ldw	r2,-16(fp)
 8005c9c:	10800017 	ldw	r2,0(r2)
 8005ca0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 8005ca4:	e0bffe17 	ldw	r2,-8(fp)
 8005ca8:	e0fffd17 	ldw	r3,-12(fp)
 8005cac:	1885883a 	add	r2,r3,r2
 8005cb0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 8005cb4:	00000e06 	br	8005cf0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8005cb8:	e0bffa17 	ldw	r2,-24(fp)
 8005cbc:	10800104 	addi	r2,r2,4
 8005cc0:	10800037 	ldwio	r2,0(r2)
 8005cc4:	10bfffec 	andhi	r2,r2,65535
 8005cc8:	10000926 	beq	r2,zero,8005cf0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8005ccc:	e0fffa17 	ldw	r3,-24(fp)
 8005cd0:	e0bffd17 	ldw	r2,-12(fp)
 8005cd4:	11000044 	addi	r4,r2,1
 8005cd8:	e13ffd15 	stw	r4,-12(fp)
 8005cdc:	10800003 	ldbu	r2,0(r2)
 8005ce0:	10803fcc 	andi	r2,r2,255
 8005ce4:	1080201c 	xori	r2,r2,128
 8005ce8:	10bfe004 	addi	r2,r2,-128
 8005cec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8005cf0:	e0fffd17 	ldw	r3,-12(fp)
 8005cf4:	e0bffb17 	ldw	r2,-20(fp)
 8005cf8:	18bfef36 	bltu	r3,r2,8005cb8 <__alt_data_end+0xfc005cb8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 8005cfc:	e0bffe17 	ldw	r2,-8(fp)
}
 8005d00:	e037883a 	mov	sp,fp
 8005d04:	df000017 	ldw	fp,0(sp)
 8005d08:	dec00104 	addi	sp,sp,4
 8005d0c:	f800283a 	ret

08005d10 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8005d10:	defffd04 	addi	sp,sp,-12
 8005d14:	df000215 	stw	fp,8(sp)
 8005d18:	df000204 	addi	fp,sp,8
 8005d1c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005d20:	e0bfff17 	ldw	r2,-4(fp)
 8005d24:	10800a17 	ldw	r2,40(r2)
 8005d28:	10800104 	addi	r2,r2,4
 8005d2c:	10800037 	ldwio	r2,0(r2)
 8005d30:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 8005d34:	e0bffe17 	ldw	r2,-8(fp)
 8005d38:	10800054 	ori	r2,r2,1
 8005d3c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8005d40:	e0bfff17 	ldw	r2,-4(fp)
 8005d44:	10800a17 	ldw	r2,40(r2)
 8005d48:	10800104 	addi	r2,r2,4
 8005d4c:	1007883a 	mov	r3,r2
 8005d50:	e0bffe17 	ldw	r2,-8(fp)
 8005d54:	18800035 	stwio	r2,0(r3)
}
 8005d58:	e037883a 	mov	sp,fp
 8005d5c:	df000017 	ldw	fp,0(sp)
 8005d60:	dec00104 	addi	sp,sp,4
 8005d64:	f800283a 	ret

08005d68 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 8005d68:	defffd04 	addi	sp,sp,-12
 8005d6c:	df000215 	stw	fp,8(sp)
 8005d70:	df000204 	addi	fp,sp,8
 8005d74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005d78:	e0bfff17 	ldw	r2,-4(fp)
 8005d7c:	10800a17 	ldw	r2,40(r2)
 8005d80:	10800104 	addi	r2,r2,4
 8005d84:	10800037 	ldwio	r2,0(r2)
 8005d88:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 8005d8c:	e0fffe17 	ldw	r3,-8(fp)
 8005d90:	00bfff84 	movi	r2,-2
 8005d94:	1884703a 	and	r2,r3,r2
 8005d98:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 8005d9c:	e0bfff17 	ldw	r2,-4(fp)
 8005da0:	10800a17 	ldw	r2,40(r2)
 8005da4:	10800104 	addi	r2,r2,4
 8005da8:	1007883a 	mov	r3,r2
 8005dac:	e0bffe17 	ldw	r2,-8(fp)
 8005db0:	18800035 	stwio	r2,0(r3)
}
 8005db4:	e037883a 	mov	sp,fp
 8005db8:	df000017 	ldw	fp,0(sp)
 8005dbc:	dec00104 	addi	sp,sp,4
 8005dc0:	f800283a 	ret

08005dc4 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 8005dc4:	defffd04 	addi	sp,sp,-12
 8005dc8:	df000215 	stw	fp,8(sp)
 8005dcc:	df000204 	addi	fp,sp,8
 8005dd0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 8005dd4:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 8005dd8:	e0bfff17 	ldw	r2,-4(fp)
 8005ddc:	10800a17 	ldw	r2,40(r2)
 8005de0:	10800084 	addi	r2,r2,2
 8005de4:	1080002b 	ldhuio	r2,0(r2)
 8005de8:	10bfffcc 	andi	r2,r2,65535
 8005dec:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 8005df0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8005df4:	e037883a 	mov	sp,fp
 8005df8:	df000017 	ldw	fp,0(sp)
 8005dfc:	dec00104 	addi	sp,sp,4
 8005e00:	f800283a 	ret

08005e04 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 8005e04:	defffd04 	addi	sp,sp,-12
 8005e08:	df000215 	stw	fp,8(sp)
 8005e0c:	df000204 	addi	fp,sp,8
 8005e10:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 8005e14:	e0bfff17 	ldw	r2,-4(fp)
 8005e18:	10800a17 	ldw	r2,40(r2)
 8005e1c:	10800104 	addi	r2,r2,4
 8005e20:	10800037 	ldwio	r2,0(r2)
 8005e24:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 8005e28:	e0bffe17 	ldw	r2,-8(fp)
 8005e2c:	1004d43a 	srli	r2,r2,16
}
 8005e30:	e037883a 	mov	sp,fp
 8005e34:	df000017 	ldw	fp,0(sp)
 8005e38:	dec00104 	addi	sp,sp,4
 8005e3c:	f800283a 	ret

08005e40 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 8005e40:	defffd04 	addi	sp,sp,-12
 8005e44:	df000215 	stw	fp,8(sp)
 8005e48:	df000204 	addi	fp,sp,8
 8005e4c:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 8005e50:	e0bfff17 	ldw	r2,-4(fp)
 8005e54:	1080800c 	andi	r2,r2,512
 8005e58:	1004d27a 	srli	r2,r2,9
 8005e5c:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
 8005e60:	e0bffe17 	ldw	r2,-8(fp)
 8005e64:	10000226 	beq	r2,zero,8005e70 <alt_up_rs232_check_parity+0x30>
 8005e68:	00bfffc4 	movi	r2,-1
 8005e6c:	00000106 	br	8005e74 <alt_up_rs232_check_parity+0x34>
 8005e70:	0005883a 	mov	r2,zero
}
 8005e74:	e037883a 	mov	sp,fp
 8005e78:	df000017 	ldw	fp,0(sp)
 8005e7c:	dec00104 	addi	sp,sp,4
 8005e80:	f800283a 	ret

08005e84 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 8005e84:	defffd04 	addi	sp,sp,-12
 8005e88:	df000215 	stw	fp,8(sp)
 8005e8c:	df000204 	addi	fp,sp,8
 8005e90:	e13ffe15 	stw	r4,-8(fp)
 8005e94:	2805883a 	mov	r2,r5
 8005e98:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 8005e9c:	e0bffe17 	ldw	r2,-8(fp)
 8005ea0:	10800a17 	ldw	r2,40(r2)
 8005ea4:	1007883a 	mov	r3,r2
 8005ea8:	e0bfff03 	ldbu	r2,-4(fp)
 8005eac:	18800035 	stwio	r2,0(r3)
	return 0;
 8005eb0:	0005883a 	mov	r2,zero
}
 8005eb4:	e037883a 	mov	sp,fp
 8005eb8:	df000017 	ldw	fp,0(sp)
 8005ebc:	dec00104 	addi	sp,sp,4
 8005ec0:	f800283a 	ret

08005ec4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 8005ec4:	defffa04 	addi	sp,sp,-24
 8005ec8:	dfc00515 	stw	ra,20(sp)
 8005ecc:	df000415 	stw	fp,16(sp)
 8005ed0:	df000404 	addi	fp,sp,16
 8005ed4:	e13ffd15 	stw	r4,-12(fp)
 8005ed8:	e17ffe15 	stw	r5,-8(fp)
 8005edc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 8005ee0:	e0bffd17 	ldw	r2,-12(fp)
 8005ee4:	10800a17 	ldw	r2,40(r2)
 8005ee8:	10800037 	ldwio	r2,0(r2)
 8005eec:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 8005ef0:	e0bffc17 	ldw	r2,-16(fp)
 8005ef4:	1007883a 	mov	r3,r2
 8005ef8:	e0bffe17 	ldw	r2,-8(fp)
 8005efc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 8005f00:	e13ffc17 	ldw	r4,-16(fp)
 8005f04:	8005e400 	call	8005e40 <alt_up_rs232_check_parity>
 8005f08:	1007883a 	mov	r3,r2
 8005f0c:	e0bfff17 	ldw	r2,-4(fp)
 8005f10:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 8005f14:	e0bffc17 	ldw	r2,-16(fp)
 8005f18:	10a0000c 	andi	r2,r2,32768
 8005f1c:	1004d3fa 	srli	r2,r2,15
 8005f20:	10bfffc4 	addi	r2,r2,-1
}
 8005f24:	e037883a 	mov	sp,fp
 8005f28:	dfc00117 	ldw	ra,4(sp)
 8005f2c:	df000017 	ldw	fp,0(sp)
 8005f30:	dec00204 	addi	sp,sp,8
 8005f34:	f800283a 	ret

08005f38 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 8005f38:	defff804 	addi	sp,sp,-32
 8005f3c:	dfc00715 	stw	ra,28(sp)
 8005f40:	df000615 	stw	fp,24(sp)
 8005f44:	df000604 	addi	fp,sp,24
 8005f48:	e13ffd15 	stw	r4,-12(fp)
 8005f4c:	e17ffe15 	stw	r5,-8(fp)
 8005f50:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8005f54:	e0bffd17 	ldw	r2,-12(fp)
 8005f58:	10800017 	ldw	r2,0(r2)
 8005f5c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 8005f60:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 8005f64:	00000e06 	br	8005fa0 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 8005f68:	e0bffe17 	ldw	r2,-8(fp)
 8005f6c:	10c00044 	addi	r3,r2,1
 8005f70:	e0fffe15 	stw	r3,-8(fp)
 8005f74:	e0fffc04 	addi	r3,fp,-16
 8005f78:	e13ffb17 	ldw	r4,-20(fp)
 8005f7c:	100b883a 	mov	r5,r2
 8005f80:	180d883a 	mov	r6,r3
 8005f84:	8005ec40 	call	8005ec4 <alt_up_rs232_read_data>
 8005f88:	1000041e 	bne	r2,zero,8005f9c <alt_up_rs232_read_fd+0x64>
			count++;
 8005f8c:	e0bffa17 	ldw	r2,-24(fp)
 8005f90:	10800044 	addi	r2,r2,1
 8005f94:	e0bffa15 	stw	r2,-24(fp)
 8005f98:	00000106 	br	8005fa0 <alt_up_rs232_read_fd+0x68>
		else
			break;
 8005f9c:	00000406 	br	8005fb0 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 8005fa0:	e0bfff17 	ldw	r2,-4(fp)
 8005fa4:	10ffffc4 	addi	r3,r2,-1
 8005fa8:	e0ffff15 	stw	r3,-4(fp)
 8005fac:	103fee1e 	bne	r2,zero,8005f68 <__alt_data_end+0xfc005f68>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 8005fb0:	e0bffa17 	ldw	r2,-24(fp)
}
 8005fb4:	e037883a 	mov	sp,fp
 8005fb8:	dfc00117 	ldw	ra,4(sp)
 8005fbc:	df000017 	ldw	fp,0(sp)
 8005fc0:	dec00204 	addi	sp,sp,8
 8005fc4:	f800283a 	ret

08005fc8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 8005fc8:	defff904 	addi	sp,sp,-28
 8005fcc:	dfc00615 	stw	ra,24(sp)
 8005fd0:	df000515 	stw	fp,20(sp)
 8005fd4:	df000504 	addi	fp,sp,20
 8005fd8:	e13ffd15 	stw	r4,-12(fp)
 8005fdc:	e17ffe15 	stw	r5,-8(fp)
 8005fe0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 8005fe4:	e0bffd17 	ldw	r2,-12(fp)
 8005fe8:	10800017 	ldw	r2,0(r2)
 8005fec:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 8005ff0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 8005ff4:	00000f06 	br	8006034 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 8005ff8:	e0bffe17 	ldw	r2,-8(fp)
 8005ffc:	10800003 	ldbu	r2,0(r2)
 8006000:	10803fcc 	andi	r2,r2,255
 8006004:	e13ffc17 	ldw	r4,-16(fp)
 8006008:	100b883a 	mov	r5,r2
 800600c:	8005e840 	call	8005e84 <alt_up_rs232_write_data>
 8006010:	1000071e 	bne	r2,zero,8006030 <alt_up_rs232_write_fd+0x68>
		{
			count++;
 8006014:	e0bffb17 	ldw	r2,-20(fp)
 8006018:	10800044 	addi	r2,r2,1
 800601c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 8006020:	e0bffe17 	ldw	r2,-8(fp)
 8006024:	10800044 	addi	r2,r2,1
 8006028:	e0bffe15 	stw	r2,-8(fp)
 800602c:	00000106 	br	8006034 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
 8006030:	00000406 	br	8006044 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 8006034:	e0bfff17 	ldw	r2,-4(fp)
 8006038:	10ffffc4 	addi	r3,r2,-1
 800603c:	e0ffff15 	stw	r3,-4(fp)
 8006040:	103fed1e 	bne	r2,zero,8005ff8 <__alt_data_end+0xfc005ff8>
			ptr++;
		}
		else
			break;
	}
	return count;
 8006044:	e0bffb17 	ldw	r2,-20(fp)
}
 8006048:	e037883a 	mov	sp,fp
 800604c:	dfc00117 	ldw	ra,4(sp)
 8006050:	df000017 	ldw	fp,0(sp)
 8006054:	dec00204 	addi	sp,sp,8
 8006058:	f800283a 	ret

0800605c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 800605c:	defffc04 	addi	sp,sp,-16
 8006060:	dfc00315 	stw	ra,12(sp)
 8006064:	df000215 	stw	fp,8(sp)
 8006068:	df000204 	addi	fp,sp,8
 800606c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 8006070:	e13fff17 	ldw	r4,-4(fp)
 8006074:	01420034 	movhi	r5,2048
 8006078:	295f0c04 	addi	r5,r5,31792
 800607c:	80046100 	call	8004610 <alt_find_dev>
 8006080:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8006084:	e0bffe17 	ldw	r2,-8(fp)
}
 8006088:	e037883a 	mov	sp,fp
 800608c:	dfc00117 	ldw	ra,4(sp)
 8006090:	df000017 	ldw	fp,0(sp)
 8006094:	dec00204 	addi	sp,sp,8
 8006098:	f800283a 	ret

0800609c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800609c:	defffe04 	addi	sp,sp,-8
 80060a0:	dfc00115 	stw	ra,4(sp)
 80060a4:	df000015 	stw	fp,0(sp)
 80060a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80060ac:	00820034 	movhi	r2,2048
 80060b0:	109f0804 	addi	r2,r2,31776
 80060b4:	10800017 	ldw	r2,0(r2)
 80060b8:	10000526 	beq	r2,zero,80060d0 <alt_get_errno+0x34>
 80060bc:	00820034 	movhi	r2,2048
 80060c0:	109f0804 	addi	r2,r2,31776
 80060c4:	10800017 	ldw	r2,0(r2)
 80060c8:	103ee83a 	callr	r2
 80060cc:	00000206 	br	80060d8 <alt_get_errno+0x3c>
 80060d0:	00820074 	movhi	r2,2049
 80060d4:	10a13904 	addi	r2,r2,-31516
}
 80060d8:	e037883a 	mov	sp,fp
 80060dc:	dfc00117 	ldw	ra,4(sp)
 80060e0:	df000017 	ldw	fp,0(sp)
 80060e4:	dec00204 	addi	sp,sp,8
 80060e8:	f800283a 	ret

080060ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80060ec:	defffb04 	addi	sp,sp,-20
 80060f0:	dfc00415 	stw	ra,16(sp)
 80060f4:	df000315 	stw	fp,12(sp)
 80060f8:	df000304 	addi	fp,sp,12
 80060fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8006100:	e0bfff17 	ldw	r2,-4(fp)
 8006104:	10000816 	blt	r2,zero,8006128 <close+0x3c>
 8006108:	e13fff17 	ldw	r4,-4(fp)
 800610c:	01400304 	movi	r5,12
 8006110:	80026d00 	call	80026d0 <__mulsi3>
 8006114:	1007883a 	mov	r3,r2
 8006118:	00820034 	movhi	r2,2048
 800611c:	109e9004 	addi	r2,r2,31296
 8006120:	1885883a 	add	r2,r3,r2
 8006124:	00000106 	br	800612c <close+0x40>
 8006128:	0005883a 	mov	r2,zero
 800612c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8006130:	e0bffd17 	ldw	r2,-12(fp)
 8006134:	10001926 	beq	r2,zero,800619c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8006138:	e0bffd17 	ldw	r2,-12(fp)
 800613c:	10800017 	ldw	r2,0(r2)
 8006140:	10800417 	ldw	r2,16(r2)
 8006144:	10000626 	beq	r2,zero,8006160 <close+0x74>
 8006148:	e0bffd17 	ldw	r2,-12(fp)
 800614c:	10800017 	ldw	r2,0(r2)
 8006150:	10800417 	ldw	r2,16(r2)
 8006154:	e13ffd17 	ldw	r4,-12(fp)
 8006158:	103ee83a 	callr	r2
 800615c:	00000106 	br	8006164 <close+0x78>
 8006160:	0005883a 	mov	r2,zero
 8006164:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8006168:	e13fff17 	ldw	r4,-4(fp)
 800616c:	8006a240 	call	8006a24 <alt_release_fd>
    if (rval < 0)
 8006170:	e0bffe17 	ldw	r2,-8(fp)
 8006174:	1000070e 	bge	r2,zero,8006194 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8006178:	800609c0 	call	800609c <alt_get_errno>
 800617c:	1007883a 	mov	r3,r2
 8006180:	e0bffe17 	ldw	r2,-8(fp)
 8006184:	0085c83a 	sub	r2,zero,r2
 8006188:	18800015 	stw	r2,0(r3)
      return -1;
 800618c:	00bfffc4 	movi	r2,-1
 8006190:	00000706 	br	80061b0 <close+0xc4>
    }
    return 0;
 8006194:	0005883a 	mov	r2,zero
 8006198:	00000506 	br	80061b0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800619c:	800609c0 	call	800609c <alt_get_errno>
 80061a0:	1007883a 	mov	r3,r2
 80061a4:	00801444 	movi	r2,81
 80061a8:	18800015 	stw	r2,0(r3)
    return -1;
 80061ac:	00bfffc4 	movi	r2,-1
  }
}
 80061b0:	e037883a 	mov	sp,fp
 80061b4:	dfc00117 	ldw	ra,4(sp)
 80061b8:	df000017 	ldw	fp,0(sp)
 80061bc:	dec00204 	addi	sp,sp,8
 80061c0:	f800283a 	ret

080061c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80061c4:	deffff04 	addi	sp,sp,-4
 80061c8:	df000015 	stw	fp,0(sp)
 80061cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80061d0:	e037883a 	mov	sp,fp
 80061d4:	df000017 	ldw	fp,0(sp)
 80061d8:	dec00104 	addi	sp,sp,4
 80061dc:	f800283a 	ret

080061e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80061e0:	defffc04 	addi	sp,sp,-16
 80061e4:	df000315 	stw	fp,12(sp)
 80061e8:	df000304 	addi	fp,sp,12
 80061ec:	e13ffd15 	stw	r4,-12(fp)
 80061f0:	e17ffe15 	stw	r5,-8(fp)
 80061f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80061f8:	e0bfff17 	ldw	r2,-4(fp)
}
 80061fc:	e037883a 	mov	sp,fp
 8006200:	df000017 	ldw	fp,0(sp)
 8006204:	dec00104 	addi	sp,sp,4
 8006208:	f800283a 	ret

0800620c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800620c:	defffe04 	addi	sp,sp,-8
 8006210:	dfc00115 	stw	ra,4(sp)
 8006214:	df000015 	stw	fp,0(sp)
 8006218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800621c:	00820034 	movhi	r2,2048
 8006220:	109f0804 	addi	r2,r2,31776
 8006224:	10800017 	ldw	r2,0(r2)
 8006228:	10000526 	beq	r2,zero,8006240 <alt_get_errno+0x34>
 800622c:	00820034 	movhi	r2,2048
 8006230:	109f0804 	addi	r2,r2,31776
 8006234:	10800017 	ldw	r2,0(r2)
 8006238:	103ee83a 	callr	r2
 800623c:	00000206 	br	8006248 <alt_get_errno+0x3c>
 8006240:	00820074 	movhi	r2,2049
 8006244:	10a13904 	addi	r2,r2,-31516
}
 8006248:	e037883a 	mov	sp,fp
 800624c:	dfc00117 	ldw	ra,4(sp)
 8006250:	df000017 	ldw	fp,0(sp)
 8006254:	dec00204 	addi	sp,sp,8
 8006258:	f800283a 	ret

0800625c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800625c:	defffa04 	addi	sp,sp,-24
 8006260:	dfc00515 	stw	ra,20(sp)
 8006264:	df000415 	stw	fp,16(sp)
 8006268:	df000404 	addi	fp,sp,16
 800626c:	e13ffe15 	stw	r4,-8(fp)
 8006270:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8006274:	e0bffe17 	ldw	r2,-8(fp)
 8006278:	10000326 	beq	r2,zero,8006288 <alt_dev_llist_insert+0x2c>
 800627c:	e0bffe17 	ldw	r2,-8(fp)
 8006280:	10800217 	ldw	r2,8(r2)
 8006284:	1000061e 	bne	r2,zero,80062a0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8006288:	800620c0 	call	800620c <alt_get_errno>
 800628c:	1007883a 	mov	r3,r2
 8006290:	00800584 	movi	r2,22
 8006294:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8006298:	00bffa84 	movi	r2,-22
 800629c:	00001306 	br	80062ec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80062a0:	e0bffe17 	ldw	r2,-8(fp)
 80062a4:	e0ffff17 	ldw	r3,-4(fp)
 80062a8:	e0fffc15 	stw	r3,-16(fp)
 80062ac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80062b0:	e0bffd17 	ldw	r2,-12(fp)
 80062b4:	e0fffc17 	ldw	r3,-16(fp)
 80062b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80062bc:	e0bffc17 	ldw	r2,-16(fp)
 80062c0:	10c00017 	ldw	r3,0(r2)
 80062c4:	e0bffd17 	ldw	r2,-12(fp)
 80062c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80062cc:	e0bffc17 	ldw	r2,-16(fp)
 80062d0:	10800017 	ldw	r2,0(r2)
 80062d4:	e0fffd17 	ldw	r3,-12(fp)
 80062d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80062dc:	e0bffc17 	ldw	r2,-16(fp)
 80062e0:	e0fffd17 	ldw	r3,-12(fp)
 80062e4:	10c00015 	stw	r3,0(r2)

  return 0;  
 80062e8:	0005883a 	mov	r2,zero
}
 80062ec:	e037883a 	mov	sp,fp
 80062f0:	dfc00117 	ldw	ra,4(sp)
 80062f4:	df000017 	ldw	fp,0(sp)
 80062f8:	dec00204 	addi	sp,sp,8
 80062fc:	f800283a 	ret

08006300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006300:	defffe04 	addi	sp,sp,-8
 8006304:	dfc00115 	stw	ra,4(sp)
 8006308:	df000015 	stw	fp,0(sp)
 800630c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006310:	00820034 	movhi	r2,2048
 8006314:	109f0804 	addi	r2,r2,31776
 8006318:	10800017 	ldw	r2,0(r2)
 800631c:	10000526 	beq	r2,zero,8006334 <alt_get_errno+0x34>
 8006320:	00820034 	movhi	r2,2048
 8006324:	109f0804 	addi	r2,r2,31776
 8006328:	10800017 	ldw	r2,0(r2)
 800632c:	103ee83a 	callr	r2
 8006330:	00000206 	br	800633c <alt_get_errno+0x3c>
 8006334:	00820074 	movhi	r2,2049
 8006338:	10a13904 	addi	r2,r2,-31516
}
 800633c:	e037883a 	mov	sp,fp
 8006340:	dfc00117 	ldw	ra,4(sp)
 8006344:	df000017 	ldw	fp,0(sp)
 8006348:	dec00204 	addi	sp,sp,8
 800634c:	f800283a 	ret

08006350 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 8006350:	defffc04 	addi	sp,sp,-16
 8006354:	dfc00315 	stw	ra,12(sp)
 8006358:	df000215 	stw	fp,8(sp)
 800635c:	df000204 	addi	fp,sp,8
 8006360:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 8006364:	e13fff17 	ldw	r4,-4(fp)
 8006368:	d1601f04 	addi	r5,gp,-32644
 800636c:	80046100 	call	8004610 <alt_find_dev>
 8006370:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 8006374:	e0bffe17 	ldw	r2,-8(fp)
 8006378:	1000041e 	bne	r2,zero,800638c <alt_dma_rxchan_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 800637c:	80063000 	call	8006300 <alt_get_errno>
 8006380:	1007883a 	mov	r3,r2
 8006384:	008004c4 	movi	r2,19
 8006388:	18800015 	stw	r2,0(r3)
  }

  return dev;
 800638c:	e0bffe17 	ldw	r2,-8(fp)
}
 8006390:	e037883a 	mov	sp,fp
 8006394:	dfc00117 	ldw	ra,4(sp)
 8006398:	df000017 	ldw	fp,0(sp)
 800639c:	dec00204 	addi	sp,sp,8
 80063a0:	f800283a 	ret

080063a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80063a4:	defffd04 	addi	sp,sp,-12
 80063a8:	dfc00215 	stw	ra,8(sp)
 80063ac:	df000115 	stw	fp,4(sp)
 80063b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80063b4:	00820034 	movhi	r2,2048
 80063b8:	109bee04 	addi	r2,r2,28600
 80063bc:	e0bfff15 	stw	r2,-4(fp)
 80063c0:	00000606 	br	80063dc <_do_ctors+0x38>
        (*ctor) (); 
 80063c4:	e0bfff17 	ldw	r2,-4(fp)
 80063c8:	10800017 	ldw	r2,0(r2)
 80063cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80063d0:	e0bfff17 	ldw	r2,-4(fp)
 80063d4:	10bfff04 	addi	r2,r2,-4
 80063d8:	e0bfff15 	stw	r2,-4(fp)
 80063dc:	e0ffff17 	ldw	r3,-4(fp)
 80063e0:	00820034 	movhi	r2,2048
 80063e4:	109bef04 	addi	r2,r2,28604
 80063e8:	18bff62e 	bgeu	r3,r2,80063c4 <__alt_data_end+0xfc0063c4>
        (*ctor) (); 
}
 80063ec:	e037883a 	mov	sp,fp
 80063f0:	dfc00117 	ldw	ra,4(sp)
 80063f4:	df000017 	ldw	fp,0(sp)
 80063f8:	dec00204 	addi	sp,sp,8
 80063fc:	f800283a 	ret

08006400 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8006400:	defffd04 	addi	sp,sp,-12
 8006404:	dfc00215 	stw	ra,8(sp)
 8006408:	df000115 	stw	fp,4(sp)
 800640c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006410:	00820034 	movhi	r2,2048
 8006414:	109bee04 	addi	r2,r2,28600
 8006418:	e0bfff15 	stw	r2,-4(fp)
 800641c:	00000606 	br	8006438 <_do_dtors+0x38>
        (*dtor) (); 
 8006420:	e0bfff17 	ldw	r2,-4(fp)
 8006424:	10800017 	ldw	r2,0(r2)
 8006428:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800642c:	e0bfff17 	ldw	r2,-4(fp)
 8006430:	10bfff04 	addi	r2,r2,-4
 8006434:	e0bfff15 	stw	r2,-4(fp)
 8006438:	e0ffff17 	ldw	r3,-4(fp)
 800643c:	00820034 	movhi	r2,2048
 8006440:	109bef04 	addi	r2,r2,28604
 8006444:	18bff62e 	bgeu	r3,r2,8006420 <__alt_data_end+0xfc006420>
        (*dtor) (); 
}
 8006448:	e037883a 	mov	sp,fp
 800644c:	dfc00117 	ldw	ra,4(sp)
 8006450:	df000017 	ldw	fp,0(sp)
 8006454:	dec00204 	addi	sp,sp,8
 8006458:	f800283a 	ret

0800645c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800645c:	deffff04 	addi	sp,sp,-4
 8006460:	df000015 	stw	fp,0(sp)
 8006464:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8006468:	e037883a 	mov	sp,fp
 800646c:	df000017 	ldw	fp,0(sp)
 8006470:	dec00104 	addi	sp,sp,4
 8006474:	f800283a 	ret

08006478 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006478:	defff804 	addi	sp,sp,-32
 800647c:	dfc00715 	stw	ra,28(sp)
 8006480:	df000615 	stw	fp,24(sp)
 8006484:	dc000515 	stw	r16,20(sp)
 8006488:	df000604 	addi	fp,sp,24
 800648c:	e13ffb15 	stw	r4,-20(fp)
 8006490:	e17ffc15 	stw	r5,-16(fp)
 8006494:	e1bffd15 	stw	r6,-12(fp)
 8006498:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800649c:	e13ffc17 	ldw	r4,-16(fp)
 80064a0:	e17ffd17 	ldw	r5,-12(fp)
 80064a4:	e1bffe17 	ldw	r6,-8(fp)
 80064a8:	80068c40 	call	80068c4 <open>
 80064ac:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80064b0:	e0bffa17 	ldw	r2,-24(fp)
 80064b4:	10002216 	blt	r2,zero,8006540 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80064b8:	04020034 	movhi	r16,2048
 80064bc:	841e9004 	addi	r16,r16,31296
 80064c0:	e0bffa17 	ldw	r2,-24(fp)
 80064c4:	1009883a 	mov	r4,r2
 80064c8:	01400304 	movi	r5,12
 80064cc:	80026d00 	call	80026d0 <__mulsi3>
 80064d0:	8085883a 	add	r2,r16,r2
 80064d4:	10c00017 	ldw	r3,0(r2)
 80064d8:	e0bffb17 	ldw	r2,-20(fp)
 80064dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80064e0:	04020034 	movhi	r16,2048
 80064e4:	841e9004 	addi	r16,r16,31296
 80064e8:	e0bffa17 	ldw	r2,-24(fp)
 80064ec:	1009883a 	mov	r4,r2
 80064f0:	01400304 	movi	r5,12
 80064f4:	80026d00 	call	80026d0 <__mulsi3>
 80064f8:	8085883a 	add	r2,r16,r2
 80064fc:	10800104 	addi	r2,r2,4
 8006500:	10c00017 	ldw	r3,0(r2)
 8006504:	e0bffb17 	ldw	r2,-20(fp)
 8006508:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800650c:	04020034 	movhi	r16,2048
 8006510:	841e9004 	addi	r16,r16,31296
 8006514:	e0bffa17 	ldw	r2,-24(fp)
 8006518:	1009883a 	mov	r4,r2
 800651c:	01400304 	movi	r5,12
 8006520:	80026d00 	call	80026d0 <__mulsi3>
 8006524:	8085883a 	add	r2,r16,r2
 8006528:	10800204 	addi	r2,r2,8
 800652c:	10c00017 	ldw	r3,0(r2)
 8006530:	e0bffb17 	ldw	r2,-20(fp)
 8006534:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006538:	e13ffa17 	ldw	r4,-24(fp)
 800653c:	8006a240 	call	8006a24 <alt_release_fd>
  }
} 
 8006540:	e6ffff04 	addi	sp,fp,-4
 8006544:	dfc00217 	ldw	ra,8(sp)
 8006548:	df000117 	ldw	fp,4(sp)
 800654c:	dc000017 	ldw	r16,0(sp)
 8006550:	dec00304 	addi	sp,sp,12
 8006554:	f800283a 	ret

08006558 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8006558:	defffb04 	addi	sp,sp,-20
 800655c:	dfc00415 	stw	ra,16(sp)
 8006560:	df000315 	stw	fp,12(sp)
 8006564:	df000304 	addi	fp,sp,12
 8006568:	e13ffd15 	stw	r4,-12(fp)
 800656c:	e17ffe15 	stw	r5,-8(fp)
 8006570:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8006574:	01020034 	movhi	r4,2048
 8006578:	211e9304 	addi	r4,r4,31308
 800657c:	e17ffd17 	ldw	r5,-12(fp)
 8006580:	01800044 	movi	r6,1
 8006584:	01c07fc4 	movi	r7,511
 8006588:	80064780 	call	8006478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800658c:	01020034 	movhi	r4,2048
 8006590:	211e9004 	addi	r4,r4,31296
 8006594:	e17ffe17 	ldw	r5,-8(fp)
 8006598:	000d883a 	mov	r6,zero
 800659c:	01c07fc4 	movi	r7,511
 80065a0:	80064780 	call	8006478 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80065a4:	01020034 	movhi	r4,2048
 80065a8:	211e9604 	addi	r4,r4,31320
 80065ac:	e17fff17 	ldw	r5,-4(fp)
 80065b0:	01800044 	movi	r6,1
 80065b4:	01c07fc4 	movi	r7,511
 80065b8:	80064780 	call	8006478 <alt_open_fd>
}  
 80065bc:	e037883a 	mov	sp,fp
 80065c0:	dfc00117 	ldw	ra,4(sp)
 80065c4:	df000017 	ldw	fp,0(sp)
 80065c8:	dec00204 	addi	sp,sp,8
 80065cc:	f800283a 	ret

080065d0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 80065d0:	defff004 	addi	sp,sp,-64
 80065d4:	df000f15 	stw	fp,60(sp)
 80065d8:	df000f04 	addi	fp,sp,60
 80065dc:	e13ffd15 	stw	r4,-12(fp)
 80065e0:	e17ffe15 	stw	r5,-8(fp)
 80065e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 80065e8:	00bffa84 	movi	r2,-22
 80065ec:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80065f0:	e0bffd17 	ldw	r2,-12(fp)
 80065f4:	10800828 	cmpgeui	r2,r2,32
 80065f8:	10005c1e 	bne	r2,zero,800676c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80065fc:	0005303a 	rdctl	r2,status
 8006600:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006604:	e0fff317 	ldw	r3,-52(fp)
 8006608:	00bfff84 	movi	r2,-2
 800660c:	1884703a 	and	r2,r3,r2
 8006610:	1001703a 	wrctl	status,r2
  
  return context;
 8006614:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8006618:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 800661c:	00820074 	movhi	r2,2049
 8006620:	10a38904 	addi	r2,r2,-29148
 8006624:	e0fffd17 	ldw	r3,-12(fp)
 8006628:	180690fa 	slli	r3,r3,3
 800662c:	10c5883a 	add	r2,r2,r3
 8006630:	e0ffff17 	ldw	r3,-4(fp)
 8006634:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8006638:	00820074 	movhi	r2,2049
 800663c:	10a38904 	addi	r2,r2,-29148
 8006640:	e0fffd17 	ldw	r3,-12(fp)
 8006644:	180690fa 	slli	r3,r3,3
 8006648:	10c5883a 	add	r2,r2,r3
 800664c:	10800104 	addi	r2,r2,4
 8006650:	e0fffe17 	ldw	r3,-8(fp)
 8006654:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8006658:	e0bfff17 	ldw	r2,-4(fp)
 800665c:	10001f26 	beq	r2,zero,80066dc <alt_irq_register+0x10c>
 8006660:	e0bffd17 	ldw	r2,-12(fp)
 8006664:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006668:	0005303a 	rdctl	r2,status
 800666c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006670:	e0fff517 	ldw	r3,-44(fp)
 8006674:	00bfff84 	movi	r2,-2
 8006678:	1884703a 	and	r2,r3,r2
 800667c:	1001703a 	wrctl	status,r2
  
  return context;
 8006680:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006684:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 8006688:	e0bff417 	ldw	r2,-48(fp)
 800668c:	00c00044 	movi	r3,1
 8006690:	1884983a 	sll	r2,r3,r2
 8006694:	1007883a 	mov	r3,r2
 8006698:	00820074 	movhi	r2,2049
 800669c:	10a13d04 	addi	r2,r2,-31500
 80066a0:	10800017 	ldw	r2,0(r2)
 80066a4:	1886b03a 	or	r3,r3,r2
 80066a8:	00820074 	movhi	r2,2049
 80066ac:	10a13d04 	addi	r2,r2,-31500
 80066b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80066b4:	00820074 	movhi	r2,2049
 80066b8:	10a13d04 	addi	r2,r2,-31500
 80066bc:	10800017 	ldw	r2,0(r2)
 80066c0:	100170fa 	wrctl	ienable,r2
 80066c4:	e0bff617 	ldw	r2,-40(fp)
 80066c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80066cc:	e0bff717 	ldw	r2,-36(fp)
 80066d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80066d4:	0005883a 	mov	r2,zero
 80066d8:	00001f06 	br	8006758 <alt_irq_register+0x188>
 80066dc:	e0bffd17 	ldw	r2,-12(fp)
 80066e0:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80066e4:	0005303a 	rdctl	r2,status
 80066e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80066ec:	e0fff917 	ldw	r3,-28(fp)
 80066f0:	00bfff84 	movi	r2,-2
 80066f4:	1884703a 	and	r2,r3,r2
 80066f8:	1001703a 	wrctl	status,r2
  
  return context;
 80066fc:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006700:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 8006704:	e0bff817 	ldw	r2,-32(fp)
 8006708:	00c00044 	movi	r3,1
 800670c:	1884983a 	sll	r2,r3,r2
 8006710:	0084303a 	nor	r2,zero,r2
 8006714:	1007883a 	mov	r3,r2
 8006718:	00820074 	movhi	r2,2049
 800671c:	10a13d04 	addi	r2,r2,-31500
 8006720:	10800017 	ldw	r2,0(r2)
 8006724:	1886703a 	and	r3,r3,r2
 8006728:	00820074 	movhi	r2,2049
 800672c:	10a13d04 	addi	r2,r2,-31500
 8006730:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006734:	00820074 	movhi	r2,2049
 8006738:	10a13d04 	addi	r2,r2,-31500
 800673c:	10800017 	ldw	r2,0(r2)
 8006740:	100170fa 	wrctl	ienable,r2
 8006744:	e0bffa17 	ldw	r2,-24(fp)
 8006748:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800674c:	e0bffb17 	ldw	r2,-20(fp)
 8006750:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006754:	0005883a 	mov	r2,zero
 8006758:	e0bff115 	stw	r2,-60(fp)
 800675c:	e0bff217 	ldw	r2,-56(fp)
 8006760:	e0bffc15 	stw	r2,-16(fp)
 8006764:	e0bffc17 	ldw	r2,-16(fp)
 8006768:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 800676c:	e0bff117 	ldw	r2,-60(fp)
}
 8006770:	e037883a 	mov	sp,fp
 8006774:	df000017 	ldw	fp,0(sp)
 8006778:	dec00104 	addi	sp,sp,4
 800677c:	f800283a 	ret

08006780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006780:	defffe04 	addi	sp,sp,-8
 8006784:	dfc00115 	stw	ra,4(sp)
 8006788:	df000015 	stw	fp,0(sp)
 800678c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006790:	00820034 	movhi	r2,2048
 8006794:	109f0804 	addi	r2,r2,31776
 8006798:	10800017 	ldw	r2,0(r2)
 800679c:	10000526 	beq	r2,zero,80067b4 <alt_get_errno+0x34>
 80067a0:	00820034 	movhi	r2,2048
 80067a4:	109f0804 	addi	r2,r2,31776
 80067a8:	10800017 	ldw	r2,0(r2)
 80067ac:	103ee83a 	callr	r2
 80067b0:	00000206 	br	80067bc <alt_get_errno+0x3c>
 80067b4:	00820074 	movhi	r2,2049
 80067b8:	10a13904 	addi	r2,r2,-31516
}
 80067bc:	e037883a 	mov	sp,fp
 80067c0:	dfc00117 	ldw	ra,4(sp)
 80067c4:	df000017 	ldw	fp,0(sp)
 80067c8:	dec00204 	addi	sp,sp,8
 80067cc:	f800283a 	ret

080067d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80067d0:	defffb04 	addi	sp,sp,-20
 80067d4:	dfc00415 	stw	ra,16(sp)
 80067d8:	df000315 	stw	fp,12(sp)
 80067dc:	dc000215 	stw	r16,8(sp)
 80067e0:	df000304 	addi	fp,sp,12
 80067e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80067e8:	e0bffe17 	ldw	r2,-8(fp)
 80067ec:	10800217 	ldw	r2,8(r2)
 80067f0:	10d00034 	orhi	r3,r2,16384
 80067f4:	e0bffe17 	ldw	r2,-8(fp)
 80067f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80067fc:	e03ffd15 	stw	zero,-12(fp)
 8006800:	00002306 	br	8006890 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006804:	04020034 	movhi	r16,2048
 8006808:	841e9004 	addi	r16,r16,31296
 800680c:	e0bffd17 	ldw	r2,-12(fp)
 8006810:	1009883a 	mov	r4,r2
 8006814:	01400304 	movi	r5,12
 8006818:	80026d00 	call	80026d0 <__mulsi3>
 800681c:	8085883a 	add	r2,r16,r2
 8006820:	10c00017 	ldw	r3,0(r2)
 8006824:	e0bffe17 	ldw	r2,-8(fp)
 8006828:	10800017 	ldw	r2,0(r2)
 800682c:	1880151e 	bne	r3,r2,8006884 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8006830:	04020034 	movhi	r16,2048
 8006834:	841e9004 	addi	r16,r16,31296
 8006838:	e0bffd17 	ldw	r2,-12(fp)
 800683c:	1009883a 	mov	r4,r2
 8006840:	01400304 	movi	r5,12
 8006844:	80026d00 	call	80026d0 <__mulsi3>
 8006848:	8085883a 	add	r2,r16,r2
 800684c:	10800204 	addi	r2,r2,8
 8006850:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006854:	10000b0e 	bge	r2,zero,8006884 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8006858:	e13ffd17 	ldw	r4,-12(fp)
 800685c:	01400304 	movi	r5,12
 8006860:	80026d00 	call	80026d0 <__mulsi3>
 8006864:	1007883a 	mov	r3,r2
 8006868:	00820034 	movhi	r2,2048
 800686c:	109e9004 	addi	r2,r2,31296
 8006870:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8006874:	e0bffe17 	ldw	r2,-8(fp)
 8006878:	18800226 	beq	r3,r2,8006884 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800687c:	00bffcc4 	movi	r2,-13
 8006880:	00000a06 	br	80068ac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006884:	e0bffd17 	ldw	r2,-12(fp)
 8006888:	10800044 	addi	r2,r2,1
 800688c:	e0bffd15 	stw	r2,-12(fp)
 8006890:	00820034 	movhi	r2,2048
 8006894:	109f0e04 	addi	r2,r2,31800
 8006898:	10800017 	ldw	r2,0(r2)
 800689c:	1007883a 	mov	r3,r2
 80068a0:	e0bffd17 	ldw	r2,-12(fp)
 80068a4:	18bfd72e 	bgeu	r3,r2,8006804 <__alt_data_end+0xfc006804>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80068a8:	0005883a 	mov	r2,zero
}
 80068ac:	e6ffff04 	addi	sp,fp,-4
 80068b0:	dfc00217 	ldw	ra,8(sp)
 80068b4:	df000117 	ldw	fp,4(sp)
 80068b8:	dc000017 	ldw	r16,0(sp)
 80068bc:	dec00304 	addi	sp,sp,12
 80068c0:	f800283a 	ret

080068c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80068c4:	defff604 	addi	sp,sp,-40
 80068c8:	dfc00915 	stw	ra,36(sp)
 80068cc:	df000815 	stw	fp,32(sp)
 80068d0:	df000804 	addi	fp,sp,32
 80068d4:	e13ffd15 	stw	r4,-12(fp)
 80068d8:	e17ffe15 	stw	r5,-8(fp)
 80068dc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80068e0:	00bfffc4 	movi	r2,-1
 80068e4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80068e8:	00bffb44 	movi	r2,-19
 80068ec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80068f0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80068f4:	e13ffd17 	ldw	r4,-12(fp)
 80068f8:	01420034 	movhi	r5,2048
 80068fc:	295f0c04 	addi	r5,r5,31792
 8006900:	80046100 	call	8004610 <alt_find_dev>
 8006904:	e0bff815 	stw	r2,-32(fp)
 8006908:	e0bff817 	ldw	r2,-32(fp)
 800690c:	1000051e 	bne	r2,zero,8006924 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8006910:	e13ffd17 	ldw	r4,-12(fp)
 8006914:	8006ac40 	call	8006ac4 <alt_find_file>
 8006918:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800691c:	00800044 	movi	r2,1
 8006920:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8006924:	e0bff817 	ldw	r2,-32(fp)
 8006928:	10002b26 	beq	r2,zero,80069d8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800692c:	e13ff817 	ldw	r4,-32(fp)
 8006930:	8006bd80 	call	8006bd8 <alt_get_fd>
 8006934:	e0bff915 	stw	r2,-28(fp)
 8006938:	e0bff917 	ldw	r2,-28(fp)
 800693c:	1000030e 	bge	r2,zero,800694c <open+0x88>
    {
      status = index;
 8006940:	e0bff917 	ldw	r2,-28(fp)
 8006944:	e0bffa15 	stw	r2,-24(fp)
 8006948:	00002506 	br	80069e0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800694c:	e13ff917 	ldw	r4,-28(fp)
 8006950:	01400304 	movi	r5,12
 8006954:	80026d00 	call	80026d0 <__mulsi3>
 8006958:	1007883a 	mov	r3,r2
 800695c:	00820034 	movhi	r2,2048
 8006960:	109e9004 	addi	r2,r2,31296
 8006964:	1885883a 	add	r2,r3,r2
 8006968:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800696c:	e0fffe17 	ldw	r3,-8(fp)
 8006970:	00900034 	movhi	r2,16384
 8006974:	10bfffc4 	addi	r2,r2,-1
 8006978:	1886703a 	and	r3,r3,r2
 800697c:	e0bffc17 	ldw	r2,-16(fp)
 8006980:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8006984:	e0bffb17 	ldw	r2,-20(fp)
 8006988:	1000051e 	bne	r2,zero,80069a0 <open+0xdc>
 800698c:	e13ffc17 	ldw	r4,-16(fp)
 8006990:	80067d00 	call	80067d0 <alt_file_locked>
 8006994:	e0bffa15 	stw	r2,-24(fp)
 8006998:	e0bffa17 	ldw	r2,-24(fp)
 800699c:	10001016 	blt	r2,zero,80069e0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80069a0:	e0bff817 	ldw	r2,-32(fp)
 80069a4:	10800317 	ldw	r2,12(r2)
 80069a8:	10000826 	beq	r2,zero,80069cc <open+0x108>
 80069ac:	e0bff817 	ldw	r2,-32(fp)
 80069b0:	10800317 	ldw	r2,12(r2)
 80069b4:	e13ffc17 	ldw	r4,-16(fp)
 80069b8:	e17ffd17 	ldw	r5,-12(fp)
 80069bc:	e1bffe17 	ldw	r6,-8(fp)
 80069c0:	e1ffff17 	ldw	r7,-4(fp)
 80069c4:	103ee83a 	callr	r2
 80069c8:	00000106 	br	80069d0 <open+0x10c>
 80069cc:	0005883a 	mov	r2,zero
 80069d0:	e0bffa15 	stw	r2,-24(fp)
 80069d4:	00000206 	br	80069e0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80069d8:	00bffb44 	movi	r2,-19
 80069dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80069e0:	e0bffa17 	ldw	r2,-24(fp)
 80069e4:	1000090e 	bge	r2,zero,8006a0c <open+0x148>
  {
    alt_release_fd (index);  
 80069e8:	e13ff917 	ldw	r4,-28(fp)
 80069ec:	8006a240 	call	8006a24 <alt_release_fd>
    ALT_ERRNO = -status;
 80069f0:	80067800 	call	8006780 <alt_get_errno>
 80069f4:	1007883a 	mov	r3,r2
 80069f8:	e0bffa17 	ldw	r2,-24(fp)
 80069fc:	0085c83a 	sub	r2,zero,r2
 8006a00:	18800015 	stw	r2,0(r3)
    return -1;
 8006a04:	00bfffc4 	movi	r2,-1
 8006a08:	00000106 	br	8006a10 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8006a0c:	e0bff917 	ldw	r2,-28(fp)
}
 8006a10:	e037883a 	mov	sp,fp
 8006a14:	dfc00117 	ldw	ra,4(sp)
 8006a18:	df000017 	ldw	fp,0(sp)
 8006a1c:	dec00204 	addi	sp,sp,8
 8006a20:	f800283a 	ret

08006a24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8006a24:	defffc04 	addi	sp,sp,-16
 8006a28:	dfc00315 	stw	ra,12(sp)
 8006a2c:	df000215 	stw	fp,8(sp)
 8006a30:	dc000115 	stw	r16,4(sp)
 8006a34:	df000204 	addi	fp,sp,8
 8006a38:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8006a3c:	e0bffe17 	ldw	r2,-8(fp)
 8006a40:	108000d0 	cmplti	r2,r2,3
 8006a44:	1000111e 	bne	r2,zero,8006a8c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8006a48:	04020034 	movhi	r16,2048
 8006a4c:	841e9004 	addi	r16,r16,31296
 8006a50:	e0bffe17 	ldw	r2,-8(fp)
 8006a54:	1009883a 	mov	r4,r2
 8006a58:	01400304 	movi	r5,12
 8006a5c:	80026d00 	call	80026d0 <__mulsi3>
 8006a60:	8085883a 	add	r2,r16,r2
 8006a64:	10800204 	addi	r2,r2,8
 8006a68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8006a6c:	04020034 	movhi	r16,2048
 8006a70:	841e9004 	addi	r16,r16,31296
 8006a74:	e0bffe17 	ldw	r2,-8(fp)
 8006a78:	1009883a 	mov	r4,r2
 8006a7c:	01400304 	movi	r5,12
 8006a80:	80026d00 	call	80026d0 <__mulsi3>
 8006a84:	8085883a 	add	r2,r16,r2
 8006a88:	10000015 	stw	zero,0(r2)
  }
}
 8006a8c:	e6ffff04 	addi	sp,fp,-4
 8006a90:	dfc00217 	ldw	ra,8(sp)
 8006a94:	df000117 	ldw	fp,4(sp)
 8006a98:	dc000017 	ldw	r16,0(sp)
 8006a9c:	dec00304 	addi	sp,sp,12
 8006aa0:	f800283a 	ret

08006aa4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8006aa4:	deffff04 	addi	sp,sp,-4
 8006aa8:	df000015 	stw	fp,0(sp)
 8006aac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006ab0:	000170fa 	wrctl	ienable,zero
}
 8006ab4:	e037883a 	mov	sp,fp
 8006ab8:	df000017 	ldw	fp,0(sp)
 8006abc:	dec00104 	addi	sp,sp,4
 8006ac0:	f800283a 	ret

08006ac4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006ac4:	defffb04 	addi	sp,sp,-20
 8006ac8:	dfc00415 	stw	ra,16(sp)
 8006acc:	df000315 	stw	fp,12(sp)
 8006ad0:	df000304 	addi	fp,sp,12
 8006ad4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006ad8:	00820034 	movhi	r2,2048
 8006adc:	109f0a04 	addi	r2,r2,31784
 8006ae0:	10800017 	ldw	r2,0(r2)
 8006ae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006ae8:	00003106 	br	8006bb0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8006aec:	e0bffd17 	ldw	r2,-12(fp)
 8006af0:	10800217 	ldw	r2,8(r2)
 8006af4:	1009883a 	mov	r4,r2
 8006af8:	80037a80 	call	80037a8 <strlen>
 8006afc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8006b00:	e0bffd17 	ldw	r2,-12(fp)
 8006b04:	10c00217 	ldw	r3,8(r2)
 8006b08:	e0bffe17 	ldw	r2,-8(fp)
 8006b0c:	10bfffc4 	addi	r2,r2,-1
 8006b10:	1885883a 	add	r2,r3,r2
 8006b14:	10800003 	ldbu	r2,0(r2)
 8006b18:	10803fcc 	andi	r2,r2,255
 8006b1c:	1080201c 	xori	r2,r2,128
 8006b20:	10bfe004 	addi	r2,r2,-128
 8006b24:	10800bd8 	cmpnei	r2,r2,47
 8006b28:	1000031e 	bne	r2,zero,8006b38 <alt_find_file+0x74>
    {
      len -= 1;
 8006b2c:	e0bffe17 	ldw	r2,-8(fp)
 8006b30:	10bfffc4 	addi	r2,r2,-1
 8006b34:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006b38:	e0bffe17 	ldw	r2,-8(fp)
 8006b3c:	e0ffff17 	ldw	r3,-4(fp)
 8006b40:	1885883a 	add	r2,r3,r2
 8006b44:	10800003 	ldbu	r2,0(r2)
 8006b48:	10803fcc 	andi	r2,r2,255
 8006b4c:	1080201c 	xori	r2,r2,128
 8006b50:	10bfe004 	addi	r2,r2,-128
 8006b54:	10800be0 	cmpeqi	r2,r2,47
 8006b58:	1000081e 	bne	r2,zero,8006b7c <alt_find_file+0xb8>
 8006b5c:	e0bffe17 	ldw	r2,-8(fp)
 8006b60:	e0ffff17 	ldw	r3,-4(fp)
 8006b64:	1885883a 	add	r2,r3,r2
 8006b68:	10800003 	ldbu	r2,0(r2)
 8006b6c:	10803fcc 	andi	r2,r2,255
 8006b70:	1080201c 	xori	r2,r2,128
 8006b74:	10bfe004 	addi	r2,r2,-128
 8006b78:	10000a1e 	bne	r2,zero,8006ba4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8006b7c:	e0bffd17 	ldw	r2,-12(fp)
 8006b80:	10c00217 	ldw	r3,8(r2)
 8006b84:	e0bffe17 	ldw	r2,-8(fp)
 8006b88:	1809883a 	mov	r4,r3
 8006b8c:	e17fff17 	ldw	r5,-4(fp)
 8006b90:	100d883a 	mov	r6,r2
 8006b94:	8006d5c0 	call	8006d5c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006b98:	1000021e 	bne	r2,zero,8006ba4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006b9c:	e0bffd17 	ldw	r2,-12(fp)
 8006ba0:	00000806 	br	8006bc4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8006ba4:	e0bffd17 	ldw	r2,-12(fp)
 8006ba8:	10800017 	ldw	r2,0(r2)
 8006bac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006bb0:	e0fffd17 	ldw	r3,-12(fp)
 8006bb4:	00820034 	movhi	r2,2048
 8006bb8:	109f0a04 	addi	r2,r2,31784
 8006bbc:	18bfcb1e 	bne	r3,r2,8006aec <__alt_data_end+0xfc006aec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006bc0:	0005883a 	mov	r2,zero
}
 8006bc4:	e037883a 	mov	sp,fp
 8006bc8:	dfc00117 	ldw	ra,4(sp)
 8006bcc:	df000017 	ldw	fp,0(sp)
 8006bd0:	dec00204 	addi	sp,sp,8
 8006bd4:	f800283a 	ret

08006bd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006bd8:	defffa04 	addi	sp,sp,-24
 8006bdc:	dfc00515 	stw	ra,20(sp)
 8006be0:	df000415 	stw	fp,16(sp)
 8006be4:	dc000315 	stw	r16,12(sp)
 8006be8:	df000404 	addi	fp,sp,16
 8006bec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006bf0:	00bffa04 	movi	r2,-24
 8006bf4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006bf8:	e03ffc15 	stw	zero,-16(fp)
 8006bfc:	00002106 	br	8006c84 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8006c00:	04020034 	movhi	r16,2048
 8006c04:	841e9004 	addi	r16,r16,31296
 8006c08:	e0bffc17 	ldw	r2,-16(fp)
 8006c0c:	1009883a 	mov	r4,r2
 8006c10:	01400304 	movi	r5,12
 8006c14:	80026d00 	call	80026d0 <__mulsi3>
 8006c18:	8085883a 	add	r2,r16,r2
 8006c1c:	10800017 	ldw	r2,0(r2)
 8006c20:	1000151e 	bne	r2,zero,8006c78 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8006c24:	04020034 	movhi	r16,2048
 8006c28:	841e9004 	addi	r16,r16,31296
 8006c2c:	e0bffc17 	ldw	r2,-16(fp)
 8006c30:	1009883a 	mov	r4,r2
 8006c34:	01400304 	movi	r5,12
 8006c38:	80026d00 	call	80026d0 <__mulsi3>
 8006c3c:	8085883a 	add	r2,r16,r2
 8006c40:	e0fffe17 	ldw	r3,-8(fp)
 8006c44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8006c48:	00820034 	movhi	r2,2048
 8006c4c:	109f0e04 	addi	r2,r2,31800
 8006c50:	10c00017 	ldw	r3,0(r2)
 8006c54:	e0bffc17 	ldw	r2,-16(fp)
 8006c58:	1880040e 	bge	r3,r2,8006c6c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8006c5c:	00820034 	movhi	r2,2048
 8006c60:	109f0e04 	addi	r2,r2,31800
 8006c64:	e0fffc17 	ldw	r3,-16(fp)
 8006c68:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8006c6c:	e0bffc17 	ldw	r2,-16(fp)
 8006c70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8006c74:	00000606 	br	8006c90 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006c78:	e0bffc17 	ldw	r2,-16(fp)
 8006c7c:	10800044 	addi	r2,r2,1
 8006c80:	e0bffc15 	stw	r2,-16(fp)
 8006c84:	e0bffc17 	ldw	r2,-16(fp)
 8006c88:	10800810 	cmplti	r2,r2,32
 8006c8c:	103fdc1e 	bne	r2,zero,8006c00 <__alt_data_end+0xfc006c00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006c90:	e0bffd17 	ldw	r2,-12(fp)
}
 8006c94:	e6ffff04 	addi	sp,fp,-4
 8006c98:	dfc00217 	ldw	ra,8(sp)
 8006c9c:	df000117 	ldw	fp,4(sp)
 8006ca0:	dc000017 	ldw	r16,0(sp)
 8006ca4:	dec00304 	addi	sp,sp,12
 8006ca8:	f800283a 	ret

08006cac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8006cac:	defffe04 	addi	sp,sp,-8
 8006cb0:	df000115 	stw	fp,4(sp)
 8006cb4:	df000104 	addi	fp,sp,4
 8006cb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8006cbc:	e0bfff17 	ldw	r2,-4(fp)
 8006cc0:	10bffe84 	addi	r2,r2,-6
 8006cc4:	10c00428 	cmpgeui	r3,r2,16
 8006cc8:	18001a1e 	bne	r3,zero,8006d34 <alt_exception_cause_generated_bad_addr+0x88>
 8006ccc:	100690ba 	slli	r3,r2,2
 8006cd0:	00820034 	movhi	r2,2048
 8006cd4:	109b3904 	addi	r2,r2,27876
 8006cd8:	1885883a 	add	r2,r3,r2
 8006cdc:	10800017 	ldw	r2,0(r2)
 8006ce0:	1000683a 	jmp	r2
 8006ce4:	08006d24 	muli	zero,at,436
 8006ce8:	08006d24 	muli	zero,at,436
 8006cec:	08006d34 	orhi	zero,at,436
 8006cf0:	08006d34 	orhi	zero,at,436
 8006cf4:	08006d34 	orhi	zero,at,436
 8006cf8:	08006d24 	muli	zero,at,436
 8006cfc:	08006d2c 	andhi	zero,at,436
 8006d00:	08006d34 	orhi	zero,at,436
 8006d04:	08006d24 	muli	zero,at,436
 8006d08:	08006d24 	muli	zero,at,436
 8006d0c:	08006d34 	orhi	zero,at,436
 8006d10:	08006d24 	muli	zero,at,436
 8006d14:	08006d2c 	andhi	zero,at,436
 8006d18:	08006d34 	orhi	zero,at,436
 8006d1c:	08006d34 	orhi	zero,at,436
 8006d20:	08006d24 	muli	zero,at,436
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006d24:	00800044 	movi	r2,1
 8006d28:	00000306 	br	8006d38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006d2c:	0005883a 	mov	r2,zero
 8006d30:	00000106 	br	8006d38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8006d34:	0005883a 	mov	r2,zero
  }
}
 8006d38:	e037883a 	mov	sp,fp
 8006d3c:	df000017 	ldw	fp,0(sp)
 8006d40:	dec00104 	addi	sp,sp,4
 8006d44:	f800283a 	ret

08006d48 <atexit>:
 8006d48:	200b883a 	mov	r5,r4
 8006d4c:	000d883a 	mov	r6,zero
 8006d50:	0009883a 	mov	r4,zero
 8006d54:	000f883a 	mov	r7,zero
 8006d58:	8006e381 	jmpi	8006e38 <__register_exitproc>

08006d5c <memcmp>:
 8006d5c:	218d883a 	add	r6,r4,r6
 8006d60:	21800826 	beq	r4,r6,8006d84 <memcmp+0x28>
 8006d64:	20800003 	ldbu	r2,0(r4)
 8006d68:	28c00003 	ldbu	r3,0(r5)
 8006d6c:	10c00226 	beq	r2,r3,8006d78 <memcmp+0x1c>
 8006d70:	10c5c83a 	sub	r2,r2,r3
 8006d74:	f800283a 	ret
 8006d78:	21000044 	addi	r4,r4,1
 8006d7c:	29400044 	addi	r5,r5,1
 8006d80:	003ff706 	br	8006d60 <__alt_data_end+0xfc006d60>
 8006d84:	0005883a 	mov	r2,zero
 8006d88:	f800283a 	ret

08006d8c <putc>:
 8006d8c:	defffd04 	addi	sp,sp,-12
 8006d90:	00820034 	movhi	r2,2048
 8006d94:	dc000115 	stw	r16,4(sp)
 8006d98:	dfc00215 	stw	ra,8(sp)
 8006d9c:	1090c204 	addi	r2,r2,17160
 8006da0:	28800115 	stw	r2,4(r5)
 8006da4:	00820034 	movhi	r2,2048
 8006da8:	109f0504 	addi	r2,r2,31764
 8006dac:	d9000005 	stb	r4,0(sp)
 8006db0:	2021883a 	mov	r16,r4
 8006db4:	11000017 	ldw	r4,0(r2)
 8006db8:	d80d883a 	mov	r6,sp
 8006dbc:	01c00044 	movi	r7,1
 8006dc0:	80043080 	call	8004308 <__sfvwrite_small_dev>
 8006dc4:	00ffffc4 	movi	r3,-1
 8006dc8:	10c00126 	beq	r2,r3,8006dd0 <putc+0x44>
 8006dcc:	8005883a 	mov	r2,r16
 8006dd0:	dfc00217 	ldw	ra,8(sp)
 8006dd4:	dc000117 	ldw	r16,4(sp)
 8006dd8:	dec00304 	addi	sp,sp,12
 8006ddc:	f800283a 	ret

08006de0 <_putc_r>:
 8006de0:	defffd04 	addi	sp,sp,-12
 8006de4:	00820034 	movhi	r2,2048
 8006de8:	dc000115 	stw	r16,4(sp)
 8006dec:	dfc00215 	stw	ra,8(sp)
 8006df0:	1090c204 	addi	r2,r2,17160
 8006df4:	30800115 	stw	r2,4(r6)
 8006df8:	00820034 	movhi	r2,2048
 8006dfc:	109f0504 	addi	r2,r2,31764
 8006e00:	11000017 	ldw	r4,0(r2)
 8006e04:	2821883a 	mov	r16,r5
 8006e08:	01c00044 	movi	r7,1
 8006e0c:	300b883a 	mov	r5,r6
 8006e10:	d80d883a 	mov	r6,sp
 8006e14:	dc000005 	stb	r16,0(sp)
 8006e18:	80043080 	call	8004308 <__sfvwrite_small_dev>
 8006e1c:	00ffffc4 	movi	r3,-1
 8006e20:	10c00126 	beq	r2,r3,8006e28 <_putc_r+0x48>
 8006e24:	8005883a 	mov	r2,r16
 8006e28:	dfc00217 	ldw	ra,8(sp)
 8006e2c:	dc000117 	ldw	r16,4(sp)
 8006e30:	dec00304 	addi	sp,sp,12
 8006e34:	f800283a 	ret

08006e38 <__register_exitproc>:
 8006e38:	00820034 	movhi	r2,2048
 8006e3c:	defff904 	addi	sp,sp,-28
 8006e40:	109f0404 	addi	r2,r2,31760
 8006e44:	dd400515 	stw	r21,20(sp)
 8006e48:	15400017 	ldw	r21,0(r2)
 8006e4c:	dc000015 	stw	r16,0(sp)
 8006e50:	dd000415 	stw	r20,16(sp)
 8006e54:	ac000c17 	ldw	r16,48(r21)
 8006e58:	dcc00315 	stw	r19,12(sp)
 8006e5c:	dc800215 	stw	r18,8(sp)
 8006e60:	dc400115 	stw	r17,4(sp)
 8006e64:	dfc00615 	stw	ra,24(sp)
 8006e68:	2025883a 	mov	r18,r4
 8006e6c:	2823883a 	mov	r17,r5
 8006e70:	3029883a 	mov	r20,r6
 8006e74:	3827883a 	mov	r19,r7
 8006e78:	8000021e 	bne	r16,zero,8006e84 <__register_exitproc+0x4c>
 8006e7c:	ac000d04 	addi	r16,r21,52
 8006e80:	ac000c15 	stw	r16,48(r21)
 8006e84:	80800117 	ldw	r2,4(r16)
 8006e88:	00c007c4 	movi	r3,31
 8006e8c:	18800d0e 	bge	r3,r2,8006ec4 <__register_exitproc+0x8c>
 8006e90:	00820034 	movhi	r2,2048
 8006e94:	108b1404 	addi	r2,r2,11344
 8006e98:	1000021e 	bne	r2,zero,8006ea4 <__register_exitproc+0x6c>
 8006e9c:	00bfffc4 	movi	r2,-1
 8006ea0:	00002d06 	br	8006f58 <__register_exitproc+0x120>
 8006ea4:	01002304 	movi	r4,140
 8006ea8:	8002c500 	call	8002c50 <malloc>
 8006eac:	1021883a 	mov	r16,r2
 8006eb0:	103ffa26 	beq	r2,zero,8006e9c <__alt_data_end+0xfc006e9c>
 8006eb4:	10000115 	stw	zero,4(r2)
 8006eb8:	a8800c17 	ldw	r2,48(r21)
 8006ebc:	80800015 	stw	r2,0(r16)
 8006ec0:	ac000c15 	stw	r16,48(r21)
 8006ec4:	90001b26 	beq	r18,zero,8006f34 <__register_exitproc+0xfc>
 8006ec8:	80802217 	ldw	r2,136(r16)
 8006ecc:	1000091e 	bne	r2,zero,8006ef4 <__register_exitproc+0xbc>
 8006ed0:	00820034 	movhi	r2,2048
 8006ed4:	108b1404 	addi	r2,r2,11344
 8006ed8:	103ff026 	beq	r2,zero,8006e9c <__alt_data_end+0xfc006e9c>
 8006edc:	01004204 	movi	r4,264
 8006ee0:	8002c500 	call	8002c50 <malloc>
 8006ee4:	103fed26 	beq	r2,zero,8006e9c <__alt_data_end+0xfc006e9c>
 8006ee8:	10004015 	stw	zero,256(r2)
 8006eec:	10004115 	stw	zero,260(r2)
 8006ef0:	80802215 	stw	r2,136(r16)
 8006ef4:	81400117 	ldw	r5,4(r16)
 8006ef8:	01000044 	movi	r4,1
 8006efc:	2947883a 	add	r3,r5,r5
 8006f00:	18c7883a 	add	r3,r3,r3
 8006f04:	10c7883a 	add	r3,r2,r3
 8006f08:	1d000015 	stw	r20,0(r3)
 8006f0c:	214a983a 	sll	r5,r4,r5
 8006f10:	11004017 	ldw	r4,256(r2)
 8006f14:	2148b03a 	or	r4,r4,r5
 8006f18:	11004015 	stw	r4,256(r2)
 8006f1c:	1cc02015 	stw	r19,128(r3)
 8006f20:	00c00084 	movi	r3,2
 8006f24:	90c0031e 	bne	r18,r3,8006f34 <__register_exitproc+0xfc>
 8006f28:	10c04117 	ldw	r3,260(r2)
 8006f2c:	194ab03a 	or	r5,r3,r5
 8006f30:	11404115 	stw	r5,260(r2)
 8006f34:	80800117 	ldw	r2,4(r16)
 8006f38:	10c00044 	addi	r3,r2,1
 8006f3c:	10800084 	addi	r2,r2,2
 8006f40:	1085883a 	add	r2,r2,r2
 8006f44:	1085883a 	add	r2,r2,r2
 8006f48:	80c00115 	stw	r3,4(r16)
 8006f4c:	80a1883a 	add	r16,r16,r2
 8006f50:	84400015 	stw	r17,0(r16)
 8006f54:	0005883a 	mov	r2,zero
 8006f58:	dfc00617 	ldw	ra,24(sp)
 8006f5c:	dd400517 	ldw	r21,20(sp)
 8006f60:	dd000417 	ldw	r20,16(sp)
 8006f64:	dcc00317 	ldw	r19,12(sp)
 8006f68:	dc800217 	ldw	r18,8(sp)
 8006f6c:	dc400117 	ldw	r17,4(sp)
 8006f70:	dc000017 	ldw	r16,0(sp)
 8006f74:	dec00704 	addi	sp,sp,28
 8006f78:	f800283a 	ret
 8006f7c:	0201ffff 	0x201ffff
 8006f80:	883a0000 	call	883a000 <_gp+0x82a440>
 8006f84:	010d0bff 	0x10d0bff
 8006f88:	01010002 	0x1010002
	...
 8006f94:	010d0bff 	0x10d0bff
 8006f98:	01010004 	movi	r4,1024
 8006f9c:	00000100 	call	10 <__alt_mem_sdram_controller-0x7fffff0>
 8006fa0:	00000000 	call	0 <__alt_mem_sdram_controller-0x8000000>
 8006fa4:	01110bff 	0x1110bff
 8006fa8:	01010004 	movi	r4,1024
 8006fac:	7f000105 	stb	fp,4(r15)
 8006fb0:	007d0000 	call	7d000 <__alt_mem_sdram_controller-0x7f83000>
	...
