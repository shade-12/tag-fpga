
nios_application.elf:     file format elf32-littlenios2
nios_application.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00007070 memsz 0x00007070 flags r-x
    LOAD off    0x00009000 vaddr 0x08000000 paddr 0x00027090 align 2**12
         filesz 0x00000ce8 memsz 0x0000164c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00009ce8  2**0
                  CONTENTS
  2 .text         00007070  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000534  08000000  00027090  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000007b4  08000534  000275c4  00009534  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000964  08000ce8  00027d78  00009ce8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_sram  00000000  00027d78  00027d78  00009ce8  2**0
                  CONTENTS
  7 .sdram_controller 00000000  0800164c  0800164c  00009ce8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00009ce8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c58  00000000  00000000  00009d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019256  00000000  00000000  0000a968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007aa6  00000000  00000000  00023bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008c4f  00000000  00000000  0002b664  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002138  00000000  00000000  000342b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000052af  00000000  00000000  000363ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00007343  00000000  00000000  0003b69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000429e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000009c8  00000000  00000000  00042a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00047629  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0004762c  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00047638  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00047639  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0004763a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0004763e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00047642  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00047646  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00047651  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0004765c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  00047667  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  00047676  2**0
                  CONTENTS, READONLY
 30 .jdi          00004576  00000000  00000000  00047686  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     002d6bef  00000000  00000000  0004bbfc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000534 l    d  .rwdata	00000000 .rwdata
08000ce8 l    d  .bss	00000000 .bss
00027d78 l    d  .onchip_sram	00000000 .onchip_sram
0800164c l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/tag2/TAG_Software/nios/nios_application_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 WiFiUart.cpp
00000000 l    df *ABS*	00000000 bt_task.cpp
00000000 l    df *ABS*	00000000 led_task.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 wifi_task.cpp
00020fb0 l     F .text	00000070 _Z41__static_initialization_and_destruction_0ii
00021020 l     F .text	00000030 _GLOBAL__sub_I_WiFi_UART
00021050 l     F .text	00000030 _GLOBAL__sub_D_WiFi_UART
00000000 l    df *ABS*	00000000 eh_personality.cc
00021080 l     F .text	00000058 _ZL12read_sleb128PKhPl
000210d8 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00021160 l     F .text	000000a0 _ZL21size_of_encoded_valueh
00021200 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
00021410 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00021464 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
0002150c l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
00021594 l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
000217d4 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
08000ce8 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00022910 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
08000cf4 l     O .bss	00000004 _ZL14emergency_used
08000e24 l     O .bss	00000800 _ZL16emergency_buffer
08000cf0 l     O .bss	00000004 _ZL15dependents_used
08000d24 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022d28 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08000cf8 l     O .bss	00000004 fc_static
00022e40 l     F .text	000000c0 _Unwind_RaiseException_Phase2
00022f00 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 vfprintf.c
00023f50 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0002454c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0800093c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000251a0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00025320 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000254a0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08000ccc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00025988 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00025ad8 l     F .text	00000038 alt_dev_reg
08000a1c l     O .rwdata	0000002c jtag_uart_0
08000a48 l     O .rwdata	0000002c bt_rs232_uart
08000a74 l     O .rwdata	0000002c wifi_rs232_uart
08000aa0 l     O .rwdata	0000002c sd_card_ic
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000262b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000263fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00026428 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00026680 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000267d8 l     F .text	00000050 alt_get_errno
00026828 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00022b70 g     F .text	00000044 __cxa_free_exception
000239bc g     F .text	00000018 putchar
00022a74 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00022408 g     F .text	00000018 _ZSt10unexpectedv
00025584 g     F .text	00000078 alt_main
00023eb4 g     F .text	0000002c strcpy
000239d4 g     F .text	00000080 _puts_r
00022cb0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00020434 g     F .text	00000048 _ZN8WiFiUartD1Ev
00022fbc g     F .text	00000020 .hidden _Unwind_GetIPInfo
000275c4 g       *ABS*	00000000 __flash_rwdata_start
000229e4 g     F .text	00000084 __cxa_rethrow
00022f48 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00022444 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00020a70 g     F .text	00000148 _Z7bt_taskv
00022fac g     F .text	00000010 .hidden _Unwind_GetIP
0800164c g       *ABS*	00000000 __alt_heap_start
00023d48 g     F .text	00000054 _kill_r
00023968 g     F .text	0000004c printf
00023b1c g     F .text	0000007c _signal_r
08000018  w    O .rodata	00000010 _ZTV6BTUart
00022c48 g     F .text	00000040 __cxa_free_dependent_exception
00022468 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0800030c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0002561c g     F .text	00000020 __malloc_unlock
00025ffc g     F .text	00000090 alt_up_rs232_read_fd
00022cb0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00022898 g     F .text	00000020 _ZSt18uncaught_exceptionv
000205a4 g     F .text	000001a4 _ZN8WiFiUart12send_commandEPKc
00022ce0 g     F .text	00000020 __cxa_deleted_virtual
0002503c g     F .text	00000060 memmove
000203b8 g     F .text	0000004c _ZN6BTUart5flushEv
00022c88 g     F .text	00000004 _ZNSt9exceptionD2Ev
0002051c g     F .text	00000088 _ZN8WiFiUart7connectEv
08000448  w    O .rodata	00000014 _ZTVSt13bad_exception
00026afc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00024fa0 g     F .text	0000009c __sfvwrite_small_str
00020000 g     F .entry	0000000c __reset
00022ff8 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
08000d08 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000231d4 g     F .text	00000074 .hidden _Unwind_Backtrace
08000d10 g     O .bss	00000004 alt_argv
08008c74 g       *ABS*	00000000 _gp
00025958 g     F .text	00000030 usleep
00025300 g     F .text	00000020 getpid
08000d18 g     O .bss	0000000c WiFi_UART
08000104  w    O .rodata	0000000a _ZTS8WiFiUart
00021e08 g     F .text	00000234 __cxa_call_unexpected
0002272c g     F .text	00000008 __cxa_get_exception_ptr
08000af4 g     O .rwdata	00000180 alt_fd_list
08000c7c  w    O .rwdata	00000008 _ZTS6BTUart
000239b4 g     F .text	00000008 _putchar_r
000230e8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00022f78 g     F .text	00000018 .hidden _Unwind_GetCFA
00022420 g     F .text	00000014 _ZSt13set_terminatePFvvE
000265d4 g     F .text	00000090 alt_find_dev
00022bb4 g     F .text	00000094 __cxa_allocate_dependent_exception
000220cc g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00026760 g     F .text	00000078 alt_io_redirect
00027090 g       *ABS*	00000000 __DTOR_END__
000220e4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00025f88 g     F .text	00000074 alt_up_rs232_read_data
00023a54 g     F .text	00000014 puts
00020a24 g     F .text	0000004c _ZN8WiFiUart5flushEv
00025c5c g     F .text	000000e4 altera_avalon_jtag_uart_read
00023260 g     F .text	00000014 malloc
0002392c g     F .text	0000003c _printf_r
000252bc g     F .text	00000008 .hidden __udivsi3
00023b98 g     F .text	000000b4 _raise_r
00020404 g     F .text	00000030 _ZN8WiFiUartC2Ev
08000d04 g     O .bss	00000004 __malloc_top_pad
00023d9c g     F .text	00000004 _getpid_r
00020404 g     F .text	00000030 _ZN8WiFiUartC1Ev
0002047c g     F .text	00000038 _ZN8WiFiUartD0Ev
00022194 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00023c4c g     F .text	000000a8 __sigtramp_r
00023a68 g     F .text	00000050 _sbrk_r
0800037c  w    O .rodata	00000020 _ZTVSt9type_info
00022c90 g     F .text	0000000c _ZNKSt9exception4whatEv
0002028c g     F .text	00000070 _ZN6BTUart6read_mEPhi
08000ce0 g     O .rwdata	00000004 alt_max_fd
00025f04 g     F .text	00000044 alt_up_rs232_check_parity
08000d00 g     O .bss	00000004 __malloc_max_sbrked_mem
08000340  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00020434 g     F .text	00000048 _ZN8WiFiUartD2Ev
08000c84  w    O .rwdata	00000008 _ZTI8WiFiUart
00022128 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0002231c g     F .text	00000004 _ZdlPv
0002008c g     F .text	00000048 _ZN6BTUartD1Ev
080000f4  w    O .rodata	00000010 _ZTV8WiFiUart
08000cc4 g     O .rwdata	00000004 _global_impure_ptr
0800164c g       *ABS*	00000000 __bss_end
00022f30 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00023248 g     F .text	00000018 abort
000227e8 g     F .text	000000b0 __cxa_end_catch
00022c8c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00020000 g       *ABS*	00000000 __alt_mem_onchip_sram
0002097c g     F .text	00000060 _ZN8WiFiUart6read_sEv
000223e0 g     F .text	00000018 _ZSt9terminatev
00020cd4 g     F .text	000000c4 _Z9wifi_taskv
08000acc g     O .rwdata	00000028 alt_dev_null
00022cb8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0002005c g     F .text	00000030 _ZN6BTUartC2Ev
0002005c g     F .text	00000030 _ZN6BTUartC1Ev
080002b0  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000263e0 g     F .text	0000001c alt_dcache_flush_all
08000ca0  w    O .rwdata	00000008 _ZTISt9exception
08000c90 g     O .rwdata	00000004 get_time_request
08000ce8 g       *ABS*	00000000 __ram_rwdata_end
00022a68 g     F .text	00000004 _ZNSt9type_infoD1Ev
08000cd8 g     O .rwdata	00000008 alt_dev_list
00022cb8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
000259d8 g     F .text	00000100 write
000250f0 g     F .text	00000058 _putc_r
00022a84 g     F .text	00000004 _ZNSt9type_infoD0Ev
08000534 g       *ABS*	00000000 __ram_rodata_end
0002608c g     F .text	00000094 alt_up_rs232_write_fd
00025370 g     F .text	00000130 kill
000252c4 g     F .text	00000008 .hidden __umodsi3
00022a7c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00022434 g     F .text	00000010 _ZSt13get_terminatev
0800164c g       *ABS*	00000000 end
000231bc g     F .text	00000018 .hidden _Unwind_DeleteException
0002224c g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00027088 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00022054 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00025d40 g     F .text	00000094 altera_avalon_jtag_uart_write
080003d0  w    O .rodata	00000012 _ZTSSt13bad_exception
000245b8 g     F .text	0000056c ___vfprintf_internal_r
00023da0 g     F .text	00000064 _sprintf_r
00024c6c g     F .text	00000288 _free_r
0002563c g     F .text	00000228 alt_printf
00026eac g     F .text	0000019c __call_exitprocs
0002008c g     F .text	00000048 _ZN6BTUartD2Ev
08000cbc g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000003c _start
00023efc g     F .text	00000054 strstr
0800036c  w    O .rodata	0000000d _ZTSSt9type_info
00022cc0 g     F .text	00000020 __cxa_pure_virtual
00023d08 g     F .text	0000001c signal
00025b44 g     F .text	00000058 alt_sys_init
00026d68 g     F .text	00000144 __register_exitproc
000224ac g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00025ec8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00022d00 g     F .text	00000028 .hidden __mulsi3
08000534 g       *ABS*	00000000 __ram_rwdata_start
00023018 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08000000 g       *ABS*	00000000 __ram_rodata_start
08001624 g     O .bss	00000028 __malloc_current_mallinfo
0002312c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08000470  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00020bb8 g     F .text	000000d8 _Z8led_taskv
00022a68 g     F .text	00000004 _ZNSt9type_infoD2Ev
00022cbc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
000226a8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00025b9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00026c30 g     F .text	000000d4 alt_get_fd
00026160 g     F .text	00000158 alt_busy_sleep
000208c4 g     F .text	000000b8 _ZN8WiFiUart7write_sEh
08000cb0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00026d38 g     F .text	00000030 memcmp
0800164c g       *ABS*	00000000 __alt_stack_base
00022468 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00023170 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00022a6c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
08000534 g     O .rwdata	00000408 __malloc_av_
08000434  w    O .rodata	00000014 _ZTVSt9exception
00022cb4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00025e2c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00026b1c g     F .text	00000114 alt_find_file
00026478 g     F .text	000000a4 alt_dev_llist_insert
000255fc g     F .text	00000020 __malloc_lock
000258a8 g     F .text	000000b0 sbrk
00023fbc g     F .text	0000056c ___svfprintf_internal_r
080002e0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00022954 g     F .text	00000090 __cxa_throw
00022fdc g     F .text	00000010 .hidden _Unwind_SetIP
00024ef4 g     F .text	000000ac __sfvwrite_small_dev
00020748 g     F .text	0000010c _ZN8WiFiUart9send_dataEPKci
08000ce8 g       *ABS*	00000000 __bss_start
000201d4 g     F .text	000000b8 _ZN6BTUart7write_sEh
0002390c g     F .text	00000020 memset
00020c90 g     F .text	00000044 main
08000d14 g     O .bss	00000004 alt_envp
08000cfc g     O .bss	00000004 __malloc_max_total_mem
00025bfc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002203c g     F .text	0000000c __cxa_get_globals_fast
0c000000 g       *ABS*	00000000 __alt_heap_limit
00020174 g     F .text	00000060 _ZN6BTUart6read_sEv
00023288 g     F .text	00000684 _malloc_r
000200d4 g     F .text	00000038 _ZN6BTUartD0Ev
00022c9c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08000ce4 g     O .rwdata	00000004 alt_errno
00023d24 g     F .text	00000010 _init_signal
080002d4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000202fc g     F .text	00000074 _ZN6BTUart7write_mEPci
00022c8c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0002509c g     F .text	00000054 putc
0002520c g     F .text	00000054 .hidden __divsi3
00024b48 g     F .text	00000124 _malloc_trim_r
0002708c g       *ABS*	00000000 __CTOR_END__
00023e7c g     F .text	00000038 strcmp
00027090 g       *ABS*	00000000 __flash_rodata_start
0800045c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0002708c g       *ABS*	00000000 __DTOR_LIST__
00026120 g     F .text	00000040 alt_up_rs232_open_dev
00025b10 g     F .text	00000034 alt_irq_init
00026a7c g     F .text	00000080 alt_release_fd
00022478 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00023e04 g     F .text	00000078 sprintf
00026d04 g     F .text	00000014 atexit
00025148 g     F .text	00000058 _write_r
00023010 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000228b8 g     F .text	00000058 __cxa_call_terminate
08000cc8 g     O .rwdata	00000004 _impure_ptr
08000ca8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08000d0c g     O .bss	00000004 alt_argc
00026578 g     F .text	0000005c _do_dtors
08000c74  w    O .rwdata	00000008 _ZTI6BTUart
000209dc g     F .text	00000048 _ZN8WiFiUart10read_readyEv
00022458 g     F .text	00000010 _ZSt14get_unexpectedv
00023000 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
08000cd0 g     O .rwdata	00000008 alt_fs_list
08000410  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00024528 g     F .text	00000024 __vfprintf_internal_unused
00025dd4 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
00022fec g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00025f48 g     F .text	00000040 alt_up_rs232_write_data
00022734 g     F .text	000000b4 __cxa_begin_catch
000220e4 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000223f8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
00022cac g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08000c94 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00022acc g     F .text	000000a4 __cxa_allocate_exception
08000334  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08000ce8 g       *ABS*	00000000 _edata
00020854 g     F .text	00000070 _ZN8WiFiUart4getsEPci
08000c8c g     O .rwdata	00000004 time_server_domain
0800164c g       *ABS*	00000000 _end
00021908 g     F .text	00000500 __gxx_personality_sj0
00020020 g       *ABS*	00000000 __ram_exceptions_end
00022c88 g     F .text	00000004 _ZNSt9exceptionD1Ev
08000cc0 g     O .rwdata	00000004 __malloc_trim_threshold
00026d18 g     F .text	00000020 exit
00022f90 g     F .text	0000001c .hidden _Unwind_SetGR
0002260c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00022320 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
00025260 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
080003e4  w    O .rodata	0000000c _ZTISt13bad_exception
00020d98 g     F .text	00000218 _Z8get_timePc
000252cc g     F .text	00000034 _exit
00022f5c g     F .text	0000001c .hidden _Unwind_GetGR
00022048 g     F .text	0000000c __cxa_get_globals
08000cb8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00023ee0 g     F .text	0000001c strlen
00023ab8 g     F .text	00000064 _init_signal_r
08000c98  w    O .rwdata	00000008 _ZTISt9type_info
0002691c g     F .text	00000160 open
00025864 g     F .text	00000044 alt_putchar
0002010c g     F .text	00000068 _ZN6BTUart4openEPKc
080003c0  w    O .rodata	0000000d _ZTSSt9exception
00022ca8 g     F .text	00000004 _ZNSt9exceptionD0Ev
00026664 g     F .text	0000001c alt_icache_flush_all
00023008 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00024b24 g     F .text	00000024 __vfprintf_internal
000204b4 g     F .text	00000068 _ZN8WiFiUart4openEPKc
0002651c g     F .text	0000005c _do_ctors
00023d34 g     F .text	00000014 __sigtramp
00020370 g     F .text	00000048 _ZN6BTUart10read_readyEv
00025e88 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00026308 g     F .text	000000d8 close
080003f0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00025504 g     F .text	00000080 alt_load
00022a88 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00023cf4 g     F .text	00000014 raise
00023274 g     F .text	00000014 free
000220f4 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   2002c:	d6a31d14 	ori	gp,gp,35956
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   20034:	10833a14 	ori	r2,r2,3304

    movhi r3, %hi(__bss_end)
   20038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   2003c:	18c59314 	ori	r3,r3,5708

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <__alt_data_end+0xf4020044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00255040 	call	25504 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00255840 	call	25584 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <__alt_data_end+0xf4020058>

0002005c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
   2005c:	defffe04 	addi	sp,sp,-8
   20060:	df000115 	stw	fp,4(sp)
   20064:	df000104 	addi	fp,sp,4
   20068:	e13fff15 	stw	r4,-4(fp)
   2006c:	e0ffff17 	ldw	r3,-4(fp)
   20070:	00820034 	movhi	r2,2048
   20074:	10800804 	addi	r2,r2,32
   20078:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   2007c:	e037883a 	mov	sp,fp
   20080:	df000017 	ldw	fp,0(sp)
   20084:	dec00104 	addi	sp,sp,4
   20088:	f800283a 	ret

0002008c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
   2008c:	defffd04 	addi	sp,sp,-12
   20090:	dfc00215 	stw	ra,8(sp)
   20094:	df000115 	stw	fp,4(sp)
   20098:	df000104 	addi	fp,sp,4
   2009c:	e13fff15 	stw	r4,-4(fp)
   200a0:	e0ffff17 	ldw	r3,-4(fp)
   200a4:	00820034 	movhi	r2,2048
   200a8:	10800804 	addi	r2,r2,32
   200ac:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   200b0:	0005883a 	mov	r2,zero
   200b4:	10000226 	beq	r2,zero,200c0 <_ZN6BTUartD1Ev+0x34>
   200b8:	e13fff17 	ldw	r4,-4(fp)
   200bc:	002231c0 	call	2231c <_ZdlPv>
   200c0:	e037883a 	mov	sp,fp
   200c4:	dfc00117 	ldw	ra,4(sp)
   200c8:	df000017 	ldw	fp,0(sp)
   200cc:	dec00204 	addi	sp,sp,8
   200d0:	f800283a 	ret

000200d4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
   200d4:	defffd04 	addi	sp,sp,-12
   200d8:	dfc00215 	stw	ra,8(sp)
   200dc:	df000115 	stw	fp,4(sp)
   200e0:	df000104 	addi	fp,sp,4
   200e4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   200e8:	e13fff17 	ldw	r4,-4(fp)
   200ec:	002008c0 	call	2008c <_ZN6BTUartD1Ev>
   200f0:	e13fff17 	ldw	r4,-4(fp)
   200f4:	002231c0 	call	2231c <_ZdlPv>
   200f8:	e037883a 	mov	sp,fp
   200fc:	dfc00117 	ldw	ra,4(sp)
   20100:	df000017 	ldw	fp,0(sp)
   20104:	dec00204 	addi	sp,sp,8
   20108:	f800283a 	ret

0002010c <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
   2010c:	defffc04 	addi	sp,sp,-16
   20110:	dfc00315 	stw	ra,12(sp)
   20114:	df000215 	stw	fp,8(sp)
   20118:	df000204 	addi	fp,sp,8
   2011c:	e13ffe15 	stw	r4,-8(fp)
   20120:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
   20124:	e13fff17 	ldw	r4,-4(fp)
   20128:	00261200 	call	26120 <alt_up_rs232_open_dev>
   2012c:	1007883a 	mov	r3,r2
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20138:	e0bffe17 	ldw	r2,-8(fp)
   2013c:	10800117 	ldw	r2,4(r2)
   20140:	1009883a 	mov	r4,r2
   20144:	0025dd40 	call	25dd4 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
   20148:	e0bffe17 	ldw	r2,-8(fp)
   2014c:	10800117 	ldw	r2,4(r2)
   20150:	1000021e 	bne	r2,zero,2015c <_ZN6BTUart4openEPKc+0x50>
        return 0;
   20154:	0005883a 	mov	r2,zero
   20158:	00000106 	br	20160 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
   2015c:	00800044 	movi	r2,1
}
   20160:	e037883a 	mov	sp,fp
   20164:	dfc00117 	ldw	ra,4(sp)
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00204 	addi	sp,sp,8
   20170:	f800283a 	ret

00020174 <_ZN6BTUart6read_sEv>:


unsigned char BTUart::read_s(void)
{
   20174:	defffc04 	addi	sp,sp,-16
   20178:	dfc00315 	stw	ra,12(sp)
   2017c:	df000215 	stw	fp,8(sp)
   20180:	df000204 	addi	fp,sp,8
   20184:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
   20188:	0001883a 	nop
   2018c:	e13fff17 	ldw	r4,-4(fp)
   20190:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   20194:	1005003a 	cmpeq	r2,r2,zero
   20198:	10803fcc 	andi	r2,r2,255
   2019c:	103ffb1e 	bne	r2,zero,2018c <__alt_data_end+0xf402018c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	10c00117 	ldw	r3,4(r2)
   201a8:	e0bffe44 	addi	r2,fp,-7
   201ac:	1809883a 	mov	r4,r3
   201b0:	e17ffe04 	addi	r5,fp,-8
   201b4:	100d883a 	mov	r6,r2
   201b8:	0025f880 	call	25f88 <alt_up_rs232_read_data>

    return (unsigned char) buffer;
   201bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13ffe15 	stw	r4,-8(fp)
   201e8:	2805883a 	mov	r2,r5
   201ec:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
   201f0:	e0bffe17 	ldw	r2,-8(fp)
   201f4:	10800117 	ldw	r2,4(r2)
   201f8:	1009883a 	mov	r4,r2
   201fc:	0025e2c0 	call	25e2c <alt_up_rs232_disable_read_interrupt>

    int result = 0;
   20200:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
   20204:	e0bffe17 	ldw	r2,-8(fp)
   20208:	10800117 	ldw	r2,4(r2)
   2020c:	1009883a 	mov	r4,r2
   20210:	0025ec80 	call	25ec8 <alt_up_rs232_get_available_space_in_write_FIFO>
   20214:	1007883a 	mov	r3,r2
   20218:	e0bffe17 	ldw	r2,-8(fp)
   2021c:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
   20220:	e0bffe17 	ldw	r2,-8(fp)
   20224:	10800217 	ldw	r2,8(r2)
   20228:	10802030 	cmpltui	r2,r2,128
   2022c:	10000d1e 	bne	r2,zero,20264 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
   20230:	e0bffe17 	ldw	r2,-8(fp)
   20234:	10c00117 	ldw	r3,4(r2)
   20238:	e0bfff03 	ldbu	r2,-4(fp)
   2023c:	1809883a 	mov	r4,r3
   20240:	100b883a 	mov	r5,r2
   20244:	0025f480 	call	25f48 <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
   20248:	e0bfff03 	ldbu	r2,-4(fp)
   2024c:	01020034 	movhi	r4,2048
   20250:	21000004 	addi	r4,r4,0
   20254:	100b883a 	mov	r5,r2
   20258:	002563c0 	call	2563c <alt_printf>
        result = 1;
   2025c:	00800044 	movi	r2,1
   20260:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20264:	e0bffe17 	ldw	r2,-8(fp)
   20268:	10800117 	ldw	r2,4(r2)
   2026c:	1009883a 	mov	r4,r2
   20270:	0025dd40 	call	25dd4 <alt_up_rs232_enable_read_interrupt>
    return result;
   20274:	e0bffd17 	ldw	r2,-12(fp)
}
   20278:	e037883a 	mov	sp,fp
   2027c:	dfc00117 	ldw	ra,4(sp)
   20280:	df000017 	ldw	fp,0(sp)
   20284:	dec00204 	addi	sp,sp,8
   20288:	f800283a 	ret

0002028c <_ZN6BTUart6read_mEPhi>:


void BTUart::read_m(alt_u8 *buffer, int length)
{
   2028c:	defff904 	addi	sp,sp,-28
   20290:	dfc00615 	stw	ra,24(sp)
   20294:	df000515 	stw	fp,20(sp)
   20298:	dc000415 	stw	r16,16(sp)
   2029c:	df000504 	addi	fp,sp,20
   202a0:	e13ffc15 	stw	r4,-16(fp)
   202a4:	e17ffd15 	stw	r5,-12(fp)
   202a8:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
   202ac:	e03ffb15 	stw	zero,-20(fp)
   202b0:	00000906 	br	202d8 <_ZN6BTUart6read_mEPhi+0x4c>
		buffer[count] = read_s();
   202b4:	e0bffb17 	ldw	r2,-20(fp)
   202b8:	e0fffd17 	ldw	r3,-12(fp)
   202bc:	18a1883a 	add	r16,r3,r2
   202c0:	e13ffc17 	ldw	r4,-16(fp)
   202c4:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
   202c8:	80800005 	stb	r2,0(r16)

void BTUart::read_m(alt_u8 *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
   202cc:	e0bffb17 	ldw	r2,-20(fp)
   202d0:	10800044 	addi	r2,r2,1
   202d4:	e0bffb15 	stw	r2,-20(fp)
   202d8:	e0fffb17 	ldw	r3,-20(fp)
   202dc:	e0bffe17 	ldw	r2,-8(fp)
   202e0:	18bff416 	blt	r3,r2,202b4 <__alt_data_end+0xf40202b4>
		buffer[count] = read_s();
	}
}
   202e4:	e6ffff04 	addi	sp,fp,-4
   202e8:	dfc00217 	ldw	ra,8(sp)
   202ec:	df000117 	ldw	fp,4(sp)
   202f0:	dc000017 	ldw	r16,0(sp)
   202f4:	dec00304 	addi	sp,sp,12
   202f8:	f800283a 	ret

000202fc <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
   202fc:	defffa04 	addi	sp,sp,-24
   20300:	dfc00515 	stw	ra,20(sp)
   20304:	df000415 	stw	fp,16(sp)
   20308:	df000404 	addi	fp,sp,16
   2030c:	e13ffd15 	stw	r4,-12(fp)
   20310:	e17ffe15 	stw	r5,-8(fp)
   20314:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
   20318:	e03ffc15 	stw	zero,-16(fp)
   2031c:	00000b06 	br	2034c <_ZN6BTUart7write_mEPci+0x50>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
   20320:	e0bffc17 	ldw	r2,-16(fp)
   20324:	e0fffe17 	ldw	r3,-8(fp)
   20328:	1885883a 	add	r2,r3,r2
   2032c:	10800003 	ldbu	r2,0(r2)
   20330:	10803fcc 	andi	r2,r2,255
   20334:	e13ffd17 	ldw	r4,-12(fp)
   20338:	100b883a 	mov	r5,r2
   2033c:	00201d40 	call	201d4 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
   20340:	e0bffc17 	ldw	r2,-16(fp)
   20344:	10800044 	addi	r2,r2,1
   20348:	e0bffc15 	stw	r2,-16(fp)
   2034c:	e0fffc17 	ldw	r3,-16(fp)
   20350:	e0bfff17 	ldw	r2,-4(fp)
   20354:	18bff216 	blt	r3,r2,20320 <__alt_data_end+0xf4020320>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
   20358:	e0bffc17 	ldw	r2,-16(fp)
}
   2035c:	e037883a 	mov	sp,fp
   20360:	dfc00117 	ldw	ra,4(sp)
   20364:	df000017 	ldw	fp,0(sp)
   20368:	dec00204 	addi	sp,sp,8
   2036c:	f800283a 	ret

00020370 <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
   20370:	defffc04 	addi	sp,sp,-16
   20374:	dfc00315 	stw	ra,12(sp)
   20378:	df000215 	stw	fp,8(sp)
   2037c:	df000204 	addi	fp,sp,8
   20380:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
   20384:	e0bfff17 	ldw	r2,-4(fp)
   20388:	10800117 	ldw	r2,4(r2)
   2038c:	1009883a 	mov	r4,r2
   20390:	0025e880 	call	25e88 <alt_up_rs232_get_used_space_in_read_FIFO>
   20394:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
   20398:	e0bffe0b 	ldhu	r2,-8(fp)
   2039c:	1004c03a 	cmpne	r2,r2,zero
   203a0:	10803fcc 	andi	r2,r2,255
}
   203a4:	e037883a 	mov	sp,fp
   203a8:	dfc00117 	ldw	ra,4(sp)
   203ac:	df000017 	ldw	fp,0(sp)
   203b0:	dec00204 	addi	sp,sp,8
   203b4:	f800283a 	ret

000203b8 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
   203b8:	defffd04 	addi	sp,sp,-12
   203bc:	dfc00215 	stw	ra,8(sp)
   203c0:	df000115 	stw	fp,4(sp)
   203c4:	df000104 	addi	fp,sp,4
   203c8:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
   203cc:	00000206 	br	203d8 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
   203d0:	e13fff17 	ldw	r4,-4(fp)
   203d4:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
   203d8:	e13fff17 	ldw	r4,-4(fp)
   203dc:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   203e0:	1004c03a 	cmpne	r2,r2,zero
   203e4:	10803fcc 	andi	r2,r2,255
   203e8:	103ff91e 	bne	r2,zero,203d0 <__alt_data_end+0xf40203d0>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
   203ec:	0001883a 	nop
   203f0:	e037883a 	mov	sp,fp
   203f4:	dfc00117 	ldw	ra,4(sp)
   203f8:	df000017 	ldw	fp,0(sp)
   203fc:	dec00204 	addi	sp,sp,8
   20400:	f800283a 	ret

00020404 <_ZN8WiFiUartC1Ev>:
#include "WiFiUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


WiFiUart::WiFiUart()
   20404:	defffe04 	addi	sp,sp,-8
   20408:	df000115 	stw	fp,4(sp)
   2040c:	df000104 	addi	fp,sp,4
   20410:	e13fff15 	stw	r4,-4(fp)
   20414:	e0ffff17 	ldw	r3,-4(fp)
   20418:	00820034 	movhi	r2,2048
   2041c:	10803f04 	addi	r2,r2,252
   20420:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   20424:	e037883a 	mov	sp,fp
   20428:	df000017 	ldw	fp,0(sp)
   2042c:	dec00104 	addi	sp,sp,4
   20430:	f800283a 	ret

00020434 <_ZN8WiFiUartD1Ev>:


WiFiUart::~WiFiUart()
   20434:	defffd04 	addi	sp,sp,-12
   20438:	dfc00215 	stw	ra,8(sp)
   2043c:	df000115 	stw	fp,4(sp)
   20440:	df000104 	addi	fp,sp,4
   20444:	e13fff15 	stw	r4,-4(fp)
   20448:	e0ffff17 	ldw	r3,-4(fp)
   2044c:	00820034 	movhi	r2,2048
   20450:	10803f04 	addi	r2,r2,252
   20454:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   20458:	0005883a 	mov	r2,zero
   2045c:	10000226 	beq	r2,zero,20468 <_ZN8WiFiUartD1Ev+0x34>
   20460:	e13fff17 	ldw	r4,-4(fp)
   20464:	002231c0 	call	2231c <_ZdlPv>
   20468:	e037883a 	mov	sp,fp
   2046c:	dfc00117 	ldw	ra,4(sp)
   20470:	df000017 	ldw	fp,0(sp)
   20474:	dec00204 	addi	sp,sp,8
   20478:	f800283a 	ret

0002047c <_ZN8WiFiUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


WiFiUart::~WiFiUart()
   2047c:	defffd04 	addi	sp,sp,-12
   20480:	dfc00215 	stw	ra,8(sp)
   20484:	df000115 	stw	fp,4(sp)
   20488:	df000104 	addi	fp,sp,4
   2048c:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   20490:	e13fff17 	ldw	r4,-4(fp)
   20494:	00204340 	call	20434 <_ZN8WiFiUartD1Ev>
   20498:	e13fff17 	ldw	r4,-4(fp)
   2049c:	002231c0 	call	2231c <_ZdlPv>
   204a0:	e037883a 	mov	sp,fp
   204a4:	dfc00117 	ldw	ra,4(sp)
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00204 	addi	sp,sp,8
   204b0:	f800283a 	ret

000204b4 <_ZN8WiFiUart4openEPKc>:


int WiFiUart::open(const char *device_name)
{
   204b4:	defffc04 	addi	sp,sp,-16
   204b8:	dfc00315 	stw	ra,12(sp)
   204bc:	df000215 	stw	fp,8(sp)
   204c0:	df000204 	addi	fp,sp,8
   204c4:	e13ffe15 	stw	r4,-8(fp)
   204c8:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
   204cc:	e13fff17 	ldw	r4,-4(fp)
   204d0:	00261200 	call	26120 <alt_up_rs232_open_dev>
   204d4:	1007883a 	mov	r3,r2
   204d8:	e0bffe17 	ldw	r2,-8(fp)
   204dc:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   204e0:	e0bffe17 	ldw	r2,-8(fp)
   204e4:	10800117 	ldw	r2,4(r2)
   204e8:	1009883a 	mov	r4,r2
   204ec:	0025dd40 	call	25dd4 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
   204f0:	e0bffe17 	ldw	r2,-8(fp)
   204f4:	10800117 	ldw	r2,4(r2)
   204f8:	1000021e 	bne	r2,zero,20504 <_ZN8WiFiUart4openEPKc+0x50>
        return 0;
   204fc:	0005883a 	mov	r2,zero
   20500:	00000106 	br	20508 <_ZN8WiFiUart4openEPKc+0x54>
    }
        
    return 1;
   20504:	00800044 	movi	r2,1
}
   20508:	e037883a 	mov	sp,fp
   2050c:	dfc00117 	ldw	ra,4(sp)
   20510:	df000017 	ldw	fp,0(sp)
   20514:	dec00204 	addi	sp,sp,8
   20518:	f800283a 	ret

0002051c <_ZN8WiFiUart7connectEv>:


int WiFiUart::connect()
{
   2051c:	defff304 	addi	sp,sp,-52
   20520:	dfc00c15 	stw	ra,48(sp)
   20524:	df000b15 	stw	fp,44(sp)
   20528:	df000b04 	addi	fp,sp,44
   2052c:	e13fff15 	stw	r4,-4(fp)
	if (RS232_DEV == NULL) {
   20530:	e0bfff17 	ldw	r2,-4(fp)
   20534:	10800117 	ldw	r2,4(r2)
   20538:	1000051e 	bne	r2,zero,20550 <_ZN8WiFiUart7connectEv+0x34>
        printf("ERROR: Open RS232 port before conencting.\n");
   2053c:	01020034 	movhi	r4,2048
   20540:	21000a04 	addi	r4,r4,40
   20544:	0023a540 	call	23a54 <puts>
        return 0;
   20548:	0005883a 	mov	r2,zero
   2054c:	00001006 	br	20590 <_ZN8WiFiUart7connectEv+0x74>
    }

    char ssid[20], passwd[20];

    send_command("AT+CWMODE_CUR=1");    // Obtain current AT command version
   20550:	e13fff17 	ldw	r4,-4(fp)
   20554:	01420034 	movhi	r5,2048
   20558:	29401504 	addi	r5,r5,84
   2055c:	00205a40 	call	205a4 <_ZN8WiFiUart12send_commandEPKc>
    send_command("AT+CWLAPOPT=1,0x2");  // Get avaialble wifi ssid, sorted according to RSSI (signal strength)
   20560:	e13fff17 	ldw	r4,-4(fp)
   20564:	01420034 	movhi	r5,2048
   20568:	29401904 	addi	r5,r5,100
   2056c:	00205a40 	call	205a4 <_ZN8WiFiUart12send_commandEPKc>

    printf("Network Name (SSID) List:\n");
   20570:	01020034 	movhi	r4,2048
   20574:	21001e04 	addi	r4,r4,120
   20578:	0023a540 	call	23a54 <puts>
    send_command("AT+CWLAP");           // List available APs
   2057c:	e13fff17 	ldw	r4,-4(fp)
   20580:	01420034 	movhi	r5,2048
   20584:	29402504 	addi	r5,r5,148
   20588:	00205a40 	call	205a4 <_ZN8WiFiUart12send_commandEPKc>
    // sprintf(cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", ssid, passwd);   // Connects to an AP

    // // Return the response obtained after sending AT command
    // // requesting wifi connection
    // return send_command(cmd);
    return 1;
   2058c:	00800044 	movi	r2,1
}
   20590:	e037883a 	mov	sp,fp
   20594:	dfc00117 	ldw	ra,4(sp)
   20598:	df000017 	ldw	fp,0(sp)
   2059c:	dec00204 	addi	sp,sp,8
   205a0:	f800283a 	ret

000205a4 <_ZN8WiFiUart12send_commandEPKc>:


int WiFiUart::send_command(const char *cmd)
{
   205a4:	defeff04 	addi	sp,sp,-1028
   205a8:	dfc10015 	stw	ra,1024(sp)
   205ac:	df00ff15 	stw	fp,1020(sp)
   205b0:	dc00fe15 	stw	r16,1016(sp)
   205b4:	df00ff04 	addi	fp,sp,1020
   205b8:	e13ffd15 	stw	r4,-12(fp)
   205bc:	e17ffe15 	stw	r5,-8(fp)
    int count;

	for (count = 0; count < strlen(cmd); count++) {
   205c0:	e03f0115 	stw	zero,-1020(fp)
   205c4:	00000b06 	br	205f4 <_ZN8WiFiUart12send_commandEPKc+0x50>
		write_s(cmd[count]);
   205c8:	e0bf0117 	ldw	r2,-1020(fp)
   205cc:	e0fffe17 	ldw	r3,-8(fp)
   205d0:	1885883a 	add	r2,r3,r2
   205d4:	10800003 	ldbu	r2,0(r2)
   205d8:	10803fcc 	andi	r2,r2,255
   205dc:	e13ffd17 	ldw	r4,-12(fp)
   205e0:	100b883a 	mov	r5,r2
   205e4:	00208c40 	call	208c4 <_ZN8WiFiUart7write_sEh>

int WiFiUart::send_command(const char *cmd)
{
    int count;

	for (count = 0; count < strlen(cmd); count++) {
   205e8:	e0bf0117 	ldw	r2,-1020(fp)
   205ec:	10800044 	addi	r2,r2,1
   205f0:	e0bf0115 	stw	r2,-1020(fp)
   205f4:	e43f0117 	ldw	r16,-1020(fp)
   205f8:	e13ffe17 	ldw	r4,-8(fp)
   205fc:	0023ee00 	call	23ee0 <strlen>
   20600:	80bff136 	bltu	r16,r2,205c8 <__alt_data_end+0xf40205c8>
		write_s(cmd[count]);
	}
    alt_u8 c = {'\r'};
   20604:	00800344 	movi	r2,13
   20608:	e0bf0205 	stb	r2,-1016(fp)
    write_s(c);
   2060c:	e0bf0203 	ldbu	r2,-1016(fp)
   20610:	e13ffd17 	ldw	r4,-12(fp)
   20614:	100b883a 	mov	r5,r2
   20618:	00208c40 	call	208c4 <_ZN8WiFiUart7write_sEh>
    c = {'\n'};
   2061c:	00800284 	movi	r2,10
   20620:	e0bf0205 	stb	r2,-1016(fp)
    write_s(c);
   20624:	e0bf0203 	ldbu	r2,-1016(fp)
   20628:	e13ffd17 	ldw	r4,-12(fp)
   2062c:	100b883a 	mov	r5,r2
   20630:	00208c40 	call	208c4 <_ZN8WiFiUart7write_sEh>

    char buffer[1000];
    count = 0;
   20634:	e03f0115 	stw	zero,-1020(fp)

    while (read_ready()) {
   20638:	00000a06 	br	20664 <_ZN8WiFiUart12send_commandEPKc+0xc0>
        // read unwanted char out of fifo receiver buffer
        buffer[count] = read_s();
   2063c:	e13ffd17 	ldw	r4,-12(fp)
   20640:	002097c0 	call	2097c <_ZN8WiFiUart6read_sEv>
   20644:	1009883a 	mov	r4,r2
   20648:	e0ff0244 	addi	r3,fp,-1015
   2064c:	e0bf0117 	ldw	r2,-1020(fp)
   20650:	1885883a 	add	r2,r3,r2
   20654:	11000005 	stb	r4,0(r2)
        count++;
   20658:	e0bf0117 	ldw	r2,-1020(fp)
   2065c:	10800044 	addi	r2,r2,1
   20660:	e0bf0115 	stw	r2,-1020(fp)
    write_s(c);

    char buffer[1000];
    count = 0;

    while (read_ready()) {
   20664:	e13ffd17 	ldw	r4,-12(fp)
   20668:	00209dc0 	call	209dc <_ZN8WiFiUart10read_readyEv>
   2066c:	1004c03a 	cmpne	r2,r2,zero
   20670:	10803fcc 	andi	r2,r2,255
   20674:	103ff11e 	bne	r2,zero,2063c <__alt_data_end+0xf402063c>
        // read unwanted char out of fifo receiver buffer
        buffer[count] = read_s();
        count++;
    }

    if (strstr(buffer, "OK") != NULL) {
   20678:	e0bf0244 	addi	r2,fp,-1015
   2067c:	1009883a 	mov	r4,r2
   20680:	01420034 	movhi	r5,2048
   20684:	29402804 	addi	r5,r5,160
   20688:	0023efc0 	call	23efc <strstr>
   2068c:	10000a26 	beq	r2,zero,206b8 <_ZN8WiFiUart12send_commandEPKc+0x114>
        if (strcmp("AT+CWLAP", cmd) == 0)
   20690:	01020034 	movhi	r4,2048
   20694:	21002504 	addi	r4,r4,148
   20698:	e17ffe17 	ldw	r5,-8(fp)
   2069c:	0023e7c0 	call	23e7c <strcmp>
   206a0:	1000031e 	bne	r2,zero,206b0 <_ZN8WiFiUart12send_commandEPKc+0x10c>
            printf("%s\n", buffer);
   206a4:	e0bf0244 	addi	r2,fp,-1015
   206a8:	1009883a 	mov	r4,r2
   206ac:	0023a540 	call	23a54 <puts>
        return true;
   206b0:	00800044 	movi	r2,1
   206b4:	00001e06 	br	20730 <_ZN8WiFiUart12send_commandEPKc+0x18c>
    } else if (strstr(buffer, "ERROR") != NULL) {
   206b8:	e0bf0244 	addi	r2,fp,-1015
   206bc:	1009883a 	mov	r4,r2
   206c0:	01420034 	movhi	r5,2048
   206c4:	29402904 	addi	r5,r5,164
   206c8:	0023efc0 	call	23efc <strstr>
   206cc:	10000726 	beq	r2,zero,206ec <_ZN8WiFiUart12send_commandEPKc+0x148>
        printf("AT ERROR: %s\n", buffer);
   206d0:	e0bf0244 	addi	r2,fp,-1015
   206d4:	01020034 	movhi	r4,2048
   206d8:	21002b04 	addi	r4,r4,172
   206dc:	100b883a 	mov	r5,r2
   206e0:	00239680 	call	23968 <printf>
        return false;
   206e4:	0005883a 	mov	r2,zero
   206e8:	00001106 	br	20730 <_ZN8WiFiUart12send_commandEPKc+0x18c>
    } else if (strstr(buffer, "FAIL") != NULL) {
   206ec:	e0bf0244 	addi	r2,fp,-1015
   206f0:	1009883a 	mov	r4,r2
   206f4:	01420034 	movhi	r5,2048
   206f8:	29402f04 	addi	r5,r5,188
   206fc:	0023efc0 	call	23efc <strstr>
   20700:	10000726 	beq	r2,zero,20720 <_ZN8WiFiUart12send_commandEPKc+0x17c>
        printf("AT ERROR: %s\n", buffer);
   20704:	e0bf0244 	addi	r2,fp,-1015
   20708:	01020034 	movhi	r4,2048
   2070c:	21002b04 	addi	r4,r4,172
   20710:	100b883a 	mov	r5,r2
   20714:	00239680 	call	23968 <printf>
        return false;
   20718:	0005883a 	mov	r2,zero
   2071c:	00000406 	br	20730 <_ZN8WiFiUart12send_commandEPKc+0x18c>
    }

    printf("AT ERROR: Buffer empty.\n");
   20720:	01020034 	movhi	r4,2048
   20724:	21003104 	addi	r4,r4,196
   20728:	0023a540 	call	23a54 <puts>
    return false;
   2072c:	0005883a 	mov	r2,zero
}
   20730:	e6ffff04 	addi	sp,fp,-4
   20734:	dfc00217 	ldw	ra,8(sp)
   20738:	df000117 	ldw	fp,4(sp)
   2073c:	dc000017 	ldw	r16,0(sp)
   20740:	dec00304 	addi	sp,sp,12
   20744:	f800283a 	ret

00020748 <_ZN8WiFiUart9send_dataEPKci>:


int WiFiUart::send_data(const char *data, int length)
{
   20748:	deff0004 	addi	sp,sp,-1024
   2074c:	dfc0ff15 	stw	ra,1020(sp)
   20750:	df00fe15 	stw	fp,1016(sp)
   20754:	df00fe04 	addi	fp,sp,1016
   20758:	e13ffd15 	stw	r4,-12(fp)
   2075c:	e17ffe15 	stw	r5,-8(fp)
   20760:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
   20764:	e03f0215 	stw	zero,-1016(fp)
   20768:	00000b06 	br	20798 <_ZN8WiFiUart9send_dataEPKci+0x50>
		write_s(data[count]);
   2076c:	e0bf0217 	ldw	r2,-1016(fp)
   20770:	e0fffe17 	ldw	r3,-8(fp)
   20774:	1885883a 	add	r2,r3,r2
   20778:	10800003 	ldbu	r2,0(r2)
   2077c:	10803fcc 	andi	r2,r2,255
   20780:	e13ffd17 	ldw	r4,-12(fp)
   20784:	100b883a 	mov	r5,r2
   20788:	00208c40 	call	208c4 <_ZN8WiFiUart7write_sEh>

int WiFiUart::send_data(const char *data, int length)
{
    int count;

	for (count = 0; count < length; count++) {
   2078c:	e0bf0217 	ldw	r2,-1016(fp)
   20790:	10800044 	addi	r2,r2,1
   20794:	e0bf0215 	stw	r2,-1016(fp)
   20798:	e0ff0217 	ldw	r3,-1016(fp)
   2079c:	e0bfff17 	ldw	r2,-4(fp)
   207a0:	18bff216 	blt	r3,r2,2076c <__alt_data_end+0xf402076c>
		write_s(data[count]);
	}

    char buffer[1000];
    count = 0;
   207a4:	e03f0215 	stw	zero,-1016(fp)

    while (read_ready()) {
   207a8:	00000a06 	br	207d4 <_ZN8WiFiUart9send_dataEPKci+0x8c>
        // read unwanted char out of fifo receiver buffer
        buffer[count] = read_s();
   207ac:	e13ffd17 	ldw	r4,-12(fp)
   207b0:	002097c0 	call	2097c <_ZN8WiFiUart6read_sEv>
   207b4:	1009883a 	mov	r4,r2
   207b8:	e0ff0304 	addi	r3,fp,-1012
   207bc:	e0bf0217 	ldw	r2,-1016(fp)
   207c0:	1885883a 	add	r2,r3,r2
   207c4:	11000005 	stb	r4,0(r2)
        count++;
   207c8:	e0bf0217 	ldw	r2,-1016(fp)
   207cc:	10800044 	addi	r2,r2,1
   207d0:	e0bf0215 	stw	r2,-1016(fp)
	}

    char buffer[1000];
    count = 0;

    while (read_ready()) {
   207d4:	e13ffd17 	ldw	r4,-12(fp)
   207d8:	00209dc0 	call	209dc <_ZN8WiFiUart10read_readyEv>
   207dc:	1004c03a 	cmpne	r2,r2,zero
   207e0:	10803fcc 	andi	r2,r2,255
   207e4:	103ff11e 	bne	r2,zero,207ac <__alt_data_end+0xf40207ac>
        // read unwanted char out of fifo receiver buffer
        buffer[count] = read_s();
        count++;
    }

    if (strstr(buffer, "SEND OK") != NULL) {
   207e8:	e0bf0304 	addi	r2,fp,-1012
   207ec:	1009883a 	mov	r4,r2
   207f0:	01420034 	movhi	r5,2048
   207f4:	29403704 	addi	r5,r5,220
   207f8:	0023efc0 	call	23efc <strstr>
   207fc:	10000226 	beq	r2,zero,20808 <_ZN8WiFiUart9send_dataEPKci+0xc0>
        return true;
   20800:	00800044 	movi	r2,1
   20804:	00000e06 	br	20840 <_ZN8WiFiUart9send_dataEPKci+0xf8>
    } else if (strstr(buffer, "SEND FAIL") != NULL) {
   20808:	e0bf0304 	addi	r2,fp,-1012
   2080c:	1009883a 	mov	r4,r2
   20810:	01420034 	movhi	r5,2048
   20814:	29403904 	addi	r5,r5,228
   20818:	0023efc0 	call	23efc <strstr>
   2081c:	10000726 	beq	r2,zero,2083c <_ZN8WiFiUart9send_dataEPKci+0xf4>
        printf("%s", buffer);
   20820:	e0bf0304 	addi	r2,fp,-1012
   20824:	01020034 	movhi	r4,2048
   20828:	21003c04 	addi	r4,r4,240
   2082c:	100b883a 	mov	r5,r2
   20830:	00239680 	call	23968 <printf>
        return false;
   20834:	0005883a 	mov	r2,zero
   20838:	00000106 	br	20840 <_ZN8WiFiUart9send_dataEPKci+0xf8>
    }

    return false;
   2083c:	0005883a 	mov	r2,zero
}
   20840:	e037883a 	mov	sp,fp
   20844:	dfc00117 	ldw	ra,4(sp)
   20848:	df000017 	ldw	fp,0(sp)
   2084c:	dec00204 	addi	sp,sp,8
   20850:	f800283a 	ret

00020854 <_ZN8WiFiUart4getsEPci>:


void WiFiUart::gets(char *buffer, int length)
{
   20854:	defff904 	addi	sp,sp,-28
   20858:	dfc00615 	stw	ra,24(sp)
   2085c:	df000515 	stw	fp,20(sp)
   20860:	dc000415 	stw	r16,16(sp)
   20864:	df000504 	addi	fp,sp,20
   20868:	e13ffc15 	stw	r4,-16(fp)
   2086c:	e17ffd15 	stw	r5,-12(fp)
   20870:	e1bffe15 	stw	r6,-8(fp)
	int count;

    for (count = 0; count < length; count++) {
   20874:	e03ffb15 	stw	zero,-20(fp)
   20878:	00000906 	br	208a0 <_ZN8WiFiUart4getsEPci+0x4c>
		buffer[count] = read_s();
   2087c:	e0bffb17 	ldw	r2,-20(fp)
   20880:	e0fffd17 	ldw	r3,-12(fp)
   20884:	18a1883a 	add	r16,r3,r2
   20888:	e13ffc17 	ldw	r4,-16(fp)
   2088c:	002097c0 	call	2097c <_ZN8WiFiUart6read_sEv>
   20890:	80800005 	stb	r2,0(r16)

void WiFiUart::gets(char *buffer, int length)
{
	int count;

    for (count = 0; count < length; count++) {
   20894:	e0bffb17 	ldw	r2,-20(fp)
   20898:	10800044 	addi	r2,r2,1
   2089c:	e0bffb15 	stw	r2,-20(fp)
   208a0:	e0fffb17 	ldw	r3,-20(fp)
   208a4:	e0bffe17 	ldw	r2,-8(fp)
   208a8:	18bff416 	blt	r3,r2,2087c <__alt_data_end+0xf402087c>
		buffer[count] = read_s();
	}
}
   208ac:	e6ffff04 	addi	sp,fp,-4
   208b0:	dfc00217 	ldw	ra,8(sp)
   208b4:	df000117 	ldw	fp,4(sp)
   208b8:	dc000017 	ldw	r16,0(sp)
   208bc:	dec00304 	addi	sp,sp,12
   208c0:	f800283a 	ret

000208c4 <_ZN8WiFiUart7write_sEh>:


int WiFiUart::write_s(alt_u8 data)
{
   208c4:	defffb04 	addi	sp,sp,-20
   208c8:	dfc00415 	stw	ra,16(sp)
   208cc:	df000315 	stw	fp,12(sp)
   208d0:	df000304 	addi	fp,sp,12
   208d4:	e13ffe15 	stw	r4,-8(fp)
   208d8:	2805883a 	mov	r2,r5
   208dc:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
   208e0:	e0bffe17 	ldw	r2,-8(fp)
   208e4:	10800117 	ldw	r2,4(r2)
   208e8:	1009883a 	mov	r4,r2
   208ec:	0025e2c0 	call	25e2c <alt_up_rs232_disable_read_interrupt>

    int result = 0;
   208f0:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
   208f4:	e0bffe17 	ldw	r2,-8(fp)
   208f8:	10800117 	ldw	r2,4(r2)
   208fc:	1009883a 	mov	r4,r2
   20900:	0025ec80 	call	25ec8 <alt_up_rs232_get_available_space_in_write_FIFO>
   20904:	1007883a 	mov	r3,r2
   20908:	e0bffe17 	ldw	r2,-8(fp)
   2090c:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
   20910:	e0bffe17 	ldw	r2,-8(fp)
   20914:	10800217 	ldw	r2,8(r2)
   20918:	10802030 	cmpltui	r2,r2,128
   2091c:	10000d1e 	bne	r2,zero,20954 <_ZN8WiFiUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
   20920:	e0bffe17 	ldw	r2,-8(fp)
   20924:	10c00117 	ldw	r3,4(r2)
   20928:	e0bfff03 	ldbu	r2,-4(fp)
   2092c:	1809883a 	mov	r4,r3
   20930:	100b883a 	mov	r5,r2
   20934:	0025f480 	call	25f48 <alt_up_rs232_write_data>
        printf("%s", data);
   20938:	e0bfff03 	ldbu	r2,-4(fp)
   2093c:	01020034 	movhi	r4,2048
   20940:	21003c04 	addi	r4,r4,240
   20944:	100b883a 	mov	r5,r2
   20948:	00239680 	call	23968 <printf>
        result = 1;
   2094c:	00800044 	movi	r2,1
   20950:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20954:	e0bffe17 	ldw	r2,-8(fp)
   20958:	10800117 	ldw	r2,4(r2)
   2095c:	1009883a 	mov	r4,r2
   20960:	0025dd40 	call	25dd4 <alt_up_rs232_enable_read_interrupt>
    return result;
   20964:	e0bffd17 	ldw	r2,-12(fp)
}
   20968:	e037883a 	mov	sp,fp
   2096c:	dfc00117 	ldw	ra,4(sp)
   20970:	df000017 	ldw	fp,0(sp)
   20974:	dec00204 	addi	sp,sp,8
   20978:	f800283a 	ret

0002097c <_ZN8WiFiUart6read_sEv>:


unsigned char WiFiUart::read_s(void)
{
   2097c:	defffc04 	addi	sp,sp,-16
   20980:	dfc00315 	stw	ra,12(sp)
   20984:	df000215 	stw	fp,8(sp)
   20988:	df000204 	addi	fp,sp,8
   2098c:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
   20990:	0001883a 	nop
   20994:	e13fff17 	ldw	r4,-4(fp)
   20998:	00209dc0 	call	209dc <_ZN8WiFiUart10read_readyEv>
   2099c:	1005003a 	cmpeq	r2,r2,zero
   209a0:	10803fcc 	andi	r2,r2,255
   209a4:	103ffb1e 	bne	r2,zero,20994 <__alt_data_end+0xf4020994>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
   209a8:	e0bfff17 	ldw	r2,-4(fp)
   209ac:	10c00117 	ldw	r3,4(r2)
   209b0:	e0bffe44 	addi	r2,fp,-7
   209b4:	1809883a 	mov	r4,r3
   209b8:	e17ffe04 	addi	r5,fp,-8
   209bc:	100d883a 	mov	r6,r2
   209c0:	0025f880 	call	25f88 <alt_up_rs232_read_data>

    return (unsigned char) buffer;
   209c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   209c8:	e037883a 	mov	sp,fp
   209cc:	dfc00117 	ldw	ra,4(sp)
   209d0:	df000017 	ldw	fp,0(sp)
   209d4:	dec00204 	addi	sp,sp,8
   209d8:	f800283a 	ret

000209dc <_ZN8WiFiUart10read_readyEv>:


int WiFiUart::read_ready(void)
{
   209dc:	defffc04 	addi	sp,sp,-16
   209e0:	dfc00315 	stw	ra,12(sp)
   209e4:	df000215 	stw	fp,8(sp)
   209e8:	df000204 	addi	fp,sp,8
   209ec:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
   209f0:	e0bfff17 	ldw	r2,-4(fp)
   209f4:	10800117 	ldw	r2,4(r2)
   209f8:	1009883a 	mov	r4,r2
   209fc:	0025e880 	call	25e88 <alt_up_rs232_get_used_space_in_read_FIFO>
   20a00:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
   20a04:	e0bffe0b 	ldhu	r2,-8(fp)
   20a08:	1004c03a 	cmpne	r2,r2,zero
   20a0c:	10803fcc 	andi	r2,r2,255
}
   20a10:	e037883a 	mov	sp,fp
   20a14:	dfc00117 	ldw	ra,4(sp)
   20a18:	df000017 	ldw	fp,0(sp)
   20a1c:	dec00204 	addi	sp,sp,8
   20a20:	f800283a 	ret

00020a24 <_ZN8WiFiUart5flushEv>:


void WiFiUart::flush(void)
{
   20a24:	defffd04 	addi	sp,sp,-12
   20a28:	dfc00215 	stw	ra,8(sp)
   20a2c:	df000115 	stw	fp,4(sp)
   20a30:	df000104 	addi	fp,sp,4
   20a34:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
   20a38:	00000206 	br	20a44 <_ZN8WiFiUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
   20a3c:	e13fff17 	ldw	r4,-4(fp)
   20a40:	002097c0 	call	2097c <_ZN8WiFiUart6read_sEv>
}


void WiFiUart::flush(void)
{
    while (read_ready()) {
   20a44:	e13fff17 	ldw	r4,-4(fp)
   20a48:	00209dc0 	call	209dc <_ZN8WiFiUart10read_readyEv>
   20a4c:	1004c03a 	cmpne	r2,r2,zero
   20a50:	10803fcc 	andi	r2,r2,255
   20a54:	103ff91e 	bne	r2,zero,20a3c <__alt_data_end+0xf4020a3c>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
   20a58:	0001883a 	nop
   20a5c:	e037883a 	mov	sp,fp
   20a60:	dfc00117 	ldw	ra,4(sp)
   20a64:	df000017 	ldw	fp,0(sp)
   20a68:	dec00204 	addi	sp,sp,8
   20a6c:	f800283a 	ret

00020a70 <_Z7bt_taskv>:
#include "BTUart.h"
#include "tasks.h"


int bt_task()
{
   20a70:	deffe304 	addi	sp,sp,-116
   20a74:	dfc01c15 	stw	ra,112(sp)
   20a78:	df001b15 	stw	fp,108(sp)
   20a7c:	ddc01a15 	stw	r23,104(sp)
   20a80:	dd801915 	stw	r22,100(sp)
   20a84:	dd401815 	stw	r21,96(sp)
   20a88:	dd001715 	stw	r20,92(sp)
   20a8c:	dcc01615 	stw	r19,88(sp)
   20a90:	dc801515 	stw	r18,84(sp)
   20a94:	dc401415 	stw	r17,80(sp)
   20a98:	dc001315 	stw	r16,76(sp)
   20a9c:	df001b04 	addi	fp,sp,108
   20aa0:	008000b4 	movhi	r2,2
   20aa4:	10864204 	addi	r2,r2,6408
   20aa8:	e0bff015 	stw	r2,-64(fp)
   20aac:	008000b4 	movhi	r2,2
   20ab0:	109c1204 	addi	r2,r2,28744
   20ab4:	e0bff115 	stw	r2,-60(fp)
   20ab8:	e0bff204 	addi	r2,fp,-56
   20abc:	e0ffe504 	addi	r3,fp,-108
   20ac0:	10c00015 	stw	r3,0(r2)
   20ac4:	00c000b4 	movhi	r3,2
   20ac8:	18c2e204 	addi	r3,r3,2952
   20acc:	10c00115 	stw	r3,4(r2)
   20ad0:	16c00215 	stw	sp,8(r2)
   20ad4:	e0bfea04 	addi	r2,fp,-88
   20ad8:	1009883a 	mov	r4,r2
   20adc:	0022f300 	call	22f30 <_Unwind_SjLj_Register>
  BTUart BT_UART;
   20ae0:	e0ffe704 	addi	r3,fp,-100
   20ae4:	00bfffc4 	movi	r2,-1
   20ae8:	e0bfeb15 	stw	r2,-84(fp)
   20aec:	1809883a 	mov	r4,r3
   20af0:	002005c0 	call	2005c <_ZN6BTUartC1Ev>
  char c;

  int init_success = BT_UART.open(BT_RS232_UART_NAME);
   20af4:	e0bfe704 	addi	r2,fp,-100
   20af8:	1009883a 	mov	r4,r2
   20afc:	01420034 	movhi	r5,2048
   20b00:	00800044 	movi	r2,1
   20b04:	e0bfeb15 	stw	r2,-84(fp)
   20b08:	29404404 	addi	r5,r5,272
   20b0c:	002010c0 	call	2010c <_ZN6BTUart4openEPKc>
   20b10:	e0bfe515 	stw	r2,-108(fp)
  BT_UART.flush();
   20b14:	e0bfe704 	addi	r2,fp,-100
   20b18:	1009883a 	mov	r4,r2
   20b1c:	00203b80 	call	203b8 <_ZN6BTUart5flushEv>

  if (init_success)
   20b20:	e0bfe517 	ldw	r2,-108(fp)
   20b24:	10000326 	beq	r2,zero,20b34 <_Z7bt_taskv+0xc4>
    printf("INIT SUCCESS: RS232 UART port.\n");
   20b28:	01020034 	movhi	r4,2048
   20b2c:	21004904 	addi	r4,r4,292
   20b30:	0023a540 	call	23a54 <puts>


  printf("START READING FROM UART FIFO ...\n");
   20b34:	01020034 	movhi	r4,2048
   20b38:	00800044 	movi	r2,1
   20b3c:	e0bfeb15 	stw	r2,-84(fp)
   20b40:	21005104 	addi	r4,r4,324
   20b44:	0023a540 	call	23a54 <puts>

  while (1) {
    if (BT_UART.read_ready()) {
   20b48:	e0ffe704 	addi	r3,fp,-100
   20b4c:	00800044 	movi	r2,1
   20b50:	e0bfeb15 	stw	r2,-84(fp)
   20b54:	1809883a 	mov	r4,r3
   20b58:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   20b5c:	1004c03a 	cmpne	r2,r2,zero
   20b60:	10803fcc 	andi	r2,r2,255
   20b64:	103ff826 	beq	r2,zero,20b48 <__alt_data_end+0xf4020b48>
      c = BT_UART.read_s();
   20b68:	e0bfe704 	addi	r2,fp,-100
   20b6c:	1009883a 	mov	r4,r2
   20b70:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
   20b74:	e0bfe605 	stb	r2,-104(fp)
      printf("%c", c);
   20b78:	e0bfe607 	ldb	r2,-104(fp)
   20b7c:	1009883a 	mov	r4,r2
   20b80:	00239bc0 	call	239bc <putchar>
   20b84:	003ff006 	br	20b48 <__alt_data_end+0xf4020b48>
   20b88:	e7001b04 	addi	fp,fp,108
   20b8c:	e0bfec17 	ldw	r2,-80(fp)
   20b90:	e0bff715 	stw	r2,-36(fp)
    }
  }

  return 0;
   20b94:	e0bfe704 	addi	r2,fp,-100
   20b98:	e03feb15 	stw	zero,-84(fp)
   20b9c:	1009883a 	mov	r4,r2
   20ba0:	002008c0 	call	2008c <_ZN6BTUartD1Ev>
   20ba4:	e0fff717 	ldw	r3,-36(fp)
   20ba8:	00bfffc4 	movi	r2,-1
   20bac:	e0bfeb15 	stw	r2,-84(fp)
   20bb0:	1809883a 	mov	r4,r3
   20bb4:	002312c0 	call	2312c <_Unwind_SjLj_Resume>

00020bb8 <_Z8led_taskv>:

#define LEDS_MAX_ITERATION (1000)
#define SLEEP_DELAY_US (100 * 1000)


int led_task() {
   20bb8:	defff904 	addi	sp,sp,-28
   20bbc:	dfc00615 	stw	ra,24(sp)
   20bc0:	df000515 	stw	fp,20(sp)
   20bc4:	df000504 	addi	fp,sp,20
    int loop_count = 0;
   20bc8:	e03ffb15 	stw	zero,-20(fp)
    int leds_mask = 0x01;
   20bcc:	00800044 	movi	r2,1
   20bd0:	e0bffc15 	stw	r2,-16(fp)

    // 0 - Left
    // 1 - Right
    int led_direction = 0;
   20bd4:	e03ffd15 	stw	zero,-12(fp)

    while (loop_count < LEDS_MAX_ITERATION) {
   20bd8:	00002406 	br	20c6c <_Z8led_taskv+0xb4>
        uint32_t switches_value = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   20bdc:	00800804 	movi	r2,32
   20be0:	10800037 	ldwio	r2,0(r2)
   20be4:	e0bffe15 	stw	r2,-8(fp)
        uint32_t leds_value = ~leds_mask;
   20be8:	e0bffc17 	ldw	r2,-16(fp)
   20bec:	0084303a 	nor	r2,zero,r2
   20bf0:	e0bfff15 	stw	r2,-4(fp)

        // only turn on leds which have their corresponding switch enabled
        IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds_value & switches_value);
   20bf4:	e0ffff17 	ldw	r3,-4(fp)
   20bf8:	e0bffe17 	ldw	r2,-8(fp)
   20bfc:	1884703a 	and	r2,r3,r2
   20c00:	1007883a 	mov	r3,r2
   20c04:	00840404 	movi	r2,4112
   20c08:	10c00035 	stwio	r3,0(r2)

        usleep(SLEEP_DELAY_US);
   20c0c:	010000b4 	movhi	r4,2
   20c10:	2121a804 	addi	r4,r4,-31072
   20c14:	00259580 	call	25958 <usleep>

        if (led_direction == 0) {
   20c18:	e0bffd17 	ldw	r2,-12(fp)
   20c1c:	1000091e 	bne	r2,zero,20c44 <_Z8led_taskv+0x8c>
            leds_mask <<= 1;
   20c20:	e0bffc17 	ldw	r2,-16(fp)
   20c24:	1085883a 	add	r2,r2,r2
   20c28:	e0bffc15 	stw	r2,-16(fp)
            if (leds_mask == (0x01 << (LEDS_DATA_WIDTH - 1))) {
   20c2c:	e0bffc17 	ldw	r2,-16(fp)
   20c30:	10808018 	cmpnei	r2,r2,512
   20c34:	10000d1e 	bne	r2,zero,20c6c <_Z8led_taskv+0xb4>
                led_direction = 1;
   20c38:	00800044 	movi	r2,1
   20c3c:	e0bffd15 	stw	r2,-12(fp)
   20c40:	00000a06 	br	20c6c <_Z8led_taskv+0xb4>
            }
        } else {
            leds_mask >>= 1;
   20c44:	e0bffc17 	ldw	r2,-16(fp)
   20c48:	1005d07a 	srai	r2,r2,1
   20c4c:	e0bffc15 	stw	r2,-16(fp)
            if (leds_mask == 0x01) {
   20c50:	e0bffc17 	ldw	r2,-16(fp)
   20c54:	10800058 	cmpnei	r2,r2,1
   20c58:	1000041e 	bne	r2,zero,20c6c <_Z8led_taskv+0xb4>
                led_direction = 0;
   20c5c:	e03ffd15 	stw	zero,-12(fp)
                loop_count++;
   20c60:	e0bffb17 	ldw	r2,-20(fp)
   20c64:	10800044 	addi	r2,r2,1
   20c68:	e0bffb15 	stw	r2,-20(fp)

    // 0 - Left
    // 1 - Right
    int led_direction = 0;

    while (loop_count < LEDS_MAX_ITERATION) {
   20c6c:	e0bffb17 	ldw	r2,-20(fp)
   20c70:	1080fa10 	cmplti	r2,r2,1000
   20c74:	103fd91e 	bne	r2,zero,20bdc <__alt_data_end+0xf4020bdc>
                loop_count++;
            }
        }
    }

    return 0;
   20c78:	0005883a 	mov	r2,zero
   20c7c:	e037883a 	mov	sp,fp
   20c80:	dfc00117 	ldw	ra,4(sp)
   20c84:	df000017 	ldw	fp,0(sp)
   20c88:	dec00204 	addi	sp,sp,8
   20c8c:	f800283a 	ret

00020c90 <main>:
#define RUN_BT    0
#define RUN_WIFI  0
#define RUN_LED   1

int main()
{
   20c90:	defffe04 	addi	sp,sp,-8
   20c94:	dfc00115 	stw	ra,4(sp)
   20c98:	df000015 	stw	fp,0(sp)
   20c9c:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION\n");
   20ca0:	01020034 	movhi	r4,2048
   20ca4:	21005a04 	addi	r4,r4,360
   20ca8:	0023a540 	call	23a54 <puts>
  printf("===========================================\n\n");
   20cac:	01020034 	movhi	r4,2048
   20cb0:	21006204 	addi	r4,r4,392
   20cb4:	0023a540 	call	23a54 <puts>
  #if (RUN_WIFI)
     wifi_task();
  #endif

  #if (RUN_LED)
     led_task();
   20cb8:	0020bb80 	call	20bb8 <_Z8led_taskv>
  #endif

  return 0;
   20cbc:	0005883a 	mov	r2,zero
}
   20cc0:	e037883a 	mov	sp,fp
   20cc4:	dfc00117 	ldw	ra,4(sp)
   20cc8:	df000017 	ldw	fp,0(sp)
   20ccc:	dec00204 	addi	sp,sp,8
   20cd0:	f800283a 	ret

00020cd4 <_Z9wifi_taskv>:
char *get_time(char *str);
WiFiUart WiFi_UART;


int wifi_task()
{
   20cd4:	deffe004 	addi	sp,sp,-128
   20cd8:	dfc01f15 	stw	ra,124(sp)
   20cdc:	df001e15 	stw	fp,120(sp)
   20ce0:	df001e04 	addi	fp,sp,120
    int open_success = WiFi_UART.open(WIFI_RS232_UART_NAME);
   20ce4:	01020034 	movhi	r4,2048
   20ce8:	21034604 	addi	r4,r4,3352
   20cec:	01420034 	movhi	r5,2048
   20cf0:	29406e04 	addi	r5,r5,440
   20cf4:	00204b40 	call	204b4 <_ZN8WiFiUart4openEPKc>
   20cf8:	e0bfe215 	stw	r2,-120(fp)
    WiFi_UART.flush();
   20cfc:	01020034 	movhi	r4,2048
   20d00:	21034604 	addi	r4,r4,3352
   20d04:	0020a240 	call	20a24 <_ZN8WiFiUart5flushEv>

    if (!open_success) {
   20d08:	e0bfe217 	ldw	r2,-120(fp)
   20d0c:	1000051e 	bne	r2,zero,20d24 <_Z9wifi_taskv+0x50>
        printf("OPEN ERROR: RS232 UART port fail to open.\n");
   20d10:	01020034 	movhi	r4,2048
   20d14:	21007404 	addi	r4,r4,464
   20d18:	0023a540 	call	23a54 <puts>
        return 0;
   20d1c:	0005883a 	mov	r2,zero
   20d20:	00001806 	br	20d84 <_Z9wifi_taskv+0xb0>
    }

    int connect_success = WiFi_UART.connect();
   20d24:	01020034 	movhi	r4,2048
   20d28:	21034604 	addi	r4,r4,3352
   20d2c:	002051c0 	call	2051c <_ZN8WiFiUart7connectEv>
   20d30:	e0bfe315 	stw	r2,-116(fp)

    if (!connect_success)
   20d34:	e0bfe317 	ldw	r2,-116(fp)
   20d38:	1000021e 	bne	r2,zero,20d44 <_Z9wifi_taskv+0x70>
        return 0;
   20d3c:	0005883a 	mov	r2,zero
   20d40:	00001006 	br	20d84 <_Z9wifi_taskv+0xb0>

    char str[100];
    int hour = 0, minute = 0, second = 0;
   20d44:	e03fe415 	stw	zero,-112(fp)
   20d48:	e03fe515 	stw	zero,-108(fp)
   20d4c:	e03fe615 	stw	zero,-104(fp)

    while (1) {
        if (get_time(str) != NULL)
   20d50:	e0bfe704 	addi	r2,fp,-100
   20d54:	1009883a 	mov	r4,r2
   20d58:	0020d980 	call	20d98 <_Z8get_timePc>
   20d5c:	1004c03a 	cmpne	r2,r2,zero
   20d60:	10803fcc 	andi	r2,r2,255
   20d64:	10000626 	beq	r2,zero,20d80 <_Z9wifi_taskv+0xac>
            printf("Time: %d:%d:%d\n", hour, minute, second);
   20d68:	01020034 	movhi	r4,2048
   20d6c:	21007f04 	addi	r4,r4,508
   20d70:	e17fe417 	ldw	r5,-112(fp)
   20d74:	e1bfe517 	ldw	r6,-108(fp)
   20d78:	e1ffe617 	ldw	r7,-104(fp)
   20d7c:	00239680 	call	23968 <printf>
    }

    return 0;
   20d80:	003ff306 	br	20d50 <__alt_data_end+0xf4020d50>
}
   20d84:	e037883a 	mov	sp,fp
   20d88:	dfc00117 	ldw	ra,4(sp)
   20d8c:	df000017 	ldw	fp,0(sp)
   20d90:	dec00204 	addi	sp,sp,8
   20d94:	f800283a 	ret

00020d98 <_Z8get_timePc>:
User-Agent: terasic-rfs\r\n\
\r\n\
";

char *get_time(char *str)
{
   20d98:	defee704 	addi	sp,sp,-1124
   20d9c:	dfc11815 	stw	ra,1120(sp)
   20da0:	df011715 	stw	fp,1116(sp)
   20da4:	dc011615 	stw	r16,1112(sp)
   20da8:	df011704 	addi	fp,sp,1116
   20dac:	e13ffe15 	stw	r4,-8(fp)
    bool success = true;
   20db0:	00800044 	movi	r2,1
   20db4:	e0bee905 	stb	r2,-1116(fp)
    char cmd_buffer[100];
    char buffer[1000];

    if (success) {
   20db8:	e0bee903 	ldbu	r2,-1116(fp)
   20dbc:	10000e26 	beq	r2,zero,20df8 <_Z8get_timePc+0x60>
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
                time_server_domain);
   20dc0:	d0a00617 	ldw	r2,-32744(gp)
   20dc4:	e0ffe504 	addi	r3,fp,-108
   20dc8:	1809883a 	mov	r4,r3
   20dcc:	01420034 	movhi	r5,2048
   20dd0:	29409b04 	addi	r5,r5,620
   20dd4:	100d883a 	mov	r6,r2
   20dd8:	0023e040 	call	23e04 <sprintf>
        success = WiFi_UART.send_command(cmd_buffer);
   20ddc:	e0bfe504 	addi	r2,fp,-108
   20de0:	01020034 	movhi	r4,2048
   20de4:	21034604 	addi	r4,r4,3352
   20de8:	100b883a 	mov	r5,r2
   20dec:	00205a40 	call	205a4 <_ZN8WiFiUart12send_commandEPKc>
   20df0:	1004c03a 	cmpne	r2,r2,zero
   20df4:	e0bee905 	stb	r2,-1116(fp)
    }
    if (success) {
   20df8:	e0bee903 	ldbu	r2,-1116(fp)
   20dfc:	10001126 	beq	r2,zero,20e44 <_Z8get_timePc+0xac>
        sprintf(cmd_buffer, "AT+CIPSEND=%d", strlen(get_time_request));
   20e00:	d0a00717 	ldw	r2,-32740(gp)
   20e04:	1009883a 	mov	r4,r2
   20e08:	0023ee00 	call	23ee0 <strlen>
   20e0c:	1007883a 	mov	r3,r2
   20e10:	e0bfe504 	addi	r2,fp,-108
   20e14:	1009883a 	mov	r4,r2
   20e18:	01420034 	movhi	r5,2048
   20e1c:	2940a204 	addi	r5,r5,648
   20e20:	180d883a 	mov	r6,r3
   20e24:	0023e040 	call	23e04 <sprintf>
        success = WiFi_UART.send_command(cmd_buffer);
   20e28:	e0bfe504 	addi	r2,fp,-108
   20e2c:	01020034 	movhi	r4,2048
   20e30:	21034604 	addi	r4,r4,3352
   20e34:	100b883a 	mov	r5,r2
   20e38:	00205a40 	call	205a4 <_ZN8WiFiUart12send_commandEPKc>
   20e3c:	1004c03a 	cmpne	r2,r2,zero
   20e40:	e0bee905 	stb	r2,-1116(fp)
    }
    if (success) {
   20e44:	e0bee903 	ldbu	r2,-1116(fp)
   20e48:	10000b26 	beq	r2,zero,20e78 <_Z8get_timePc+0xe0>
        success = WiFi_UART.send_data(get_time_request, strlen(get_time_request));
   20e4c:	d4200717 	ldw	r16,-32740(gp)
   20e50:	d0a00717 	ldw	r2,-32740(gp)
   20e54:	1009883a 	mov	r4,r2
   20e58:	0023ee00 	call	23ee0 <strlen>
   20e5c:	01020034 	movhi	r4,2048
   20e60:	21034604 	addi	r4,r4,3352
   20e64:	800b883a 	mov	r5,r16
   20e68:	100d883a 	mov	r6,r2
   20e6c:	00207480 	call	20748 <_ZN8WiFiUart9send_dataEPKci>
   20e70:	1004c03a 	cmpne	r2,r2,zero
   20e74:	e0bee905 	stb	r2,-1116(fp)
    }

    int length = 0;
   20e78:	e03eea15 	stw	zero,-1112(fp)

    if (success) {
   20e7c:	e0bee903 	ldbu	r2,-1116(fp)
   20e80:	10003c26 	beq	r2,zero,20f74 <_Z8get_timePc+0x1dc>
        while (1) {
            WiFi_UART.gets(buffer, sizeof(buffer));
   20e84:	0080fa04 	movi	r2,1000
   20e88:	e0feeb04 	addi	r3,fp,-1108
   20e8c:	01020034 	movhi	r4,2048
   20e90:	21034604 	addi	r4,r4,3352
   20e94:	180b883a 	mov	r5,r3
   20e98:	100d883a 	mov	r6,r2
   20e9c:	00208540 	call	20854 <_ZN8WiFiUart4getsEPci>
            if (strstr(buffer, "+IPD") != NULL) {
   20ea0:	e0beeb04 	addi	r2,fp,-1108
   20ea4:	1009883a 	mov	r4,r2
   20ea8:	01420034 	movhi	r5,2048
   20eac:	2940a604 	addi	r5,r5,664
   20eb0:	0023efc0 	call	23efc <strstr>
   20eb4:	10002e26 	beq	r2,zero,20f70 <_Z8get_timePc+0x1d8>
                length = strlen(buffer);
   20eb8:	e0beeb04 	addi	r2,fp,-1108
   20ebc:	1009883a 	mov	r4,r2
   20ec0:	0023ee00 	call	23ee0 <strlen>
   20ec4:	e0beea15 	stw	r2,-1112(fp)
                while (1) {
                    WiFi_UART.gets(buffer + length, sizeof(buffer) - length);
   20ec8:	e0beea17 	ldw	r2,-1112(fp)
   20ecc:	e0feeb04 	addi	r3,fp,-1108
   20ed0:	188b883a 	add	r5,r3,r2
   20ed4:	e0beea17 	ldw	r2,-1112(fp)
   20ed8:	00c0fa04 	movi	r3,1000
   20edc:	1885c83a 	sub	r2,r3,r2
   20ee0:	01020034 	movhi	r4,2048
   20ee4:	21034604 	addi	r4,r4,3352
   20ee8:	100d883a 	mov	r6,r2
   20eec:	00208540 	call	20854 <_ZN8WiFiUart4getsEPci>
                    if (strcmp(buffer + length, "\r\n") == 0)
   20ef0:	e0beea17 	ldw	r2,-1112(fp)
   20ef4:	e0feeb04 	addi	r3,fp,-1108
   20ef8:	1885883a 	add	r2,r3,r2
   20efc:	1009883a 	mov	r4,r2
   20f00:	01420034 	movhi	r5,2048
   20f04:	2940a804 	addi	r5,r5,672
   20f08:	0023e7c0 	call	23e7c <strcmp>
   20f0c:	10000e1e 	bne	r2,zero,20f48 <_Z8get_timePc+0x1b0>
                        break;
   20f10:	0001883a 	nop
                    length += strlen(buffer + length);
                }
                break;
   20f14:	0001883a 	nop
            }
        }
        WiFi_UART.gets(buffer, 9);
   20f18:	e0beeb04 	addi	r2,fp,-1108
   20f1c:	01020034 	movhi	r4,2048
   20f20:	21034604 	addi	r4,r4,3352
   20f24:	100b883a 	mov	r5,r2
   20f28:	01800244 	movi	r6,9
   20f2c:	00208540 	call	20854 <_ZN8WiFiUart4getsEPci>
        printf("time: %s\n", buffer);
   20f30:	e0beeb04 	addi	r2,fp,-1108
   20f34:	01020034 	movhi	r4,2048
   20f38:	2100a904 	addi	r4,r4,676
   20f3c:	100b883a 	mov	r5,r2
   20f40:	00239680 	call	23968 <printf>
   20f44:	00000b06 	br	20f74 <_Z8get_timePc+0x1dc>
                length = strlen(buffer);
                while (1) {
                    WiFi_UART.gets(buffer + length, sizeof(buffer) - length);
                    if (strcmp(buffer + length, "\r\n") == 0)
                        break;
                    length += strlen(buffer + length);
   20f48:	e0beea17 	ldw	r2,-1112(fp)
   20f4c:	e0feeb04 	addi	r3,fp,-1108
   20f50:	1885883a 	add	r2,r3,r2
   20f54:	1009883a 	mov	r4,r2
   20f58:	0023ee00 	call	23ee0 <strlen>
   20f5c:	1007883a 	mov	r3,r2
   20f60:	e0beea17 	ldw	r2,-1112(fp)
   20f64:	1885883a 	add	r2,r3,r2
   20f68:	e0beea15 	stw	r2,-1112(fp)
    int length = 0;

    if (success) {
        while (1) {
            WiFi_UART.gets(buffer, sizeof(buffer));
            if (strstr(buffer, "+IPD") != NULL) {
   20f6c:	003fd606 	br	20ec8 <__alt_data_end+0xf4020ec8>
        success = WiFi_UART.send_data(get_time_request, strlen(get_time_request));
    }

    int length = 0;

    if (success) {
   20f70:	003fc406 	br	20e84 <__alt_data_end+0xf4020e84>
        }
        WiFi_UART.gets(buffer, 9);
        printf("time: %s\n", buffer);
    }

    if (success) {
   20f74:	e0bee903 	ldbu	r2,-1116(fp)
   20f78:	10000626 	beq	r2,zero,20f94 <_Z8get_timePc+0x1fc>
        strcpy(str, buffer);
   20f7c:	e0beeb04 	addi	r2,fp,-1108
   20f80:	e13ffe17 	ldw	r4,-8(fp)
   20f84:	100b883a 	mov	r5,r2
   20f88:	0023eb40 	call	23eb4 <strcpy>
        return str;
   20f8c:	e0bffe17 	ldw	r2,-8(fp)
   20f90:	00000106 	br	20f98 <_Z8get_timePc+0x200>
    } else {
        return NULL;
   20f94:	0005883a 	mov	r2,zero
    }
   20f98:	e6ffff04 	addi	sp,fp,-4
   20f9c:	dfc00217 	ldw	ra,8(sp)
   20fa0:	df000117 	ldw	fp,4(sp)
   20fa4:	dc000017 	ldw	r16,0(sp)
   20fa8:	dec00304 	addi	sp,sp,12
   20fac:	f800283a 	ret

00020fb0 <_Z41__static_initialization_and_destruction_0ii>:
   20fb0:	defffc04 	addi	sp,sp,-16
   20fb4:	dfc00315 	stw	ra,12(sp)
   20fb8:	df000215 	stw	fp,8(sp)
   20fbc:	df000204 	addi	fp,sp,8
   20fc0:	e13ffe15 	stw	r4,-8(fp)
   20fc4:	e17fff15 	stw	r5,-4(fp)
   20fc8:	e0bffe17 	ldw	r2,-8(fp)
   20fcc:	10800058 	cmpnei	r2,r2,1
   20fd0:	1000061e 	bne	r2,zero,20fec <_Z41__static_initialization_and_destruction_0ii+0x3c>
   20fd4:	e0ffff17 	ldw	r3,-4(fp)
   20fd8:	00bfffd4 	movui	r2,65535
   20fdc:	1880031e 	bne	r3,r2,20fec <_Z41__static_initialization_and_destruction_0ii+0x3c>
#include "WiFiUart.h"
#include "tasks.h"


char *get_time(char *str);
WiFiUart WiFi_UART;
   20fe0:	01020034 	movhi	r4,2048
   20fe4:	21034604 	addi	r4,r4,3352
   20fe8:	00204040 	call	20404 <_ZN8WiFiUartC1Ev>
   20fec:	e0bffe17 	ldw	r2,-8(fp)
   20ff0:	1000061e 	bne	r2,zero,2100c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   20ff4:	e0ffff17 	ldw	r3,-4(fp)
   20ff8:	00bfffd4 	movui	r2,65535
   20ffc:	1880031e 	bne	r3,r2,2100c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   21000:	01020034 	movhi	r4,2048
   21004:	21034604 	addi	r4,r4,3352
   21008:	00204340 	call	20434 <_ZN8WiFiUartD1Ev>
        strcpy(str, buffer);
        return str;
    } else {
        return NULL;
    }
   2100c:	e037883a 	mov	sp,fp
   21010:	dfc00117 	ldw	ra,4(sp)
   21014:	df000017 	ldw	fp,0(sp)
   21018:	dec00204 	addi	sp,sp,8
   2101c:	f800283a 	ret

00021020 <_GLOBAL__sub_I_WiFi_UART>:
   21020:	defffe04 	addi	sp,sp,-8
   21024:	dfc00115 	stw	ra,4(sp)
   21028:	df000015 	stw	fp,0(sp)
   2102c:	d839883a 	mov	fp,sp
   21030:	01000044 	movi	r4,1
   21034:	017fffd4 	movui	r5,65535
   21038:	0020fb00 	call	20fb0 <_Z41__static_initialization_and_destruction_0ii>
   2103c:	e037883a 	mov	sp,fp
   21040:	dfc00117 	ldw	ra,4(sp)
   21044:	df000017 	ldw	fp,0(sp)
   21048:	dec00204 	addi	sp,sp,8
   2104c:	f800283a 	ret

00021050 <_GLOBAL__sub_D_WiFi_UART>:
   21050:	defffe04 	addi	sp,sp,-8
   21054:	dfc00115 	stw	ra,4(sp)
   21058:	df000015 	stw	fp,0(sp)
   2105c:	d839883a 	mov	fp,sp
   21060:	0009883a 	mov	r4,zero
   21064:	017fffd4 	movui	r5,65535
   21068:	0020fb00 	call	20fb0 <_Z41__static_initialization_and_destruction_0ii>
   2106c:	e037883a 	mov	sp,fp
   21070:	dfc00117 	ldw	ra,4(sp)
   21074:	df000017 	ldw	fp,0(sp)
   21078:	dec00204 	addi	sp,sp,8
   2107c:	f800283a 	ret

00021080 <_ZL12read_sleb128PKhPl>:
   21080:	0011883a 	mov	r8,zero
   21084:	000d883a 	mov	r6,zero
   21088:	21c00003 	ldbu	r7,0(r4)
   2108c:	20800044 	addi	r2,r4,1
   21090:	1009883a 	mov	r4,r2
   21094:	38c01fcc 	andi	r3,r7,127
   21098:	1986983a 	sll	r3,r3,r6
   2109c:	3a403fcc 	andi	r9,r7,255
   210a0:	4a40201c 	xori	r9,r9,128
   210a4:	4a7fe004 	addi	r9,r9,-128
   210a8:	40d0b03a 	or	r8,r8,r3
   210ac:	318001c4 	addi	r6,r6,7
   210b0:	483ff516 	blt	r9,zero,21088 <__alt_data_end+0xf4021088>
   210b4:	00c007c4 	movi	r3,31
   210b8:	19800536 	bltu	r3,r6,210d0 <_ZL12read_sleb128PKhPl+0x50>
   210bc:	39c0100c 	andi	r7,r7,64
   210c0:	38000326 	beq	r7,zero,210d0 <_ZL12read_sleb128PKhPl+0x50>
   210c4:	00ffffc4 	movi	r3,-1
   210c8:	198c983a 	sll	r6,r3,r6
   210cc:	3210b03a 	or	r8,r6,r8
   210d0:	2a000015 	stw	r8,0(r5)
   210d4:	f800283a 	ret

000210d8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   210d8:	28800017 	ldw	r2,0(r5)
   210dc:	30c00017 	ldw	r3,0(r6)
   210e0:	defffb04 	addi	sp,sp,-20
   210e4:	10800217 	ldw	r2,8(r2)
   210e8:	dc400315 	stw	r17,12(sp)
   210ec:	dc000215 	stw	r16,8(sp)
   210f0:	d9400115 	stw	r5,4(sp)
   210f4:	dfc00415 	stw	ra,16(sp)
   210f8:	2021883a 	mov	r16,r4
   210fc:	d8c00015 	stw	r3,0(sp)
   21100:	2809883a 	mov	r4,r5
   21104:	3023883a 	mov	r17,r6
   21108:	103ee83a 	callr	r2
   2110c:	10803fcc 	andi	r2,r2,255
   21110:	d9400117 	ldw	r5,4(sp)
   21114:	10000326 	beq	r2,zero,21124 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   21118:	d8800017 	ldw	r2,0(sp)
   2111c:	10800017 	ldw	r2,0(r2)
   21120:	d8800015 	stw	r2,0(sp)
   21124:	80800017 	ldw	r2,0(r16)
   21128:	8009883a 	mov	r4,r16
   2112c:	d80d883a 	mov	r6,sp
   21130:	10800417 	ldw	r2,16(r2)
   21134:	01c00044 	movi	r7,1
   21138:	103ee83a 	callr	r2
   2113c:	10c03fcc 	andi	r3,r2,255
   21140:	18000226 	beq	r3,zero,2114c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
   21144:	d8c00017 	ldw	r3,0(sp)
   21148:	88c00015 	stw	r3,0(r17)
   2114c:	dfc00417 	ldw	ra,16(sp)
   21150:	dc400317 	ldw	r17,12(sp)
   21154:	dc000217 	ldw	r16,8(sp)
   21158:	dec00504 	addi	sp,sp,20
   2115c:	f800283a 	ret

00021160 <_ZL21size_of_encoded_valueh>:
   21160:	deffff04 	addi	sp,sp,-4
   21164:	dfc00015 	stw	ra,0(sp)
   21168:	00803fc4 	movi	r2,255
   2116c:	20802026 	beq	r4,r2,211f0 <_ZL21size_of_encoded_valueh+0x90>
   21170:	210001cc 	andi	r4,r4,7
   21174:	00800144 	movi	r2,5
   21178:	11001c36 	bltu	r2,r4,211ec <_ZL21size_of_encoded_valueh+0x8c>
   2117c:	200890ba 	slli	r4,r4,2
   21180:	008000b4 	movhi	r2,2
   21184:	10846504 	addi	r2,r2,4500
   21188:	2089883a 	add	r4,r4,r2
   2118c:	20800017 	ldw	r2,0(r4)
   21190:	1000683a 	jmp	r2
   21194:	000211ac 	andhi	zero,zero,2118
   21198:	000211ec 	andhi	zero,zero,2119
   2119c:	000211bc 	xorhi	zero,zero,2118
   211a0:	000211ac 	andhi	zero,zero,2118
   211a4:	000211dc 	xori	zero,zero,2119
   211a8:	000211cc 	andi	zero,zero,2119
   211ac:	00800104 	movi	r2,4
   211b0:	dfc00017 	ldw	ra,0(sp)
   211b4:	dec00104 	addi	sp,sp,4
   211b8:	f800283a 	ret
   211bc:	00800084 	movi	r2,2
   211c0:	dfc00017 	ldw	ra,0(sp)
   211c4:	dec00104 	addi	sp,sp,4
   211c8:	f800283a 	ret
   211cc:	00800044 	movi	r2,1
   211d0:	dfc00017 	ldw	ra,0(sp)
   211d4:	dec00104 	addi	sp,sp,4
   211d8:	f800283a 	ret
   211dc:	00800204 	movi	r2,8
   211e0:	dfc00017 	ldw	ra,0(sp)
   211e4:	dec00104 	addi	sp,sp,4
   211e8:	f800283a 	ret
   211ec:	00232480 	call	23248 <abort>
   211f0:	0005883a 	mov	r2,zero
   211f4:	dfc00017 	ldw	ra,0(sp)
   211f8:	dec00104 	addi	sp,sp,4
   211fc:	f800283a 	ret

00021200 <_ZL28read_encoded_value_with_basehjPKhPj>:
   21200:	defffa04 	addi	sp,sp,-24
   21204:	dc000315 	stw	r16,12(sp)
   21208:	dfc00515 	stw	ra,20(sp)
   2120c:	dc400415 	stw	r17,16(sp)
   21210:	00801404 	movi	r2,80
   21214:	2021883a 	mov	r16,r4
   21218:	20807526 	beq	r4,r2,213f0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
   2121c:	208003cc 	andi	r2,r4,15
   21220:	00c00304 	movi	r3,12
   21224:	18807136 	bltu	r3,r2,213ec <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
   21228:	100490ba 	slli	r2,r2,2
   2122c:	00c000b4 	movhi	r3,2
   21230:	18c49104 	addi	r3,r3,4676
   21234:	10c5883a 	add	r2,r2,r3
   21238:	10800017 	ldw	r2,0(r2)
   2123c:	2823883a 	mov	r17,r5
   21240:	1000683a 	jmp	r2
   21244:	0002132c 	andhi	zero,zero,2124
   21248:	0002135c 	xori	zero,zero,2125
   2124c:	00021314 	movui	zero,2124
   21250:	00021278 	rdprs	zero,zero,2121
   21254:	000212e4 	muli	zero,zero,2123
   21258:	00021398 	cmpnei	zero,zero,2126
   2125c:	000213ec 	andhi	zero,zero,2127
   21260:	000213ec 	andhi	zero,zero,2127
   21264:	000213ec 	andhi	zero,zero,2127
   21268:	000213a4 	muli	zero,zero,2126
   2126c:	000213c8 	cmpgei	zero,zero,2127
   21270:	00021278 	rdprs	zero,zero,2121
   21274:	000212e4 	muli	zero,zero,2123
   21278:	30800043 	ldbu	r2,1(r6)
   2127c:	30c00083 	ldbu	r3,2(r6)
   21280:	310000c3 	ldbu	r4,3(r6)
   21284:	32000003 	ldbu	r8,0(r6)
   21288:	1004923a 	slli	r2,r2,8
   2128c:	1806943a 	slli	r3,r3,16
   21290:	2008963a 	slli	r4,r4,24
   21294:	1204b03a 	or	r2,r2,r8
   21298:	1884b03a 	or	r2,r3,r2
   2129c:	2086b03a 	or	r3,r4,r2
   212a0:	30800104 	addi	r2,r6,4
   212a4:	18000926 	beq	r3,zero,212cc <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   212a8:	81401c0c 	andi	r5,r16,112
   212ac:	01000404 	movi	r4,16
   212b0:	29005526 	beq	r5,r4,21408 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
   212b4:	84003fcc 	andi	r16,r16,255
   212b8:	8400201c 	xori	r16,r16,128
   212bc:	843fe004 	addi	r16,r16,-128
   212c0:	1c47883a 	add	r3,r3,r17
   212c4:	8000010e 	bge	r16,zero,212cc <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   212c8:	18c00017 	ldw	r3,0(r3)
   212cc:	38c00015 	stw	r3,0(r7)
   212d0:	dfc00517 	ldw	ra,20(sp)
   212d4:	dc400417 	ldw	r17,16(sp)
   212d8:	dc000317 	ldw	r16,12(sp)
   212dc:	dec00604 	addi	sp,sp,24
   212e0:	f800283a 	ret
   212e4:	30800043 	ldbu	r2,1(r6)
   212e8:	30c00083 	ldbu	r3,2(r6)
   212ec:	310000c3 	ldbu	r4,3(r6)
   212f0:	32000003 	ldbu	r8,0(r6)
   212f4:	1004923a 	slli	r2,r2,8
   212f8:	1806943a 	slli	r3,r3,16
   212fc:	2008963a 	slli	r4,r4,24
   21300:	1204b03a 	or	r2,r2,r8
   21304:	1884b03a 	or	r2,r3,r2
   21308:	2086b03a 	or	r3,r4,r2
   2130c:	30800204 	addi	r2,r6,8
   21310:	003fe406 	br	212a4 <__alt_data_end+0xf40212a4>
   21314:	30c00043 	ldbu	r3,1(r6)
   21318:	32000003 	ldbu	r8,0(r6)
   2131c:	30800084 	addi	r2,r6,2
   21320:	1806923a 	slli	r3,r3,8
   21324:	1a06b03a 	or	r3,r3,r8
   21328:	003fde06 	br	212a4 <__alt_data_end+0xf40212a4>
   2132c:	30800043 	ldbu	r2,1(r6)
   21330:	30c00083 	ldbu	r3,2(r6)
   21334:	314000c3 	ldbu	r5,3(r6)
   21338:	31000003 	ldbu	r4,0(r6)
   2133c:	1004923a 	slli	r2,r2,8
   21340:	1806943a 	slli	r3,r3,16
   21344:	280a963a 	slli	r5,r5,24
   21348:	1104b03a 	or	r2,r2,r4
   2134c:	1884b03a 	or	r2,r3,r2
   21350:	2886b03a 	or	r3,r5,r2
   21354:	30800104 	addi	r2,r6,4
   21358:	003fd206 	br	212a4 <__alt_data_end+0xf40212a4>
   2135c:	3013883a 	mov	r9,r6
   21360:	0007883a 	mov	r3,zero
   21364:	0011883a 	mov	r8,zero
   21368:	49000003 	ldbu	r4,0(r9)
   2136c:	48800044 	addi	r2,r9,1
   21370:	1013883a 	mov	r9,r2
   21374:	21401fcc 	andi	r5,r4,127
   21378:	2a0a983a 	sll	r5,r5,r8
   2137c:	21003fcc 	andi	r4,r4,255
   21380:	2100201c 	xori	r4,r4,128
   21384:	213fe004 	addi	r4,r4,-128
   21388:	1946b03a 	or	r3,r3,r5
   2138c:	420001c4 	addi	r8,r8,7
   21390:	203ff516 	blt	r4,zero,21368 <__alt_data_end+0xf4021368>
   21394:	003fc306 	br	212a4 <__alt_data_end+0xf40212a4>
   21398:	30c00003 	ldbu	r3,0(r6)
   2139c:	30800044 	addi	r2,r6,1
   213a0:	003fc006 	br	212a4 <__alt_data_end+0xf40212a4>
   213a4:	3009883a 	mov	r4,r6
   213a8:	d80b883a 	mov	r5,sp
   213ac:	d9800115 	stw	r6,4(sp)
   213b0:	d9c00215 	stw	r7,8(sp)
   213b4:	00210800 	call	21080 <_ZL12read_sleb128PKhPl>
   213b8:	d8c00017 	ldw	r3,0(sp)
   213bc:	d9800117 	ldw	r6,4(sp)
   213c0:	d9c00217 	ldw	r7,8(sp)
   213c4:	003fb706 	br	212a4 <__alt_data_end+0xf40212a4>
   213c8:	30c00043 	ldbu	r3,1(r6)
   213cc:	32000003 	ldbu	r8,0(r6)
   213d0:	30800084 	addi	r2,r6,2
   213d4:	1806923a 	slli	r3,r3,8
   213d8:	1a06b03a 	or	r3,r3,r8
   213dc:	18ffffcc 	andi	r3,r3,65535
   213e0:	18e0001c 	xori	r3,r3,32768
   213e4:	18e00004 	addi	r3,r3,-32768
   213e8:	003fae06 	br	212a4 <__alt_data_end+0xf40212a4>
   213ec:	00232480 	call	23248 <abort>
   213f0:	318000c4 	addi	r6,r6,3
   213f4:	00bfff04 	movi	r2,-4
   213f8:	3084703a 	and	r2,r6,r2
   213fc:	10c00017 	ldw	r3,0(r2)
   21400:	10800104 	addi	r2,r2,4
   21404:	003fb106 	br	212cc <__alt_data_end+0xf40212cc>
   21408:	3023883a 	mov	r17,r6
   2140c:	003fa906 	br	212b4 <__alt_data_end+0xf40212b4>

00021410 <_ZL15get_ttype_entryP16lsda_header_infom>:
   21410:	defffc04 	addi	sp,sp,-16
   21414:	dfc00315 	stw	ra,12(sp)
   21418:	dc000215 	stw	r16,8(sp)
   2141c:	2021883a 	mov	r16,r4
   21420:	21000503 	ldbu	r4,20(r4)
   21424:	d9400115 	stw	r5,4(sp)
   21428:	00211600 	call	21160 <_ZL21size_of_encoded_valueh>
   2142c:	d9400117 	ldw	r5,4(sp)
   21430:	1009883a 	mov	r4,r2
   21434:	0022d000 	call	22d00 <__mulsi3>
   21438:	81800317 	ldw	r6,12(r16)
   2143c:	81000503 	ldbu	r4,20(r16)
   21440:	81400217 	ldw	r5,8(r16)
   21444:	308dc83a 	sub	r6,r6,r2
   21448:	d80f883a 	mov	r7,sp
   2144c:	00212000 	call	21200 <_ZL28read_encoded_value_with_basehjPKhPj>
   21450:	d8800017 	ldw	r2,0(sp)
   21454:	dfc00317 	ldw	ra,12(sp)
   21458:	dc000217 	ldw	r16,8(sp)
   2145c:	dec00404 	addi	sp,sp,16
   21460:	f800283a 	ret

00021464 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   21464:	defffb04 	addi	sp,sp,-20
   21468:	dc000115 	stw	r16,4(sp)
   2146c:	24000317 	ldw	r16,12(r4)
   21470:	01ce303a 	nor	r7,zero,r7
   21474:	dc800315 	stw	r18,12(sp)
   21478:	dc400215 	stw	r17,8(sp)
   2147c:	dfc00415 	stw	ra,16(sp)
   21480:	2023883a 	mov	r17,r4
   21484:	2825883a 	mov	r18,r5
   21488:	d9800015 	stw	r6,0(sp)
   2148c:	81e1883a 	add	r16,r16,r7
   21490:	8009883a 	mov	r4,r16
   21494:	000b883a 	mov	r5,zero
   21498:	000d883a 	mov	r6,zero
   2149c:	20800003 	ldbu	r2,0(r4)
   214a0:	84000044 	addi	r16,r16,1
   214a4:	8009883a 	mov	r4,r16
   214a8:	10c01fcc 	andi	r3,r2,127
   214ac:	1986983a 	sll	r3,r3,r6
   214b0:	10803fcc 	andi	r2,r2,255
   214b4:	1080201c 	xori	r2,r2,128
   214b8:	10bfe004 	addi	r2,r2,-128
   214bc:	28cab03a 	or	r5,r5,r3
   214c0:	318001c4 	addi	r6,r6,7
   214c4:	103ff516 	blt	r2,zero,2149c <__alt_data_end+0xf402149c>
   214c8:	28000e26 	beq	r5,zero,21504 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   214cc:	8809883a 	mov	r4,r17
   214d0:	00214100 	call	21410 <_ZL15get_ttype_entryP16lsda_header_infom>
   214d4:	1009883a 	mov	r4,r2
   214d8:	900b883a 	mov	r5,r18
   214dc:	d80d883a 	mov	r6,sp
   214e0:	00210d80 	call	210d8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   214e4:	10c03fcc 	andi	r3,r2,255
   214e8:	183fe926 	beq	r3,zero,21490 <__alt_data_end+0xf4021490>
   214ec:	dfc00417 	ldw	ra,16(sp)
   214f0:	dc800317 	ldw	r18,12(sp)
   214f4:	dc400217 	ldw	r17,8(sp)
   214f8:	dc000117 	ldw	r16,4(sp)
   214fc:	dec00504 	addi	sp,sp,20
   21500:	f800283a 	ret
   21504:	0005883a 	mov	r2,zero
   21508:	003ff806 	br	214ec <__alt_data_end+0xf40214ec>

0002150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   2150c:	deffff04 	addi	sp,sp,-4
   21510:	dfc00015 	stw	ra,0(sp)
   21514:	00803fc4 	movi	r2,255
   21518:	20800e26 	beq	r4,r2,21554 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   2151c:	20801c0c 	andi	r2,r4,112
   21520:	00c00804 	movi	r3,32
   21524:	10c01726 	beq	r2,r3,21584 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
   21528:	18800e2e 	bgeu	r3,r2,21564 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
   2152c:	00c01004 	movi	r3,64
   21530:	10c01026 	beq	r2,r3,21574 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   21534:	00c01404 	movi	r3,80
   21538:	10c00626 	beq	r2,r3,21554 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   2153c:	00c00c04 	movi	r3,48
   21540:	10c00b1e 	bne	r2,r3,21570 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   21544:	2809883a 	mov	r4,r5
   21548:	dfc00017 	ldw	ra,0(sp)
   2154c:	dec00104 	addi	sp,sp,4
   21550:	00230081 	jmpi	23008 <_Unwind_GetDataRelBase>
   21554:	0005883a 	mov	r2,zero
   21558:	dfc00017 	ldw	ra,0(sp)
   2155c:	dec00104 	addi	sp,sp,4
   21560:	f800283a 	ret
   21564:	103ffb26 	beq	r2,zero,21554 <__alt_data_end+0xf4021554>
   21568:	00c00404 	movi	r3,16
   2156c:	10fff926 	beq	r2,r3,21554 <__alt_data_end+0xf4021554>
   21570:	00232480 	call	23248 <abort>
   21574:	2809883a 	mov	r4,r5
   21578:	dfc00017 	ldw	ra,0(sp)
   2157c:	dec00104 	addi	sp,sp,4
   21580:	0022ff81 	jmpi	22ff8 <_Unwind_GetRegionStart>
   21584:	2809883a 	mov	r4,r5
   21588:	dfc00017 	ldw	ra,0(sp)
   2158c:	dec00104 	addi	sp,sp,4
   21590:	00230101 	jmpi	23010 <_Unwind_GetTextRelBase>

00021594 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   21594:	defff104 	addi	sp,sp,-60
   21598:	dd800b15 	stw	r22,44(sp)
   2159c:	382dd23a 	srai	r22,r7,8
   215a0:	dd400a15 	stw	r21,40(sp)
   215a4:	dd000915 	stw	r20,36(sp)
   215a8:	dfc00e15 	stw	ra,56(sp)
   215ac:	df000d15 	stw	fp,52(sp)
   215b0:	ddc00c15 	stw	r23,48(sp)
   215b4:	dcc00815 	stw	r19,32(sp)
   215b8:	dc800715 	stw	r18,28(sp)
   215bc:	dc400615 	stw	r17,24(sp)
   215c0:	dc000515 	stw	r16,20(sp)
   215c4:	d9c00315 	stw	r7,12(sp)
   215c8:	d9400215 	stw	r5,8(sp)
   215cc:	2029883a 	mov	r20,r4
   215d0:	dd400f17 	ldw	r21,60(sp)
   215d4:	b000010e 	bge	r22,zero,215dc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
   215d8:	05adc83a 	sub	r22,zero,r22
   215dc:	01000144 	movi	r4,5
   215e0:	000b883a 	mov	r5,zero
   215e4:	d9800415 	stw	r6,16(sp)
   215e8:	002150c0 	call	2150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   215ec:	d9800417 	ldw	r6,16(sp)
   215f0:	100b883a 	mov	r5,r2
   215f4:	d9c00104 	addi	r7,sp,4
   215f8:	01000144 	movi	r4,5
   215fc:	00212000 	call	21200 <_ZL28read_encoded_value_with_basehjPKhPj>
   21600:	1009883a 	mov	r4,r2
   21604:	017ffe44 	movi	r5,-7
   21608:	1021883a 	mov	r16,r2
   2160c:	0022d000 	call	22d00 <__mulsi3>
   21610:	1027883a 	mov	r19,r2
   21614:	002f883a 	mov	r23,zero
   21618:	84400003 	ldbu	r17,0(r16)
   2161c:	8009883a 	mov	r4,r16
   21620:	014001c4 	movi	r5,7
   21624:	0022d000 	call	22d00 <__mulsi3>
   21628:	88c01fcc 	andi	r3,r17,127
   2162c:	14c5883a 	add	r2,r2,r19
   21630:	1886983a 	sll	r3,r3,r2
   21634:	8c403fcc 	andi	r17,r17,255
   21638:	8c40201c 	xori	r17,r17,128
   2163c:	8c7fe004 	addi	r17,r17,-128
   21640:	84000044 	addi	r16,r16,1
   21644:	b8eeb03a 	or	r23,r23,r3
   21648:	883ff316 	blt	r17,zero,21618 <__alt_data_end+0xf4021618>
   2164c:	85e1883a 	add	r16,r16,r23
   21650:	8009883a 	mov	r4,r16
   21654:	017ffe44 	movi	r5,-7
   21658:	0022d000 	call	22d00 <__mulsi3>
   2165c:	102f883a 	mov	r23,r2
   21660:	8007883a 	mov	r3,r16
   21664:	0025883a 	mov	r18,zero
   21668:	1cc00003 	ldbu	r19,0(r3)
   2166c:	1809883a 	mov	r4,r3
   21670:	014001c4 	movi	r5,7
   21674:	1c400044 	addi	r17,r3,1
   21678:	0022d000 	call	22d00 <__mulsi3>
   2167c:	98c01fcc 	andi	r3,r19,127
   21680:	15c5883a 	add	r2,r2,r23
   21684:	1884983a 	sll	r2,r3,r2
   21688:	9cc03fcc 	andi	r19,r19,255
   2168c:	9cc0201c 	xori	r19,r19,128
   21690:	9cffe004 	addi	r19,r19,-128
   21694:	8807883a 	mov	r3,r17
   21698:	90a4b03a 	or	r18,r18,r2
   2169c:	983ff216 	blt	r19,zero,21668 <__alt_data_end+0xf4021668>
   216a0:	b7003fcc 	andi	fp,r22,255
   216a4:	e73fffc4 	addi	fp,fp,-1
   216a8:	8f39883a 	add	fp,r17,fp
   216ac:	840000c4 	addi	r16,r16,3
   216b0:	848d883a 	add	r6,r16,r18
   216b4:	e009883a 	mov	r4,fp
   216b8:	017ffe44 	movi	r5,-7
   216bc:	04ffff04 	movi	r19,-4
   216c0:	34e6703a 	and	r19,r6,r19
   216c4:	0022d000 	call	22d00 <__mulsi3>
   216c8:	002f883a 	mov	r23,zero
   216cc:	102d883a 	mov	r22,r2
   216d0:	e4400003 	ldbu	r17,0(fp)
   216d4:	e009883a 	mov	r4,fp
   216d8:	014001c4 	movi	r5,7
   216dc:	0022d000 	call	22d00 <__mulsi3>
   216e0:	88c01fcc 	andi	r3,r17,127
   216e4:	1585883a 	add	r2,r2,r22
   216e8:	1886983a 	sll	r3,r3,r2
   216ec:	8c403fcc 	andi	r17,r17,255
   216f0:	8c40201c 	xori	r17,r17,128
   216f4:	e4000044 	addi	r16,fp,1
   216f8:	8c7fe004 	addi	r17,r17,-128
   216fc:	b8eeb03a 	or	r23,r23,r3
   21700:	8039883a 	mov	fp,r16
   21704:	883ff216 	blt	r17,zero,216d0 <__alt_data_end+0xf40216d0>
   21708:	d8800317 	ldw	r2,12(sp)
   2170c:	14803fcc 	andi	r18,r2,255
   21710:	b8002326 	beq	r23,zero,217a0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
   21714:	9009883a 	mov	r4,r18
   21718:	00211600 	call	21160 <_ZL21size_of_encoded_valueh>
   2171c:	1009883a 	mov	r4,r2
   21720:	b97fffc4 	addi	r5,r23,-1
   21724:	0022d000 	call	22d00 <__mulsi3>
   21728:	9009883a 	mov	r4,r18
   2172c:	a80b883a 	mov	r5,r21
   21730:	14cd883a 	add	r6,r2,r19
   21734:	d80f883a 	mov	r7,sp
   21738:	00212000 	call	21200 <_ZL28read_encoded_value_with_basehjPKhPj>
   2173c:	d9000017 	ldw	r4,0(sp)
   21740:	a00b883a 	mov	r5,r20
   21744:	d9800204 	addi	r6,sp,8
   21748:	00210d80 	call	210d8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   2174c:	10c03fcc 	andi	r3,r2,255
   21750:	1800141e 	bne	r3,zero,217a4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
   21754:	8009883a 	mov	r4,r16
   21758:	017ffe44 	movi	r5,-7
   2175c:	0022d000 	call	22d00 <__mulsi3>
   21760:	102d883a 	mov	r22,r2
   21764:	002f883a 	mov	r23,zero
   21768:	84400003 	ldbu	r17,0(r16)
   2176c:	8009883a 	mov	r4,r16
   21770:	014001c4 	movi	r5,7
   21774:	0022d000 	call	22d00 <__mulsi3>
   21778:	88c01fcc 	andi	r3,r17,127
   2177c:	1585883a 	add	r2,r2,r22
   21780:	1886983a 	sll	r3,r3,r2
   21784:	8c403fcc 	andi	r17,r17,255
   21788:	8c40201c 	xori	r17,r17,128
   2178c:	8c7fe004 	addi	r17,r17,-128
   21790:	84000044 	addi	r16,r16,1
   21794:	b8eeb03a 	or	r23,r23,r3
   21798:	883ff316 	blt	r17,zero,21768 <__alt_data_end+0xf4021768>
   2179c:	003fdc06 	br	21710 <__alt_data_end+0xf4021710>
   217a0:	0005883a 	mov	r2,zero
   217a4:	dfc00e17 	ldw	ra,56(sp)
   217a8:	df000d17 	ldw	fp,52(sp)
   217ac:	ddc00c17 	ldw	r23,48(sp)
   217b0:	dd800b17 	ldw	r22,44(sp)
   217b4:	dd400a17 	ldw	r21,40(sp)
   217b8:	dd000917 	ldw	r20,36(sp)
   217bc:	dcc00817 	ldw	r19,32(sp)
   217c0:	dc800717 	ldw	r18,28(sp)
   217c4:	dc400617 	ldw	r17,24(sp)
   217c8:	dc000517 	ldw	r16,20(sp)
   217cc:	dec00f04 	addi	sp,sp,60
   217d0:	f800283a 	ret

000217d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   217d4:	defffb04 	addi	sp,sp,-20
   217d8:	dcc00315 	stw	r19,12(sp)
   217dc:	dc400115 	stw	r17,4(sp)
   217e0:	dc000015 	stw	r16,0(sp)
   217e4:	dfc00415 	stw	ra,16(sp)
   217e8:	dc800215 	stw	r18,8(sp)
   217ec:	2027883a 	mov	r19,r4
   217f0:	2821883a 	mov	r16,r5
   217f4:	3023883a 	mov	r17,r6
   217f8:	20003f26 	beq	r4,zero,218f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   217fc:	0022ff80 	call	22ff8 <_Unwind_GetRegionStart>
   21800:	88800015 	stw	r2,0(r17)
   21804:	84800003 	ldbu	r18,0(r16)
   21808:	00c03fc4 	movi	r3,255
   2180c:	84000044 	addi	r16,r16,1
   21810:	90c03726 	beq	r18,r3,218f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   21814:	9009883a 	mov	r4,r18
   21818:	980b883a 	mov	r5,r19
   2181c:	002150c0 	call	2150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21820:	800d883a 	mov	r6,r16
   21824:	9009883a 	mov	r4,r18
   21828:	100b883a 	mov	r5,r2
   2182c:	89c00104 	addi	r7,r17,4
   21830:	00212000 	call	21200 <_ZL28read_encoded_value_with_basehjPKhPj>
   21834:	1021883a 	mov	r16,r2
   21838:	80c00003 	ldbu	r3,0(r16)
   2183c:	01003fc4 	movi	r4,255
   21840:	80800044 	addi	r2,r16,1
   21844:	88c00505 	stb	r3,20(r17)
   21848:	18c03fcc 	andi	r3,r3,255
   2184c:	19002c26 	beq	r3,r4,21900 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   21850:	100d883a 	mov	r6,r2
   21854:	000f883a 	mov	r7,zero
   21858:	000b883a 	mov	r5,zero
   2185c:	30c00003 	ldbu	r3,0(r6)
   21860:	10800044 	addi	r2,r2,1
   21864:	100d883a 	mov	r6,r2
   21868:	19001fcc 	andi	r4,r3,127
   2186c:	2148983a 	sll	r4,r4,r5
   21870:	18c03fcc 	andi	r3,r3,255
   21874:	18c0201c 	xori	r3,r3,128
   21878:	18ffe004 	addi	r3,r3,-128
   2187c:	390eb03a 	or	r7,r7,r4
   21880:	294001c4 	addi	r5,r5,7
   21884:	183ff516 	blt	r3,zero,2185c <__alt_data_end+0xf402185c>
   21888:	11cf883a 	add	r7,r2,r7
   2188c:	89c00315 	stw	r7,12(r17)
   21890:	10c00003 	ldbu	r3,0(r2)
   21894:	000f883a 	mov	r7,zero
   21898:	10800044 	addi	r2,r2,1
   2189c:	88c00545 	stb	r3,21(r17)
   218a0:	000b883a 	mov	r5,zero
   218a4:	10c00003 	ldbu	r3,0(r2)
   218a8:	10800044 	addi	r2,r2,1
   218ac:	19001fcc 	andi	r4,r3,127
   218b0:	2148983a 	sll	r4,r4,r5
   218b4:	18c03fcc 	andi	r3,r3,255
   218b8:	18c0201c 	xori	r3,r3,128
   218bc:	18ffe004 	addi	r3,r3,-128
   218c0:	390eb03a 	or	r7,r7,r4
   218c4:	294001c4 	addi	r5,r5,7
   218c8:	183ff616 	blt	r3,zero,218a4 <__alt_data_end+0xf40218a4>
   218cc:	11cf883a 	add	r7,r2,r7
   218d0:	89c00415 	stw	r7,16(r17)
   218d4:	dfc00417 	ldw	ra,16(sp)
   218d8:	dcc00317 	ldw	r19,12(sp)
   218dc:	dc800217 	ldw	r18,8(sp)
   218e0:	dc400117 	ldw	r17,4(sp)
   218e4:	dc000017 	ldw	r16,0(sp)
   218e8:	dec00504 	addi	sp,sp,20
   218ec:	f800283a 	ret
   218f0:	88800115 	stw	r2,4(r17)
   218f4:	003fd006 	br	21838 <__alt_data_end+0xf4021838>
   218f8:	0005883a 	mov	r2,zero
   218fc:	003fc006 	br	21800 <__alt_data_end+0xf4021800>
   21900:	88000315 	stw	zero,12(r17)
   21904:	003fe206 	br	21890 <__alt_data_end+0xf4021890>

00021908 <__gxx_personality_sj0>:
   21908:	008000b4 	movhi	r2,2
   2190c:	deffde04 	addi	sp,sp,-136
   21910:	10864204 	addi	r2,r2,6408
   21914:	d8801015 	stw	r2,64(sp)
   21918:	008000b4 	movhi	r2,2
   2191c:	109c1404 	addi	r2,r2,28752
   21920:	d8801115 	stw	r2,68(sp)
   21924:	008000b4 	movhi	r2,2
   21928:	10877d04 	addi	r2,r2,7668
   2192c:	d9001715 	stw	r4,92(sp)
   21930:	d9000a04 	addi	r4,sp,40
   21934:	d8801315 	stw	r2,76(sp)
   21938:	dfc02115 	stw	ra,132(sp)
   2193c:	df002015 	stw	fp,128(sp)
   21940:	dec01215 	stw	sp,72(sp)
   21944:	dec01415 	stw	sp,80(sp)
   21948:	d9401a15 	stw	r5,104(sp)
   2194c:	d9801815 	stw	r6,96(sp)
   21950:	d9c01915 	stw	r7,100(sp)
   21954:	0022f300 	call	22f30 <_Unwind_SjLj_Register>
   21958:	d8c01717 	ldw	r3,92(sp)
   2195c:	d8000915 	stw	zero,36(sp)
   21960:	d8000815 	stw	zero,32(sp)
   21964:	00800044 	movi	r2,1
   21968:	18800926 	beq	r3,r2,21990 <__gxx_personality_sj0+0x88>
   2196c:	014000c4 	movi	r5,3
   21970:	d9401715 	stw	r5,92(sp)
   21974:	d9000a04 	addi	r4,sp,40
   21978:	0022f480 	call	22f48 <_Unwind_SjLj_Unregister>
   2197c:	d8801717 	ldw	r2,92(sp)
   21980:	dfc02117 	ldw	ra,132(sp)
   21984:	df002017 	ldw	fp,128(sp)
   21988:	dec02204 	addi	sp,sp,136
   2198c:	f800283a 	ret
   21990:	d9401817 	ldw	r5,96(sp)
   21994:	012f3574 	movhi	r4,48341
   21998:	21354004 	addi	r4,r4,-11008
   2199c:	2909883a 	add	r4,r5,r4
   219a0:	2145803a 	cmpltu	r2,r4,r5
   219a4:	d9401917 	ldw	r5,100(sp)
   219a8:	d8c01b05 	stb	r3,108(sp)
   219ac:	00ee2cb4 	movhi	r3,47282
   219b0:	18eaaf04 	addi	r3,r3,-21828
   219b4:	28c7883a 	add	r3,r5,r3
   219b8:	10c5883a 	add	r2,r2,r3
   219bc:	10003526 	beq	r2,zero,21a94 <__gxx_personality_sj0+0x18c>
   219c0:	d8c01a17 	ldw	r3,104(sp)
   219c4:	00800184 	movi	r2,6
   219c8:	18803826 	beq	r3,r2,21aac <__gxx_personality_sj0+0x1a4>
   219cc:	d9002317 	ldw	r4,140(sp)
   219d0:	00ffffc4 	movi	r3,-1
   219d4:	d8c00b15 	stw	r3,44(sp)
   219d8:	0022fec0 	call	22fec <_Unwind_GetLanguageSpecificData>
   219dc:	d8801915 	stw	r2,100(sp)
   219e0:	1000a326 	beq	r2,zero,21c70 <__gxx_personality_sj0+0x368>
   219e4:	d9002317 	ldw	r4,140(sp)
   219e8:	d9401917 	ldw	r5,100(sp)
   219ec:	d80d883a 	mov	r6,sp
   219f0:	00bfffc4 	movi	r2,-1
   219f4:	d8800b15 	stw	r2,44(sp)
   219f8:	00217d40 	call	217d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   219fc:	d9000503 	ldbu	r4,20(sp)
   21a00:	d9402317 	ldw	r5,140(sp)
   21a04:	d8801715 	stw	r2,92(sp)
   21a08:	002150c0 	call	2150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21a0c:	d9002317 	ldw	r4,140(sp)
   21a10:	d9400804 	addi	r5,sp,32
   21a14:	d8800215 	stw	r2,8(sp)
   21a18:	0022fbc0 	call	22fbc <_Unwind_GetIPInfo>
   21a1c:	d8c00817 	ldw	r3,32(sp)
   21a20:	1800011e 	bne	r3,zero,21a28 <__gxx_personality_sj0+0x120>
   21a24:	10bfffc4 	addi	r2,r2,-1
   21a28:	10009116 	blt	r2,zero,21c70 <__gxx_personality_sj0+0x368>
   21a2c:	10004c1e 	bne	r2,zero,21b60 <__gxx_personality_sj0+0x258>
   21a30:	d8001c15 	stw	zero,112(sp)
   21a34:	00800044 	movi	r2,1
   21a38:	d8001715 	stw	zero,92(sp)
   21a3c:	d8001815 	stw	zero,96(sp)
   21a40:	d9001a17 	ldw	r4,104(sp)
   21a44:	20c0004c 	andi	r3,r4,1
   21a48:	18008c26 	beq	r3,zero,21c7c <__gxx_personality_sj0+0x374>
   21a4c:	00c00084 	movi	r3,2
   21a50:	10c08726 	beq	r2,r3,21c70 <__gxx_personality_sj0+0x368>
   21a54:	d8801b03 	ldbu	r2,108(sp)
   21a58:	1000d21e 	bne	r2,zero,21da4 <__gxx_personality_sj0+0x49c>
   21a5c:	d9402217 	ldw	r5,136(sp)
   21a60:	d8801717 	ldw	r2,92(sp)
   21a64:	d8c01817 	ldw	r3,96(sp)
   21a68:	d9001917 	ldw	r4,100(sp)
   21a6c:	28bffb15 	stw	r2,-20(r5)
   21a70:	d8800917 	ldw	r2,36(sp)
   21a74:	28fffc15 	stw	r3,-16(r5)
   21a78:	00c00184 	movi	r3,6
   21a7c:	28bfff15 	stw	r2,-4(r5)
   21a80:	d8801c17 	ldw	r2,112(sp)
   21a84:	293ffd15 	stw	r4,-12(r5)
   21a88:	d8c01715 	stw	r3,92(sp)
   21a8c:	28bffe15 	stw	r2,-8(r5)
   21a90:	003fb806 	br	21974 <__alt_data_end+0xf4021974>
   21a94:	d8801717 	ldw	r2,92(sp)
   21a98:	113fc936 	bltu	r2,r4,219c0 <__alt_data_end+0xf40219c0>
   21a9c:	d8c01a17 	ldw	r3,104(sp)
   21aa0:	d8001b05 	stb	zero,108(sp)
   21aa4:	00800184 	movi	r2,6
   21aa8:	18bfc81e 	bne	r3,r2,219cc <__alt_data_end+0xf40219cc>
   21aac:	d8801b03 	ldbu	r2,108(sp)
   21ab0:	103fc61e 	bne	r2,zero,219cc <__alt_data_end+0xf40219cc>
   21ab4:	d9002217 	ldw	r4,136(sp)
   21ab8:	d9402217 	ldw	r5,136(sp)
   21abc:	d8802217 	ldw	r2,136(sp)
   21ac0:	213ffe17 	ldw	r4,-8(r4)
   21ac4:	297ffb17 	ldw	r5,-20(r5)
   21ac8:	10bffd17 	ldw	r2,-12(r2)
   21acc:	d9001c15 	stw	r4,112(sp)
   21ad0:	d9401715 	stw	r5,92(sp)
   21ad4:	d8801915 	stw	r2,100(sp)
   21ad8:	20008726 	beq	r4,zero,21cf8 <__gxx_personality_sj0+0x3f0>
   21adc:	d8801717 	ldw	r2,92(sp)
   21ae0:	10006f0e 	bge	r2,zero,21ca0 <__gxx_personality_sj0+0x398>
   21ae4:	d9002317 	ldw	r4,140(sp)
   21ae8:	d9401917 	ldw	r5,100(sp)
   21aec:	d80d883a 	mov	r6,sp
   21af0:	00bfffc4 	movi	r2,-1
   21af4:	d8800b15 	stw	r2,44(sp)
   21af8:	00217d40 	call	217d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21afc:	d9000503 	ldbu	r4,20(sp)
   21b00:	d9402317 	ldw	r5,140(sp)
   21b04:	002150c0 	call	2150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21b08:	d9000503 	ldbu	r4,20(sp)
   21b0c:	d9402317 	ldw	r5,140(sp)
   21b10:	d8800215 	stw	r2,8(sp)
   21b14:	002150c0 	call	2150c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21b18:	d8c02217 	ldw	r3,136(sp)
   21b1c:	18bffe15 	stw	r2,-8(r3)
   21b20:	00005f06 	br	21ca0 <__gxx_personality_sj0+0x398>
   21b24:	000f883a 	mov	r7,zero
   21b28:	000d883a 	mov	r6,zero
   21b2c:	19000003 	ldbu	r4,0(r3)
   21b30:	18c00044 	addi	r3,r3,1
   21b34:	d8c01715 	stw	r3,92(sp)
   21b38:	21401fcc 	andi	r5,r4,127
   21b3c:	298a983a 	sll	r5,r5,r6
   21b40:	21003fcc 	andi	r4,r4,255
   21b44:	2100201c 	xori	r4,r4,128
   21b48:	213fe004 	addi	r4,r4,-128
   21b4c:	394eb03a 	or	r7,r7,r5
   21b50:	318001c4 	addi	r6,r6,7
   21b54:	203ff516 	blt	r4,zero,21b2c <__alt_data_end+0xf4021b2c>
   21b58:	10bfffc4 	addi	r2,r2,-1
   21b5c:	10000e26 	beq	r2,zero,21b98 <__gxx_personality_sj0+0x290>
   21b60:	d8c01717 	ldw	r3,92(sp)
   21b64:	0011883a 	mov	r8,zero
   21b68:	000d883a 	mov	r6,zero
   21b6c:	19000003 	ldbu	r4,0(r3)
   21b70:	18c00044 	addi	r3,r3,1
   21b74:	21401fcc 	andi	r5,r4,127
   21b78:	298a983a 	sll	r5,r5,r6
   21b7c:	21003fcc 	andi	r4,r4,255
   21b80:	2100201c 	xori	r4,r4,128
   21b84:	213fe004 	addi	r4,r4,-128
   21b88:	4150b03a 	or	r8,r8,r5
   21b8c:	318001c4 	addi	r6,r6,7
   21b90:	203ff616 	blt	r4,zero,21b6c <__alt_data_end+0xf4021b6c>
   21b94:	003fe306 	br	21b24 <__alt_data_end+0xf4021b24>
   21b98:	42000044 	addi	r8,r8,1
   21b9c:	da001c15 	stw	r8,112(sp)
   21ba0:	38004f26 	beq	r7,zero,21ce0 <__gxx_personality_sj0+0x3d8>
   21ba4:	d8800417 	ldw	r2,16(sp)
   21ba8:	39ffffc4 	addi	r7,r7,-1
   21bac:	11c5883a 	add	r2,r2,r7
   21bb0:	d8801815 	stw	r2,96(sp)
   21bb4:	40002e26 	beq	r8,zero,21c70 <__gxx_personality_sj0+0x368>
   21bb8:	10004b26 	beq	r2,zero,21ce8 <__gxx_personality_sj0+0x3e0>
   21bbc:	d8c01a17 	ldw	r3,104(sp)
   21bc0:	18c0020c 	andi	r3,r3,8
   21bc4:	d8c01e15 	stw	r3,120(sp)
   21bc8:	1800801e 	bne	r3,zero,21dcc <__gxx_personality_sj0+0x4c4>
   21bcc:	d8801b03 	ldbu	r2,108(sp)
   21bd0:	1000821e 	bne	r2,zero,21ddc <__gxx_personality_sj0+0x4d4>
   21bd4:	d9002217 	ldw	r4,136(sp)
   21bd8:	20800017 	ldw	r2,0(r4)
   21bdc:	1080004c 	andi	r2,r2,1
   21be0:	1000821e 	bne	r2,zero,21dec <__gxx_personality_sj0+0x4e4>
   21be4:	d9402217 	ldw	r5,136(sp)
   21be8:	28800504 	addi	r2,r5,20
   21bec:	d8800915 	stw	r2,36(sp)
   21bf0:	10bff017 	ldw	r2,-64(r2)
   21bf4:	d8801d15 	stw	r2,116(sp)
   21bf8:	d9001b03 	ldbu	r4,108(sp)
   21bfc:	d8001b45 	stb	zero,109(sp)
   21c00:	d9001f15 	stw	r4,124(sp)
   21c04:	00000e06 	br	21c40 <__gxx_personality_sj0+0x338>
   21c08:	01c03d0e 	bge	zero,r7,21d00 <__gxx_personality_sj0+0x3f8>
   21c0c:	017fffc4 	movi	r5,-1
   21c10:	d9400b15 	stw	r5,44(sp)
   21c14:	d809883a 	mov	r4,sp
   21c18:	380b883a 	mov	r5,r7
   21c1c:	00214100 	call	21410 <_ZL15get_ttype_entryP16lsda_header_infom>
   21c20:	10004f26 	beq	r2,zero,21d60 <__gxx_personality_sj0+0x458>
   21c24:	d8c01d17 	ldw	r3,116(sp)
   21c28:	1800611e 	bne	r3,zero,21db0 <__gxx_personality_sj0+0x4a8>
   21c2c:	d8800617 	ldw	r2,24(sp)
   21c30:	10005726 	beq	r2,zero,21d90 <__gxx_personality_sj0+0x488>
   21c34:	d9401717 	ldw	r5,92(sp)
   21c38:	2885883a 	add	r2,r5,r2
   21c3c:	d8801815 	stw	r2,96(sp)
   21c40:	d9001817 	ldw	r4,96(sp)
   21c44:	d9400704 	addi	r5,sp,28
   21c48:	00210800 	call	21080 <_ZL12read_sleb128PKhPl>
   21c4c:	1009883a 	mov	r4,r2
   21c50:	d9400604 	addi	r5,sp,24
   21c54:	d8801715 	stw	r2,92(sp)
   21c58:	00210800 	call	21080 <_ZL12read_sleb128PKhPl>
   21c5c:	d9c00717 	ldw	r7,28(sp)
   21c60:	383fe91e 	bne	r7,zero,21c08 <__alt_data_end+0xf4021c08>
   21c64:	01000044 	movi	r4,1
   21c68:	d9001b45 	stb	r4,109(sp)
   21c6c:	003fef06 	br	21c2c <__alt_data_end+0xf4021c2c>
   21c70:	01000204 	movi	r4,8
   21c74:	d9001715 	stw	r4,92(sp)
   21c78:	003f3e06 	br	21974 <__alt_data_end+0xf4021974>
   21c7c:	d9001a17 	ldw	r4,104(sp)
   21c80:	20c0020c 	andi	r3,r4,8
   21c84:	1800021e 	bne	r3,zero,21c90 <__gxx_personality_sj0+0x388>
   21c88:	d8c01b03 	ldbu	r3,108(sp)
   21c8c:	18001826 	beq	r3,zero,21cf0 <__gxx_personality_sj0+0x3e8>
   21c90:	00c00044 	movi	r3,1
   21c94:	10c05926 	beq	r2,r3,21dfc <__gxx_personality_sj0+0x4f4>
   21c98:	d9401717 	ldw	r5,92(sp)
   21c9c:	28005816 	blt	r5,zero,21e00 <__gxx_personality_sj0+0x4f8>
   21ca0:	d9802217 	ldw	r6,136(sp)
   21ca4:	d9002317 	ldw	r4,140(sp)
   21ca8:	00bfffc4 	movi	r2,-1
   21cac:	000b883a 	mov	r5,zero
   21cb0:	d8800b15 	stw	r2,44(sp)
   21cb4:	0022f900 	call	22f90 <_Unwind_SetGR>
   21cb8:	d9002317 	ldw	r4,140(sp)
   21cbc:	d9801717 	ldw	r6,92(sp)
   21cc0:	01400044 	movi	r5,1
   21cc4:	0022f900 	call	22f90 <_Unwind_SetGR>
   21cc8:	d9002317 	ldw	r4,140(sp)
   21ccc:	d9401c17 	ldw	r5,112(sp)
   21cd0:	0022fdc0 	call	22fdc <_Unwind_SetIP>
   21cd4:	010001c4 	movi	r4,7
   21cd8:	d9001715 	stw	r4,92(sp)
   21cdc:	003f2506 	br	21974 <__alt_data_end+0xf4021974>
   21ce0:	d8c01c17 	ldw	r3,112(sp)
   21ce4:	183fe226 	beq	r3,zero,21c70 <__alt_data_end+0xf4021c70>
   21ce8:	00800084 	movi	r2,2
   21cec:	003f5206 	br	21a38 <__alt_data_end+0xf4021a38>
   21cf0:	00c00044 	movi	r3,1
   21cf4:	10ff791e 	bne	r2,r3,21adc <__alt_data_end+0xf4021adc>
   21cf8:	d9002217 	ldw	r4,136(sp)
   21cfc:	00228b80 	call	228b8 <__cxa_call_terminate>
   21d00:	d9001d17 	ldw	r4,116(sp)
   21d04:	20000426 	beq	r4,zero,21d18 <__gxx_personality_sj0+0x410>
   21d08:	d9401e17 	ldw	r5,120(sp)
   21d0c:	2800021e 	bne	r5,zero,21d18 <__gxx_personality_sj0+0x410>
   21d10:	d8801f17 	ldw	r2,124(sp)
   21d14:	10001626 	beq	r2,zero,21d70 <__gxx_personality_sj0+0x468>
   21d18:	d8c00317 	ldw	r3,12(sp)
   21d1c:	01ce303a 	nor	r7,zero,r7
   21d20:	000d883a 	mov	r6,zero
   21d24:	19c7883a 	add	r3,r3,r7
   21d28:	000b883a 	mov	r5,zero
   21d2c:	18800003 	ldbu	r2,0(r3)
   21d30:	18c00044 	addi	r3,r3,1
   21d34:	11001fcc 	andi	r4,r2,127
   21d38:	2148983a 	sll	r4,r4,r5
   21d3c:	10803fcc 	andi	r2,r2,255
   21d40:	1080201c 	xori	r2,r2,128
   21d44:	10bfe004 	addi	r2,r2,-128
   21d48:	310cb03a 	or	r6,r6,r4
   21d4c:	294001c4 	addi	r5,r5,7
   21d50:	103ff616 	blt	r2,zero,21d2c <__alt_data_end+0xf4021d2c>
   21d54:	3005003a 	cmpeq	r2,r6,zero
   21d58:	10803fcc 	andi	r2,r2,255
   21d5c:	103fb326 	beq	r2,zero,21c2c <__alt_data_end+0xf4021c2c>
   21d60:	d8800717 	ldw	r2,28(sp)
   21d64:	d8801715 	stw	r2,92(sp)
   21d68:	008000c4 	movi	r2,3
   21d6c:	003f3406 	br	21a40 <__alt_data_end+0xf4021a40>
   21d70:	d9401d17 	ldw	r5,116(sp)
   21d74:	d9800917 	ldw	r6,36(sp)
   21d78:	00ffffc4 	movi	r3,-1
   21d7c:	d809883a 	mov	r4,sp
   21d80:	d8c00b15 	stw	r3,44(sp)
   21d84:	00214640 	call	21464 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21d88:	1080005c 	xori	r2,r2,1
   21d8c:	003ff206 	br	21d58 <__alt_data_end+0xf4021d58>
   21d90:	d8801b43 	ldbu	r2,109(sp)
   21d94:	103fb626 	beq	r2,zero,21c70 <__alt_data_end+0xf4021c70>
   21d98:	d8001715 	stw	zero,92(sp)
   21d9c:	00800084 	movi	r2,2
   21da0:	003f2706 	br	21a40 <__alt_data_end+0xf4021a40>
   21da4:	00800184 	movi	r2,6
   21da8:	d8801715 	stw	r2,92(sp)
   21dac:	003ef106 	br	21974 <__alt_data_end+0xf4021974>
   21db0:	1009883a 	mov	r4,r2
   21db4:	180b883a 	mov	r5,r3
   21db8:	d9800904 	addi	r6,sp,36
   21dbc:	00210d80 	call	210d8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   21dc0:	10803fcc 	andi	r2,r2,255
   21dc4:	103fe61e 	bne	r2,zero,21d60 <__alt_data_end+0xf4021d60>
   21dc8:	003f9806 	br	21c2c <__alt_data_end+0xf4021c2c>
   21dcc:	00820034 	movhi	r2,2048
   21dd0:	10832a04 	addi	r2,r2,3240
   21dd4:	d8801d15 	stw	r2,116(sp)
   21dd8:	003f8706 	br	21bf8 <__alt_data_end+0xf4021bf8>
   21ddc:	00c20034 	movhi	r3,2048
   21de0:	18c32c04 	addi	r3,r3,3248
   21de4:	d8c01d15 	stw	r3,116(sp)
   21de8:	003f8306 	br	21bf8 <__alt_data_end+0xf4021bf8>
   21dec:	20bff517 	ldw	r2,-44(r4)
   21df0:	003f7e06 	br	21bec <__alt_data_end+0xf4021bec>
   21df4:	d9000c17 	ldw	r4,48(sp)
   21df8:	00227340 	call	22734 <__cxa_begin_catch>
   21dfc:	00223e00 	call	223e0 <_ZSt9terminatev>
   21e00:	d8c00b15 	stw	r3,44(sp)
   21e04:	00224080 	call	22408 <_ZSt10unexpectedv>

00021e08 <__cxa_call_unexpected>:
   21e08:	008000b4 	movhi	r2,2
   21e0c:	deffe604 	addi	sp,sp,-104
   21e10:	10864204 	addi	r2,r2,6408
   21e14:	d8800d15 	stw	r2,52(sp)
   21e18:	008000b4 	movhi	r2,2
   21e1c:	109c1804 	addi	r2,r2,28768
   21e20:	d8800e15 	stw	r2,56(sp)
   21e24:	d8800104 	addi	r2,sp,4
   21e28:	d8800f15 	stw	r2,60(sp)
   21e2c:	008000b4 	movhi	r2,2
   21e30:	1087a504 	addi	r2,r2,7828
   21e34:	d9001415 	stw	r4,80(sp)
   21e38:	d9000704 	addi	r4,sp,28
   21e3c:	dfc01915 	stw	ra,100(sp)
   21e40:	d8801015 	stw	r2,64(sp)
   21e44:	df001815 	stw	fp,96(sp)
   21e48:	dec01115 	stw	sp,68(sp)
   21e4c:	0022f300 	call	22f30 <_Unwind_SjLj_Register>
   21e50:	d9001417 	ldw	r4,80(sp)
   21e54:	00227340 	call	22734 <__cxa_begin_catch>
   21e58:	d8c01417 	ldw	r3,80(sp)
   21e5c:	18bffe17 	ldw	r2,-8(r3)
   21e60:	193ff717 	ldw	r4,-36(r3)
   21e64:	18fffd17 	ldw	r3,-12(r3)
   21e68:	d8800315 	stw	r2,12(sp)
   21e6c:	d8c01615 	stw	r3,88(sp)
   21e70:	d8c01417 	ldw	r3,80(sp)
   21e74:	18fffb17 	ldw	r3,-20(r3)
   21e78:	d8c01515 	stw	r3,84(sp)
   21e7c:	d8c01417 	ldw	r3,80(sp)
   21e80:	18fff817 	ldw	r3,-32(r3)
   21e84:	d8c01415 	stw	r3,80(sp)
   21e88:	00c00044 	movi	r3,1
   21e8c:	d8c00815 	stw	r3,32(sp)
   21e90:	00223f80 	call	223f8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   21e94:	d8c00917 	ldw	r3,36(sp)
   21e98:	d8800817 	ldw	r2,32(sp)
   21e9c:	d8c01715 	stw	r3,92(sp)
   21ea0:	10000a26 	beq	r2,zero,21ecc <__cxa_call_unexpected+0xc4>
   21ea4:	10bfffc4 	addi	r2,r2,-1
   21ea8:	10000126 	beq	r2,zero,21eb0 <__cxa_call_unexpected+0xa8>
   21eac:	003da0fa 	break	3
   21eb0:	d8000815 	stw	zero,32(sp)
   21eb4:	00227e80 	call	227e8 <__cxa_end_catch>
   21eb8:	00227e80 	call	227e8 <__cxa_end_catch>
   21ebc:	d9001717 	ldw	r4,92(sp)
   21ec0:	00bfffc4 	movi	r2,-1
   21ec4:	d8800815 	stw	r2,32(sp)
   21ec8:	002312c0 	call	2312c <_Unwind_SjLj_Resume>
   21ecc:	d9001717 	ldw	r4,92(sp)
   21ed0:	00227340 	call	22734 <__cxa_begin_catch>
   21ed4:	002203c0 	call	2203c <__cxa_get_globals_fast>
   21ed8:	10800017 	ldw	r2,0(r2)
   21edc:	10c00b17 	ldw	r3,44(r2)
   21ee0:	18c0004c 	andi	r3,r3,1
   21ee4:	18001e26 	beq	r3,zero,21f60 <__cxa_call_unexpected+0x158>
   21ee8:	10800017 	ldw	r2,0(r2)
   21eec:	d8801715 	stw	r2,92(sp)
   21ef0:	d8801517 	ldw	r2,84(sp)
   21ef4:	00802b0e 	bge	zero,r2,21fa4 <__cxa_call_unexpected+0x19c>
   21ef8:	d8c01717 	ldw	r3,92(sp)
   21efc:	d8800317 	ldw	r2,12(sp)
   21f00:	d9801617 	ldw	r6,88(sp)
   21f04:	193ff017 	ldw	r4,-64(r3)
   21f08:	d9c01517 	ldw	r7,84(sp)
   21f0c:	d8800015 	stw	r2,0(sp)
   21f10:	180b883a 	mov	r5,r3
   21f14:	00800084 	movi	r2,2
   21f18:	d8800815 	stw	r2,32(sp)
   21f1c:	00215940 	call	21594 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21f20:	10803fcc 	andi	r2,r2,255
   21f24:	10001e1e 	bne	r2,zero,21fa0 <__cxa_call_unexpected+0x198>
   21f28:	d8800317 	ldw	r2,12(sp)
   21f2c:	d9801617 	ldw	r6,88(sp)
   21f30:	d9c01517 	ldw	r7,84(sp)
   21f34:	01020034 	movhi	r4,2048
   21f38:	d8800015 	stw	r2,0(sp)
   21f3c:	2100f904 	addi	r4,r4,996
   21f40:	00800084 	movi	r2,2
   21f44:	000b883a 	mov	r5,zero
   21f48:	d8800815 	stw	r2,32(sp)
   21f4c:	00215940 	call	21594 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21f50:	10803fcc 	andi	r2,r2,255
   21f54:	1000051e 	bne	r2,zero,21f6c <__cxa_call_unexpected+0x164>
   21f58:	d9001417 	ldw	r4,80(sp)
   21f5c:	00223200 	call	22320 <_ZN10__cxxabiv111__terminateEPFvvE>
   21f60:	10801004 	addi	r2,r2,64
   21f64:	d8801715 	stw	r2,92(sp)
   21f68:	003fe106 	br	21ef0 <__alt_data_end+0xf4021ef0>
   21f6c:	01000104 	movi	r4,4
   21f70:	0022acc0 	call	22acc <__cxa_allocate_exception>
   21f74:	00c20034 	movhi	r3,2048
   21f78:	18c11404 	addi	r3,r3,1104
   21f7c:	01420034 	movhi	r5,2048
   21f80:	018000b4 	movhi	r6,2
   21f84:	10c00015 	stw	r3,0(r2)
   21f88:	2940f904 	addi	r5,r5,996
   21f8c:	00c00084 	movi	r3,2
   21f90:	318b2304 	addi	r6,r6,11404
   21f94:	1009883a 	mov	r4,r2
   21f98:	d8c00815 	stw	r3,32(sp)
   21f9c:	00229540 	call	22954 <__cxa_throw>
   21fa0:	00229e40 	call	229e4 <__cxa_rethrow>
   21fa4:	d9401617 	ldw	r5,88(sp)
   21fa8:	00800084 	movi	r2,2
   21fac:	0009883a 	mov	r4,zero
   21fb0:	d9800104 	addi	r6,sp,4
   21fb4:	d8800815 	stw	r2,32(sp)
   21fb8:	00217d40 	call	217d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21fbc:	d8801717 	ldw	r2,92(sp)
   21fc0:	d9c01517 	ldw	r7,84(sp)
   21fc4:	d9000104 	addi	r4,sp,4
   21fc8:	117ff017 	ldw	r5,-64(r2)
   21fcc:	100d883a 	mov	r6,r2
   21fd0:	00214640 	call	21464 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21fd4:	10803fcc 	andi	r2,r2,255
   21fd8:	1000171e 	bne	r2,zero,22038 <__cxa_call_unexpected+0x230>
   21fdc:	d9c01517 	ldw	r7,84(sp)
   21fe0:	01420034 	movhi	r5,2048
   21fe4:	00800084 	movi	r2,2
   21fe8:	2940f904 	addi	r5,r5,996
   21fec:	d9000104 	addi	r4,sp,4
   21ff0:	000d883a 	mov	r6,zero
   21ff4:	d8800815 	stw	r2,32(sp)
   21ff8:	00214640 	call	21464 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21ffc:	10803fcc 	andi	r2,r2,255
   22000:	103fd526 	beq	r2,zero,21f58 <__alt_data_end+0xf4021f58>
   22004:	01000104 	movi	r4,4
   22008:	0022acc0 	call	22acc <__cxa_allocate_exception>
   2200c:	00c20034 	movhi	r3,2048
   22010:	18c11404 	addi	r3,r3,1104
   22014:	01420034 	movhi	r5,2048
   22018:	018000b4 	movhi	r6,2
   2201c:	10c00015 	stw	r3,0(r2)
   22020:	2940f904 	addi	r5,r5,996
   22024:	00c00084 	movi	r3,2
   22028:	318b2304 	addi	r6,r6,11404
   2202c:	1009883a 	mov	r4,r2
   22030:	d8c00815 	stw	r3,32(sp)
   22034:	00229540 	call	22954 <__cxa_throw>
   22038:	00229e40 	call	229e4 <__cxa_rethrow>

0002203c <__cxa_get_globals_fast>:
   2203c:	00820034 	movhi	r2,2048
   22040:	10833a04 	addi	r2,r2,3304
   22044:	f800283a 	ret

00022048 <__cxa_get_globals>:
   22048:	00820034 	movhi	r2,2048
   2204c:	10833a04 	addi	r2,r2,3304
   22050:	f800283a 	ret

00022054 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   22054:	20800017 	ldw	r2,0(r4)
   22058:	defffa04 	addi	sp,sp,-24
   2205c:	dc000415 	stw	r16,16(sp)
   22060:	10800617 	ldw	r2,24(r2)
   22064:	3021883a 	mov	r16,r6
   22068:	31800017 	ldw	r6,0(r6)
   2206c:	00c00404 	movi	r3,16
   22070:	d8c00215 	stw	r3,8(sp)
   22074:	dfc00515 	stw	ra,20(sp)
   22078:	d8000015 	stw	zero,0(sp)
   2207c:	d8000115 	stw	zero,4(sp)
   22080:	d8000315 	stw	zero,12(sp)
   22084:	d80f883a 	mov	r7,sp
   22088:	103ee83a 	callr	r2
   2208c:	d8800117 	ldw	r2,4(sp)
   22090:	00c00184 	movi	r3,6
   22094:	1080018c 	andi	r2,r2,6
   22098:	10c00526 	beq	r2,r3,220b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   2209c:	0005883a 	mov	r2,zero
   220a0:	dfc00517 	ldw	ra,20(sp)
   220a4:	dc000417 	ldw	r16,16(sp)
   220a8:	dec00604 	addi	sp,sp,24
   220ac:	f800283a 	ret
   220b0:	d8c00017 	ldw	r3,0(sp)
   220b4:	00800044 	movi	r2,1
   220b8:	80c00015 	stw	r3,0(r16)
   220bc:	dfc00517 	ldw	ra,20(sp)
   220c0:	dc000417 	ldw	r16,16(sp)
   220c4:	dec00604 	addi	sp,sp,24
   220c8:	f800283a 	ret

000220cc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   220cc:	d8800017 	ldw	r2,0(sp)
   220d0:	11800226 	beq	r2,r6,220dc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   220d4:	00800044 	movi	r2,1
   220d8:	f800283a 	ret
   220dc:	00800184 	movi	r2,6
   220e0:	f800283a 	ret

000220e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   220e4:	00820034 	movhi	r2,2048
   220e8:	1080ba04 	addi	r2,r2,744
   220ec:	20800015 	stw	r2,0(r4)
   220f0:	0022a681 	jmpi	22a68 <_ZNSt9type_infoD1Ev>

000220f4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   220f4:	defffe04 	addi	sp,sp,-8
   220f8:	00820034 	movhi	r2,2048
   220fc:	dc000015 	stw	r16,0(sp)
   22100:	dfc00115 	stw	ra,4(sp)
   22104:	1080ba04 	addi	r2,r2,744
   22108:	20800015 	stw	r2,0(r4)
   2210c:	2021883a 	mov	r16,r4
   22110:	0022a680 	call	22a68 <_ZNSt9type_infoD1Ev>
   22114:	8009883a 	mov	r4,r16
   22118:	dfc00117 	ldw	ra,4(sp)
   2211c:	dc000017 	ldw	r16,0(sp)
   22120:	dec00204 	addi	sp,sp,8
   22124:	002231c1 	jmpi	2231c <_ZdlPv>

00022128 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   22128:	21000117 	ldw	r4,4(r4)
   2212c:	29400117 	ldw	r5,4(r5)
   22130:	defffd04 	addi	sp,sp,-12
   22134:	dc400115 	stw	r17,4(sp)
   22138:	dc000015 	stw	r16,0(sp)
   2213c:	dfc00215 	stw	ra,8(sp)
   22140:	3023883a 	mov	r17,r6
   22144:	3821883a 	mov	r16,r7
   22148:	21400b26 	beq	r4,r5,22178 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   2214c:	20c00007 	ldb	r3,0(r4)
   22150:	00800a84 	movi	r2,42
   22154:	18800226 	beq	r3,r2,22160 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   22158:	0023e7c0 	call	23e7c <strcmp>
   2215c:	10000626 	beq	r2,zero,22178 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   22160:	0005883a 	mov	r2,zero
   22164:	dfc00217 	ldw	ra,8(sp)
   22168:	dc400117 	ldw	r17,4(sp)
   2216c:	dc000017 	ldw	r16,0(sp)
   22170:	dec00304 	addi	sp,sp,12
   22174:	f800283a 	ret
   22178:	00800204 	movi	r2,8
   2217c:	80800315 	stw	r2,12(r16)
   22180:	00800184 	movi	r2,6
   22184:	80800115 	stw	r2,4(r16)
   22188:	84400015 	stw	r17,0(r16)
   2218c:	00800044 	movi	r2,1
   22190:	003ff406 	br	22164 <__alt_data_end+0xf4022164>

00022194 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   22194:	20800117 	ldw	r2,4(r4)
   22198:	28c00117 	ldw	r3,4(r5)
   2219c:	10c02926 	beq	r2,r3,22244 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   221a0:	defffb04 	addi	sp,sp,-20
   221a4:	dcc00315 	stw	r19,12(sp)
   221a8:	dc800215 	stw	r18,8(sp)
   221ac:	dc400115 	stw	r17,4(sp)
   221b0:	dc000015 	stw	r16,0(sp)
   221b4:	dfc00415 	stw	ra,16(sp)
   221b8:	2821883a 	mov	r16,r5
   221bc:	11400007 	ldb	r5,0(r2)
   221c0:	2025883a 	mov	r18,r4
   221c4:	01000a84 	movi	r4,42
   221c8:	3823883a 	mov	r17,r7
   221cc:	3027883a 	mov	r19,r6
   221d0:	29000426 	beq	r5,r4,221e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
   221d4:	1009883a 	mov	r4,r2
   221d8:	180b883a 	mov	r5,r3
   221dc:	0023e7c0 	call	23e7c <strcmp>
   221e0:	10000a26 	beq	r2,zero,2220c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
   221e4:	008000c4 	movi	r2,3
   221e8:	14400a2e 	bgeu	r2,r17,22214 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   221ec:	0005883a 	mov	r2,zero
   221f0:	dfc00417 	ldw	ra,16(sp)
   221f4:	dcc00317 	ldw	r19,12(sp)
   221f8:	dc800217 	ldw	r18,8(sp)
   221fc:	dc400117 	ldw	r17,4(sp)
   22200:	dc000017 	ldw	r16,0(sp)
   22204:	dec00504 	addi	sp,sp,20
   22208:	f800283a 	ret
   2220c:	00800044 	movi	r2,1
   22210:	003ff706 	br	221f0 <__alt_data_end+0xf40221f0>
   22214:	80800017 	ldw	r2,0(r16)
   22218:	8009883a 	mov	r4,r16
   2221c:	900b883a 	mov	r5,r18
   22220:	10800517 	ldw	r2,20(r2)
   22224:	980d883a 	mov	r6,r19
   22228:	dfc00417 	ldw	ra,16(sp)
   2222c:	dcc00317 	ldw	r19,12(sp)
   22230:	dc800217 	ldw	r18,8(sp)
   22234:	dc400117 	ldw	r17,4(sp)
   22238:	dc000017 	ldw	r16,0(sp)
   2223c:	dec00504 	addi	sp,sp,20
   22240:	1000683a 	jmp	r2
   22244:	00800044 	movi	r2,1
   22248:	f800283a 	ret

0002224c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   2224c:	defffb04 	addi	sp,sp,-20
   22250:	dc400315 	stw	r17,12(sp)
   22254:	d8800717 	ldw	r2,28(sp)
   22258:	dc400517 	ldw	r17,20(sp)
   2225c:	dc000215 	stw	r16,8(sp)
   22260:	dfc00415 	stw	ra,16(sp)
   22264:	24000117 	ldw	r16,4(r4)
   22268:	88801026 	beq	r17,r2,222ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   2226c:	39400117 	ldw	r5,4(r7)
   22270:	81401d26 	beq	r16,r5,222e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   22274:	80c00007 	ldb	r3,0(r16)
   22278:	00800a84 	movi	r2,42
   2227c:	18800526 	beq	r3,r2,22294 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   22280:	8009883a 	mov	r4,r16
   22284:	d9800115 	stw	r6,4(sp)
   22288:	0023e7c0 	call	23e7c <strcmp>
   2228c:	d9800117 	ldw	r6,4(sp)
   22290:	10001526 	beq	r2,zero,222e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   22294:	0005883a 	mov	r2,zero
   22298:	dfc00417 	ldw	ra,16(sp)
   2229c:	dc400317 	ldw	r17,12(sp)
   222a0:	dc000217 	ldw	r16,8(sp)
   222a4:	dec00504 	addi	sp,sp,20
   222a8:	f800283a 	ret
   222ac:	d8800617 	ldw	r2,24(sp)
   222b0:	11400117 	ldw	r5,4(r2)
   222b4:	81401326 	beq	r16,r5,22304 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   222b8:	80c00007 	ldb	r3,0(r16)
   222bc:	00800a84 	movi	r2,42
   222c0:	18801326 	beq	r3,r2,22310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   222c4:	8009883a 	mov	r4,r16
   222c8:	d9800115 	stw	r6,4(sp)
   222cc:	d9c00015 	stw	r7,0(sp)
   222d0:	0023e7c0 	call	23e7c <strcmp>
   222d4:	d9800117 	ldw	r6,4(sp)
   222d8:	d9c00017 	ldw	r7,0(sp)
   222dc:	10000926 	beq	r2,zero,22304 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   222e0:	39400117 	ldw	r5,4(r7)
   222e4:	817fe61e 	bne	r16,r5,22280 <__alt_data_end+0xf4022280>
   222e8:	d8800817 	ldw	r2,32(sp)
   222ec:	d8c00817 	ldw	r3,32(sp)
   222f0:	14400015 	stw	r17,0(r2)
   222f4:	11800115 	stw	r6,4(r2)
   222f8:	00800044 	movi	r2,1
   222fc:	18800315 	stw	r2,12(r3)
   22300:	003fe406 	br	22294 <__alt_data_end+0xf4022294>
   22304:	d8800817 	ldw	r2,32(sp)
   22308:	11800215 	stw	r6,8(r2)
   2230c:	003fe106 	br	22294 <__alt_data_end+0xf4022294>
   22310:	38800117 	ldw	r2,4(r7)
   22314:	80bfdf1e 	bne	r16,r2,22294 <__alt_data_end+0xf4022294>
   22318:	003ff306 	br	222e8 <__alt_data_end+0xf40222e8>

0002231c <_ZdlPv>:
   2231c:	00232741 	jmpi	23274 <free>

00022320 <_ZN10__cxxabiv111__terminateEPFvvE>:
   22320:	008000b4 	movhi	r2,2
   22324:	deffef04 	addi	sp,sp,-68
   22328:	10864204 	addi	r2,r2,6408
   2232c:	d8800615 	stw	r2,24(sp)
   22330:	008000b4 	movhi	r2,2
   22334:	109c1c04 	addi	r2,r2,28784
   22338:	d8800715 	stw	r2,28(sp)
   2233c:	008000b4 	movhi	r2,2
   22340:	1088de04 	addi	r2,r2,9080
   22344:	d9000d15 	stw	r4,52(sp)
   22348:	d809883a 	mov	r4,sp
   2234c:	d8800915 	stw	r2,36(sp)
   22350:	dfc01015 	stw	ra,64(sp)
   22354:	df000f15 	stw	fp,60(sp)
   22358:	dec00815 	stw	sp,32(sp)
   2235c:	dec00a15 	stw	sp,40(sp)
   22360:	0022f300 	call	22f30 <_Unwind_SjLj_Register>
   22364:	00800044 	movi	r2,1
   22368:	d8800115 	stw	r2,4(sp)
   2236c:	d8800d17 	ldw	r2,52(sp)
   22370:	103ee83a 	callr	r2
   22374:	00232480 	call	23248 <abort>
   22378:	d8c00217 	ldw	r3,8(sp)
   2237c:	d8800117 	ldw	r2,4(sp)
   22380:	d8c00d15 	stw	r3,52(sp)
   22384:	d8c00317 	ldw	r3,12(sp)
   22388:	d8c00e15 	stw	r3,56(sp)
   2238c:	10000b26 	beq	r2,zero,223bc <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   22390:	10bfffc4 	addi	r2,r2,-1
   22394:	10000126 	beq	r2,zero,2239c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   22398:	003da0fa 	break	3
   2239c:	d8000115 	stw	zero,4(sp)
   223a0:	00227e80 	call	227e8 <__cxa_end_catch>
   223a4:	d8c00e17 	ldw	r3,56(sp)
   223a8:	00bfffc4 	movi	r2,-1
   223ac:	18800826 	beq	r3,r2,223d0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   223b0:	d9000d17 	ldw	r4,52(sp)
   223b4:	d8800115 	stw	r2,4(sp)
   223b8:	002312c0 	call	2312c <_Unwind_SjLj_Resume>
   223bc:	d9000d17 	ldw	r4,52(sp)
   223c0:	00227340 	call	22734 <__cxa_begin_catch>
   223c4:	00800084 	movi	r2,2
   223c8:	d8800115 	stw	r2,4(sp)
   223cc:	00232480 	call	23248 <abort>
   223d0:	d8800e17 	ldw	r2,56(sp)
   223d4:	d9000d17 	ldw	r4,52(sp)
   223d8:	d8800115 	stw	r2,4(sp)
   223dc:	0021e080 	call	21e08 <__cxa_call_unexpected>

000223e0 <_ZSt9terminatev>:
   223e0:	00820034 	movhi	r2,2048
   223e4:	10832504 	addi	r2,r2,3220
   223e8:	11000017 	ldw	r4,0(r2)
   223ec:	deffff04 	addi	sp,sp,-4
   223f0:	dfc00015 	stw	ra,0(sp)
   223f4:	00223200 	call	22320 <_ZN10__cxxabiv111__terminateEPFvvE>

000223f8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   223f8:	deffff04 	addi	sp,sp,-4
   223fc:	dfc00015 	stw	ra,0(sp)
   22400:	203ee83a 	callr	r4
   22404:	00223e00 	call	223e0 <_ZSt9terminatev>

00022408 <_ZSt10unexpectedv>:
   22408:	00820034 	movhi	r2,2048
   2240c:	10832e04 	addi	r2,r2,3256
   22410:	11000017 	ldw	r4,0(r2)
   22414:	deffff04 	addi	sp,sp,-4
   22418:	dfc00015 	stw	ra,0(sp)
   2241c:	00223f80 	call	223f8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00022420 <_ZSt13set_terminatePFvvE>:
   22420:	00c20034 	movhi	r3,2048
   22424:	18c32504 	addi	r3,r3,3220
   22428:	18800017 	ldw	r2,0(r3)
   2242c:	19000015 	stw	r4,0(r3)
   22430:	f800283a 	ret

00022434 <_ZSt13get_terminatev>:
   22434:	00820034 	movhi	r2,2048
   22438:	10832504 	addi	r2,r2,3220
   2243c:	10800017 	ldw	r2,0(r2)
   22440:	f800283a 	ret

00022444 <_ZSt14set_unexpectedPFvvE>:
   22444:	00c20034 	movhi	r3,2048
   22448:	18c32e04 	addi	r3,r3,3256
   2244c:	18800017 	ldw	r2,0(r3)
   22450:	19000015 	stw	r4,0(r3)
   22454:	f800283a 	ret

00022458 <_ZSt14get_unexpectedv>:
   22458:	00820034 	movhi	r2,2048
   2245c:	10832e04 	addi	r2,r2,3256
   22460:	10800017 	ldw	r2,0(r2)
   22464:	f800283a 	ret

00022468 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   22468:	00820034 	movhi	r2,2048
   2246c:	1080d204 	addi	r2,r2,840
   22470:	20800015 	stw	r2,0(r4)
   22474:	00220e41 	jmpi	220e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00022478 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   22478:	defffe04 	addi	sp,sp,-8
   2247c:	00820034 	movhi	r2,2048
   22480:	dc000015 	stw	r16,0(sp)
   22484:	dfc00115 	stw	ra,4(sp)
   22488:	1080d204 	addi	r2,r2,840
   2248c:	20800015 	stw	r2,0(r4)
   22490:	2021883a 	mov	r16,r4
   22494:	00220e40 	call	220e4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   22498:	8009883a 	mov	r4,r16
   2249c:	dfc00117 	ldw	ra,4(sp)
   224a0:	dc000017 	ldw	r16,0(sp)
   224a4:	dec00204 	addi	sp,sp,8
   224a8:	002231c1 	jmpi	2231c <_ZdlPv>

000224ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   224ac:	defff504 	addi	sp,sp,-44
   224b0:	dc000115 	stw	r16,4(sp)
   224b4:	38800117 	ldw	r2,4(r7)
   224b8:	24000117 	ldw	r16,4(r4)
   224bc:	ddc00815 	stw	r23,32(sp)
   224c0:	dd800715 	stw	r22,28(sp)
   224c4:	dd400615 	stw	r21,24(sp)
   224c8:	dd000515 	stw	r20,20(sp)
   224cc:	dcc00415 	stw	r19,16(sp)
   224d0:	dc800315 	stw	r18,12(sp)
   224d4:	dc400215 	stw	r17,8(sp)
   224d8:	dfc00a15 	stw	ra,40(sp)
   224dc:	df000915 	stw	fp,36(sp)
   224e0:	202b883a 	mov	r21,r4
   224e4:	382d883a 	mov	r22,r7
   224e8:	2823883a 	mov	r17,r5
   224ec:	dc800b17 	ldw	r18,44(sp)
   224f0:	ddc00c17 	ldw	r23,48(sp)
   224f4:	dd000d17 	ldw	r20,52(sp)
   224f8:	dcc00e17 	ldw	r19,56(sp)
   224fc:	80801f26 	beq	r16,r2,2257c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   22500:	87000007 	ldb	fp,0(r16)
   22504:	00c00a84 	movi	r3,42
   22508:	e0c00626 	beq	fp,r3,22524 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   2250c:	8009883a 	mov	r4,r16
   22510:	100b883a 	mov	r5,r2
   22514:	d9800015 	stw	r6,0(sp)
   22518:	0023e7c0 	call	23e7c <strcmp>
   2251c:	d9800017 	ldw	r6,0(sp)
   22520:	10001626 	beq	r2,zero,2257c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   22524:	95002c26 	beq	r18,r20,225d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
   22528:	a9000217 	ldw	r4,8(r21)
   2252c:	880b883a 	mov	r5,r17
   22530:	b00f883a 	mov	r7,r22
   22534:	20800017 	ldw	r2,0(r4)
   22538:	dc800b15 	stw	r18,44(sp)
   2253c:	ddc00c15 	stw	r23,48(sp)
   22540:	dd000d15 	stw	r20,52(sp)
   22544:	dcc00e15 	stw	r19,56(sp)
   22548:	10800717 	ldw	r2,28(r2)
   2254c:	dfc00a17 	ldw	ra,40(sp)
   22550:	df000917 	ldw	fp,36(sp)
   22554:	ddc00817 	ldw	r23,32(sp)
   22558:	dd800717 	ldw	r22,28(sp)
   2255c:	dd400617 	ldw	r21,24(sp)
   22560:	dd000517 	ldw	r20,20(sp)
   22564:	dcc00417 	ldw	r19,16(sp)
   22568:	dc800317 	ldw	r18,12(sp)
   2256c:	dc400217 	ldw	r17,8(sp)
   22570:	dc000117 	ldw	r16,4(sp)
   22574:	dec00b04 	addi	sp,sp,44
   22578:	1000683a 	jmp	r2
   2257c:	9c800015 	stw	r18,0(r19)
   22580:	99800115 	stw	r6,4(r19)
   22584:	88001116 	blt	r17,zero,225cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   22588:	9463883a 	add	r17,r18,r17
   2258c:	a4401d26 	beq	r20,r17,22604 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   22590:	00800044 	movi	r2,1
   22594:	98800315 	stw	r2,12(r19)
   22598:	0005883a 	mov	r2,zero
   2259c:	dfc00a17 	ldw	ra,40(sp)
   225a0:	df000917 	ldw	fp,36(sp)
   225a4:	ddc00817 	ldw	r23,32(sp)
   225a8:	dd800717 	ldw	r22,28(sp)
   225ac:	dd400617 	ldw	r21,24(sp)
   225b0:	dd000517 	ldw	r20,20(sp)
   225b4:	dcc00417 	ldw	r19,16(sp)
   225b8:	dc800317 	ldw	r18,12(sp)
   225bc:	dc400217 	ldw	r17,8(sp)
   225c0:	dc000117 	ldw	r16,4(sp)
   225c4:	dec00b04 	addi	sp,sp,44
   225c8:	f800283a 	ret
   225cc:	00bfff84 	movi	r2,-2
   225d0:	88bff11e 	bne	r17,r2,22598 <__alt_data_end+0xf4022598>
   225d4:	003fee06 	br	22590 <__alt_data_end+0xf4022590>
   225d8:	b9400117 	ldw	r5,4(r23)
   225dc:	81400726 	beq	r16,r5,225fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   225e0:	00800a84 	movi	r2,42
   225e4:	e0bfd026 	beq	fp,r2,22528 <__alt_data_end+0xf4022528>
   225e8:	8009883a 	mov	r4,r16
   225ec:	d9800015 	stw	r6,0(sp)
   225f0:	0023e7c0 	call	23e7c <strcmp>
   225f4:	d9800017 	ldw	r6,0(sp)
   225f8:	103fcb1e 	bne	r2,zero,22528 <__alt_data_end+0xf4022528>
   225fc:	99800215 	stw	r6,8(r19)
   22600:	003fe506 	br	22598 <__alt_data_end+0xf4022598>
   22604:	00800184 	movi	r2,6
   22608:	003fe206 	br	22594 <__alt_data_end+0xf4022594>

0002260c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   2260c:	defffa04 	addi	sp,sp,-24
   22610:	dc000215 	stw	r16,8(sp)
   22614:	dc000617 	ldw	r16,24(sp)
   22618:	dc800415 	stw	r18,16(sp)
   2261c:	dc400315 	stw	r17,12(sp)
   22620:	dfc00515 	stw	ra,20(sp)
   22624:	2023883a 	mov	r17,r4
   22628:	2825883a 	mov	r18,r5
   2262c:	81800b26 	beq	r16,r6,2265c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   22630:	89000217 	ldw	r4,8(r17)
   22634:	900b883a 	mov	r5,r18
   22638:	20800017 	ldw	r2,0(r4)
   2263c:	dc000615 	stw	r16,24(sp)
   22640:	10800817 	ldw	r2,32(r2)
   22644:	dfc00517 	ldw	ra,20(sp)
   22648:	dc800417 	ldw	r18,16(sp)
   2264c:	dc400317 	ldw	r17,12(sp)
   22650:	dc000217 	ldw	r16,8(sp)
   22654:	dec00604 	addi	sp,sp,24
   22658:	1000683a 	jmp	r2
   2265c:	21000117 	ldw	r4,4(r4)
   22660:	39400117 	ldw	r5,4(r7)
   22664:	21400926 	beq	r4,r5,2268c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   22668:	20c00007 	ldb	r3,0(r4)
   2266c:	00800a84 	movi	r2,42
   22670:	18bfef26 	beq	r3,r2,22630 <__alt_data_end+0xf4022630>
   22674:	d9800015 	stw	r6,0(sp)
   22678:	d9c00115 	stw	r7,4(sp)
   2267c:	0023e7c0 	call	23e7c <strcmp>
   22680:	d9800017 	ldw	r6,0(sp)
   22684:	d9c00117 	ldw	r7,4(sp)
   22688:	103fe91e 	bne	r2,zero,22630 <__alt_data_end+0xf4022630>
   2268c:	00800184 	movi	r2,6
   22690:	dfc00517 	ldw	ra,20(sp)
   22694:	dc800417 	ldw	r18,16(sp)
   22698:	dc400317 	ldw	r17,12(sp)
   2269c:	dc000217 	ldw	r16,8(sp)
   226a0:	dec00604 	addi	sp,sp,24
   226a4:	f800283a 	ret

000226a8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   226a8:	defffb04 	addi	sp,sp,-20
   226ac:	dcc00315 	stw	r19,12(sp)
   226b0:	dc800215 	stw	r18,8(sp)
   226b4:	dc400115 	stw	r17,4(sp)
   226b8:	dc000015 	stw	r16,0(sp)
   226bc:	dfc00415 	stw	ra,16(sp)
   226c0:	2027883a 	mov	r19,r4
   226c4:	2825883a 	mov	r18,r5
   226c8:	3023883a 	mov	r17,r6
   226cc:	3821883a 	mov	r16,r7
   226d0:	00221280 	call	22128 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   226d4:	10c03fcc 	andi	r3,r2,255
   226d8:	18000726 	beq	r3,zero,226f8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   226dc:	dfc00417 	ldw	ra,16(sp)
   226e0:	dcc00317 	ldw	r19,12(sp)
   226e4:	dc800217 	ldw	r18,8(sp)
   226e8:	dc400117 	ldw	r17,4(sp)
   226ec:	dc000017 	ldw	r16,0(sp)
   226f0:	dec00504 	addi	sp,sp,20
   226f4:	f800283a 	ret
   226f8:	99000217 	ldw	r4,8(r19)
   226fc:	900b883a 	mov	r5,r18
   22700:	880d883a 	mov	r6,r17
   22704:	20800017 	ldw	r2,0(r4)
   22708:	800f883a 	mov	r7,r16
   2270c:	10800617 	ldw	r2,24(r2)
   22710:	dfc00417 	ldw	ra,16(sp)
   22714:	dcc00317 	ldw	r19,12(sp)
   22718:	dc800217 	ldw	r18,8(sp)
   2271c:	dc400117 	ldw	r17,4(sp)
   22720:	dc000017 	ldw	r16,0(sp)
   22724:	dec00504 	addi	sp,sp,20
   22728:	1000683a 	jmp	r2

0002272c <__cxa_get_exception_ptr>:
   2272c:	20bfff17 	ldw	r2,-4(r4)
   22730:	f800283a 	ret

00022734 <__cxa_begin_catch>:
   22734:	defffe04 	addi	sp,sp,-8
   22738:	dc000015 	stw	r16,0(sp)
   2273c:	dfc00115 	stw	ra,4(sp)
   22740:	2021883a 	mov	r16,r4
   22744:	00220480 	call	22048 <__cxa_get_globals>
   22748:	81000017 	ldw	r4,0(r16)
   2274c:	80c00117 	ldw	r3,4(r16)
   22750:	01af3574 	movhi	r6,48341
   22754:	31b54004 	addi	r6,r6,-11008
   22758:	016e2cb4 	movhi	r5,47282
   2275c:	296aaf04 	addi	r5,r5,-21828
   22760:	218d883a 	add	r6,r4,r6
   22764:	3109803a 	cmpltu	r4,r6,r4
   22768:	1947883a 	add	r3,r3,r5
   2276c:	20c7883a 	add	r3,r4,r3
   22770:	817ff504 	addi	r5,r16,-44
   22774:	11000017 	ldw	r4,0(r2)
   22778:	18000726 	beq	r3,zero,22798 <__cxa_begin_catch+0x64>
   2277c:	2000191e 	bne	r4,zero,227e4 <__cxa_begin_catch+0xb0>
   22780:	11400015 	stw	r5,0(r2)
   22784:	0005883a 	mov	r2,zero
   22788:	dfc00117 	ldw	ra,4(sp)
   2278c:	dc000017 	ldw	r16,0(sp)
   22790:	dec00204 	addi	sp,sp,8
   22794:	f800283a 	ret
   22798:	01c00044 	movi	r7,1
   2279c:	39bff736 	bltu	r7,r6,2277c <__alt_data_end+0xf402277c>
   227a0:	80fffa17 	ldw	r3,-24(r16)
   227a4:	18000d16 	blt	r3,zero,227dc <__cxa_begin_catch+0xa8>
   227a8:	18c00044 	addi	r3,r3,1
   227ac:	11800117 	ldw	r6,4(r2)
   227b0:	80fffa15 	stw	r3,-24(r16)
   227b4:	30ffffc4 	addi	r3,r6,-1
   227b8:	10c00115 	stw	r3,4(r2)
   227bc:	21400226 	beq	r4,r5,227c8 <__cxa_begin_catch+0x94>
   227c0:	813ff915 	stw	r4,-28(r16)
   227c4:	11400015 	stw	r5,0(r2)
   227c8:	80bfff17 	ldw	r2,-4(r16)
   227cc:	dfc00117 	ldw	ra,4(sp)
   227d0:	dc000017 	ldw	r16,0(sp)
   227d4:	dec00204 	addi	sp,sp,8
   227d8:	f800283a 	ret
   227dc:	38c7c83a 	sub	r3,r7,r3
   227e0:	003ff206 	br	227ac <__alt_data_end+0xf40227ac>
   227e4:	00223e00 	call	223e0 <_ZSt9terminatev>

000227e8 <__cxa_end_catch>:
   227e8:	deffff04 	addi	sp,sp,-4
   227ec:	dfc00015 	stw	ra,0(sp)
   227f0:	002203c0 	call	2203c <__cxa_get_globals_fast>
   227f4:	11000017 	ldw	r4,0(r2)
   227f8:	20001326 	beq	r4,zero,22848 <__cxa_end_catch+0x60>
   227fc:	21400b17 	ldw	r5,44(r4)
   22800:	01ef3574 	movhi	r7,48341
   22804:	39f54004 	addi	r7,r7,-11008
   22808:	29cf883a 	add	r7,r5,r7
   2280c:	20c00c17 	ldw	r3,48(r4)
   22810:	394d803a 	cmpltu	r6,r7,r5
   22814:	016e2cb4 	movhi	r5,47282
   22818:	296aaf04 	addi	r5,r5,-21828
   2281c:	1947883a 	add	r3,r3,r5
   22820:	30c7883a 	add	r3,r6,r3
   22824:	18000b1e 	bne	r3,zero,22854 <__cxa_end_catch+0x6c>
   22828:	00c00044 	movi	r3,1
   2282c:	19c00936 	bltu	r3,r7,22854 <__cxa_end_catch+0x6c>
   22830:	20c00517 	ldw	r3,20(r4)
   22834:	18000c16 	blt	r3,zero,22868 <__cxa_end_catch+0x80>
   22838:	197fffc4 	addi	r5,r3,-1
   2283c:	28000f26 	beq	r5,zero,2287c <__cxa_end_catch+0x94>
   22840:	18001426 	beq	r3,zero,22894 <__cxa_end_catch+0xac>
   22844:	21400515 	stw	r5,20(r4)
   22848:	dfc00017 	ldw	ra,0(sp)
   2284c:	dec00104 	addi	sp,sp,4
   22850:	f800283a 	ret
   22854:	21000b04 	addi	r4,r4,44
   22858:	10000015 	stw	zero,0(r2)
   2285c:	dfc00017 	ldw	ra,0(sp)
   22860:	dec00104 	addi	sp,sp,4
   22864:	00231bc1 	jmpi	231bc <_Unwind_DeleteException>
   22868:	19400044 	addi	r5,r3,1
   2286c:	283ff51e 	bne	r5,zero,22844 <__alt_data_end+0xf4022844>
   22870:	20c00417 	ldw	r3,16(r4)
   22874:	10c00015 	stw	r3,0(r2)
   22878:	003ff206 	br	22844 <__alt_data_end+0xf4022844>
   2287c:	20c00417 	ldw	r3,16(r4)
   22880:	21000b04 	addi	r4,r4,44
   22884:	10c00015 	stw	r3,0(r2)
   22888:	dfc00017 	ldw	ra,0(sp)
   2288c:	dec00104 	addi	sp,sp,4
   22890:	00231bc1 	jmpi	231bc <_Unwind_DeleteException>
   22894:	00223e00 	call	223e0 <_ZSt9terminatev>

00022898 <_ZSt18uncaught_exceptionv>:
   22898:	deffff04 	addi	sp,sp,-4
   2289c:	dfc00015 	stw	ra,0(sp)
   228a0:	00220480 	call	22048 <__cxa_get_globals>
   228a4:	10800117 	ldw	r2,4(r2)
   228a8:	1004c03a 	cmpne	r2,r2,zero
   228ac:	dfc00017 	ldw	ra,0(sp)
   228b0:	dec00104 	addi	sp,sp,4
   228b4:	f800283a 	ret

000228b8 <__cxa_call_terminate>:
   228b8:	defffe04 	addi	sp,sp,-8
   228bc:	dc000015 	stw	r16,0(sp)
   228c0:	dfc00115 	stw	ra,4(sp)
   228c4:	2021883a 	mov	r16,r4
   228c8:	20000c26 	beq	r4,zero,228fc <__cxa_call_terminate+0x44>
   228cc:	00227340 	call	22734 <__cxa_begin_catch>
   228d0:	80c00017 	ldw	r3,0(r16)
   228d4:	012f3574 	movhi	r4,48341
   228d8:	21354004 	addi	r4,r4,-11008
   228dc:	1909883a 	add	r4,r3,r4
   228e0:	80800117 	ldw	r2,4(r16)
   228e4:	20cb803a 	cmpltu	r5,r4,r3
   228e8:	00ee2cb4 	movhi	r3,47282
   228ec:	18eaaf04 	addi	r3,r3,-21828
   228f0:	10c5883a 	add	r2,r2,r3
   228f4:	2885883a 	add	r2,r5,r2
   228f8:	10000126 	beq	r2,zero,22900 <__cxa_call_terminate+0x48>
   228fc:	00223e00 	call	223e0 <_ZSt9terminatev>
   22900:	00800044 	movi	r2,1
   22904:	113ffd36 	bltu	r2,r4,228fc <__alt_data_end+0xf40228fc>
   22908:	813ff817 	ldw	r4,-32(r16)
   2290c:	00223200 	call	22320 <_ZN10__cxxabiv111__terminateEPFvvE>

00022910 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   22910:	defffe04 	addi	sp,sp,-8
   22914:	dfc00115 	stw	ra,4(sp)
   22918:	dc000015 	stw	r16,0(sp)
   2291c:	00800044 	movi	r2,1
   22920:	11000a36 	bltu	r2,r4,2294c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   22924:	28bff617 	ldw	r2,-40(r5)
   22928:	2c000504 	addi	r16,r5,20
   2292c:	10000226 	beq	r2,zero,22938 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   22930:	8009883a 	mov	r4,r16
   22934:	103ee83a 	callr	r2
   22938:	8009883a 	mov	r4,r16
   2293c:	dfc00117 	ldw	ra,4(sp)
   22940:	dc000017 	ldw	r16,0(sp)
   22944:	dec00204 	addi	sp,sp,8
   22948:	0022b701 	jmpi	22b70 <__cxa_free_exception>
   2294c:	293ff817 	ldw	r4,-32(r5)
   22950:	00223200 	call	22320 <_ZN10__cxxabiv111__terminateEPFvvE>

00022954 <__cxa_throw>:
   22954:	defffb04 	addi	sp,sp,-20
   22958:	dfc00415 	stw	ra,16(sp)
   2295c:	dcc00315 	stw	r19,12(sp)
   22960:	dc800215 	stw	r18,8(sp)
   22964:	2827883a 	mov	r19,r5
   22968:	3025883a 	mov	r18,r6
   2296c:	dc400115 	stw	r17,4(sp)
   22970:	dc000015 	stw	r16,0(sp)
   22974:	2021883a 	mov	r16,r4
   22978:	00220480 	call	22048 <__cxa_get_globals>
   2297c:	10c00117 	ldw	r3,4(r2)
   22980:	847ffb04 	addi	r17,r16,-20
   22984:	18c00044 	addi	r3,r3,1
   22988:	10c00115 	stw	r3,4(r2)
   2298c:	00800044 	movi	r2,1
   22990:	80bfef15 	stw	r2,-68(r16)
   22994:	84fff015 	stw	r19,-64(r16)
   22998:	84bff115 	stw	r18,-60(r16)
   2299c:	00224580 	call	22458 <_ZSt14get_unexpectedv>
   229a0:	80bff215 	stw	r2,-56(r16)
   229a4:	00224340 	call	22434 <_ZSt13get_terminatev>
   229a8:	80bff315 	stw	r2,-52(r16)
   229ac:	0090caf4 	movhi	r2,17195
   229b0:	108ac004 	addi	r2,r2,11008
   229b4:	80bffb15 	stw	r2,-20(r16)
   229b8:	0091d3b4 	movhi	r2,18254
   229bc:	109550c4 	addi	r2,r2,21827
   229c0:	80bffc15 	stw	r2,-16(r16)
   229c4:	008000b4 	movhi	r2,2
   229c8:	108a4404 	addi	r2,r2,10512
   229cc:	8809883a 	mov	r4,r17
   229d0:	80bffd15 	stw	r2,-12(r16)
   229d4:	00230180 	call	23018 <_Unwind_SjLj_RaiseException>
   229d8:	8809883a 	mov	r4,r17
   229dc:	00227340 	call	22734 <__cxa_begin_catch>
   229e0:	00223e00 	call	223e0 <_ZSt9terminatev>

000229e4 <__cxa_rethrow>:
   229e4:	defffe04 	addi	sp,sp,-8
   229e8:	dfc00115 	stw	ra,4(sp)
   229ec:	dc000015 	stw	r16,0(sp)
   229f0:	00220480 	call	22048 <__cxa_get_globals>
   229f4:	10c00117 	ldw	r3,4(r2)
   229f8:	11000017 	ldw	r4,0(r2)
   229fc:	18c00044 	addi	r3,r3,1
   22a00:	10c00115 	stw	r3,4(r2)
   22a04:	20001126 	beq	r4,zero,22a4c <__cxa_rethrow+0x68>
   22a08:	21400b17 	ldw	r5,44(r4)
   22a0c:	01ef3574 	movhi	r7,48341
   22a10:	39f54004 	addi	r7,r7,-11008
   22a14:	29cf883a 	add	r7,r5,r7
   22a18:	20c00c17 	ldw	r3,48(r4)
   22a1c:	394d803a 	cmpltu	r6,r7,r5
   22a20:	016e2cb4 	movhi	r5,47282
   22a24:	296aaf04 	addi	r5,r5,-21828
   22a28:	1947883a 	add	r3,r3,r5
   22a2c:	30c7883a 	add	r3,r6,r3
   22a30:	18000726 	beq	r3,zero,22a50 <__cxa_rethrow+0x6c>
   22a34:	10000015 	stw	zero,0(r2)
   22a38:	24000b04 	addi	r16,r4,44
   22a3c:	8009883a 	mov	r4,r16
   22a40:	00231700 	call	23170 <_Unwind_SjLj_Resume_or_Rethrow>
   22a44:	8009883a 	mov	r4,r16
   22a48:	00227340 	call	22734 <__cxa_begin_catch>
   22a4c:	00223e00 	call	223e0 <_ZSt9terminatev>
   22a50:	00c00044 	movi	r3,1
   22a54:	19fff736 	bltu	r3,r7,22a34 <__alt_data_end+0xf4022a34>
   22a58:	20800517 	ldw	r2,20(r4)
   22a5c:	0085c83a 	sub	r2,zero,r2
   22a60:	20800515 	stw	r2,20(r4)
   22a64:	003ff406 	br	22a38 <__alt_data_end+0xf4022a38>

00022a68 <_ZNSt9type_infoD1Ev>:
   22a68:	f800283a 	ret

00022a6c <_ZNKSt9type_info14__is_pointer_pEv>:
   22a6c:	0005883a 	mov	r2,zero
   22a70:	f800283a 	ret

00022a74 <_ZNKSt9type_info15__is_function_pEv>:
   22a74:	0005883a 	mov	r2,zero
   22a78:	f800283a 	ret

00022a7c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   22a7c:	0005883a 	mov	r2,zero
   22a80:	f800283a 	ret

00022a84 <_ZNSt9type_infoD0Ev>:
   22a84:	002231c1 	jmpi	2231c <_ZdlPv>

00022a88 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   22a88:	21000117 	ldw	r4,4(r4)
   22a8c:	29400117 	ldw	r5,4(r5)
   22a90:	21400c26 	beq	r4,r5,22ac4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   22a94:	20c00007 	ldb	r3,0(r4)
   22a98:	00800a84 	movi	r2,42
   22a9c:	18800726 	beq	r3,r2,22abc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   22aa0:	deffff04 	addi	sp,sp,-4
   22aa4:	dfc00015 	stw	ra,0(sp)
   22aa8:	0023e7c0 	call	23e7c <strcmp>
   22aac:	1005003a 	cmpeq	r2,r2,zero
   22ab0:	dfc00017 	ldw	ra,0(sp)
   22ab4:	dec00104 	addi	sp,sp,4
   22ab8:	f800283a 	ret
   22abc:	0005883a 	mov	r2,zero
   22ac0:	f800283a 	ret
   22ac4:	00800044 	movi	r2,1
   22ac8:	f800283a 	ret

00022acc <__cxa_allocate_exception>:
   22acc:	defffd04 	addi	sp,sp,-12
   22ad0:	dc400115 	stw	r17,4(sp)
   22ad4:	24401104 	addi	r17,r4,68
   22ad8:	8809883a 	mov	r4,r17
   22adc:	dc000015 	stw	r16,0(sp)
   22ae0:	dfc00215 	stw	ra,8(sp)
   22ae4:	00232600 	call	23260 <malloc>
   22ae8:	1021883a 	mov	r16,r2
   22aec:	10000a26 	beq	r2,zero,22b18 <__cxa_allocate_exception+0x4c>
   22af0:	8009883a 	mov	r4,r16
   22af4:	000b883a 	mov	r5,zero
   22af8:	01801104 	movi	r6,68
   22afc:	002390c0 	call	2390c <memset>
   22b00:	80801104 	addi	r2,r16,68
   22b04:	dfc00217 	ldw	ra,8(sp)
   22b08:	dc400117 	ldw	r17,4(sp)
   22b0c:	dc000017 	ldw	r16,0(sp)
   22b10:	dec00304 	addi	sp,sp,12
   22b14:	f800283a 	ret
   22b18:	01420034 	movhi	r5,2048
   22b1c:	29433d04 	addi	r5,r5,3316
   22b20:	00808004 	movi	r2,512
   22b24:	29800017 	ldw	r6,0(r5)
   22b28:	14400736 	bltu	r2,r17,22b48 <__cxa_allocate_exception+0x7c>
   22b2c:	3005883a 	mov	r2,r6
   22b30:	01000104 	movi	r4,4
   22b34:	10c0004c 	andi	r3,r2,1
   22b38:	18000426 	beq	r3,zero,22b4c <__cxa_allocate_exception+0x80>
   22b3c:	84000044 	addi	r16,r16,1
   22b40:	1004d07a 	srli	r2,r2,1
   22b44:	813ffb1e 	bne	r16,r4,22b34 <__alt_data_end+0xf4022b34>
   22b48:	00223e00 	call	223e0 <_ZSt9terminatev>
   22b4c:	00800044 	movi	r2,1
   22b50:	1404983a 	sll	r2,r2,r16
   22b54:	8020927a 	slli	r16,r16,9
   22b58:	118cb03a 	or	r6,r2,r6
   22b5c:	00820034 	movhi	r2,2048
   22b60:	10838904 	addi	r2,r2,3620
   22b64:	29800015 	stw	r6,0(r5)
   22b68:	80a1883a 	add	r16,r16,r2
   22b6c:	003fe006 	br	22af0 <__alt_data_end+0xf4022af0>

00022b70 <__cxa_free_exception>:
   22b70:	00820034 	movhi	r2,2048
   22b74:	10838904 	addi	r2,r2,3620
   22b78:	20800236 	bltu	r4,r2,22b84 <__cxa_free_exception+0x14>
   22b7c:	10c20004 	addi	r3,r2,2048
   22b80:	20c00236 	bltu	r4,r3,22b8c <__cxa_free_exception+0x1c>
   22b84:	213fef04 	addi	r4,r4,-68
   22b88:	00232741 	jmpi	23274 <free>
   22b8c:	2089c83a 	sub	r4,r4,r2
   22b90:	2008d27a 	srli	r4,r4,9
   22b94:	01420034 	movhi	r5,2048
   22b98:	29433d04 	addi	r5,r5,3316
   22b9c:	00ffff84 	movi	r3,-2
   22ba0:	28800017 	ldw	r2,0(r5)
   22ba4:	1908183a 	rol	r4,r3,r4
   22ba8:	2088703a 	and	r4,r4,r2
   22bac:	29000015 	stw	r4,0(r5)
   22bb0:	f800283a 	ret

00022bb4 <__cxa_allocate_dependent_exception>:
   22bb4:	defffe04 	addi	sp,sp,-8
   22bb8:	01001004 	movi	r4,64
   22bbc:	dc000015 	stw	r16,0(sp)
   22bc0:	dfc00115 	stw	ra,4(sp)
   22bc4:	00232600 	call	23260 <malloc>
   22bc8:	1021883a 	mov	r16,r2
   22bcc:	10000926 	beq	r2,zero,22bf4 <__cxa_allocate_dependent_exception+0x40>
   22bd0:	8009883a 	mov	r4,r16
   22bd4:	000b883a 	mov	r5,zero
   22bd8:	01801004 	movi	r6,64
   22bdc:	002390c0 	call	2390c <memset>
   22be0:	8005883a 	mov	r2,r16
   22be4:	dfc00117 	ldw	ra,4(sp)
   22be8:	dc000017 	ldw	r16,0(sp)
   22bec:	dec00204 	addi	sp,sp,8
   22bf0:	f800283a 	ret
   22bf4:	01c20034 	movhi	r7,2048
   22bf8:	39c33c04 	addi	r7,r7,3312
   22bfc:	39800017 	ldw	r6,0(r7)
   22c00:	0005883a 	mov	r2,zero
   22c04:	01400104 	movi	r5,4
   22c08:	3007883a 	mov	r3,r6
   22c0c:	1900004c 	andi	r4,r3,1
   22c10:	20000426 	beq	r4,zero,22c24 <__cxa_allocate_dependent_exception+0x70>
   22c14:	10800044 	addi	r2,r2,1
   22c18:	1806d07a 	srli	r3,r3,1
   22c1c:	117ffb1e 	bne	r2,r5,22c0c <__alt_data_end+0xf4022c0c>
   22c20:	00223e00 	call	223e0 <_ZSt9terminatev>
   22c24:	00c00044 	movi	r3,1
   22c28:	1886983a 	sll	r3,r3,r2
   22c2c:	100491ba 	slli	r2,r2,6
   22c30:	04020034 	movhi	r16,2048
   22c34:	198cb03a 	or	r6,r3,r6
   22c38:	84034904 	addi	r16,r16,3364
   22c3c:	39800015 	stw	r6,0(r7)
   22c40:	1421883a 	add	r16,r2,r16
   22c44:	003fe206 	br	22bd0 <__alt_data_end+0xf4022bd0>

00022c48 <__cxa_free_dependent_exception>:
   22c48:	00820034 	movhi	r2,2048
   22c4c:	10834904 	addi	r2,r2,3364
   22c50:	20800236 	bltu	r4,r2,22c5c <__cxa_free_dependent_exception+0x14>
   22c54:	10c04004 	addi	r3,r2,256
   22c58:	20c00136 	bltu	r4,r3,22c60 <__cxa_free_dependent_exception+0x18>
   22c5c:	00232741 	jmpi	23274 <free>
   22c60:	2089c83a 	sub	r4,r4,r2
   22c64:	2008d1ba 	srli	r4,r4,6
   22c68:	01420034 	movhi	r5,2048
   22c6c:	29433c04 	addi	r5,r5,3312
   22c70:	00ffff84 	movi	r3,-2
   22c74:	28800017 	ldw	r2,0(r5)
   22c78:	1908183a 	rol	r4,r3,r4
   22c7c:	2088703a 	and	r4,r4,r2
   22c80:	29000015 	stw	r4,0(r5)
   22c84:	f800283a 	ret

00022c88 <_ZNSt9exceptionD1Ev>:
   22c88:	f800283a 	ret

00022c8c <_ZNSt13bad_exceptionD1Ev>:
   22c8c:	f800283a 	ret

00022c90 <_ZNKSt9exception4whatEv>:
   22c90:	00820034 	movhi	r2,2048
   22c94:	1080e704 	addi	r2,r2,924
   22c98:	f800283a 	ret

00022c9c <_ZNKSt13bad_exception4whatEv>:
   22c9c:	00820034 	movhi	r2,2048
   22ca0:	1080eb04 	addi	r2,r2,940
   22ca4:	f800283a 	ret

00022ca8 <_ZNSt9exceptionD0Ev>:
   22ca8:	002231c1 	jmpi	2231c <_ZdlPv>

00022cac <_ZNSt13bad_exceptionD0Ev>:
   22cac:	002231c1 	jmpi	2231c <_ZdlPv>

00022cb0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   22cb0:	f800283a 	ret

00022cb4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   22cb4:	002231c1 	jmpi	2231c <_ZdlPv>

00022cb8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   22cb8:	f800283a 	ret

00022cbc <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   22cbc:	002231c1 	jmpi	2231c <_ZdlPv>

00022cc0 <__cxa_pure_virtual>:
   22cc0:	01420034 	movhi	r5,2048
   22cc4:	deffff04 	addi	sp,sp,-4
   22cc8:	29412104 	addi	r5,r5,1156
   22ccc:	01000084 	movi	r4,2
   22cd0:	018006c4 	movi	r6,27
   22cd4:	dfc00015 	stw	ra,0(sp)
   22cd8:	00259d80 	call	259d8 <write>
   22cdc:	00223e00 	call	223e0 <_ZSt9terminatev>

00022ce0 <__cxa_deleted_virtual>:
   22ce0:	01420034 	movhi	r5,2048
   22ce4:	deffff04 	addi	sp,sp,-4
   22ce8:	29412804 	addi	r5,r5,1184
   22cec:	01000084 	movi	r4,2
   22cf0:	01800784 	movi	r6,30
   22cf4:	dfc00015 	stw	ra,0(sp)
   22cf8:	00259d80 	call	259d8 <write>
   22cfc:	00223e00 	call	223e0 <_ZSt9terminatev>

00022d00 <__mulsi3>:
   22d00:	0005883a 	mov	r2,zero
   22d04:	20000726 	beq	r4,zero,22d24 <__mulsi3+0x24>
   22d08:	20c0004c 	andi	r3,r4,1
   22d0c:	2008d07a 	srli	r4,r4,1
   22d10:	18000126 	beq	r3,zero,22d18 <__mulsi3+0x18>
   22d14:	1145883a 	add	r2,r2,r5
   22d18:	294b883a 	add	r5,r5,r5
   22d1c:	203ffa1e 	bne	r4,zero,22d08 <__alt_data_end+0xf4022d08>
   22d20:	f800283a 	ret
   22d24:	f800283a 	ret

00022d28 <_Unwind_ForcedUnwind_Phase2>:
   22d28:	defff404 	addi	sp,sp,-48
   22d2c:	dd800915 	stw	r22,36(sp)
   22d30:	05820034 	movhi	r22,2048
   22d34:	ddc00a15 	stw	r23,40(sp)
   22d38:	dd400815 	stw	r21,32(sp)
   22d3c:	dd000715 	stw	r20,28(sp)
   22d40:	dcc00615 	stw	r19,24(sp)
   22d44:	dc400415 	stw	r17,16(sp)
   22d48:	dc000315 	stw	r16,12(sp)
   22d4c:	dfc00b15 	stw	ra,44(sp)
   22d50:	dc800515 	stw	r18,20(sp)
   22d54:	2021883a 	mov	r16,r4
   22d58:	2823883a 	mov	r17,r5
   22d5c:	24c00317 	ldw	r19,12(r4)
   22d60:	25000417 	ldw	r20,16(r4)
   22d64:	28c00017 	ldw	r3,0(r5)
   22d68:	b5833e04 	addi	r22,r22,3320
   22d6c:	054001c4 	movi	r21,7
   22d70:	05c00204 	movi	r23,8
   22d74:	00001606 	br	22dd0 <_Unwind_ForcedUnwind_Phase2+0xa8>
   22d78:	81800017 	ldw	r6,0(r16)
   22d7c:	81c00117 	ldw	r7,4(r16)
   22d80:	1c800617 	ldw	r18,24(r3)
   22d84:	dc000015 	stw	r16,0(sp)
   22d88:	dc400115 	stw	r17,4(sp)
   22d8c:	dd000215 	stw	r20,8(sp)
   22d90:	983ee83a 	callr	r19
   22d94:	01000044 	movi	r4,1
   22d98:	01400284 	movi	r5,10
   22d9c:	1000241e 	bne	r2,zero,22e30 <_Unwind_ForcedUnwind_Phase2+0x108>
   22da0:	90000726 	beq	r18,zero,22dc0 <_Unwind_ForcedUnwind_Phase2+0x98>
   22da4:	81800017 	ldw	r6,0(r16)
   22da8:	81c00117 	ldw	r7,4(r16)
   22dac:	dc000015 	stw	r16,0(sp)
   22db0:	dc400115 	stw	r17,4(sp)
   22db4:	903ee83a 	callr	r18
   22db8:	15401f26 	beq	r2,r21,22e38 <_Unwind_ForcedUnwind_Phase2+0x110>
   22dbc:	15c01c1e 	bne	r2,r23,22e30 <_Unwind_ForcedUnwind_Phase2+0x108>
   22dc0:	88800017 	ldw	r2,0(r17)
   22dc4:	10c00017 	ldw	r3,0(r2)
   22dc8:	b0c00015 	stw	r3,0(r22)
   22dcc:	88c00015 	stw	r3,0(r17)
   22dd0:	01000044 	movi	r4,1
   22dd4:	01400284 	movi	r5,10
   22dd8:	183fe71e 	bne	r3,zero,22d78 <__alt_data_end+0xf4022d78>
   22ddc:	81800017 	ldw	r6,0(r16)
   22de0:	81c00117 	ldw	r7,4(r16)
   22de4:	01000044 	movi	r4,1
   22de8:	dc000015 	stw	r16,0(sp)
   22dec:	dc400115 	stw	r17,4(sp)
   22df0:	dd000215 	stw	r20,8(sp)
   22df4:	01400684 	movi	r5,26
   22df8:	983ee83a 	callr	r19
   22dfc:	10000c1e 	bne	r2,zero,22e30 <_Unwind_ForcedUnwind_Phase2+0x108>
   22e00:	00800144 	movi	r2,5
   22e04:	dfc00b17 	ldw	ra,44(sp)
   22e08:	ddc00a17 	ldw	r23,40(sp)
   22e0c:	dd800917 	ldw	r22,36(sp)
   22e10:	dd400817 	ldw	r21,32(sp)
   22e14:	dd000717 	ldw	r20,28(sp)
   22e18:	dcc00617 	ldw	r19,24(sp)
   22e1c:	dc800517 	ldw	r18,20(sp)
   22e20:	dc400417 	ldw	r17,16(sp)
   22e24:	dc000317 	ldw	r16,12(sp)
   22e28:	dec00c04 	addi	sp,sp,48
   22e2c:	f800283a 	ret
   22e30:	00800084 	movi	r2,2
   22e34:	003ff306 	br	22e04 <__alt_data_end+0xf4022e04>
   22e38:	a805883a 	mov	r2,r21
   22e3c:	003ff106 	br	22e04 <__alt_data_end+0xf4022e04>

00022e40 <_Unwind_RaiseException_Phase2>:
   22e40:	28c00017 	ldw	r3,0(r5)
   22e44:	defff804 	addi	sp,sp,-32
   22e48:	dcc00515 	stw	r19,20(sp)
   22e4c:	dc800415 	stw	r18,16(sp)
   22e50:	dc400315 	stw	r17,12(sp)
   22e54:	dc000215 	stw	r16,8(sp)
   22e58:	dfc00715 	stw	ra,28(sp)
   22e5c:	dd000615 	stw	r20,24(sp)
   22e60:	2823883a 	mov	r17,r5
   22e64:	2021883a 	mov	r16,r4
   22e68:	048001c4 	movi	r18,7
   22e6c:	04c00204 	movi	r19,8
   22e70:	18001326 	beq	r3,zero,22ec0 <_Unwind_RaiseException_Phase2+0x80>
   22e74:	81000417 	ldw	r4,16(r16)
   22e78:	1a000617 	ldw	r8,24(r3)
   22e7c:	19001c26 	beq	r3,r4,22ef0 <_Unwind_RaiseException_Phase2+0xb0>
   22e80:	40000b26 	beq	r8,zero,22eb0 <_Unwind_RaiseException_Phase2+0x70>
   22e84:	01400084 	movi	r5,2
   22e88:	0029883a 	mov	r20,zero
   22e8c:	81800017 	ldw	r6,0(r16)
   22e90:	81c00117 	ldw	r7,4(r16)
   22e94:	01000044 	movi	r4,1
   22e98:	dc000015 	stw	r16,0(sp)
   22e9c:	dc400115 	stw	r17,4(sp)
   22ea0:	403ee83a 	callr	r8
   22ea4:	14800f26 	beq	r2,r18,22ee4 <_Unwind_RaiseException_Phase2+0xa4>
   22ea8:	14c0051e 	bne	r2,r19,22ec0 <_Unwind_RaiseException_Phase2+0x80>
   22eac:	a0000f1e 	bne	r20,zero,22eec <_Unwind_RaiseException_Phase2+0xac>
   22eb0:	88c00017 	ldw	r3,0(r17)
   22eb4:	18c00017 	ldw	r3,0(r3)
   22eb8:	88c00015 	stw	r3,0(r17)
   22ebc:	183fed1e 	bne	r3,zero,22e74 <__alt_data_end+0xf4022e74>
   22ec0:	00800084 	movi	r2,2
   22ec4:	dfc00717 	ldw	ra,28(sp)
   22ec8:	dd000617 	ldw	r20,24(sp)
   22ecc:	dcc00517 	ldw	r19,20(sp)
   22ed0:	dc800417 	ldw	r18,16(sp)
   22ed4:	dc400317 	ldw	r17,12(sp)
   22ed8:	dc000217 	ldw	r16,8(sp)
   22edc:	dec00804 	addi	sp,sp,32
   22ee0:	f800283a 	ret
   22ee4:	9005883a 	mov	r2,r18
   22ee8:	003ff606 	br	22ec4 <__alt_data_end+0xf4022ec4>
   22eec:	00232480 	call	23248 <abort>
   22ef0:	403ffe26 	beq	r8,zero,22eec <__alt_data_end+0xf4022eec>
   22ef4:	01400184 	movi	r5,6
   22ef8:	05000104 	movi	r20,4
   22efc:	003fe306 	br	22e8c <__alt_data_end+0xf4022e8c>

00022f00 <uw_install_context.isra.1>:
   22f00:	20c00017 	ldw	r3,0(r4)
   22f04:	deffff04 	addi	sp,sp,-4
   22f08:	01420034 	movhi	r5,2048
   22f0c:	19000917 	ldw	r4,36(r3)
   22f10:	df000015 	stw	fp,0(sp)
   22f14:	18800804 	addi	r2,r3,32
   22f18:	d839883a 	mov	fp,sp
   22f1c:	29433e04 	addi	r5,r5,3320
   22f20:	28c00015 	stw	r3,0(r5)
   22f24:	17000017 	ldw	fp,0(r2)
   22f28:	1ec00a17 	ldw	sp,40(r3)
   22f2c:	2000683a 	jmp	r4

00022f30 <_Unwind_SjLj_Register>:
   22f30:	00820034 	movhi	r2,2048
   22f34:	10833e04 	addi	r2,r2,3320
   22f38:	10c00017 	ldw	r3,0(r2)
   22f3c:	11000015 	stw	r4,0(r2)
   22f40:	20c00015 	stw	r3,0(r4)
   22f44:	f800283a 	ret

00022f48 <_Unwind_SjLj_Unregister>:
   22f48:	20c00017 	ldw	r3,0(r4)
   22f4c:	00820034 	movhi	r2,2048
   22f50:	10833e04 	addi	r2,r2,3320
   22f54:	10c00015 	stw	r3,0(r2)
   22f58:	f800283a 	ret

00022f5c <_Unwind_GetGR>:
   22f5c:	20800017 	ldw	r2,0(r4)
   22f60:	29400084 	addi	r5,r5,2
   22f64:	294b883a 	add	r5,r5,r5
   22f68:	294b883a 	add	r5,r5,r5
   22f6c:	114b883a 	add	r5,r2,r5
   22f70:	28800017 	ldw	r2,0(r5)
   22f74:	f800283a 	ret

00022f78 <_Unwind_GetCFA>:
   22f78:	20800017 	ldw	r2,0(r4)
   22f7c:	10000226 	beq	r2,zero,22f88 <_Unwind_GetCFA+0x10>
   22f80:	10800a17 	ldw	r2,40(r2)
   22f84:	f800283a 	ret
   22f88:	0005883a 	mov	r2,zero
   22f8c:	f800283a 	ret

00022f90 <_Unwind_SetGR>:
   22f90:	20800017 	ldw	r2,0(r4)
   22f94:	29400084 	addi	r5,r5,2
   22f98:	294b883a 	add	r5,r5,r5
   22f9c:	294b883a 	add	r5,r5,r5
   22fa0:	114b883a 	add	r5,r2,r5
   22fa4:	29800015 	stw	r6,0(r5)
   22fa8:	f800283a 	ret

00022fac <_Unwind_GetIP>:
   22fac:	20800017 	ldw	r2,0(r4)
   22fb0:	10800117 	ldw	r2,4(r2)
   22fb4:	10800044 	addi	r2,r2,1
   22fb8:	f800283a 	ret

00022fbc <_Unwind_GetIPInfo>:
   22fbc:	20800017 	ldw	r2,0(r4)
   22fc0:	28000015 	stw	zero,0(r5)
   22fc4:	10000326 	beq	r2,zero,22fd4 <_Unwind_GetIPInfo+0x18>
   22fc8:	10800117 	ldw	r2,4(r2)
   22fcc:	10800044 	addi	r2,r2,1
   22fd0:	f800283a 	ret
   22fd4:	0005883a 	mov	r2,zero
   22fd8:	f800283a 	ret

00022fdc <_Unwind_SetIP>:
   22fdc:	20800017 	ldw	r2,0(r4)
   22fe0:	297fffc4 	addi	r5,r5,-1
   22fe4:	11400115 	stw	r5,4(r2)
   22fe8:	f800283a 	ret

00022fec <_Unwind_GetLanguageSpecificData>:
   22fec:	20800017 	ldw	r2,0(r4)
   22ff0:	10800717 	ldw	r2,28(r2)
   22ff4:	f800283a 	ret

00022ff8 <_Unwind_GetRegionStart>:
   22ff8:	0005883a 	mov	r2,zero
   22ffc:	f800283a 	ret

00023000 <_Unwind_FindEnclosingFunction>:
   23000:	0005883a 	mov	r2,zero
   23004:	f800283a 	ret

00023008 <_Unwind_GetDataRelBase>:
   23008:	0005883a 	mov	r2,zero
   2300c:	f800283a 	ret

00023010 <_Unwind_GetTextRelBase>:
   23010:	0005883a 	mov	r2,zero
   23014:	f800283a 	ret

00023018 <_Unwind_SjLj_RaiseException>:
   23018:	00820034 	movhi	r2,2048
   2301c:	defff804 	addi	sp,sp,-32
   23020:	10833e04 	addi	r2,r2,3320
   23024:	dc800515 	stw	r18,20(sp)
   23028:	14800017 	ldw	r18,0(r2)
   2302c:	dfc00715 	stw	ra,28(sp)
   23030:	dcc00615 	stw	r19,24(sp)
   23034:	dc400415 	stw	r17,16(sp)
   23038:	dc000315 	stw	r16,12(sp)
   2303c:	dc800215 	stw	r18,8(sp)
   23040:	90001426 	beq	r18,zero,23094 <_Unwind_SjLj_RaiseException+0x7c>
   23044:	2021883a 	mov	r16,r4
   23048:	9005883a 	mov	r2,r18
   2304c:	04400184 	movi	r17,6
   23050:	04c00204 	movi	r19,8
   23054:	10800617 	ldw	r2,24(r2)
   23058:	10000a26 	beq	r2,zero,23084 <_Unwind_SjLj_RaiseException+0x6c>
   2305c:	81800017 	ldw	r6,0(r16)
   23060:	81c00117 	ldw	r7,4(r16)
   23064:	01000044 	movi	r4,1
   23068:	d8c00204 	addi	r3,sp,8
   2306c:	dc000015 	stw	r16,0(sp)
   23070:	d8c00115 	stw	r3,4(sp)
   23074:	200b883a 	mov	r5,r4
   23078:	103ee83a 	callr	r2
   2307c:	14400d26 	beq	r2,r17,230b4 <_Unwind_SjLj_RaiseException+0x9c>
   23080:	14c0171e 	bne	r2,r19,230e0 <_Unwind_SjLj_RaiseException+0xc8>
   23084:	d8800217 	ldw	r2,8(sp)
   23088:	10800017 	ldw	r2,0(r2)
   2308c:	d8800215 	stw	r2,8(sp)
   23090:	103ff01e 	bne	r2,zero,23054 <__alt_data_end+0xf4023054>
   23094:	00800144 	movi	r2,5
   23098:	dfc00717 	ldw	ra,28(sp)
   2309c:	dcc00617 	ldw	r19,24(sp)
   230a0:	dc800517 	ldw	r18,20(sp)
   230a4:	dc400417 	ldw	r17,16(sp)
   230a8:	dc000317 	ldw	r16,12(sp)
   230ac:	dec00804 	addi	sp,sp,32
   230b0:	f800283a 	ret
   230b4:	d8800217 	ldw	r2,8(sp)
   230b8:	80000315 	stw	zero,12(r16)
   230bc:	8009883a 	mov	r4,r16
   230c0:	80800415 	stw	r2,16(r16)
   230c4:	d9400204 	addi	r5,sp,8
   230c8:	dc800215 	stw	r18,8(sp)
   230cc:	0022e400 	call	22e40 <_Unwind_RaiseException_Phase2>
   230d0:	00c001c4 	movi	r3,7
   230d4:	10fff01e 	bne	r2,r3,23098 <__alt_data_end+0xf4023098>
   230d8:	d9000204 	addi	r4,sp,8
   230dc:	0022f000 	call	22f00 <uw_install_context.isra.1>
   230e0:	008000c4 	movi	r2,3
   230e4:	003fec06 	br	23098 <__alt_data_end+0xf4023098>

000230e8 <_Unwind_SjLj_ForcedUnwind>:
   230e8:	00c20034 	movhi	r3,2048
   230ec:	18c33e04 	addi	r3,r3,3320
   230f0:	defffe04 	addi	sp,sp,-8
   230f4:	18c00017 	ldw	r3,0(r3)
   230f8:	dfc00115 	stw	ra,4(sp)
   230fc:	21400315 	stw	r5,12(r4)
   23100:	21800415 	stw	r6,16(r4)
   23104:	d80b883a 	mov	r5,sp
   23108:	d8c00015 	stw	r3,0(sp)
   2310c:	0022d280 	call	22d28 <_Unwind_ForcedUnwind_Phase2>
   23110:	00c001c4 	movi	r3,7
   23114:	10c00326 	beq	r2,r3,23124 <_Unwind_SjLj_ForcedUnwind+0x3c>
   23118:	dfc00117 	ldw	ra,4(sp)
   2311c:	dec00204 	addi	sp,sp,8
   23120:	f800283a 	ret
   23124:	d809883a 	mov	r4,sp
   23128:	0022f000 	call	22f00 <uw_install_context.isra.1>

0002312c <_Unwind_SjLj_Resume>:
   2312c:	00c20034 	movhi	r3,2048
   23130:	18c33e04 	addi	r3,r3,3320
   23134:	18c00017 	ldw	r3,0(r3)
   23138:	20800317 	ldw	r2,12(r4)
   2313c:	defffe04 	addi	sp,sp,-8
   23140:	dfc00115 	stw	ra,4(sp)
   23144:	d8c00015 	stw	r3,0(sp)
   23148:	d80b883a 	mov	r5,sp
   2314c:	1000041e 	bne	r2,zero,23160 <_Unwind_SjLj_Resume+0x34>
   23150:	0022e400 	call	22e40 <_Unwind_RaiseException_Phase2>
   23154:	00c001c4 	movi	r3,7
   23158:	10c00326 	beq	r2,r3,23168 <_Unwind_SjLj_Resume+0x3c>
   2315c:	00232480 	call	23248 <abort>
   23160:	0022d280 	call	22d28 <_Unwind_ForcedUnwind_Phase2>
   23164:	003ffb06 	br	23154 <__alt_data_end+0xf4023154>
   23168:	d809883a 	mov	r4,sp
   2316c:	0022f000 	call	22f00 <uw_install_context.isra.1>

00023170 <_Unwind_SjLj_Resume_or_Rethrow>:
   23170:	20800317 	ldw	r2,12(r4)
   23174:	defffe04 	addi	sp,sp,-8
   23178:	dfc00115 	stw	ra,4(sp)
   2317c:	1000041e 	bne	r2,zero,23190 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   23180:	00230180 	call	23018 <_Unwind_SjLj_RaiseException>
   23184:	dfc00117 	ldw	ra,4(sp)
   23188:	dec00204 	addi	sp,sp,8
   2318c:	f800283a 	ret
   23190:	00820034 	movhi	r2,2048
   23194:	10833e04 	addi	r2,r2,3320
   23198:	10800017 	ldw	r2,0(r2)
   2319c:	d80b883a 	mov	r5,sp
   231a0:	d8800015 	stw	r2,0(sp)
   231a4:	0022d280 	call	22d28 <_Unwind_ForcedUnwind_Phase2>
   231a8:	00c001c4 	movi	r3,7
   231ac:	10c00126 	beq	r2,r3,231b4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   231b0:	00232480 	call	23248 <abort>
   231b4:	d809883a 	mov	r4,sp
   231b8:	0022f000 	call	22f00 <uw_install_context.isra.1>

000231bc <_Unwind_DeleteException>:
   231bc:	20800217 	ldw	r2,8(r4)
   231c0:	200b883a 	mov	r5,r4
   231c4:	10000226 	beq	r2,zero,231d0 <_Unwind_DeleteException+0x14>
   231c8:	01000044 	movi	r4,1
   231cc:	1000683a 	jmp	r2
   231d0:	f800283a 	ret

000231d4 <_Unwind_Backtrace>:
   231d4:	00820034 	movhi	r2,2048
   231d8:	10833e04 	addi	r2,r2,3320
   231dc:	10800017 	ldw	r2,0(r2)
   231e0:	defffc04 	addi	sp,sp,-16
   231e4:	dc400215 	stw	r17,8(sp)
   231e8:	dc000115 	stw	r16,4(sp)
   231ec:	dfc00315 	stw	ra,12(sp)
   231f0:	2023883a 	mov	r17,r4
   231f4:	2821883a 	mov	r16,r5
   231f8:	d8800015 	stw	r2,0(sp)
   231fc:	00000506 	br	23214 <_Unwind_Backtrace+0x40>
   23200:	883ee83a 	callr	r17
   23204:	10000e1e 	bne	r2,zero,23240 <_Unwind_Backtrace+0x6c>
   23208:	d8800017 	ldw	r2,0(sp)
   2320c:	10800017 	ldw	r2,0(r2)
   23210:	d8800015 	stw	r2,0(sp)
   23214:	d809883a 	mov	r4,sp
   23218:	800b883a 	mov	r5,r16
   2321c:	103ff81e 	bne	r2,zero,23200 <__alt_data_end+0xf4023200>
   23220:	883ee83a 	callr	r17
   23224:	1000061e 	bne	r2,zero,23240 <_Unwind_Backtrace+0x6c>
   23228:	00800144 	movi	r2,5
   2322c:	dfc00317 	ldw	ra,12(sp)
   23230:	dc400217 	ldw	r17,8(sp)
   23234:	dc000117 	ldw	r16,4(sp)
   23238:	dec00404 	addi	sp,sp,16
   2323c:	f800283a 	ret
   23240:	008000c4 	movi	r2,3
   23244:	003ff906 	br	2322c <__alt_data_end+0xf402322c>

00023248 <abort>:
   23248:	deffff04 	addi	sp,sp,-4
   2324c:	01000184 	movi	r4,6
   23250:	dfc00015 	stw	ra,0(sp)
   23254:	0023cf40 	call	23cf4 <raise>
   23258:	01000044 	movi	r4,1
   2325c:	00252cc0 	call	252cc <_exit>

00023260 <malloc>:
   23260:	00820034 	movhi	r2,2048
   23264:	10833204 	addi	r2,r2,3272
   23268:	200b883a 	mov	r5,r4
   2326c:	11000017 	ldw	r4,0(r2)
   23270:	00232881 	jmpi	23288 <_malloc_r>

00023274 <free>:
   23274:	00820034 	movhi	r2,2048
   23278:	10833204 	addi	r2,r2,3272
   2327c:	200b883a 	mov	r5,r4
   23280:	11000017 	ldw	r4,0(r2)
   23284:	0024c6c1 	jmpi	24c6c <_free_r>

00023288 <_malloc_r>:
   23288:	defff604 	addi	sp,sp,-40
   2328c:	dfc00915 	stw	ra,36(sp)
   23290:	df000815 	stw	fp,32(sp)
   23294:	ddc00715 	stw	r23,28(sp)
   23298:	dd800615 	stw	r22,24(sp)
   2329c:	dd400515 	stw	r21,20(sp)
   232a0:	dd000415 	stw	r20,16(sp)
   232a4:	dcc00315 	stw	r19,12(sp)
   232a8:	dc800215 	stw	r18,8(sp)
   232ac:	dc400115 	stw	r17,4(sp)
   232b0:	dc000015 	stw	r16,0(sp)
   232b4:	288002c4 	addi	r2,r5,11
   232b8:	00c00584 	movi	r3,22
   232bc:	1880042e 	bgeu	r3,r2,232d0 <_malloc_r+0x48>
   232c0:	047ffe04 	movi	r17,-8
   232c4:	1462703a 	and	r17,r2,r17
   232c8:	8800020e 	bge	r17,zero,232d4 <_malloc_r+0x4c>
   232cc:	00000206 	br	232d8 <_malloc_r+0x50>
   232d0:	04400404 	movi	r17,16
   232d4:	8940032e 	bgeu	r17,r5,232e4 <_malloc_r+0x5c>
   232d8:	00800304 	movi	r2,12
   232dc:	20800015 	stw	r2,0(r4)
   232e0:	00017206 	br	238ac <_malloc_r+0x624>
   232e4:	2027883a 	mov	r19,r4
   232e8:	00255fc0 	call	255fc <__malloc_lock>
   232ec:	04820034 	movhi	r18,2048
   232f0:	00807dc4 	movi	r2,503
   232f4:	94814d04 	addi	r18,r18,1332
   232f8:	14401536 	bltu	r2,r17,23350 <_malloc_r+0xc8>
   232fc:	8804d0fa 	srli	r2,r17,3
   23300:	1087883a 	add	r3,r2,r2
   23304:	18c7883a 	add	r3,r3,r3
   23308:	18c7883a 	add	r3,r3,r3
   2330c:	90c7883a 	add	r3,r18,r3
   23310:	1c000317 	ldw	r16,12(r3)
   23314:	80c0031e 	bne	r16,r3,23324 <_malloc_r+0x9c>
   23318:	80c00204 	addi	r3,r16,8
   2331c:	84000517 	ldw	r16,20(r16)
   23320:	80c00926 	beq	r16,r3,23348 <_malloc_r+0xc0>
   23324:	80c00117 	ldw	r3,4(r16)
   23328:	00bfff04 	movi	r2,-4
   2332c:	81000217 	ldw	r4,8(r16)
   23330:	1884703a 	and	r2,r3,r2
   23334:	80c00317 	ldw	r3,12(r16)
   23338:	8085883a 	add	r2,r16,r2
   2333c:	20c00315 	stw	r3,12(r4)
   23340:	19000215 	stw	r4,8(r3)
   23344:	00002d06 	br	233fc <_malloc_r+0x174>
   23348:	10800084 	addi	r2,r2,2
   2334c:	00003506 	br	23424 <_malloc_r+0x19c>
   23350:	8804d27a 	srli	r2,r17,9
   23354:	10001826 	beq	r2,zero,233b8 <_malloc_r+0x130>
   23358:	00c00104 	movi	r3,4
   2335c:	18800336 	bltu	r3,r2,2336c <_malloc_r+0xe4>
   23360:	8804d1ba 	srli	r2,r17,6
   23364:	10800e04 	addi	r2,r2,56
   23368:	00001606 	br	233c4 <_malloc_r+0x13c>
   2336c:	00c00504 	movi	r3,20
   23370:	18800236 	bltu	r3,r2,2337c <_malloc_r+0xf4>
   23374:	108016c4 	addi	r2,r2,91
   23378:	00001206 	br	233c4 <_malloc_r+0x13c>
   2337c:	00c01504 	movi	r3,84
   23380:	18800336 	bltu	r3,r2,23390 <_malloc_r+0x108>
   23384:	8804d33a 	srli	r2,r17,12
   23388:	10801b84 	addi	r2,r2,110
   2338c:	00000d06 	br	233c4 <_malloc_r+0x13c>
   23390:	00c05504 	movi	r3,340
   23394:	18800336 	bltu	r3,r2,233a4 <_malloc_r+0x11c>
   23398:	8804d3fa 	srli	r2,r17,15
   2339c:	10801dc4 	addi	r2,r2,119
   233a0:	00000806 	br	233c4 <_malloc_r+0x13c>
   233a4:	00c15504 	movi	r3,1364
   233a8:	18800536 	bltu	r3,r2,233c0 <_malloc_r+0x138>
   233ac:	8804d4ba 	srli	r2,r17,18
   233b0:	10801f04 	addi	r2,r2,124
   233b4:	00000306 	br	233c4 <_malloc_r+0x13c>
   233b8:	00800fc4 	movi	r2,63
   233bc:	00000106 	br	233c4 <_malloc_r+0x13c>
   233c0:	00801f84 	movi	r2,126
   233c4:	1087883a 	add	r3,r2,r2
   233c8:	18c7883a 	add	r3,r3,r3
   233cc:	18c7883a 	add	r3,r3,r3
   233d0:	90c7883a 	add	r3,r18,r3
   233d4:	1c000317 	ldw	r16,12(r3)
   233d8:	01bfff04 	movi	r6,-4
   233dc:	01c003c4 	movi	r7,15
   233e0:	00000906 	br	23408 <_malloc_r+0x180>
   233e4:	28000716 	blt	r5,zero,23404 <_malloc_r+0x17c>
   233e8:	80800317 	ldw	r2,12(r16)
   233ec:	80c00217 	ldw	r3,8(r16)
   233f0:	18800315 	stw	r2,12(r3)
   233f4:	10c00215 	stw	r3,8(r2)
   233f8:	8105883a 	add	r2,r16,r4
   233fc:	10c00117 	ldw	r3,4(r2)
   23400:	00013106 	br	238c8 <_malloc_r+0x640>
   23404:	84000317 	ldw	r16,12(r16)
   23408:	80c00526 	beq	r16,r3,23420 <_malloc_r+0x198>
   2340c:	81000117 	ldw	r4,4(r16)
   23410:	2188703a 	and	r4,r4,r6
   23414:	244bc83a 	sub	r5,r4,r17
   23418:	397ff20e 	bge	r7,r5,233e4 <__alt_data_end+0xf40233e4>
   2341c:	10bfffc4 	addi	r2,r2,-1
   23420:	10800044 	addi	r2,r2,1
   23424:	01020034 	movhi	r4,2048
   23428:	94000417 	ldw	r16,16(r18)
   2342c:	21014d04 	addi	r4,r4,1332
   23430:	21800204 	addi	r6,r4,8
   23434:	81805c26 	beq	r16,r6,235a8 <_malloc_r+0x320>
   23438:	81400117 	ldw	r5,4(r16)
   2343c:	00ffff04 	movi	r3,-4
   23440:	01c003c4 	movi	r7,15
   23444:	28c6703a 	and	r3,r5,r3
   23448:	1c4bc83a 	sub	r5,r3,r17
   2344c:	3940060e 	bge	r7,r5,23468 <_malloc_r+0x1e0>
   23450:	88800054 	ori	r2,r17,1
   23454:	8447883a 	add	r3,r16,r17
   23458:	80800115 	stw	r2,4(r16)
   2345c:	20c00515 	stw	r3,20(r4)
   23460:	20c00415 	stw	r3,16(r4)
   23464:	00007706 	br	23644 <_malloc_r+0x3bc>
   23468:	21800515 	stw	r6,20(r4)
   2346c:	21800415 	stw	r6,16(r4)
   23470:	28000516 	blt	r5,zero,23488 <_malloc_r+0x200>
   23474:	80c7883a 	add	r3,r16,r3
   23478:	18800117 	ldw	r2,4(r3)
   2347c:	10800054 	ori	r2,r2,1
   23480:	18800115 	stw	r2,4(r3)
   23484:	00011206 	br	238d0 <_malloc_r+0x648>
   23488:	01407fc4 	movi	r5,511
   2348c:	28c01136 	bltu	r5,r3,234d4 <_malloc_r+0x24c>
   23490:	1806d0fa 	srli	r3,r3,3
   23494:	01400044 	movi	r5,1
   23498:	180fd0ba 	srai	r7,r3,2
   2349c:	18c7883a 	add	r3,r3,r3
   234a0:	18c7883a 	add	r3,r3,r3
   234a4:	29ce983a 	sll	r7,r5,r7
   234a8:	21400117 	ldw	r5,4(r4)
   234ac:	18c7883a 	add	r3,r3,r3
   234b0:	394ab03a 	or	r5,r7,r5
   234b4:	21400115 	stw	r5,4(r4)
   234b8:	1909883a 	add	r4,r3,r4
   234bc:	20c00217 	ldw	r3,8(r4)
   234c0:	81000315 	stw	r4,12(r16)
   234c4:	80c00215 	stw	r3,8(r16)
   234c8:	24000215 	stw	r16,8(r4)
   234cc:	1c000315 	stw	r16,12(r3)
   234d0:	00003506 	br	235a8 <_malloc_r+0x320>
   234d4:	180ad27a 	srli	r5,r3,9
   234d8:	01000104 	movi	r4,4
   234dc:	21400336 	bltu	r4,r5,234ec <_malloc_r+0x264>
   234e0:	180ad1ba 	srli	r5,r3,6
   234e4:	29400e04 	addi	r5,r5,56
   234e8:	00001406 	br	2353c <_malloc_r+0x2b4>
   234ec:	01000504 	movi	r4,20
   234f0:	21400236 	bltu	r4,r5,234fc <_malloc_r+0x274>
   234f4:	294016c4 	addi	r5,r5,91
   234f8:	00001006 	br	2353c <_malloc_r+0x2b4>
   234fc:	01001504 	movi	r4,84
   23500:	21400336 	bltu	r4,r5,23510 <_malloc_r+0x288>
   23504:	180ad33a 	srli	r5,r3,12
   23508:	29401b84 	addi	r5,r5,110
   2350c:	00000b06 	br	2353c <_malloc_r+0x2b4>
   23510:	01005504 	movi	r4,340
   23514:	21400336 	bltu	r4,r5,23524 <_malloc_r+0x29c>
   23518:	180ad3fa 	srli	r5,r3,15
   2351c:	29401dc4 	addi	r5,r5,119
   23520:	00000606 	br	2353c <_malloc_r+0x2b4>
   23524:	01015504 	movi	r4,1364
   23528:	21400336 	bltu	r4,r5,23538 <_malloc_r+0x2b0>
   2352c:	180ad4ba 	srli	r5,r3,18
   23530:	29401f04 	addi	r5,r5,124
   23534:	00000106 	br	2353c <_malloc_r+0x2b4>
   23538:	01401f84 	movi	r5,126
   2353c:	2949883a 	add	r4,r5,r5
   23540:	2109883a 	add	r4,r4,r4
   23544:	2109883a 	add	r4,r4,r4
   23548:	9109883a 	add	r4,r18,r4
   2354c:	21c00217 	ldw	r7,8(r4)
   23550:	02020034 	movhi	r8,2048
   23554:	42014d04 	addi	r8,r8,1332
   23558:	3900081e 	bne	r7,r4,2357c <_malloc_r+0x2f4>
   2355c:	280bd0ba 	srai	r5,r5,2
   23560:	00c00044 	movi	r3,1
   23564:	194a983a 	sll	r5,r3,r5
   23568:	40c00117 	ldw	r3,4(r8)
   2356c:	28cab03a 	or	r5,r5,r3
   23570:	41400115 	stw	r5,4(r8)
   23574:	3807883a 	mov	r3,r7
   23578:	00000706 	br	23598 <_malloc_r+0x310>
   2357c:	023fff04 	movi	r8,-4
   23580:	39400117 	ldw	r5,4(r7)
   23584:	2a0a703a 	and	r5,r5,r8
   23588:	1940022e 	bgeu	r3,r5,23594 <_malloc_r+0x30c>
   2358c:	39c00217 	ldw	r7,8(r7)
   23590:	393ffb1e 	bne	r7,r4,23580 <__alt_data_end+0xf4023580>
   23594:	38c00317 	ldw	r3,12(r7)
   23598:	80c00315 	stw	r3,12(r16)
   2359c:	81c00215 	stw	r7,8(r16)
   235a0:	1c000215 	stw	r16,8(r3)
   235a4:	3c000315 	stw	r16,12(r7)
   235a8:	1007d0ba 	srai	r3,r2,2
   235ac:	02000044 	movi	r8,1
   235b0:	40d0983a 	sll	r8,r8,r3
   235b4:	90c00117 	ldw	r3,4(r18)
   235b8:	1a004d36 	bltu	r3,r8,236f0 <_malloc_r+0x468>
   235bc:	40c8703a 	and	r4,r8,r3
   235c0:	2000061e 	bne	r4,zero,235dc <_malloc_r+0x354>
   235c4:	013fff04 	movi	r4,-4
   235c8:	1104703a 	and	r2,r2,r4
   235cc:	4211883a 	add	r8,r8,r8
   235d0:	40c8703a 	and	r4,r8,r3
   235d4:	10800104 	addi	r2,r2,4
   235d8:	203ffc26 	beq	r4,zero,235cc <__alt_data_end+0xf40235cc>
   235dc:	02bfff04 	movi	r10,-4
   235e0:	02c003c4 	movi	r11,15
   235e4:	1087883a 	add	r3,r2,r2
   235e8:	18c7883a 	add	r3,r3,r3
   235ec:	18c7883a 	add	r3,r3,r3
   235f0:	90c7883a 	add	r3,r18,r3
   235f4:	19c00304 	addi	r7,r3,12
   235f8:	1013883a 	mov	r9,r2
   235fc:	3b3ffd04 	addi	r12,r7,-12
   23600:	3c000017 	ldw	r16,0(r7)
   23604:	00000106 	br	2360c <_malloc_r+0x384>
   23608:	84000317 	ldw	r16,12(r16)
   2360c:	83001e26 	beq	r16,r12,23688 <_malloc_r+0x400>
   23610:	81000117 	ldw	r4,4(r16)
   23614:	2288703a 	and	r4,r4,r10
   23618:	244bc83a 	sub	r5,r4,r17
   2361c:	5940100e 	bge	r11,r5,23660 <_malloc_r+0x3d8>
   23620:	88800054 	ori	r2,r17,1
   23624:	80800115 	stw	r2,4(r16)
   23628:	81000217 	ldw	r4,8(r16)
   2362c:	80800317 	ldw	r2,12(r16)
   23630:	8447883a 	add	r3,r16,r17
   23634:	20800315 	stw	r2,12(r4)
   23638:	11000215 	stw	r4,8(r2)
   2363c:	90c00515 	stw	r3,20(r18)
   23640:	90c00415 	stw	r3,16(r18)
   23644:	28800054 	ori	r2,r5,1
   23648:	19800315 	stw	r6,12(r3)
   2364c:	19800215 	stw	r6,8(r3)
   23650:	18800115 	stw	r2,4(r3)
   23654:	1947883a 	add	r3,r3,r5
   23658:	19400015 	stw	r5,0(r3)
   2365c:	00009c06 	br	238d0 <_malloc_r+0x648>
   23660:	283fe916 	blt	r5,zero,23608 <__alt_data_end+0xf4023608>
   23664:	8105883a 	add	r2,r16,r4
   23668:	10c00117 	ldw	r3,4(r2)
   2366c:	18c00054 	ori	r3,r3,1
   23670:	10c00115 	stw	r3,4(r2)
   23674:	80800317 	ldw	r2,12(r16)
   23678:	80c00217 	ldw	r3,8(r16)
   2367c:	18800315 	stw	r2,12(r3)
   23680:	10c00215 	stw	r3,8(r2)
   23684:	00009206 	br	238d0 <_malloc_r+0x648>
   23688:	4a400044 	addi	r9,r9,1
   2368c:	490000cc 	andi	r4,r9,3
   23690:	39c00204 	addi	r7,r7,8
   23694:	203fd91e 	bne	r4,zero,235fc <__alt_data_end+0xf40235fc>
   23698:	110000cc 	andi	r4,r2,3
   2369c:	2000051e 	bne	r4,zero,236b4 <_malloc_r+0x42c>
   236a0:	90c00117 	ldw	r3,4(r18)
   236a4:	0204303a 	nor	r2,zero,r8
   236a8:	10c4703a 	and	r2,r2,r3
   236ac:	90800115 	stw	r2,4(r18)
   236b0:	00000406 	br	236c4 <_malloc_r+0x43c>
   236b4:	193ffe04 	addi	r4,r3,-8
   236b8:	18c00017 	ldw	r3,0(r3)
   236bc:	10bfffc4 	addi	r2,r2,-1
   236c0:	193ff526 	beq	r3,r4,23698 <__alt_data_end+0xf4023698>
   236c4:	90800117 	ldw	r2,4(r18)
   236c8:	4211883a 	add	r8,r8,r8
   236cc:	12000836 	bltu	r2,r8,236f0 <_malloc_r+0x468>
   236d0:	40000726 	beq	r8,zero,236f0 <_malloc_r+0x468>
   236d4:	4086703a 	and	r3,r8,r2
   236d8:	1800031e 	bne	r3,zero,236e8 <_malloc_r+0x460>
   236dc:	4a400104 	addi	r9,r9,4
   236e0:	4211883a 	add	r8,r8,r8
   236e4:	003ffb06 	br	236d4 <__alt_data_end+0xf40236d4>
   236e8:	4805883a 	mov	r2,r9
   236ec:	003fbd06 	br	235e4 <__alt_data_end+0xf40235e4>
   236f0:	95c00217 	ldw	r23,8(r18)
   236f4:	00bfff04 	movi	r2,-4
   236f8:	bd400117 	ldw	r21,4(r23)
   236fc:	a8aa703a 	and	r21,r21,r2
   23700:	ac400336 	bltu	r21,r17,23710 <_malloc_r+0x488>
   23704:	ac47c83a 	sub	r3,r21,r17
   23708:	008003c4 	movi	r2,15
   2370c:	10c06916 	blt	r2,r3,238b4 <_malloc_r+0x62c>
   23710:	d0a02417 	ldw	r2,-32624(gp)
   23714:	d0e01217 	ldw	r3,-32696(gp)
   23718:	05bfffc4 	movi	r22,-1
   2371c:	bd61883a 	add	r16,r23,r21
   23720:	8885883a 	add	r2,r17,r2
   23724:	1d80021e 	bne	r3,r22,23730 <_malloc_r+0x4a8>
   23728:	17000404 	addi	fp,r2,16
   2372c:	00000306 	br	2373c <_malloc_r+0x4b4>
   23730:	108023c4 	addi	r2,r2,143
   23734:	073fe004 	movi	fp,-128
   23738:	1738703a 	and	fp,r2,fp
   2373c:	9809883a 	mov	r4,r19
   23740:	e00b883a 	mov	r5,fp
   23744:	0023a680 	call	23a68 <_sbrk_r>
   23748:	1029883a 	mov	r20,r2
   2374c:	15804d26 	beq	r2,r22,23884 <_malloc_r+0x5fc>
   23750:	1400012e 	bgeu	r2,r16,23758 <_malloc_r+0x4d0>
   23754:	bc804b1e 	bne	r23,r18,23884 <_malloc_r+0x5fc>
   23758:	05820034 	movhi	r22,2048
   2375c:	b5858904 	addi	r22,r22,5668
   23760:	b1000017 	ldw	r4,0(r22)
   23764:	e109883a 	add	r4,fp,r4
   23768:	b1000015 	stw	r4,0(r22)
   2376c:	a400071e 	bne	r20,r16,2378c <_malloc_r+0x504>
   23770:	a0801fcc 	andi	r2,r20,127
   23774:	1000051e 	bne	r2,zero,2378c <_malloc_r+0x504>
   23778:	90c00217 	ldw	r3,8(r18)
   2377c:	e545883a 	add	r2,fp,r21
   23780:	10800054 	ori	r2,r2,1
   23784:	18800115 	stw	r2,4(r3)
   23788:	00003706 	br	23868 <_malloc_r+0x5e0>
   2378c:	d0e01217 	ldw	r3,-32696(gp)
   23790:	00bfffc4 	movi	r2,-1
   23794:	1880021e 	bne	r3,r2,237a0 <_malloc_r+0x518>
   23798:	d5201215 	stw	r20,-32696(gp)
   2379c:	00000306 	br	237ac <_malloc_r+0x524>
   237a0:	a407c83a 	sub	r3,r20,r16
   237a4:	20c7883a 	add	r3,r4,r3
   237a8:	b0c00015 	stw	r3,0(r22)
   237ac:	a40001cc 	andi	r16,r20,7
   237b0:	80000426 	beq	r16,zero,237c4 <_malloc_r+0x53c>
   237b4:	00c00204 	movi	r3,8
   237b8:	1c21c83a 	sub	r16,r3,r16
   237bc:	a429883a 	add	r20,r20,r16
   237c0:	00000106 	br	237c8 <_malloc_r+0x540>
   237c4:	0021883a 	mov	r16,zero
   237c8:	a705883a 	add	r2,r20,fp
   237cc:	10801fcc 	andi	r2,r2,127
   237d0:	84002004 	addi	r16,r16,128
   237d4:	80a1c83a 	sub	r16,r16,r2
   237d8:	9809883a 	mov	r4,r19
   237dc:	800b883a 	mov	r5,r16
   237e0:	0023a680 	call	23a68 <_sbrk_r>
   237e4:	00ffffc4 	movi	r3,-1
   237e8:	10c0021e 	bne	r2,r3,237f4 <_malloc_r+0x56c>
   237ec:	a005883a 	mov	r2,r20
   237f0:	0021883a 	mov	r16,zero
   237f4:	b0c00017 	ldw	r3,0(r22)
   237f8:	1505c83a 	sub	r2,r2,r20
   237fc:	95000215 	stw	r20,8(r18)
   23800:	80c7883a 	add	r3,r16,r3
   23804:	1421883a 	add	r16,r2,r16
   23808:	84000054 	ori	r16,r16,1
   2380c:	b0c00015 	stw	r3,0(r22)
   23810:	a4000115 	stw	r16,4(r20)
   23814:	bc801426 	beq	r23,r18,23868 <_malloc_r+0x5e0>
   23818:	00c003c4 	movi	r3,15
   2381c:	1d400336 	bltu	r3,r21,2382c <_malloc_r+0x5a4>
   23820:	00800044 	movi	r2,1
   23824:	a0800115 	stw	r2,4(r20)
   23828:	00001606 	br	23884 <_malloc_r+0x5fc>
   2382c:	00bffe04 	movi	r2,-8
   23830:	ad7ffd04 	addi	r21,r21,-12
   23834:	a8aa703a 	and	r21,r21,r2
   23838:	b8800117 	ldw	r2,4(r23)
   2383c:	01000144 	movi	r4,5
   23840:	1080004c 	andi	r2,r2,1
   23844:	a884b03a 	or	r2,r21,r2
   23848:	b8800115 	stw	r2,4(r23)
   2384c:	bd45883a 	add	r2,r23,r21
   23850:	11000115 	stw	r4,4(r2)
   23854:	11000215 	stw	r4,8(r2)
   23858:	1d40032e 	bgeu	r3,r21,23868 <_malloc_r+0x5e0>
   2385c:	9809883a 	mov	r4,r19
   23860:	b9400204 	addi	r5,r23,8
   23864:	0024c6c0 	call	24c6c <_free_r>
   23868:	b0800017 	ldw	r2,0(r22)
   2386c:	d0e02317 	ldw	r3,-32628(gp)
   23870:	1880012e 	bgeu	r3,r2,23878 <_malloc_r+0x5f0>
   23874:	d0a02315 	stw	r2,-32628(gp)
   23878:	d0e02217 	ldw	r3,-32632(gp)
   2387c:	1880012e 	bgeu	r3,r2,23884 <_malloc_r+0x5fc>
   23880:	d0a02215 	stw	r2,-32632(gp)
   23884:	90800217 	ldw	r2,8(r18)
   23888:	10c00117 	ldw	r3,4(r2)
   2388c:	00bfff04 	movi	r2,-4
   23890:	1884703a 	and	r2,r3,r2
   23894:	1447c83a 	sub	r3,r2,r17
   23898:	14400236 	bltu	r2,r17,238a4 <_malloc_r+0x61c>
   2389c:	008003c4 	movi	r2,15
   238a0:	10c00416 	blt	r2,r3,238b4 <_malloc_r+0x62c>
   238a4:	9809883a 	mov	r4,r19
   238a8:	002561c0 	call	2561c <__malloc_unlock>
   238ac:	0005883a 	mov	r2,zero
   238b0:	00000a06 	br	238dc <_malloc_r+0x654>
   238b4:	94000217 	ldw	r16,8(r18)
   238b8:	88800054 	ori	r2,r17,1
   238bc:	80800115 	stw	r2,4(r16)
   238c0:	8445883a 	add	r2,r16,r17
   238c4:	90800215 	stw	r2,8(r18)
   238c8:	18c00054 	ori	r3,r3,1
   238cc:	10c00115 	stw	r3,4(r2)
   238d0:	9809883a 	mov	r4,r19
   238d4:	002561c0 	call	2561c <__malloc_unlock>
   238d8:	80800204 	addi	r2,r16,8
   238dc:	dfc00917 	ldw	ra,36(sp)
   238e0:	df000817 	ldw	fp,32(sp)
   238e4:	ddc00717 	ldw	r23,28(sp)
   238e8:	dd800617 	ldw	r22,24(sp)
   238ec:	dd400517 	ldw	r21,20(sp)
   238f0:	dd000417 	ldw	r20,16(sp)
   238f4:	dcc00317 	ldw	r19,12(sp)
   238f8:	dc800217 	ldw	r18,8(sp)
   238fc:	dc400117 	ldw	r17,4(sp)
   23900:	dc000017 	ldw	r16,0(sp)
   23904:	dec00a04 	addi	sp,sp,40
   23908:	f800283a 	ret

0002390c <memset>:
   2390c:	2005883a 	mov	r2,r4
   23910:	2007883a 	mov	r3,r4
   23914:	218d883a 	add	r6,r4,r6
   23918:	19800326 	beq	r3,r6,23928 <memset+0x1c>
   2391c:	19400005 	stb	r5,0(r3)
   23920:	18c00044 	addi	r3,r3,1
   23924:	003ffc06 	br	23918 <__alt_data_end+0xf4023918>
   23928:	f800283a 	ret

0002392c <_printf_r>:
   2392c:	defffd04 	addi	sp,sp,-12
   23930:	dfc00015 	stw	ra,0(sp)
   23934:	d9800115 	stw	r6,4(sp)
   23938:	d9c00215 	stw	r7,8(sp)
   2393c:	20c00217 	ldw	r3,8(r4)
   23940:	280d883a 	mov	r6,r5
   23944:	014000b4 	movhi	r5,2
   23948:	2953bd04 	addi	r5,r5,20212
   2394c:	19400115 	stw	r5,4(r3)
   23950:	21400217 	ldw	r5,8(r4)
   23954:	d9c00104 	addi	r7,sp,4
   23958:	00245b80 	call	245b8 <___vfprintf_internal_r>
   2395c:	dfc00017 	ldw	ra,0(sp)
   23960:	dec00304 	addi	sp,sp,12
   23964:	f800283a 	ret

00023968 <printf>:
   23968:	defffc04 	addi	sp,sp,-16
   2396c:	dfc00015 	stw	ra,0(sp)
   23970:	d9400115 	stw	r5,4(sp)
   23974:	d9800215 	stw	r6,8(sp)
   23978:	d9c00315 	stw	r7,12(sp)
   2397c:	00820034 	movhi	r2,2048
   23980:	10833204 	addi	r2,r2,3272
   23984:	10800017 	ldw	r2,0(r2)
   23988:	200b883a 	mov	r5,r4
   2398c:	010000b4 	movhi	r4,2
   23990:	10c00217 	ldw	r3,8(r2)
   23994:	2113bd04 	addi	r4,r4,20212
   23998:	d9800104 	addi	r6,sp,4
   2399c:	19000115 	stw	r4,4(r3)
   239a0:	11000217 	ldw	r4,8(r2)
   239a4:	0024b240 	call	24b24 <__vfprintf_internal>
   239a8:	dfc00017 	ldw	ra,0(sp)
   239ac:	dec00404 	addi	sp,sp,16
   239b0:	f800283a 	ret

000239b4 <_putchar_r>:
   239b4:	21800217 	ldw	r6,8(r4)
   239b8:	00250f01 	jmpi	250f0 <_putc_r>

000239bc <putchar>:
   239bc:	00820034 	movhi	r2,2048
   239c0:	10833204 	addi	r2,r2,3272
   239c4:	200b883a 	mov	r5,r4
   239c8:	11000017 	ldw	r4,0(r2)
   239cc:	21800217 	ldw	r6,8(r4)
   239d0:	00250f01 	jmpi	250f0 <_putc_r>

000239d4 <_puts_r>:
   239d4:	defffd04 	addi	sp,sp,-12
   239d8:	dc000015 	stw	r16,0(sp)
   239dc:	2021883a 	mov	r16,r4
   239e0:	2809883a 	mov	r4,r5
   239e4:	dfc00215 	stw	ra,8(sp)
   239e8:	dc400115 	stw	r17,4(sp)
   239ec:	2823883a 	mov	r17,r5
   239f0:	0023ee00 	call	23ee0 <strlen>
   239f4:	81400217 	ldw	r5,8(r16)
   239f8:	00c000b4 	movhi	r3,2
   239fc:	18d3bd04 	addi	r3,r3,20212
   23a00:	28c00115 	stw	r3,4(r5)
   23a04:	8009883a 	mov	r4,r16
   23a08:	880d883a 	mov	r6,r17
   23a0c:	100f883a 	mov	r7,r2
   23a10:	0024ef40 	call	24ef4 <__sfvwrite_small_dev>
   23a14:	00ffffc4 	movi	r3,-1
   23a18:	10c00926 	beq	r2,r3,23a40 <_puts_r+0x6c>
   23a1c:	81400217 	ldw	r5,8(r16)
   23a20:	01820034 	movhi	r6,2048
   23a24:	8009883a 	mov	r4,r16
   23a28:	28800117 	ldw	r2,4(r5)
   23a2c:	31813004 	addi	r6,r6,1216
   23a30:	01c00044 	movi	r7,1
   23a34:	103ee83a 	callr	r2
   23a38:	10bfffe0 	cmpeqi	r2,r2,-1
   23a3c:	0085c83a 	sub	r2,zero,r2
   23a40:	dfc00217 	ldw	ra,8(sp)
   23a44:	dc400117 	ldw	r17,4(sp)
   23a48:	dc000017 	ldw	r16,0(sp)
   23a4c:	dec00304 	addi	sp,sp,12
   23a50:	f800283a 	ret

00023a54 <puts>:
   23a54:	00820034 	movhi	r2,2048
   23a58:	10833204 	addi	r2,r2,3272
   23a5c:	200b883a 	mov	r5,r4
   23a60:	11000017 	ldw	r4,0(r2)
   23a64:	00239d41 	jmpi	239d4 <_puts_r>

00023a68 <_sbrk_r>:
   23a68:	defffd04 	addi	sp,sp,-12
   23a6c:	dc000015 	stw	r16,0(sp)
   23a70:	04020034 	movhi	r16,2048
   23a74:	dc400115 	stw	r17,4(sp)
   23a78:	84034204 	addi	r16,r16,3336
   23a7c:	2023883a 	mov	r17,r4
   23a80:	2809883a 	mov	r4,r5
   23a84:	dfc00215 	stw	ra,8(sp)
   23a88:	80000015 	stw	zero,0(r16)
   23a8c:	00258a80 	call	258a8 <sbrk>
   23a90:	00ffffc4 	movi	r3,-1
   23a94:	10c0031e 	bne	r2,r3,23aa4 <_sbrk_r+0x3c>
   23a98:	80c00017 	ldw	r3,0(r16)
   23a9c:	18000126 	beq	r3,zero,23aa4 <_sbrk_r+0x3c>
   23aa0:	88c00015 	stw	r3,0(r17)
   23aa4:	dfc00217 	ldw	ra,8(sp)
   23aa8:	dc400117 	ldw	r17,4(sp)
   23aac:	dc000017 	ldw	r16,0(sp)
   23ab0:	dec00304 	addi	sp,sp,12
   23ab4:	f800283a 	ret

00023ab8 <_init_signal_r>:
   23ab8:	20800b17 	ldw	r2,44(r4)
   23abc:	defffe04 	addi	sp,sp,-8
   23ac0:	dc000015 	stw	r16,0(sp)
   23ac4:	dfc00115 	stw	ra,4(sp)
   23ac8:	2021883a 	mov	r16,r4
   23acc:	10000226 	beq	r2,zero,23ad8 <_init_signal_r+0x20>
   23ad0:	0005883a 	mov	r2,zero
   23ad4:	00000d06 	br	23b0c <_init_signal_r+0x54>
   23ad8:	01402004 	movi	r5,128
   23adc:	00232880 	call	23288 <_malloc_r>
   23ae0:	80800b15 	stw	r2,44(r16)
   23ae4:	10000826 	beq	r2,zero,23b08 <_init_signal_r+0x50>
   23ae8:	0005883a 	mov	r2,zero
   23aec:	01002004 	movi	r4,128
   23af0:	80c00b17 	ldw	r3,44(r16)
   23af4:	1887883a 	add	r3,r3,r2
   23af8:	18000015 	stw	zero,0(r3)
   23afc:	10800104 	addi	r2,r2,4
   23b00:	113ffb1e 	bne	r2,r4,23af0 <__alt_data_end+0xf4023af0>
   23b04:	003ff206 	br	23ad0 <__alt_data_end+0xf4023ad0>
   23b08:	00bfffc4 	movi	r2,-1
   23b0c:	dfc00117 	ldw	ra,4(sp)
   23b10:	dc000017 	ldw	r16,0(sp)
   23b14:	dec00204 	addi	sp,sp,8
   23b18:	f800283a 	ret

00023b1c <_signal_r>:
   23b1c:	defffc04 	addi	sp,sp,-16
   23b20:	dc400115 	stw	r17,4(sp)
   23b24:	dfc00315 	stw	ra,12(sp)
   23b28:	dc800215 	stw	r18,8(sp)
   23b2c:	dc000015 	stw	r16,0(sp)
   23b30:	008007c4 	movi	r2,31
   23b34:	2023883a 	mov	r17,r4
   23b38:	1140032e 	bgeu	r2,r5,23b48 <_signal_r+0x2c>
   23b3c:	00800584 	movi	r2,22
   23b40:	20800015 	stw	r2,0(r4)
   23b44:	00000d06 	br	23b7c <_signal_r+0x60>
   23b48:	20800b17 	ldw	r2,44(r4)
   23b4c:	3025883a 	mov	r18,r6
   23b50:	2821883a 	mov	r16,r5
   23b54:	10000726 	beq	r2,zero,23b74 <_signal_r+0x58>
   23b58:	88800b17 	ldw	r2,44(r17)
   23b5c:	8421883a 	add	r16,r16,r16
   23b60:	8421883a 	add	r16,r16,r16
   23b64:	1421883a 	add	r16,r2,r16
   23b68:	80800017 	ldw	r2,0(r16)
   23b6c:	84800015 	stw	r18,0(r16)
   23b70:	00000306 	br	23b80 <_signal_r+0x64>
   23b74:	0023ab80 	call	23ab8 <_init_signal_r>
   23b78:	103ff726 	beq	r2,zero,23b58 <__alt_data_end+0xf4023b58>
   23b7c:	00bfffc4 	movi	r2,-1
   23b80:	dfc00317 	ldw	ra,12(sp)
   23b84:	dc800217 	ldw	r18,8(sp)
   23b88:	dc400117 	ldw	r17,4(sp)
   23b8c:	dc000017 	ldw	r16,0(sp)
   23b90:	dec00404 	addi	sp,sp,16
   23b94:	f800283a 	ret

00023b98 <_raise_r>:
   23b98:	008007c4 	movi	r2,31
   23b9c:	1140042e 	bgeu	r2,r5,23bb0 <_raise_r+0x18>
   23ba0:	00800584 	movi	r2,22
   23ba4:	20800015 	stw	r2,0(r4)
   23ba8:	00bfffc4 	movi	r2,-1
   23bac:	f800283a 	ret
   23bb0:	20c00b17 	ldw	r3,44(r4)
   23bb4:	defffd04 	addi	sp,sp,-12
   23bb8:	dc400115 	stw	r17,4(sp)
   23bbc:	dc000015 	stw	r16,0(sp)
   23bc0:	dfc00215 	stw	ra,8(sp)
   23bc4:	2821883a 	mov	r16,r5
   23bc8:	2023883a 	mov	r17,r4
   23bcc:	18000526 	beq	r3,zero,23be4 <_raise_r+0x4c>
   23bd0:	2945883a 	add	r2,r5,r5
   23bd4:	1085883a 	add	r2,r2,r2
   23bd8:	1887883a 	add	r3,r3,r2
   23bdc:	19400017 	ldw	r5,0(r3)
   23be0:	28000a1e 	bne	r5,zero,23c0c <_raise_r+0x74>
   23be4:	8809883a 	mov	r4,r17
   23be8:	0023d9c0 	call	23d9c <_getpid_r>
   23bec:	8809883a 	mov	r4,r17
   23bf0:	100b883a 	mov	r5,r2
   23bf4:	800d883a 	mov	r6,r16
   23bf8:	dfc00217 	ldw	ra,8(sp)
   23bfc:	dc400117 	ldw	r17,4(sp)
   23c00:	dc000017 	ldw	r16,0(sp)
   23c04:	dec00304 	addi	sp,sp,12
   23c08:	0023d481 	jmpi	23d48 <_kill_r>
   23c0c:	00800044 	movi	r2,1
   23c10:	28800826 	beq	r5,r2,23c34 <_raise_r+0x9c>
   23c14:	013fffc4 	movi	r4,-1
   23c18:	2900031e 	bne	r5,r4,23c28 <_raise_r+0x90>
   23c1c:	00c00584 	movi	r3,22
   23c20:	88c00015 	stw	r3,0(r17)
   23c24:	00000406 	br	23c38 <_raise_r+0xa0>
   23c28:	18000015 	stw	zero,0(r3)
   23c2c:	8009883a 	mov	r4,r16
   23c30:	283ee83a 	callr	r5
   23c34:	0005883a 	mov	r2,zero
   23c38:	dfc00217 	ldw	ra,8(sp)
   23c3c:	dc400117 	ldw	r17,4(sp)
   23c40:	dc000017 	ldw	r16,0(sp)
   23c44:	dec00304 	addi	sp,sp,12
   23c48:	f800283a 	ret

00023c4c <__sigtramp_r>:
   23c4c:	008007c4 	movi	r2,31
   23c50:	11402636 	bltu	r2,r5,23cec <__sigtramp_r+0xa0>
   23c54:	20800b17 	ldw	r2,44(r4)
   23c58:	defffd04 	addi	sp,sp,-12
   23c5c:	dc400115 	stw	r17,4(sp)
   23c60:	dc000015 	stw	r16,0(sp)
   23c64:	dfc00215 	stw	ra,8(sp)
   23c68:	2023883a 	mov	r17,r4
   23c6c:	2821883a 	mov	r16,r5
   23c70:	10000726 	beq	r2,zero,23c90 <__sigtramp_r+0x44>
   23c74:	88c00b17 	ldw	r3,44(r17)
   23c78:	8405883a 	add	r2,r16,r16
   23c7c:	1085883a 	add	r2,r2,r2
   23c80:	1885883a 	add	r2,r3,r2
   23c84:	10c00017 	ldw	r3,0(r2)
   23c88:	1800051e 	bne	r3,zero,23ca0 <__sigtramp_r+0x54>
   23c8c:	00000d06 	br	23cc4 <__sigtramp_r+0x78>
   23c90:	0023ab80 	call	23ab8 <_init_signal_r>
   23c94:	103ff726 	beq	r2,zero,23c74 <__alt_data_end+0xf4023c74>
   23c98:	00bfffc4 	movi	r2,-1
   23c9c:	00000e06 	br	23cd8 <__sigtramp_r+0x8c>
   23ca0:	013fffc4 	movi	r4,-1
   23ca4:	19000926 	beq	r3,r4,23ccc <__sigtramp_r+0x80>
   23ca8:	01000044 	movi	r4,1
   23cac:	19000926 	beq	r3,r4,23cd4 <__sigtramp_r+0x88>
   23cb0:	10000015 	stw	zero,0(r2)
   23cb4:	8009883a 	mov	r4,r16
   23cb8:	183ee83a 	callr	r3
   23cbc:	0005883a 	mov	r2,zero
   23cc0:	00000506 	br	23cd8 <__sigtramp_r+0x8c>
   23cc4:	00800044 	movi	r2,1
   23cc8:	00000306 	br	23cd8 <__sigtramp_r+0x8c>
   23ccc:	00800084 	movi	r2,2
   23cd0:	00000106 	br	23cd8 <__sigtramp_r+0x8c>
   23cd4:	008000c4 	movi	r2,3
   23cd8:	dfc00217 	ldw	ra,8(sp)
   23cdc:	dc400117 	ldw	r17,4(sp)
   23ce0:	dc000017 	ldw	r16,0(sp)
   23ce4:	dec00304 	addi	sp,sp,12
   23ce8:	f800283a 	ret
   23cec:	00bfffc4 	movi	r2,-1
   23cf0:	f800283a 	ret

00023cf4 <raise>:
   23cf4:	00820034 	movhi	r2,2048
   23cf8:	10833204 	addi	r2,r2,3272
   23cfc:	200b883a 	mov	r5,r4
   23d00:	11000017 	ldw	r4,0(r2)
   23d04:	0023b981 	jmpi	23b98 <_raise_r>

00023d08 <signal>:
   23d08:	00c20034 	movhi	r3,2048
   23d0c:	18c33204 	addi	r3,r3,3272
   23d10:	2005883a 	mov	r2,r4
   23d14:	19000017 	ldw	r4,0(r3)
   23d18:	280d883a 	mov	r6,r5
   23d1c:	100b883a 	mov	r5,r2
   23d20:	0023b1c1 	jmpi	23b1c <_signal_r>

00023d24 <_init_signal>:
   23d24:	00820034 	movhi	r2,2048
   23d28:	10833204 	addi	r2,r2,3272
   23d2c:	11000017 	ldw	r4,0(r2)
   23d30:	0023ab81 	jmpi	23ab8 <_init_signal_r>

00023d34 <__sigtramp>:
   23d34:	00820034 	movhi	r2,2048
   23d38:	10833204 	addi	r2,r2,3272
   23d3c:	200b883a 	mov	r5,r4
   23d40:	11000017 	ldw	r4,0(r2)
   23d44:	0023c4c1 	jmpi	23c4c <__sigtramp_r>

00023d48 <_kill_r>:
   23d48:	defffd04 	addi	sp,sp,-12
   23d4c:	dc000015 	stw	r16,0(sp)
   23d50:	04020034 	movhi	r16,2048
   23d54:	dc400115 	stw	r17,4(sp)
   23d58:	84034204 	addi	r16,r16,3336
   23d5c:	2023883a 	mov	r17,r4
   23d60:	2809883a 	mov	r4,r5
   23d64:	300b883a 	mov	r5,r6
   23d68:	dfc00215 	stw	ra,8(sp)
   23d6c:	80000015 	stw	zero,0(r16)
   23d70:	00253700 	call	25370 <kill>
   23d74:	00ffffc4 	movi	r3,-1
   23d78:	10c0031e 	bne	r2,r3,23d88 <_kill_r+0x40>
   23d7c:	80c00017 	ldw	r3,0(r16)
   23d80:	18000126 	beq	r3,zero,23d88 <_kill_r+0x40>
   23d84:	88c00015 	stw	r3,0(r17)
   23d88:	dfc00217 	ldw	ra,8(sp)
   23d8c:	dc400117 	ldw	r17,4(sp)
   23d90:	dc000017 	ldw	r16,0(sp)
   23d94:	dec00304 	addi	sp,sp,12
   23d98:	f800283a 	ret

00023d9c <_getpid_r>:
   23d9c:	00253001 	jmpi	25300 <getpid>

00023da0 <_sprintf_r>:
   23da0:	defff704 	addi	sp,sp,-36
   23da4:	dfc00715 	stw	ra,28(sp)
   23da8:	d9c00815 	stw	r7,32(sp)
   23dac:	00808204 	movi	r2,520
   23db0:	d880000d 	sth	r2,0(sp)
   23db4:	00a00034 	movhi	r2,32768
   23db8:	10bfffc4 	addi	r2,r2,-1
   23dbc:	d8800515 	stw	r2,20(sp)
   23dc0:	d8800315 	stw	r2,12(sp)
   23dc4:	00bfffc4 	movi	r2,-1
   23dc8:	d880008d 	sth	r2,2(sp)
   23dcc:	008000b4 	movhi	r2,2
   23dd0:	d9400415 	stw	r5,16(sp)
   23dd4:	d9400215 	stw	r5,8(sp)
   23dd8:	1093e804 	addi	r2,r2,20384
   23ddc:	d80b883a 	mov	r5,sp
   23de0:	d9c00804 	addi	r7,sp,32
   23de4:	d8800115 	stw	r2,4(sp)
   23de8:	d8000615 	stw	zero,24(sp)
   23dec:	0023fbc0 	call	23fbc <___svfprintf_internal_r>
   23df0:	d8c00417 	ldw	r3,16(sp)
   23df4:	18000005 	stb	zero,0(r3)
   23df8:	dfc00717 	ldw	ra,28(sp)
   23dfc:	dec00904 	addi	sp,sp,36
   23e00:	f800283a 	ret

00023e04 <sprintf>:
   23e04:	defff604 	addi	sp,sp,-40
   23e08:	dfc00715 	stw	ra,28(sp)
   23e0c:	d9800815 	stw	r6,32(sp)
   23e10:	d9c00915 	stw	r7,36(sp)
   23e14:	00808204 	movi	r2,520
   23e18:	d880000d 	sth	r2,0(sp)
   23e1c:	00a00034 	movhi	r2,32768
   23e20:	10bfffc4 	addi	r2,r2,-1
   23e24:	d8800515 	stw	r2,20(sp)
   23e28:	d8800315 	stw	r2,12(sp)
   23e2c:	00bfffc4 	movi	r2,-1
   23e30:	d880008d 	sth	r2,2(sp)
   23e34:	008000b4 	movhi	r2,2
   23e38:	1093e804 	addi	r2,r2,20384
   23e3c:	d8800115 	stw	r2,4(sp)
   23e40:	00820034 	movhi	r2,2048
   23e44:	10833204 	addi	r2,r2,3272
   23e48:	d9000415 	stw	r4,16(sp)
   23e4c:	d9000215 	stw	r4,8(sp)
   23e50:	11000017 	ldw	r4,0(r2)
   23e54:	280d883a 	mov	r6,r5
   23e58:	d9c00804 	addi	r7,sp,32
   23e5c:	d80b883a 	mov	r5,sp
   23e60:	d8000615 	stw	zero,24(sp)
   23e64:	0023fbc0 	call	23fbc <___svfprintf_internal_r>
   23e68:	d8c00417 	ldw	r3,16(sp)
   23e6c:	18000005 	stb	zero,0(r3)
   23e70:	dfc00717 	ldw	ra,28(sp)
   23e74:	dec00a04 	addi	sp,sp,40
   23e78:	f800283a 	ret

00023e7c <strcmp>:
   23e7c:	20800003 	ldbu	r2,0(r4)
   23e80:	10c03fcc 	andi	r3,r2,255
   23e84:	18c0201c 	xori	r3,r3,128
   23e88:	18ffe004 	addi	r3,r3,-128
   23e8c:	18000526 	beq	r3,zero,23ea4 <strcmp+0x28>
   23e90:	29800007 	ldb	r6,0(r5)
   23e94:	1980031e 	bne	r3,r6,23ea4 <strcmp+0x28>
   23e98:	21000044 	addi	r4,r4,1
   23e9c:	29400044 	addi	r5,r5,1
   23ea0:	003ff606 	br	23e7c <__alt_data_end+0xf4023e7c>
   23ea4:	28c00003 	ldbu	r3,0(r5)
   23ea8:	10803fcc 	andi	r2,r2,255
   23eac:	10c5c83a 	sub	r2,r2,r3
   23eb0:	f800283a 	ret

00023eb4 <strcpy>:
   23eb4:	2005883a 	mov	r2,r4
   23eb8:	200d883a 	mov	r6,r4
   23ebc:	28c00003 	ldbu	r3,0(r5)
   23ec0:	31800044 	addi	r6,r6,1
   23ec4:	29400044 	addi	r5,r5,1
   23ec8:	30ffffc5 	stb	r3,-1(r6)
   23ecc:	18c03fcc 	andi	r3,r3,255
   23ed0:	18c0201c 	xori	r3,r3,128
   23ed4:	18ffe004 	addi	r3,r3,-128
   23ed8:	183ff81e 	bne	r3,zero,23ebc <__alt_data_end+0xf4023ebc>
   23edc:	f800283a 	ret

00023ee0 <strlen>:
   23ee0:	2005883a 	mov	r2,r4
   23ee4:	10c00007 	ldb	r3,0(r2)
   23ee8:	18000226 	beq	r3,zero,23ef4 <strlen+0x14>
   23eec:	10800044 	addi	r2,r2,1
   23ef0:	003ffc06 	br	23ee4 <__alt_data_end+0xf4023ee4>
   23ef4:	1105c83a 	sub	r2,r2,r4
   23ef8:	f800283a 	ret

00023efc <strstr>:
   23efc:	20800007 	ldb	r2,0(r4)
   23f00:	1000051e 	bne	r2,zero,23f18 <strstr+0x1c>
   23f04:	28800007 	ldb	r2,0(r5)
   23f08:	10000f26 	beq	r2,zero,23f48 <strstr+0x4c>
   23f0c:	0005883a 	mov	r2,zero
   23f10:	f800283a 	ret
   23f14:	21000044 	addi	r4,r4,1
   23f18:	20800007 	ldb	r2,0(r4)
   23f1c:	10000926 	beq	r2,zero,23f44 <strstr+0x48>
   23f20:	0005883a 	mov	r2,zero
   23f24:	2887883a 	add	r3,r5,r2
   23f28:	18c00007 	ldb	r3,0(r3)
   23f2c:	18000626 	beq	r3,zero,23f48 <strstr+0x4c>
   23f30:	208d883a 	add	r6,r4,r2
   23f34:	31800007 	ldb	r6,0(r6)
   23f38:	19bff61e 	bne	r3,r6,23f14 <__alt_data_end+0xf4023f14>
   23f3c:	10800044 	addi	r2,r2,1
   23f40:	003ff806 	br	23f24 <__alt_data_end+0xf4023f24>
   23f44:	f800283a 	ret
   23f48:	2005883a 	mov	r2,r4
   23f4c:	f800283a 	ret

00023f50 <print_repeat>:
   23f50:	defffb04 	addi	sp,sp,-20
   23f54:	dc800315 	stw	r18,12(sp)
   23f58:	dc400215 	stw	r17,8(sp)
   23f5c:	dc000115 	stw	r16,4(sp)
   23f60:	dfc00415 	stw	ra,16(sp)
   23f64:	2025883a 	mov	r18,r4
   23f68:	2823883a 	mov	r17,r5
   23f6c:	d9800005 	stb	r6,0(sp)
   23f70:	3821883a 	mov	r16,r7
   23f74:	04000a0e 	bge	zero,r16,23fa0 <print_repeat+0x50>
   23f78:	88800117 	ldw	r2,4(r17)
   23f7c:	9009883a 	mov	r4,r18
   23f80:	880b883a 	mov	r5,r17
   23f84:	d80d883a 	mov	r6,sp
   23f88:	01c00044 	movi	r7,1
   23f8c:	103ee83a 	callr	r2
   23f90:	843fffc4 	addi	r16,r16,-1
   23f94:	103ff726 	beq	r2,zero,23f74 <__alt_data_end+0xf4023f74>
   23f98:	00bfffc4 	movi	r2,-1
   23f9c:	00000106 	br	23fa4 <print_repeat+0x54>
   23fa0:	0005883a 	mov	r2,zero
   23fa4:	dfc00417 	ldw	ra,16(sp)
   23fa8:	dc800317 	ldw	r18,12(sp)
   23fac:	dc400217 	ldw	r17,8(sp)
   23fb0:	dc000117 	ldw	r16,4(sp)
   23fb4:	dec00504 	addi	sp,sp,20
   23fb8:	f800283a 	ret

00023fbc <___svfprintf_internal_r>:
   23fbc:	deffe304 	addi	sp,sp,-116
   23fc0:	d8c00804 	addi	r3,sp,32
   23fc4:	df001b15 	stw	fp,108(sp)
   23fc8:	ddc01a15 	stw	r23,104(sp)
   23fcc:	dd801915 	stw	r22,100(sp)
   23fd0:	dd401815 	stw	r21,96(sp)
   23fd4:	dd001715 	stw	r20,92(sp)
   23fd8:	dcc01615 	stw	r19,88(sp)
   23fdc:	dc801515 	stw	r18,84(sp)
   23fe0:	dc401415 	stw	r17,80(sp)
   23fe4:	dc001315 	stw	r16,76(sp)
   23fe8:	dfc01c15 	stw	ra,112(sp)
   23fec:	2029883a 	mov	r20,r4
   23ff0:	2823883a 	mov	r17,r5
   23ff4:	3839883a 	mov	fp,r7
   23ff8:	d9800f15 	stw	r6,60(sp)
   23ffc:	0021883a 	mov	r16,zero
   24000:	d8000e15 	stw	zero,56(sp)
   24004:	002f883a 	mov	r23,zero
   24008:	002b883a 	mov	r21,zero
   2400c:	0027883a 	mov	r19,zero
   24010:	0025883a 	mov	r18,zero
   24014:	d8000c15 	stw	zero,48(sp)
   24018:	d8000b15 	stw	zero,44(sp)
   2401c:	002d883a 	mov	r22,zero
   24020:	d8c00915 	stw	r3,36(sp)
   24024:	d8c00f17 	ldw	r3,60(sp)
   24028:	19000003 	ldbu	r4,0(r3)
   2402c:	20803fcc 	andi	r2,r4,255
   24030:	1080201c 	xori	r2,r2,128
   24034:	10bfe004 	addi	r2,r2,-128
   24038:	10012e26 	beq	r2,zero,244f4 <___svfprintf_internal_r+0x538>
   2403c:	01400044 	movi	r5,1
   24040:	b1401426 	beq	r22,r5,24094 <___svfprintf_internal_r+0xd8>
   24044:	2d800216 	blt	r5,r22,24050 <___svfprintf_internal_r+0x94>
   24048:	b0000626 	beq	r22,zero,24064 <___svfprintf_internal_r+0xa8>
   2404c:	00012506 	br	244e4 <___svfprintf_internal_r+0x528>
   24050:	01400084 	movi	r5,2
   24054:	b1401d26 	beq	r22,r5,240cc <___svfprintf_internal_r+0x110>
   24058:	014000c4 	movi	r5,3
   2405c:	b1402b26 	beq	r22,r5,2410c <___svfprintf_internal_r+0x150>
   24060:	00012006 	br	244e4 <___svfprintf_internal_r+0x528>
   24064:	01400944 	movi	r5,37
   24068:	11410d26 	beq	r2,r5,244a0 <___svfprintf_internal_r+0x4e4>
   2406c:	88800117 	ldw	r2,4(r17)
   24070:	d9000005 	stb	r4,0(sp)
   24074:	880b883a 	mov	r5,r17
   24078:	a009883a 	mov	r4,r20
   2407c:	d80d883a 	mov	r6,sp
   24080:	01c00044 	movi	r7,1
   24084:	103ee83a 	callr	r2
   24088:	1000e81e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   2408c:	84000044 	addi	r16,r16,1
   24090:	00011406 	br	244e4 <___svfprintf_internal_r+0x528>
   24094:	01400c04 	movi	r5,48
   24098:	11410a26 	beq	r2,r5,244c4 <___svfprintf_internal_r+0x508>
   2409c:	01400944 	movi	r5,37
   240a0:	11400a1e 	bne	r2,r5,240cc <___svfprintf_internal_r+0x110>
   240a4:	d8800005 	stb	r2,0(sp)
   240a8:	88800117 	ldw	r2,4(r17)
   240ac:	a009883a 	mov	r4,r20
   240b0:	880b883a 	mov	r5,r17
   240b4:	d80d883a 	mov	r6,sp
   240b8:	b00f883a 	mov	r7,r22
   240bc:	103ee83a 	callr	r2
   240c0:	1000da1e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   240c4:	84000044 	addi	r16,r16,1
   240c8:	00010506 	br	244e0 <___svfprintf_internal_r+0x524>
   240cc:	25bff404 	addi	r22,r4,-48
   240d0:	b5803fcc 	andi	r22,r22,255
   240d4:	00c00244 	movi	r3,9
   240d8:	1d800936 	bltu	r3,r22,24100 <___svfprintf_internal_r+0x144>
   240dc:	00bfffc4 	movi	r2,-1
   240e0:	90800426 	beq	r18,r2,240f4 <___svfprintf_internal_r+0x138>
   240e4:	9009883a 	mov	r4,r18
   240e8:	01400284 	movi	r5,10
   240ec:	0022d000 	call	22d00 <__mulsi3>
   240f0:	00000106 	br	240f8 <___svfprintf_internal_r+0x13c>
   240f4:	0005883a 	mov	r2,zero
   240f8:	15a5883a 	add	r18,r2,r22
   240fc:	0000f206 	br	244c8 <___svfprintf_internal_r+0x50c>
   24100:	01400b84 	movi	r5,46
   24104:	1140f426 	beq	r2,r5,244d8 <___svfprintf_internal_r+0x51c>
   24108:	05800084 	movi	r22,2
   2410c:	213ff404 	addi	r4,r4,-48
   24110:	20c03fcc 	andi	r3,r4,255
   24114:	01000244 	movi	r4,9
   24118:	20c00b36 	bltu	r4,r3,24148 <___svfprintf_internal_r+0x18c>
   2411c:	00bfffc4 	movi	r2,-1
   24120:	98800626 	beq	r19,r2,2413c <___svfprintf_internal_r+0x180>
   24124:	9809883a 	mov	r4,r19
   24128:	01400284 	movi	r5,10
   2412c:	d8c01115 	stw	r3,68(sp)
   24130:	0022d000 	call	22d00 <__mulsi3>
   24134:	d8c01117 	ldw	r3,68(sp)
   24138:	00000106 	br	24140 <___svfprintf_internal_r+0x184>
   2413c:	0005883a 	mov	r2,zero
   24140:	10e7883a 	add	r19,r2,r3
   24144:	0000e706 	br	244e4 <___svfprintf_internal_r+0x528>
   24148:	01401b04 	movi	r5,108
   2414c:	1140e026 	beq	r2,r5,244d0 <___svfprintf_internal_r+0x514>
   24150:	013fffc4 	movi	r4,-1
   24154:	99000226 	beq	r19,r4,24160 <___svfprintf_internal_r+0x1a4>
   24158:	d8000b15 	stw	zero,44(sp)
   2415c:	00000106 	br	24164 <___svfprintf_internal_r+0x1a8>
   24160:	04c00044 	movi	r19,1
   24164:	01001a44 	movi	r4,105
   24168:	11001626 	beq	r2,r4,241c4 <___svfprintf_internal_r+0x208>
   2416c:	20800916 	blt	r4,r2,24194 <___svfprintf_internal_r+0x1d8>
   24170:	010018c4 	movi	r4,99
   24174:	11009626 	beq	r2,r4,243d0 <___svfprintf_internal_r+0x414>
   24178:	01001904 	movi	r4,100
   2417c:	11001126 	beq	r2,r4,241c4 <___svfprintf_internal_r+0x208>
   24180:	01001604 	movi	r4,88
   24184:	1100d61e 	bne	r2,r4,244e0 <___svfprintf_internal_r+0x524>
   24188:	00c00044 	movi	r3,1
   2418c:	d8c00e15 	stw	r3,56(sp)
   24190:	00001406 	br	241e4 <___svfprintf_internal_r+0x228>
   24194:	01001cc4 	movi	r4,115
   24198:	1100a626 	beq	r2,r4,24434 <___svfprintf_internal_r+0x478>
   2419c:	20800416 	blt	r4,r2,241b0 <___svfprintf_internal_r+0x1f4>
   241a0:	01001bc4 	movi	r4,111
   241a4:	1100ce1e 	bne	r2,r4,244e0 <___svfprintf_internal_r+0x524>
   241a8:	05400204 	movi	r21,8
   241ac:	00000e06 	br	241e8 <___svfprintf_internal_r+0x22c>
   241b0:	01001d44 	movi	r4,117
   241b4:	11000c26 	beq	r2,r4,241e8 <___svfprintf_internal_r+0x22c>
   241b8:	01001e04 	movi	r4,120
   241bc:	11000926 	beq	r2,r4,241e4 <___svfprintf_internal_r+0x228>
   241c0:	0000c706 	br	244e0 <___svfprintf_internal_r+0x524>
   241c4:	e0800104 	addi	r2,fp,4
   241c8:	b8000726 	beq	r23,zero,241e8 <___svfprintf_internal_r+0x22c>
   241cc:	d8800d15 	stw	r2,52(sp)
   241d0:	e7000017 	ldw	fp,0(fp)
   241d4:	e000080e 	bge	fp,zero,241f8 <___svfprintf_internal_r+0x23c>
   241d8:	0739c83a 	sub	fp,zero,fp
   241dc:	02000044 	movi	r8,1
   241e0:	00000606 	br	241fc <___svfprintf_internal_r+0x240>
   241e4:	05400404 	movi	r21,16
   241e8:	e0c00104 	addi	r3,fp,4
   241ec:	d8c00d15 	stw	r3,52(sp)
   241f0:	e7000017 	ldw	fp,0(fp)
   241f4:	002f883a 	mov	r23,zero
   241f8:	0011883a 	mov	r8,zero
   241fc:	002d883a 	mov	r22,zero
   24200:	dd87883a 	add	r3,sp,r22
   24204:	e0001a26 	beq	fp,zero,24270 <___svfprintf_internal_r+0x2b4>
   24208:	e009883a 	mov	r4,fp
   2420c:	a80b883a 	mov	r5,r21
   24210:	d8c01115 	stw	r3,68(sp)
   24214:	da001215 	stw	r8,72(sp)
   24218:	00252bc0 	call	252bc <__udivsi3>
   2421c:	a809883a 	mov	r4,r21
   24220:	100b883a 	mov	r5,r2
   24224:	d8801015 	stw	r2,64(sp)
   24228:	0022d000 	call	22d00 <__mulsi3>
   2422c:	e085c83a 	sub	r2,fp,r2
   24230:	01000244 	movi	r4,9
   24234:	d8c01117 	ldw	r3,68(sp)
   24238:	d9801017 	ldw	r6,64(sp)
   2423c:	da001217 	ldw	r8,72(sp)
   24240:	20800216 	blt	r4,r2,2424c <___svfprintf_internal_r+0x290>
   24244:	17000c04 	addi	fp,r2,48
   24248:	00000506 	br	24260 <___svfprintf_internal_r+0x2a4>
   2424c:	d9400e17 	ldw	r5,56(sp)
   24250:	28000226 	beq	r5,zero,2425c <___svfprintf_internal_r+0x2a0>
   24254:	17000dc4 	addi	fp,r2,55
   24258:	00000106 	br	24260 <___svfprintf_internal_r+0x2a4>
   2425c:	170015c4 	addi	fp,r2,87
   24260:	1f000005 	stb	fp,0(r3)
   24264:	b5800044 	addi	r22,r22,1
   24268:	3039883a 	mov	fp,r6
   2426c:	003fe406 	br	24200 <__alt_data_end+0xf4024200>
   24270:	1ec5c83a 	sub	r2,r3,sp
   24274:	d8800a15 	stw	r2,40(sp)
   24278:	9885c83a 	sub	r2,r19,r2
   2427c:	1839883a 	mov	fp,r3
   24280:	00800e0e 	bge	zero,r2,242bc <___svfprintf_internal_r+0x300>
   24284:	182d883a 	mov	r22,r3
   24288:	1885883a 	add	r2,r3,r2
   2428c:	01000c04 	movi	r4,48
   24290:	d9400917 	ldw	r5,36(sp)
   24294:	b007883a 	mov	r3,r22
   24298:	b140052e 	bgeu	r22,r5,242b0 <___svfprintf_internal_r+0x2f4>
   2429c:	b5800044 	addi	r22,r22,1
   242a0:	19000005 	stb	r4,0(r3)
   242a4:	b039883a 	mov	fp,r22
   242a8:	b0bff91e 	bne	r22,r2,24290 <__alt_data_end+0xf4024290>
   242ac:	00000106 	br	242b4 <___svfprintf_internal_r+0x2f8>
   242b0:	b039883a 	mov	fp,r22
   242b4:	b6edc83a 	sub	r22,r22,sp
   242b8:	dd800a15 	stw	r22,40(sp)
   242bc:	d8800a17 	ldw	r2,40(sp)
   242c0:	1207883a 	add	r3,r2,r8
   242c4:	90edc83a 	sub	r22,r18,r3
   242c8:	d8c00b17 	ldw	r3,44(sp)
   242cc:	18001726 	beq	r3,zero,2432c <___svfprintf_internal_r+0x370>
   242d0:	40000a26 	beq	r8,zero,242fc <___svfprintf_internal_r+0x340>
   242d4:	00800b44 	movi	r2,45
   242d8:	d8800805 	stb	r2,32(sp)
   242dc:	88800117 	ldw	r2,4(r17)
   242e0:	a009883a 	mov	r4,r20
   242e4:	880b883a 	mov	r5,r17
   242e8:	d9800804 	addi	r6,sp,32
   242ec:	01c00044 	movi	r7,1
   242f0:	103ee83a 	callr	r2
   242f4:	10004d1e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   242f8:	84000044 	addi	r16,r16,1
   242fc:	0580070e 	bge	zero,r22,2431c <___svfprintf_internal_r+0x360>
   24300:	a009883a 	mov	r4,r20
   24304:	880b883a 	mov	r5,r17
   24308:	01800c04 	movi	r6,48
   2430c:	b00f883a 	mov	r7,r22
   24310:	0023f500 	call	23f50 <print_repeat>
   24314:	1000451e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   24318:	85a1883a 	add	r16,r16,r22
   2431c:	d9000a17 	ldw	r4,40(sp)
   24320:	e007883a 	mov	r3,fp
   24324:	272dc83a 	sub	r22,r4,fp
   24328:	00002206 	br	243b4 <___svfprintf_internal_r+0x3f8>
   2432c:	0580090e 	bge	zero,r22,24354 <___svfprintf_internal_r+0x398>
   24330:	a009883a 	mov	r4,r20
   24334:	880b883a 	mov	r5,r17
   24338:	01800804 	movi	r6,32
   2433c:	b00f883a 	mov	r7,r22
   24340:	da001215 	stw	r8,72(sp)
   24344:	0023f500 	call	23f50 <print_repeat>
   24348:	da001217 	ldw	r8,72(sp)
   2434c:	1000371e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   24350:	85a1883a 	add	r16,r16,r22
   24354:	403ff126 	beq	r8,zero,2431c <__alt_data_end+0xf402431c>
   24358:	00800b44 	movi	r2,45
   2435c:	d8800805 	stb	r2,32(sp)
   24360:	88800117 	ldw	r2,4(r17)
   24364:	a009883a 	mov	r4,r20
   24368:	880b883a 	mov	r5,r17
   2436c:	d9800804 	addi	r6,sp,32
   24370:	01c00044 	movi	r7,1
   24374:	103ee83a 	callr	r2
   24378:	10002c1e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   2437c:	84000044 	addi	r16,r16,1
   24380:	003fe606 	br	2431c <__alt_data_end+0xf402431c>
   24384:	18ffffc4 	addi	r3,r3,-1
   24388:	18800003 	ldbu	r2,0(r3)
   2438c:	a009883a 	mov	r4,r20
   24390:	d8c01115 	stw	r3,68(sp)
   24394:	d8800805 	stb	r2,32(sp)
   24398:	88800117 	ldw	r2,4(r17)
   2439c:	880b883a 	mov	r5,r17
   243a0:	d9800804 	addi	r6,sp,32
   243a4:	01c00044 	movi	r7,1
   243a8:	103ee83a 	callr	r2
   243ac:	d8c01117 	ldw	r3,68(sp)
   243b0:	10001e1e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   243b4:	80c5c83a 	sub	r2,r16,r3
   243b8:	1d89883a 	add	r4,r3,r22
   243bc:	e085883a 	add	r2,fp,r2
   243c0:	013ff016 	blt	zero,r4,24384 <__alt_data_end+0xf4024384>
   243c4:	1021883a 	mov	r16,r2
   243c8:	df000d17 	ldw	fp,52(sp)
   243cc:	00004406 	br	244e0 <___svfprintf_internal_r+0x524>
   243d0:	01000044 	movi	r4,1
   243d4:	2480080e 	bge	r4,r18,243f8 <___svfprintf_internal_r+0x43c>
   243d8:	95bfffc4 	addi	r22,r18,-1
   243dc:	a009883a 	mov	r4,r20
   243e0:	880b883a 	mov	r5,r17
   243e4:	01800804 	movi	r6,32
   243e8:	b00f883a 	mov	r7,r22
   243ec:	0023f500 	call	23f50 <print_repeat>
   243f0:	10000e1e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   243f4:	85a1883a 	add	r16,r16,r22
   243f8:	e0800017 	ldw	r2,0(fp)
   243fc:	a009883a 	mov	r4,r20
   24400:	880b883a 	mov	r5,r17
   24404:	d8800005 	stb	r2,0(sp)
   24408:	88800117 	ldw	r2,4(r17)
   2440c:	d80d883a 	mov	r6,sp
   24410:	01c00044 	movi	r7,1
   24414:	e5800104 	addi	r22,fp,4
   24418:	103ee83a 	callr	r2
   2441c:	1000031e 	bne	r2,zero,2442c <___svfprintf_internal_r+0x470>
   24420:	84000044 	addi	r16,r16,1
   24424:	b039883a 	mov	fp,r22
   24428:	00002d06 	br	244e0 <___svfprintf_internal_r+0x524>
   2442c:	00bfffc4 	movi	r2,-1
   24430:	00003106 	br	244f8 <___svfprintf_internal_r+0x53c>
   24434:	e5800017 	ldw	r22,0(fp)
   24438:	e0c00104 	addi	r3,fp,4
   2443c:	d8c00a15 	stw	r3,40(sp)
   24440:	b009883a 	mov	r4,r22
   24444:	0023ee00 	call	23ee0 <strlen>
   24448:	9091c83a 	sub	r8,r18,r2
   2444c:	1039883a 	mov	fp,r2
   24450:	0200090e 	bge	zero,r8,24478 <___svfprintf_internal_r+0x4bc>
   24454:	400f883a 	mov	r7,r8
   24458:	a009883a 	mov	r4,r20
   2445c:	880b883a 	mov	r5,r17
   24460:	01800804 	movi	r6,32
   24464:	da001215 	stw	r8,72(sp)
   24468:	0023f500 	call	23f50 <print_repeat>
   2446c:	da001217 	ldw	r8,72(sp)
   24470:	103fee1e 	bne	r2,zero,2442c <__alt_data_end+0xf402442c>
   24474:	8221883a 	add	r16,r16,r8
   24478:	88800117 	ldw	r2,4(r17)
   2447c:	a009883a 	mov	r4,r20
   24480:	880b883a 	mov	r5,r17
   24484:	b00d883a 	mov	r6,r22
   24488:	e00f883a 	mov	r7,fp
   2448c:	103ee83a 	callr	r2
   24490:	103fe61e 	bne	r2,zero,2442c <__alt_data_end+0xf402442c>
   24494:	8721883a 	add	r16,r16,fp
   24498:	df000a17 	ldw	fp,40(sp)
   2449c:	00001006 	br	244e0 <___svfprintf_internal_r+0x524>
   244a0:	05c00044 	movi	r23,1
   244a4:	04ffffc4 	movi	r19,-1
   244a8:	d8000e15 	stw	zero,56(sp)
   244ac:	05400284 	movi	r21,10
   244b0:	9825883a 	mov	r18,r19
   244b4:	d8000c15 	stw	zero,48(sp)
   244b8:	d8000b15 	stw	zero,44(sp)
   244bc:	b82d883a 	mov	r22,r23
   244c0:	00000806 	br	244e4 <___svfprintf_internal_r+0x528>
   244c4:	dd800b15 	stw	r22,44(sp)
   244c8:	05800084 	movi	r22,2
   244cc:	00000506 	br	244e4 <___svfprintf_internal_r+0x528>
   244d0:	00c00044 	movi	r3,1
   244d4:	d8c00c15 	stw	r3,48(sp)
   244d8:	058000c4 	movi	r22,3
   244dc:	00000106 	br	244e4 <___svfprintf_internal_r+0x528>
   244e0:	002d883a 	mov	r22,zero
   244e4:	d8c00f17 	ldw	r3,60(sp)
   244e8:	18c00044 	addi	r3,r3,1
   244ec:	d8c00f15 	stw	r3,60(sp)
   244f0:	003ecc06 	br	24024 <__alt_data_end+0xf4024024>
   244f4:	8005883a 	mov	r2,r16
   244f8:	dfc01c17 	ldw	ra,112(sp)
   244fc:	df001b17 	ldw	fp,108(sp)
   24500:	ddc01a17 	ldw	r23,104(sp)
   24504:	dd801917 	ldw	r22,100(sp)
   24508:	dd401817 	ldw	r21,96(sp)
   2450c:	dd001717 	ldw	r20,92(sp)
   24510:	dcc01617 	ldw	r19,88(sp)
   24514:	dc801517 	ldw	r18,84(sp)
   24518:	dc401417 	ldw	r17,80(sp)
   2451c:	dc001317 	ldw	r16,76(sp)
   24520:	dec01d04 	addi	sp,sp,116
   24524:	f800283a 	ret

00024528 <__vfprintf_internal_unused>:
   24528:	2007883a 	mov	r3,r4
   2452c:	01020034 	movhi	r4,2048
   24530:	21033204 	addi	r4,r4,3272
   24534:	21000017 	ldw	r4,0(r4)
   24538:	2805883a 	mov	r2,r5
   2453c:	300f883a 	mov	r7,r6
   24540:	180b883a 	mov	r5,r3
   24544:	100d883a 	mov	r6,r2
   24548:	0023fbc1 	jmpi	23fbc <___svfprintf_internal_r>

0002454c <print_repeat>:
   2454c:	defffb04 	addi	sp,sp,-20
   24550:	dc800315 	stw	r18,12(sp)
   24554:	dc400215 	stw	r17,8(sp)
   24558:	dc000115 	stw	r16,4(sp)
   2455c:	dfc00415 	stw	ra,16(sp)
   24560:	2025883a 	mov	r18,r4
   24564:	2823883a 	mov	r17,r5
   24568:	d9800005 	stb	r6,0(sp)
   2456c:	3821883a 	mov	r16,r7
   24570:	04000a0e 	bge	zero,r16,2459c <print_repeat+0x50>
   24574:	88800117 	ldw	r2,4(r17)
   24578:	9009883a 	mov	r4,r18
   2457c:	880b883a 	mov	r5,r17
   24580:	d80d883a 	mov	r6,sp
   24584:	01c00044 	movi	r7,1
   24588:	103ee83a 	callr	r2
   2458c:	843fffc4 	addi	r16,r16,-1
   24590:	103ff726 	beq	r2,zero,24570 <__alt_data_end+0xf4024570>
   24594:	00bfffc4 	movi	r2,-1
   24598:	00000106 	br	245a0 <print_repeat+0x54>
   2459c:	0005883a 	mov	r2,zero
   245a0:	dfc00417 	ldw	ra,16(sp)
   245a4:	dc800317 	ldw	r18,12(sp)
   245a8:	dc400217 	ldw	r17,8(sp)
   245ac:	dc000117 	ldw	r16,4(sp)
   245b0:	dec00504 	addi	sp,sp,20
   245b4:	f800283a 	ret

000245b8 <___vfprintf_internal_r>:
   245b8:	deffe304 	addi	sp,sp,-116
   245bc:	d8c00804 	addi	r3,sp,32
   245c0:	df001b15 	stw	fp,108(sp)
   245c4:	ddc01a15 	stw	r23,104(sp)
   245c8:	dd801915 	stw	r22,100(sp)
   245cc:	dd401815 	stw	r21,96(sp)
   245d0:	dd001715 	stw	r20,92(sp)
   245d4:	dcc01615 	stw	r19,88(sp)
   245d8:	dc801515 	stw	r18,84(sp)
   245dc:	dc401415 	stw	r17,80(sp)
   245e0:	dc001315 	stw	r16,76(sp)
   245e4:	dfc01c15 	stw	ra,112(sp)
   245e8:	2029883a 	mov	r20,r4
   245ec:	2823883a 	mov	r17,r5
   245f0:	3839883a 	mov	fp,r7
   245f4:	d9800f15 	stw	r6,60(sp)
   245f8:	0021883a 	mov	r16,zero
   245fc:	d8000e15 	stw	zero,56(sp)
   24600:	002f883a 	mov	r23,zero
   24604:	002b883a 	mov	r21,zero
   24608:	0027883a 	mov	r19,zero
   2460c:	0025883a 	mov	r18,zero
   24610:	d8000c15 	stw	zero,48(sp)
   24614:	d8000b15 	stw	zero,44(sp)
   24618:	002d883a 	mov	r22,zero
   2461c:	d8c00915 	stw	r3,36(sp)
   24620:	d8c00f17 	ldw	r3,60(sp)
   24624:	19000003 	ldbu	r4,0(r3)
   24628:	20803fcc 	andi	r2,r4,255
   2462c:	1080201c 	xori	r2,r2,128
   24630:	10bfe004 	addi	r2,r2,-128
   24634:	10012e26 	beq	r2,zero,24af0 <___vfprintf_internal_r+0x538>
   24638:	01400044 	movi	r5,1
   2463c:	b1401426 	beq	r22,r5,24690 <___vfprintf_internal_r+0xd8>
   24640:	2d800216 	blt	r5,r22,2464c <___vfprintf_internal_r+0x94>
   24644:	b0000626 	beq	r22,zero,24660 <___vfprintf_internal_r+0xa8>
   24648:	00012506 	br	24ae0 <___vfprintf_internal_r+0x528>
   2464c:	01400084 	movi	r5,2
   24650:	b1401d26 	beq	r22,r5,246c8 <___vfprintf_internal_r+0x110>
   24654:	014000c4 	movi	r5,3
   24658:	b1402b26 	beq	r22,r5,24708 <___vfprintf_internal_r+0x150>
   2465c:	00012006 	br	24ae0 <___vfprintf_internal_r+0x528>
   24660:	01400944 	movi	r5,37
   24664:	11410d26 	beq	r2,r5,24a9c <___vfprintf_internal_r+0x4e4>
   24668:	88800117 	ldw	r2,4(r17)
   2466c:	d9000005 	stb	r4,0(sp)
   24670:	880b883a 	mov	r5,r17
   24674:	a009883a 	mov	r4,r20
   24678:	d80d883a 	mov	r6,sp
   2467c:	01c00044 	movi	r7,1
   24680:	103ee83a 	callr	r2
   24684:	1000e81e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   24688:	84000044 	addi	r16,r16,1
   2468c:	00011406 	br	24ae0 <___vfprintf_internal_r+0x528>
   24690:	01400c04 	movi	r5,48
   24694:	11410a26 	beq	r2,r5,24ac0 <___vfprintf_internal_r+0x508>
   24698:	01400944 	movi	r5,37
   2469c:	11400a1e 	bne	r2,r5,246c8 <___vfprintf_internal_r+0x110>
   246a0:	d8800005 	stb	r2,0(sp)
   246a4:	88800117 	ldw	r2,4(r17)
   246a8:	a009883a 	mov	r4,r20
   246ac:	880b883a 	mov	r5,r17
   246b0:	d80d883a 	mov	r6,sp
   246b4:	b00f883a 	mov	r7,r22
   246b8:	103ee83a 	callr	r2
   246bc:	1000da1e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   246c0:	84000044 	addi	r16,r16,1
   246c4:	00010506 	br	24adc <___vfprintf_internal_r+0x524>
   246c8:	25bff404 	addi	r22,r4,-48
   246cc:	b5803fcc 	andi	r22,r22,255
   246d0:	00c00244 	movi	r3,9
   246d4:	1d800936 	bltu	r3,r22,246fc <___vfprintf_internal_r+0x144>
   246d8:	00bfffc4 	movi	r2,-1
   246dc:	90800426 	beq	r18,r2,246f0 <___vfprintf_internal_r+0x138>
   246e0:	9009883a 	mov	r4,r18
   246e4:	01400284 	movi	r5,10
   246e8:	0022d000 	call	22d00 <__mulsi3>
   246ec:	00000106 	br	246f4 <___vfprintf_internal_r+0x13c>
   246f0:	0005883a 	mov	r2,zero
   246f4:	15a5883a 	add	r18,r2,r22
   246f8:	0000f206 	br	24ac4 <___vfprintf_internal_r+0x50c>
   246fc:	01400b84 	movi	r5,46
   24700:	1140f426 	beq	r2,r5,24ad4 <___vfprintf_internal_r+0x51c>
   24704:	05800084 	movi	r22,2
   24708:	213ff404 	addi	r4,r4,-48
   2470c:	20c03fcc 	andi	r3,r4,255
   24710:	01000244 	movi	r4,9
   24714:	20c00b36 	bltu	r4,r3,24744 <___vfprintf_internal_r+0x18c>
   24718:	00bfffc4 	movi	r2,-1
   2471c:	98800626 	beq	r19,r2,24738 <___vfprintf_internal_r+0x180>
   24720:	9809883a 	mov	r4,r19
   24724:	01400284 	movi	r5,10
   24728:	d8c01115 	stw	r3,68(sp)
   2472c:	0022d000 	call	22d00 <__mulsi3>
   24730:	d8c01117 	ldw	r3,68(sp)
   24734:	00000106 	br	2473c <___vfprintf_internal_r+0x184>
   24738:	0005883a 	mov	r2,zero
   2473c:	10e7883a 	add	r19,r2,r3
   24740:	0000e706 	br	24ae0 <___vfprintf_internal_r+0x528>
   24744:	01401b04 	movi	r5,108
   24748:	1140e026 	beq	r2,r5,24acc <___vfprintf_internal_r+0x514>
   2474c:	013fffc4 	movi	r4,-1
   24750:	99000226 	beq	r19,r4,2475c <___vfprintf_internal_r+0x1a4>
   24754:	d8000b15 	stw	zero,44(sp)
   24758:	00000106 	br	24760 <___vfprintf_internal_r+0x1a8>
   2475c:	04c00044 	movi	r19,1
   24760:	01001a44 	movi	r4,105
   24764:	11001626 	beq	r2,r4,247c0 <___vfprintf_internal_r+0x208>
   24768:	20800916 	blt	r4,r2,24790 <___vfprintf_internal_r+0x1d8>
   2476c:	010018c4 	movi	r4,99
   24770:	11009626 	beq	r2,r4,249cc <___vfprintf_internal_r+0x414>
   24774:	01001904 	movi	r4,100
   24778:	11001126 	beq	r2,r4,247c0 <___vfprintf_internal_r+0x208>
   2477c:	01001604 	movi	r4,88
   24780:	1100d61e 	bne	r2,r4,24adc <___vfprintf_internal_r+0x524>
   24784:	00c00044 	movi	r3,1
   24788:	d8c00e15 	stw	r3,56(sp)
   2478c:	00001406 	br	247e0 <___vfprintf_internal_r+0x228>
   24790:	01001cc4 	movi	r4,115
   24794:	1100a626 	beq	r2,r4,24a30 <___vfprintf_internal_r+0x478>
   24798:	20800416 	blt	r4,r2,247ac <___vfprintf_internal_r+0x1f4>
   2479c:	01001bc4 	movi	r4,111
   247a0:	1100ce1e 	bne	r2,r4,24adc <___vfprintf_internal_r+0x524>
   247a4:	05400204 	movi	r21,8
   247a8:	00000e06 	br	247e4 <___vfprintf_internal_r+0x22c>
   247ac:	01001d44 	movi	r4,117
   247b0:	11000c26 	beq	r2,r4,247e4 <___vfprintf_internal_r+0x22c>
   247b4:	01001e04 	movi	r4,120
   247b8:	11000926 	beq	r2,r4,247e0 <___vfprintf_internal_r+0x228>
   247bc:	0000c706 	br	24adc <___vfprintf_internal_r+0x524>
   247c0:	e0800104 	addi	r2,fp,4
   247c4:	b8000726 	beq	r23,zero,247e4 <___vfprintf_internal_r+0x22c>
   247c8:	d8800d15 	stw	r2,52(sp)
   247cc:	e7000017 	ldw	fp,0(fp)
   247d0:	e000080e 	bge	fp,zero,247f4 <___vfprintf_internal_r+0x23c>
   247d4:	0739c83a 	sub	fp,zero,fp
   247d8:	02000044 	movi	r8,1
   247dc:	00000606 	br	247f8 <___vfprintf_internal_r+0x240>
   247e0:	05400404 	movi	r21,16
   247e4:	e0c00104 	addi	r3,fp,4
   247e8:	d8c00d15 	stw	r3,52(sp)
   247ec:	e7000017 	ldw	fp,0(fp)
   247f0:	002f883a 	mov	r23,zero
   247f4:	0011883a 	mov	r8,zero
   247f8:	002d883a 	mov	r22,zero
   247fc:	dd87883a 	add	r3,sp,r22
   24800:	e0001a26 	beq	fp,zero,2486c <___vfprintf_internal_r+0x2b4>
   24804:	e009883a 	mov	r4,fp
   24808:	a80b883a 	mov	r5,r21
   2480c:	d8c01115 	stw	r3,68(sp)
   24810:	da001215 	stw	r8,72(sp)
   24814:	00252bc0 	call	252bc <__udivsi3>
   24818:	a809883a 	mov	r4,r21
   2481c:	100b883a 	mov	r5,r2
   24820:	d8801015 	stw	r2,64(sp)
   24824:	0022d000 	call	22d00 <__mulsi3>
   24828:	e085c83a 	sub	r2,fp,r2
   2482c:	01000244 	movi	r4,9
   24830:	d8c01117 	ldw	r3,68(sp)
   24834:	d9801017 	ldw	r6,64(sp)
   24838:	da001217 	ldw	r8,72(sp)
   2483c:	20800216 	blt	r4,r2,24848 <___vfprintf_internal_r+0x290>
   24840:	17000c04 	addi	fp,r2,48
   24844:	00000506 	br	2485c <___vfprintf_internal_r+0x2a4>
   24848:	d9400e17 	ldw	r5,56(sp)
   2484c:	28000226 	beq	r5,zero,24858 <___vfprintf_internal_r+0x2a0>
   24850:	17000dc4 	addi	fp,r2,55
   24854:	00000106 	br	2485c <___vfprintf_internal_r+0x2a4>
   24858:	170015c4 	addi	fp,r2,87
   2485c:	1f000005 	stb	fp,0(r3)
   24860:	b5800044 	addi	r22,r22,1
   24864:	3039883a 	mov	fp,r6
   24868:	003fe406 	br	247fc <__alt_data_end+0xf40247fc>
   2486c:	1ec5c83a 	sub	r2,r3,sp
   24870:	d8800a15 	stw	r2,40(sp)
   24874:	9885c83a 	sub	r2,r19,r2
   24878:	1839883a 	mov	fp,r3
   2487c:	00800e0e 	bge	zero,r2,248b8 <___vfprintf_internal_r+0x300>
   24880:	182d883a 	mov	r22,r3
   24884:	1885883a 	add	r2,r3,r2
   24888:	01000c04 	movi	r4,48
   2488c:	d9400917 	ldw	r5,36(sp)
   24890:	b007883a 	mov	r3,r22
   24894:	b140052e 	bgeu	r22,r5,248ac <___vfprintf_internal_r+0x2f4>
   24898:	b5800044 	addi	r22,r22,1
   2489c:	19000005 	stb	r4,0(r3)
   248a0:	b039883a 	mov	fp,r22
   248a4:	b0bff91e 	bne	r22,r2,2488c <__alt_data_end+0xf402488c>
   248a8:	00000106 	br	248b0 <___vfprintf_internal_r+0x2f8>
   248ac:	b039883a 	mov	fp,r22
   248b0:	b6edc83a 	sub	r22,r22,sp
   248b4:	dd800a15 	stw	r22,40(sp)
   248b8:	d8800a17 	ldw	r2,40(sp)
   248bc:	1207883a 	add	r3,r2,r8
   248c0:	90edc83a 	sub	r22,r18,r3
   248c4:	d8c00b17 	ldw	r3,44(sp)
   248c8:	18001726 	beq	r3,zero,24928 <___vfprintf_internal_r+0x370>
   248cc:	40000a26 	beq	r8,zero,248f8 <___vfprintf_internal_r+0x340>
   248d0:	00800b44 	movi	r2,45
   248d4:	d8800805 	stb	r2,32(sp)
   248d8:	88800117 	ldw	r2,4(r17)
   248dc:	a009883a 	mov	r4,r20
   248e0:	880b883a 	mov	r5,r17
   248e4:	d9800804 	addi	r6,sp,32
   248e8:	01c00044 	movi	r7,1
   248ec:	103ee83a 	callr	r2
   248f0:	10004d1e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   248f4:	84000044 	addi	r16,r16,1
   248f8:	0580070e 	bge	zero,r22,24918 <___vfprintf_internal_r+0x360>
   248fc:	a009883a 	mov	r4,r20
   24900:	880b883a 	mov	r5,r17
   24904:	01800c04 	movi	r6,48
   24908:	b00f883a 	mov	r7,r22
   2490c:	002454c0 	call	2454c <print_repeat>
   24910:	1000451e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   24914:	85a1883a 	add	r16,r16,r22
   24918:	d9000a17 	ldw	r4,40(sp)
   2491c:	e007883a 	mov	r3,fp
   24920:	272dc83a 	sub	r22,r4,fp
   24924:	00002206 	br	249b0 <___vfprintf_internal_r+0x3f8>
   24928:	0580090e 	bge	zero,r22,24950 <___vfprintf_internal_r+0x398>
   2492c:	a009883a 	mov	r4,r20
   24930:	880b883a 	mov	r5,r17
   24934:	01800804 	movi	r6,32
   24938:	b00f883a 	mov	r7,r22
   2493c:	da001215 	stw	r8,72(sp)
   24940:	002454c0 	call	2454c <print_repeat>
   24944:	da001217 	ldw	r8,72(sp)
   24948:	1000371e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   2494c:	85a1883a 	add	r16,r16,r22
   24950:	403ff126 	beq	r8,zero,24918 <__alt_data_end+0xf4024918>
   24954:	00800b44 	movi	r2,45
   24958:	d8800805 	stb	r2,32(sp)
   2495c:	88800117 	ldw	r2,4(r17)
   24960:	a009883a 	mov	r4,r20
   24964:	880b883a 	mov	r5,r17
   24968:	d9800804 	addi	r6,sp,32
   2496c:	01c00044 	movi	r7,1
   24970:	103ee83a 	callr	r2
   24974:	10002c1e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   24978:	84000044 	addi	r16,r16,1
   2497c:	003fe606 	br	24918 <__alt_data_end+0xf4024918>
   24980:	18ffffc4 	addi	r3,r3,-1
   24984:	18800003 	ldbu	r2,0(r3)
   24988:	a009883a 	mov	r4,r20
   2498c:	d8c01115 	stw	r3,68(sp)
   24990:	d8800805 	stb	r2,32(sp)
   24994:	88800117 	ldw	r2,4(r17)
   24998:	880b883a 	mov	r5,r17
   2499c:	d9800804 	addi	r6,sp,32
   249a0:	01c00044 	movi	r7,1
   249a4:	103ee83a 	callr	r2
   249a8:	d8c01117 	ldw	r3,68(sp)
   249ac:	10001e1e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   249b0:	80c5c83a 	sub	r2,r16,r3
   249b4:	1d89883a 	add	r4,r3,r22
   249b8:	e085883a 	add	r2,fp,r2
   249bc:	013ff016 	blt	zero,r4,24980 <__alt_data_end+0xf4024980>
   249c0:	1021883a 	mov	r16,r2
   249c4:	df000d17 	ldw	fp,52(sp)
   249c8:	00004406 	br	24adc <___vfprintf_internal_r+0x524>
   249cc:	01000044 	movi	r4,1
   249d0:	2480080e 	bge	r4,r18,249f4 <___vfprintf_internal_r+0x43c>
   249d4:	95bfffc4 	addi	r22,r18,-1
   249d8:	a009883a 	mov	r4,r20
   249dc:	880b883a 	mov	r5,r17
   249e0:	01800804 	movi	r6,32
   249e4:	b00f883a 	mov	r7,r22
   249e8:	002454c0 	call	2454c <print_repeat>
   249ec:	10000e1e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   249f0:	85a1883a 	add	r16,r16,r22
   249f4:	e0800017 	ldw	r2,0(fp)
   249f8:	a009883a 	mov	r4,r20
   249fc:	880b883a 	mov	r5,r17
   24a00:	d8800005 	stb	r2,0(sp)
   24a04:	88800117 	ldw	r2,4(r17)
   24a08:	d80d883a 	mov	r6,sp
   24a0c:	01c00044 	movi	r7,1
   24a10:	e5800104 	addi	r22,fp,4
   24a14:	103ee83a 	callr	r2
   24a18:	1000031e 	bne	r2,zero,24a28 <___vfprintf_internal_r+0x470>
   24a1c:	84000044 	addi	r16,r16,1
   24a20:	b039883a 	mov	fp,r22
   24a24:	00002d06 	br	24adc <___vfprintf_internal_r+0x524>
   24a28:	00bfffc4 	movi	r2,-1
   24a2c:	00003106 	br	24af4 <___vfprintf_internal_r+0x53c>
   24a30:	e5800017 	ldw	r22,0(fp)
   24a34:	e0c00104 	addi	r3,fp,4
   24a38:	d8c00a15 	stw	r3,40(sp)
   24a3c:	b009883a 	mov	r4,r22
   24a40:	0023ee00 	call	23ee0 <strlen>
   24a44:	9091c83a 	sub	r8,r18,r2
   24a48:	1039883a 	mov	fp,r2
   24a4c:	0200090e 	bge	zero,r8,24a74 <___vfprintf_internal_r+0x4bc>
   24a50:	400f883a 	mov	r7,r8
   24a54:	a009883a 	mov	r4,r20
   24a58:	880b883a 	mov	r5,r17
   24a5c:	01800804 	movi	r6,32
   24a60:	da001215 	stw	r8,72(sp)
   24a64:	002454c0 	call	2454c <print_repeat>
   24a68:	da001217 	ldw	r8,72(sp)
   24a6c:	103fee1e 	bne	r2,zero,24a28 <__alt_data_end+0xf4024a28>
   24a70:	8221883a 	add	r16,r16,r8
   24a74:	88800117 	ldw	r2,4(r17)
   24a78:	a009883a 	mov	r4,r20
   24a7c:	880b883a 	mov	r5,r17
   24a80:	b00d883a 	mov	r6,r22
   24a84:	e00f883a 	mov	r7,fp
   24a88:	103ee83a 	callr	r2
   24a8c:	103fe61e 	bne	r2,zero,24a28 <__alt_data_end+0xf4024a28>
   24a90:	8721883a 	add	r16,r16,fp
   24a94:	df000a17 	ldw	fp,40(sp)
   24a98:	00001006 	br	24adc <___vfprintf_internal_r+0x524>
   24a9c:	05c00044 	movi	r23,1
   24aa0:	04ffffc4 	movi	r19,-1
   24aa4:	d8000e15 	stw	zero,56(sp)
   24aa8:	05400284 	movi	r21,10
   24aac:	9825883a 	mov	r18,r19
   24ab0:	d8000c15 	stw	zero,48(sp)
   24ab4:	d8000b15 	stw	zero,44(sp)
   24ab8:	b82d883a 	mov	r22,r23
   24abc:	00000806 	br	24ae0 <___vfprintf_internal_r+0x528>
   24ac0:	dd800b15 	stw	r22,44(sp)
   24ac4:	05800084 	movi	r22,2
   24ac8:	00000506 	br	24ae0 <___vfprintf_internal_r+0x528>
   24acc:	00c00044 	movi	r3,1
   24ad0:	d8c00c15 	stw	r3,48(sp)
   24ad4:	058000c4 	movi	r22,3
   24ad8:	00000106 	br	24ae0 <___vfprintf_internal_r+0x528>
   24adc:	002d883a 	mov	r22,zero
   24ae0:	d8c00f17 	ldw	r3,60(sp)
   24ae4:	18c00044 	addi	r3,r3,1
   24ae8:	d8c00f15 	stw	r3,60(sp)
   24aec:	003ecc06 	br	24620 <__alt_data_end+0xf4024620>
   24af0:	8005883a 	mov	r2,r16
   24af4:	dfc01c17 	ldw	ra,112(sp)
   24af8:	df001b17 	ldw	fp,108(sp)
   24afc:	ddc01a17 	ldw	r23,104(sp)
   24b00:	dd801917 	ldw	r22,100(sp)
   24b04:	dd401817 	ldw	r21,96(sp)
   24b08:	dd001717 	ldw	r20,92(sp)
   24b0c:	dcc01617 	ldw	r19,88(sp)
   24b10:	dc801517 	ldw	r18,84(sp)
   24b14:	dc401417 	ldw	r17,80(sp)
   24b18:	dc001317 	ldw	r16,76(sp)
   24b1c:	dec01d04 	addi	sp,sp,116
   24b20:	f800283a 	ret

00024b24 <__vfprintf_internal>:
   24b24:	2007883a 	mov	r3,r4
   24b28:	01020034 	movhi	r4,2048
   24b2c:	21033204 	addi	r4,r4,3272
   24b30:	21000017 	ldw	r4,0(r4)
   24b34:	2805883a 	mov	r2,r5
   24b38:	300f883a 	mov	r7,r6
   24b3c:	180b883a 	mov	r5,r3
   24b40:	100d883a 	mov	r6,r2
   24b44:	00245b81 	jmpi	245b8 <___vfprintf_internal_r>

00024b48 <_malloc_trim_r>:
   24b48:	defffb04 	addi	sp,sp,-20
   24b4c:	dcc00315 	stw	r19,12(sp)
   24b50:	04c20034 	movhi	r19,2048
   24b54:	dc800215 	stw	r18,8(sp)
   24b58:	dc400115 	stw	r17,4(sp)
   24b5c:	dc000015 	stw	r16,0(sp)
   24b60:	dfc00415 	stw	ra,16(sp)
   24b64:	2821883a 	mov	r16,r5
   24b68:	2025883a 	mov	r18,r4
   24b6c:	9cc14d04 	addi	r19,r19,1332
   24b70:	00255fc0 	call	255fc <__malloc_lock>
   24b74:	98800217 	ldw	r2,8(r19)
   24b78:	14400117 	ldw	r17,4(r2)
   24b7c:	00bfff04 	movi	r2,-4
   24b80:	88a2703a 	and	r17,r17,r2
   24b84:	8c21c83a 	sub	r16,r17,r16
   24b88:	84001bc4 	addi	r16,r16,111
   24b8c:	8020d1fa 	srli	r16,r16,7
   24b90:	00801fc4 	movi	r2,127
   24b94:	843fffc4 	addi	r16,r16,-1
   24b98:	802091fa 	slli	r16,r16,7
   24b9c:	14000416 	blt	r2,r16,24bb0 <_malloc_trim_r+0x68>
   24ba0:	9009883a 	mov	r4,r18
   24ba4:	002561c0 	call	2561c <__malloc_unlock>
   24ba8:	0005883a 	mov	r2,zero
   24bac:	00002806 	br	24c50 <_malloc_trim_r+0x108>
   24bb0:	9009883a 	mov	r4,r18
   24bb4:	000b883a 	mov	r5,zero
   24bb8:	0023a680 	call	23a68 <_sbrk_r>
   24bbc:	98c00217 	ldw	r3,8(r19)
   24bc0:	1c47883a 	add	r3,r3,r17
   24bc4:	10fff61e 	bne	r2,r3,24ba0 <__alt_data_end+0xf4024ba0>
   24bc8:	9009883a 	mov	r4,r18
   24bcc:	040bc83a 	sub	r5,zero,r16
   24bd0:	0023a680 	call	23a68 <_sbrk_r>
   24bd4:	00ffffc4 	movi	r3,-1
   24bd8:	10c0111e 	bne	r2,r3,24c20 <_malloc_trim_r+0xd8>
   24bdc:	9009883a 	mov	r4,r18
   24be0:	000b883a 	mov	r5,zero
   24be4:	0023a680 	call	23a68 <_sbrk_r>
   24be8:	99000217 	ldw	r4,8(r19)
   24bec:	014003c4 	movi	r5,15
   24bf0:	1107c83a 	sub	r3,r2,r4
   24bf4:	28ffea0e 	bge	r5,r3,24ba0 <__alt_data_end+0xf4024ba0>
   24bf8:	01420034 	movhi	r5,2048
   24bfc:	29432f04 	addi	r5,r5,3260
   24c00:	29400017 	ldw	r5,0(r5)
   24c04:	18c00054 	ori	r3,r3,1
   24c08:	20c00115 	stw	r3,4(r4)
   24c0c:	1145c83a 	sub	r2,r2,r5
   24c10:	01420034 	movhi	r5,2048
   24c14:	29458904 	addi	r5,r5,5668
   24c18:	28800015 	stw	r2,0(r5)
   24c1c:	003fe006 	br	24ba0 <__alt_data_end+0xf4024ba0>
   24c20:	98800217 	ldw	r2,8(r19)
   24c24:	8c23c83a 	sub	r17,r17,r16
   24c28:	00c20034 	movhi	r3,2048
   24c2c:	18c58904 	addi	r3,r3,5668
   24c30:	8c400054 	ori	r17,r17,1
   24c34:	14400115 	stw	r17,4(r2)
   24c38:	18800017 	ldw	r2,0(r3)
   24c3c:	9009883a 	mov	r4,r18
   24c40:	1421c83a 	sub	r16,r2,r16
   24c44:	1c000015 	stw	r16,0(r3)
   24c48:	002561c0 	call	2561c <__malloc_unlock>
   24c4c:	00800044 	movi	r2,1
   24c50:	dfc00417 	ldw	ra,16(sp)
   24c54:	dcc00317 	ldw	r19,12(sp)
   24c58:	dc800217 	ldw	r18,8(sp)
   24c5c:	dc400117 	ldw	r17,4(sp)
   24c60:	dc000017 	ldw	r16,0(sp)
   24c64:	dec00504 	addi	sp,sp,20
   24c68:	f800283a 	ret

00024c6c <_free_r>:
   24c6c:	2800a026 	beq	r5,zero,24ef0 <_free_r+0x284>
   24c70:	defffd04 	addi	sp,sp,-12
   24c74:	dc400115 	stw	r17,4(sp)
   24c78:	dc000015 	stw	r16,0(sp)
   24c7c:	2823883a 	mov	r17,r5
   24c80:	2021883a 	mov	r16,r4
   24c84:	dfc00215 	stw	ra,8(sp)
   24c88:	00255fc0 	call	255fc <__malloc_lock>
   24c8c:	8a3fff17 	ldw	r8,-4(r17)
   24c90:	00bfff84 	movi	r2,-2
   24c94:	893ffe04 	addi	r4,r17,-8
   24c98:	4084703a 	and	r2,r8,r2
   24c9c:	208d883a 	add	r6,r4,r2
   24ca0:	31400117 	ldw	r5,4(r6)
   24ca4:	00ffff04 	movi	r3,-4
   24ca8:	28c6703a 	and	r3,r5,r3
   24cac:	01420034 	movhi	r5,2048
   24cb0:	29414d04 	addi	r5,r5,1332
   24cb4:	2a400217 	ldw	r9,8(r5)
   24cb8:	280f883a 	mov	r7,r5
   24cbc:	4140004c 	andi	r5,r8,1
   24cc0:	32401b1e 	bne	r6,r9,24d30 <_free_r+0xc4>
   24cc4:	1885883a 	add	r2,r3,r2
   24cc8:	2800071e 	bne	r5,zero,24ce8 <_free_r+0x7c>
   24ccc:	88fffe17 	ldw	r3,-8(r17)
   24cd0:	20c9c83a 	sub	r4,r4,r3
   24cd4:	21400217 	ldw	r5,8(r4)
   24cd8:	10c5883a 	add	r2,r2,r3
   24cdc:	20c00317 	ldw	r3,12(r4)
   24ce0:	28c00315 	stw	r3,12(r5)
   24ce4:	19400215 	stw	r5,8(r3)
   24ce8:	10c00054 	ori	r3,r2,1
   24cec:	20c00115 	stw	r3,4(r4)
   24cf0:	00c20034 	movhi	r3,2048
   24cf4:	18c33004 	addi	r3,r3,3264
   24cf8:	18c00017 	ldw	r3,0(r3)
   24cfc:	39000215 	stw	r4,8(r7)
   24d00:	10c00536 	bltu	r2,r3,24d18 <_free_r+0xac>
   24d04:	00820034 	movhi	r2,2048
   24d08:	10834104 	addi	r2,r2,3332
   24d0c:	11400017 	ldw	r5,0(r2)
   24d10:	8009883a 	mov	r4,r16
   24d14:	0024b480 	call	24b48 <_malloc_trim_r>
   24d18:	8009883a 	mov	r4,r16
   24d1c:	dfc00217 	ldw	ra,8(sp)
   24d20:	dc400117 	ldw	r17,4(sp)
   24d24:	dc000017 	ldw	r16,0(sp)
   24d28:	dec00304 	addi	sp,sp,12
   24d2c:	002561c1 	jmpi	2561c <__malloc_unlock>
   24d30:	30c00115 	stw	r3,4(r6)
   24d34:	2800091e 	bne	r5,zero,24d5c <_free_r+0xf0>
   24d38:	897ffe17 	ldw	r5,-8(r17)
   24d3c:	3a000204 	addi	r8,r7,8
   24d40:	2149c83a 	sub	r4,r4,r5
   24d44:	1145883a 	add	r2,r2,r5
   24d48:	21400217 	ldw	r5,8(r4)
   24d4c:	2a000526 	beq	r5,r8,24d64 <_free_r+0xf8>
   24d50:	22000317 	ldw	r8,12(r4)
   24d54:	2a000315 	stw	r8,12(r5)
   24d58:	41400215 	stw	r5,8(r8)
   24d5c:	000b883a 	mov	r5,zero
   24d60:	00000106 	br	24d68 <_free_r+0xfc>
   24d64:	01400044 	movi	r5,1
   24d68:	30d1883a 	add	r8,r6,r3
   24d6c:	42000117 	ldw	r8,4(r8)
   24d70:	4200004c 	andi	r8,r8,1
   24d74:	4000101e 	bne	r8,zero,24db8 <_free_r+0x14c>
   24d78:	10c5883a 	add	r2,r2,r3
   24d7c:	28000a1e 	bne	r5,zero,24da8 <_free_r+0x13c>
   24d80:	30c00217 	ldw	r3,8(r6)
   24d84:	02020034 	movhi	r8,2048
   24d88:	42014f04 	addi	r8,r8,1340
   24d8c:	1a00061e 	bne	r3,r8,24da8 <_free_r+0x13c>
   24d90:	39000515 	stw	r4,20(r7)
   24d94:	39000415 	stw	r4,16(r7)
   24d98:	20c00315 	stw	r3,12(r4)
   24d9c:	20c00215 	stw	r3,8(r4)
   24da0:	01400044 	movi	r5,1
   24da4:	00000406 	br	24db8 <_free_r+0x14c>
   24da8:	30c00317 	ldw	r3,12(r6)
   24dac:	31800217 	ldw	r6,8(r6)
   24db0:	30c00315 	stw	r3,12(r6)
   24db4:	19800215 	stw	r6,8(r3)
   24db8:	10c00054 	ori	r3,r2,1
   24dbc:	20c00115 	stw	r3,4(r4)
   24dc0:	2087883a 	add	r3,r4,r2
   24dc4:	18800015 	stw	r2,0(r3)
   24dc8:	283fd31e 	bne	r5,zero,24d18 <__alt_data_end+0xf4024d18>
   24dcc:	00c07fc4 	movi	r3,511
   24dd0:	18801036 	bltu	r3,r2,24e14 <_free_r+0x1a8>
   24dd4:	1006d0fa 	srli	r3,r2,3
   24dd8:	00800044 	movi	r2,1
   24ddc:	180bd0ba 	srai	r5,r3,2
   24de0:	18c7883a 	add	r3,r3,r3
   24de4:	18c7883a 	add	r3,r3,r3
   24de8:	114a983a 	sll	r5,r2,r5
   24dec:	38800117 	ldw	r2,4(r7)
   24df0:	18c7883a 	add	r3,r3,r3
   24df4:	2884b03a 	or	r2,r5,r2
   24df8:	38800115 	stw	r2,4(r7)
   24dfc:	38c5883a 	add	r2,r7,r3
   24e00:	10c00217 	ldw	r3,8(r2)
   24e04:	20800315 	stw	r2,12(r4)
   24e08:	20c00215 	stw	r3,8(r4)
   24e0c:	11000215 	stw	r4,8(r2)
   24e10:	00003506 	br	24ee8 <_free_r+0x27c>
   24e14:	1006d27a 	srli	r3,r2,9
   24e18:	01400104 	movi	r5,4
   24e1c:	28c00336 	bltu	r5,r3,24e2c <_free_r+0x1c0>
   24e20:	1006d1ba 	srli	r3,r2,6
   24e24:	18c00e04 	addi	r3,r3,56
   24e28:	00001406 	br	24e7c <_free_r+0x210>
   24e2c:	01400504 	movi	r5,20
   24e30:	28c00236 	bltu	r5,r3,24e3c <_free_r+0x1d0>
   24e34:	18c016c4 	addi	r3,r3,91
   24e38:	00001006 	br	24e7c <_free_r+0x210>
   24e3c:	01401504 	movi	r5,84
   24e40:	28c00336 	bltu	r5,r3,24e50 <_free_r+0x1e4>
   24e44:	1006d33a 	srli	r3,r2,12
   24e48:	18c01b84 	addi	r3,r3,110
   24e4c:	00000b06 	br	24e7c <_free_r+0x210>
   24e50:	01405504 	movi	r5,340
   24e54:	28c00336 	bltu	r5,r3,24e64 <_free_r+0x1f8>
   24e58:	1006d3fa 	srli	r3,r2,15
   24e5c:	18c01dc4 	addi	r3,r3,119
   24e60:	00000606 	br	24e7c <_free_r+0x210>
   24e64:	01415504 	movi	r5,1364
   24e68:	28c00336 	bltu	r5,r3,24e78 <_free_r+0x20c>
   24e6c:	1006d4ba 	srli	r3,r2,18
   24e70:	18c01f04 	addi	r3,r3,124
   24e74:	00000106 	br	24e7c <_free_r+0x210>
   24e78:	00c01f84 	movi	r3,126
   24e7c:	18cd883a 	add	r6,r3,r3
   24e80:	318d883a 	add	r6,r6,r6
   24e84:	318d883a 	add	r6,r6,r6
   24e88:	398b883a 	add	r5,r7,r6
   24e8c:	29800217 	ldw	r6,8(r5)
   24e90:	02020034 	movhi	r8,2048
   24e94:	42014d04 	addi	r8,r8,1332
   24e98:	3140081e 	bne	r6,r5,24ebc <_free_r+0x250>
   24e9c:	1807d0ba 	srai	r3,r3,2
   24ea0:	00800044 	movi	r2,1
   24ea4:	10c6983a 	sll	r3,r2,r3
   24ea8:	40800117 	ldw	r2,4(r8)
   24eac:	1886b03a 	or	r3,r3,r2
   24eb0:	40c00115 	stw	r3,4(r8)
   24eb4:	3007883a 	mov	r3,r6
   24eb8:	00000806 	br	24edc <_free_r+0x270>
   24ebc:	3007883a 	mov	r3,r6
   24ec0:	01ffff04 	movi	r7,-4
   24ec4:	19800117 	ldw	r6,4(r3)
   24ec8:	31cc703a 	and	r6,r6,r7
   24ecc:	1180022e 	bgeu	r2,r6,24ed8 <_free_r+0x26c>
   24ed0:	18c00217 	ldw	r3,8(r3)
   24ed4:	197ffb1e 	bne	r3,r5,24ec4 <__alt_data_end+0xf4024ec4>
   24ed8:	19800317 	ldw	r6,12(r3)
   24edc:	21800315 	stw	r6,12(r4)
   24ee0:	20c00215 	stw	r3,8(r4)
   24ee4:	31000215 	stw	r4,8(r6)
   24ee8:	19000315 	stw	r4,12(r3)
   24eec:	003f8a06 	br	24d18 <__alt_data_end+0xf4024d18>
   24ef0:	f800283a 	ret

00024ef4 <__sfvwrite_small_dev>:
   24ef4:	2880000b 	ldhu	r2,0(r5)
   24ef8:	defffa04 	addi	sp,sp,-24
   24efc:	dc000015 	stw	r16,0(sp)
   24f00:	dfc00515 	stw	ra,20(sp)
   24f04:	dd000415 	stw	r20,16(sp)
   24f08:	dcc00315 	stw	r19,12(sp)
   24f0c:	dc800215 	stw	r18,8(sp)
   24f10:	dc400115 	stw	r17,4(sp)
   24f14:	1080020c 	andi	r2,r2,8
   24f18:	2821883a 	mov	r16,r5
   24f1c:	10001726 	beq	r2,zero,24f7c <__sfvwrite_small_dev+0x88>
   24f20:	2880008f 	ldh	r2,2(r5)
   24f24:	10001216 	blt	r2,zero,24f70 <__sfvwrite_small_dev+0x7c>
   24f28:	2027883a 	mov	r19,r4
   24f2c:	3025883a 	mov	r18,r6
   24f30:	3823883a 	mov	r17,r7
   24f34:	05010004 	movi	r20,1024
   24f38:	04400b0e 	bge	zero,r17,24f68 <__sfvwrite_small_dev+0x74>
   24f3c:	8140008f 	ldh	r5,2(r16)
   24f40:	880f883a 	mov	r7,r17
   24f44:	a440010e 	bge	r20,r17,24f4c <__sfvwrite_small_dev+0x58>
   24f48:	01c10004 	movi	r7,1024
   24f4c:	9809883a 	mov	r4,r19
   24f50:	900d883a 	mov	r6,r18
   24f54:	00251480 	call	25148 <_write_r>
   24f58:	0080050e 	bge	zero,r2,24f70 <__sfvwrite_small_dev+0x7c>
   24f5c:	88a3c83a 	sub	r17,r17,r2
   24f60:	90a5883a 	add	r18,r18,r2
   24f64:	003ff406 	br	24f38 <__alt_data_end+0xf4024f38>
   24f68:	0005883a 	mov	r2,zero
   24f6c:	00000406 	br	24f80 <__sfvwrite_small_dev+0x8c>
   24f70:	8080000b 	ldhu	r2,0(r16)
   24f74:	10801014 	ori	r2,r2,64
   24f78:	8080000d 	sth	r2,0(r16)
   24f7c:	00bfffc4 	movi	r2,-1
   24f80:	dfc00517 	ldw	ra,20(sp)
   24f84:	dd000417 	ldw	r20,16(sp)
   24f88:	dcc00317 	ldw	r19,12(sp)
   24f8c:	dc800217 	ldw	r18,8(sp)
   24f90:	dc400117 	ldw	r17,4(sp)
   24f94:	dc000017 	ldw	r16,0(sp)
   24f98:	dec00604 	addi	sp,sp,24
   24f9c:	f800283a 	ret

00024fa0 <__sfvwrite_small_str>:
   24fa0:	2880000b 	ldhu	r2,0(r5)
   24fa4:	defffd04 	addi	sp,sp,-12
   24fa8:	dc000015 	stw	r16,0(sp)
   24fac:	dfc00215 	stw	ra,8(sp)
   24fb0:	dc400115 	stw	r17,4(sp)
   24fb4:	10c0020c 	andi	r3,r2,8
   24fb8:	2821883a 	mov	r16,r5
   24fbc:	18001926 	beq	r3,zero,25024 <__sfvwrite_small_str+0x84>
   24fc0:	28c0008f 	ldh	r3,2(r5)
   24fc4:	1800150e 	bge	r3,zero,2501c <__sfvwrite_small_str+0x7c>
   24fc8:	10c0800c 	andi	r3,r2,512
   24fcc:	18001326 	beq	r3,zero,2501c <__sfvwrite_small_str+0x7c>
   24fd0:	2c400517 	ldw	r17,20(r5)
   24fd4:	89c0030e 	bge	r17,r7,24fe4 <__sfvwrite_small_str+0x44>
   24fd8:	10c0200c 	andi	r3,r2,128
   24fdc:	18000326 	beq	r3,zero,24fec <__sfvwrite_small_str+0x4c>
   24fe0:	00000e06 	br	2501c <__sfvwrite_small_str+0x7c>
   24fe4:	3c40010e 	bge	r7,r17,24fec <__sfvwrite_small_str+0x4c>
   24fe8:	3823883a 	mov	r17,r7
   24fec:	81000417 	ldw	r4,16(r16)
   24ff0:	300b883a 	mov	r5,r6
   24ff4:	880d883a 	mov	r6,r17
   24ff8:	002503c0 	call	2503c <memmove>
   24ffc:	80800517 	ldw	r2,20(r16)
   25000:	1445c83a 	sub	r2,r2,r17
   25004:	80800515 	stw	r2,20(r16)
   25008:	80800417 	ldw	r2,16(r16)
   2500c:	1463883a 	add	r17,r2,r17
   25010:	84400415 	stw	r17,16(r16)
   25014:	0005883a 	mov	r2,zero
   25018:	00000306 	br	25028 <__sfvwrite_small_str+0x88>
   2501c:	10801014 	ori	r2,r2,64
   25020:	8080000d 	sth	r2,0(r16)
   25024:	00bfffc4 	movi	r2,-1
   25028:	dfc00217 	ldw	ra,8(sp)
   2502c:	dc400117 	ldw	r17,4(sp)
   25030:	dc000017 	ldw	r16,0(sp)
   25034:	dec00304 	addi	sp,sp,12
   25038:	f800283a 	ret

0002503c <memmove>:
   2503c:	2005883a 	mov	r2,r4
   25040:	29000d2e 	bgeu	r5,r4,25078 <memmove+0x3c>
   25044:	298f883a 	add	r7,r5,r6
   25048:	21c00b2e 	bgeu	r4,r7,25078 <memmove+0x3c>
   2504c:	3007883a 	mov	r3,r6
   25050:	017fffc4 	movi	r5,-1
   25054:	18ffffc4 	addi	r3,r3,-1
   25058:	19400626 	beq	r3,r5,25074 <memmove+0x38>
   2505c:	1989c83a 	sub	r4,r3,r6
   25060:	3909883a 	add	r4,r7,r4
   25064:	22000003 	ldbu	r8,0(r4)
   25068:	10c9883a 	add	r4,r2,r3
   2506c:	22000005 	stb	r8,0(r4)
   25070:	003ff806 	br	25054 <__alt_data_end+0xf4025054>
   25074:	f800283a 	ret
   25078:	0007883a 	mov	r3,zero
   2507c:	19800626 	beq	r3,r6,25098 <memmove+0x5c>
   25080:	28c9883a 	add	r4,r5,r3
   25084:	21c00003 	ldbu	r7,0(r4)
   25088:	10c9883a 	add	r4,r2,r3
   2508c:	18c00044 	addi	r3,r3,1
   25090:	21c00005 	stb	r7,0(r4)
   25094:	003ff906 	br	2507c <__alt_data_end+0xf402507c>
   25098:	f800283a 	ret

0002509c <putc>:
   2509c:	defffd04 	addi	sp,sp,-12
   250a0:	008000b4 	movhi	r2,2
   250a4:	dc000115 	stw	r16,4(sp)
   250a8:	dfc00215 	stw	ra,8(sp)
   250ac:	1093bd04 	addi	r2,r2,20212
   250b0:	28800115 	stw	r2,4(r5)
   250b4:	00820034 	movhi	r2,2048
   250b8:	10833204 	addi	r2,r2,3272
   250bc:	d9000005 	stb	r4,0(sp)
   250c0:	2021883a 	mov	r16,r4
   250c4:	11000017 	ldw	r4,0(r2)
   250c8:	d80d883a 	mov	r6,sp
   250cc:	01c00044 	movi	r7,1
   250d0:	0024ef40 	call	24ef4 <__sfvwrite_small_dev>
   250d4:	00ffffc4 	movi	r3,-1
   250d8:	10c00126 	beq	r2,r3,250e0 <putc+0x44>
   250dc:	8005883a 	mov	r2,r16
   250e0:	dfc00217 	ldw	ra,8(sp)
   250e4:	dc000117 	ldw	r16,4(sp)
   250e8:	dec00304 	addi	sp,sp,12
   250ec:	f800283a 	ret

000250f0 <_putc_r>:
   250f0:	defffd04 	addi	sp,sp,-12
   250f4:	008000b4 	movhi	r2,2
   250f8:	dc000115 	stw	r16,4(sp)
   250fc:	dfc00215 	stw	ra,8(sp)
   25100:	1093bd04 	addi	r2,r2,20212
   25104:	30800115 	stw	r2,4(r6)
   25108:	00820034 	movhi	r2,2048
   2510c:	10833204 	addi	r2,r2,3272
   25110:	11000017 	ldw	r4,0(r2)
   25114:	2821883a 	mov	r16,r5
   25118:	01c00044 	movi	r7,1
   2511c:	300b883a 	mov	r5,r6
   25120:	d80d883a 	mov	r6,sp
   25124:	dc000005 	stb	r16,0(sp)
   25128:	0024ef40 	call	24ef4 <__sfvwrite_small_dev>
   2512c:	00ffffc4 	movi	r3,-1
   25130:	10c00126 	beq	r2,r3,25138 <_putc_r+0x48>
   25134:	8005883a 	mov	r2,r16
   25138:	dfc00217 	ldw	ra,8(sp)
   2513c:	dc000117 	ldw	r16,4(sp)
   25140:	dec00304 	addi	sp,sp,12
   25144:	f800283a 	ret

00025148 <_write_r>:
   25148:	defffd04 	addi	sp,sp,-12
   2514c:	dc000015 	stw	r16,0(sp)
   25150:	04020034 	movhi	r16,2048
   25154:	dc400115 	stw	r17,4(sp)
   25158:	84034204 	addi	r16,r16,3336
   2515c:	2023883a 	mov	r17,r4
   25160:	2809883a 	mov	r4,r5
   25164:	300b883a 	mov	r5,r6
   25168:	380d883a 	mov	r6,r7
   2516c:	dfc00215 	stw	ra,8(sp)
   25170:	80000015 	stw	zero,0(r16)
   25174:	00259d80 	call	259d8 <write>
   25178:	00ffffc4 	movi	r3,-1
   2517c:	10c0031e 	bne	r2,r3,2518c <_write_r+0x44>
   25180:	80c00017 	ldw	r3,0(r16)
   25184:	18000126 	beq	r3,zero,2518c <_write_r+0x44>
   25188:	88c00015 	stw	r3,0(r17)
   2518c:	dfc00217 	ldw	ra,8(sp)
   25190:	dc400117 	ldw	r17,4(sp)
   25194:	dc000017 	ldw	r16,0(sp)
   25198:	dec00304 	addi	sp,sp,12
   2519c:	f800283a 	ret

000251a0 <udivmodsi4>:
   251a0:	2900182e 	bgeu	r5,r4,25204 <udivmodsi4+0x64>
   251a4:	28001716 	blt	r5,zero,25204 <udivmodsi4+0x64>
   251a8:	00800804 	movi	r2,32
   251ac:	00c00044 	movi	r3,1
   251b0:	00000206 	br	251bc <udivmodsi4+0x1c>
   251b4:	10001126 	beq	r2,zero,251fc <udivmodsi4+0x5c>
   251b8:	28000516 	blt	r5,zero,251d0 <udivmodsi4+0x30>
   251bc:	294b883a 	add	r5,r5,r5
   251c0:	10bfffc4 	addi	r2,r2,-1
   251c4:	18c7883a 	add	r3,r3,r3
   251c8:	293ffa36 	bltu	r5,r4,251b4 <__alt_data_end+0xf40251b4>
   251cc:	18000b26 	beq	r3,zero,251fc <udivmodsi4+0x5c>
   251d0:	0005883a 	mov	r2,zero
   251d4:	21400236 	bltu	r4,r5,251e0 <udivmodsi4+0x40>
   251d8:	2149c83a 	sub	r4,r4,r5
   251dc:	10c4b03a 	or	r2,r2,r3
   251e0:	1806d07a 	srli	r3,r3,1
   251e4:	280ad07a 	srli	r5,r5,1
   251e8:	183ffa1e 	bne	r3,zero,251d4 <__alt_data_end+0xf40251d4>
   251ec:	3000011e 	bne	r6,zero,251f4 <udivmodsi4+0x54>
   251f0:	f800283a 	ret
   251f4:	2005883a 	mov	r2,r4
   251f8:	f800283a 	ret
   251fc:	0005883a 	mov	r2,zero
   25200:	003ffa06 	br	251ec <__alt_data_end+0xf40251ec>
   25204:	00c00044 	movi	r3,1
   25208:	003ff106 	br	251d0 <__alt_data_end+0xf40251d0>

0002520c <__divsi3>:
   2520c:	defffe04 	addi	sp,sp,-8
   25210:	dfc00115 	stw	ra,4(sp)
   25214:	dc000015 	stw	r16,0(sp)
   25218:	20000b16 	blt	r4,zero,25248 <__divsi3+0x3c>
   2521c:	0021883a 	mov	r16,zero
   25220:	28000c16 	blt	r5,zero,25254 <__divsi3+0x48>
   25224:	000d883a 	mov	r6,zero
   25228:	00251a00 	call	251a0 <udivmodsi4>
   2522c:	0407c83a 	sub	r3,zero,r16
   25230:	1884f03a 	xor	r2,r3,r2
   25234:	1405883a 	add	r2,r2,r16
   25238:	dfc00117 	ldw	ra,4(sp)
   2523c:	dc000017 	ldw	r16,0(sp)
   25240:	dec00204 	addi	sp,sp,8
   25244:	f800283a 	ret
   25248:	0109c83a 	sub	r4,zero,r4
   2524c:	04000044 	movi	r16,1
   25250:	283ff40e 	bge	r5,zero,25224 <__alt_data_end+0xf4025224>
   25254:	014bc83a 	sub	r5,zero,r5
   25258:	8400005c 	xori	r16,r16,1
   2525c:	003ff106 	br	25224 <__alt_data_end+0xf4025224>

00025260 <__modsi3>:
   25260:	defffd04 	addi	sp,sp,-12
   25264:	dfc00215 	stw	ra,8(sp)
   25268:	dc400115 	stw	r17,4(sp)
   2526c:	dc000015 	stw	r16,0(sp)
   25270:	20000c16 	blt	r4,zero,252a4 <__modsi3+0x44>
   25274:	0023883a 	mov	r17,zero
   25278:	0021883a 	mov	r16,zero
   2527c:	28000d16 	blt	r5,zero,252b4 <__modsi3+0x54>
   25280:	01800044 	movi	r6,1
   25284:	00251a00 	call	251a0 <udivmodsi4>
   25288:	1404f03a 	xor	r2,r2,r16
   2528c:	8885883a 	add	r2,r17,r2
   25290:	dfc00217 	ldw	ra,8(sp)
   25294:	dc400117 	ldw	r17,4(sp)
   25298:	dc000017 	ldw	r16,0(sp)
   2529c:	dec00304 	addi	sp,sp,12
   252a0:	f800283a 	ret
   252a4:	0109c83a 	sub	r4,zero,r4
   252a8:	04400044 	movi	r17,1
   252ac:	043fffc4 	movi	r16,-1
   252b0:	283ff30e 	bge	r5,zero,25280 <__alt_data_end+0xf4025280>
   252b4:	014bc83a 	sub	r5,zero,r5
   252b8:	003ff106 	br	25280 <__alt_data_end+0xf4025280>

000252bc <__udivsi3>:
   252bc:	000d883a 	mov	r6,zero
   252c0:	00251a01 	jmpi	251a0 <udivmodsi4>

000252c4 <__umodsi3>:
   252c4:	01800044 	movi	r6,1
   252c8:	00251a01 	jmpi	251a0 <udivmodsi4>

000252cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   252cc:	defffd04 	addi	sp,sp,-12
   252d0:	df000215 	stw	fp,8(sp)
   252d4:	df000204 	addi	fp,sp,8
   252d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   252dc:	0001883a 	nop
   252e0:	e0bfff17 	ldw	r2,-4(fp)
   252e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   252e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   252ec:	10000226 	beq	r2,zero,252f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   252f0:	002af070 	cmpltui	zero,zero,43969
   252f4:	00000106 	br	252fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   252f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   252fc:	003fff06 	br	252fc <__alt_data_end+0xf40252fc>

00025300 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   25300:	deffff04 	addi	sp,sp,-4
   25304:	df000015 	stw	fp,0(sp)
   25308:	d839883a 	mov	fp,sp
  return 0;
   2530c:	0005883a 	mov	r2,zero
}
   25310:	e037883a 	mov	sp,fp
   25314:	df000017 	ldw	fp,0(sp)
   25318:	dec00104 	addi	sp,sp,4
   2531c:	f800283a 	ret

00025320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25320:	defffe04 	addi	sp,sp,-8
   25324:	dfc00115 	stw	ra,4(sp)
   25328:	df000015 	stw	fp,0(sp)
   2532c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25330:	00820034 	movhi	r2,2048
   25334:	10833904 	addi	r2,r2,3300
   25338:	10800017 	ldw	r2,0(r2)
   2533c:	10000526 	beq	r2,zero,25354 <alt_get_errno+0x34>
   25340:	00820034 	movhi	r2,2048
   25344:	10833904 	addi	r2,r2,3300
   25348:	10800017 	ldw	r2,0(r2)
   2534c:	103ee83a 	callr	r2
   25350:	00000206 	br	2535c <alt_get_errno+0x3c>
   25354:	00820034 	movhi	r2,2048
   25358:	10834204 	addi	r2,r2,3336
}
   2535c:	e037883a 	mov	sp,fp
   25360:	dfc00117 	ldw	ra,4(sp)
   25364:	df000017 	ldw	fp,0(sp)
   25368:	dec00204 	addi	sp,sp,8
   2536c:	f800283a 	ret

00025370 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   25370:	defffb04 	addi	sp,sp,-20
   25374:	dfc00415 	stw	ra,16(sp)
   25378:	df000315 	stw	fp,12(sp)
   2537c:	df000304 	addi	fp,sp,12
   25380:	e13ffe15 	stw	r4,-8(fp)
   25384:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   25388:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   2538c:	e0bffe17 	ldw	r2,-8(fp)
   25390:	00803116 	blt	zero,r2,25458 <kill+0xe8>
  {
    switch (sig)
   25394:	e0bfff17 	ldw	r2,-4(fp)
   25398:	10800828 	cmpgeui	r2,r2,32
   2539c:	1000291e 	bne	r2,zero,25444 <kill+0xd4>
   253a0:	e0bfff17 	ldw	r2,-4(fp)
   253a4:	100690ba 	slli	r3,r2,2
   253a8:	008000b4 	movhi	r2,2
   253ac:	1094ef04 	addi	r2,r2,21436
   253b0:	1885883a 	add	r2,r3,r2
   253b4:	10800017 	ldw	r2,0(r2)
   253b8:	1000683a 	jmp	r2
   253bc:	00025450 	cmplti	zero,zero,2385
   253c0:	00025444 	movi	zero,2385
   253c4:	00025444 	movi	zero,2385
   253c8:	0002543c 	xorhi	zero,zero,2384
   253cc:	0002543c 	xorhi	zero,zero,2384
   253d0:	0002543c 	xorhi	zero,zero,2384
   253d4:	0002543c 	xorhi	zero,zero,2384
   253d8:	00025444 	movi	zero,2385
   253dc:	0002543c 	xorhi	zero,zero,2384
   253e0:	0002543c 	xorhi	zero,zero,2384
   253e4:	0002543c 	xorhi	zero,zero,2384
   253e8:	0002543c 	xorhi	zero,zero,2384
   253ec:	0002543c 	xorhi	zero,zero,2384
   253f0:	0002543c 	xorhi	zero,zero,2384
   253f4:	0002543c 	xorhi	zero,zero,2384
   253f8:	0002543c 	xorhi	zero,zero,2384
   253fc:	00025450 	cmplti	zero,zero,2385
   25400:	00025444 	movi	zero,2385
   25404:	00025444 	movi	zero,2385
   25408:	00025444 	movi	zero,2385
   2540c:	00025450 	cmplti	zero,zero,2385
   25410:	00025444 	movi	zero,2385
   25414:	00025444 	movi	zero,2385
   25418:	0002543c 	xorhi	zero,zero,2384
   2541c:	0002543c 	xorhi	zero,zero,2384
   25420:	0002543c 	xorhi	zero,zero,2384
   25424:	0002543c 	xorhi	zero,zero,2384
   25428:	0002543c 	xorhi	zero,zero,2384
   2542c:	00025444 	movi	zero,2385
   25430:	00025444 	movi	zero,2385
   25434:	0002543c 	xorhi	zero,zero,2384
   25438:	0002543c 	xorhi	zero,zero,2384
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   2543c:	0009883a 	mov	r4,zero
   25440:	00252cc0 	call	252cc <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   25444:	00800584 	movi	r2,22
   25448:	e0bffd15 	stw	r2,-12(fp)
   2544c:	00000606 	br	25468 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   25450:	0001883a 	nop
   25454:	00000406 	br	25468 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
   25458:	e0bffe17 	ldw	r2,-8(fp)
   2545c:	0080020e 	bge	zero,r2,25468 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   25460:	008000c4 	movi	r2,3
   25464:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
   25468:	e0bffd17 	ldw	r2,-12(fp)
   2546c:	10000626 	beq	r2,zero,25488 <kill+0x118>
  {
    ALT_ERRNO = status;
   25470:	00253200 	call	25320 <alt_get_errno>
   25474:	1007883a 	mov	r3,r2
   25478:	e0bffd17 	ldw	r2,-12(fp)
   2547c:	18800015 	stw	r2,0(r3)
    return -1;
   25480:	00bfffc4 	movi	r2,-1
   25484:	00000106 	br	2548c <kill+0x11c>
  }

  return 0;
   25488:	0005883a 	mov	r2,zero
}
   2548c:	e037883a 	mov	sp,fp
   25490:	dfc00117 	ldw	ra,4(sp)
   25494:	df000017 	ldw	fp,0(sp)
   25498:	dec00204 	addi	sp,sp,8
   2549c:	f800283a 	ret

000254a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   254a0:	defffc04 	addi	sp,sp,-16
   254a4:	df000315 	stw	fp,12(sp)
   254a8:	df000304 	addi	fp,sp,12
   254ac:	e13ffd15 	stw	r4,-12(fp)
   254b0:	e17ffe15 	stw	r5,-8(fp)
   254b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   254b8:	e0fffe17 	ldw	r3,-8(fp)
   254bc:	e0bffd17 	ldw	r2,-12(fp)
   254c0:	18800c26 	beq	r3,r2,254f4 <alt_load_section+0x54>
  {
    while( to != end )
   254c4:	00000806 	br	254e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   254c8:	e0bffe17 	ldw	r2,-8(fp)
   254cc:	10c00104 	addi	r3,r2,4
   254d0:	e0fffe15 	stw	r3,-8(fp)
   254d4:	e0fffd17 	ldw	r3,-12(fp)
   254d8:	19000104 	addi	r4,r3,4
   254dc:	e13ffd15 	stw	r4,-12(fp)
   254e0:	18c00017 	ldw	r3,0(r3)
   254e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   254e8:	e0fffe17 	ldw	r3,-8(fp)
   254ec:	e0bfff17 	ldw	r2,-4(fp)
   254f0:	18bff51e 	bne	r3,r2,254c8 <__alt_data_end+0xf40254c8>
    {
      *to++ = *from++;
    }
  }
}
   254f4:	e037883a 	mov	sp,fp
   254f8:	df000017 	ldw	fp,0(sp)
   254fc:	dec00104 	addi	sp,sp,4
   25500:	f800283a 	ret

00025504 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   25504:	defffe04 	addi	sp,sp,-8
   25508:	dfc00115 	stw	ra,4(sp)
   2550c:	df000015 	stw	fp,0(sp)
   25510:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   25514:	010000b4 	movhi	r4,2
   25518:	211d7104 	addi	r4,r4,30148
   2551c:	01420034 	movhi	r5,2048
   25520:	29414d04 	addi	r5,r5,1332
   25524:	01820034 	movhi	r6,2048
   25528:	31833a04 	addi	r6,r6,3304
   2552c:	00254a00 	call	254a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   25530:	010000b4 	movhi	r4,2
   25534:	21000804 	addi	r4,r4,32
   25538:	014000b4 	movhi	r5,2
   2553c:	29400804 	addi	r5,r5,32
   25540:	018000b4 	movhi	r6,2
   25544:	31800804 	addi	r6,r6,32
   25548:	00254a00 	call	254a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2554c:	010000b4 	movhi	r4,2
   25550:	211c2404 	addi	r4,r4,28816
   25554:	01420034 	movhi	r5,2048
   25558:	29400004 	addi	r5,r5,0
   2555c:	01820034 	movhi	r6,2048
   25560:	31814d04 	addi	r6,r6,1332
   25564:	00254a00 	call	254a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   25568:	00263e00 	call	263e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2556c:	00266640 	call	26664 <alt_icache_flush_all>
}
   25570:	e037883a 	mov	sp,fp
   25574:	dfc00117 	ldw	ra,4(sp)
   25578:	df000017 	ldw	fp,0(sp)
   2557c:	dec00204 	addi	sp,sp,8
   25580:	f800283a 	ret

00025584 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   25584:	defffd04 	addi	sp,sp,-12
   25588:	dfc00215 	stw	ra,8(sp)
   2558c:	df000115 	stw	fp,4(sp)
   25590:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   25594:	0009883a 	mov	r4,zero
   25598:	0025b100 	call	25b10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2559c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   255a0:	0025b440 	call	25b44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   255a4:	01020034 	movhi	r4,2048
   255a8:	21013104 	addi	r4,r4,1220
   255ac:	01420034 	movhi	r5,2048
   255b0:	29413104 	addi	r5,r5,1220
   255b4:	01820034 	movhi	r6,2048
   255b8:	31813104 	addi	r6,r6,1220
   255bc:	00267600 	call	26760 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   255c0:	002651c0 	call	2651c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   255c4:	010000b4 	movhi	r4,2
   255c8:	21195e04 	addi	r4,r4,25976
   255cc:	0026d040 	call	26d04 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   255d0:	d1202617 	ldw	r4,-32616(gp)
   255d4:	d0e02717 	ldw	r3,-32612(gp)
   255d8:	d0a02817 	ldw	r2,-32608(gp)
   255dc:	180b883a 	mov	r5,r3
   255e0:	100d883a 	mov	r6,r2
   255e4:	0020c900 	call	20c90 <main>
   255e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   255ec:	01000044 	movi	r4,1
   255f0:	00263080 	call	26308 <close>
  exit (result);
   255f4:	e13fff17 	ldw	r4,-4(fp)
   255f8:	0026d180 	call	26d18 <exit>

000255fc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   255fc:	defffe04 	addi	sp,sp,-8
   25600:	df000115 	stw	fp,4(sp)
   25604:	df000104 	addi	fp,sp,4
   25608:	e13fff15 	stw	r4,-4(fp)
}
   2560c:	e037883a 	mov	sp,fp
   25610:	df000017 	ldw	fp,0(sp)
   25614:	dec00104 	addi	sp,sp,4
   25618:	f800283a 	ret

0002561c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2561c:	defffe04 	addi	sp,sp,-8
   25620:	df000115 	stw	fp,4(sp)
   25624:	df000104 	addi	fp,sp,4
   25628:	e13fff15 	stw	r4,-4(fp)
}
   2562c:	e037883a 	mov	sp,fp
   25630:	df000017 	ldw	fp,0(sp)
   25634:	dec00104 	addi	sp,sp,4
   25638:	f800283a 	ret

0002563c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2563c:	defff204 	addi	sp,sp,-56
   25640:	dfc00a15 	stw	ra,40(sp)
   25644:	df000915 	stw	fp,36(sp)
   25648:	df000904 	addi	fp,sp,36
   2564c:	e1400215 	stw	r5,8(fp)
   25650:	e1800315 	stw	r6,12(fp)
   25654:	e1c00415 	stw	r7,16(fp)
   25658:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   2565c:	e0800204 	addi	r2,fp,8
   25660:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   25664:	e0bfff17 	ldw	r2,-4(fp)
   25668:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   2566c:	00007106 	br	25834 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   25670:	e0bff807 	ldb	r2,-32(fp)
   25674:	10800960 	cmpeqi	r2,r2,37
   25678:	1000041e 	bne	r2,zero,2568c <alt_printf+0x50>
        {
            alt_putchar(c);
   2567c:	e0bff807 	ldb	r2,-32(fp)
   25680:	1009883a 	mov	r4,r2
   25684:	00258640 	call	25864 <alt_putchar>
   25688:	00006a06 	br	25834 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2568c:	e0bff717 	ldw	r2,-36(fp)
   25690:	10c00044 	addi	r3,r2,1
   25694:	e0fff715 	stw	r3,-36(fp)
   25698:	10800003 	ldbu	r2,0(r2)
   2569c:	e0bff805 	stb	r2,-32(fp)
   256a0:	e0bff807 	ldb	r2,-32(fp)
   256a4:	10006226 	beq	r2,zero,25830 <alt_printf+0x1f4>
            {
                if (c == '%')
   256a8:	e0bff807 	ldb	r2,-32(fp)
   256ac:	10800958 	cmpnei	r2,r2,37
   256b0:	1000041e 	bne	r2,zero,256c4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   256b4:	e0bff807 	ldb	r2,-32(fp)
   256b8:	1009883a 	mov	r4,r2
   256bc:	00258640 	call	25864 <alt_putchar>
   256c0:	00005c06 	br	25834 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   256c4:	e0bff807 	ldb	r2,-32(fp)
   256c8:	108018d8 	cmpnei	r2,r2,99
   256cc:	1000081e 	bne	r2,zero,256f0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   256d0:	e0bffe17 	ldw	r2,-8(fp)
   256d4:	10c00104 	addi	r3,r2,4
   256d8:	e0fffe15 	stw	r3,-8(fp)
   256dc:	10800017 	ldw	r2,0(r2)
   256e0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   256e4:	e13ffd17 	ldw	r4,-12(fp)
   256e8:	00258640 	call	25864 <alt_putchar>
   256ec:	00005106 	br	25834 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   256f0:	e0bff807 	ldb	r2,-32(fp)
   256f4:	10801e18 	cmpnei	r2,r2,120
   256f8:	1000341e 	bne	r2,zero,257cc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   256fc:	e0bffe17 	ldw	r2,-8(fp)
   25700:	10c00104 	addi	r3,r2,4
   25704:	e0fffe15 	stw	r3,-8(fp)
   25708:	10800017 	ldw	r2,0(r2)
   2570c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   25710:	e0bffb17 	ldw	r2,-20(fp)
   25714:	1000031e 	bne	r2,zero,25724 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   25718:	01000c04 	movi	r4,48
   2571c:	00258640 	call	25864 <alt_putchar>
                        continue;
   25720:	00004406 	br	25834 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   25724:	00800704 	movi	r2,28
   25728:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2572c:	00000306 	br	2573c <alt_printf+0x100>
                        digit_shift -= 4;
   25730:	e0bff917 	ldw	r2,-28(fp)
   25734:	10bfff04 	addi	r2,r2,-4
   25738:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2573c:	00c003c4 	movi	r3,15
   25740:	e0bff917 	ldw	r2,-28(fp)
   25744:	1884983a 	sll	r2,r3,r2
   25748:	1007883a 	mov	r3,r2
   2574c:	e0bffb17 	ldw	r2,-20(fp)
   25750:	1884703a 	and	r2,r3,r2
   25754:	103ff626 	beq	r2,zero,25730 <__alt_data_end+0xf4025730>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   25758:	00001906 	br	257c0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2575c:	00c003c4 	movi	r3,15
   25760:	e0bff917 	ldw	r2,-28(fp)
   25764:	1884983a 	sll	r2,r3,r2
   25768:	1007883a 	mov	r3,r2
   2576c:	e0bffb17 	ldw	r2,-20(fp)
   25770:	1886703a 	and	r3,r3,r2
   25774:	e0bff917 	ldw	r2,-28(fp)
   25778:	1884d83a 	srl	r2,r3,r2
   2577c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   25780:	e0bffc17 	ldw	r2,-16(fp)
   25784:	108002a8 	cmpgeui	r2,r2,10
   25788:	1000041e 	bne	r2,zero,2579c <alt_printf+0x160>
                            c = '0' + digit;
   2578c:	e0bffc17 	ldw	r2,-16(fp)
   25790:	10800c04 	addi	r2,r2,48
   25794:	e0bff805 	stb	r2,-32(fp)
   25798:	00000306 	br	257a8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2579c:	e0bffc17 	ldw	r2,-16(fp)
   257a0:	108015c4 	addi	r2,r2,87
   257a4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   257a8:	e0bff807 	ldb	r2,-32(fp)
   257ac:	1009883a 	mov	r4,r2
   257b0:	00258640 	call	25864 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   257b4:	e0bff917 	ldw	r2,-28(fp)
   257b8:	10bfff04 	addi	r2,r2,-4
   257bc:	e0bff915 	stw	r2,-28(fp)
   257c0:	e0bff917 	ldw	r2,-28(fp)
   257c4:	103fe50e 	bge	r2,zero,2575c <__alt_data_end+0xf402575c>
   257c8:	00001a06 	br	25834 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   257cc:	e0bff807 	ldb	r2,-32(fp)
   257d0:	10801cd8 	cmpnei	r2,r2,115
   257d4:	1000151e 	bne	r2,zero,2582c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   257d8:	e0bffe17 	ldw	r2,-8(fp)
   257dc:	10c00104 	addi	r3,r2,4
   257e0:	e0fffe15 	stw	r3,-8(fp)
   257e4:	10800017 	ldw	r2,0(r2)
   257e8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   257ec:	00000906 	br	25814 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   257f0:	e0bffa17 	ldw	r2,-24(fp)
   257f4:	10c00044 	addi	r3,r2,1
   257f8:	e0fffa15 	stw	r3,-24(fp)
   257fc:	10800003 	ldbu	r2,0(r2)
   25800:	10803fcc 	andi	r2,r2,255
   25804:	1080201c 	xori	r2,r2,128
   25808:	10bfe004 	addi	r2,r2,-128
   2580c:	1009883a 	mov	r4,r2
   25810:	00258640 	call	25864 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   25814:	e0bffa17 	ldw	r2,-24(fp)
   25818:	10800003 	ldbu	r2,0(r2)
   2581c:	10803fcc 	andi	r2,r2,255
   25820:	1080201c 	xori	r2,r2,128
   25824:	10bfe004 	addi	r2,r2,-128
   25828:	103ff11e 	bne	r2,zero,257f0 <__alt_data_end+0xf40257f0>
   2582c:	00000106 	br	25834 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   25830:	00000706 	br	25850 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   25834:	e0bff717 	ldw	r2,-36(fp)
   25838:	10c00044 	addi	r3,r2,1
   2583c:	e0fff715 	stw	r3,-36(fp)
   25840:	10800003 	ldbu	r2,0(r2)
   25844:	e0bff805 	stb	r2,-32(fp)
   25848:	e0bff807 	ldb	r2,-32(fp)
   2584c:	103f881e 	bne	r2,zero,25670 <__alt_data_end+0xf4025670>
            {
                break;
            }
        }
    }
}
   25850:	e037883a 	mov	sp,fp
   25854:	dfc00117 	ldw	ra,4(sp)
   25858:	df000017 	ldw	fp,0(sp)
   2585c:	dec00504 	addi	sp,sp,20
   25860:	f800283a 	ret

00025864 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   25864:	defffd04 	addi	sp,sp,-12
   25868:	dfc00215 	stw	ra,8(sp)
   2586c:	df000115 	stw	fp,4(sp)
   25870:	df000104 	addi	fp,sp,4
   25874:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   25878:	00820034 	movhi	r2,2048
   2587c:	10833204 	addi	r2,r2,3272
   25880:	10800017 	ldw	r2,0(r2)
   25884:	10800217 	ldw	r2,8(r2)
   25888:	e13fff17 	ldw	r4,-4(fp)
   2588c:	100b883a 	mov	r5,r2
   25890:	002509c0 	call	2509c <putc>
#endif
}
   25894:	e037883a 	mov	sp,fp
   25898:	dfc00117 	ldw	ra,4(sp)
   2589c:	df000017 	ldw	fp,0(sp)
   258a0:	dec00204 	addi	sp,sp,8
   258a4:	f800283a 	ret

000258a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   258a8:	defff904 	addi	sp,sp,-28
   258ac:	df000615 	stw	fp,24(sp)
   258b0:	df000604 	addi	fp,sp,24
   258b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   258b8:	0005303a 	rdctl	r2,status
   258bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   258c0:	e0fffc17 	ldw	r3,-16(fp)
   258c4:	00bfff84 	movi	r2,-2
   258c8:	1884703a 	and	r2,r3,r2
   258cc:	1001703a 	wrctl	status,r2
  
  return context;
   258d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   258d4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   258d8:	d0a01617 	ldw	r2,-32680(gp)
   258dc:	10c000c4 	addi	r3,r2,3
   258e0:	00bfff04 	movi	r2,-4
   258e4:	1884703a 	and	r2,r3,r2
   258e8:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   258ec:	d0e01617 	ldw	r3,-32680(gp)
   258f0:	e0bfff17 	ldw	r2,-4(fp)
   258f4:	1887883a 	add	r3,r3,r2
   258f8:	00830034 	movhi	r2,3072
   258fc:	10800004 	addi	r2,r2,0
   25900:	10c0062e 	bgeu	r2,r3,2591c <sbrk+0x74>
   25904:	e0bffa17 	ldw	r2,-24(fp)
   25908:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2590c:	e0bffd17 	ldw	r2,-12(fp)
   25910:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   25914:	00bfffc4 	movi	r2,-1
   25918:	00000b06 	br	25948 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2591c:	d0a01617 	ldw	r2,-32680(gp)
   25920:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   25924:	d0e01617 	ldw	r3,-32680(gp)
   25928:	e0bfff17 	ldw	r2,-4(fp)
   2592c:	1885883a 	add	r2,r3,r2
   25930:	d0a01615 	stw	r2,-32680(gp)
   25934:	e0bffa17 	ldw	r2,-24(fp)
   25938:	e0bffe15 	stw	r2,-8(fp)
   2593c:	e0bffe17 	ldw	r2,-8(fp)
   25940:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   25944:	e0bffb17 	ldw	r2,-20(fp)
} 
   25948:	e037883a 	mov	sp,fp
   2594c:	df000017 	ldw	fp,0(sp)
   25950:	dec00104 	addi	sp,sp,4
   25954:	f800283a 	ret

00025958 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   25958:	defffd04 	addi	sp,sp,-12
   2595c:	dfc00215 	stw	ra,8(sp)
   25960:	df000115 	stw	fp,4(sp)
   25964:	df000104 	addi	fp,sp,4
   25968:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2596c:	e13fff17 	ldw	r4,-4(fp)
   25970:	00261600 	call	26160 <alt_busy_sleep>
}
   25974:	e037883a 	mov	sp,fp
   25978:	dfc00117 	ldw	ra,4(sp)
   2597c:	df000017 	ldw	fp,0(sp)
   25980:	dec00204 	addi	sp,sp,8
   25984:	f800283a 	ret

00025988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25988:	defffe04 	addi	sp,sp,-8
   2598c:	dfc00115 	stw	ra,4(sp)
   25990:	df000015 	stw	fp,0(sp)
   25994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25998:	00820034 	movhi	r2,2048
   2599c:	10833904 	addi	r2,r2,3300
   259a0:	10800017 	ldw	r2,0(r2)
   259a4:	10000526 	beq	r2,zero,259bc <alt_get_errno+0x34>
   259a8:	00820034 	movhi	r2,2048
   259ac:	10833904 	addi	r2,r2,3300
   259b0:	10800017 	ldw	r2,0(r2)
   259b4:	103ee83a 	callr	r2
   259b8:	00000206 	br	259c4 <alt_get_errno+0x3c>
   259bc:	00820034 	movhi	r2,2048
   259c0:	10834204 	addi	r2,r2,3336
}
   259c4:	e037883a 	mov	sp,fp
   259c8:	dfc00117 	ldw	ra,4(sp)
   259cc:	df000017 	ldw	fp,0(sp)
   259d0:	dec00204 	addi	sp,sp,8
   259d4:	f800283a 	ret

000259d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   259d8:	defff904 	addi	sp,sp,-28
   259dc:	dfc00615 	stw	ra,24(sp)
   259e0:	df000515 	stw	fp,20(sp)
   259e4:	df000504 	addi	fp,sp,20
   259e8:	e13ffd15 	stw	r4,-12(fp)
   259ec:	e17ffe15 	stw	r5,-8(fp)
   259f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   259f4:	e0bffd17 	ldw	r2,-12(fp)
   259f8:	10000816 	blt	r2,zero,25a1c <write+0x44>
   259fc:	e13ffd17 	ldw	r4,-12(fp)
   25a00:	01400304 	movi	r5,12
   25a04:	0022d000 	call	22d00 <__mulsi3>
   25a08:	1007883a 	mov	r3,r2
   25a0c:	00820034 	movhi	r2,2048
   25a10:	1082bd04 	addi	r2,r2,2804
   25a14:	1885883a 	add	r2,r3,r2
   25a18:	00000106 	br	25a20 <write+0x48>
   25a1c:	0005883a 	mov	r2,zero
   25a20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   25a24:	e0bffb17 	ldw	r2,-20(fp)
   25a28:	10002126 	beq	r2,zero,25ab0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   25a2c:	e0bffb17 	ldw	r2,-20(fp)
   25a30:	10800217 	ldw	r2,8(r2)
   25a34:	108000cc 	andi	r2,r2,3
   25a38:	10001826 	beq	r2,zero,25a9c <write+0xc4>
   25a3c:	e0bffb17 	ldw	r2,-20(fp)
   25a40:	10800017 	ldw	r2,0(r2)
   25a44:	10800617 	ldw	r2,24(r2)
   25a48:	10001426 	beq	r2,zero,25a9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   25a4c:	e0bffb17 	ldw	r2,-20(fp)
   25a50:	10800017 	ldw	r2,0(r2)
   25a54:	10800617 	ldw	r2,24(r2)
   25a58:	e0ffff17 	ldw	r3,-4(fp)
   25a5c:	e13ffb17 	ldw	r4,-20(fp)
   25a60:	e17ffe17 	ldw	r5,-8(fp)
   25a64:	180d883a 	mov	r6,r3
   25a68:	103ee83a 	callr	r2
   25a6c:	e0bffc15 	stw	r2,-16(fp)
   25a70:	e0bffc17 	ldw	r2,-16(fp)
   25a74:	1000070e 	bge	r2,zero,25a94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   25a78:	00259880 	call	25988 <alt_get_errno>
   25a7c:	1007883a 	mov	r3,r2
   25a80:	e0bffc17 	ldw	r2,-16(fp)
   25a84:	0085c83a 	sub	r2,zero,r2
   25a88:	18800015 	stw	r2,0(r3)
        return -1;
   25a8c:	00bfffc4 	movi	r2,-1
   25a90:	00000c06 	br	25ac4 <write+0xec>
      }
      return rval;
   25a94:	e0bffc17 	ldw	r2,-16(fp)
   25a98:	00000a06 	br	25ac4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   25a9c:	00259880 	call	25988 <alt_get_errno>
   25aa0:	1007883a 	mov	r3,r2
   25aa4:	00800344 	movi	r2,13
   25aa8:	18800015 	stw	r2,0(r3)
   25aac:	00000406 	br	25ac0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   25ab0:	00259880 	call	25988 <alt_get_errno>
   25ab4:	1007883a 	mov	r3,r2
   25ab8:	00801444 	movi	r2,81
   25abc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   25ac0:	00bfffc4 	movi	r2,-1
}
   25ac4:	e037883a 	mov	sp,fp
   25ac8:	dfc00117 	ldw	ra,4(sp)
   25acc:	df000017 	ldw	fp,0(sp)
   25ad0:	dec00204 	addi	sp,sp,8
   25ad4:	f800283a 	ret

00025ad8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   25ad8:	defffd04 	addi	sp,sp,-12
   25adc:	dfc00215 	stw	ra,8(sp)
   25ae0:	df000115 	stw	fp,4(sp)
   25ae4:	df000104 	addi	fp,sp,4
   25ae8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   25aec:	e13fff17 	ldw	r4,-4(fp)
   25af0:	01420034 	movhi	r5,2048
   25af4:	29433604 	addi	r5,r5,3288
   25af8:	00264780 	call	26478 <alt_dev_llist_insert>
}
   25afc:	e037883a 	mov	sp,fp
   25b00:	dfc00117 	ldw	ra,4(sp)
   25b04:	df000017 	ldw	fp,0(sp)
   25b08:	dec00204 	addi	sp,sp,8
   25b0c:	f800283a 	ret

00025b10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   25b10:	defffd04 	addi	sp,sp,-12
   25b14:	dfc00215 	stw	ra,8(sp)
   25b18:	df000115 	stw	fp,4(sp)
   25b1c:	df000104 	addi	fp,sp,4
   25b20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   25b24:	0026afc0 	call	26afc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   25b28:	00800044 	movi	r2,1
   25b2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   25b30:	e037883a 	mov	sp,fp
   25b34:	dfc00117 	ldw	ra,4(sp)
   25b38:	df000017 	ldw	fp,0(sp)
   25b3c:	dec00204 	addi	sp,sp,8
   25b40:	f800283a 	ret

00025b44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   25b44:	defffe04 	addi	sp,sp,-8
   25b48:	dfc00115 	stw	ra,4(sp)
   25b4c:	df000015 	stw	fp,0(sp)
   25b50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   25b54:	01020034 	movhi	r4,2048
   25b58:	21028704 	addi	r4,r4,2588
   25b5c:	0025ad80 	call	25ad8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   25b60:	0001883a 	nop
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
   25b64:	01020034 	movhi	r4,2048
   25b68:	21029204 	addi	r4,r4,2632
   25b6c:	0025ad80 	call	25ad8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
   25b70:	01020034 	movhi	r4,2048
   25b74:	21029d04 	addi	r4,r4,2676
   25b78:	0025ad80 	call	25ad8 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_IC, sd_card_ic);
   25b7c:	01020034 	movhi	r4,2048
   25b80:	2102a804 	addi	r4,r4,2720
   25b84:	0025ad80 	call	25ad8 <alt_dev_reg>
}
   25b88:	e037883a 	mov	sp,fp
   25b8c:	dfc00117 	ldw	ra,4(sp)
   25b90:	df000017 	ldw	fp,0(sp)
   25b94:	dec00204 	addi	sp,sp,8
   25b98:	f800283a 	ret

00025b9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   25b9c:	defffa04 	addi	sp,sp,-24
   25ba0:	dfc00515 	stw	ra,20(sp)
   25ba4:	df000415 	stw	fp,16(sp)
   25ba8:	df000404 	addi	fp,sp,16
   25bac:	e13ffd15 	stw	r4,-12(fp)
   25bb0:	e17ffe15 	stw	r5,-8(fp)
   25bb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25bb8:	e0bffd17 	ldw	r2,-12(fp)
   25bbc:	10800017 	ldw	r2,0(r2)
   25bc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   25bc4:	e0bffc17 	ldw	r2,-16(fp)
   25bc8:	10c00a04 	addi	r3,r2,40
   25bcc:	e0bffd17 	ldw	r2,-12(fp)
   25bd0:	10800217 	ldw	r2,8(r2)
   25bd4:	1809883a 	mov	r4,r3
   25bd8:	e17ffe17 	ldw	r5,-8(fp)
   25bdc:	e1bfff17 	ldw	r6,-4(fp)
   25be0:	100f883a 	mov	r7,r2
   25be4:	0025c5c0 	call	25c5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   25be8:	e037883a 	mov	sp,fp
   25bec:	dfc00117 	ldw	ra,4(sp)
   25bf0:	df000017 	ldw	fp,0(sp)
   25bf4:	dec00204 	addi	sp,sp,8
   25bf8:	f800283a 	ret

00025bfc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25bfc:	defffa04 	addi	sp,sp,-24
   25c00:	dfc00515 	stw	ra,20(sp)
   25c04:	df000415 	stw	fp,16(sp)
   25c08:	df000404 	addi	fp,sp,16
   25c0c:	e13ffd15 	stw	r4,-12(fp)
   25c10:	e17ffe15 	stw	r5,-8(fp)
   25c14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   25c18:	e0bffd17 	ldw	r2,-12(fp)
   25c1c:	10800017 	ldw	r2,0(r2)
   25c20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   25c24:	e0bffc17 	ldw	r2,-16(fp)
   25c28:	10c00a04 	addi	r3,r2,40
   25c2c:	e0bffd17 	ldw	r2,-12(fp)
   25c30:	10800217 	ldw	r2,8(r2)
   25c34:	1809883a 	mov	r4,r3
   25c38:	e17ffe17 	ldw	r5,-8(fp)
   25c3c:	e1bfff17 	ldw	r6,-4(fp)
   25c40:	100f883a 	mov	r7,r2
   25c44:	0025d400 	call	25d40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   25c48:	e037883a 	mov	sp,fp
   25c4c:	dfc00117 	ldw	ra,4(sp)
   25c50:	df000017 	ldw	fp,0(sp)
   25c54:	dec00204 	addi	sp,sp,8
   25c58:	f800283a 	ret

00025c5c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   25c5c:	defff704 	addi	sp,sp,-36
   25c60:	df000815 	stw	fp,32(sp)
   25c64:	df000804 	addi	fp,sp,32
   25c68:	e13ffc15 	stw	r4,-16(fp)
   25c6c:	e17ffd15 	stw	r5,-12(fp)
   25c70:	e1bffe15 	stw	r6,-8(fp)
   25c74:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   25c78:	e0bffc17 	ldw	r2,-16(fp)
   25c7c:	10800017 	ldw	r2,0(r2)
   25c80:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   25c84:	e0bffd17 	ldw	r2,-12(fp)
   25c88:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   25c8c:	e0bffe17 	ldw	r2,-8(fp)
   25c90:	e0fffd17 	ldw	r3,-12(fp)
   25c94:	1885883a 	add	r2,r3,r2
   25c98:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   25c9c:	00001406 	br	25cf0 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   25ca0:	e0bff917 	ldw	r2,-28(fp)
   25ca4:	10800037 	ldwio	r2,0(r2)
   25ca8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   25cac:	e0bffb17 	ldw	r2,-20(fp)
   25cb0:	10a0000c 	andi	r2,r2,32768
   25cb4:	10000626 	beq	r2,zero,25cd0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   25cb8:	e0bff817 	ldw	r2,-32(fp)
   25cbc:	10c00044 	addi	r3,r2,1
   25cc0:	e0fff815 	stw	r3,-32(fp)
   25cc4:	e0fffb17 	ldw	r3,-20(fp)
   25cc8:	10c00005 	stb	r3,0(r2)
   25ccc:	00000806 	br	25cf0 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   25cd0:	e0fff817 	ldw	r3,-32(fp)
   25cd4:	e0bffd17 	ldw	r2,-12(fp)
   25cd8:	18800126 	beq	r3,r2,25ce0 <altera_avalon_jtag_uart_read+0x84>
      break;
   25cdc:	00000706 	br	25cfc <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   25ce0:	e0bfff17 	ldw	r2,-4(fp)
   25ce4:	1090000c 	andi	r2,r2,16384
   25ce8:	10000126 	beq	r2,zero,25cf0 <altera_avalon_jtag_uart_read+0x94>
      break;   
   25cec:	00000306 	br	25cfc <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   25cf0:	e0fff817 	ldw	r3,-32(fp)
   25cf4:	e0bffa17 	ldw	r2,-24(fp)
   25cf8:	18bfe936 	bltu	r3,r2,25ca0 <__alt_data_end+0xf4025ca0>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   25cfc:	e0fff817 	ldw	r3,-32(fp)
   25d00:	e0bffd17 	ldw	r2,-12(fp)
   25d04:	18800426 	beq	r3,r2,25d18 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   25d08:	e0fff817 	ldw	r3,-32(fp)
   25d0c:	e0bffd17 	ldw	r2,-12(fp)
   25d10:	1885c83a 	sub	r2,r3,r2
   25d14:	00000606 	br	25d30 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   25d18:	e0bfff17 	ldw	r2,-4(fp)
   25d1c:	1090000c 	andi	r2,r2,16384
   25d20:	10000226 	beq	r2,zero,25d2c <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   25d24:	00bffd44 	movi	r2,-11
   25d28:	00000106 	br	25d30 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   25d2c:	00bffec4 	movi	r2,-5
}
   25d30:	e037883a 	mov	sp,fp
   25d34:	df000017 	ldw	fp,0(sp)
   25d38:	dec00104 	addi	sp,sp,4
   25d3c:	f800283a 	ret

00025d40 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   25d40:	defff904 	addi	sp,sp,-28
   25d44:	df000615 	stw	fp,24(sp)
   25d48:	df000604 	addi	fp,sp,24
   25d4c:	e13ffc15 	stw	r4,-16(fp)
   25d50:	e17ffd15 	stw	r5,-12(fp)
   25d54:	e1bffe15 	stw	r6,-8(fp)
   25d58:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   25d5c:	e0bffc17 	ldw	r2,-16(fp)
   25d60:	10800017 	ldw	r2,0(r2)
   25d64:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   25d68:	e0bffe17 	ldw	r2,-8(fp)
   25d6c:	e0fffd17 	ldw	r3,-12(fp)
   25d70:	1885883a 	add	r2,r3,r2
   25d74:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   25d78:	00000e06 	br	25db4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   25d7c:	e0bffa17 	ldw	r2,-24(fp)
   25d80:	10800104 	addi	r2,r2,4
   25d84:	10800037 	ldwio	r2,0(r2)
   25d88:	10bfffec 	andhi	r2,r2,65535
   25d8c:	10000926 	beq	r2,zero,25db4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   25d90:	e0fffa17 	ldw	r3,-24(fp)
   25d94:	e0bffd17 	ldw	r2,-12(fp)
   25d98:	11000044 	addi	r4,r2,1
   25d9c:	e13ffd15 	stw	r4,-12(fp)
   25da0:	10800003 	ldbu	r2,0(r2)
   25da4:	10803fcc 	andi	r2,r2,255
   25da8:	1080201c 	xori	r2,r2,128
   25dac:	10bfe004 	addi	r2,r2,-128
   25db0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   25db4:	e0fffd17 	ldw	r3,-12(fp)
   25db8:	e0bffb17 	ldw	r2,-20(fp)
   25dbc:	18bfef36 	bltu	r3,r2,25d7c <__alt_data_end+0xf4025d7c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   25dc0:	e0bffe17 	ldw	r2,-8(fp)
}
   25dc4:	e037883a 	mov	sp,fp
   25dc8:	df000017 	ldw	fp,0(sp)
   25dcc:	dec00104 	addi	sp,sp,4
   25dd0:	f800283a 	ret

00025dd4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   25dd4:	defffd04 	addi	sp,sp,-12
   25dd8:	df000215 	stw	fp,8(sp)
   25ddc:	df000204 	addi	fp,sp,8
   25de0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25de4:	e0bfff17 	ldw	r2,-4(fp)
   25de8:	10800a17 	ldw	r2,40(r2)
   25dec:	10800104 	addi	r2,r2,4
   25df0:	10800037 	ldwio	r2,0(r2)
   25df4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   25df8:	e0bffe17 	ldw	r2,-8(fp)
   25dfc:	10800054 	ori	r2,r2,1
   25e00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   25e04:	e0bfff17 	ldw	r2,-4(fp)
   25e08:	10800a17 	ldw	r2,40(r2)
   25e0c:	10800104 	addi	r2,r2,4
   25e10:	1007883a 	mov	r3,r2
   25e14:	e0bffe17 	ldw	r2,-8(fp)
   25e18:	18800035 	stwio	r2,0(r3)
}
   25e1c:	e037883a 	mov	sp,fp
   25e20:	df000017 	ldw	fp,0(sp)
   25e24:	dec00104 	addi	sp,sp,4
   25e28:	f800283a 	ret

00025e2c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   25e2c:	defffd04 	addi	sp,sp,-12
   25e30:	df000215 	stw	fp,8(sp)
   25e34:	df000204 	addi	fp,sp,8
   25e38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25e3c:	e0bfff17 	ldw	r2,-4(fp)
   25e40:	10800a17 	ldw	r2,40(r2)
   25e44:	10800104 	addi	r2,r2,4
   25e48:	10800037 	ldwio	r2,0(r2)
   25e4c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   25e50:	e0fffe17 	ldw	r3,-8(fp)
   25e54:	00bfff84 	movi	r2,-2
   25e58:	1884703a 	and	r2,r3,r2
   25e5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   25e60:	e0bfff17 	ldw	r2,-4(fp)
   25e64:	10800a17 	ldw	r2,40(r2)
   25e68:	10800104 	addi	r2,r2,4
   25e6c:	1007883a 	mov	r3,r2
   25e70:	e0bffe17 	ldw	r2,-8(fp)
   25e74:	18800035 	stwio	r2,0(r3)
}
   25e78:	e037883a 	mov	sp,fp
   25e7c:	df000017 	ldw	fp,0(sp)
   25e80:	dec00104 	addi	sp,sp,4
   25e84:	f800283a 	ret

00025e88 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   25e88:	defffd04 	addi	sp,sp,-12
   25e8c:	df000215 	stw	fp,8(sp)
   25e90:	df000204 	addi	fp,sp,8
   25e94:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   25e98:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   25e9c:	e0bfff17 	ldw	r2,-4(fp)
   25ea0:	10800a17 	ldw	r2,40(r2)
   25ea4:	10800084 	addi	r2,r2,2
   25ea8:	1080002b 	ldhuio	r2,0(r2)
   25eac:	10bfffcc 	andi	r2,r2,65535
   25eb0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   25eb4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   25eb8:	e037883a 	mov	sp,fp
   25ebc:	df000017 	ldw	fp,0(sp)
   25ec0:	dec00104 	addi	sp,sp,4
   25ec4:	f800283a 	ret

00025ec8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   25ec8:	defffd04 	addi	sp,sp,-12
   25ecc:	df000215 	stw	fp,8(sp)
   25ed0:	df000204 	addi	fp,sp,8
   25ed4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25ed8:	e0bfff17 	ldw	r2,-4(fp)
   25edc:	10800a17 	ldw	r2,40(r2)
   25ee0:	10800104 	addi	r2,r2,4
   25ee4:	10800037 	ldwio	r2,0(r2)
   25ee8:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   25eec:	e0bffe17 	ldw	r2,-8(fp)
   25ef0:	1004d43a 	srli	r2,r2,16
}
   25ef4:	e037883a 	mov	sp,fp
   25ef8:	df000017 	ldw	fp,0(sp)
   25efc:	dec00104 	addi	sp,sp,4
   25f00:	f800283a 	ret

00025f04 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   25f04:	defffd04 	addi	sp,sp,-12
   25f08:	df000215 	stw	fp,8(sp)
   25f0c:	df000204 	addi	fp,sp,8
   25f10:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   25f14:	e0bfff17 	ldw	r2,-4(fp)
   25f18:	1080800c 	andi	r2,r2,512
   25f1c:	1004d27a 	srli	r2,r2,9
   25f20:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   25f24:	e0bffe17 	ldw	r2,-8(fp)
   25f28:	10000226 	beq	r2,zero,25f34 <alt_up_rs232_check_parity+0x30>
   25f2c:	00bfffc4 	movi	r2,-1
   25f30:	00000106 	br	25f38 <alt_up_rs232_check_parity+0x34>
   25f34:	0005883a 	mov	r2,zero
}
   25f38:	e037883a 	mov	sp,fp
   25f3c:	df000017 	ldw	fp,0(sp)
   25f40:	dec00104 	addi	sp,sp,4
   25f44:	f800283a 	ret

00025f48 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   25f48:	defffd04 	addi	sp,sp,-12
   25f4c:	df000215 	stw	fp,8(sp)
   25f50:	df000204 	addi	fp,sp,8
   25f54:	e13ffe15 	stw	r4,-8(fp)
   25f58:	2805883a 	mov	r2,r5
   25f5c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   25f60:	e0bffe17 	ldw	r2,-8(fp)
   25f64:	10800a17 	ldw	r2,40(r2)
   25f68:	1007883a 	mov	r3,r2
   25f6c:	e0bfff03 	ldbu	r2,-4(fp)
   25f70:	18800035 	stwio	r2,0(r3)
	return 0;
   25f74:	0005883a 	mov	r2,zero
}
   25f78:	e037883a 	mov	sp,fp
   25f7c:	df000017 	ldw	fp,0(sp)
   25f80:	dec00104 	addi	sp,sp,4
   25f84:	f800283a 	ret

00025f88 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   25f88:	defffa04 	addi	sp,sp,-24
   25f8c:	dfc00515 	stw	ra,20(sp)
   25f90:	df000415 	stw	fp,16(sp)
   25f94:	df000404 	addi	fp,sp,16
   25f98:	e13ffd15 	stw	r4,-12(fp)
   25f9c:	e17ffe15 	stw	r5,-8(fp)
   25fa0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   25fa4:	e0bffd17 	ldw	r2,-12(fp)
   25fa8:	10800a17 	ldw	r2,40(r2)
   25fac:	10800037 	ldwio	r2,0(r2)
   25fb0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   25fb4:	e0bffc17 	ldw	r2,-16(fp)
   25fb8:	1007883a 	mov	r3,r2
   25fbc:	e0bffe17 	ldw	r2,-8(fp)
   25fc0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   25fc4:	e13ffc17 	ldw	r4,-16(fp)
   25fc8:	0025f040 	call	25f04 <alt_up_rs232_check_parity>
   25fcc:	1007883a 	mov	r3,r2
   25fd0:	e0bfff17 	ldw	r2,-4(fp)
   25fd4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   25fd8:	e0bffc17 	ldw	r2,-16(fp)
   25fdc:	10a0000c 	andi	r2,r2,32768
   25fe0:	1004d3fa 	srli	r2,r2,15
   25fe4:	10bfffc4 	addi	r2,r2,-1
}
   25fe8:	e037883a 	mov	sp,fp
   25fec:	dfc00117 	ldw	ra,4(sp)
   25ff0:	df000017 	ldw	fp,0(sp)
   25ff4:	dec00204 	addi	sp,sp,8
   25ff8:	f800283a 	ret

00025ffc <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   25ffc:	defff804 	addi	sp,sp,-32
   26000:	dfc00715 	stw	ra,28(sp)
   26004:	df000615 	stw	fp,24(sp)
   26008:	df000604 	addi	fp,sp,24
   2600c:	e13ffd15 	stw	r4,-12(fp)
   26010:	e17ffe15 	stw	r5,-8(fp)
   26014:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   26018:	e0bffd17 	ldw	r2,-12(fp)
   2601c:	10800017 	ldw	r2,0(r2)
   26020:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   26024:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   26028:	00000e06 	br	26064 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   2602c:	e0bffe17 	ldw	r2,-8(fp)
   26030:	10c00044 	addi	r3,r2,1
   26034:	e0fffe15 	stw	r3,-8(fp)
   26038:	e0fffc04 	addi	r3,fp,-16
   2603c:	e13ffb17 	ldw	r4,-20(fp)
   26040:	100b883a 	mov	r5,r2
   26044:	180d883a 	mov	r6,r3
   26048:	0025f880 	call	25f88 <alt_up_rs232_read_data>
   2604c:	1000041e 	bne	r2,zero,26060 <alt_up_rs232_read_fd+0x64>
			count++;
   26050:	e0bffa17 	ldw	r2,-24(fp)
   26054:	10800044 	addi	r2,r2,1
   26058:	e0bffa15 	stw	r2,-24(fp)
   2605c:	00000106 	br	26064 <alt_up_rs232_read_fd+0x68>
		else
			break;
   26060:	00000406 	br	26074 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   26064:	e0bfff17 	ldw	r2,-4(fp)
   26068:	10ffffc4 	addi	r3,r2,-1
   2606c:	e0ffff15 	stw	r3,-4(fp)
   26070:	103fee1e 	bne	r2,zero,2602c <__alt_data_end+0xf402602c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   26074:	e0bffa17 	ldw	r2,-24(fp)
}
   26078:	e037883a 	mov	sp,fp
   2607c:	dfc00117 	ldw	ra,4(sp)
   26080:	df000017 	ldw	fp,0(sp)
   26084:	dec00204 	addi	sp,sp,8
   26088:	f800283a 	ret

0002608c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   2608c:	defff904 	addi	sp,sp,-28
   26090:	dfc00615 	stw	ra,24(sp)
   26094:	df000515 	stw	fp,20(sp)
   26098:	df000504 	addi	fp,sp,20
   2609c:	e13ffd15 	stw	r4,-12(fp)
   260a0:	e17ffe15 	stw	r5,-8(fp)
   260a4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   260a8:	e0bffd17 	ldw	r2,-12(fp)
   260ac:	10800017 	ldw	r2,0(r2)
   260b0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   260b4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   260b8:	00000f06 	br	260f8 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   260bc:	e0bffe17 	ldw	r2,-8(fp)
   260c0:	10800003 	ldbu	r2,0(r2)
   260c4:	10803fcc 	andi	r2,r2,255
   260c8:	e13ffc17 	ldw	r4,-16(fp)
   260cc:	100b883a 	mov	r5,r2
   260d0:	0025f480 	call	25f48 <alt_up_rs232_write_data>
   260d4:	1000071e 	bne	r2,zero,260f4 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   260d8:	e0bffb17 	ldw	r2,-20(fp)
   260dc:	10800044 	addi	r2,r2,1
   260e0:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   260e4:	e0bffe17 	ldw	r2,-8(fp)
   260e8:	10800044 	addi	r2,r2,1
   260ec:	e0bffe15 	stw	r2,-8(fp)
   260f0:	00000106 	br	260f8 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   260f4:	00000406 	br	26108 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   260f8:	e0bfff17 	ldw	r2,-4(fp)
   260fc:	10ffffc4 	addi	r3,r2,-1
   26100:	e0ffff15 	stw	r3,-4(fp)
   26104:	103fed1e 	bne	r2,zero,260bc <__alt_data_end+0xf40260bc>
			ptr++;
		}
		else
			break;
	}
	return count;
   26108:	e0bffb17 	ldw	r2,-20(fp)
}
   2610c:	e037883a 	mov	sp,fp
   26110:	dfc00117 	ldw	ra,4(sp)
   26114:	df000017 	ldw	fp,0(sp)
   26118:	dec00204 	addi	sp,sp,8
   2611c:	f800283a 	ret

00026120 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   26120:	defffc04 	addi	sp,sp,-16
   26124:	dfc00315 	stw	ra,12(sp)
   26128:	df000215 	stw	fp,8(sp)
   2612c:	df000204 	addi	fp,sp,8
   26130:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   26134:	e13fff17 	ldw	r4,-4(fp)
   26138:	01420034 	movhi	r5,2048
   2613c:	29433604 	addi	r5,r5,3288
   26140:	00265d40 	call	265d4 <alt_find_dev>
   26144:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   26148:	e0bffe17 	ldw	r2,-8(fp)
}
   2614c:	e037883a 	mov	sp,fp
   26150:	dfc00117 	ldw	ra,4(sp)
   26154:	df000017 	ldw	fp,0(sp)
   26158:	dec00204 	addi	sp,sp,8
   2615c:	f800283a 	ret

00026160 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   26160:	defffa04 	addi	sp,sp,-24
   26164:	dfc00515 	stw	ra,20(sp)
   26168:	df000415 	stw	fp,16(sp)
   2616c:	df000404 	addi	fp,sp,16
   26170:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   26174:	00800244 	movi	r2,9
   26178:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   2617c:	e13ffd17 	ldw	r4,-12(fp)
   26180:	014003f4 	movhi	r5,15
   26184:	29509004 	addi	r5,r5,16960
   26188:	0022d000 	call	22d00 <__mulsi3>
   2618c:	0100bef4 	movhi	r4,763
   26190:	213c2004 	addi	r4,r4,-3968
   26194:	100b883a 	mov	r5,r2
   26198:	00252bc0 	call	252bc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   2619c:	01200034 	movhi	r4,32768
   261a0:	213fffc4 	addi	r4,r4,-1
   261a4:	100b883a 	mov	r5,r2
   261a8:	00252bc0 	call	252bc <__udivsi3>
   261ac:	e13fff17 	ldw	r4,-4(fp)
   261b0:	100b883a 	mov	r5,r2
   261b4:	00252bc0 	call	252bc <__udivsi3>
   261b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   261bc:	e0bffe17 	ldw	r2,-8(fp)
   261c0:	10002a26 	beq	r2,zero,2626c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   261c4:	e03ffc15 	stw	zero,-16(fp)
   261c8:	00001706 	br	26228 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   261cc:	00a00034 	movhi	r2,32768
   261d0:	10bfffc4 	addi	r2,r2,-1
   261d4:	10bfffc4 	addi	r2,r2,-1
   261d8:	103ffe1e 	bne	r2,zero,261d4 <__alt_data_end+0xf40261d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   261dc:	e13ffd17 	ldw	r4,-12(fp)
   261e0:	014003f4 	movhi	r5,15
   261e4:	29509004 	addi	r5,r5,16960
   261e8:	0022d000 	call	22d00 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   261ec:	0100bef4 	movhi	r4,763
   261f0:	213c2004 	addi	r4,r4,-3968
   261f4:	100b883a 	mov	r5,r2
   261f8:	00252bc0 	call	252bc <__udivsi3>
   261fc:	01200034 	movhi	r4,32768
   26200:	213fffc4 	addi	r4,r4,-1
   26204:	100b883a 	mov	r5,r2
   26208:	00252bc0 	call	252bc <__udivsi3>
   2620c:	1007883a 	mov	r3,r2
   26210:	e0bfff17 	ldw	r2,-4(fp)
   26214:	10c5c83a 	sub	r2,r2,r3
   26218:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   2621c:	e0bffc17 	ldw	r2,-16(fp)
   26220:	10800044 	addi	r2,r2,1
   26224:	e0bffc15 	stw	r2,-16(fp)
   26228:	e0fffc17 	ldw	r3,-16(fp)
   2622c:	e0bffe17 	ldw	r2,-8(fp)
   26230:	18bfe616 	blt	r3,r2,261cc <__alt_data_end+0xf40261cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   26234:	e13ffd17 	ldw	r4,-12(fp)
   26238:	014003f4 	movhi	r5,15
   2623c:	29509004 	addi	r5,r5,16960
   26240:	0022d000 	call	22d00 <__mulsi3>
   26244:	0100bef4 	movhi	r4,763
   26248:	213c2004 	addi	r4,r4,-3968
   2624c:	100b883a 	mov	r5,r2
   26250:	00252bc0 	call	252bc <__udivsi3>
   26254:	1009883a 	mov	r4,r2
   26258:	e17fff17 	ldw	r5,-4(fp)
   2625c:	0022d000 	call	22d00 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   26260:	10bfffc4 	addi	r2,r2,-1
   26264:	103ffe1e 	bne	r2,zero,26260 <__alt_data_end+0xf4026260>
   26268:	00000d06 	br	262a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2626c:	e13ffd17 	ldw	r4,-12(fp)
   26270:	014003f4 	movhi	r5,15
   26274:	29509004 	addi	r5,r5,16960
   26278:	0022d000 	call	22d00 <__mulsi3>
   2627c:	0100bef4 	movhi	r4,763
   26280:	213c2004 	addi	r4,r4,-3968
   26284:	100b883a 	mov	r5,r2
   26288:	00252bc0 	call	252bc <__udivsi3>
   2628c:	1009883a 	mov	r4,r2
   26290:	e17fff17 	ldw	r5,-4(fp)
   26294:	0022d000 	call	22d00 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   26298:	10bfffc4 	addi	r2,r2,-1
   2629c:	00bffe16 	blt	zero,r2,26298 <__alt_data_end+0xf4026298>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   262a0:	0005883a 	mov	r2,zero
}
   262a4:	e037883a 	mov	sp,fp
   262a8:	dfc00117 	ldw	ra,4(sp)
   262ac:	df000017 	ldw	fp,0(sp)
   262b0:	dec00204 	addi	sp,sp,8
   262b4:	f800283a 	ret

000262b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   262b8:	defffe04 	addi	sp,sp,-8
   262bc:	dfc00115 	stw	ra,4(sp)
   262c0:	df000015 	stw	fp,0(sp)
   262c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   262c8:	00820034 	movhi	r2,2048
   262cc:	10833904 	addi	r2,r2,3300
   262d0:	10800017 	ldw	r2,0(r2)
   262d4:	10000526 	beq	r2,zero,262ec <alt_get_errno+0x34>
   262d8:	00820034 	movhi	r2,2048
   262dc:	10833904 	addi	r2,r2,3300
   262e0:	10800017 	ldw	r2,0(r2)
   262e4:	103ee83a 	callr	r2
   262e8:	00000206 	br	262f4 <alt_get_errno+0x3c>
   262ec:	00820034 	movhi	r2,2048
   262f0:	10834204 	addi	r2,r2,3336
}
   262f4:	e037883a 	mov	sp,fp
   262f8:	dfc00117 	ldw	ra,4(sp)
   262fc:	df000017 	ldw	fp,0(sp)
   26300:	dec00204 	addi	sp,sp,8
   26304:	f800283a 	ret

00026308 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   26308:	defffb04 	addi	sp,sp,-20
   2630c:	dfc00415 	stw	ra,16(sp)
   26310:	df000315 	stw	fp,12(sp)
   26314:	df000304 	addi	fp,sp,12
   26318:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2631c:	e0bfff17 	ldw	r2,-4(fp)
   26320:	10000816 	blt	r2,zero,26344 <close+0x3c>
   26324:	e13fff17 	ldw	r4,-4(fp)
   26328:	01400304 	movi	r5,12
   2632c:	0022d000 	call	22d00 <__mulsi3>
   26330:	1007883a 	mov	r3,r2
   26334:	00820034 	movhi	r2,2048
   26338:	1082bd04 	addi	r2,r2,2804
   2633c:	1885883a 	add	r2,r3,r2
   26340:	00000106 	br	26348 <close+0x40>
   26344:	0005883a 	mov	r2,zero
   26348:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2634c:	e0bffd17 	ldw	r2,-12(fp)
   26350:	10001926 	beq	r2,zero,263b8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   26354:	e0bffd17 	ldw	r2,-12(fp)
   26358:	10800017 	ldw	r2,0(r2)
   2635c:	10800417 	ldw	r2,16(r2)
   26360:	10000626 	beq	r2,zero,2637c <close+0x74>
   26364:	e0bffd17 	ldw	r2,-12(fp)
   26368:	10800017 	ldw	r2,0(r2)
   2636c:	10800417 	ldw	r2,16(r2)
   26370:	e13ffd17 	ldw	r4,-12(fp)
   26374:	103ee83a 	callr	r2
   26378:	00000106 	br	26380 <close+0x78>
   2637c:	0005883a 	mov	r2,zero
   26380:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   26384:	e13fff17 	ldw	r4,-4(fp)
   26388:	0026a7c0 	call	26a7c <alt_release_fd>
    if (rval < 0)
   2638c:	e0bffe17 	ldw	r2,-8(fp)
   26390:	1000070e 	bge	r2,zero,263b0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   26394:	00262b80 	call	262b8 <alt_get_errno>
   26398:	1007883a 	mov	r3,r2
   2639c:	e0bffe17 	ldw	r2,-8(fp)
   263a0:	0085c83a 	sub	r2,zero,r2
   263a4:	18800015 	stw	r2,0(r3)
      return -1;
   263a8:	00bfffc4 	movi	r2,-1
   263ac:	00000706 	br	263cc <close+0xc4>
    }
    return 0;
   263b0:	0005883a 	mov	r2,zero
   263b4:	00000506 	br	263cc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   263b8:	00262b80 	call	262b8 <alt_get_errno>
   263bc:	1007883a 	mov	r3,r2
   263c0:	00801444 	movi	r2,81
   263c4:	18800015 	stw	r2,0(r3)
    return -1;
   263c8:	00bfffc4 	movi	r2,-1
  }
}
   263cc:	e037883a 	mov	sp,fp
   263d0:	dfc00117 	ldw	ra,4(sp)
   263d4:	df000017 	ldw	fp,0(sp)
   263d8:	dec00204 	addi	sp,sp,8
   263dc:	f800283a 	ret

000263e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   263e0:	deffff04 	addi	sp,sp,-4
   263e4:	df000015 	stw	fp,0(sp)
   263e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   263ec:	e037883a 	mov	sp,fp
   263f0:	df000017 	ldw	fp,0(sp)
   263f4:	dec00104 	addi	sp,sp,4
   263f8:	f800283a 	ret

000263fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   263fc:	defffc04 	addi	sp,sp,-16
   26400:	df000315 	stw	fp,12(sp)
   26404:	df000304 	addi	fp,sp,12
   26408:	e13ffd15 	stw	r4,-12(fp)
   2640c:	e17ffe15 	stw	r5,-8(fp)
   26410:	e1bfff15 	stw	r6,-4(fp)
  return len;
   26414:	e0bfff17 	ldw	r2,-4(fp)
}
   26418:	e037883a 	mov	sp,fp
   2641c:	df000017 	ldw	fp,0(sp)
   26420:	dec00104 	addi	sp,sp,4
   26424:	f800283a 	ret

00026428 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   26428:	defffe04 	addi	sp,sp,-8
   2642c:	dfc00115 	stw	ra,4(sp)
   26430:	df000015 	stw	fp,0(sp)
   26434:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   26438:	00820034 	movhi	r2,2048
   2643c:	10833904 	addi	r2,r2,3300
   26440:	10800017 	ldw	r2,0(r2)
   26444:	10000526 	beq	r2,zero,2645c <alt_get_errno+0x34>
   26448:	00820034 	movhi	r2,2048
   2644c:	10833904 	addi	r2,r2,3300
   26450:	10800017 	ldw	r2,0(r2)
   26454:	103ee83a 	callr	r2
   26458:	00000206 	br	26464 <alt_get_errno+0x3c>
   2645c:	00820034 	movhi	r2,2048
   26460:	10834204 	addi	r2,r2,3336
}
   26464:	e037883a 	mov	sp,fp
   26468:	dfc00117 	ldw	ra,4(sp)
   2646c:	df000017 	ldw	fp,0(sp)
   26470:	dec00204 	addi	sp,sp,8
   26474:	f800283a 	ret

00026478 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   26478:	defffa04 	addi	sp,sp,-24
   2647c:	dfc00515 	stw	ra,20(sp)
   26480:	df000415 	stw	fp,16(sp)
   26484:	df000404 	addi	fp,sp,16
   26488:	e13ffe15 	stw	r4,-8(fp)
   2648c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   26490:	e0bffe17 	ldw	r2,-8(fp)
   26494:	10000326 	beq	r2,zero,264a4 <alt_dev_llist_insert+0x2c>
   26498:	e0bffe17 	ldw	r2,-8(fp)
   2649c:	10800217 	ldw	r2,8(r2)
   264a0:	1000061e 	bne	r2,zero,264bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   264a4:	00264280 	call	26428 <alt_get_errno>
   264a8:	1007883a 	mov	r3,r2
   264ac:	00800584 	movi	r2,22
   264b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   264b4:	00bffa84 	movi	r2,-22
   264b8:	00001306 	br	26508 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   264bc:	e0bffe17 	ldw	r2,-8(fp)
   264c0:	e0ffff17 	ldw	r3,-4(fp)
   264c4:	e0fffc15 	stw	r3,-16(fp)
   264c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   264cc:	e0bffd17 	ldw	r2,-12(fp)
   264d0:	e0fffc17 	ldw	r3,-16(fp)
   264d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   264d8:	e0bffc17 	ldw	r2,-16(fp)
   264dc:	10c00017 	ldw	r3,0(r2)
   264e0:	e0bffd17 	ldw	r2,-12(fp)
   264e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   264e8:	e0bffc17 	ldw	r2,-16(fp)
   264ec:	10800017 	ldw	r2,0(r2)
   264f0:	e0fffd17 	ldw	r3,-12(fp)
   264f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   264f8:	e0bffc17 	ldw	r2,-16(fp)
   264fc:	e0fffd17 	ldw	r3,-12(fp)
   26500:	10c00015 	stw	r3,0(r2)

  return 0;  
   26504:	0005883a 	mov	r2,zero
}
   26508:	e037883a 	mov	sp,fp
   2650c:	dfc00117 	ldw	ra,4(sp)
   26510:	df000017 	ldw	fp,0(sp)
   26514:	dec00204 	addi	sp,sp,8
   26518:	f800283a 	ret

0002651c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2651c:	defffd04 	addi	sp,sp,-12
   26520:	dfc00215 	stw	ra,8(sp)
   26524:	df000115 	stw	fp,4(sp)
   26528:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2652c:	008000b4 	movhi	r2,2
   26530:	109c2204 	addi	r2,r2,28808
   26534:	e0bfff15 	stw	r2,-4(fp)
   26538:	00000606 	br	26554 <_do_ctors+0x38>
        (*ctor) (); 
   2653c:	e0bfff17 	ldw	r2,-4(fp)
   26540:	10800017 	ldw	r2,0(r2)
   26544:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   26548:	e0bfff17 	ldw	r2,-4(fp)
   2654c:	10bfff04 	addi	r2,r2,-4
   26550:	e0bfff15 	stw	r2,-4(fp)
   26554:	e0ffff17 	ldw	r3,-4(fp)
   26558:	008000b4 	movhi	r2,2
   2655c:	109c2204 	addi	r2,r2,28808
   26560:	18bff62e 	bgeu	r3,r2,2653c <__alt_data_end+0xf402653c>
        (*ctor) (); 
}
   26564:	e037883a 	mov	sp,fp
   26568:	dfc00117 	ldw	ra,4(sp)
   2656c:	df000017 	ldw	fp,0(sp)
   26570:	dec00204 	addi	sp,sp,8
   26574:	f800283a 	ret

00026578 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   26578:	defffd04 	addi	sp,sp,-12
   2657c:	dfc00215 	stw	ra,8(sp)
   26580:	df000115 	stw	fp,4(sp)
   26584:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   26588:	008000b4 	movhi	r2,2
   2658c:	109c2304 	addi	r2,r2,28812
   26590:	e0bfff15 	stw	r2,-4(fp)
   26594:	00000606 	br	265b0 <_do_dtors+0x38>
        (*dtor) (); 
   26598:	e0bfff17 	ldw	r2,-4(fp)
   2659c:	10800017 	ldw	r2,0(r2)
   265a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   265a4:	e0bfff17 	ldw	r2,-4(fp)
   265a8:	10bfff04 	addi	r2,r2,-4
   265ac:	e0bfff15 	stw	r2,-4(fp)
   265b0:	e0ffff17 	ldw	r3,-4(fp)
   265b4:	008000b4 	movhi	r2,2
   265b8:	109c2304 	addi	r2,r2,28812
   265bc:	18bff62e 	bgeu	r3,r2,26598 <__alt_data_end+0xf4026598>
        (*dtor) (); 
}
   265c0:	e037883a 	mov	sp,fp
   265c4:	dfc00117 	ldw	ra,4(sp)
   265c8:	df000017 	ldw	fp,0(sp)
   265cc:	dec00204 	addi	sp,sp,8
   265d0:	f800283a 	ret

000265d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   265d4:	defffa04 	addi	sp,sp,-24
   265d8:	dfc00515 	stw	ra,20(sp)
   265dc:	df000415 	stw	fp,16(sp)
   265e0:	df000404 	addi	fp,sp,16
   265e4:	e13ffe15 	stw	r4,-8(fp)
   265e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   265ec:	e0bfff17 	ldw	r2,-4(fp)
   265f0:	10800017 	ldw	r2,0(r2)
   265f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   265f8:	e13ffe17 	ldw	r4,-8(fp)
   265fc:	0023ee00 	call	23ee0 <strlen>
   26600:	10800044 	addi	r2,r2,1
   26604:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26608:	00000d06 	br	26640 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2660c:	e0bffc17 	ldw	r2,-16(fp)
   26610:	10c00217 	ldw	r3,8(r2)
   26614:	e0bffd17 	ldw	r2,-12(fp)
   26618:	1809883a 	mov	r4,r3
   2661c:	e17ffe17 	ldw	r5,-8(fp)
   26620:	100d883a 	mov	r6,r2
   26624:	0026d380 	call	26d38 <memcmp>
   26628:	1000021e 	bne	r2,zero,26634 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2662c:	e0bffc17 	ldw	r2,-16(fp)
   26630:	00000706 	br	26650 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   26634:	e0bffc17 	ldw	r2,-16(fp)
   26638:	10800017 	ldw	r2,0(r2)
   2663c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   26640:	e0fffc17 	ldw	r3,-16(fp)
   26644:	e0bfff17 	ldw	r2,-4(fp)
   26648:	18bff01e 	bne	r3,r2,2660c <__alt_data_end+0xf402660c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2664c:	0005883a 	mov	r2,zero
}
   26650:	e037883a 	mov	sp,fp
   26654:	dfc00117 	ldw	ra,4(sp)
   26658:	df000017 	ldw	fp,0(sp)
   2665c:	dec00204 	addi	sp,sp,8
   26660:	f800283a 	ret

00026664 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   26664:	deffff04 	addi	sp,sp,-4
   26668:	df000015 	stw	fp,0(sp)
   2666c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   26670:	e037883a 	mov	sp,fp
   26674:	df000017 	ldw	fp,0(sp)
   26678:	dec00104 	addi	sp,sp,4
   2667c:	f800283a 	ret

00026680 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   26680:	defff804 	addi	sp,sp,-32
   26684:	dfc00715 	stw	ra,28(sp)
   26688:	df000615 	stw	fp,24(sp)
   2668c:	dc000515 	stw	r16,20(sp)
   26690:	df000604 	addi	fp,sp,24
   26694:	e13ffb15 	stw	r4,-20(fp)
   26698:	e17ffc15 	stw	r5,-16(fp)
   2669c:	e1bffd15 	stw	r6,-12(fp)
   266a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   266a4:	e13ffc17 	ldw	r4,-16(fp)
   266a8:	e17ffd17 	ldw	r5,-12(fp)
   266ac:	e1bffe17 	ldw	r6,-8(fp)
   266b0:	002691c0 	call	2691c <open>
   266b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   266b8:	e0bffa17 	ldw	r2,-24(fp)
   266bc:	10002216 	blt	r2,zero,26748 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   266c0:	04020034 	movhi	r16,2048
   266c4:	8402bd04 	addi	r16,r16,2804
   266c8:	e0bffa17 	ldw	r2,-24(fp)
   266cc:	1009883a 	mov	r4,r2
   266d0:	01400304 	movi	r5,12
   266d4:	0022d000 	call	22d00 <__mulsi3>
   266d8:	8085883a 	add	r2,r16,r2
   266dc:	10c00017 	ldw	r3,0(r2)
   266e0:	e0bffb17 	ldw	r2,-20(fp)
   266e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   266e8:	04020034 	movhi	r16,2048
   266ec:	8402bd04 	addi	r16,r16,2804
   266f0:	e0bffa17 	ldw	r2,-24(fp)
   266f4:	1009883a 	mov	r4,r2
   266f8:	01400304 	movi	r5,12
   266fc:	0022d000 	call	22d00 <__mulsi3>
   26700:	8085883a 	add	r2,r16,r2
   26704:	10800104 	addi	r2,r2,4
   26708:	10c00017 	ldw	r3,0(r2)
   2670c:	e0bffb17 	ldw	r2,-20(fp)
   26710:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   26714:	04020034 	movhi	r16,2048
   26718:	8402bd04 	addi	r16,r16,2804
   2671c:	e0bffa17 	ldw	r2,-24(fp)
   26720:	1009883a 	mov	r4,r2
   26724:	01400304 	movi	r5,12
   26728:	0022d000 	call	22d00 <__mulsi3>
   2672c:	8085883a 	add	r2,r16,r2
   26730:	10800204 	addi	r2,r2,8
   26734:	10c00017 	ldw	r3,0(r2)
   26738:	e0bffb17 	ldw	r2,-20(fp)
   2673c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   26740:	e13ffa17 	ldw	r4,-24(fp)
   26744:	0026a7c0 	call	26a7c <alt_release_fd>
  }
} 
   26748:	e6ffff04 	addi	sp,fp,-4
   2674c:	dfc00217 	ldw	ra,8(sp)
   26750:	df000117 	ldw	fp,4(sp)
   26754:	dc000017 	ldw	r16,0(sp)
   26758:	dec00304 	addi	sp,sp,12
   2675c:	f800283a 	ret

00026760 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   26760:	defffb04 	addi	sp,sp,-20
   26764:	dfc00415 	stw	ra,16(sp)
   26768:	df000315 	stw	fp,12(sp)
   2676c:	df000304 	addi	fp,sp,12
   26770:	e13ffd15 	stw	r4,-12(fp)
   26774:	e17ffe15 	stw	r5,-8(fp)
   26778:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2677c:	01020034 	movhi	r4,2048
   26780:	2102c004 	addi	r4,r4,2816
   26784:	e17ffd17 	ldw	r5,-12(fp)
   26788:	01800044 	movi	r6,1
   2678c:	01c07fc4 	movi	r7,511
   26790:	00266800 	call	26680 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   26794:	01020034 	movhi	r4,2048
   26798:	2102bd04 	addi	r4,r4,2804
   2679c:	e17ffe17 	ldw	r5,-8(fp)
   267a0:	000d883a 	mov	r6,zero
   267a4:	01c07fc4 	movi	r7,511
   267a8:	00266800 	call	26680 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   267ac:	01020034 	movhi	r4,2048
   267b0:	2102c304 	addi	r4,r4,2828
   267b4:	e17fff17 	ldw	r5,-4(fp)
   267b8:	01800044 	movi	r6,1
   267bc:	01c07fc4 	movi	r7,511
   267c0:	00266800 	call	26680 <alt_open_fd>
}  
   267c4:	e037883a 	mov	sp,fp
   267c8:	dfc00117 	ldw	ra,4(sp)
   267cc:	df000017 	ldw	fp,0(sp)
   267d0:	dec00204 	addi	sp,sp,8
   267d4:	f800283a 	ret

000267d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   267d8:	defffe04 	addi	sp,sp,-8
   267dc:	dfc00115 	stw	ra,4(sp)
   267e0:	df000015 	stw	fp,0(sp)
   267e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   267e8:	00820034 	movhi	r2,2048
   267ec:	10833904 	addi	r2,r2,3300
   267f0:	10800017 	ldw	r2,0(r2)
   267f4:	10000526 	beq	r2,zero,2680c <alt_get_errno+0x34>
   267f8:	00820034 	movhi	r2,2048
   267fc:	10833904 	addi	r2,r2,3300
   26800:	10800017 	ldw	r2,0(r2)
   26804:	103ee83a 	callr	r2
   26808:	00000206 	br	26814 <alt_get_errno+0x3c>
   2680c:	00820034 	movhi	r2,2048
   26810:	10834204 	addi	r2,r2,3336
}
   26814:	e037883a 	mov	sp,fp
   26818:	dfc00117 	ldw	ra,4(sp)
   2681c:	df000017 	ldw	fp,0(sp)
   26820:	dec00204 	addi	sp,sp,8
   26824:	f800283a 	ret

00026828 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   26828:	defffb04 	addi	sp,sp,-20
   2682c:	dfc00415 	stw	ra,16(sp)
   26830:	df000315 	stw	fp,12(sp)
   26834:	dc000215 	stw	r16,8(sp)
   26838:	df000304 	addi	fp,sp,12
   2683c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   26840:	e0bffe17 	ldw	r2,-8(fp)
   26844:	10800217 	ldw	r2,8(r2)
   26848:	10d00034 	orhi	r3,r2,16384
   2684c:	e0bffe17 	ldw	r2,-8(fp)
   26850:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   26854:	e03ffd15 	stw	zero,-12(fp)
   26858:	00002306 	br	268e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2685c:	04020034 	movhi	r16,2048
   26860:	8402bd04 	addi	r16,r16,2804
   26864:	e0bffd17 	ldw	r2,-12(fp)
   26868:	1009883a 	mov	r4,r2
   2686c:	01400304 	movi	r5,12
   26870:	0022d000 	call	22d00 <__mulsi3>
   26874:	8085883a 	add	r2,r16,r2
   26878:	10c00017 	ldw	r3,0(r2)
   2687c:	e0bffe17 	ldw	r2,-8(fp)
   26880:	10800017 	ldw	r2,0(r2)
   26884:	1880151e 	bne	r3,r2,268dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   26888:	04020034 	movhi	r16,2048
   2688c:	8402bd04 	addi	r16,r16,2804
   26890:	e0bffd17 	ldw	r2,-12(fp)
   26894:	1009883a 	mov	r4,r2
   26898:	01400304 	movi	r5,12
   2689c:	0022d000 	call	22d00 <__mulsi3>
   268a0:	8085883a 	add	r2,r16,r2
   268a4:	10800204 	addi	r2,r2,8
   268a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   268ac:	10000b0e 	bge	r2,zero,268dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   268b0:	e13ffd17 	ldw	r4,-12(fp)
   268b4:	01400304 	movi	r5,12
   268b8:	0022d000 	call	22d00 <__mulsi3>
   268bc:	1007883a 	mov	r3,r2
   268c0:	00820034 	movhi	r2,2048
   268c4:	1082bd04 	addi	r2,r2,2804
   268c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   268cc:	e0bffe17 	ldw	r2,-8(fp)
   268d0:	18800226 	beq	r3,r2,268dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   268d4:	00bffcc4 	movi	r2,-13
   268d8:	00000a06 	br	26904 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   268dc:	e0bffd17 	ldw	r2,-12(fp)
   268e0:	10800044 	addi	r2,r2,1
   268e4:	e0bffd15 	stw	r2,-12(fp)
   268e8:	00820034 	movhi	r2,2048
   268ec:	10833804 	addi	r2,r2,3296
   268f0:	10800017 	ldw	r2,0(r2)
   268f4:	1007883a 	mov	r3,r2
   268f8:	e0bffd17 	ldw	r2,-12(fp)
   268fc:	18bfd72e 	bgeu	r3,r2,2685c <__alt_data_end+0xf402685c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   26900:	0005883a 	mov	r2,zero
}
   26904:	e6ffff04 	addi	sp,fp,-4
   26908:	dfc00217 	ldw	ra,8(sp)
   2690c:	df000117 	ldw	fp,4(sp)
   26910:	dc000017 	ldw	r16,0(sp)
   26914:	dec00304 	addi	sp,sp,12
   26918:	f800283a 	ret

0002691c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2691c:	defff604 	addi	sp,sp,-40
   26920:	dfc00915 	stw	ra,36(sp)
   26924:	df000815 	stw	fp,32(sp)
   26928:	df000804 	addi	fp,sp,32
   2692c:	e13ffd15 	stw	r4,-12(fp)
   26930:	e17ffe15 	stw	r5,-8(fp)
   26934:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   26938:	00bfffc4 	movi	r2,-1
   2693c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   26940:	00bffb44 	movi	r2,-19
   26944:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   26948:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2694c:	e13ffd17 	ldw	r4,-12(fp)
   26950:	01420034 	movhi	r5,2048
   26954:	29433604 	addi	r5,r5,3288
   26958:	00265d40 	call	265d4 <alt_find_dev>
   2695c:	e0bff815 	stw	r2,-32(fp)
   26960:	e0bff817 	ldw	r2,-32(fp)
   26964:	1000051e 	bne	r2,zero,2697c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   26968:	e13ffd17 	ldw	r4,-12(fp)
   2696c:	0026b1c0 	call	26b1c <alt_find_file>
   26970:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   26974:	00800044 	movi	r2,1
   26978:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2697c:	e0bff817 	ldw	r2,-32(fp)
   26980:	10002b26 	beq	r2,zero,26a30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   26984:	e13ff817 	ldw	r4,-32(fp)
   26988:	0026c300 	call	26c30 <alt_get_fd>
   2698c:	e0bff915 	stw	r2,-28(fp)
   26990:	e0bff917 	ldw	r2,-28(fp)
   26994:	1000030e 	bge	r2,zero,269a4 <open+0x88>
    {
      status = index;
   26998:	e0bff917 	ldw	r2,-28(fp)
   2699c:	e0bffa15 	stw	r2,-24(fp)
   269a0:	00002506 	br	26a38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   269a4:	e13ff917 	ldw	r4,-28(fp)
   269a8:	01400304 	movi	r5,12
   269ac:	0022d000 	call	22d00 <__mulsi3>
   269b0:	1007883a 	mov	r3,r2
   269b4:	00820034 	movhi	r2,2048
   269b8:	1082bd04 	addi	r2,r2,2804
   269bc:	1885883a 	add	r2,r3,r2
   269c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   269c4:	e0fffe17 	ldw	r3,-8(fp)
   269c8:	00900034 	movhi	r2,16384
   269cc:	10bfffc4 	addi	r2,r2,-1
   269d0:	1886703a 	and	r3,r3,r2
   269d4:	e0bffc17 	ldw	r2,-16(fp)
   269d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   269dc:	e0bffb17 	ldw	r2,-20(fp)
   269e0:	1000051e 	bne	r2,zero,269f8 <open+0xdc>
   269e4:	e13ffc17 	ldw	r4,-16(fp)
   269e8:	00268280 	call	26828 <alt_file_locked>
   269ec:	e0bffa15 	stw	r2,-24(fp)
   269f0:	e0bffa17 	ldw	r2,-24(fp)
   269f4:	10001016 	blt	r2,zero,26a38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   269f8:	e0bff817 	ldw	r2,-32(fp)
   269fc:	10800317 	ldw	r2,12(r2)
   26a00:	10000826 	beq	r2,zero,26a24 <open+0x108>
   26a04:	e0bff817 	ldw	r2,-32(fp)
   26a08:	10800317 	ldw	r2,12(r2)
   26a0c:	e13ffc17 	ldw	r4,-16(fp)
   26a10:	e17ffd17 	ldw	r5,-12(fp)
   26a14:	e1bffe17 	ldw	r6,-8(fp)
   26a18:	e1ffff17 	ldw	r7,-4(fp)
   26a1c:	103ee83a 	callr	r2
   26a20:	00000106 	br	26a28 <open+0x10c>
   26a24:	0005883a 	mov	r2,zero
   26a28:	e0bffa15 	stw	r2,-24(fp)
   26a2c:	00000206 	br	26a38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   26a30:	00bffb44 	movi	r2,-19
   26a34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   26a38:	e0bffa17 	ldw	r2,-24(fp)
   26a3c:	1000090e 	bge	r2,zero,26a64 <open+0x148>
  {
    alt_release_fd (index);  
   26a40:	e13ff917 	ldw	r4,-28(fp)
   26a44:	0026a7c0 	call	26a7c <alt_release_fd>
    ALT_ERRNO = -status;
   26a48:	00267d80 	call	267d8 <alt_get_errno>
   26a4c:	1007883a 	mov	r3,r2
   26a50:	e0bffa17 	ldw	r2,-24(fp)
   26a54:	0085c83a 	sub	r2,zero,r2
   26a58:	18800015 	stw	r2,0(r3)
    return -1;
   26a5c:	00bfffc4 	movi	r2,-1
   26a60:	00000106 	br	26a68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   26a64:	e0bff917 	ldw	r2,-28(fp)
}
   26a68:	e037883a 	mov	sp,fp
   26a6c:	dfc00117 	ldw	ra,4(sp)
   26a70:	df000017 	ldw	fp,0(sp)
   26a74:	dec00204 	addi	sp,sp,8
   26a78:	f800283a 	ret

00026a7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   26a7c:	defffc04 	addi	sp,sp,-16
   26a80:	dfc00315 	stw	ra,12(sp)
   26a84:	df000215 	stw	fp,8(sp)
   26a88:	dc000115 	stw	r16,4(sp)
   26a8c:	df000204 	addi	fp,sp,8
   26a90:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   26a94:	e0bffe17 	ldw	r2,-8(fp)
   26a98:	108000d0 	cmplti	r2,r2,3
   26a9c:	1000111e 	bne	r2,zero,26ae4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   26aa0:	04020034 	movhi	r16,2048
   26aa4:	8402bd04 	addi	r16,r16,2804
   26aa8:	e0bffe17 	ldw	r2,-8(fp)
   26aac:	1009883a 	mov	r4,r2
   26ab0:	01400304 	movi	r5,12
   26ab4:	0022d000 	call	22d00 <__mulsi3>
   26ab8:	8085883a 	add	r2,r16,r2
   26abc:	10800204 	addi	r2,r2,8
   26ac0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   26ac4:	04020034 	movhi	r16,2048
   26ac8:	8402bd04 	addi	r16,r16,2804
   26acc:	e0bffe17 	ldw	r2,-8(fp)
   26ad0:	1009883a 	mov	r4,r2
   26ad4:	01400304 	movi	r5,12
   26ad8:	0022d000 	call	22d00 <__mulsi3>
   26adc:	8085883a 	add	r2,r16,r2
   26ae0:	10000015 	stw	zero,0(r2)
  }
}
   26ae4:	e6ffff04 	addi	sp,fp,-4
   26ae8:	dfc00217 	ldw	ra,8(sp)
   26aec:	df000117 	ldw	fp,4(sp)
   26af0:	dc000017 	ldw	r16,0(sp)
   26af4:	dec00304 	addi	sp,sp,12
   26af8:	f800283a 	ret

00026afc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26afc:	deffff04 	addi	sp,sp,-4
   26b00:	df000015 	stw	fp,0(sp)
   26b04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26b08:	000170fa 	wrctl	ienable,zero
}
   26b0c:	e037883a 	mov	sp,fp
   26b10:	df000017 	ldw	fp,0(sp)
   26b14:	dec00104 	addi	sp,sp,4
   26b18:	f800283a 	ret

00026b1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   26b1c:	defffb04 	addi	sp,sp,-20
   26b20:	dfc00415 	stw	ra,16(sp)
   26b24:	df000315 	stw	fp,12(sp)
   26b28:	df000304 	addi	fp,sp,12
   26b2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26b30:	00820034 	movhi	r2,2048
   26b34:	10833404 	addi	r2,r2,3280
   26b38:	10800017 	ldw	r2,0(r2)
   26b3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26b40:	00003106 	br	26c08 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   26b44:	e0bffd17 	ldw	r2,-12(fp)
   26b48:	10800217 	ldw	r2,8(r2)
   26b4c:	1009883a 	mov	r4,r2
   26b50:	0023ee00 	call	23ee0 <strlen>
   26b54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26b58:	e0bffd17 	ldw	r2,-12(fp)
   26b5c:	10c00217 	ldw	r3,8(r2)
   26b60:	e0bffe17 	ldw	r2,-8(fp)
   26b64:	10bfffc4 	addi	r2,r2,-1
   26b68:	1885883a 	add	r2,r3,r2
   26b6c:	10800003 	ldbu	r2,0(r2)
   26b70:	10803fcc 	andi	r2,r2,255
   26b74:	1080201c 	xori	r2,r2,128
   26b78:	10bfe004 	addi	r2,r2,-128
   26b7c:	10800bd8 	cmpnei	r2,r2,47
   26b80:	1000031e 	bne	r2,zero,26b90 <alt_find_file+0x74>
    {
      len -= 1;
   26b84:	e0bffe17 	ldw	r2,-8(fp)
   26b88:	10bfffc4 	addi	r2,r2,-1
   26b8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26b90:	e0bffe17 	ldw	r2,-8(fp)
   26b94:	e0ffff17 	ldw	r3,-4(fp)
   26b98:	1885883a 	add	r2,r3,r2
   26b9c:	10800003 	ldbu	r2,0(r2)
   26ba0:	10803fcc 	andi	r2,r2,255
   26ba4:	1080201c 	xori	r2,r2,128
   26ba8:	10bfe004 	addi	r2,r2,-128
   26bac:	10800be0 	cmpeqi	r2,r2,47
   26bb0:	1000081e 	bne	r2,zero,26bd4 <alt_find_file+0xb8>
   26bb4:	e0bffe17 	ldw	r2,-8(fp)
   26bb8:	e0ffff17 	ldw	r3,-4(fp)
   26bbc:	1885883a 	add	r2,r3,r2
   26bc0:	10800003 	ldbu	r2,0(r2)
   26bc4:	10803fcc 	andi	r2,r2,255
   26bc8:	1080201c 	xori	r2,r2,128
   26bcc:	10bfe004 	addi	r2,r2,-128
   26bd0:	10000a1e 	bne	r2,zero,26bfc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   26bd4:	e0bffd17 	ldw	r2,-12(fp)
   26bd8:	10c00217 	ldw	r3,8(r2)
   26bdc:	e0bffe17 	ldw	r2,-8(fp)
   26be0:	1809883a 	mov	r4,r3
   26be4:	e17fff17 	ldw	r5,-4(fp)
   26be8:	100d883a 	mov	r6,r2
   26bec:	0026d380 	call	26d38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26bf0:	1000021e 	bne	r2,zero,26bfc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   26bf4:	e0bffd17 	ldw	r2,-12(fp)
   26bf8:	00000806 	br	26c1c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   26bfc:	e0bffd17 	ldw	r2,-12(fp)
   26c00:	10800017 	ldw	r2,0(r2)
   26c04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26c08:	e0fffd17 	ldw	r3,-12(fp)
   26c0c:	00820034 	movhi	r2,2048
   26c10:	10833404 	addi	r2,r2,3280
   26c14:	18bfcb1e 	bne	r3,r2,26b44 <__alt_data_end+0xf4026b44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   26c18:	0005883a 	mov	r2,zero
}
   26c1c:	e037883a 	mov	sp,fp
   26c20:	dfc00117 	ldw	ra,4(sp)
   26c24:	df000017 	ldw	fp,0(sp)
   26c28:	dec00204 	addi	sp,sp,8
   26c2c:	f800283a 	ret

00026c30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   26c30:	defffa04 	addi	sp,sp,-24
   26c34:	dfc00515 	stw	ra,20(sp)
   26c38:	df000415 	stw	fp,16(sp)
   26c3c:	dc000315 	stw	r16,12(sp)
   26c40:	df000404 	addi	fp,sp,16
   26c44:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   26c48:	00bffa04 	movi	r2,-24
   26c4c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26c50:	e03ffc15 	stw	zero,-16(fp)
   26c54:	00002106 	br	26cdc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   26c58:	04020034 	movhi	r16,2048
   26c5c:	8402bd04 	addi	r16,r16,2804
   26c60:	e0bffc17 	ldw	r2,-16(fp)
   26c64:	1009883a 	mov	r4,r2
   26c68:	01400304 	movi	r5,12
   26c6c:	0022d000 	call	22d00 <__mulsi3>
   26c70:	8085883a 	add	r2,r16,r2
   26c74:	10800017 	ldw	r2,0(r2)
   26c78:	1000151e 	bne	r2,zero,26cd0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   26c7c:	04020034 	movhi	r16,2048
   26c80:	8402bd04 	addi	r16,r16,2804
   26c84:	e0bffc17 	ldw	r2,-16(fp)
   26c88:	1009883a 	mov	r4,r2
   26c8c:	01400304 	movi	r5,12
   26c90:	0022d000 	call	22d00 <__mulsi3>
   26c94:	8085883a 	add	r2,r16,r2
   26c98:	e0fffe17 	ldw	r3,-8(fp)
   26c9c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   26ca0:	00820034 	movhi	r2,2048
   26ca4:	10833804 	addi	r2,r2,3296
   26ca8:	10c00017 	ldw	r3,0(r2)
   26cac:	e0bffc17 	ldw	r2,-16(fp)
   26cb0:	1880040e 	bge	r3,r2,26cc4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   26cb4:	00820034 	movhi	r2,2048
   26cb8:	10833804 	addi	r2,r2,3296
   26cbc:	e0fffc17 	ldw	r3,-16(fp)
   26cc0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   26cc4:	e0bffc17 	ldw	r2,-16(fp)
   26cc8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   26ccc:	00000606 	br	26ce8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   26cd0:	e0bffc17 	ldw	r2,-16(fp)
   26cd4:	10800044 	addi	r2,r2,1
   26cd8:	e0bffc15 	stw	r2,-16(fp)
   26cdc:	e0bffc17 	ldw	r2,-16(fp)
   26ce0:	10800810 	cmplti	r2,r2,32
   26ce4:	103fdc1e 	bne	r2,zero,26c58 <__alt_data_end+0xf4026c58>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   26ce8:	e0bffd17 	ldw	r2,-12(fp)
}
   26cec:	e6ffff04 	addi	sp,fp,-4
   26cf0:	dfc00217 	ldw	ra,8(sp)
   26cf4:	df000117 	ldw	fp,4(sp)
   26cf8:	dc000017 	ldw	r16,0(sp)
   26cfc:	dec00304 	addi	sp,sp,12
   26d00:	f800283a 	ret

00026d04 <atexit>:
   26d04:	200b883a 	mov	r5,r4
   26d08:	000d883a 	mov	r6,zero
   26d0c:	0009883a 	mov	r4,zero
   26d10:	000f883a 	mov	r7,zero
   26d14:	0026d681 	jmpi	26d68 <__register_exitproc>

00026d18 <exit>:
   26d18:	defffe04 	addi	sp,sp,-8
   26d1c:	000b883a 	mov	r5,zero
   26d20:	dc000015 	stw	r16,0(sp)
   26d24:	dfc00115 	stw	ra,4(sp)
   26d28:	2021883a 	mov	r16,r4
   26d2c:	0026eac0 	call	26eac <__call_exitprocs>
   26d30:	8009883a 	mov	r4,r16
   26d34:	00252cc0 	call	252cc <_exit>

00026d38 <memcmp>:
   26d38:	218d883a 	add	r6,r4,r6
   26d3c:	21800826 	beq	r4,r6,26d60 <memcmp+0x28>
   26d40:	20800003 	ldbu	r2,0(r4)
   26d44:	28c00003 	ldbu	r3,0(r5)
   26d48:	10c00226 	beq	r2,r3,26d54 <memcmp+0x1c>
   26d4c:	10c5c83a 	sub	r2,r2,r3
   26d50:	f800283a 	ret
   26d54:	21000044 	addi	r4,r4,1
   26d58:	29400044 	addi	r5,r5,1
   26d5c:	003ff706 	br	26d3c <__alt_data_end+0xf4026d3c>
   26d60:	0005883a 	mov	r2,zero
   26d64:	f800283a 	ret

00026d68 <__register_exitproc>:
   26d68:	00820034 	movhi	r2,2048
   26d6c:	defff904 	addi	sp,sp,-28
   26d70:	10833104 	addi	r2,r2,3268
   26d74:	dd400515 	stw	r21,20(sp)
   26d78:	15400017 	ldw	r21,0(r2)
   26d7c:	dc000015 	stw	r16,0(sp)
   26d80:	dd000415 	stw	r20,16(sp)
   26d84:	ac000c17 	ldw	r16,48(r21)
   26d88:	dcc00315 	stw	r19,12(sp)
   26d8c:	dc800215 	stw	r18,8(sp)
   26d90:	dc400115 	stw	r17,4(sp)
   26d94:	dfc00615 	stw	ra,24(sp)
   26d98:	2025883a 	mov	r18,r4
   26d9c:	2823883a 	mov	r17,r5
   26da0:	3029883a 	mov	r20,r6
   26da4:	3827883a 	mov	r19,r7
   26da8:	8000021e 	bne	r16,zero,26db4 <__register_exitproc+0x4c>
   26dac:	ac000d04 	addi	r16,r21,52
   26db0:	ac000c15 	stw	r16,48(r21)
   26db4:	80800117 	ldw	r2,4(r16)
   26db8:	00c007c4 	movi	r3,31
   26dbc:	18800d0e 	bge	r3,r2,26df4 <__register_exitproc+0x8c>
   26dc0:	008000b4 	movhi	r2,2
   26dc4:	108c9804 	addi	r2,r2,12896
   26dc8:	1000021e 	bne	r2,zero,26dd4 <__register_exitproc+0x6c>
   26dcc:	00bfffc4 	movi	r2,-1
   26dd0:	00002d06 	br	26e88 <__register_exitproc+0x120>
   26dd4:	01002304 	movi	r4,140
   26dd8:	00232600 	call	23260 <malloc>
   26ddc:	1021883a 	mov	r16,r2
   26de0:	103ffa26 	beq	r2,zero,26dcc <__alt_data_end+0xf4026dcc>
   26de4:	10000115 	stw	zero,4(r2)
   26de8:	a8800c17 	ldw	r2,48(r21)
   26dec:	80800015 	stw	r2,0(r16)
   26df0:	ac000c15 	stw	r16,48(r21)
   26df4:	90001b26 	beq	r18,zero,26e64 <__register_exitproc+0xfc>
   26df8:	80802217 	ldw	r2,136(r16)
   26dfc:	1000091e 	bne	r2,zero,26e24 <__register_exitproc+0xbc>
   26e00:	008000b4 	movhi	r2,2
   26e04:	108c9804 	addi	r2,r2,12896
   26e08:	103ff026 	beq	r2,zero,26dcc <__alt_data_end+0xf4026dcc>
   26e0c:	01004204 	movi	r4,264
   26e10:	00232600 	call	23260 <malloc>
   26e14:	103fed26 	beq	r2,zero,26dcc <__alt_data_end+0xf4026dcc>
   26e18:	10004015 	stw	zero,256(r2)
   26e1c:	10004115 	stw	zero,260(r2)
   26e20:	80802215 	stw	r2,136(r16)
   26e24:	81400117 	ldw	r5,4(r16)
   26e28:	01000044 	movi	r4,1
   26e2c:	2947883a 	add	r3,r5,r5
   26e30:	18c7883a 	add	r3,r3,r3
   26e34:	10c7883a 	add	r3,r2,r3
   26e38:	1d000015 	stw	r20,0(r3)
   26e3c:	214a983a 	sll	r5,r4,r5
   26e40:	11004017 	ldw	r4,256(r2)
   26e44:	2148b03a 	or	r4,r4,r5
   26e48:	11004015 	stw	r4,256(r2)
   26e4c:	1cc02015 	stw	r19,128(r3)
   26e50:	00c00084 	movi	r3,2
   26e54:	90c0031e 	bne	r18,r3,26e64 <__register_exitproc+0xfc>
   26e58:	10c04117 	ldw	r3,260(r2)
   26e5c:	194ab03a 	or	r5,r3,r5
   26e60:	11404115 	stw	r5,260(r2)
   26e64:	80800117 	ldw	r2,4(r16)
   26e68:	10c00044 	addi	r3,r2,1
   26e6c:	10800084 	addi	r2,r2,2
   26e70:	1085883a 	add	r2,r2,r2
   26e74:	1085883a 	add	r2,r2,r2
   26e78:	80c00115 	stw	r3,4(r16)
   26e7c:	80a1883a 	add	r16,r16,r2
   26e80:	84400015 	stw	r17,0(r16)
   26e84:	0005883a 	mov	r2,zero
   26e88:	dfc00617 	ldw	ra,24(sp)
   26e8c:	dd400517 	ldw	r21,20(sp)
   26e90:	dd000417 	ldw	r20,16(sp)
   26e94:	dcc00317 	ldw	r19,12(sp)
   26e98:	dc800217 	ldw	r18,8(sp)
   26e9c:	dc400117 	ldw	r17,4(sp)
   26ea0:	dc000017 	ldw	r16,0(sp)
   26ea4:	dec00704 	addi	sp,sp,28
   26ea8:	f800283a 	ret

00026eac <__call_exitprocs>:
   26eac:	00820034 	movhi	r2,2048
   26eb0:	10833104 	addi	r2,r2,3268
   26eb4:	10800017 	ldw	r2,0(r2)
   26eb8:	defff304 	addi	sp,sp,-52
   26ebc:	ddc00a15 	stw	r23,40(sp)
   26ec0:	d8800015 	stw	r2,0(sp)
   26ec4:	05c000b4 	movhi	r23,2
   26ec8:	10800c04 	addi	r2,r2,48
   26ecc:	dc800515 	stw	r18,20(sp)
   26ed0:	dfc00c15 	stw	ra,48(sp)
   26ed4:	df000b15 	stw	fp,44(sp)
   26ed8:	dd800915 	stw	r22,36(sp)
   26edc:	dd400815 	stw	r21,32(sp)
   26ee0:	dd000715 	stw	r20,28(sp)
   26ee4:	dcc00615 	stw	r19,24(sp)
   26ee8:	dc400415 	stw	r17,16(sp)
   26eec:	dc000315 	stw	r16,12(sp)
   26ef0:	d9000115 	stw	r4,4(sp)
   26ef4:	2825883a 	mov	r18,r5
   26ef8:	d8800215 	stw	r2,8(sp)
   26efc:	bdcc9d04 	addi	r23,r23,12916
   26f00:	d8800017 	ldw	r2,0(sp)
   26f04:	dc400217 	ldw	r17,8(sp)
   26f08:	14c00c17 	ldw	r19,48(r2)
   26f0c:	98004226 	beq	r19,zero,27018 <__call_exitprocs+0x16c>
   26f10:	9c000117 	ldw	r16,4(r19)
   26f14:	00900034 	movhi	r2,16384
   26f18:	10bfffc4 	addi	r2,r2,-1
   26f1c:	9d002217 	ldw	r20,136(r19)
   26f20:	857fffc4 	addi	r21,r16,-1
   26f24:	80a1883a 	add	r16,r16,r2
   26f28:	8421883a 	add	r16,r16,r16
   26f2c:	8421883a 	add	r16,r16,r16
   26f30:	a42d883a 	add	r22,r20,r16
   26f34:	84000204 	addi	r16,r16,8
   26f38:	9c21883a 	add	r16,r19,r16
   26f3c:	a8002616 	blt	r21,zero,26fd8 <__call_exitprocs+0x12c>
   26f40:	90000326 	beq	r18,zero,26f50 <__call_exitprocs+0xa4>
   26f44:	a0002026 	beq	r20,zero,26fc8 <__call_exitprocs+0x11c>
   26f48:	b1002017 	ldw	r4,128(r22)
   26f4c:	24801e1e 	bne	r4,r18,26fc8 <__call_exitprocs+0x11c>
   26f50:	99000117 	ldw	r4,4(r19)
   26f54:	82000017 	ldw	r8,0(r16)
   26f58:	213fffc4 	addi	r4,r4,-1
   26f5c:	a900021e 	bne	r21,r4,26f68 <__call_exitprocs+0xbc>
   26f60:	9d400115 	stw	r21,4(r19)
   26f64:	00000106 	br	26f6c <__call_exitprocs+0xc0>
   26f68:	80000015 	stw	zero,0(r16)
   26f6c:	40001626 	beq	r8,zero,26fc8 <__call_exitprocs+0x11c>
   26f70:	9f000117 	ldw	fp,4(r19)
   26f74:	a0000526 	beq	r20,zero,26f8c <__call_exitprocs+0xe0>
   26f78:	00800044 	movi	r2,1
   26f7c:	1552983a 	sll	r9,r2,r21
   26f80:	a1404017 	ldw	r5,256(r20)
   26f84:	494a703a 	and	r5,r9,r5
   26f88:	2800021e 	bne	r5,zero,26f94 <__call_exitprocs+0xe8>
   26f8c:	403ee83a 	callr	r8
   26f90:	00000906 	br	26fb8 <__call_exitprocs+0x10c>
   26f94:	a1004117 	ldw	r4,260(r20)
   26f98:	4908703a 	and	r4,r9,r4
   26f9c:	2000041e 	bne	r4,zero,26fb0 <__call_exitprocs+0x104>
   26fa0:	d9000117 	ldw	r4,4(sp)
   26fa4:	b1400017 	ldw	r5,0(r22)
   26fa8:	403ee83a 	callr	r8
   26fac:	00000206 	br	26fb8 <__call_exitprocs+0x10c>
   26fb0:	b1000017 	ldw	r4,0(r22)
   26fb4:	403ee83a 	callr	r8
   26fb8:	99000117 	ldw	r4,4(r19)
   26fbc:	e13fd01e 	bne	fp,r4,26f00 <__alt_data_end+0xf4026f00>
   26fc0:	89000017 	ldw	r4,0(r17)
   26fc4:	24ffce1e 	bne	r4,r19,26f00 <__alt_data_end+0xf4026f00>
   26fc8:	ad7fffc4 	addi	r21,r21,-1
   26fcc:	b5bfff04 	addi	r22,r22,-4
   26fd0:	843fff04 	addi	r16,r16,-4
   26fd4:	003fd906 	br	26f3c <__alt_data_end+0xf4026f3c>
   26fd8:	b8000f26 	beq	r23,zero,27018 <__call_exitprocs+0x16c>
   26fdc:	99000117 	ldw	r4,4(r19)
   26fe0:	20000a1e 	bne	r4,zero,2700c <__call_exitprocs+0x160>
   26fe4:	99000017 	ldw	r4,0(r19)
   26fe8:	20000826 	beq	r4,zero,2700c <__call_exitprocs+0x160>
   26fec:	89000015 	stw	r4,0(r17)
   26ff0:	a0000226 	beq	r20,zero,26ffc <__call_exitprocs+0x150>
   26ff4:	a009883a 	mov	r4,r20
   26ff8:	00232740 	call	23274 <free>
   26ffc:	9809883a 	mov	r4,r19
   27000:	00232740 	call	23274 <free>
   27004:	8cc00017 	ldw	r19,0(r17)
   27008:	003fc006 	br	26f0c <__alt_data_end+0xf4026f0c>
   2700c:	9823883a 	mov	r17,r19
   27010:	9cc00017 	ldw	r19,0(r19)
   27014:	003fbd06 	br	26f0c <__alt_data_end+0xf4026f0c>
   27018:	dfc00c17 	ldw	ra,48(sp)
   2701c:	df000b17 	ldw	fp,44(sp)
   27020:	ddc00a17 	ldw	r23,40(sp)
   27024:	dd800917 	ldw	r22,36(sp)
   27028:	dd400817 	ldw	r21,32(sp)
   2702c:	dd000717 	ldw	r20,28(sp)
   27030:	dcc00617 	ldw	r19,24(sp)
   27034:	dc800517 	ldw	r18,20(sp)
   27038:	dc400417 	ldw	r17,16(sp)
   2703c:	dc000317 	ldw	r16,12(sp)
   27040:	dec00d04 	addi	sp,sp,52
   27044:	f800283a 	ret
   27048:	0201ffff 	0x201ffff
   2704c:	883a0000 	call	883a000 <_gp+0x83138c>
   27050:	010d0bff 	0x10d0bff
   27054:	01010002 	0x1010002
	...
   27060:	010d0bff 	0x10d0bff
   27064:	01010004 	movi	r4,1024
   27068:	00000100 	call	10 <__alt_mem_onchip_sram-0x1fff0>
   2706c:	00000000 	call	0 <__alt_mem_onchip_sram-0x20000>
   27070:	01110bff 	0x1110bff
   27074:	01010004 	movi	r4,1024
   27078:	7f000105 	stb	fp,4(r15)
   2707c:	007d0000 	call	7d000 <__flash_rwdata_start+0x55a3c>
	...
   27088:	00021020 	cmpeqi	zero,zero,2112
   2708c:	00021050 	cmplti	zero,zero,2113
