#ifndef _ALTERA_HPS_SOC_SYSTEM_H_
#define _ALTERA_HPS_SOC_SYSTEM_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'tag_nios_system' in
 * file 'tag2/TAG_NIOS/tag_nios_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'ARM_A9_HPS' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'hex_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_5_'.
 * The prefix is the slave descriptor.
 */
#define HEX_5_COMPONENT_TYPE altera_avalon_pio
#define HEX_5_COMPONENT_NAME hex_5
#define HEX_5_BASE 0x0
#define HEX_5_SPAN 32
#define HEX_5_END 0x1f
#define HEX_5_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_5_CAPTURE 0
#define HEX_5_DATA_WIDTH 7
#define HEX_5_DO_TEST_BENCH_WIRING 0
#define HEX_5_DRIVEN_SIM_VALUE 0
#define HEX_5_EDGE_TYPE NONE
#define HEX_5_FREQ 50000000
#define HEX_5_HAS_IN 0
#define HEX_5_HAS_OUT 1
#define HEX_5_HAS_TRI 0
#define HEX_5_IRQ_TYPE NONE
#define HEX_5_RESET_VALUE 127

/*
 * Macros for device 'hex_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_4_'.
 * The prefix is the slave descriptor.
 */
#define HEX_4_COMPONENT_TYPE altera_avalon_pio
#define HEX_4_COMPONENT_NAME hex_4
#define HEX_4_BASE 0x10
#define HEX_4_SPAN 32
#define HEX_4_END 0x2f
#define HEX_4_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_4_CAPTURE 0
#define HEX_4_DATA_WIDTH 7
#define HEX_4_DO_TEST_BENCH_WIRING 0
#define HEX_4_DRIVEN_SIM_VALUE 0
#define HEX_4_EDGE_TYPE NONE
#define HEX_4_FREQ 50000000
#define HEX_4_HAS_IN 0
#define HEX_4_HAS_OUT 1
#define HEX_4_HAS_TRI 0
#define HEX_4_IRQ_TYPE NONE
#define HEX_4_RESET_VALUE 127

/*
 * Macros for device 'hex_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_3_'.
 * The prefix is the slave descriptor.
 */
#define HEX_3_COMPONENT_TYPE altera_avalon_pio
#define HEX_3_COMPONENT_NAME hex_3
#define HEX_3_BASE 0x20
#define HEX_3_SPAN 32
#define HEX_3_END 0x3f
#define HEX_3_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_3_CAPTURE 0
#define HEX_3_DATA_WIDTH 7
#define HEX_3_DO_TEST_BENCH_WIRING 0
#define HEX_3_DRIVEN_SIM_VALUE 0
#define HEX_3_EDGE_TYPE NONE
#define HEX_3_FREQ 50000000
#define HEX_3_HAS_IN 0
#define HEX_3_HAS_OUT 1
#define HEX_3_HAS_TRI 0
#define HEX_3_IRQ_TYPE NONE
#define HEX_3_RESET_VALUE 127

/*
 * Macros for device 'hex_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_2_'.
 * The prefix is the slave descriptor.
 */
#define HEX_2_COMPONENT_TYPE altera_avalon_pio
#define HEX_2_COMPONENT_NAME hex_2
#define HEX_2_BASE 0x30
#define HEX_2_SPAN 32
#define HEX_2_END 0x4f
#define HEX_2_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_2_CAPTURE 0
#define HEX_2_DATA_WIDTH 7
#define HEX_2_DO_TEST_BENCH_WIRING 0
#define HEX_2_DRIVEN_SIM_VALUE 0
#define HEX_2_EDGE_TYPE NONE
#define HEX_2_FREQ 50000000
#define HEX_2_HAS_IN 0
#define HEX_2_HAS_OUT 1
#define HEX_2_HAS_TRI 0
#define HEX_2_IRQ_TYPE NONE
#define HEX_2_RESET_VALUE 127

/*
 * Macros for device 'hex_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_1_'.
 * The prefix is the slave descriptor.
 */
#define HEX_1_COMPONENT_TYPE altera_avalon_pio
#define HEX_1_COMPONENT_NAME hex_1
#define HEX_1_BASE 0x40
#define HEX_1_SPAN 32
#define HEX_1_END 0x5f
#define HEX_1_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_1_CAPTURE 0
#define HEX_1_DATA_WIDTH 7
#define HEX_1_DO_TEST_BENCH_WIRING 0
#define HEX_1_DRIVEN_SIM_VALUE 0
#define HEX_1_EDGE_TYPE NONE
#define HEX_1_FREQ 50000000
#define HEX_1_HAS_IN 0
#define HEX_1_HAS_OUT 1
#define HEX_1_HAS_TRI 0
#define HEX_1_IRQ_TYPE NONE
#define HEX_1_RESET_VALUE 127

/*
 * Macros for device 'hex_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX_0_'.
 * The prefix is the slave descriptor.
 */
#define HEX_0_COMPONENT_TYPE altera_avalon_pio
#define HEX_0_COMPONENT_NAME hex_0
#define HEX_0_BASE 0x50
#define HEX_0_SPAN 32
#define HEX_0_END 0x6f
#define HEX_0_BIT_CLEARING_EDGE_REGISTER 0
#define HEX_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX_0_CAPTURE 0
#define HEX_0_DATA_WIDTH 7
#define HEX_0_DO_TEST_BENCH_WIRING 0
#define HEX_0_DRIVEN_SIM_VALUE 0
#define HEX_0_EDGE_TYPE NONE
#define HEX_0_FREQ 50000000
#define HEX_0_HAS_IN 0
#define HEX_0_HAS_OUT 1
#define HEX_0_HAS_TRI 0
#define HEX_0_IRQ_TYPE NONE
#define HEX_0_RESET_VALUE 127

/*
 * Macros for device 'buttons', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTONS_'.
 * The prefix is the slave descriptor.
 */
#define BUTTONS_COMPONENT_TYPE altera_avalon_pio
#define BUTTONS_COMPONENT_NAME buttons
#define BUTTONS_BASE 0x60
#define BUTTONS_SPAN 32
#define BUTTONS_END 0x7f
#define BUTTONS_BIT_CLEARING_EDGE_REGISTER 0
#define BUTTONS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTONS_CAPTURE 0
#define BUTTONS_DATA_WIDTH 4
#define BUTTONS_DO_TEST_BENCH_WIRING 0
#define BUTTONS_DRIVEN_SIM_VALUE 0
#define BUTTONS_EDGE_TYPE NONE
#define BUTTONS_FREQ 50000000
#define BUTTONS_HAS_IN 1
#define BUTTONS_HAS_OUT 0
#define BUTTONS_HAS_TRI 0
#define BUTTONS_IRQ_TYPE NONE
#define BUTTONS_RESET_VALUE 0


#endif /* _ALTERA_HPS_SOC_SYSTEM_H_ */
