
BT_Config.elf:     file format elf32-littlenios2
BT_Config.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005e58 memsz 0x00005e58 flags r-x
    LOAD off    0x00007000 vaddr 0x08000000 paddr 0x00025e78 align 2**12
         filesz 0x00000a10 memsz 0x00001370 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00007a10  2**0
                  CONTENTS
  2 .text         00005e58  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002bc  08000000  00025e78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000754  080002bc  00026134  000072bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000960  08000a10  00026888  00007a10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00026888  00026888  00007a10  2**0
                  CONTENTS
  7 .sdram_controller 00000000  08001370  08001370  00007a10  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b38  00000000  00000000  00007a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00015019  00000000  00000000  00008570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006c74  00000000  00000000  0001d589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000785c  00000000  00000000  000241fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c68  00000000  00000000  0002ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ce9  00000000  00000000  0002d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00006294  00000000  00000000  000323ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00038644  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008f0  00000000  00000000  00038688  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003ca7a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0003ca7d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003ca89  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003ca8a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003ca8b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003ca96  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003caa1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000f  00000000  00000000  0003caac  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000010  00000000  00000000  0003cabb  2**0
                  CONTENTS, READONLY
 27 .jdi          00004576  00000000  00000000  0003cacb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005d17f  00000000  00000000  00041041  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
080002bc l    d  .rwdata	00000000 .rwdata
08000a10 l    d  .bss	00000000 .bss
00026888 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08001370 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../BT_Config_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 CUart.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
00020638 l     F .text	00000058 _ZL12read_sleb128PKhPl
00020690 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00020718 l     F .text	000000a0 _ZL21size_of_encoded_valueh
000207b8 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
000209c8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00020a1c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00020ac4 l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
00020b4c l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00020d8c l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
08000a10 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00021ec8 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
08000a1c l     O .bss	00000004 _ZL14emergency_used
08000b48 l     O .bss	00000800 _ZL16emergency_buffer
08000a18 l     O .bss	00000004 _ZL15dependents_used
08000a48 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
000222e0 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08000a20 l     O .bss	00000004 fc_static
000223f8 l     F .text	000000c0 _Unwind_RaiseException_Phase2
000224b8 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002338c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
080006c4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00023e38 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00023f64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002408c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
000240ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00024284 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00024404 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000245a0 l     F .text	00000050 alt_get_errno
000245f0 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00024844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08000a04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00024c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024de4 l     F .text	00000038 alt_dev_reg
0800094c l     O .rwdata	0000002c jtag_uart_0
08000978 l     O .rwdata	0000002c bt_rs232_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00025184 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00025298 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002553c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002597c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00022128 g     F .text	00000044 __cxa_free_exception
0002202c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
000219c0 g     F .text	00000018 _ZSt10unexpectedv
000244e8 g     F .text	00000078 alt_main
00022f6c g     F .text	00000080 _puts_r
00022268 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00022574 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00026134 g       *ABS*	00000000 __flash_rwdata_start
00021f9c g     F .text	00000084 __cxa_rethrow
00022500 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
000219fc g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00022564 g     F .text	00000010 .hidden _Unwind_GetIP
08001370 g       *ABS*	00000000 __alt_heap_start
000232e0 g     F .text	00000054 _kill_r
00022f20 g     F .text	0000004c printf
000230b4 g     F .text	0000007c _signal_r
00022200 g     F .text	00000040 __cxa_free_dependent_exception
00021a20 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
080000bc  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00024580 g     F .text	00000020 __malloc_unlock
00022268 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00021e50 g     F .text	00000020 _ZSt18uncaught_exceptionv
00022298 g     F .text	00000020 __cxa_deleted_virtual
00022240 g     F .text	00000004 _ZNSt9exceptionD2Ev
00020094 g     F .text	00000048 _ZN5CUartD2Ev
00020114 g     F .text	00000044 _ZN5CUart4OpenEPc
080001f8  w    O .rodata	00000014 _ZTVSt13bad_exception
00025ad4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
000225b0 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
08000a30 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0002278c g     F .text	00000074 .hidden _Unwind_Backtrace
08000a38 g     O .bss	00000004 alt_argv
080089a4 g       *ABS*	00000000 _gp
00024c64 g     F .text	00000030 usleep
00024264 g     F .text	00000020 getpid
000213c0 g     F .text	00000234 __cxa_call_unexpected
00021ce4 g     F .text	00000008 __cxa_get_exception_ptr
080007cc g     O .rwdata	00000180 alt_fd_list
000226a0 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00022530 g     F .text	00000018 .hidden _Unwind_GetCFA
000219d8 g     F .text	00000014 _ZSt13set_terminatePFvvE
000256e8 g     F .text	00000090 alt_find_dev
0002216c g     F .text	00000094 __cxa_allocate_dependent_exception
00021684 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00025a5c g     F .text	00000078 alt_io_redirect
00025e78 g       *ABS*	00000000 __DTOR_END__
0002169c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00022fec g     F .text	00000014 puts
00024f4c g     F .text	000000e4 altera_avalon_jtag_uart_read
00022818 g     F .text	00000014 malloc
00022ee4 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00023f54 g     F .text	00000008 .hidden __udivsi3
00023130 g     F .text	000000b4 _raise_r
08000a2c g     O .bss	00000004 __malloc_top_pad
00023334 g     F .text	00000004 _getpid_r
0002174c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000231e4 g     F .text	000000a8 __sigtramp_r
00023000 g     F .text	00000050 _sbrk_r
0800012c  w    O .rodata	00000020 _ZTVSt9type_info
00022248 g     F .text	0000000c _ZNKSt9exception4whatEv
00020220 g     F .text	00000098 _ZN5CUart5WriteEPci
080009fc g     O .rwdata	00000004 alt_max_fd
0002005c g     F .text	00000038 _ZN5CUartC1Ev
08000a28 g     O .bss	00000004 __malloc_max_sbrked_mem
0002038c g     F .text	00000124 _ZN5CUart15ReadWithTimeoutEPhtPtm
080000f0  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000216e0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000218d4 g     F .text	00000004 _ZdlPv
080009e4 g     O .rwdata	00000004 _global_impure_ptr
08001370 g       *ABS*	00000000 __bss_end
00024b60 g     F .text	00000104 alt_tick
000224e8 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00022800 g     F .text	00000018 abort
00021da0 g     F .text	000000b0 __cxa_end_catch
00022244 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00024ac8 g     F .text	00000098 alt_alarm_stop
000200dc g     F .text	00000038 _ZN5CUartD0Ev
00021998 g     F .text	00000018 _ZSt9terminatev
080007a4 g     O .rwdata	00000028 alt_dev_null
00022270 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
08000060  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00025520 g     F .text	0000001c alt_dcache_flush_all
080009c0  w    O .rwdata	00000008 _ZTISt9exception
08000a10 g       *ABS*	00000000 __ram_rwdata_end
00022020 g     F .text	00000004 _ZNSt9type_infoD1Ev
080009f4 g     O .rwdata	00000008 alt_dev_list
00022270 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00024ce4 g     F .text	00000100 write
0002203c g     F .text	00000004 _ZNSt9type_infoD0Ev
080002bc g       *ABS*	00000000 __ram_rodata_end
000242d4 g     F .text	00000130 kill
00023f5c g     F .text	00000008 .hidden __umodsi3
00022034 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000219ec g     F .text	00000010 _ZSt13get_terminatev
08001370 g       *ABS*	00000000 end
000252e8 g     F .text	000000e0 altera_avalon_uart_write
00022774 g     F .text	00000018 .hidden _Unwind_DeleteException
00021804 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00025e78 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00025124 g     F .text	00000060 altera_avalon_uart_write_fd
0002160c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00025030 g     F .text	00000094 altera_avalon_jtag_uart_write
08000180  w    O .rodata	00000012 _ZTSSt13bad_exception
000233f8 g     F .text	0000056c ___vfprintf_internal_r
0002005c g     F .text	00000038 _ZN5CUartC2Ev
00023aac g     F .text	00000288 _free_r
00025c9c g     F .text	0000019c __call_exitprocs
080009dc g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000003c _start
08000a40 g     O .bss	00000004 _alt_tick_rate
0800011c  w    O .rodata	0000000d _ZTSSt9type_info
00022278 g     F .text	00000020 __cxa_pure_virtual
08000a44 g     O .bss	00000004 _alt_nticks
000232a0 g     F .text	0000001c signal
00024894 g     F .text	00000104 read
00024e50 g     F .text	0000003c alt_sys_init
00025b58 g     F .text	00000144 __register_exitproc
00021a64 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000222b8 g     F .text	00000028 .hidden __mulsi3
080002bc g       *ABS*	00000000 __ram_rwdata_start
000225d0 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08000000 g       *ABS*	00000000 __ram_rodata_start
08001348 g     O .bss	00000028 __malloc_current_mallinfo
000226e4 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08000220  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00022020 g     F .text	00000004 _ZNSt9type_infoD2Ev
00022274 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00021c60 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00024e8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002588c g     F .text	000000d4 alt_get_fd
000253c8 g     F .text	00000158 alt_busy_sleep
080009d0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
080009ac  w    O .rwdata	00000007 _ZTS5CUart
00025b28 g     F .text	00000030 memcmp
08001370 g       *ABS*	00000000 __alt_stack_base
00021a20 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00022728 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00022024 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
080002bc g     O .rwdata	00000408 __malloc_av_
080001e4  w    O .rodata	00000014 _ZTVSt9exception
0002226c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00025778 g     F .text	00000114 alt_find_file
0002558c g     F .text	000000a4 alt_dev_llist_insert
00024560 g     F .text	00000020 __malloc_lock
00024a18 g     F .text	000000b0 sbrk
08000090  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00021f0c g     F .text	00000090 __cxa_throw
00022594 g     F .text	00000010 .hidden _Unwind_SetIP
00023d34 g     F .text	000000ac __sfvwrite_small_dev
08000a10 g       *ABS*	00000000 __bss_start
00022ec4 g     F .text	00000020 memset
000204b0 g     F .text	00000188 main
08000a3c g     O .bss	00000004 alt_envp
08000a24 g     O .bss	00000004 __malloc_max_total_mem
00024eec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000215f4 g     F .text	0000000c __cxa_get_globals_fast
0c000000 g       *ABS*	00000000 __alt_heap_limit
00022840 g     F .text	00000684 _malloc_r
00022254 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08000a00 g     O .rwdata	00000004 alt_errno
000232bc g     F .text	00000010 _init_signal
08000084  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00022244 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00023ea4 g     F .text	00000054 .hidden __divsi3
00023988 g     F .text	00000124 _malloc_trim_r
00025e78 g       *ABS*	00000000 __CTOR_END__
00023338 g     F .text	00000038 strcmp
0002030c g     F .text	00000080 _ZN5CUart16NoneBlockingReadEPciPi
00025e78 g       *ABS*	00000000 __flash_rodata_start
0800020c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00025e78 g       *ABS*	00000000 __DTOR_LIST__
00024e1c g     F .text	00000034 alt_irq_init
00024998 g     F .text	00000080 alt_release_fd
00021a30 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00020094 g     F .text	00000048 _ZN5CUartD1Ev
00020158 g     F .text	00000044 _ZN5CUart5CloseEv
00025af4 g     F .text	00000014 atexit
00023de0 g     F .text	00000058 _write_r
000225c8 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00021e70 g     F .text	00000058 __cxa_call_terminate
080009e8 g     O .rwdata	00000004 _impure_ptr
080009c8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08000a34 g     O .bss	00000004 alt_argc
0002568c g     F .text	0000005c _do_dtors
080009a4  w    O .rwdata	00000008 _ZTI5CUart
00021a10 g     F .text	00000010 _ZSt14get_unexpectedv
000225b8 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
080009ec g     O .rwdata	00000008 alt_fs_list
080001c0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000225a4 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00021cec g     F .text	000000b4 __cxa_begin_catch
0002169c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000219b0 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
00022264 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
080009b4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000202b8 g     F .text	00000054 _ZN5CUart11WriteStringEPc
00022084 g     F .text	000000a4 __cxa_allocate_exception
080000e4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08000a10 g       *ABS*	00000000 _edata
000250c4 g     F .text	00000060 altera_avalon_uart_read_fd
08001370 g       *ABS*	00000000 _end
00020ec0 g     F .text	00000500 __gxx_personality_sj0
00020020 g       *ABS*	00000000 __ram_exceptions_end
0002019c g     F .text	00000084 _ZN5CUart4ReadEPciPi
00022240 g     F .text	00000004 _ZNSt9exceptionD1Ev
080009e0 g     O .rwdata	00000004 __malloc_trim_threshold
00025b08 g     F .text	00000020 exit
00022548 g     F .text	0000001c .hidden _Unwind_SetGR
00021bc4 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000218d8 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
00023ef8 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000194  w    O .rodata	0000000c _ZTISt13bad_exception
000240b8 g     F .text	00000034 _exit
00022514 g     F .text	0000001c .hidden _Unwind_GetGR
00021600 g     F .text	0000000c __cxa_get_globals
080009d8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00023370 g     F .text	0000001c strlen
00023050 g     F .text	00000064 _init_signal_r
080009b8  w    O .rwdata	00000008 _ZTISt9type_info
000246e4 g     F .text	00000160 open
08000170  w    O .rodata	0000000d _ZTSSt9exception
00022260 g     F .text	00000004 _ZNSt9exceptionD0Ev
00025960 g     F .text	0000001c alt_icache_flush_all
0800000c  w    O .rodata	00000010 _ZTV5CUart
000225c0 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00023964 g     F .text	00000024 __vfprintf_internal
000251d4 g     F .text	000000c4 altera_avalon_uart_read
0002413c g     F .text	00000128 fcntl
08000a08 g     O .rwdata	00000008 alt_alarm_list
00025630 g     F .text	0000005c _do_ctors
000232cc g     F .text	00000014 __sigtramp
00023fb4 g     F .text	000000d8 close
080001a0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00024468 g     F .text	00000080 alt_load
00022040 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0002328c g     F .text	00000014 raise
0002282c g     F .text	00000014 free
000216ac g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   2002c:	d6a26914 	ori	gp,gp,35236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   20034:	10828414 	ori	r2,r2,2576

    movhi r3, %hi(__bss_end)
   20038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   2003c:	18c4dc14 	ori	r3,r3,4976

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <__alt_data_end+0xf4020044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00244680 	call	24468 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00244e80 	call	244e8 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <__alt_data_end+0xf4020058>

0002005c <_ZN5CUartC1Ev>:
 */
#include "CUart.h"
#include "sys/alt_dev.h"
#include "altera_avalon_uart.h"

CUart::CUart():
   2005c:	defffe04 	addi	sp,sp,-8
   20060:	df000115 	stw	fp,4(sp)
   20064:	df000104 	addi	fp,sp,4
   20068:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	UartHandle(0)
   2006c:	e0ffff17 	ldw	r3,-4(fp)
   20070:	00820034 	movhi	r2,2048
   20074:	10800504 	addi	r2,r2,20
   20078:	18800015 	stw	r2,0(r3)
   2007c:	e0bfff17 	ldw	r2,-4(fp)
   20080:	10000115 	stw	zero,4(r2)
{

}
   20084:	e037883a 	mov	sp,fp
   20088:	df000017 	ldw	fp,0(sp)
   2008c:	dec00104 	addi	sp,sp,4
   20090:	f800283a 	ret

00020094 <_ZN5CUartD1Ev>:

CUart::~CUart() {
   20094:	defffd04 	addi	sp,sp,-12
   20098:	dfc00215 	stw	ra,8(sp)
   2009c:	df000115 	stw	fp,4(sp)
   200a0:	df000104 	addi	fp,sp,4
   200a4:	e13fff15 	stw	r4,-4(fp)
   200a8:	e0ffff17 	ldw	r3,-4(fp)
   200ac:	00820034 	movhi	r2,2048
   200b0:	10800504 	addi	r2,r2,20
   200b4:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub


}
   200b8:	0005883a 	mov	r2,zero
   200bc:	10000226 	beq	r2,zero,200c8 <_ZN5CUartD1Ev+0x34>
   200c0:	e13fff17 	ldw	r4,-4(fp)
   200c4:	00218d40 	call	218d4 <_ZdlPv>
   200c8:	e037883a 	mov	sp,fp
   200cc:	dfc00117 	ldw	ra,4(sp)
   200d0:	df000017 	ldw	fp,0(sp)
   200d4:	dec00204 	addi	sp,sp,8
   200d8:	f800283a 	ret

000200dc <_ZN5CUartD0Ev>:
	UartHandle(0)
{

}

CUart::~CUart() {
   200dc:	defffd04 	addi	sp,sp,-12
   200e0:	dfc00215 	stw	ra,8(sp)
   200e4:	df000115 	stw	fp,4(sp)
   200e8:	df000104 	addi	fp,sp,4
   200ec:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub


}
   200f0:	e13fff17 	ldw	r4,-4(fp)
   200f4:	00200940 	call	20094 <_ZN5CUartD1Ev>
   200f8:	e13fff17 	ldw	r4,-4(fp)
   200fc:	00218d40 	call	218d4 <_ZdlPv>
   20100:	e037883a 	mov	sp,fp
   20104:	dfc00117 	ldw	ra,4(sp)
   20108:	df000017 	ldw	fp,0(sp)
   2010c:	dec00204 	addi	sp,sp,8
   20110:	f800283a 	ret

00020114 <_ZN5CUart4OpenEPc>:

void CUart::Open(char *pDeviceName)
{
   20114:	defffc04 	addi	sp,sp,-16
   20118:	dfc00315 	stw	ra,12(sp)
   2011c:	df000215 	stw	fp,8(sp)
   20120:	df000204 	addi	fp,sp,8
   20124:	e13ffe15 	stw	r4,-8(fp)
   20128:	e17fff15 	stw	r5,-4(fp)
	UartHandle = open(pDeviceName, O_ACCMODE); // open file for reading and writing
   2012c:	e13fff17 	ldw	r4,-4(fp)
   20130:	014000c4 	movi	r5,3
   20134:	00246e40 	call	246e4 <open>
   20138:	1007883a 	mov	r3,r2
   2013c:	e0bffe17 	ldw	r2,-8(fp)
   20140:	10c00115 	stw	r3,4(r2)
}
   20144:	e037883a 	mov	sp,fp
   20148:	dfc00117 	ldw	ra,4(sp)
   2014c:	df000017 	ldw	fp,0(sp)
   20150:	dec00204 	addi	sp,sp,8
   20154:	f800283a 	ret

00020158 <_ZN5CUart5CloseEv>:

void  CUart::Close()
{
   20158:	defffd04 	addi	sp,sp,-12
   2015c:	dfc00215 	stw	ra,8(sp)
   20160:	df000115 	stw	fp,4(sp)
   20164:	df000104 	addi	fp,sp,4
   20168:	e13fff15 	stw	r4,-4(fp)
    if (UartHandle)
   2016c:	e0bfff17 	ldw	r2,-4(fp)
   20170:	10800117 	ldw	r2,4(r2)
   20174:	10000426 	beq	r2,zero,20188 <_ZN5CUart5CloseEv+0x30>
      close(UartHandle);
   20178:	e0bfff17 	ldw	r2,-4(fp)
   2017c:	10800117 	ldw	r2,4(r2)
   20180:	1009883a 	mov	r4,r2
   20184:	0023fb40 	call	23fb4 <close>
}
   20188:	e037883a 	mov	sp,fp
   2018c:	dfc00117 	ldw	ra,4(sp)
   20190:	df000017 	ldw	fp,0(sp)
   20194:	dec00204 	addi	sp,sp,8
   20198:	f800283a 	ret

0002019c <_ZN5CUart4ReadEPciPi>:

bool CUart::Read(char *pBuffer, int nBufferSize, int *prx_len){
   2019c:	defff804 	addi	sp,sp,-32
   201a0:	dfc00715 	stw	ra,28(sp)
   201a4:	df000615 	stw	fp,24(sp)
   201a8:	df000604 	addi	fp,sp,24
   201ac:	e13ffc15 	stw	r4,-16(fp)
   201b0:	e17ffd15 	stw	r5,-12(fp)
   201b4:	e1bffe15 	stw	r6,-8(fp)
   201b8:	e1ffff15 	stw	r7,-4(fp)
	int nResult;
    bool bSuccess = FALSE;
   201bc:	e03ffa05 	stb	zero,-24(fp)
    if (UartHandle){
   201c0:	e0bffc17 	ldw	r2,-16(fp)
   201c4:	10800117 	ldw	r2,4(r2)
   201c8:	10000f26 	beq	r2,zero,20208 <_ZN5CUart4ReadEPciPi+0x6c>
        nResult = read(UartHandle, pBuffer, nBufferSize);
   201cc:	e0bffc17 	ldw	r2,-16(fp)
   201d0:	10c00117 	ldw	r3,4(r2)
   201d4:	e0bffe17 	ldw	r2,-8(fp)
   201d8:	1809883a 	mov	r4,r3
   201dc:	e17ffd17 	ldw	r5,-12(fp)
   201e0:	100d883a 	mov	r6,r2
   201e4:	00248940 	call	24894 <read>
   201e8:	e0bffb15 	stw	r2,-20(fp)
        if (nResult >= 0){
   201ec:	e0bffb17 	ldw	r2,-20(fp)
   201f0:	10000516 	blt	r2,zero,20208 <_ZN5CUart4ReadEPciPi+0x6c>
            *prx_len = nResult;
   201f4:	e0bfff17 	ldw	r2,-4(fp)
   201f8:	e0fffb17 	ldw	r3,-20(fp)
   201fc:	10c00015 	stw	r3,0(r2)
            bSuccess = TRUE;
   20200:	00800044 	movi	r2,1
   20204:	e0bffa05 	stb	r2,-24(fp)
            //if (*prx_len == nBufferSize)
            //    bSuccess = TRUE;
        }
    }
    return bSuccess;
   20208:	e0bffa03 	ldbu	r2,-24(fp)
}
   2020c:	e037883a 	mov	sp,fp
   20210:	dfc00117 	ldw	ra,4(sp)
   20214:	df000017 	ldw	fp,0(sp)
   20218:	dec00204 	addi	sp,sp,8
   2021c:	f800283a 	ret

00020220 <_ZN5CUart5WriteEPci>:




bool  CUart::Write(char *pData, int nDataSize)
{
   20220:	defffa04 	addi	sp,sp,-24
   20224:	dfc00515 	stw	ra,20(sp)
   20228:	df000415 	stw	fp,16(sp)
   2022c:	df000404 	addi	fp,sp,16
   20230:	e13ffd15 	stw	r4,-12(fp)
   20234:	e17ffe15 	stw	r5,-8(fp)
   20238:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = FALSE;
   2023c:	e03ffc05 	stb	zero,-16(fp)
    if (UartHandle){
   20240:	e0bffd17 	ldw	r2,-12(fp)
   20244:	10800117 	ldw	r2,4(r2)
   20248:	10001526 	beq	r2,zero,202a0 <_ZN5CUart5WriteEPci+0x80>
    	write(UartHandle, pData, nDataSize);
   2024c:	e0bffd17 	ldw	r2,-12(fp)
   20250:	10c00117 	ldw	r3,4(r2)
   20254:	e0bfff17 	ldw	r2,-4(fp)
   20258:	1809883a 	mov	r4,r3
   2025c:	e17ffe17 	ldw	r5,-8(fp)
   20260:	100d883a 	mov	r6,r2
   20264:	0024ce40 	call	24ce4 <write>
        if (write(UartHandle, pData, nDataSize) == nDataSize)
   20268:	e0bffd17 	ldw	r2,-12(fp)
   2026c:	10c00117 	ldw	r3,4(r2)
   20270:	e0bfff17 	ldw	r2,-4(fp)
   20274:	1809883a 	mov	r4,r3
   20278:	e17ffe17 	ldw	r5,-8(fp)
   2027c:	100d883a 	mov	r6,r2
   20280:	0024ce40 	call	24ce4 <write>
   20284:	1007883a 	mov	r3,r2
   20288:	e0bfff17 	ldw	r2,-4(fp)
   2028c:	1885003a 	cmpeq	r2,r3,r2
   20290:	10803fcc 	andi	r2,r2,255
   20294:	10000226 	beq	r2,zero,202a0 <_ZN5CUart5WriteEPci+0x80>
            bSuccess = TRUE;
   20298:	00800044 	movi	r2,1
   2029c:	e0bffc05 	stb	r2,-16(fp)
    }
    return bSuccess;
   202a0:	e0bffc03 	ldbu	r2,-16(fp)
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	dfc00117 	ldw	ra,4(sp)
   202ac:	df000017 	ldw	fp,0(sp)
   202b0:	dec00204 	addi	sp,sp,8
   202b4:	f800283a 	ret

000202b8 <_ZN5CUart11WriteStringEPc>:


bool CUart::WriteString(char *pString)
{
   202b8:	defffc04 	addi	sp,sp,-16
   202bc:	dfc00315 	stw	ra,12(sp)
   202c0:	df000215 	stw	fp,8(sp)
   202c4:	df000204 	addi	fp,sp,8
   202c8:	e13ffe15 	stw	r4,-8(fp)
   202cc:	e17fff15 	stw	r5,-4(fp)
	printf("TX--> %s\n",pString);
   202d0:	01020034 	movhi	r4,2048
   202d4:	21000004 	addi	r4,r4,0
   202d8:	e17fff17 	ldw	r5,-4(fp)
   202dc:	0022f200 	call	22f20 <printf>
	return CUart::Write(pString, strlen(pString));
   202e0:	e13fff17 	ldw	r4,-4(fp)
   202e4:	00233700 	call	23370 <strlen>
   202e8:	e13ffe17 	ldw	r4,-8(fp)
   202ec:	e17fff17 	ldw	r5,-4(fp)
   202f0:	100d883a 	mov	r6,r2
   202f4:	00202200 	call	20220 <_ZN5CUart5WriteEPci>
}
   202f8:	e037883a 	mov	sp,fp
   202fc:	dfc00117 	ldw	ra,4(sp)
   20300:	df000017 	ldw	fp,0(sp)
   20304:	dec00204 	addi	sp,sp,8
   20308:	f800283a 	ret

0002030c <_ZN5CUart16NoneBlockingReadEPciPi>:

bool CUart::NoneBlockingRead(char *pBuffer, int nBufferSize, int *prx_len){
   2030c:	defff904 	addi	sp,sp,-28
   20310:	dfc00615 	stw	ra,24(sp)
   20314:	df000515 	stw	fp,20(sp)
   20318:	df000504 	addi	fp,sp,20
   2031c:	e13ffc15 	stw	r4,-16(fp)
   20320:	e17ffd15 	stw	r5,-12(fp)
   20324:	e1bffe15 	stw	r6,-8(fp)
   20328:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess;
    fcntl(UartHandle, F_SETFL, O_ACCMODE | O_NONBLOCK);
   2032c:	e0bffc17 	ldw	r2,-16(fp)
   20330:	10800117 	ldw	r2,4(r2)
   20334:	1009883a 	mov	r4,r2
   20338:	01400104 	movi	r5,4
   2033c:	019000c4 	movi	r6,16387
   20340:	002413c0 	call	2413c <fcntl>
    bSuccess = CUart::Read(pBuffer, nBufferSize, prx_len);
   20344:	e13ffc17 	ldw	r4,-16(fp)
   20348:	e17ffd17 	ldw	r5,-12(fp)
   2034c:	e1bffe17 	ldw	r6,-8(fp)
   20350:	e1ffff17 	ldw	r7,-4(fp)
   20354:	002019c0 	call	2019c <_ZN5CUart4ReadEPciPi>
   20358:	e0bffb05 	stb	r2,-20(fp)
    fcntl(UartHandle, F_SETFL, O_ACCMODE);
   2035c:	e0bffc17 	ldw	r2,-16(fp)
   20360:	10800117 	ldw	r2,4(r2)
   20364:	1009883a 	mov	r4,r2
   20368:	01400104 	movi	r5,4
   2036c:	018000c4 	movi	r6,3
   20370:	002413c0 	call	2413c <fcntl>
    return bSuccess;
   20374:	e0bffb03 	ldbu	r2,-20(fp)
}
   20378:	e037883a 	mov	sp,fp
   2037c:	dfc00117 	ldw	ra,4(sp)
   20380:	df000017 	ldw	fp,0(sp)
   20384:	dec00204 	addi	sp,sp,8
   20388:	f800283a 	ret

0002038c <_ZN5CUart15ReadWithTimeoutEPhtPtm>:


bool CUart::ReadWithTimeout(alt_u8 *pBuffer, alt_u16 nBufferSize, alt_u16 *prx_len, alt_u32 timeout){
   2038c:	defff504 	addi	sp,sp,-44
   20390:	dfc00a15 	stw	ra,40(sp)
   20394:	df000915 	stw	fp,36(sp)
   20398:	df000904 	addi	fp,sp,36
   2039c:	e13ffc15 	stw	r4,-16(fp)
   203a0:	e17ffd15 	stw	r5,-12(fp)
   203a4:	3005883a 	mov	r2,r6
   203a8:	e1ffff15 	stw	r7,-4(fp)
   203ac:	e0bffe0d 	sth	r2,-8(fp)
    bool bSuccess = FALSE;
   203b0:	e03ff705 	stb	zero,-36(fp)
    if (UartHandle){
   203b4:	e0bffc17 	ldw	r2,-16(fp)
   203b8:	10800117 	ldw	r2,4(r2)
   203bc:	10003626 	beq	r2,zero,20498 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0x10c>
        int rx_total_cnt = 0, rx_cnt;
   203c0:	e03ff815 	stw	zero,-32(fp)
        alt_u32 time_start;
        bool bTimeout = FALSE;
   203c4:	e03ff905 	stb	zero,-28(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   203c8:	00820034 	movhi	r2,2048
   203cc:	10829104 	addi	r2,r2,2628
   203d0:	10800017 	ldw	r2,0(r2)
        time_start = alt_nticks();
   203d4:	e0bffa15 	stw	r2,-24(fp)
        while(!bSuccess && !bTimeout){
   203d8:	00002306 	br	20468 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xdc>
        	NoneBlockingRead((char *)pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt, &rx_cnt);
   203dc:	e0bff817 	ldw	r2,-32(fp)
   203e0:	e0fffd17 	ldw	r3,-12(fp)
   203e4:	188b883a 	add	r5,r3,r2
   203e8:	e0fffe0b 	ldhu	r3,-8(fp)
   203ec:	e0bff817 	ldw	r2,-32(fp)
   203f0:	1887c83a 	sub	r3,r3,r2
   203f4:	e0bffb04 	addi	r2,fp,-20
   203f8:	e13ffc17 	ldw	r4,-16(fp)
   203fc:	180d883a 	mov	r6,r3
   20400:	100f883a 	mov	r7,r2
   20404:	002030c0 	call	2030c <_ZN5CUart16NoneBlockingReadEPciPi>
            //rx_cnt = read(pUart, pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt);
            rx_total_cnt += rx_cnt;
   20408:	e0bffb17 	ldw	r2,-20(fp)
   2040c:	e0fff817 	ldw	r3,-32(fp)
   20410:	1885883a 	add	r2,r3,r2
   20414:	e0bff815 	stw	r2,-32(fp)
            if (rx_total_cnt == nBufferSize)
   20418:	e0fffe0b 	ldhu	r3,-8(fp)
   2041c:	e0bff817 	ldw	r2,-32(fp)
   20420:	1880031e 	bne	r3,r2,20430 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xa4>
                bSuccess = TRUE;
   20424:	00800044 	movi	r2,1
   20428:	e0bff705 	stb	r2,-36(fp)
   2042c:	00000e06 	br	20468 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xdc>
   20430:	00820034 	movhi	r2,2048
   20434:	10829104 	addi	r2,r2,2628
   20438:	10c00017 	ldw	r3,0(r2)
            else if ((alt_nticks() - time_start) > timeout)
   2043c:	e0bffa17 	ldw	r2,-24(fp)
   20440:	1885c83a 	sub	r2,r3,r2
   20444:	e0c00217 	ldw	r3,8(fp)
   20448:	1885803a 	cmpltu	r2,r3,r2
   2044c:	10803fcc 	andi	r2,r2,255
   20450:	10000326 	beq	r2,zero,20460 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xd4>
                bTimeout = TRUE;
   20454:	00800044 	movi	r2,1
   20458:	e0bff905 	stb	r2,-28(fp)
   2045c:	00000206 	br	20468 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xdc>
            else
                usleep(1);
   20460:	01000044 	movi	r4,1
   20464:	0024c640 	call	24c64 <usleep>
    if (UartHandle){
        int rx_total_cnt = 0, rx_cnt;
        alt_u32 time_start;
        bool bTimeout = FALSE;
        time_start = alt_nticks();
        while(!bSuccess && !bTimeout){
   20468:	e0bff703 	ldbu	r2,-36(fp)
   2046c:	1080005c 	xori	r2,r2,1
   20470:	10803fcc 	andi	r2,r2,255
   20474:	10000426 	beq	r2,zero,20488 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xfc>
   20478:	e0bff903 	ldbu	r2,-28(fp)
   2047c:	1080005c 	xori	r2,r2,1
   20480:	10803fcc 	andi	r2,r2,255
   20484:	103fd51e 	bne	r2,zero,203dc <__alt_data_end+0xf40203dc>
            else if ((alt_nticks() - time_start) > timeout)
                bTimeout = TRUE;
            else
                usleep(1);
        }
        *prx_len = rx_total_cnt;
   20488:	e0bff817 	ldw	r2,-32(fp)
   2048c:	1007883a 	mov	r3,r2
   20490:	e0bfff17 	ldw	r2,-4(fp)
   20494:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;
   20498:	e0bff703 	ldbu	r2,-36(fp)
}
   2049c:	e037883a 	mov	sp,fp
   204a0:	dfc00117 	ldw	ra,4(sp)
   204a4:	df000017 	ldw	fp,0(sp)
   204a8:	dec00204 	addi	sp,sp,8
   204ac:	f800283a 	ret

000204b0 <main>:
#include "CUart.h"

#define BT_UART_NAME (char *)("bt_rs232_uart")

int main()
{
   204b0:	deffe404 	addi	sp,sp,-112
   204b4:	dfc01b15 	stw	ra,108(sp)
   204b8:	df001a15 	stw	fp,104(sp)
   204bc:	ddc01915 	stw	r23,100(sp)
   204c0:	dd801815 	stw	r22,96(sp)
   204c4:	dd401715 	stw	r21,92(sp)
   204c8:	dd001615 	stw	r20,88(sp)
   204cc:	dcc01515 	stw	r19,84(sp)
   204d0:	dc801415 	stw	r18,80(sp)
   204d4:	dc401315 	stw	r17,76(sp)
   204d8:	dc001215 	stw	r16,72(sp)
   204dc:	df001a04 	addi	fp,sp,104
   204e0:	008000b4 	movhi	r2,2
   204e4:	1083b004 	addi	r2,r2,3776
   204e8:	e0bfee15 	stw	r2,-72(fp)
   204ec:	008000b4 	movhi	r2,2
   204f0:	10978e04 	addi	r2,r2,24120
   204f4:	e0bfef15 	stw	r2,-68(fp)
   204f8:	e0bff004 	addi	r2,fp,-64
   204fc:	e0ffe604 	addi	r3,fp,-104
   20500:	10c00015 	stw	r3,0(r2)
   20504:	00c000b4 	movhi	r3,2
   20508:	18c17204 	addi	r3,r3,1480
   2050c:	10c00115 	stw	r3,4(r2)
   20510:	16c00215 	stw	sp,8(r2)
   20514:	e0bfe804 	addi	r2,fp,-96
   20518:	1009883a 	mov	r4,r2
   2051c:	00224e80 	call	224e8 <_Unwind_SjLj_Register>
  CUart Uart;
   20520:	00bfffc4 	movi	r2,-1
   20524:	e0bfe915 	stw	r2,-92(fp)
   20528:	e13fe604 	addi	r4,fp,-104
   2052c:	002005c0 	call	2005c <_ZN5CUartC1Ev>
  Uart.Open(BT_UART_NAME);
   20530:	e13fe604 	addi	r4,fp,-104
   20534:	01420034 	movhi	r5,2048
   20538:	00800044 	movi	r2,1
   2053c:	e0bfe915 	stw	r2,-92(fp)
   20540:	29400704 	addi	r5,r5,28
   20544:	00201140 	call	20114 <_ZN5CUart4OpenEPc>

  //AT
  Uart.WriteString((char *)"AT\r\n");
   20548:	e13fe604 	addi	r4,fp,-104
   2054c:	01420034 	movhi	r5,2048
   20550:	29400b04 	addi	r5,r5,44
   20554:	00202b80 	call	202b8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   20558:	010003f4 	movhi	r4,15
   2055c:	21109004 	addi	r4,r4,16960
   20560:	0024c640 	call	24c64 <usleep>
  //Restore original
  Uart.WriteString((char *)"AT+ORGL\r\n");
   20564:	e13fe604 	addi	r4,fp,-104
   20568:	01420034 	movhi	r5,2048
   2056c:	29400d04 	addi	r5,r5,52
   20570:	00202b80 	call	202b8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   20574:	010003f4 	movhi	r4,15
   20578:	21109004 	addi	r4,r4,16960
   2057c:	0024c640 	call	24c64 <usleep>
  //Set Baud Rate
  Uart.WriteString((char *)"AT+UART=115200,0,0\r\n");
   20580:	e13fe604 	addi	r4,fp,-104
   20584:	01420034 	movhi	r5,2048
   20588:	29401004 	addi	r5,r5,64
   2058c:	00202b80 	call	202b8 <_ZN5CUart11WriteStringEPc>
  usleep(1000000);
   20590:	010003f4 	movhi	r4,15
   20594:	21109004 	addi	r4,r4,16960
   20598:	0024c640 	call	24c64 <usleep>


  printf("Finish\n");
   2059c:	01020034 	movhi	r4,2048
   205a0:	21001604 	addi	r4,r4,88
   205a4:	0022fec0 	call	22fec <puts>

  return 0;
   205a8:	e03ff515 	stw	zero,-44(fp)
   205ac:	00bfffc4 	movi	r2,-1
   205b0:	e0bfe915 	stw	r2,-92(fp)
   205b4:	e13fe604 	addi	r4,fp,-104
   205b8:	00200940 	call	20094 <_ZN5CUartD1Ev>
   205bc:	e0bff517 	ldw	r2,-44(fp)
   205c0:	e0bff615 	stw	r2,-40(fp)
   205c4:	00000b06 	br	205f4 <main+0x144>
   205c8:	e7001a04 	addi	fp,fp,104
   205cc:	e0bfea17 	ldw	r2,-88(fp)
   205d0:	e0bff715 	stw	r2,-36(fp)
   205d4:	e03fe915 	stw	zero,-92(fp)
   205d8:	e13fe604 	addi	r4,fp,-104
   205dc:	00200940 	call	20094 <_ZN5CUartD1Ev>
   205e0:	e0fff717 	ldw	r3,-36(fp)
   205e4:	00bfffc4 	movi	r2,-1
   205e8:	e0bfe915 	stw	r2,-92(fp)
   205ec:	1809883a 	mov	r4,r3
   205f0:	00226e40 	call	226e4 <_Unwind_SjLj_Resume>
   205f4:	e0bfe804 	addi	r2,fp,-96
   205f8:	1009883a 	mov	r4,r2
   205fc:	00225000 	call	22500 <_Unwind_SjLj_Unregister>
}
   20600:	e0bff617 	ldw	r2,-40(fp)
   20604:	e6fff804 	addi	sp,fp,-32
   20608:	dfc00917 	ldw	ra,36(sp)
   2060c:	df000817 	ldw	fp,32(sp)
   20610:	ddc00717 	ldw	r23,28(sp)
   20614:	dd800617 	ldw	r22,24(sp)
   20618:	dd400517 	ldw	r21,20(sp)
   2061c:	dd000417 	ldw	r20,16(sp)
   20620:	dcc00317 	ldw	r19,12(sp)
   20624:	dc800217 	ldw	r18,8(sp)
   20628:	dc400117 	ldw	r17,4(sp)
   2062c:	dc000017 	ldw	r16,0(sp)
   20630:	dec00a04 	addi	sp,sp,40
   20634:	f800283a 	ret

00020638 <_ZL12read_sleb128PKhPl>:
   20638:	0011883a 	mov	r8,zero
   2063c:	000d883a 	mov	r6,zero
   20640:	21c00003 	ldbu	r7,0(r4)
   20644:	20800044 	addi	r2,r4,1
   20648:	1009883a 	mov	r4,r2
   2064c:	38c01fcc 	andi	r3,r7,127
   20650:	1986983a 	sll	r3,r3,r6
   20654:	3a403fcc 	andi	r9,r7,255
   20658:	4a40201c 	xori	r9,r9,128
   2065c:	4a7fe004 	addi	r9,r9,-128
   20660:	40d0b03a 	or	r8,r8,r3
   20664:	318001c4 	addi	r6,r6,7
   20668:	483ff516 	blt	r9,zero,20640 <__alt_data_end+0xf4020640>
   2066c:	00c007c4 	movi	r3,31
   20670:	19800536 	bltu	r3,r6,20688 <_ZL12read_sleb128PKhPl+0x50>
   20674:	39c0100c 	andi	r7,r7,64
   20678:	38000326 	beq	r7,zero,20688 <_ZL12read_sleb128PKhPl+0x50>
   2067c:	00ffffc4 	movi	r3,-1
   20680:	198c983a 	sll	r6,r3,r6
   20684:	3210b03a 	or	r8,r6,r8
   20688:	2a000015 	stw	r8,0(r5)
   2068c:	f800283a 	ret

00020690 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   20690:	28800017 	ldw	r2,0(r5)
   20694:	30c00017 	ldw	r3,0(r6)
   20698:	defffb04 	addi	sp,sp,-20
   2069c:	10800217 	ldw	r2,8(r2)
   206a0:	dc400315 	stw	r17,12(sp)
   206a4:	dc000215 	stw	r16,8(sp)
   206a8:	d9400115 	stw	r5,4(sp)
   206ac:	dfc00415 	stw	ra,16(sp)
   206b0:	2021883a 	mov	r16,r4
   206b4:	d8c00015 	stw	r3,0(sp)
   206b8:	2809883a 	mov	r4,r5
   206bc:	3023883a 	mov	r17,r6
   206c0:	103ee83a 	callr	r2
   206c4:	10803fcc 	andi	r2,r2,255
   206c8:	d9400117 	ldw	r5,4(sp)
   206cc:	10000326 	beq	r2,zero,206dc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   206d0:	d8800017 	ldw	r2,0(sp)
   206d4:	10800017 	ldw	r2,0(r2)
   206d8:	d8800015 	stw	r2,0(sp)
   206dc:	80800017 	ldw	r2,0(r16)
   206e0:	8009883a 	mov	r4,r16
   206e4:	d80d883a 	mov	r6,sp
   206e8:	10800417 	ldw	r2,16(r2)
   206ec:	01c00044 	movi	r7,1
   206f0:	103ee83a 	callr	r2
   206f4:	10c03fcc 	andi	r3,r2,255
   206f8:	18000226 	beq	r3,zero,20704 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
   206fc:	d8c00017 	ldw	r3,0(sp)
   20700:	88c00015 	stw	r3,0(r17)
   20704:	dfc00417 	ldw	ra,16(sp)
   20708:	dc400317 	ldw	r17,12(sp)
   2070c:	dc000217 	ldw	r16,8(sp)
   20710:	dec00504 	addi	sp,sp,20
   20714:	f800283a 	ret

00020718 <_ZL21size_of_encoded_valueh>:
   20718:	deffff04 	addi	sp,sp,-4
   2071c:	dfc00015 	stw	ra,0(sp)
   20720:	00803fc4 	movi	r2,255
   20724:	20802026 	beq	r4,r2,207a8 <_ZL21size_of_encoded_valueh+0x90>
   20728:	210001cc 	andi	r4,r4,7
   2072c:	00800144 	movi	r2,5
   20730:	11001c36 	bltu	r2,r4,207a4 <_ZL21size_of_encoded_valueh+0x8c>
   20734:	200890ba 	slli	r4,r4,2
   20738:	008000b4 	movhi	r2,2
   2073c:	1081d304 	addi	r2,r2,1868
   20740:	2089883a 	add	r4,r4,r2
   20744:	20800017 	ldw	r2,0(r4)
   20748:	1000683a 	jmp	r2
   2074c:	00020764 	muli	zero,zero,2077
   20750:	000207a4 	muli	zero,zero,2078
   20754:	00020774 	movhi	zero,2077
   20758:	00020764 	muli	zero,zero,2077
   2075c:	00020794 	movui	zero,2078
   20760:	00020784 	movi	zero,2078
   20764:	00800104 	movi	r2,4
   20768:	dfc00017 	ldw	ra,0(sp)
   2076c:	dec00104 	addi	sp,sp,4
   20770:	f800283a 	ret
   20774:	00800084 	movi	r2,2
   20778:	dfc00017 	ldw	ra,0(sp)
   2077c:	dec00104 	addi	sp,sp,4
   20780:	f800283a 	ret
   20784:	00800044 	movi	r2,1
   20788:	dfc00017 	ldw	ra,0(sp)
   2078c:	dec00104 	addi	sp,sp,4
   20790:	f800283a 	ret
   20794:	00800204 	movi	r2,8
   20798:	dfc00017 	ldw	ra,0(sp)
   2079c:	dec00104 	addi	sp,sp,4
   207a0:	f800283a 	ret
   207a4:	00228000 	call	22800 <abort>
   207a8:	0005883a 	mov	r2,zero
   207ac:	dfc00017 	ldw	ra,0(sp)
   207b0:	dec00104 	addi	sp,sp,4
   207b4:	f800283a 	ret

000207b8 <_ZL28read_encoded_value_with_basehjPKhPj>:
   207b8:	defffa04 	addi	sp,sp,-24
   207bc:	dc000315 	stw	r16,12(sp)
   207c0:	dfc00515 	stw	ra,20(sp)
   207c4:	dc400415 	stw	r17,16(sp)
   207c8:	00801404 	movi	r2,80
   207cc:	2021883a 	mov	r16,r4
   207d0:	20807526 	beq	r4,r2,209a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
   207d4:	208003cc 	andi	r2,r4,15
   207d8:	00c00304 	movi	r3,12
   207dc:	18807136 	bltu	r3,r2,209a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
   207e0:	100490ba 	slli	r2,r2,2
   207e4:	00c000b4 	movhi	r3,2
   207e8:	18c1ff04 	addi	r3,r3,2044
   207ec:	10c5883a 	add	r2,r2,r3
   207f0:	10800017 	ldw	r2,0(r2)
   207f4:	2823883a 	mov	r17,r5
   207f8:	1000683a 	jmp	r2
   207fc:	000208e4 	muli	zero,zero,2083
   20800:	00020914 	movui	zero,2084
   20804:	000208cc 	andi	zero,zero,2083
   20808:	00020830 	cmpltui	zero,zero,2080
   2080c:	0002089c 	xori	zero,zero,2082
   20810:	00020950 	cmplti	zero,zero,2085
   20814:	000209a4 	muli	zero,zero,2086
   20818:	000209a4 	muli	zero,zero,2086
   2081c:	000209a4 	muli	zero,zero,2086
   20820:	0002095c 	xori	zero,zero,2085
   20824:	00020980 	call	2098 <__alt_mem_onchip_memory2_0-0x1df68>
   20828:	00020830 	cmpltui	zero,zero,2080
   2082c:	0002089c 	xori	zero,zero,2082
   20830:	30800043 	ldbu	r2,1(r6)
   20834:	30c00083 	ldbu	r3,2(r6)
   20838:	310000c3 	ldbu	r4,3(r6)
   2083c:	32000003 	ldbu	r8,0(r6)
   20840:	1004923a 	slli	r2,r2,8
   20844:	1806943a 	slli	r3,r3,16
   20848:	2008963a 	slli	r4,r4,24
   2084c:	1204b03a 	or	r2,r2,r8
   20850:	1884b03a 	or	r2,r3,r2
   20854:	2086b03a 	or	r3,r4,r2
   20858:	30800104 	addi	r2,r6,4
   2085c:	18000926 	beq	r3,zero,20884 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   20860:	81401c0c 	andi	r5,r16,112
   20864:	01000404 	movi	r4,16
   20868:	29005526 	beq	r5,r4,209c0 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
   2086c:	84003fcc 	andi	r16,r16,255
   20870:	8400201c 	xori	r16,r16,128
   20874:	843fe004 	addi	r16,r16,-128
   20878:	1c47883a 	add	r3,r3,r17
   2087c:	8000010e 	bge	r16,zero,20884 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   20880:	18c00017 	ldw	r3,0(r3)
   20884:	38c00015 	stw	r3,0(r7)
   20888:	dfc00517 	ldw	ra,20(sp)
   2088c:	dc400417 	ldw	r17,16(sp)
   20890:	dc000317 	ldw	r16,12(sp)
   20894:	dec00604 	addi	sp,sp,24
   20898:	f800283a 	ret
   2089c:	30800043 	ldbu	r2,1(r6)
   208a0:	30c00083 	ldbu	r3,2(r6)
   208a4:	310000c3 	ldbu	r4,3(r6)
   208a8:	32000003 	ldbu	r8,0(r6)
   208ac:	1004923a 	slli	r2,r2,8
   208b0:	1806943a 	slli	r3,r3,16
   208b4:	2008963a 	slli	r4,r4,24
   208b8:	1204b03a 	or	r2,r2,r8
   208bc:	1884b03a 	or	r2,r3,r2
   208c0:	2086b03a 	or	r3,r4,r2
   208c4:	30800204 	addi	r2,r6,8
   208c8:	003fe406 	br	2085c <__alt_data_end+0xf402085c>
   208cc:	30c00043 	ldbu	r3,1(r6)
   208d0:	32000003 	ldbu	r8,0(r6)
   208d4:	30800084 	addi	r2,r6,2
   208d8:	1806923a 	slli	r3,r3,8
   208dc:	1a06b03a 	or	r3,r3,r8
   208e0:	003fde06 	br	2085c <__alt_data_end+0xf402085c>
   208e4:	30800043 	ldbu	r2,1(r6)
   208e8:	30c00083 	ldbu	r3,2(r6)
   208ec:	314000c3 	ldbu	r5,3(r6)
   208f0:	31000003 	ldbu	r4,0(r6)
   208f4:	1004923a 	slli	r2,r2,8
   208f8:	1806943a 	slli	r3,r3,16
   208fc:	280a963a 	slli	r5,r5,24
   20900:	1104b03a 	or	r2,r2,r4
   20904:	1884b03a 	or	r2,r3,r2
   20908:	2886b03a 	or	r3,r5,r2
   2090c:	30800104 	addi	r2,r6,4
   20910:	003fd206 	br	2085c <__alt_data_end+0xf402085c>
   20914:	3013883a 	mov	r9,r6
   20918:	0007883a 	mov	r3,zero
   2091c:	0011883a 	mov	r8,zero
   20920:	49000003 	ldbu	r4,0(r9)
   20924:	48800044 	addi	r2,r9,1
   20928:	1013883a 	mov	r9,r2
   2092c:	21401fcc 	andi	r5,r4,127
   20930:	2a0a983a 	sll	r5,r5,r8
   20934:	21003fcc 	andi	r4,r4,255
   20938:	2100201c 	xori	r4,r4,128
   2093c:	213fe004 	addi	r4,r4,-128
   20940:	1946b03a 	or	r3,r3,r5
   20944:	420001c4 	addi	r8,r8,7
   20948:	203ff516 	blt	r4,zero,20920 <__alt_data_end+0xf4020920>
   2094c:	003fc306 	br	2085c <__alt_data_end+0xf402085c>
   20950:	30c00003 	ldbu	r3,0(r6)
   20954:	30800044 	addi	r2,r6,1
   20958:	003fc006 	br	2085c <__alt_data_end+0xf402085c>
   2095c:	3009883a 	mov	r4,r6
   20960:	d80b883a 	mov	r5,sp
   20964:	d9800115 	stw	r6,4(sp)
   20968:	d9c00215 	stw	r7,8(sp)
   2096c:	00206380 	call	20638 <_ZL12read_sleb128PKhPl>
   20970:	d8c00017 	ldw	r3,0(sp)
   20974:	d9800117 	ldw	r6,4(sp)
   20978:	d9c00217 	ldw	r7,8(sp)
   2097c:	003fb706 	br	2085c <__alt_data_end+0xf402085c>
   20980:	30c00043 	ldbu	r3,1(r6)
   20984:	32000003 	ldbu	r8,0(r6)
   20988:	30800084 	addi	r2,r6,2
   2098c:	1806923a 	slli	r3,r3,8
   20990:	1a06b03a 	or	r3,r3,r8
   20994:	18ffffcc 	andi	r3,r3,65535
   20998:	18e0001c 	xori	r3,r3,32768
   2099c:	18e00004 	addi	r3,r3,-32768
   209a0:	003fae06 	br	2085c <__alt_data_end+0xf402085c>
   209a4:	00228000 	call	22800 <abort>
   209a8:	318000c4 	addi	r6,r6,3
   209ac:	00bfff04 	movi	r2,-4
   209b0:	3084703a 	and	r2,r6,r2
   209b4:	10c00017 	ldw	r3,0(r2)
   209b8:	10800104 	addi	r2,r2,4
   209bc:	003fb106 	br	20884 <__alt_data_end+0xf4020884>
   209c0:	3023883a 	mov	r17,r6
   209c4:	003fa906 	br	2086c <__alt_data_end+0xf402086c>

000209c8 <_ZL15get_ttype_entryP16lsda_header_infom>:
   209c8:	defffc04 	addi	sp,sp,-16
   209cc:	dfc00315 	stw	ra,12(sp)
   209d0:	dc000215 	stw	r16,8(sp)
   209d4:	2021883a 	mov	r16,r4
   209d8:	21000503 	ldbu	r4,20(r4)
   209dc:	d9400115 	stw	r5,4(sp)
   209e0:	00207180 	call	20718 <_ZL21size_of_encoded_valueh>
   209e4:	d9400117 	ldw	r5,4(sp)
   209e8:	1009883a 	mov	r4,r2
   209ec:	00222b80 	call	222b8 <__mulsi3>
   209f0:	81800317 	ldw	r6,12(r16)
   209f4:	81000503 	ldbu	r4,20(r16)
   209f8:	81400217 	ldw	r5,8(r16)
   209fc:	308dc83a 	sub	r6,r6,r2
   20a00:	d80f883a 	mov	r7,sp
   20a04:	00207b80 	call	207b8 <_ZL28read_encoded_value_with_basehjPKhPj>
   20a08:	d8800017 	ldw	r2,0(sp)
   20a0c:	dfc00317 	ldw	ra,12(sp)
   20a10:	dc000217 	ldw	r16,8(sp)
   20a14:	dec00404 	addi	sp,sp,16
   20a18:	f800283a 	ret

00020a1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   20a1c:	defffb04 	addi	sp,sp,-20
   20a20:	dc000115 	stw	r16,4(sp)
   20a24:	24000317 	ldw	r16,12(r4)
   20a28:	01ce303a 	nor	r7,zero,r7
   20a2c:	dc800315 	stw	r18,12(sp)
   20a30:	dc400215 	stw	r17,8(sp)
   20a34:	dfc00415 	stw	ra,16(sp)
   20a38:	2023883a 	mov	r17,r4
   20a3c:	2825883a 	mov	r18,r5
   20a40:	d9800015 	stw	r6,0(sp)
   20a44:	81e1883a 	add	r16,r16,r7
   20a48:	8009883a 	mov	r4,r16
   20a4c:	000b883a 	mov	r5,zero
   20a50:	000d883a 	mov	r6,zero
   20a54:	20800003 	ldbu	r2,0(r4)
   20a58:	84000044 	addi	r16,r16,1
   20a5c:	8009883a 	mov	r4,r16
   20a60:	10c01fcc 	andi	r3,r2,127
   20a64:	1986983a 	sll	r3,r3,r6
   20a68:	10803fcc 	andi	r2,r2,255
   20a6c:	1080201c 	xori	r2,r2,128
   20a70:	10bfe004 	addi	r2,r2,-128
   20a74:	28cab03a 	or	r5,r5,r3
   20a78:	318001c4 	addi	r6,r6,7
   20a7c:	103ff516 	blt	r2,zero,20a54 <__alt_data_end+0xf4020a54>
   20a80:	28000e26 	beq	r5,zero,20abc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   20a84:	8809883a 	mov	r4,r17
   20a88:	00209c80 	call	209c8 <_ZL15get_ttype_entryP16lsda_header_infom>
   20a8c:	1009883a 	mov	r4,r2
   20a90:	900b883a 	mov	r5,r18
   20a94:	d80d883a 	mov	r6,sp
   20a98:	00206900 	call	20690 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   20a9c:	10c03fcc 	andi	r3,r2,255
   20aa0:	183fe926 	beq	r3,zero,20a48 <__alt_data_end+0xf4020a48>
   20aa4:	dfc00417 	ldw	ra,16(sp)
   20aa8:	dc800317 	ldw	r18,12(sp)
   20aac:	dc400217 	ldw	r17,8(sp)
   20ab0:	dc000117 	ldw	r16,4(sp)
   20ab4:	dec00504 	addi	sp,sp,20
   20ab8:	f800283a 	ret
   20abc:	0005883a 	mov	r2,zero
   20ac0:	003ff806 	br	20aa4 <__alt_data_end+0xf4020aa4>

00020ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   20ac4:	deffff04 	addi	sp,sp,-4
   20ac8:	dfc00015 	stw	ra,0(sp)
   20acc:	00803fc4 	movi	r2,255
   20ad0:	20800e26 	beq	r4,r2,20b0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20ad4:	20801c0c 	andi	r2,r4,112
   20ad8:	00c00804 	movi	r3,32
   20adc:	10c01726 	beq	r2,r3,20b3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
   20ae0:	18800e2e 	bgeu	r3,r2,20b1c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
   20ae4:	00c01004 	movi	r3,64
   20ae8:	10c01026 	beq	r2,r3,20b2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   20aec:	00c01404 	movi	r3,80
   20af0:	10c00626 	beq	r2,r3,20b0c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20af4:	00c00c04 	movi	r3,48
   20af8:	10c00b1e 	bne	r2,r3,20b28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   20afc:	2809883a 	mov	r4,r5
   20b00:	dfc00017 	ldw	ra,0(sp)
   20b04:	dec00104 	addi	sp,sp,4
   20b08:	00225c01 	jmpi	225c0 <_Unwind_GetDataRelBase>
   20b0c:	0005883a 	mov	r2,zero
   20b10:	dfc00017 	ldw	ra,0(sp)
   20b14:	dec00104 	addi	sp,sp,4
   20b18:	f800283a 	ret
   20b1c:	103ffb26 	beq	r2,zero,20b0c <__alt_data_end+0xf4020b0c>
   20b20:	00c00404 	movi	r3,16
   20b24:	10fff926 	beq	r2,r3,20b0c <__alt_data_end+0xf4020b0c>
   20b28:	00228000 	call	22800 <abort>
   20b2c:	2809883a 	mov	r4,r5
   20b30:	dfc00017 	ldw	ra,0(sp)
   20b34:	dec00104 	addi	sp,sp,4
   20b38:	00225b01 	jmpi	225b0 <_Unwind_GetRegionStart>
   20b3c:	2809883a 	mov	r4,r5
   20b40:	dfc00017 	ldw	ra,0(sp)
   20b44:	dec00104 	addi	sp,sp,4
   20b48:	00225c81 	jmpi	225c8 <_Unwind_GetTextRelBase>

00020b4c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   20b4c:	defff104 	addi	sp,sp,-60
   20b50:	dd800b15 	stw	r22,44(sp)
   20b54:	382dd23a 	srai	r22,r7,8
   20b58:	dd400a15 	stw	r21,40(sp)
   20b5c:	dd000915 	stw	r20,36(sp)
   20b60:	dfc00e15 	stw	ra,56(sp)
   20b64:	df000d15 	stw	fp,52(sp)
   20b68:	ddc00c15 	stw	r23,48(sp)
   20b6c:	dcc00815 	stw	r19,32(sp)
   20b70:	dc800715 	stw	r18,28(sp)
   20b74:	dc400615 	stw	r17,24(sp)
   20b78:	dc000515 	stw	r16,20(sp)
   20b7c:	d9c00315 	stw	r7,12(sp)
   20b80:	d9400215 	stw	r5,8(sp)
   20b84:	2029883a 	mov	r20,r4
   20b88:	dd400f17 	ldw	r21,60(sp)
   20b8c:	b000010e 	bge	r22,zero,20b94 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
   20b90:	05adc83a 	sub	r22,zero,r22
   20b94:	01000144 	movi	r4,5
   20b98:	000b883a 	mov	r5,zero
   20b9c:	d9800415 	stw	r6,16(sp)
   20ba0:	0020ac40 	call	20ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20ba4:	d9800417 	ldw	r6,16(sp)
   20ba8:	100b883a 	mov	r5,r2
   20bac:	d9c00104 	addi	r7,sp,4
   20bb0:	01000144 	movi	r4,5
   20bb4:	00207b80 	call	207b8 <_ZL28read_encoded_value_with_basehjPKhPj>
   20bb8:	1009883a 	mov	r4,r2
   20bbc:	017ffe44 	movi	r5,-7
   20bc0:	1021883a 	mov	r16,r2
   20bc4:	00222b80 	call	222b8 <__mulsi3>
   20bc8:	1027883a 	mov	r19,r2
   20bcc:	002f883a 	mov	r23,zero
   20bd0:	84400003 	ldbu	r17,0(r16)
   20bd4:	8009883a 	mov	r4,r16
   20bd8:	014001c4 	movi	r5,7
   20bdc:	00222b80 	call	222b8 <__mulsi3>
   20be0:	88c01fcc 	andi	r3,r17,127
   20be4:	14c5883a 	add	r2,r2,r19
   20be8:	1886983a 	sll	r3,r3,r2
   20bec:	8c403fcc 	andi	r17,r17,255
   20bf0:	8c40201c 	xori	r17,r17,128
   20bf4:	8c7fe004 	addi	r17,r17,-128
   20bf8:	84000044 	addi	r16,r16,1
   20bfc:	b8eeb03a 	or	r23,r23,r3
   20c00:	883ff316 	blt	r17,zero,20bd0 <__alt_data_end+0xf4020bd0>
   20c04:	85e1883a 	add	r16,r16,r23
   20c08:	8009883a 	mov	r4,r16
   20c0c:	017ffe44 	movi	r5,-7
   20c10:	00222b80 	call	222b8 <__mulsi3>
   20c14:	102f883a 	mov	r23,r2
   20c18:	8007883a 	mov	r3,r16
   20c1c:	0025883a 	mov	r18,zero
   20c20:	1cc00003 	ldbu	r19,0(r3)
   20c24:	1809883a 	mov	r4,r3
   20c28:	014001c4 	movi	r5,7
   20c2c:	1c400044 	addi	r17,r3,1
   20c30:	00222b80 	call	222b8 <__mulsi3>
   20c34:	98c01fcc 	andi	r3,r19,127
   20c38:	15c5883a 	add	r2,r2,r23
   20c3c:	1884983a 	sll	r2,r3,r2
   20c40:	9cc03fcc 	andi	r19,r19,255
   20c44:	9cc0201c 	xori	r19,r19,128
   20c48:	9cffe004 	addi	r19,r19,-128
   20c4c:	8807883a 	mov	r3,r17
   20c50:	90a4b03a 	or	r18,r18,r2
   20c54:	983ff216 	blt	r19,zero,20c20 <__alt_data_end+0xf4020c20>
   20c58:	b7003fcc 	andi	fp,r22,255
   20c5c:	e73fffc4 	addi	fp,fp,-1
   20c60:	8f39883a 	add	fp,r17,fp
   20c64:	840000c4 	addi	r16,r16,3
   20c68:	848d883a 	add	r6,r16,r18
   20c6c:	e009883a 	mov	r4,fp
   20c70:	017ffe44 	movi	r5,-7
   20c74:	04ffff04 	movi	r19,-4
   20c78:	34e6703a 	and	r19,r6,r19
   20c7c:	00222b80 	call	222b8 <__mulsi3>
   20c80:	002f883a 	mov	r23,zero
   20c84:	102d883a 	mov	r22,r2
   20c88:	e4400003 	ldbu	r17,0(fp)
   20c8c:	e009883a 	mov	r4,fp
   20c90:	014001c4 	movi	r5,7
   20c94:	00222b80 	call	222b8 <__mulsi3>
   20c98:	88c01fcc 	andi	r3,r17,127
   20c9c:	1585883a 	add	r2,r2,r22
   20ca0:	1886983a 	sll	r3,r3,r2
   20ca4:	8c403fcc 	andi	r17,r17,255
   20ca8:	8c40201c 	xori	r17,r17,128
   20cac:	e4000044 	addi	r16,fp,1
   20cb0:	8c7fe004 	addi	r17,r17,-128
   20cb4:	b8eeb03a 	or	r23,r23,r3
   20cb8:	8039883a 	mov	fp,r16
   20cbc:	883ff216 	blt	r17,zero,20c88 <__alt_data_end+0xf4020c88>
   20cc0:	d8800317 	ldw	r2,12(sp)
   20cc4:	14803fcc 	andi	r18,r2,255
   20cc8:	b8002326 	beq	r23,zero,20d58 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
   20ccc:	9009883a 	mov	r4,r18
   20cd0:	00207180 	call	20718 <_ZL21size_of_encoded_valueh>
   20cd4:	1009883a 	mov	r4,r2
   20cd8:	b97fffc4 	addi	r5,r23,-1
   20cdc:	00222b80 	call	222b8 <__mulsi3>
   20ce0:	9009883a 	mov	r4,r18
   20ce4:	a80b883a 	mov	r5,r21
   20ce8:	14cd883a 	add	r6,r2,r19
   20cec:	d80f883a 	mov	r7,sp
   20cf0:	00207b80 	call	207b8 <_ZL28read_encoded_value_with_basehjPKhPj>
   20cf4:	d9000017 	ldw	r4,0(sp)
   20cf8:	a00b883a 	mov	r5,r20
   20cfc:	d9800204 	addi	r6,sp,8
   20d00:	00206900 	call	20690 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   20d04:	10c03fcc 	andi	r3,r2,255
   20d08:	1800141e 	bne	r3,zero,20d5c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
   20d0c:	8009883a 	mov	r4,r16
   20d10:	017ffe44 	movi	r5,-7
   20d14:	00222b80 	call	222b8 <__mulsi3>
   20d18:	102d883a 	mov	r22,r2
   20d1c:	002f883a 	mov	r23,zero
   20d20:	84400003 	ldbu	r17,0(r16)
   20d24:	8009883a 	mov	r4,r16
   20d28:	014001c4 	movi	r5,7
   20d2c:	00222b80 	call	222b8 <__mulsi3>
   20d30:	88c01fcc 	andi	r3,r17,127
   20d34:	1585883a 	add	r2,r2,r22
   20d38:	1886983a 	sll	r3,r3,r2
   20d3c:	8c403fcc 	andi	r17,r17,255
   20d40:	8c40201c 	xori	r17,r17,128
   20d44:	8c7fe004 	addi	r17,r17,-128
   20d48:	84000044 	addi	r16,r16,1
   20d4c:	b8eeb03a 	or	r23,r23,r3
   20d50:	883ff316 	blt	r17,zero,20d20 <__alt_data_end+0xf4020d20>
   20d54:	003fdc06 	br	20cc8 <__alt_data_end+0xf4020cc8>
   20d58:	0005883a 	mov	r2,zero
   20d5c:	dfc00e17 	ldw	ra,56(sp)
   20d60:	df000d17 	ldw	fp,52(sp)
   20d64:	ddc00c17 	ldw	r23,48(sp)
   20d68:	dd800b17 	ldw	r22,44(sp)
   20d6c:	dd400a17 	ldw	r21,40(sp)
   20d70:	dd000917 	ldw	r20,36(sp)
   20d74:	dcc00817 	ldw	r19,32(sp)
   20d78:	dc800717 	ldw	r18,28(sp)
   20d7c:	dc400617 	ldw	r17,24(sp)
   20d80:	dc000517 	ldw	r16,20(sp)
   20d84:	dec00f04 	addi	sp,sp,60
   20d88:	f800283a 	ret

00020d8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   20d8c:	defffb04 	addi	sp,sp,-20
   20d90:	dcc00315 	stw	r19,12(sp)
   20d94:	dc400115 	stw	r17,4(sp)
   20d98:	dc000015 	stw	r16,0(sp)
   20d9c:	dfc00415 	stw	ra,16(sp)
   20da0:	dc800215 	stw	r18,8(sp)
   20da4:	2027883a 	mov	r19,r4
   20da8:	2821883a 	mov	r16,r5
   20dac:	3023883a 	mov	r17,r6
   20db0:	20003f26 	beq	r4,zero,20eb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   20db4:	00225b00 	call	225b0 <_Unwind_GetRegionStart>
   20db8:	88800015 	stw	r2,0(r17)
   20dbc:	84800003 	ldbu	r18,0(r16)
   20dc0:	00c03fc4 	movi	r3,255
   20dc4:	84000044 	addi	r16,r16,1
   20dc8:	90c03726 	beq	r18,r3,20ea8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   20dcc:	9009883a 	mov	r4,r18
   20dd0:	980b883a 	mov	r5,r19
   20dd4:	0020ac40 	call	20ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20dd8:	800d883a 	mov	r6,r16
   20ddc:	9009883a 	mov	r4,r18
   20de0:	100b883a 	mov	r5,r2
   20de4:	89c00104 	addi	r7,r17,4
   20de8:	00207b80 	call	207b8 <_ZL28read_encoded_value_with_basehjPKhPj>
   20dec:	1021883a 	mov	r16,r2
   20df0:	80c00003 	ldbu	r3,0(r16)
   20df4:	01003fc4 	movi	r4,255
   20df8:	80800044 	addi	r2,r16,1
   20dfc:	88c00505 	stb	r3,20(r17)
   20e00:	18c03fcc 	andi	r3,r3,255
   20e04:	19002c26 	beq	r3,r4,20eb8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   20e08:	100d883a 	mov	r6,r2
   20e0c:	000f883a 	mov	r7,zero
   20e10:	000b883a 	mov	r5,zero
   20e14:	30c00003 	ldbu	r3,0(r6)
   20e18:	10800044 	addi	r2,r2,1
   20e1c:	100d883a 	mov	r6,r2
   20e20:	19001fcc 	andi	r4,r3,127
   20e24:	2148983a 	sll	r4,r4,r5
   20e28:	18c03fcc 	andi	r3,r3,255
   20e2c:	18c0201c 	xori	r3,r3,128
   20e30:	18ffe004 	addi	r3,r3,-128
   20e34:	390eb03a 	or	r7,r7,r4
   20e38:	294001c4 	addi	r5,r5,7
   20e3c:	183ff516 	blt	r3,zero,20e14 <__alt_data_end+0xf4020e14>
   20e40:	11cf883a 	add	r7,r2,r7
   20e44:	89c00315 	stw	r7,12(r17)
   20e48:	10c00003 	ldbu	r3,0(r2)
   20e4c:	000f883a 	mov	r7,zero
   20e50:	10800044 	addi	r2,r2,1
   20e54:	88c00545 	stb	r3,21(r17)
   20e58:	000b883a 	mov	r5,zero
   20e5c:	10c00003 	ldbu	r3,0(r2)
   20e60:	10800044 	addi	r2,r2,1
   20e64:	19001fcc 	andi	r4,r3,127
   20e68:	2148983a 	sll	r4,r4,r5
   20e6c:	18c03fcc 	andi	r3,r3,255
   20e70:	18c0201c 	xori	r3,r3,128
   20e74:	18ffe004 	addi	r3,r3,-128
   20e78:	390eb03a 	or	r7,r7,r4
   20e7c:	294001c4 	addi	r5,r5,7
   20e80:	183ff616 	blt	r3,zero,20e5c <__alt_data_end+0xf4020e5c>
   20e84:	11cf883a 	add	r7,r2,r7
   20e88:	89c00415 	stw	r7,16(r17)
   20e8c:	dfc00417 	ldw	ra,16(sp)
   20e90:	dcc00317 	ldw	r19,12(sp)
   20e94:	dc800217 	ldw	r18,8(sp)
   20e98:	dc400117 	ldw	r17,4(sp)
   20e9c:	dc000017 	ldw	r16,0(sp)
   20ea0:	dec00504 	addi	sp,sp,20
   20ea4:	f800283a 	ret
   20ea8:	88800115 	stw	r2,4(r17)
   20eac:	003fd006 	br	20df0 <__alt_data_end+0xf4020df0>
   20eb0:	0005883a 	mov	r2,zero
   20eb4:	003fc006 	br	20db8 <__alt_data_end+0xf4020db8>
   20eb8:	88000315 	stw	zero,12(r17)
   20ebc:	003fe206 	br	20e48 <__alt_data_end+0xf4020e48>

00020ec0 <__gxx_personality_sj0>:
   20ec0:	008000b4 	movhi	r2,2
   20ec4:	deffde04 	addi	sp,sp,-136
   20ec8:	1083b004 	addi	r2,r2,3776
   20ecc:	d8801015 	stw	r2,64(sp)
   20ed0:	008000b4 	movhi	r2,2
   20ed4:	10979004 	addi	r2,r2,24128
   20ed8:	d8801115 	stw	r2,68(sp)
   20edc:	008000b4 	movhi	r2,2
   20ee0:	1084eb04 	addi	r2,r2,5036
   20ee4:	d9001715 	stw	r4,92(sp)
   20ee8:	d9000a04 	addi	r4,sp,40
   20eec:	d8801315 	stw	r2,76(sp)
   20ef0:	dfc02115 	stw	ra,132(sp)
   20ef4:	df002015 	stw	fp,128(sp)
   20ef8:	dec01215 	stw	sp,72(sp)
   20efc:	dec01415 	stw	sp,80(sp)
   20f00:	d9401a15 	stw	r5,104(sp)
   20f04:	d9801815 	stw	r6,96(sp)
   20f08:	d9c01915 	stw	r7,100(sp)
   20f0c:	00224e80 	call	224e8 <_Unwind_SjLj_Register>
   20f10:	d8c01717 	ldw	r3,92(sp)
   20f14:	d8000915 	stw	zero,36(sp)
   20f18:	d8000815 	stw	zero,32(sp)
   20f1c:	00800044 	movi	r2,1
   20f20:	18800926 	beq	r3,r2,20f48 <__gxx_personality_sj0+0x88>
   20f24:	014000c4 	movi	r5,3
   20f28:	d9401715 	stw	r5,92(sp)
   20f2c:	d9000a04 	addi	r4,sp,40
   20f30:	00225000 	call	22500 <_Unwind_SjLj_Unregister>
   20f34:	d8801717 	ldw	r2,92(sp)
   20f38:	dfc02117 	ldw	ra,132(sp)
   20f3c:	df002017 	ldw	fp,128(sp)
   20f40:	dec02204 	addi	sp,sp,136
   20f44:	f800283a 	ret
   20f48:	d9401817 	ldw	r5,96(sp)
   20f4c:	012f3574 	movhi	r4,48341
   20f50:	21354004 	addi	r4,r4,-11008
   20f54:	2909883a 	add	r4,r5,r4
   20f58:	2145803a 	cmpltu	r2,r4,r5
   20f5c:	d9401917 	ldw	r5,100(sp)
   20f60:	d8c01b05 	stb	r3,108(sp)
   20f64:	00ee2cb4 	movhi	r3,47282
   20f68:	18eaaf04 	addi	r3,r3,-21828
   20f6c:	28c7883a 	add	r3,r5,r3
   20f70:	10c5883a 	add	r2,r2,r3
   20f74:	10003526 	beq	r2,zero,2104c <__gxx_personality_sj0+0x18c>
   20f78:	d8c01a17 	ldw	r3,104(sp)
   20f7c:	00800184 	movi	r2,6
   20f80:	18803826 	beq	r3,r2,21064 <__gxx_personality_sj0+0x1a4>
   20f84:	d9002317 	ldw	r4,140(sp)
   20f88:	00ffffc4 	movi	r3,-1
   20f8c:	d8c00b15 	stw	r3,44(sp)
   20f90:	00225a40 	call	225a4 <_Unwind_GetLanguageSpecificData>
   20f94:	d8801915 	stw	r2,100(sp)
   20f98:	1000a326 	beq	r2,zero,21228 <__gxx_personality_sj0+0x368>
   20f9c:	d9002317 	ldw	r4,140(sp)
   20fa0:	d9401917 	ldw	r5,100(sp)
   20fa4:	d80d883a 	mov	r6,sp
   20fa8:	00bfffc4 	movi	r2,-1
   20fac:	d8800b15 	stw	r2,44(sp)
   20fb0:	0020d8c0 	call	20d8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   20fb4:	d9000503 	ldbu	r4,20(sp)
   20fb8:	d9402317 	ldw	r5,140(sp)
   20fbc:	d8801715 	stw	r2,92(sp)
   20fc0:	0020ac40 	call	20ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20fc4:	d9002317 	ldw	r4,140(sp)
   20fc8:	d9400804 	addi	r5,sp,32
   20fcc:	d8800215 	stw	r2,8(sp)
   20fd0:	00225740 	call	22574 <_Unwind_GetIPInfo>
   20fd4:	d8c00817 	ldw	r3,32(sp)
   20fd8:	1800011e 	bne	r3,zero,20fe0 <__gxx_personality_sj0+0x120>
   20fdc:	10bfffc4 	addi	r2,r2,-1
   20fe0:	10009116 	blt	r2,zero,21228 <__gxx_personality_sj0+0x368>
   20fe4:	10004c1e 	bne	r2,zero,21118 <__gxx_personality_sj0+0x258>
   20fe8:	d8001c15 	stw	zero,112(sp)
   20fec:	00800044 	movi	r2,1
   20ff0:	d8001715 	stw	zero,92(sp)
   20ff4:	d8001815 	stw	zero,96(sp)
   20ff8:	d9001a17 	ldw	r4,104(sp)
   20ffc:	20c0004c 	andi	r3,r4,1
   21000:	18008c26 	beq	r3,zero,21234 <__gxx_personality_sj0+0x374>
   21004:	00c00084 	movi	r3,2
   21008:	10c08726 	beq	r2,r3,21228 <__gxx_personality_sj0+0x368>
   2100c:	d8801b03 	ldbu	r2,108(sp)
   21010:	1000d21e 	bne	r2,zero,2135c <__gxx_personality_sj0+0x49c>
   21014:	d9402217 	ldw	r5,136(sp)
   21018:	d8801717 	ldw	r2,92(sp)
   2101c:	d8c01817 	ldw	r3,96(sp)
   21020:	d9001917 	ldw	r4,100(sp)
   21024:	28bffb15 	stw	r2,-20(r5)
   21028:	d8800917 	ldw	r2,36(sp)
   2102c:	28fffc15 	stw	r3,-16(r5)
   21030:	00c00184 	movi	r3,6
   21034:	28bfff15 	stw	r2,-4(r5)
   21038:	d8801c17 	ldw	r2,112(sp)
   2103c:	293ffd15 	stw	r4,-12(r5)
   21040:	d8c01715 	stw	r3,92(sp)
   21044:	28bffe15 	stw	r2,-8(r5)
   21048:	003fb806 	br	20f2c <__alt_data_end+0xf4020f2c>
   2104c:	d8801717 	ldw	r2,92(sp)
   21050:	113fc936 	bltu	r2,r4,20f78 <__alt_data_end+0xf4020f78>
   21054:	d8c01a17 	ldw	r3,104(sp)
   21058:	d8001b05 	stb	zero,108(sp)
   2105c:	00800184 	movi	r2,6
   21060:	18bfc81e 	bne	r3,r2,20f84 <__alt_data_end+0xf4020f84>
   21064:	d8801b03 	ldbu	r2,108(sp)
   21068:	103fc61e 	bne	r2,zero,20f84 <__alt_data_end+0xf4020f84>
   2106c:	d9002217 	ldw	r4,136(sp)
   21070:	d9402217 	ldw	r5,136(sp)
   21074:	d8802217 	ldw	r2,136(sp)
   21078:	213ffe17 	ldw	r4,-8(r4)
   2107c:	297ffb17 	ldw	r5,-20(r5)
   21080:	10bffd17 	ldw	r2,-12(r2)
   21084:	d9001c15 	stw	r4,112(sp)
   21088:	d9401715 	stw	r5,92(sp)
   2108c:	d8801915 	stw	r2,100(sp)
   21090:	20008726 	beq	r4,zero,212b0 <__gxx_personality_sj0+0x3f0>
   21094:	d8801717 	ldw	r2,92(sp)
   21098:	10006f0e 	bge	r2,zero,21258 <__gxx_personality_sj0+0x398>
   2109c:	d9002317 	ldw	r4,140(sp)
   210a0:	d9401917 	ldw	r5,100(sp)
   210a4:	d80d883a 	mov	r6,sp
   210a8:	00bfffc4 	movi	r2,-1
   210ac:	d8800b15 	stw	r2,44(sp)
   210b0:	0020d8c0 	call	20d8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   210b4:	d9000503 	ldbu	r4,20(sp)
   210b8:	d9402317 	ldw	r5,140(sp)
   210bc:	0020ac40 	call	20ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   210c0:	d9000503 	ldbu	r4,20(sp)
   210c4:	d9402317 	ldw	r5,140(sp)
   210c8:	d8800215 	stw	r2,8(sp)
   210cc:	0020ac40 	call	20ac4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   210d0:	d8c02217 	ldw	r3,136(sp)
   210d4:	18bffe15 	stw	r2,-8(r3)
   210d8:	00005f06 	br	21258 <__gxx_personality_sj0+0x398>
   210dc:	000f883a 	mov	r7,zero
   210e0:	000d883a 	mov	r6,zero
   210e4:	19000003 	ldbu	r4,0(r3)
   210e8:	18c00044 	addi	r3,r3,1
   210ec:	d8c01715 	stw	r3,92(sp)
   210f0:	21401fcc 	andi	r5,r4,127
   210f4:	298a983a 	sll	r5,r5,r6
   210f8:	21003fcc 	andi	r4,r4,255
   210fc:	2100201c 	xori	r4,r4,128
   21100:	213fe004 	addi	r4,r4,-128
   21104:	394eb03a 	or	r7,r7,r5
   21108:	318001c4 	addi	r6,r6,7
   2110c:	203ff516 	blt	r4,zero,210e4 <__alt_data_end+0xf40210e4>
   21110:	10bfffc4 	addi	r2,r2,-1
   21114:	10000e26 	beq	r2,zero,21150 <__gxx_personality_sj0+0x290>
   21118:	d8c01717 	ldw	r3,92(sp)
   2111c:	0011883a 	mov	r8,zero
   21120:	000d883a 	mov	r6,zero
   21124:	19000003 	ldbu	r4,0(r3)
   21128:	18c00044 	addi	r3,r3,1
   2112c:	21401fcc 	andi	r5,r4,127
   21130:	298a983a 	sll	r5,r5,r6
   21134:	21003fcc 	andi	r4,r4,255
   21138:	2100201c 	xori	r4,r4,128
   2113c:	213fe004 	addi	r4,r4,-128
   21140:	4150b03a 	or	r8,r8,r5
   21144:	318001c4 	addi	r6,r6,7
   21148:	203ff616 	blt	r4,zero,21124 <__alt_data_end+0xf4021124>
   2114c:	003fe306 	br	210dc <__alt_data_end+0xf40210dc>
   21150:	42000044 	addi	r8,r8,1
   21154:	da001c15 	stw	r8,112(sp)
   21158:	38004f26 	beq	r7,zero,21298 <__gxx_personality_sj0+0x3d8>
   2115c:	d8800417 	ldw	r2,16(sp)
   21160:	39ffffc4 	addi	r7,r7,-1
   21164:	11c5883a 	add	r2,r2,r7
   21168:	d8801815 	stw	r2,96(sp)
   2116c:	40002e26 	beq	r8,zero,21228 <__gxx_personality_sj0+0x368>
   21170:	10004b26 	beq	r2,zero,212a0 <__gxx_personality_sj0+0x3e0>
   21174:	d8c01a17 	ldw	r3,104(sp)
   21178:	18c0020c 	andi	r3,r3,8
   2117c:	d8c01e15 	stw	r3,120(sp)
   21180:	1800801e 	bne	r3,zero,21384 <__gxx_personality_sj0+0x4c4>
   21184:	d8801b03 	ldbu	r2,108(sp)
   21188:	1000821e 	bne	r2,zero,21394 <__gxx_personality_sj0+0x4d4>
   2118c:	d9002217 	ldw	r4,136(sp)
   21190:	20800017 	ldw	r2,0(r4)
   21194:	1080004c 	andi	r2,r2,1
   21198:	1000821e 	bne	r2,zero,213a4 <__gxx_personality_sj0+0x4e4>
   2119c:	d9402217 	ldw	r5,136(sp)
   211a0:	28800504 	addi	r2,r5,20
   211a4:	d8800915 	stw	r2,36(sp)
   211a8:	10bff017 	ldw	r2,-64(r2)
   211ac:	d8801d15 	stw	r2,116(sp)
   211b0:	d9001b03 	ldbu	r4,108(sp)
   211b4:	d8001b45 	stb	zero,109(sp)
   211b8:	d9001f15 	stw	r4,124(sp)
   211bc:	00000e06 	br	211f8 <__gxx_personality_sj0+0x338>
   211c0:	01c03d0e 	bge	zero,r7,212b8 <__gxx_personality_sj0+0x3f8>
   211c4:	017fffc4 	movi	r5,-1
   211c8:	d9400b15 	stw	r5,44(sp)
   211cc:	d809883a 	mov	r4,sp
   211d0:	380b883a 	mov	r5,r7
   211d4:	00209c80 	call	209c8 <_ZL15get_ttype_entryP16lsda_header_infom>
   211d8:	10004f26 	beq	r2,zero,21318 <__gxx_personality_sj0+0x458>
   211dc:	d8c01d17 	ldw	r3,116(sp)
   211e0:	1800611e 	bne	r3,zero,21368 <__gxx_personality_sj0+0x4a8>
   211e4:	d8800617 	ldw	r2,24(sp)
   211e8:	10005726 	beq	r2,zero,21348 <__gxx_personality_sj0+0x488>
   211ec:	d9401717 	ldw	r5,92(sp)
   211f0:	2885883a 	add	r2,r5,r2
   211f4:	d8801815 	stw	r2,96(sp)
   211f8:	d9001817 	ldw	r4,96(sp)
   211fc:	d9400704 	addi	r5,sp,28
   21200:	00206380 	call	20638 <_ZL12read_sleb128PKhPl>
   21204:	1009883a 	mov	r4,r2
   21208:	d9400604 	addi	r5,sp,24
   2120c:	d8801715 	stw	r2,92(sp)
   21210:	00206380 	call	20638 <_ZL12read_sleb128PKhPl>
   21214:	d9c00717 	ldw	r7,28(sp)
   21218:	383fe91e 	bne	r7,zero,211c0 <__alt_data_end+0xf40211c0>
   2121c:	01000044 	movi	r4,1
   21220:	d9001b45 	stb	r4,109(sp)
   21224:	003fef06 	br	211e4 <__alt_data_end+0xf40211e4>
   21228:	01000204 	movi	r4,8
   2122c:	d9001715 	stw	r4,92(sp)
   21230:	003f3e06 	br	20f2c <__alt_data_end+0xf4020f2c>
   21234:	d9001a17 	ldw	r4,104(sp)
   21238:	20c0020c 	andi	r3,r4,8
   2123c:	1800021e 	bne	r3,zero,21248 <__gxx_personality_sj0+0x388>
   21240:	d8c01b03 	ldbu	r3,108(sp)
   21244:	18001826 	beq	r3,zero,212a8 <__gxx_personality_sj0+0x3e8>
   21248:	00c00044 	movi	r3,1
   2124c:	10c05926 	beq	r2,r3,213b4 <__gxx_personality_sj0+0x4f4>
   21250:	d9401717 	ldw	r5,92(sp)
   21254:	28005816 	blt	r5,zero,213b8 <__gxx_personality_sj0+0x4f8>
   21258:	d9802217 	ldw	r6,136(sp)
   2125c:	d9002317 	ldw	r4,140(sp)
   21260:	00bfffc4 	movi	r2,-1
   21264:	000b883a 	mov	r5,zero
   21268:	d8800b15 	stw	r2,44(sp)
   2126c:	00225480 	call	22548 <_Unwind_SetGR>
   21270:	d9002317 	ldw	r4,140(sp)
   21274:	d9801717 	ldw	r6,92(sp)
   21278:	01400044 	movi	r5,1
   2127c:	00225480 	call	22548 <_Unwind_SetGR>
   21280:	d9002317 	ldw	r4,140(sp)
   21284:	d9401c17 	ldw	r5,112(sp)
   21288:	00225940 	call	22594 <_Unwind_SetIP>
   2128c:	010001c4 	movi	r4,7
   21290:	d9001715 	stw	r4,92(sp)
   21294:	003f2506 	br	20f2c <__alt_data_end+0xf4020f2c>
   21298:	d8c01c17 	ldw	r3,112(sp)
   2129c:	183fe226 	beq	r3,zero,21228 <__alt_data_end+0xf4021228>
   212a0:	00800084 	movi	r2,2
   212a4:	003f5206 	br	20ff0 <__alt_data_end+0xf4020ff0>
   212a8:	00c00044 	movi	r3,1
   212ac:	10ff791e 	bne	r2,r3,21094 <__alt_data_end+0xf4021094>
   212b0:	d9002217 	ldw	r4,136(sp)
   212b4:	0021e700 	call	21e70 <__cxa_call_terminate>
   212b8:	d9001d17 	ldw	r4,116(sp)
   212bc:	20000426 	beq	r4,zero,212d0 <__gxx_personality_sj0+0x410>
   212c0:	d9401e17 	ldw	r5,120(sp)
   212c4:	2800021e 	bne	r5,zero,212d0 <__gxx_personality_sj0+0x410>
   212c8:	d8801f17 	ldw	r2,124(sp)
   212cc:	10001626 	beq	r2,zero,21328 <__gxx_personality_sj0+0x468>
   212d0:	d8c00317 	ldw	r3,12(sp)
   212d4:	01ce303a 	nor	r7,zero,r7
   212d8:	000d883a 	mov	r6,zero
   212dc:	19c7883a 	add	r3,r3,r7
   212e0:	000b883a 	mov	r5,zero
   212e4:	18800003 	ldbu	r2,0(r3)
   212e8:	18c00044 	addi	r3,r3,1
   212ec:	11001fcc 	andi	r4,r2,127
   212f0:	2148983a 	sll	r4,r4,r5
   212f4:	10803fcc 	andi	r2,r2,255
   212f8:	1080201c 	xori	r2,r2,128
   212fc:	10bfe004 	addi	r2,r2,-128
   21300:	310cb03a 	or	r6,r6,r4
   21304:	294001c4 	addi	r5,r5,7
   21308:	103ff616 	blt	r2,zero,212e4 <__alt_data_end+0xf40212e4>
   2130c:	3005003a 	cmpeq	r2,r6,zero
   21310:	10803fcc 	andi	r2,r2,255
   21314:	103fb326 	beq	r2,zero,211e4 <__alt_data_end+0xf40211e4>
   21318:	d8800717 	ldw	r2,28(sp)
   2131c:	d8801715 	stw	r2,92(sp)
   21320:	008000c4 	movi	r2,3
   21324:	003f3406 	br	20ff8 <__alt_data_end+0xf4020ff8>
   21328:	d9401d17 	ldw	r5,116(sp)
   2132c:	d9800917 	ldw	r6,36(sp)
   21330:	00ffffc4 	movi	r3,-1
   21334:	d809883a 	mov	r4,sp
   21338:	d8c00b15 	stw	r3,44(sp)
   2133c:	0020a1c0 	call	20a1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21340:	1080005c 	xori	r2,r2,1
   21344:	003ff206 	br	21310 <__alt_data_end+0xf4021310>
   21348:	d8801b43 	ldbu	r2,109(sp)
   2134c:	103fb626 	beq	r2,zero,21228 <__alt_data_end+0xf4021228>
   21350:	d8001715 	stw	zero,92(sp)
   21354:	00800084 	movi	r2,2
   21358:	003f2706 	br	20ff8 <__alt_data_end+0xf4020ff8>
   2135c:	00800184 	movi	r2,6
   21360:	d8801715 	stw	r2,92(sp)
   21364:	003ef106 	br	20f2c <__alt_data_end+0xf4020f2c>
   21368:	1009883a 	mov	r4,r2
   2136c:	180b883a 	mov	r5,r3
   21370:	d9800904 	addi	r6,sp,36
   21374:	00206900 	call	20690 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   21378:	10803fcc 	andi	r2,r2,255
   2137c:	103fe61e 	bne	r2,zero,21318 <__alt_data_end+0xf4021318>
   21380:	003f9806 	br	211e4 <__alt_data_end+0xf40211e4>
   21384:	00820034 	movhi	r2,2048
   21388:	10827204 	addi	r2,r2,2504
   2138c:	d8801d15 	stw	r2,116(sp)
   21390:	003f8706 	br	211b0 <__alt_data_end+0xf40211b0>
   21394:	00c20034 	movhi	r3,2048
   21398:	18c27404 	addi	r3,r3,2512
   2139c:	d8c01d15 	stw	r3,116(sp)
   213a0:	003f8306 	br	211b0 <__alt_data_end+0xf40211b0>
   213a4:	20bff517 	ldw	r2,-44(r4)
   213a8:	003f7e06 	br	211a4 <__alt_data_end+0xf40211a4>
   213ac:	d9000c17 	ldw	r4,48(sp)
   213b0:	0021cec0 	call	21cec <__cxa_begin_catch>
   213b4:	00219980 	call	21998 <_ZSt9terminatev>
   213b8:	d8c00b15 	stw	r3,44(sp)
   213bc:	00219c00 	call	219c0 <_ZSt10unexpectedv>

000213c0 <__cxa_call_unexpected>:
   213c0:	008000b4 	movhi	r2,2
   213c4:	deffe604 	addi	sp,sp,-104
   213c8:	1083b004 	addi	r2,r2,3776
   213cc:	d8800d15 	stw	r2,52(sp)
   213d0:	008000b4 	movhi	r2,2
   213d4:	10979404 	addi	r2,r2,24144
   213d8:	d8800e15 	stw	r2,56(sp)
   213dc:	d8800104 	addi	r2,sp,4
   213e0:	d8800f15 	stw	r2,60(sp)
   213e4:	008000b4 	movhi	r2,2
   213e8:	10851304 	addi	r2,r2,5196
   213ec:	d9001415 	stw	r4,80(sp)
   213f0:	d9000704 	addi	r4,sp,28
   213f4:	dfc01915 	stw	ra,100(sp)
   213f8:	d8801015 	stw	r2,64(sp)
   213fc:	df001815 	stw	fp,96(sp)
   21400:	dec01115 	stw	sp,68(sp)
   21404:	00224e80 	call	224e8 <_Unwind_SjLj_Register>
   21408:	d9001417 	ldw	r4,80(sp)
   2140c:	0021cec0 	call	21cec <__cxa_begin_catch>
   21410:	d8c01417 	ldw	r3,80(sp)
   21414:	18bffe17 	ldw	r2,-8(r3)
   21418:	193ff717 	ldw	r4,-36(r3)
   2141c:	18fffd17 	ldw	r3,-12(r3)
   21420:	d8800315 	stw	r2,12(sp)
   21424:	d8c01615 	stw	r3,88(sp)
   21428:	d8c01417 	ldw	r3,80(sp)
   2142c:	18fffb17 	ldw	r3,-20(r3)
   21430:	d8c01515 	stw	r3,84(sp)
   21434:	d8c01417 	ldw	r3,80(sp)
   21438:	18fff817 	ldw	r3,-32(r3)
   2143c:	d8c01415 	stw	r3,80(sp)
   21440:	00c00044 	movi	r3,1
   21444:	d8c00815 	stw	r3,32(sp)
   21448:	00219b00 	call	219b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   2144c:	d8c00917 	ldw	r3,36(sp)
   21450:	d8800817 	ldw	r2,32(sp)
   21454:	d8c01715 	stw	r3,92(sp)
   21458:	10000a26 	beq	r2,zero,21484 <__cxa_call_unexpected+0xc4>
   2145c:	10bfffc4 	addi	r2,r2,-1
   21460:	10000126 	beq	r2,zero,21468 <__cxa_call_unexpected+0xa8>
   21464:	003da0fa 	break	3
   21468:	d8000815 	stw	zero,32(sp)
   2146c:	0021da00 	call	21da0 <__cxa_end_catch>
   21470:	0021da00 	call	21da0 <__cxa_end_catch>
   21474:	d9001717 	ldw	r4,92(sp)
   21478:	00bfffc4 	movi	r2,-1
   2147c:	d8800815 	stw	r2,32(sp)
   21480:	00226e40 	call	226e4 <_Unwind_SjLj_Resume>
   21484:	d9001717 	ldw	r4,92(sp)
   21488:	0021cec0 	call	21cec <__cxa_begin_catch>
   2148c:	00215f40 	call	215f4 <__cxa_get_globals_fast>
   21490:	10800017 	ldw	r2,0(r2)
   21494:	10c00b17 	ldw	r3,44(r2)
   21498:	18c0004c 	andi	r3,r3,1
   2149c:	18001e26 	beq	r3,zero,21518 <__cxa_call_unexpected+0x158>
   214a0:	10800017 	ldw	r2,0(r2)
   214a4:	d8801715 	stw	r2,92(sp)
   214a8:	d8801517 	ldw	r2,84(sp)
   214ac:	00802b0e 	bge	zero,r2,2155c <__cxa_call_unexpected+0x19c>
   214b0:	d8c01717 	ldw	r3,92(sp)
   214b4:	d8800317 	ldw	r2,12(sp)
   214b8:	d9801617 	ldw	r6,88(sp)
   214bc:	193ff017 	ldw	r4,-64(r3)
   214c0:	d9c01517 	ldw	r7,84(sp)
   214c4:	d8800015 	stw	r2,0(sp)
   214c8:	180b883a 	mov	r5,r3
   214cc:	00800084 	movi	r2,2
   214d0:	d8800815 	stw	r2,32(sp)
   214d4:	0020b4c0 	call	20b4c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   214d8:	10803fcc 	andi	r2,r2,255
   214dc:	10001e1e 	bne	r2,zero,21558 <__cxa_call_unexpected+0x198>
   214e0:	d8800317 	ldw	r2,12(sp)
   214e4:	d9801617 	ldw	r6,88(sp)
   214e8:	d9c01517 	ldw	r7,84(sp)
   214ec:	01020034 	movhi	r4,2048
   214f0:	d8800015 	stw	r2,0(sp)
   214f4:	21006504 	addi	r4,r4,404
   214f8:	00800084 	movi	r2,2
   214fc:	000b883a 	mov	r5,zero
   21500:	d8800815 	stw	r2,32(sp)
   21504:	0020b4c0 	call	20b4c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21508:	10803fcc 	andi	r2,r2,255
   2150c:	1000051e 	bne	r2,zero,21524 <__cxa_call_unexpected+0x164>
   21510:	d9001417 	ldw	r4,80(sp)
   21514:	00218d80 	call	218d8 <_ZN10__cxxabiv111__terminateEPFvvE>
   21518:	10801004 	addi	r2,r2,64
   2151c:	d8801715 	stw	r2,92(sp)
   21520:	003fe106 	br	214a8 <__alt_data_end+0xf40214a8>
   21524:	01000104 	movi	r4,4
   21528:	00220840 	call	22084 <__cxa_allocate_exception>
   2152c:	00c20034 	movhi	r3,2048
   21530:	18c08004 	addi	r3,r3,512
   21534:	01420034 	movhi	r5,2048
   21538:	018000b4 	movhi	r6,2
   2153c:	10c00015 	stw	r3,0(r2)
   21540:	29406504 	addi	r5,r5,404
   21544:	00c00084 	movi	r3,2
   21548:	31889104 	addi	r6,r6,8772
   2154c:	1009883a 	mov	r4,r2
   21550:	d8c00815 	stw	r3,32(sp)
   21554:	0021f0c0 	call	21f0c <__cxa_throw>
   21558:	0021f9c0 	call	21f9c <__cxa_rethrow>
   2155c:	d9401617 	ldw	r5,88(sp)
   21560:	00800084 	movi	r2,2
   21564:	0009883a 	mov	r4,zero
   21568:	d9800104 	addi	r6,sp,4
   2156c:	d8800815 	stw	r2,32(sp)
   21570:	0020d8c0 	call	20d8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21574:	d8801717 	ldw	r2,92(sp)
   21578:	d9c01517 	ldw	r7,84(sp)
   2157c:	d9000104 	addi	r4,sp,4
   21580:	117ff017 	ldw	r5,-64(r2)
   21584:	100d883a 	mov	r6,r2
   21588:	0020a1c0 	call	20a1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   2158c:	10803fcc 	andi	r2,r2,255
   21590:	1000171e 	bne	r2,zero,215f0 <__cxa_call_unexpected+0x230>
   21594:	d9c01517 	ldw	r7,84(sp)
   21598:	01420034 	movhi	r5,2048
   2159c:	00800084 	movi	r2,2
   215a0:	29406504 	addi	r5,r5,404
   215a4:	d9000104 	addi	r4,sp,4
   215a8:	000d883a 	mov	r6,zero
   215ac:	d8800815 	stw	r2,32(sp)
   215b0:	0020a1c0 	call	20a1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   215b4:	10803fcc 	andi	r2,r2,255
   215b8:	103fd526 	beq	r2,zero,21510 <__alt_data_end+0xf4021510>
   215bc:	01000104 	movi	r4,4
   215c0:	00220840 	call	22084 <__cxa_allocate_exception>
   215c4:	00c20034 	movhi	r3,2048
   215c8:	18c08004 	addi	r3,r3,512
   215cc:	01420034 	movhi	r5,2048
   215d0:	018000b4 	movhi	r6,2
   215d4:	10c00015 	stw	r3,0(r2)
   215d8:	29406504 	addi	r5,r5,404
   215dc:	00c00084 	movi	r3,2
   215e0:	31889104 	addi	r6,r6,8772
   215e4:	1009883a 	mov	r4,r2
   215e8:	d8c00815 	stw	r3,32(sp)
   215ec:	0021f0c0 	call	21f0c <__cxa_throw>
   215f0:	0021f9c0 	call	21f9c <__cxa_rethrow>

000215f4 <__cxa_get_globals_fast>:
   215f4:	00820034 	movhi	r2,2048
   215f8:	10828404 	addi	r2,r2,2576
   215fc:	f800283a 	ret

00021600 <__cxa_get_globals>:
   21600:	00820034 	movhi	r2,2048
   21604:	10828404 	addi	r2,r2,2576
   21608:	f800283a 	ret

0002160c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   2160c:	20800017 	ldw	r2,0(r4)
   21610:	defffa04 	addi	sp,sp,-24
   21614:	dc000415 	stw	r16,16(sp)
   21618:	10800617 	ldw	r2,24(r2)
   2161c:	3021883a 	mov	r16,r6
   21620:	31800017 	ldw	r6,0(r6)
   21624:	00c00404 	movi	r3,16
   21628:	d8c00215 	stw	r3,8(sp)
   2162c:	dfc00515 	stw	ra,20(sp)
   21630:	d8000015 	stw	zero,0(sp)
   21634:	d8000115 	stw	zero,4(sp)
   21638:	d8000315 	stw	zero,12(sp)
   2163c:	d80f883a 	mov	r7,sp
   21640:	103ee83a 	callr	r2
   21644:	d8800117 	ldw	r2,4(sp)
   21648:	00c00184 	movi	r3,6
   2164c:	1080018c 	andi	r2,r2,6
   21650:	10c00526 	beq	r2,r3,21668 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   21654:	0005883a 	mov	r2,zero
   21658:	dfc00517 	ldw	ra,20(sp)
   2165c:	dc000417 	ldw	r16,16(sp)
   21660:	dec00604 	addi	sp,sp,24
   21664:	f800283a 	ret
   21668:	d8c00017 	ldw	r3,0(sp)
   2166c:	00800044 	movi	r2,1
   21670:	80c00015 	stw	r3,0(r16)
   21674:	dfc00517 	ldw	ra,20(sp)
   21678:	dc000417 	ldw	r16,16(sp)
   2167c:	dec00604 	addi	sp,sp,24
   21680:	f800283a 	ret

00021684 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   21684:	d8800017 	ldw	r2,0(sp)
   21688:	11800226 	beq	r2,r6,21694 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   2168c:	00800044 	movi	r2,1
   21690:	f800283a 	ret
   21694:	00800184 	movi	r2,6
   21698:	f800283a 	ret

0002169c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   2169c:	00820034 	movhi	r2,2048
   216a0:	10802604 	addi	r2,r2,152
   216a4:	20800015 	stw	r2,0(r4)
   216a8:	00220201 	jmpi	22020 <_ZNSt9type_infoD1Ev>

000216ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   216ac:	defffe04 	addi	sp,sp,-8
   216b0:	00820034 	movhi	r2,2048
   216b4:	dc000015 	stw	r16,0(sp)
   216b8:	dfc00115 	stw	ra,4(sp)
   216bc:	10802604 	addi	r2,r2,152
   216c0:	20800015 	stw	r2,0(r4)
   216c4:	2021883a 	mov	r16,r4
   216c8:	00220200 	call	22020 <_ZNSt9type_infoD1Ev>
   216cc:	8009883a 	mov	r4,r16
   216d0:	dfc00117 	ldw	ra,4(sp)
   216d4:	dc000017 	ldw	r16,0(sp)
   216d8:	dec00204 	addi	sp,sp,8
   216dc:	00218d41 	jmpi	218d4 <_ZdlPv>

000216e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   216e0:	21000117 	ldw	r4,4(r4)
   216e4:	29400117 	ldw	r5,4(r5)
   216e8:	defffd04 	addi	sp,sp,-12
   216ec:	dc400115 	stw	r17,4(sp)
   216f0:	dc000015 	stw	r16,0(sp)
   216f4:	dfc00215 	stw	ra,8(sp)
   216f8:	3023883a 	mov	r17,r6
   216fc:	3821883a 	mov	r16,r7
   21700:	21400b26 	beq	r4,r5,21730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   21704:	20c00007 	ldb	r3,0(r4)
   21708:	00800a84 	movi	r2,42
   2170c:	18800226 	beq	r3,r2,21718 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   21710:	00233380 	call	23338 <strcmp>
   21714:	10000626 	beq	r2,zero,21730 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   21718:	0005883a 	mov	r2,zero
   2171c:	dfc00217 	ldw	ra,8(sp)
   21720:	dc400117 	ldw	r17,4(sp)
   21724:	dc000017 	ldw	r16,0(sp)
   21728:	dec00304 	addi	sp,sp,12
   2172c:	f800283a 	ret
   21730:	00800204 	movi	r2,8
   21734:	80800315 	stw	r2,12(r16)
   21738:	00800184 	movi	r2,6
   2173c:	80800115 	stw	r2,4(r16)
   21740:	84400015 	stw	r17,0(r16)
   21744:	00800044 	movi	r2,1
   21748:	003ff406 	br	2171c <__alt_data_end+0xf402171c>

0002174c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   2174c:	20800117 	ldw	r2,4(r4)
   21750:	28c00117 	ldw	r3,4(r5)
   21754:	10c02926 	beq	r2,r3,217fc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   21758:	defffb04 	addi	sp,sp,-20
   2175c:	dcc00315 	stw	r19,12(sp)
   21760:	dc800215 	stw	r18,8(sp)
   21764:	dc400115 	stw	r17,4(sp)
   21768:	dc000015 	stw	r16,0(sp)
   2176c:	dfc00415 	stw	ra,16(sp)
   21770:	2821883a 	mov	r16,r5
   21774:	11400007 	ldb	r5,0(r2)
   21778:	2025883a 	mov	r18,r4
   2177c:	01000a84 	movi	r4,42
   21780:	3823883a 	mov	r17,r7
   21784:	3027883a 	mov	r19,r6
   21788:	29000426 	beq	r5,r4,2179c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
   2178c:	1009883a 	mov	r4,r2
   21790:	180b883a 	mov	r5,r3
   21794:	00233380 	call	23338 <strcmp>
   21798:	10000a26 	beq	r2,zero,217c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
   2179c:	008000c4 	movi	r2,3
   217a0:	14400a2e 	bgeu	r2,r17,217cc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   217a4:	0005883a 	mov	r2,zero
   217a8:	dfc00417 	ldw	ra,16(sp)
   217ac:	dcc00317 	ldw	r19,12(sp)
   217b0:	dc800217 	ldw	r18,8(sp)
   217b4:	dc400117 	ldw	r17,4(sp)
   217b8:	dc000017 	ldw	r16,0(sp)
   217bc:	dec00504 	addi	sp,sp,20
   217c0:	f800283a 	ret
   217c4:	00800044 	movi	r2,1
   217c8:	003ff706 	br	217a8 <__alt_data_end+0xf40217a8>
   217cc:	80800017 	ldw	r2,0(r16)
   217d0:	8009883a 	mov	r4,r16
   217d4:	900b883a 	mov	r5,r18
   217d8:	10800517 	ldw	r2,20(r2)
   217dc:	980d883a 	mov	r6,r19
   217e0:	dfc00417 	ldw	ra,16(sp)
   217e4:	dcc00317 	ldw	r19,12(sp)
   217e8:	dc800217 	ldw	r18,8(sp)
   217ec:	dc400117 	ldw	r17,4(sp)
   217f0:	dc000017 	ldw	r16,0(sp)
   217f4:	dec00504 	addi	sp,sp,20
   217f8:	1000683a 	jmp	r2
   217fc:	00800044 	movi	r2,1
   21800:	f800283a 	ret

00021804 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   21804:	defffb04 	addi	sp,sp,-20
   21808:	dc400315 	stw	r17,12(sp)
   2180c:	d8800717 	ldw	r2,28(sp)
   21810:	dc400517 	ldw	r17,20(sp)
   21814:	dc000215 	stw	r16,8(sp)
   21818:	dfc00415 	stw	ra,16(sp)
   2181c:	24000117 	ldw	r16,4(r4)
   21820:	88801026 	beq	r17,r2,21864 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   21824:	39400117 	ldw	r5,4(r7)
   21828:	81401d26 	beq	r16,r5,218a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   2182c:	80c00007 	ldb	r3,0(r16)
   21830:	00800a84 	movi	r2,42
   21834:	18800526 	beq	r3,r2,2184c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   21838:	8009883a 	mov	r4,r16
   2183c:	d9800115 	stw	r6,4(sp)
   21840:	00233380 	call	23338 <strcmp>
   21844:	d9800117 	ldw	r6,4(sp)
   21848:	10001526 	beq	r2,zero,218a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   2184c:	0005883a 	mov	r2,zero
   21850:	dfc00417 	ldw	ra,16(sp)
   21854:	dc400317 	ldw	r17,12(sp)
   21858:	dc000217 	ldw	r16,8(sp)
   2185c:	dec00504 	addi	sp,sp,20
   21860:	f800283a 	ret
   21864:	d8800617 	ldw	r2,24(sp)
   21868:	11400117 	ldw	r5,4(r2)
   2186c:	81401326 	beq	r16,r5,218bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   21870:	80c00007 	ldb	r3,0(r16)
   21874:	00800a84 	movi	r2,42
   21878:	18801326 	beq	r3,r2,218c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   2187c:	8009883a 	mov	r4,r16
   21880:	d9800115 	stw	r6,4(sp)
   21884:	d9c00015 	stw	r7,0(sp)
   21888:	00233380 	call	23338 <strcmp>
   2188c:	d9800117 	ldw	r6,4(sp)
   21890:	d9c00017 	ldw	r7,0(sp)
   21894:	10000926 	beq	r2,zero,218bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   21898:	39400117 	ldw	r5,4(r7)
   2189c:	817fe61e 	bne	r16,r5,21838 <__alt_data_end+0xf4021838>
   218a0:	d8800817 	ldw	r2,32(sp)
   218a4:	d8c00817 	ldw	r3,32(sp)
   218a8:	14400015 	stw	r17,0(r2)
   218ac:	11800115 	stw	r6,4(r2)
   218b0:	00800044 	movi	r2,1
   218b4:	18800315 	stw	r2,12(r3)
   218b8:	003fe406 	br	2184c <__alt_data_end+0xf402184c>
   218bc:	d8800817 	ldw	r2,32(sp)
   218c0:	11800215 	stw	r6,8(r2)
   218c4:	003fe106 	br	2184c <__alt_data_end+0xf402184c>
   218c8:	38800117 	ldw	r2,4(r7)
   218cc:	80bfdf1e 	bne	r16,r2,2184c <__alt_data_end+0xf402184c>
   218d0:	003ff306 	br	218a0 <__alt_data_end+0xf40218a0>

000218d4 <_ZdlPv>:
   218d4:	002282c1 	jmpi	2282c <free>

000218d8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   218d8:	008000b4 	movhi	r2,2
   218dc:	deffef04 	addi	sp,sp,-68
   218e0:	1083b004 	addi	r2,r2,3776
   218e4:	d8800615 	stw	r2,24(sp)
   218e8:	008000b4 	movhi	r2,2
   218ec:	10979804 	addi	r2,r2,24160
   218f0:	d8800715 	stw	r2,28(sp)
   218f4:	008000b4 	movhi	r2,2
   218f8:	10864c04 	addi	r2,r2,6448
   218fc:	d9000d15 	stw	r4,52(sp)
   21900:	d809883a 	mov	r4,sp
   21904:	d8800915 	stw	r2,36(sp)
   21908:	dfc01015 	stw	ra,64(sp)
   2190c:	df000f15 	stw	fp,60(sp)
   21910:	dec00815 	stw	sp,32(sp)
   21914:	dec00a15 	stw	sp,40(sp)
   21918:	00224e80 	call	224e8 <_Unwind_SjLj_Register>
   2191c:	00800044 	movi	r2,1
   21920:	d8800115 	stw	r2,4(sp)
   21924:	d8800d17 	ldw	r2,52(sp)
   21928:	103ee83a 	callr	r2
   2192c:	00228000 	call	22800 <abort>
   21930:	d8c00217 	ldw	r3,8(sp)
   21934:	d8800117 	ldw	r2,4(sp)
   21938:	d8c00d15 	stw	r3,52(sp)
   2193c:	d8c00317 	ldw	r3,12(sp)
   21940:	d8c00e15 	stw	r3,56(sp)
   21944:	10000b26 	beq	r2,zero,21974 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   21948:	10bfffc4 	addi	r2,r2,-1
   2194c:	10000126 	beq	r2,zero,21954 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   21950:	003da0fa 	break	3
   21954:	d8000115 	stw	zero,4(sp)
   21958:	0021da00 	call	21da0 <__cxa_end_catch>
   2195c:	d8c00e17 	ldw	r3,56(sp)
   21960:	00bfffc4 	movi	r2,-1
   21964:	18800826 	beq	r3,r2,21988 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   21968:	d9000d17 	ldw	r4,52(sp)
   2196c:	d8800115 	stw	r2,4(sp)
   21970:	00226e40 	call	226e4 <_Unwind_SjLj_Resume>
   21974:	d9000d17 	ldw	r4,52(sp)
   21978:	0021cec0 	call	21cec <__cxa_begin_catch>
   2197c:	00800084 	movi	r2,2
   21980:	d8800115 	stw	r2,4(sp)
   21984:	00228000 	call	22800 <abort>
   21988:	d8800e17 	ldw	r2,56(sp)
   2198c:	d9000d17 	ldw	r4,52(sp)
   21990:	d8800115 	stw	r2,4(sp)
   21994:	00213c00 	call	213c0 <__cxa_call_unexpected>

00021998 <_ZSt9terminatev>:
   21998:	00820034 	movhi	r2,2048
   2199c:	10826d04 	addi	r2,r2,2484
   219a0:	11000017 	ldw	r4,0(r2)
   219a4:	deffff04 	addi	sp,sp,-4
   219a8:	dfc00015 	stw	ra,0(sp)
   219ac:	00218d80 	call	218d8 <_ZN10__cxxabiv111__terminateEPFvvE>

000219b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   219b0:	deffff04 	addi	sp,sp,-4
   219b4:	dfc00015 	stw	ra,0(sp)
   219b8:	203ee83a 	callr	r4
   219bc:	00219980 	call	21998 <_ZSt9terminatev>

000219c0 <_ZSt10unexpectedv>:
   219c0:	00820034 	movhi	r2,2048
   219c4:	10827604 	addi	r2,r2,2520
   219c8:	11000017 	ldw	r4,0(r2)
   219cc:	deffff04 	addi	sp,sp,-4
   219d0:	dfc00015 	stw	ra,0(sp)
   219d4:	00219b00 	call	219b0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000219d8 <_ZSt13set_terminatePFvvE>:
   219d8:	00c20034 	movhi	r3,2048
   219dc:	18c26d04 	addi	r3,r3,2484
   219e0:	18800017 	ldw	r2,0(r3)
   219e4:	19000015 	stw	r4,0(r3)
   219e8:	f800283a 	ret

000219ec <_ZSt13get_terminatev>:
   219ec:	00820034 	movhi	r2,2048
   219f0:	10826d04 	addi	r2,r2,2484
   219f4:	10800017 	ldw	r2,0(r2)
   219f8:	f800283a 	ret

000219fc <_ZSt14set_unexpectedPFvvE>:
   219fc:	00c20034 	movhi	r3,2048
   21a00:	18c27604 	addi	r3,r3,2520
   21a04:	18800017 	ldw	r2,0(r3)
   21a08:	19000015 	stw	r4,0(r3)
   21a0c:	f800283a 	ret

00021a10 <_ZSt14get_unexpectedv>:
   21a10:	00820034 	movhi	r2,2048
   21a14:	10827604 	addi	r2,r2,2520
   21a18:	10800017 	ldw	r2,0(r2)
   21a1c:	f800283a 	ret

00021a20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   21a20:	00820034 	movhi	r2,2048
   21a24:	10803e04 	addi	r2,r2,248
   21a28:	20800015 	stw	r2,0(r4)
   21a2c:	002169c1 	jmpi	2169c <_ZN10__cxxabiv117__class_type_infoD1Ev>

00021a30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   21a30:	defffe04 	addi	sp,sp,-8
   21a34:	00820034 	movhi	r2,2048
   21a38:	dc000015 	stw	r16,0(sp)
   21a3c:	dfc00115 	stw	ra,4(sp)
   21a40:	10803e04 	addi	r2,r2,248
   21a44:	20800015 	stw	r2,0(r4)
   21a48:	2021883a 	mov	r16,r4
   21a4c:	002169c0 	call	2169c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   21a50:	8009883a 	mov	r4,r16
   21a54:	dfc00117 	ldw	ra,4(sp)
   21a58:	dc000017 	ldw	r16,0(sp)
   21a5c:	dec00204 	addi	sp,sp,8
   21a60:	00218d41 	jmpi	218d4 <_ZdlPv>

00021a64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   21a64:	defff504 	addi	sp,sp,-44
   21a68:	dc000115 	stw	r16,4(sp)
   21a6c:	38800117 	ldw	r2,4(r7)
   21a70:	24000117 	ldw	r16,4(r4)
   21a74:	ddc00815 	stw	r23,32(sp)
   21a78:	dd800715 	stw	r22,28(sp)
   21a7c:	dd400615 	stw	r21,24(sp)
   21a80:	dd000515 	stw	r20,20(sp)
   21a84:	dcc00415 	stw	r19,16(sp)
   21a88:	dc800315 	stw	r18,12(sp)
   21a8c:	dc400215 	stw	r17,8(sp)
   21a90:	dfc00a15 	stw	ra,40(sp)
   21a94:	df000915 	stw	fp,36(sp)
   21a98:	202b883a 	mov	r21,r4
   21a9c:	382d883a 	mov	r22,r7
   21aa0:	2823883a 	mov	r17,r5
   21aa4:	dc800b17 	ldw	r18,44(sp)
   21aa8:	ddc00c17 	ldw	r23,48(sp)
   21aac:	dd000d17 	ldw	r20,52(sp)
   21ab0:	dcc00e17 	ldw	r19,56(sp)
   21ab4:	80801f26 	beq	r16,r2,21b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21ab8:	87000007 	ldb	fp,0(r16)
   21abc:	00c00a84 	movi	r3,42
   21ac0:	e0c00626 	beq	fp,r3,21adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   21ac4:	8009883a 	mov	r4,r16
   21ac8:	100b883a 	mov	r5,r2
   21acc:	d9800015 	stw	r6,0(sp)
   21ad0:	00233380 	call	23338 <strcmp>
   21ad4:	d9800017 	ldw	r6,0(sp)
   21ad8:	10001626 	beq	r2,zero,21b34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21adc:	95002c26 	beq	r18,r20,21b90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
   21ae0:	a9000217 	ldw	r4,8(r21)
   21ae4:	880b883a 	mov	r5,r17
   21ae8:	b00f883a 	mov	r7,r22
   21aec:	20800017 	ldw	r2,0(r4)
   21af0:	dc800b15 	stw	r18,44(sp)
   21af4:	ddc00c15 	stw	r23,48(sp)
   21af8:	dd000d15 	stw	r20,52(sp)
   21afc:	dcc00e15 	stw	r19,56(sp)
   21b00:	10800717 	ldw	r2,28(r2)
   21b04:	dfc00a17 	ldw	ra,40(sp)
   21b08:	df000917 	ldw	fp,36(sp)
   21b0c:	ddc00817 	ldw	r23,32(sp)
   21b10:	dd800717 	ldw	r22,28(sp)
   21b14:	dd400617 	ldw	r21,24(sp)
   21b18:	dd000517 	ldw	r20,20(sp)
   21b1c:	dcc00417 	ldw	r19,16(sp)
   21b20:	dc800317 	ldw	r18,12(sp)
   21b24:	dc400217 	ldw	r17,8(sp)
   21b28:	dc000117 	ldw	r16,4(sp)
   21b2c:	dec00b04 	addi	sp,sp,44
   21b30:	1000683a 	jmp	r2
   21b34:	9c800015 	stw	r18,0(r19)
   21b38:	99800115 	stw	r6,4(r19)
   21b3c:	88001116 	blt	r17,zero,21b84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   21b40:	9463883a 	add	r17,r18,r17
   21b44:	a4401d26 	beq	r20,r17,21bbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   21b48:	00800044 	movi	r2,1
   21b4c:	98800315 	stw	r2,12(r19)
   21b50:	0005883a 	mov	r2,zero
   21b54:	dfc00a17 	ldw	ra,40(sp)
   21b58:	df000917 	ldw	fp,36(sp)
   21b5c:	ddc00817 	ldw	r23,32(sp)
   21b60:	dd800717 	ldw	r22,28(sp)
   21b64:	dd400617 	ldw	r21,24(sp)
   21b68:	dd000517 	ldw	r20,20(sp)
   21b6c:	dcc00417 	ldw	r19,16(sp)
   21b70:	dc800317 	ldw	r18,12(sp)
   21b74:	dc400217 	ldw	r17,8(sp)
   21b78:	dc000117 	ldw	r16,4(sp)
   21b7c:	dec00b04 	addi	sp,sp,44
   21b80:	f800283a 	ret
   21b84:	00bfff84 	movi	r2,-2
   21b88:	88bff11e 	bne	r17,r2,21b50 <__alt_data_end+0xf4021b50>
   21b8c:	003fee06 	br	21b48 <__alt_data_end+0xf4021b48>
   21b90:	b9400117 	ldw	r5,4(r23)
   21b94:	81400726 	beq	r16,r5,21bb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   21b98:	00800a84 	movi	r2,42
   21b9c:	e0bfd026 	beq	fp,r2,21ae0 <__alt_data_end+0xf4021ae0>
   21ba0:	8009883a 	mov	r4,r16
   21ba4:	d9800015 	stw	r6,0(sp)
   21ba8:	00233380 	call	23338 <strcmp>
   21bac:	d9800017 	ldw	r6,0(sp)
   21bb0:	103fcb1e 	bne	r2,zero,21ae0 <__alt_data_end+0xf4021ae0>
   21bb4:	99800215 	stw	r6,8(r19)
   21bb8:	003fe506 	br	21b50 <__alt_data_end+0xf4021b50>
   21bbc:	00800184 	movi	r2,6
   21bc0:	003fe206 	br	21b4c <__alt_data_end+0xf4021b4c>

00021bc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   21bc4:	defffa04 	addi	sp,sp,-24
   21bc8:	dc000215 	stw	r16,8(sp)
   21bcc:	dc000617 	ldw	r16,24(sp)
   21bd0:	dc800415 	stw	r18,16(sp)
   21bd4:	dc400315 	stw	r17,12(sp)
   21bd8:	dfc00515 	stw	ra,20(sp)
   21bdc:	2023883a 	mov	r17,r4
   21be0:	2825883a 	mov	r18,r5
   21be4:	81800b26 	beq	r16,r6,21c14 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   21be8:	89000217 	ldw	r4,8(r17)
   21bec:	900b883a 	mov	r5,r18
   21bf0:	20800017 	ldw	r2,0(r4)
   21bf4:	dc000615 	stw	r16,24(sp)
   21bf8:	10800817 	ldw	r2,32(r2)
   21bfc:	dfc00517 	ldw	ra,20(sp)
   21c00:	dc800417 	ldw	r18,16(sp)
   21c04:	dc400317 	ldw	r17,12(sp)
   21c08:	dc000217 	ldw	r16,8(sp)
   21c0c:	dec00604 	addi	sp,sp,24
   21c10:	1000683a 	jmp	r2
   21c14:	21000117 	ldw	r4,4(r4)
   21c18:	39400117 	ldw	r5,4(r7)
   21c1c:	21400926 	beq	r4,r5,21c44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   21c20:	20c00007 	ldb	r3,0(r4)
   21c24:	00800a84 	movi	r2,42
   21c28:	18bfef26 	beq	r3,r2,21be8 <__alt_data_end+0xf4021be8>
   21c2c:	d9800015 	stw	r6,0(sp)
   21c30:	d9c00115 	stw	r7,4(sp)
   21c34:	00233380 	call	23338 <strcmp>
   21c38:	d9800017 	ldw	r6,0(sp)
   21c3c:	d9c00117 	ldw	r7,4(sp)
   21c40:	103fe91e 	bne	r2,zero,21be8 <__alt_data_end+0xf4021be8>
   21c44:	00800184 	movi	r2,6
   21c48:	dfc00517 	ldw	ra,20(sp)
   21c4c:	dc800417 	ldw	r18,16(sp)
   21c50:	dc400317 	ldw	r17,12(sp)
   21c54:	dc000217 	ldw	r16,8(sp)
   21c58:	dec00604 	addi	sp,sp,24
   21c5c:	f800283a 	ret

00021c60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   21c60:	defffb04 	addi	sp,sp,-20
   21c64:	dcc00315 	stw	r19,12(sp)
   21c68:	dc800215 	stw	r18,8(sp)
   21c6c:	dc400115 	stw	r17,4(sp)
   21c70:	dc000015 	stw	r16,0(sp)
   21c74:	dfc00415 	stw	ra,16(sp)
   21c78:	2027883a 	mov	r19,r4
   21c7c:	2825883a 	mov	r18,r5
   21c80:	3023883a 	mov	r17,r6
   21c84:	3821883a 	mov	r16,r7
   21c88:	00216e00 	call	216e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   21c8c:	10c03fcc 	andi	r3,r2,255
   21c90:	18000726 	beq	r3,zero,21cb0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   21c94:	dfc00417 	ldw	ra,16(sp)
   21c98:	dcc00317 	ldw	r19,12(sp)
   21c9c:	dc800217 	ldw	r18,8(sp)
   21ca0:	dc400117 	ldw	r17,4(sp)
   21ca4:	dc000017 	ldw	r16,0(sp)
   21ca8:	dec00504 	addi	sp,sp,20
   21cac:	f800283a 	ret
   21cb0:	99000217 	ldw	r4,8(r19)
   21cb4:	900b883a 	mov	r5,r18
   21cb8:	880d883a 	mov	r6,r17
   21cbc:	20800017 	ldw	r2,0(r4)
   21cc0:	800f883a 	mov	r7,r16
   21cc4:	10800617 	ldw	r2,24(r2)
   21cc8:	dfc00417 	ldw	ra,16(sp)
   21ccc:	dcc00317 	ldw	r19,12(sp)
   21cd0:	dc800217 	ldw	r18,8(sp)
   21cd4:	dc400117 	ldw	r17,4(sp)
   21cd8:	dc000017 	ldw	r16,0(sp)
   21cdc:	dec00504 	addi	sp,sp,20
   21ce0:	1000683a 	jmp	r2

00021ce4 <__cxa_get_exception_ptr>:
   21ce4:	20bfff17 	ldw	r2,-4(r4)
   21ce8:	f800283a 	ret

00021cec <__cxa_begin_catch>:
   21cec:	defffe04 	addi	sp,sp,-8
   21cf0:	dc000015 	stw	r16,0(sp)
   21cf4:	dfc00115 	stw	ra,4(sp)
   21cf8:	2021883a 	mov	r16,r4
   21cfc:	00216000 	call	21600 <__cxa_get_globals>
   21d00:	81000017 	ldw	r4,0(r16)
   21d04:	80c00117 	ldw	r3,4(r16)
   21d08:	01af3574 	movhi	r6,48341
   21d0c:	31b54004 	addi	r6,r6,-11008
   21d10:	016e2cb4 	movhi	r5,47282
   21d14:	296aaf04 	addi	r5,r5,-21828
   21d18:	218d883a 	add	r6,r4,r6
   21d1c:	3109803a 	cmpltu	r4,r6,r4
   21d20:	1947883a 	add	r3,r3,r5
   21d24:	20c7883a 	add	r3,r4,r3
   21d28:	817ff504 	addi	r5,r16,-44
   21d2c:	11000017 	ldw	r4,0(r2)
   21d30:	18000726 	beq	r3,zero,21d50 <__cxa_begin_catch+0x64>
   21d34:	2000191e 	bne	r4,zero,21d9c <__cxa_begin_catch+0xb0>
   21d38:	11400015 	stw	r5,0(r2)
   21d3c:	0005883a 	mov	r2,zero
   21d40:	dfc00117 	ldw	ra,4(sp)
   21d44:	dc000017 	ldw	r16,0(sp)
   21d48:	dec00204 	addi	sp,sp,8
   21d4c:	f800283a 	ret
   21d50:	01c00044 	movi	r7,1
   21d54:	39bff736 	bltu	r7,r6,21d34 <__alt_data_end+0xf4021d34>
   21d58:	80fffa17 	ldw	r3,-24(r16)
   21d5c:	18000d16 	blt	r3,zero,21d94 <__cxa_begin_catch+0xa8>
   21d60:	18c00044 	addi	r3,r3,1
   21d64:	11800117 	ldw	r6,4(r2)
   21d68:	80fffa15 	stw	r3,-24(r16)
   21d6c:	30ffffc4 	addi	r3,r6,-1
   21d70:	10c00115 	stw	r3,4(r2)
   21d74:	21400226 	beq	r4,r5,21d80 <__cxa_begin_catch+0x94>
   21d78:	813ff915 	stw	r4,-28(r16)
   21d7c:	11400015 	stw	r5,0(r2)
   21d80:	80bfff17 	ldw	r2,-4(r16)
   21d84:	dfc00117 	ldw	ra,4(sp)
   21d88:	dc000017 	ldw	r16,0(sp)
   21d8c:	dec00204 	addi	sp,sp,8
   21d90:	f800283a 	ret
   21d94:	38c7c83a 	sub	r3,r7,r3
   21d98:	003ff206 	br	21d64 <__alt_data_end+0xf4021d64>
   21d9c:	00219980 	call	21998 <_ZSt9terminatev>

00021da0 <__cxa_end_catch>:
   21da0:	deffff04 	addi	sp,sp,-4
   21da4:	dfc00015 	stw	ra,0(sp)
   21da8:	00215f40 	call	215f4 <__cxa_get_globals_fast>
   21dac:	11000017 	ldw	r4,0(r2)
   21db0:	20001326 	beq	r4,zero,21e00 <__cxa_end_catch+0x60>
   21db4:	21400b17 	ldw	r5,44(r4)
   21db8:	01ef3574 	movhi	r7,48341
   21dbc:	39f54004 	addi	r7,r7,-11008
   21dc0:	29cf883a 	add	r7,r5,r7
   21dc4:	20c00c17 	ldw	r3,48(r4)
   21dc8:	394d803a 	cmpltu	r6,r7,r5
   21dcc:	016e2cb4 	movhi	r5,47282
   21dd0:	296aaf04 	addi	r5,r5,-21828
   21dd4:	1947883a 	add	r3,r3,r5
   21dd8:	30c7883a 	add	r3,r6,r3
   21ddc:	18000b1e 	bne	r3,zero,21e0c <__cxa_end_catch+0x6c>
   21de0:	00c00044 	movi	r3,1
   21de4:	19c00936 	bltu	r3,r7,21e0c <__cxa_end_catch+0x6c>
   21de8:	20c00517 	ldw	r3,20(r4)
   21dec:	18000c16 	blt	r3,zero,21e20 <__cxa_end_catch+0x80>
   21df0:	197fffc4 	addi	r5,r3,-1
   21df4:	28000f26 	beq	r5,zero,21e34 <__cxa_end_catch+0x94>
   21df8:	18001426 	beq	r3,zero,21e4c <__cxa_end_catch+0xac>
   21dfc:	21400515 	stw	r5,20(r4)
   21e00:	dfc00017 	ldw	ra,0(sp)
   21e04:	dec00104 	addi	sp,sp,4
   21e08:	f800283a 	ret
   21e0c:	21000b04 	addi	r4,r4,44
   21e10:	10000015 	stw	zero,0(r2)
   21e14:	dfc00017 	ldw	ra,0(sp)
   21e18:	dec00104 	addi	sp,sp,4
   21e1c:	00227741 	jmpi	22774 <_Unwind_DeleteException>
   21e20:	19400044 	addi	r5,r3,1
   21e24:	283ff51e 	bne	r5,zero,21dfc <__alt_data_end+0xf4021dfc>
   21e28:	20c00417 	ldw	r3,16(r4)
   21e2c:	10c00015 	stw	r3,0(r2)
   21e30:	003ff206 	br	21dfc <__alt_data_end+0xf4021dfc>
   21e34:	20c00417 	ldw	r3,16(r4)
   21e38:	21000b04 	addi	r4,r4,44
   21e3c:	10c00015 	stw	r3,0(r2)
   21e40:	dfc00017 	ldw	ra,0(sp)
   21e44:	dec00104 	addi	sp,sp,4
   21e48:	00227741 	jmpi	22774 <_Unwind_DeleteException>
   21e4c:	00219980 	call	21998 <_ZSt9terminatev>

00021e50 <_ZSt18uncaught_exceptionv>:
   21e50:	deffff04 	addi	sp,sp,-4
   21e54:	dfc00015 	stw	ra,0(sp)
   21e58:	00216000 	call	21600 <__cxa_get_globals>
   21e5c:	10800117 	ldw	r2,4(r2)
   21e60:	1004c03a 	cmpne	r2,r2,zero
   21e64:	dfc00017 	ldw	ra,0(sp)
   21e68:	dec00104 	addi	sp,sp,4
   21e6c:	f800283a 	ret

00021e70 <__cxa_call_terminate>:
   21e70:	defffe04 	addi	sp,sp,-8
   21e74:	dc000015 	stw	r16,0(sp)
   21e78:	dfc00115 	stw	ra,4(sp)
   21e7c:	2021883a 	mov	r16,r4
   21e80:	20000c26 	beq	r4,zero,21eb4 <__cxa_call_terminate+0x44>
   21e84:	0021cec0 	call	21cec <__cxa_begin_catch>
   21e88:	80c00017 	ldw	r3,0(r16)
   21e8c:	012f3574 	movhi	r4,48341
   21e90:	21354004 	addi	r4,r4,-11008
   21e94:	1909883a 	add	r4,r3,r4
   21e98:	80800117 	ldw	r2,4(r16)
   21e9c:	20cb803a 	cmpltu	r5,r4,r3
   21ea0:	00ee2cb4 	movhi	r3,47282
   21ea4:	18eaaf04 	addi	r3,r3,-21828
   21ea8:	10c5883a 	add	r2,r2,r3
   21eac:	2885883a 	add	r2,r5,r2
   21eb0:	10000126 	beq	r2,zero,21eb8 <__cxa_call_terminate+0x48>
   21eb4:	00219980 	call	21998 <_ZSt9terminatev>
   21eb8:	00800044 	movi	r2,1
   21ebc:	113ffd36 	bltu	r2,r4,21eb4 <__alt_data_end+0xf4021eb4>
   21ec0:	813ff817 	ldw	r4,-32(r16)
   21ec4:	00218d80 	call	218d8 <_ZN10__cxxabiv111__terminateEPFvvE>

00021ec8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   21ec8:	defffe04 	addi	sp,sp,-8
   21ecc:	dfc00115 	stw	ra,4(sp)
   21ed0:	dc000015 	stw	r16,0(sp)
   21ed4:	00800044 	movi	r2,1
   21ed8:	11000a36 	bltu	r2,r4,21f04 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   21edc:	28bff617 	ldw	r2,-40(r5)
   21ee0:	2c000504 	addi	r16,r5,20
   21ee4:	10000226 	beq	r2,zero,21ef0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   21ee8:	8009883a 	mov	r4,r16
   21eec:	103ee83a 	callr	r2
   21ef0:	8009883a 	mov	r4,r16
   21ef4:	dfc00117 	ldw	ra,4(sp)
   21ef8:	dc000017 	ldw	r16,0(sp)
   21efc:	dec00204 	addi	sp,sp,8
   21f00:	00221281 	jmpi	22128 <__cxa_free_exception>
   21f04:	293ff817 	ldw	r4,-32(r5)
   21f08:	00218d80 	call	218d8 <_ZN10__cxxabiv111__terminateEPFvvE>

00021f0c <__cxa_throw>:
   21f0c:	defffb04 	addi	sp,sp,-20
   21f10:	dfc00415 	stw	ra,16(sp)
   21f14:	dcc00315 	stw	r19,12(sp)
   21f18:	dc800215 	stw	r18,8(sp)
   21f1c:	2827883a 	mov	r19,r5
   21f20:	3025883a 	mov	r18,r6
   21f24:	dc400115 	stw	r17,4(sp)
   21f28:	dc000015 	stw	r16,0(sp)
   21f2c:	2021883a 	mov	r16,r4
   21f30:	00216000 	call	21600 <__cxa_get_globals>
   21f34:	10c00117 	ldw	r3,4(r2)
   21f38:	847ffb04 	addi	r17,r16,-20
   21f3c:	18c00044 	addi	r3,r3,1
   21f40:	10c00115 	stw	r3,4(r2)
   21f44:	00800044 	movi	r2,1
   21f48:	80bfef15 	stw	r2,-68(r16)
   21f4c:	84fff015 	stw	r19,-64(r16)
   21f50:	84bff115 	stw	r18,-60(r16)
   21f54:	0021a100 	call	21a10 <_ZSt14get_unexpectedv>
   21f58:	80bff215 	stw	r2,-56(r16)
   21f5c:	00219ec0 	call	219ec <_ZSt13get_terminatev>
   21f60:	80bff315 	stw	r2,-52(r16)
   21f64:	0090caf4 	movhi	r2,17195
   21f68:	108ac004 	addi	r2,r2,11008
   21f6c:	80bffb15 	stw	r2,-20(r16)
   21f70:	0091d3b4 	movhi	r2,18254
   21f74:	109550c4 	addi	r2,r2,21827
   21f78:	80bffc15 	stw	r2,-16(r16)
   21f7c:	008000b4 	movhi	r2,2
   21f80:	1087b204 	addi	r2,r2,7880
   21f84:	8809883a 	mov	r4,r17
   21f88:	80bffd15 	stw	r2,-12(r16)
   21f8c:	00225d00 	call	225d0 <_Unwind_SjLj_RaiseException>
   21f90:	8809883a 	mov	r4,r17
   21f94:	0021cec0 	call	21cec <__cxa_begin_catch>
   21f98:	00219980 	call	21998 <_ZSt9terminatev>

00021f9c <__cxa_rethrow>:
   21f9c:	defffe04 	addi	sp,sp,-8
   21fa0:	dfc00115 	stw	ra,4(sp)
   21fa4:	dc000015 	stw	r16,0(sp)
   21fa8:	00216000 	call	21600 <__cxa_get_globals>
   21fac:	10c00117 	ldw	r3,4(r2)
   21fb0:	11000017 	ldw	r4,0(r2)
   21fb4:	18c00044 	addi	r3,r3,1
   21fb8:	10c00115 	stw	r3,4(r2)
   21fbc:	20001126 	beq	r4,zero,22004 <__cxa_rethrow+0x68>
   21fc0:	21400b17 	ldw	r5,44(r4)
   21fc4:	01ef3574 	movhi	r7,48341
   21fc8:	39f54004 	addi	r7,r7,-11008
   21fcc:	29cf883a 	add	r7,r5,r7
   21fd0:	20c00c17 	ldw	r3,48(r4)
   21fd4:	394d803a 	cmpltu	r6,r7,r5
   21fd8:	016e2cb4 	movhi	r5,47282
   21fdc:	296aaf04 	addi	r5,r5,-21828
   21fe0:	1947883a 	add	r3,r3,r5
   21fe4:	30c7883a 	add	r3,r6,r3
   21fe8:	18000726 	beq	r3,zero,22008 <__cxa_rethrow+0x6c>
   21fec:	10000015 	stw	zero,0(r2)
   21ff0:	24000b04 	addi	r16,r4,44
   21ff4:	8009883a 	mov	r4,r16
   21ff8:	00227280 	call	22728 <_Unwind_SjLj_Resume_or_Rethrow>
   21ffc:	8009883a 	mov	r4,r16
   22000:	0021cec0 	call	21cec <__cxa_begin_catch>
   22004:	00219980 	call	21998 <_ZSt9terminatev>
   22008:	00c00044 	movi	r3,1
   2200c:	19fff736 	bltu	r3,r7,21fec <__alt_data_end+0xf4021fec>
   22010:	20800517 	ldw	r2,20(r4)
   22014:	0085c83a 	sub	r2,zero,r2
   22018:	20800515 	stw	r2,20(r4)
   2201c:	003ff406 	br	21ff0 <__alt_data_end+0xf4021ff0>

00022020 <_ZNSt9type_infoD1Ev>:
   22020:	f800283a 	ret

00022024 <_ZNKSt9type_info14__is_pointer_pEv>:
   22024:	0005883a 	mov	r2,zero
   22028:	f800283a 	ret

0002202c <_ZNKSt9type_info15__is_function_pEv>:
   2202c:	0005883a 	mov	r2,zero
   22030:	f800283a 	ret

00022034 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   22034:	0005883a 	mov	r2,zero
   22038:	f800283a 	ret

0002203c <_ZNSt9type_infoD0Ev>:
   2203c:	00218d41 	jmpi	218d4 <_ZdlPv>

00022040 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   22040:	21000117 	ldw	r4,4(r4)
   22044:	29400117 	ldw	r5,4(r5)
   22048:	21400c26 	beq	r4,r5,2207c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   2204c:	20c00007 	ldb	r3,0(r4)
   22050:	00800a84 	movi	r2,42
   22054:	18800726 	beq	r3,r2,22074 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   22058:	deffff04 	addi	sp,sp,-4
   2205c:	dfc00015 	stw	ra,0(sp)
   22060:	00233380 	call	23338 <strcmp>
   22064:	1005003a 	cmpeq	r2,r2,zero
   22068:	dfc00017 	ldw	ra,0(sp)
   2206c:	dec00104 	addi	sp,sp,4
   22070:	f800283a 	ret
   22074:	0005883a 	mov	r2,zero
   22078:	f800283a 	ret
   2207c:	00800044 	movi	r2,1
   22080:	f800283a 	ret

00022084 <__cxa_allocate_exception>:
   22084:	defffd04 	addi	sp,sp,-12
   22088:	dc400115 	stw	r17,4(sp)
   2208c:	24401104 	addi	r17,r4,68
   22090:	8809883a 	mov	r4,r17
   22094:	dc000015 	stw	r16,0(sp)
   22098:	dfc00215 	stw	ra,8(sp)
   2209c:	00228180 	call	22818 <malloc>
   220a0:	1021883a 	mov	r16,r2
   220a4:	10000a26 	beq	r2,zero,220d0 <__cxa_allocate_exception+0x4c>
   220a8:	8009883a 	mov	r4,r16
   220ac:	000b883a 	mov	r5,zero
   220b0:	01801104 	movi	r6,68
   220b4:	0022ec40 	call	22ec4 <memset>
   220b8:	80801104 	addi	r2,r16,68
   220bc:	dfc00217 	ldw	ra,8(sp)
   220c0:	dc400117 	ldw	r17,4(sp)
   220c4:	dc000017 	ldw	r16,0(sp)
   220c8:	dec00304 	addi	sp,sp,12
   220cc:	f800283a 	ret
   220d0:	01420034 	movhi	r5,2048
   220d4:	29428704 	addi	r5,r5,2588
   220d8:	00808004 	movi	r2,512
   220dc:	29800017 	ldw	r6,0(r5)
   220e0:	14400736 	bltu	r2,r17,22100 <__cxa_allocate_exception+0x7c>
   220e4:	3005883a 	mov	r2,r6
   220e8:	01000104 	movi	r4,4
   220ec:	10c0004c 	andi	r3,r2,1
   220f0:	18000426 	beq	r3,zero,22104 <__cxa_allocate_exception+0x80>
   220f4:	84000044 	addi	r16,r16,1
   220f8:	1004d07a 	srli	r2,r2,1
   220fc:	813ffb1e 	bne	r16,r4,220ec <__alt_data_end+0xf40220ec>
   22100:	00219980 	call	21998 <_ZSt9terminatev>
   22104:	00800044 	movi	r2,1
   22108:	1404983a 	sll	r2,r2,r16
   2210c:	8020927a 	slli	r16,r16,9
   22110:	118cb03a 	or	r6,r2,r6
   22114:	00820034 	movhi	r2,2048
   22118:	1082d204 	addi	r2,r2,2888
   2211c:	29800015 	stw	r6,0(r5)
   22120:	80a1883a 	add	r16,r16,r2
   22124:	003fe006 	br	220a8 <__alt_data_end+0xf40220a8>

00022128 <__cxa_free_exception>:
   22128:	00820034 	movhi	r2,2048
   2212c:	1082d204 	addi	r2,r2,2888
   22130:	20800236 	bltu	r4,r2,2213c <__cxa_free_exception+0x14>
   22134:	10c20004 	addi	r3,r2,2048
   22138:	20c00236 	bltu	r4,r3,22144 <__cxa_free_exception+0x1c>
   2213c:	213fef04 	addi	r4,r4,-68
   22140:	002282c1 	jmpi	2282c <free>
   22144:	2089c83a 	sub	r4,r4,r2
   22148:	2008d27a 	srli	r4,r4,9
   2214c:	01420034 	movhi	r5,2048
   22150:	29428704 	addi	r5,r5,2588
   22154:	00ffff84 	movi	r3,-2
   22158:	28800017 	ldw	r2,0(r5)
   2215c:	1908183a 	rol	r4,r3,r4
   22160:	2088703a 	and	r4,r4,r2
   22164:	29000015 	stw	r4,0(r5)
   22168:	f800283a 	ret

0002216c <__cxa_allocate_dependent_exception>:
   2216c:	defffe04 	addi	sp,sp,-8
   22170:	01001004 	movi	r4,64
   22174:	dc000015 	stw	r16,0(sp)
   22178:	dfc00115 	stw	ra,4(sp)
   2217c:	00228180 	call	22818 <malloc>
   22180:	1021883a 	mov	r16,r2
   22184:	10000926 	beq	r2,zero,221ac <__cxa_allocate_dependent_exception+0x40>
   22188:	8009883a 	mov	r4,r16
   2218c:	000b883a 	mov	r5,zero
   22190:	01801004 	movi	r6,64
   22194:	0022ec40 	call	22ec4 <memset>
   22198:	8005883a 	mov	r2,r16
   2219c:	dfc00117 	ldw	ra,4(sp)
   221a0:	dc000017 	ldw	r16,0(sp)
   221a4:	dec00204 	addi	sp,sp,8
   221a8:	f800283a 	ret
   221ac:	01c20034 	movhi	r7,2048
   221b0:	39c28604 	addi	r7,r7,2584
   221b4:	39800017 	ldw	r6,0(r7)
   221b8:	0005883a 	mov	r2,zero
   221bc:	01400104 	movi	r5,4
   221c0:	3007883a 	mov	r3,r6
   221c4:	1900004c 	andi	r4,r3,1
   221c8:	20000426 	beq	r4,zero,221dc <__cxa_allocate_dependent_exception+0x70>
   221cc:	10800044 	addi	r2,r2,1
   221d0:	1806d07a 	srli	r3,r3,1
   221d4:	117ffb1e 	bne	r2,r5,221c4 <__alt_data_end+0xf40221c4>
   221d8:	00219980 	call	21998 <_ZSt9terminatev>
   221dc:	00c00044 	movi	r3,1
   221e0:	1886983a 	sll	r3,r3,r2
   221e4:	100491ba 	slli	r2,r2,6
   221e8:	04020034 	movhi	r16,2048
   221ec:	198cb03a 	or	r6,r3,r6
   221f0:	84029204 	addi	r16,r16,2632
   221f4:	39800015 	stw	r6,0(r7)
   221f8:	1421883a 	add	r16,r2,r16
   221fc:	003fe206 	br	22188 <__alt_data_end+0xf4022188>

00022200 <__cxa_free_dependent_exception>:
   22200:	00820034 	movhi	r2,2048
   22204:	10829204 	addi	r2,r2,2632
   22208:	20800236 	bltu	r4,r2,22214 <__cxa_free_dependent_exception+0x14>
   2220c:	10c04004 	addi	r3,r2,256
   22210:	20c00136 	bltu	r4,r3,22218 <__cxa_free_dependent_exception+0x18>
   22214:	002282c1 	jmpi	2282c <free>
   22218:	2089c83a 	sub	r4,r4,r2
   2221c:	2008d1ba 	srli	r4,r4,6
   22220:	01420034 	movhi	r5,2048
   22224:	29428604 	addi	r5,r5,2584
   22228:	00ffff84 	movi	r3,-2
   2222c:	28800017 	ldw	r2,0(r5)
   22230:	1908183a 	rol	r4,r3,r4
   22234:	2088703a 	and	r4,r4,r2
   22238:	29000015 	stw	r4,0(r5)
   2223c:	f800283a 	ret

00022240 <_ZNSt9exceptionD1Ev>:
   22240:	f800283a 	ret

00022244 <_ZNSt13bad_exceptionD1Ev>:
   22244:	f800283a 	ret

00022248 <_ZNKSt9exception4whatEv>:
   22248:	00820034 	movhi	r2,2048
   2224c:	10805304 	addi	r2,r2,332
   22250:	f800283a 	ret

00022254 <_ZNKSt13bad_exception4whatEv>:
   22254:	00820034 	movhi	r2,2048
   22258:	10805704 	addi	r2,r2,348
   2225c:	f800283a 	ret

00022260 <_ZNSt9exceptionD0Ev>:
   22260:	00218d41 	jmpi	218d4 <_ZdlPv>

00022264 <_ZNSt13bad_exceptionD0Ev>:
   22264:	00218d41 	jmpi	218d4 <_ZdlPv>

00022268 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   22268:	f800283a 	ret

0002226c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   2226c:	00218d41 	jmpi	218d4 <_ZdlPv>

00022270 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   22270:	f800283a 	ret

00022274 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   22274:	00218d41 	jmpi	218d4 <_ZdlPv>

00022278 <__cxa_pure_virtual>:
   22278:	01420034 	movhi	r5,2048
   2227c:	deffff04 	addi	sp,sp,-4
   22280:	29408d04 	addi	r5,r5,564
   22284:	01000084 	movi	r4,2
   22288:	018006c4 	movi	r6,27
   2228c:	dfc00015 	stw	ra,0(sp)
   22290:	0024ce40 	call	24ce4 <write>
   22294:	00219980 	call	21998 <_ZSt9terminatev>

00022298 <__cxa_deleted_virtual>:
   22298:	01420034 	movhi	r5,2048
   2229c:	deffff04 	addi	sp,sp,-4
   222a0:	29409404 	addi	r5,r5,592
   222a4:	01000084 	movi	r4,2
   222a8:	01800784 	movi	r6,30
   222ac:	dfc00015 	stw	ra,0(sp)
   222b0:	0024ce40 	call	24ce4 <write>
   222b4:	00219980 	call	21998 <_ZSt9terminatev>

000222b8 <__mulsi3>:
   222b8:	0005883a 	mov	r2,zero
   222bc:	20000726 	beq	r4,zero,222dc <__mulsi3+0x24>
   222c0:	20c0004c 	andi	r3,r4,1
   222c4:	2008d07a 	srli	r4,r4,1
   222c8:	18000126 	beq	r3,zero,222d0 <__mulsi3+0x18>
   222cc:	1145883a 	add	r2,r2,r5
   222d0:	294b883a 	add	r5,r5,r5
   222d4:	203ffa1e 	bne	r4,zero,222c0 <__alt_data_end+0xf40222c0>
   222d8:	f800283a 	ret
   222dc:	f800283a 	ret

000222e0 <_Unwind_ForcedUnwind_Phase2>:
   222e0:	defff404 	addi	sp,sp,-48
   222e4:	dd800915 	stw	r22,36(sp)
   222e8:	05820034 	movhi	r22,2048
   222ec:	ddc00a15 	stw	r23,40(sp)
   222f0:	dd400815 	stw	r21,32(sp)
   222f4:	dd000715 	stw	r20,28(sp)
   222f8:	dcc00615 	stw	r19,24(sp)
   222fc:	dc400415 	stw	r17,16(sp)
   22300:	dc000315 	stw	r16,12(sp)
   22304:	dfc00b15 	stw	ra,44(sp)
   22308:	dc800515 	stw	r18,20(sp)
   2230c:	2021883a 	mov	r16,r4
   22310:	2823883a 	mov	r17,r5
   22314:	24c00317 	ldw	r19,12(r4)
   22318:	25000417 	ldw	r20,16(r4)
   2231c:	28c00017 	ldw	r3,0(r5)
   22320:	b5828804 	addi	r22,r22,2592
   22324:	054001c4 	movi	r21,7
   22328:	05c00204 	movi	r23,8
   2232c:	00001606 	br	22388 <_Unwind_ForcedUnwind_Phase2+0xa8>
   22330:	81800017 	ldw	r6,0(r16)
   22334:	81c00117 	ldw	r7,4(r16)
   22338:	1c800617 	ldw	r18,24(r3)
   2233c:	dc000015 	stw	r16,0(sp)
   22340:	dc400115 	stw	r17,4(sp)
   22344:	dd000215 	stw	r20,8(sp)
   22348:	983ee83a 	callr	r19
   2234c:	01000044 	movi	r4,1
   22350:	01400284 	movi	r5,10
   22354:	1000241e 	bne	r2,zero,223e8 <_Unwind_ForcedUnwind_Phase2+0x108>
   22358:	90000726 	beq	r18,zero,22378 <_Unwind_ForcedUnwind_Phase2+0x98>
   2235c:	81800017 	ldw	r6,0(r16)
   22360:	81c00117 	ldw	r7,4(r16)
   22364:	dc000015 	stw	r16,0(sp)
   22368:	dc400115 	stw	r17,4(sp)
   2236c:	903ee83a 	callr	r18
   22370:	15401f26 	beq	r2,r21,223f0 <_Unwind_ForcedUnwind_Phase2+0x110>
   22374:	15c01c1e 	bne	r2,r23,223e8 <_Unwind_ForcedUnwind_Phase2+0x108>
   22378:	88800017 	ldw	r2,0(r17)
   2237c:	10c00017 	ldw	r3,0(r2)
   22380:	b0c00015 	stw	r3,0(r22)
   22384:	88c00015 	stw	r3,0(r17)
   22388:	01000044 	movi	r4,1
   2238c:	01400284 	movi	r5,10
   22390:	183fe71e 	bne	r3,zero,22330 <__alt_data_end+0xf4022330>
   22394:	81800017 	ldw	r6,0(r16)
   22398:	81c00117 	ldw	r7,4(r16)
   2239c:	01000044 	movi	r4,1
   223a0:	dc000015 	stw	r16,0(sp)
   223a4:	dc400115 	stw	r17,4(sp)
   223a8:	dd000215 	stw	r20,8(sp)
   223ac:	01400684 	movi	r5,26
   223b0:	983ee83a 	callr	r19
   223b4:	10000c1e 	bne	r2,zero,223e8 <_Unwind_ForcedUnwind_Phase2+0x108>
   223b8:	00800144 	movi	r2,5
   223bc:	dfc00b17 	ldw	ra,44(sp)
   223c0:	ddc00a17 	ldw	r23,40(sp)
   223c4:	dd800917 	ldw	r22,36(sp)
   223c8:	dd400817 	ldw	r21,32(sp)
   223cc:	dd000717 	ldw	r20,28(sp)
   223d0:	dcc00617 	ldw	r19,24(sp)
   223d4:	dc800517 	ldw	r18,20(sp)
   223d8:	dc400417 	ldw	r17,16(sp)
   223dc:	dc000317 	ldw	r16,12(sp)
   223e0:	dec00c04 	addi	sp,sp,48
   223e4:	f800283a 	ret
   223e8:	00800084 	movi	r2,2
   223ec:	003ff306 	br	223bc <__alt_data_end+0xf40223bc>
   223f0:	a805883a 	mov	r2,r21
   223f4:	003ff106 	br	223bc <__alt_data_end+0xf40223bc>

000223f8 <_Unwind_RaiseException_Phase2>:
   223f8:	28c00017 	ldw	r3,0(r5)
   223fc:	defff804 	addi	sp,sp,-32
   22400:	dcc00515 	stw	r19,20(sp)
   22404:	dc800415 	stw	r18,16(sp)
   22408:	dc400315 	stw	r17,12(sp)
   2240c:	dc000215 	stw	r16,8(sp)
   22410:	dfc00715 	stw	ra,28(sp)
   22414:	dd000615 	stw	r20,24(sp)
   22418:	2823883a 	mov	r17,r5
   2241c:	2021883a 	mov	r16,r4
   22420:	048001c4 	movi	r18,7
   22424:	04c00204 	movi	r19,8
   22428:	18001326 	beq	r3,zero,22478 <_Unwind_RaiseException_Phase2+0x80>
   2242c:	81000417 	ldw	r4,16(r16)
   22430:	1a000617 	ldw	r8,24(r3)
   22434:	19001c26 	beq	r3,r4,224a8 <_Unwind_RaiseException_Phase2+0xb0>
   22438:	40000b26 	beq	r8,zero,22468 <_Unwind_RaiseException_Phase2+0x70>
   2243c:	01400084 	movi	r5,2
   22440:	0029883a 	mov	r20,zero
   22444:	81800017 	ldw	r6,0(r16)
   22448:	81c00117 	ldw	r7,4(r16)
   2244c:	01000044 	movi	r4,1
   22450:	dc000015 	stw	r16,0(sp)
   22454:	dc400115 	stw	r17,4(sp)
   22458:	403ee83a 	callr	r8
   2245c:	14800f26 	beq	r2,r18,2249c <_Unwind_RaiseException_Phase2+0xa4>
   22460:	14c0051e 	bne	r2,r19,22478 <_Unwind_RaiseException_Phase2+0x80>
   22464:	a0000f1e 	bne	r20,zero,224a4 <_Unwind_RaiseException_Phase2+0xac>
   22468:	88c00017 	ldw	r3,0(r17)
   2246c:	18c00017 	ldw	r3,0(r3)
   22470:	88c00015 	stw	r3,0(r17)
   22474:	183fed1e 	bne	r3,zero,2242c <__alt_data_end+0xf402242c>
   22478:	00800084 	movi	r2,2
   2247c:	dfc00717 	ldw	ra,28(sp)
   22480:	dd000617 	ldw	r20,24(sp)
   22484:	dcc00517 	ldw	r19,20(sp)
   22488:	dc800417 	ldw	r18,16(sp)
   2248c:	dc400317 	ldw	r17,12(sp)
   22490:	dc000217 	ldw	r16,8(sp)
   22494:	dec00804 	addi	sp,sp,32
   22498:	f800283a 	ret
   2249c:	9005883a 	mov	r2,r18
   224a0:	003ff606 	br	2247c <__alt_data_end+0xf402247c>
   224a4:	00228000 	call	22800 <abort>
   224a8:	403ffe26 	beq	r8,zero,224a4 <__alt_data_end+0xf40224a4>
   224ac:	01400184 	movi	r5,6
   224b0:	05000104 	movi	r20,4
   224b4:	003fe306 	br	22444 <__alt_data_end+0xf4022444>

000224b8 <uw_install_context.isra.1>:
   224b8:	20c00017 	ldw	r3,0(r4)
   224bc:	deffff04 	addi	sp,sp,-4
   224c0:	01420034 	movhi	r5,2048
   224c4:	19000917 	ldw	r4,36(r3)
   224c8:	df000015 	stw	fp,0(sp)
   224cc:	18800804 	addi	r2,r3,32
   224d0:	d839883a 	mov	fp,sp
   224d4:	29428804 	addi	r5,r5,2592
   224d8:	28c00015 	stw	r3,0(r5)
   224dc:	17000017 	ldw	fp,0(r2)
   224e0:	1ec00a17 	ldw	sp,40(r3)
   224e4:	2000683a 	jmp	r4

000224e8 <_Unwind_SjLj_Register>:
   224e8:	00820034 	movhi	r2,2048
   224ec:	10828804 	addi	r2,r2,2592
   224f0:	10c00017 	ldw	r3,0(r2)
   224f4:	11000015 	stw	r4,0(r2)
   224f8:	20c00015 	stw	r3,0(r4)
   224fc:	f800283a 	ret

00022500 <_Unwind_SjLj_Unregister>:
   22500:	20c00017 	ldw	r3,0(r4)
   22504:	00820034 	movhi	r2,2048
   22508:	10828804 	addi	r2,r2,2592
   2250c:	10c00015 	stw	r3,0(r2)
   22510:	f800283a 	ret

00022514 <_Unwind_GetGR>:
   22514:	20800017 	ldw	r2,0(r4)
   22518:	29400084 	addi	r5,r5,2
   2251c:	294b883a 	add	r5,r5,r5
   22520:	294b883a 	add	r5,r5,r5
   22524:	114b883a 	add	r5,r2,r5
   22528:	28800017 	ldw	r2,0(r5)
   2252c:	f800283a 	ret

00022530 <_Unwind_GetCFA>:
   22530:	20800017 	ldw	r2,0(r4)
   22534:	10000226 	beq	r2,zero,22540 <_Unwind_GetCFA+0x10>
   22538:	10800a17 	ldw	r2,40(r2)
   2253c:	f800283a 	ret
   22540:	0005883a 	mov	r2,zero
   22544:	f800283a 	ret

00022548 <_Unwind_SetGR>:
   22548:	20800017 	ldw	r2,0(r4)
   2254c:	29400084 	addi	r5,r5,2
   22550:	294b883a 	add	r5,r5,r5
   22554:	294b883a 	add	r5,r5,r5
   22558:	114b883a 	add	r5,r2,r5
   2255c:	29800015 	stw	r6,0(r5)
   22560:	f800283a 	ret

00022564 <_Unwind_GetIP>:
   22564:	20800017 	ldw	r2,0(r4)
   22568:	10800117 	ldw	r2,4(r2)
   2256c:	10800044 	addi	r2,r2,1
   22570:	f800283a 	ret

00022574 <_Unwind_GetIPInfo>:
   22574:	20800017 	ldw	r2,0(r4)
   22578:	28000015 	stw	zero,0(r5)
   2257c:	10000326 	beq	r2,zero,2258c <_Unwind_GetIPInfo+0x18>
   22580:	10800117 	ldw	r2,4(r2)
   22584:	10800044 	addi	r2,r2,1
   22588:	f800283a 	ret
   2258c:	0005883a 	mov	r2,zero
   22590:	f800283a 	ret

00022594 <_Unwind_SetIP>:
   22594:	20800017 	ldw	r2,0(r4)
   22598:	297fffc4 	addi	r5,r5,-1
   2259c:	11400115 	stw	r5,4(r2)
   225a0:	f800283a 	ret

000225a4 <_Unwind_GetLanguageSpecificData>:
   225a4:	20800017 	ldw	r2,0(r4)
   225a8:	10800717 	ldw	r2,28(r2)
   225ac:	f800283a 	ret

000225b0 <_Unwind_GetRegionStart>:
   225b0:	0005883a 	mov	r2,zero
   225b4:	f800283a 	ret

000225b8 <_Unwind_FindEnclosingFunction>:
   225b8:	0005883a 	mov	r2,zero
   225bc:	f800283a 	ret

000225c0 <_Unwind_GetDataRelBase>:
   225c0:	0005883a 	mov	r2,zero
   225c4:	f800283a 	ret

000225c8 <_Unwind_GetTextRelBase>:
   225c8:	0005883a 	mov	r2,zero
   225cc:	f800283a 	ret

000225d0 <_Unwind_SjLj_RaiseException>:
   225d0:	00820034 	movhi	r2,2048
   225d4:	defff804 	addi	sp,sp,-32
   225d8:	10828804 	addi	r2,r2,2592
   225dc:	dc800515 	stw	r18,20(sp)
   225e0:	14800017 	ldw	r18,0(r2)
   225e4:	dfc00715 	stw	ra,28(sp)
   225e8:	dcc00615 	stw	r19,24(sp)
   225ec:	dc400415 	stw	r17,16(sp)
   225f0:	dc000315 	stw	r16,12(sp)
   225f4:	dc800215 	stw	r18,8(sp)
   225f8:	90001426 	beq	r18,zero,2264c <_Unwind_SjLj_RaiseException+0x7c>
   225fc:	2021883a 	mov	r16,r4
   22600:	9005883a 	mov	r2,r18
   22604:	04400184 	movi	r17,6
   22608:	04c00204 	movi	r19,8
   2260c:	10800617 	ldw	r2,24(r2)
   22610:	10000a26 	beq	r2,zero,2263c <_Unwind_SjLj_RaiseException+0x6c>
   22614:	81800017 	ldw	r6,0(r16)
   22618:	81c00117 	ldw	r7,4(r16)
   2261c:	01000044 	movi	r4,1
   22620:	d8c00204 	addi	r3,sp,8
   22624:	dc000015 	stw	r16,0(sp)
   22628:	d8c00115 	stw	r3,4(sp)
   2262c:	200b883a 	mov	r5,r4
   22630:	103ee83a 	callr	r2
   22634:	14400d26 	beq	r2,r17,2266c <_Unwind_SjLj_RaiseException+0x9c>
   22638:	14c0171e 	bne	r2,r19,22698 <_Unwind_SjLj_RaiseException+0xc8>
   2263c:	d8800217 	ldw	r2,8(sp)
   22640:	10800017 	ldw	r2,0(r2)
   22644:	d8800215 	stw	r2,8(sp)
   22648:	103ff01e 	bne	r2,zero,2260c <__alt_data_end+0xf402260c>
   2264c:	00800144 	movi	r2,5
   22650:	dfc00717 	ldw	ra,28(sp)
   22654:	dcc00617 	ldw	r19,24(sp)
   22658:	dc800517 	ldw	r18,20(sp)
   2265c:	dc400417 	ldw	r17,16(sp)
   22660:	dc000317 	ldw	r16,12(sp)
   22664:	dec00804 	addi	sp,sp,32
   22668:	f800283a 	ret
   2266c:	d8800217 	ldw	r2,8(sp)
   22670:	80000315 	stw	zero,12(r16)
   22674:	8009883a 	mov	r4,r16
   22678:	80800415 	stw	r2,16(r16)
   2267c:	d9400204 	addi	r5,sp,8
   22680:	dc800215 	stw	r18,8(sp)
   22684:	00223f80 	call	223f8 <_Unwind_RaiseException_Phase2>
   22688:	00c001c4 	movi	r3,7
   2268c:	10fff01e 	bne	r2,r3,22650 <__alt_data_end+0xf4022650>
   22690:	d9000204 	addi	r4,sp,8
   22694:	00224b80 	call	224b8 <uw_install_context.isra.1>
   22698:	008000c4 	movi	r2,3
   2269c:	003fec06 	br	22650 <__alt_data_end+0xf4022650>

000226a0 <_Unwind_SjLj_ForcedUnwind>:
   226a0:	00c20034 	movhi	r3,2048
   226a4:	18c28804 	addi	r3,r3,2592
   226a8:	defffe04 	addi	sp,sp,-8
   226ac:	18c00017 	ldw	r3,0(r3)
   226b0:	dfc00115 	stw	ra,4(sp)
   226b4:	21400315 	stw	r5,12(r4)
   226b8:	21800415 	stw	r6,16(r4)
   226bc:	d80b883a 	mov	r5,sp
   226c0:	d8c00015 	stw	r3,0(sp)
   226c4:	00222e00 	call	222e0 <_Unwind_ForcedUnwind_Phase2>
   226c8:	00c001c4 	movi	r3,7
   226cc:	10c00326 	beq	r2,r3,226dc <_Unwind_SjLj_ForcedUnwind+0x3c>
   226d0:	dfc00117 	ldw	ra,4(sp)
   226d4:	dec00204 	addi	sp,sp,8
   226d8:	f800283a 	ret
   226dc:	d809883a 	mov	r4,sp
   226e0:	00224b80 	call	224b8 <uw_install_context.isra.1>

000226e4 <_Unwind_SjLj_Resume>:
   226e4:	00c20034 	movhi	r3,2048
   226e8:	18c28804 	addi	r3,r3,2592
   226ec:	18c00017 	ldw	r3,0(r3)
   226f0:	20800317 	ldw	r2,12(r4)
   226f4:	defffe04 	addi	sp,sp,-8
   226f8:	dfc00115 	stw	ra,4(sp)
   226fc:	d8c00015 	stw	r3,0(sp)
   22700:	d80b883a 	mov	r5,sp
   22704:	1000041e 	bne	r2,zero,22718 <_Unwind_SjLj_Resume+0x34>
   22708:	00223f80 	call	223f8 <_Unwind_RaiseException_Phase2>
   2270c:	00c001c4 	movi	r3,7
   22710:	10c00326 	beq	r2,r3,22720 <_Unwind_SjLj_Resume+0x3c>
   22714:	00228000 	call	22800 <abort>
   22718:	00222e00 	call	222e0 <_Unwind_ForcedUnwind_Phase2>
   2271c:	003ffb06 	br	2270c <__alt_data_end+0xf402270c>
   22720:	d809883a 	mov	r4,sp
   22724:	00224b80 	call	224b8 <uw_install_context.isra.1>

00022728 <_Unwind_SjLj_Resume_or_Rethrow>:
   22728:	20800317 	ldw	r2,12(r4)
   2272c:	defffe04 	addi	sp,sp,-8
   22730:	dfc00115 	stw	ra,4(sp)
   22734:	1000041e 	bne	r2,zero,22748 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   22738:	00225d00 	call	225d0 <_Unwind_SjLj_RaiseException>
   2273c:	dfc00117 	ldw	ra,4(sp)
   22740:	dec00204 	addi	sp,sp,8
   22744:	f800283a 	ret
   22748:	00820034 	movhi	r2,2048
   2274c:	10828804 	addi	r2,r2,2592
   22750:	10800017 	ldw	r2,0(r2)
   22754:	d80b883a 	mov	r5,sp
   22758:	d8800015 	stw	r2,0(sp)
   2275c:	00222e00 	call	222e0 <_Unwind_ForcedUnwind_Phase2>
   22760:	00c001c4 	movi	r3,7
   22764:	10c00126 	beq	r2,r3,2276c <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   22768:	00228000 	call	22800 <abort>
   2276c:	d809883a 	mov	r4,sp
   22770:	00224b80 	call	224b8 <uw_install_context.isra.1>

00022774 <_Unwind_DeleteException>:
   22774:	20800217 	ldw	r2,8(r4)
   22778:	200b883a 	mov	r5,r4
   2277c:	10000226 	beq	r2,zero,22788 <_Unwind_DeleteException+0x14>
   22780:	01000044 	movi	r4,1
   22784:	1000683a 	jmp	r2
   22788:	f800283a 	ret

0002278c <_Unwind_Backtrace>:
   2278c:	00820034 	movhi	r2,2048
   22790:	10828804 	addi	r2,r2,2592
   22794:	10800017 	ldw	r2,0(r2)
   22798:	defffc04 	addi	sp,sp,-16
   2279c:	dc400215 	stw	r17,8(sp)
   227a0:	dc000115 	stw	r16,4(sp)
   227a4:	dfc00315 	stw	ra,12(sp)
   227a8:	2023883a 	mov	r17,r4
   227ac:	2821883a 	mov	r16,r5
   227b0:	d8800015 	stw	r2,0(sp)
   227b4:	00000506 	br	227cc <_Unwind_Backtrace+0x40>
   227b8:	883ee83a 	callr	r17
   227bc:	10000e1e 	bne	r2,zero,227f8 <_Unwind_Backtrace+0x6c>
   227c0:	d8800017 	ldw	r2,0(sp)
   227c4:	10800017 	ldw	r2,0(r2)
   227c8:	d8800015 	stw	r2,0(sp)
   227cc:	d809883a 	mov	r4,sp
   227d0:	800b883a 	mov	r5,r16
   227d4:	103ff81e 	bne	r2,zero,227b8 <__alt_data_end+0xf40227b8>
   227d8:	883ee83a 	callr	r17
   227dc:	1000061e 	bne	r2,zero,227f8 <_Unwind_Backtrace+0x6c>
   227e0:	00800144 	movi	r2,5
   227e4:	dfc00317 	ldw	ra,12(sp)
   227e8:	dc400217 	ldw	r17,8(sp)
   227ec:	dc000117 	ldw	r16,4(sp)
   227f0:	dec00404 	addi	sp,sp,16
   227f4:	f800283a 	ret
   227f8:	008000c4 	movi	r2,3
   227fc:	003ff906 	br	227e4 <__alt_data_end+0xf40227e4>

00022800 <abort>:
   22800:	deffff04 	addi	sp,sp,-4
   22804:	01000184 	movi	r4,6
   22808:	dfc00015 	stw	ra,0(sp)
   2280c:	002328c0 	call	2328c <raise>
   22810:	01000044 	movi	r4,1
   22814:	00240b80 	call	240b8 <_exit>

00022818 <malloc>:
   22818:	00820034 	movhi	r2,2048
   2281c:	10827a04 	addi	r2,r2,2536
   22820:	200b883a 	mov	r5,r4
   22824:	11000017 	ldw	r4,0(r2)
   22828:	00228401 	jmpi	22840 <_malloc_r>

0002282c <free>:
   2282c:	00820034 	movhi	r2,2048
   22830:	10827a04 	addi	r2,r2,2536
   22834:	200b883a 	mov	r5,r4
   22838:	11000017 	ldw	r4,0(r2)
   2283c:	0023aac1 	jmpi	23aac <_free_r>

00022840 <_malloc_r>:
   22840:	defff604 	addi	sp,sp,-40
   22844:	dfc00915 	stw	ra,36(sp)
   22848:	df000815 	stw	fp,32(sp)
   2284c:	ddc00715 	stw	r23,28(sp)
   22850:	dd800615 	stw	r22,24(sp)
   22854:	dd400515 	stw	r21,20(sp)
   22858:	dd000415 	stw	r20,16(sp)
   2285c:	dcc00315 	stw	r19,12(sp)
   22860:	dc800215 	stw	r18,8(sp)
   22864:	dc400115 	stw	r17,4(sp)
   22868:	dc000015 	stw	r16,0(sp)
   2286c:	288002c4 	addi	r2,r5,11
   22870:	00c00584 	movi	r3,22
   22874:	1880042e 	bgeu	r3,r2,22888 <_malloc_r+0x48>
   22878:	047ffe04 	movi	r17,-8
   2287c:	1462703a 	and	r17,r2,r17
   22880:	8800020e 	bge	r17,zero,2288c <_malloc_r+0x4c>
   22884:	00000206 	br	22890 <_malloc_r+0x50>
   22888:	04400404 	movi	r17,16
   2288c:	8940032e 	bgeu	r17,r5,2289c <_malloc_r+0x5c>
   22890:	00800304 	movi	r2,12
   22894:	20800015 	stw	r2,0(r4)
   22898:	00017206 	br	22e64 <_malloc_r+0x624>
   2289c:	2027883a 	mov	r19,r4
   228a0:	00245600 	call	24560 <__malloc_lock>
   228a4:	04820034 	movhi	r18,2048
   228a8:	00807dc4 	movi	r2,503
   228ac:	9480af04 	addi	r18,r18,700
   228b0:	14401536 	bltu	r2,r17,22908 <_malloc_r+0xc8>
   228b4:	8804d0fa 	srli	r2,r17,3
   228b8:	1087883a 	add	r3,r2,r2
   228bc:	18c7883a 	add	r3,r3,r3
   228c0:	18c7883a 	add	r3,r3,r3
   228c4:	90c7883a 	add	r3,r18,r3
   228c8:	1c000317 	ldw	r16,12(r3)
   228cc:	80c0031e 	bne	r16,r3,228dc <_malloc_r+0x9c>
   228d0:	80c00204 	addi	r3,r16,8
   228d4:	84000517 	ldw	r16,20(r16)
   228d8:	80c00926 	beq	r16,r3,22900 <_malloc_r+0xc0>
   228dc:	80c00117 	ldw	r3,4(r16)
   228e0:	00bfff04 	movi	r2,-4
   228e4:	81000217 	ldw	r4,8(r16)
   228e8:	1884703a 	and	r2,r3,r2
   228ec:	80c00317 	ldw	r3,12(r16)
   228f0:	8085883a 	add	r2,r16,r2
   228f4:	20c00315 	stw	r3,12(r4)
   228f8:	19000215 	stw	r4,8(r3)
   228fc:	00002d06 	br	229b4 <_malloc_r+0x174>
   22900:	10800084 	addi	r2,r2,2
   22904:	00003506 	br	229dc <_malloc_r+0x19c>
   22908:	8804d27a 	srli	r2,r17,9
   2290c:	10001826 	beq	r2,zero,22970 <_malloc_r+0x130>
   22910:	00c00104 	movi	r3,4
   22914:	18800336 	bltu	r3,r2,22924 <_malloc_r+0xe4>
   22918:	8804d1ba 	srli	r2,r17,6
   2291c:	10800e04 	addi	r2,r2,56
   22920:	00001606 	br	2297c <_malloc_r+0x13c>
   22924:	00c00504 	movi	r3,20
   22928:	18800236 	bltu	r3,r2,22934 <_malloc_r+0xf4>
   2292c:	108016c4 	addi	r2,r2,91
   22930:	00001206 	br	2297c <_malloc_r+0x13c>
   22934:	00c01504 	movi	r3,84
   22938:	18800336 	bltu	r3,r2,22948 <_malloc_r+0x108>
   2293c:	8804d33a 	srli	r2,r17,12
   22940:	10801b84 	addi	r2,r2,110
   22944:	00000d06 	br	2297c <_malloc_r+0x13c>
   22948:	00c05504 	movi	r3,340
   2294c:	18800336 	bltu	r3,r2,2295c <_malloc_r+0x11c>
   22950:	8804d3fa 	srli	r2,r17,15
   22954:	10801dc4 	addi	r2,r2,119
   22958:	00000806 	br	2297c <_malloc_r+0x13c>
   2295c:	00c15504 	movi	r3,1364
   22960:	18800536 	bltu	r3,r2,22978 <_malloc_r+0x138>
   22964:	8804d4ba 	srli	r2,r17,18
   22968:	10801f04 	addi	r2,r2,124
   2296c:	00000306 	br	2297c <_malloc_r+0x13c>
   22970:	00800fc4 	movi	r2,63
   22974:	00000106 	br	2297c <_malloc_r+0x13c>
   22978:	00801f84 	movi	r2,126
   2297c:	1087883a 	add	r3,r2,r2
   22980:	18c7883a 	add	r3,r3,r3
   22984:	18c7883a 	add	r3,r3,r3
   22988:	90c7883a 	add	r3,r18,r3
   2298c:	1c000317 	ldw	r16,12(r3)
   22990:	01bfff04 	movi	r6,-4
   22994:	01c003c4 	movi	r7,15
   22998:	00000906 	br	229c0 <_malloc_r+0x180>
   2299c:	28000716 	blt	r5,zero,229bc <_malloc_r+0x17c>
   229a0:	80800317 	ldw	r2,12(r16)
   229a4:	80c00217 	ldw	r3,8(r16)
   229a8:	18800315 	stw	r2,12(r3)
   229ac:	10c00215 	stw	r3,8(r2)
   229b0:	8105883a 	add	r2,r16,r4
   229b4:	10c00117 	ldw	r3,4(r2)
   229b8:	00013106 	br	22e80 <_malloc_r+0x640>
   229bc:	84000317 	ldw	r16,12(r16)
   229c0:	80c00526 	beq	r16,r3,229d8 <_malloc_r+0x198>
   229c4:	81000117 	ldw	r4,4(r16)
   229c8:	2188703a 	and	r4,r4,r6
   229cc:	244bc83a 	sub	r5,r4,r17
   229d0:	397ff20e 	bge	r7,r5,2299c <__alt_data_end+0xf402299c>
   229d4:	10bfffc4 	addi	r2,r2,-1
   229d8:	10800044 	addi	r2,r2,1
   229dc:	01020034 	movhi	r4,2048
   229e0:	94000417 	ldw	r16,16(r18)
   229e4:	2100af04 	addi	r4,r4,700
   229e8:	21800204 	addi	r6,r4,8
   229ec:	81805c26 	beq	r16,r6,22b60 <_malloc_r+0x320>
   229f0:	81400117 	ldw	r5,4(r16)
   229f4:	00ffff04 	movi	r3,-4
   229f8:	01c003c4 	movi	r7,15
   229fc:	28c6703a 	and	r3,r5,r3
   22a00:	1c4bc83a 	sub	r5,r3,r17
   22a04:	3940060e 	bge	r7,r5,22a20 <_malloc_r+0x1e0>
   22a08:	88800054 	ori	r2,r17,1
   22a0c:	8447883a 	add	r3,r16,r17
   22a10:	80800115 	stw	r2,4(r16)
   22a14:	20c00515 	stw	r3,20(r4)
   22a18:	20c00415 	stw	r3,16(r4)
   22a1c:	00007706 	br	22bfc <_malloc_r+0x3bc>
   22a20:	21800515 	stw	r6,20(r4)
   22a24:	21800415 	stw	r6,16(r4)
   22a28:	28000516 	blt	r5,zero,22a40 <_malloc_r+0x200>
   22a2c:	80c7883a 	add	r3,r16,r3
   22a30:	18800117 	ldw	r2,4(r3)
   22a34:	10800054 	ori	r2,r2,1
   22a38:	18800115 	stw	r2,4(r3)
   22a3c:	00011206 	br	22e88 <_malloc_r+0x648>
   22a40:	01407fc4 	movi	r5,511
   22a44:	28c01136 	bltu	r5,r3,22a8c <_malloc_r+0x24c>
   22a48:	1806d0fa 	srli	r3,r3,3
   22a4c:	01400044 	movi	r5,1
   22a50:	180fd0ba 	srai	r7,r3,2
   22a54:	18c7883a 	add	r3,r3,r3
   22a58:	18c7883a 	add	r3,r3,r3
   22a5c:	29ce983a 	sll	r7,r5,r7
   22a60:	21400117 	ldw	r5,4(r4)
   22a64:	18c7883a 	add	r3,r3,r3
   22a68:	394ab03a 	or	r5,r7,r5
   22a6c:	21400115 	stw	r5,4(r4)
   22a70:	1909883a 	add	r4,r3,r4
   22a74:	20c00217 	ldw	r3,8(r4)
   22a78:	81000315 	stw	r4,12(r16)
   22a7c:	80c00215 	stw	r3,8(r16)
   22a80:	24000215 	stw	r16,8(r4)
   22a84:	1c000315 	stw	r16,12(r3)
   22a88:	00003506 	br	22b60 <_malloc_r+0x320>
   22a8c:	180ad27a 	srli	r5,r3,9
   22a90:	01000104 	movi	r4,4
   22a94:	21400336 	bltu	r4,r5,22aa4 <_malloc_r+0x264>
   22a98:	180ad1ba 	srli	r5,r3,6
   22a9c:	29400e04 	addi	r5,r5,56
   22aa0:	00001406 	br	22af4 <_malloc_r+0x2b4>
   22aa4:	01000504 	movi	r4,20
   22aa8:	21400236 	bltu	r4,r5,22ab4 <_malloc_r+0x274>
   22aac:	294016c4 	addi	r5,r5,91
   22ab0:	00001006 	br	22af4 <_malloc_r+0x2b4>
   22ab4:	01001504 	movi	r4,84
   22ab8:	21400336 	bltu	r4,r5,22ac8 <_malloc_r+0x288>
   22abc:	180ad33a 	srli	r5,r3,12
   22ac0:	29401b84 	addi	r5,r5,110
   22ac4:	00000b06 	br	22af4 <_malloc_r+0x2b4>
   22ac8:	01005504 	movi	r4,340
   22acc:	21400336 	bltu	r4,r5,22adc <_malloc_r+0x29c>
   22ad0:	180ad3fa 	srli	r5,r3,15
   22ad4:	29401dc4 	addi	r5,r5,119
   22ad8:	00000606 	br	22af4 <_malloc_r+0x2b4>
   22adc:	01015504 	movi	r4,1364
   22ae0:	21400336 	bltu	r4,r5,22af0 <_malloc_r+0x2b0>
   22ae4:	180ad4ba 	srli	r5,r3,18
   22ae8:	29401f04 	addi	r5,r5,124
   22aec:	00000106 	br	22af4 <_malloc_r+0x2b4>
   22af0:	01401f84 	movi	r5,126
   22af4:	2949883a 	add	r4,r5,r5
   22af8:	2109883a 	add	r4,r4,r4
   22afc:	2109883a 	add	r4,r4,r4
   22b00:	9109883a 	add	r4,r18,r4
   22b04:	21c00217 	ldw	r7,8(r4)
   22b08:	02020034 	movhi	r8,2048
   22b0c:	4200af04 	addi	r8,r8,700
   22b10:	3900081e 	bne	r7,r4,22b34 <_malloc_r+0x2f4>
   22b14:	280bd0ba 	srai	r5,r5,2
   22b18:	00c00044 	movi	r3,1
   22b1c:	194a983a 	sll	r5,r3,r5
   22b20:	40c00117 	ldw	r3,4(r8)
   22b24:	28cab03a 	or	r5,r5,r3
   22b28:	41400115 	stw	r5,4(r8)
   22b2c:	3807883a 	mov	r3,r7
   22b30:	00000706 	br	22b50 <_malloc_r+0x310>
   22b34:	023fff04 	movi	r8,-4
   22b38:	39400117 	ldw	r5,4(r7)
   22b3c:	2a0a703a 	and	r5,r5,r8
   22b40:	1940022e 	bgeu	r3,r5,22b4c <_malloc_r+0x30c>
   22b44:	39c00217 	ldw	r7,8(r7)
   22b48:	393ffb1e 	bne	r7,r4,22b38 <__alt_data_end+0xf4022b38>
   22b4c:	38c00317 	ldw	r3,12(r7)
   22b50:	80c00315 	stw	r3,12(r16)
   22b54:	81c00215 	stw	r7,8(r16)
   22b58:	1c000215 	stw	r16,8(r3)
   22b5c:	3c000315 	stw	r16,12(r7)
   22b60:	1007d0ba 	srai	r3,r2,2
   22b64:	02000044 	movi	r8,1
   22b68:	40d0983a 	sll	r8,r8,r3
   22b6c:	90c00117 	ldw	r3,4(r18)
   22b70:	1a004d36 	bltu	r3,r8,22ca8 <_malloc_r+0x468>
   22b74:	40c8703a 	and	r4,r8,r3
   22b78:	2000061e 	bne	r4,zero,22b94 <_malloc_r+0x354>
   22b7c:	013fff04 	movi	r4,-4
   22b80:	1104703a 	and	r2,r2,r4
   22b84:	4211883a 	add	r8,r8,r8
   22b88:	40c8703a 	and	r4,r8,r3
   22b8c:	10800104 	addi	r2,r2,4
   22b90:	203ffc26 	beq	r4,zero,22b84 <__alt_data_end+0xf4022b84>
   22b94:	02bfff04 	movi	r10,-4
   22b98:	02c003c4 	movi	r11,15
   22b9c:	1087883a 	add	r3,r2,r2
   22ba0:	18c7883a 	add	r3,r3,r3
   22ba4:	18c7883a 	add	r3,r3,r3
   22ba8:	90c7883a 	add	r3,r18,r3
   22bac:	19c00304 	addi	r7,r3,12
   22bb0:	1013883a 	mov	r9,r2
   22bb4:	3b3ffd04 	addi	r12,r7,-12
   22bb8:	3c000017 	ldw	r16,0(r7)
   22bbc:	00000106 	br	22bc4 <_malloc_r+0x384>
   22bc0:	84000317 	ldw	r16,12(r16)
   22bc4:	83001e26 	beq	r16,r12,22c40 <_malloc_r+0x400>
   22bc8:	81000117 	ldw	r4,4(r16)
   22bcc:	2288703a 	and	r4,r4,r10
   22bd0:	244bc83a 	sub	r5,r4,r17
   22bd4:	5940100e 	bge	r11,r5,22c18 <_malloc_r+0x3d8>
   22bd8:	88800054 	ori	r2,r17,1
   22bdc:	80800115 	stw	r2,4(r16)
   22be0:	81000217 	ldw	r4,8(r16)
   22be4:	80800317 	ldw	r2,12(r16)
   22be8:	8447883a 	add	r3,r16,r17
   22bec:	20800315 	stw	r2,12(r4)
   22bf0:	11000215 	stw	r4,8(r2)
   22bf4:	90c00515 	stw	r3,20(r18)
   22bf8:	90c00415 	stw	r3,16(r18)
   22bfc:	28800054 	ori	r2,r5,1
   22c00:	19800315 	stw	r6,12(r3)
   22c04:	19800215 	stw	r6,8(r3)
   22c08:	18800115 	stw	r2,4(r3)
   22c0c:	1947883a 	add	r3,r3,r5
   22c10:	19400015 	stw	r5,0(r3)
   22c14:	00009c06 	br	22e88 <_malloc_r+0x648>
   22c18:	283fe916 	blt	r5,zero,22bc0 <__alt_data_end+0xf4022bc0>
   22c1c:	8105883a 	add	r2,r16,r4
   22c20:	10c00117 	ldw	r3,4(r2)
   22c24:	18c00054 	ori	r3,r3,1
   22c28:	10c00115 	stw	r3,4(r2)
   22c2c:	80800317 	ldw	r2,12(r16)
   22c30:	80c00217 	ldw	r3,8(r16)
   22c34:	18800315 	stw	r2,12(r3)
   22c38:	10c00215 	stw	r3,8(r2)
   22c3c:	00009206 	br	22e88 <_malloc_r+0x648>
   22c40:	4a400044 	addi	r9,r9,1
   22c44:	490000cc 	andi	r4,r9,3
   22c48:	39c00204 	addi	r7,r7,8
   22c4c:	203fd91e 	bne	r4,zero,22bb4 <__alt_data_end+0xf4022bb4>
   22c50:	110000cc 	andi	r4,r2,3
   22c54:	2000051e 	bne	r4,zero,22c6c <_malloc_r+0x42c>
   22c58:	90c00117 	ldw	r3,4(r18)
   22c5c:	0204303a 	nor	r2,zero,r8
   22c60:	10c4703a 	and	r2,r2,r3
   22c64:	90800115 	stw	r2,4(r18)
   22c68:	00000406 	br	22c7c <_malloc_r+0x43c>
   22c6c:	193ffe04 	addi	r4,r3,-8
   22c70:	18c00017 	ldw	r3,0(r3)
   22c74:	10bfffc4 	addi	r2,r2,-1
   22c78:	193ff526 	beq	r3,r4,22c50 <__alt_data_end+0xf4022c50>
   22c7c:	90800117 	ldw	r2,4(r18)
   22c80:	4211883a 	add	r8,r8,r8
   22c84:	12000836 	bltu	r2,r8,22ca8 <_malloc_r+0x468>
   22c88:	40000726 	beq	r8,zero,22ca8 <_malloc_r+0x468>
   22c8c:	4086703a 	and	r3,r8,r2
   22c90:	1800031e 	bne	r3,zero,22ca0 <_malloc_r+0x460>
   22c94:	4a400104 	addi	r9,r9,4
   22c98:	4211883a 	add	r8,r8,r8
   22c9c:	003ffb06 	br	22c8c <__alt_data_end+0xf4022c8c>
   22ca0:	4805883a 	mov	r2,r9
   22ca4:	003fbd06 	br	22b9c <__alt_data_end+0xf4022b9c>
   22ca8:	95c00217 	ldw	r23,8(r18)
   22cac:	00bfff04 	movi	r2,-4
   22cb0:	bd400117 	ldw	r21,4(r23)
   22cb4:	a8aa703a 	and	r21,r21,r2
   22cb8:	ac400336 	bltu	r21,r17,22cc8 <_malloc_r+0x488>
   22cbc:	ac47c83a 	sub	r3,r21,r17
   22cc0:	008003c4 	movi	r2,15
   22cc4:	10c06916 	blt	r2,r3,22e6c <_malloc_r+0x62c>
   22cc8:	d0a02217 	ldw	r2,-32632(gp)
   22ccc:	d0e00e17 	ldw	r3,-32712(gp)
   22cd0:	05bfffc4 	movi	r22,-1
   22cd4:	bd61883a 	add	r16,r23,r21
   22cd8:	8885883a 	add	r2,r17,r2
   22cdc:	1d80021e 	bne	r3,r22,22ce8 <_malloc_r+0x4a8>
   22ce0:	17000404 	addi	fp,r2,16
   22ce4:	00000306 	br	22cf4 <_malloc_r+0x4b4>
   22ce8:	108023c4 	addi	r2,r2,143
   22cec:	073fe004 	movi	fp,-128
   22cf0:	1738703a 	and	fp,r2,fp
   22cf4:	9809883a 	mov	r4,r19
   22cf8:	e00b883a 	mov	r5,fp
   22cfc:	00230000 	call	23000 <_sbrk_r>
   22d00:	1029883a 	mov	r20,r2
   22d04:	15804d26 	beq	r2,r22,22e3c <_malloc_r+0x5fc>
   22d08:	1400012e 	bgeu	r2,r16,22d10 <_malloc_r+0x4d0>
   22d0c:	bc804b1e 	bne	r23,r18,22e3c <_malloc_r+0x5fc>
   22d10:	05820034 	movhi	r22,2048
   22d14:	b584d204 	addi	r22,r22,4936
   22d18:	b1000017 	ldw	r4,0(r22)
   22d1c:	e109883a 	add	r4,fp,r4
   22d20:	b1000015 	stw	r4,0(r22)
   22d24:	a400071e 	bne	r20,r16,22d44 <_malloc_r+0x504>
   22d28:	a0801fcc 	andi	r2,r20,127
   22d2c:	1000051e 	bne	r2,zero,22d44 <_malloc_r+0x504>
   22d30:	90c00217 	ldw	r3,8(r18)
   22d34:	e545883a 	add	r2,fp,r21
   22d38:	10800054 	ori	r2,r2,1
   22d3c:	18800115 	stw	r2,4(r3)
   22d40:	00003706 	br	22e20 <_malloc_r+0x5e0>
   22d44:	d0e00e17 	ldw	r3,-32712(gp)
   22d48:	00bfffc4 	movi	r2,-1
   22d4c:	1880021e 	bne	r3,r2,22d58 <_malloc_r+0x518>
   22d50:	d5200e15 	stw	r20,-32712(gp)
   22d54:	00000306 	br	22d64 <_malloc_r+0x524>
   22d58:	a407c83a 	sub	r3,r20,r16
   22d5c:	20c7883a 	add	r3,r4,r3
   22d60:	b0c00015 	stw	r3,0(r22)
   22d64:	a40001cc 	andi	r16,r20,7
   22d68:	80000426 	beq	r16,zero,22d7c <_malloc_r+0x53c>
   22d6c:	00c00204 	movi	r3,8
   22d70:	1c21c83a 	sub	r16,r3,r16
   22d74:	a429883a 	add	r20,r20,r16
   22d78:	00000106 	br	22d80 <_malloc_r+0x540>
   22d7c:	0021883a 	mov	r16,zero
   22d80:	a705883a 	add	r2,r20,fp
   22d84:	10801fcc 	andi	r2,r2,127
   22d88:	84002004 	addi	r16,r16,128
   22d8c:	80a1c83a 	sub	r16,r16,r2
   22d90:	9809883a 	mov	r4,r19
   22d94:	800b883a 	mov	r5,r16
   22d98:	00230000 	call	23000 <_sbrk_r>
   22d9c:	00ffffc4 	movi	r3,-1
   22da0:	10c0021e 	bne	r2,r3,22dac <_malloc_r+0x56c>
   22da4:	a005883a 	mov	r2,r20
   22da8:	0021883a 	mov	r16,zero
   22dac:	b0c00017 	ldw	r3,0(r22)
   22db0:	1505c83a 	sub	r2,r2,r20
   22db4:	95000215 	stw	r20,8(r18)
   22db8:	80c7883a 	add	r3,r16,r3
   22dbc:	1421883a 	add	r16,r2,r16
   22dc0:	84000054 	ori	r16,r16,1
   22dc4:	b0c00015 	stw	r3,0(r22)
   22dc8:	a4000115 	stw	r16,4(r20)
   22dcc:	bc801426 	beq	r23,r18,22e20 <_malloc_r+0x5e0>
   22dd0:	00c003c4 	movi	r3,15
   22dd4:	1d400336 	bltu	r3,r21,22de4 <_malloc_r+0x5a4>
   22dd8:	00800044 	movi	r2,1
   22ddc:	a0800115 	stw	r2,4(r20)
   22de0:	00001606 	br	22e3c <_malloc_r+0x5fc>
   22de4:	00bffe04 	movi	r2,-8
   22de8:	ad7ffd04 	addi	r21,r21,-12
   22dec:	a8aa703a 	and	r21,r21,r2
   22df0:	b8800117 	ldw	r2,4(r23)
   22df4:	01000144 	movi	r4,5
   22df8:	1080004c 	andi	r2,r2,1
   22dfc:	a884b03a 	or	r2,r21,r2
   22e00:	b8800115 	stw	r2,4(r23)
   22e04:	bd45883a 	add	r2,r23,r21
   22e08:	11000115 	stw	r4,4(r2)
   22e0c:	11000215 	stw	r4,8(r2)
   22e10:	1d40032e 	bgeu	r3,r21,22e20 <_malloc_r+0x5e0>
   22e14:	9809883a 	mov	r4,r19
   22e18:	b9400204 	addi	r5,r23,8
   22e1c:	0023aac0 	call	23aac <_free_r>
   22e20:	b0800017 	ldw	r2,0(r22)
   22e24:	d0e02117 	ldw	r3,-32636(gp)
   22e28:	1880012e 	bgeu	r3,r2,22e30 <_malloc_r+0x5f0>
   22e2c:	d0a02115 	stw	r2,-32636(gp)
   22e30:	d0e02017 	ldw	r3,-32640(gp)
   22e34:	1880012e 	bgeu	r3,r2,22e3c <_malloc_r+0x5fc>
   22e38:	d0a02015 	stw	r2,-32640(gp)
   22e3c:	90800217 	ldw	r2,8(r18)
   22e40:	10c00117 	ldw	r3,4(r2)
   22e44:	00bfff04 	movi	r2,-4
   22e48:	1884703a 	and	r2,r3,r2
   22e4c:	1447c83a 	sub	r3,r2,r17
   22e50:	14400236 	bltu	r2,r17,22e5c <_malloc_r+0x61c>
   22e54:	008003c4 	movi	r2,15
   22e58:	10c00416 	blt	r2,r3,22e6c <_malloc_r+0x62c>
   22e5c:	9809883a 	mov	r4,r19
   22e60:	00245800 	call	24580 <__malloc_unlock>
   22e64:	0005883a 	mov	r2,zero
   22e68:	00000a06 	br	22e94 <_malloc_r+0x654>
   22e6c:	94000217 	ldw	r16,8(r18)
   22e70:	88800054 	ori	r2,r17,1
   22e74:	80800115 	stw	r2,4(r16)
   22e78:	8445883a 	add	r2,r16,r17
   22e7c:	90800215 	stw	r2,8(r18)
   22e80:	18c00054 	ori	r3,r3,1
   22e84:	10c00115 	stw	r3,4(r2)
   22e88:	9809883a 	mov	r4,r19
   22e8c:	00245800 	call	24580 <__malloc_unlock>
   22e90:	80800204 	addi	r2,r16,8
   22e94:	dfc00917 	ldw	ra,36(sp)
   22e98:	df000817 	ldw	fp,32(sp)
   22e9c:	ddc00717 	ldw	r23,28(sp)
   22ea0:	dd800617 	ldw	r22,24(sp)
   22ea4:	dd400517 	ldw	r21,20(sp)
   22ea8:	dd000417 	ldw	r20,16(sp)
   22eac:	dcc00317 	ldw	r19,12(sp)
   22eb0:	dc800217 	ldw	r18,8(sp)
   22eb4:	dc400117 	ldw	r17,4(sp)
   22eb8:	dc000017 	ldw	r16,0(sp)
   22ebc:	dec00a04 	addi	sp,sp,40
   22ec0:	f800283a 	ret

00022ec4 <memset>:
   22ec4:	2005883a 	mov	r2,r4
   22ec8:	2007883a 	mov	r3,r4
   22ecc:	218d883a 	add	r6,r4,r6
   22ed0:	19800326 	beq	r3,r6,22ee0 <memset+0x1c>
   22ed4:	19400005 	stb	r5,0(r3)
   22ed8:	18c00044 	addi	r3,r3,1
   22edc:	003ffc06 	br	22ed0 <__alt_data_end+0xf4022ed0>
   22ee0:	f800283a 	ret

00022ee4 <_printf_r>:
   22ee4:	defffd04 	addi	sp,sp,-12
   22ee8:	dfc00015 	stw	ra,0(sp)
   22eec:	d9800115 	stw	r6,4(sp)
   22ef0:	d9c00215 	stw	r7,8(sp)
   22ef4:	20c00217 	ldw	r3,8(r4)
   22ef8:	280d883a 	mov	r6,r5
   22efc:	014000b4 	movhi	r5,2
   22f00:	294f4d04 	addi	r5,r5,15668
   22f04:	19400115 	stw	r5,4(r3)
   22f08:	21400217 	ldw	r5,8(r4)
   22f0c:	d9c00104 	addi	r7,sp,4
   22f10:	00233f80 	call	233f8 <___vfprintf_internal_r>
   22f14:	dfc00017 	ldw	ra,0(sp)
   22f18:	dec00304 	addi	sp,sp,12
   22f1c:	f800283a 	ret

00022f20 <printf>:
   22f20:	defffc04 	addi	sp,sp,-16
   22f24:	dfc00015 	stw	ra,0(sp)
   22f28:	d9400115 	stw	r5,4(sp)
   22f2c:	d9800215 	stw	r6,8(sp)
   22f30:	d9c00315 	stw	r7,12(sp)
   22f34:	00820034 	movhi	r2,2048
   22f38:	10827a04 	addi	r2,r2,2536
   22f3c:	10800017 	ldw	r2,0(r2)
   22f40:	200b883a 	mov	r5,r4
   22f44:	010000b4 	movhi	r4,2
   22f48:	10c00217 	ldw	r3,8(r2)
   22f4c:	210f4d04 	addi	r4,r4,15668
   22f50:	d9800104 	addi	r6,sp,4
   22f54:	19000115 	stw	r4,4(r3)
   22f58:	11000217 	ldw	r4,8(r2)
   22f5c:	00239640 	call	23964 <__vfprintf_internal>
   22f60:	dfc00017 	ldw	ra,0(sp)
   22f64:	dec00404 	addi	sp,sp,16
   22f68:	f800283a 	ret

00022f6c <_puts_r>:
   22f6c:	defffd04 	addi	sp,sp,-12
   22f70:	dc000015 	stw	r16,0(sp)
   22f74:	2021883a 	mov	r16,r4
   22f78:	2809883a 	mov	r4,r5
   22f7c:	dfc00215 	stw	ra,8(sp)
   22f80:	dc400115 	stw	r17,4(sp)
   22f84:	2823883a 	mov	r17,r5
   22f88:	00233700 	call	23370 <strlen>
   22f8c:	81400217 	ldw	r5,8(r16)
   22f90:	00c000b4 	movhi	r3,2
   22f94:	18cf4d04 	addi	r3,r3,15668
   22f98:	28c00115 	stw	r3,4(r5)
   22f9c:	8009883a 	mov	r4,r16
   22fa0:	880d883a 	mov	r6,r17
   22fa4:	100f883a 	mov	r7,r2
   22fa8:	0023d340 	call	23d34 <__sfvwrite_small_dev>
   22fac:	00ffffc4 	movi	r3,-1
   22fb0:	10c00926 	beq	r2,r3,22fd8 <_puts_r+0x6c>
   22fb4:	81400217 	ldw	r5,8(r16)
   22fb8:	01820034 	movhi	r6,2048
   22fbc:	8009883a 	mov	r4,r16
   22fc0:	28800117 	ldw	r2,4(r5)
   22fc4:	31809c04 	addi	r6,r6,624
   22fc8:	01c00044 	movi	r7,1
   22fcc:	103ee83a 	callr	r2
   22fd0:	10bfffe0 	cmpeqi	r2,r2,-1
   22fd4:	0085c83a 	sub	r2,zero,r2
   22fd8:	dfc00217 	ldw	ra,8(sp)
   22fdc:	dc400117 	ldw	r17,4(sp)
   22fe0:	dc000017 	ldw	r16,0(sp)
   22fe4:	dec00304 	addi	sp,sp,12
   22fe8:	f800283a 	ret

00022fec <puts>:
   22fec:	00820034 	movhi	r2,2048
   22ff0:	10827a04 	addi	r2,r2,2536
   22ff4:	200b883a 	mov	r5,r4
   22ff8:	11000017 	ldw	r4,0(r2)
   22ffc:	0022f6c1 	jmpi	22f6c <_puts_r>

00023000 <_sbrk_r>:
   23000:	defffd04 	addi	sp,sp,-12
   23004:	dc000015 	stw	r16,0(sp)
   23008:	04020034 	movhi	r16,2048
   2300c:	dc400115 	stw	r17,4(sp)
   23010:	84028c04 	addi	r16,r16,2608
   23014:	2023883a 	mov	r17,r4
   23018:	2809883a 	mov	r4,r5
   2301c:	dfc00215 	stw	ra,8(sp)
   23020:	80000015 	stw	zero,0(r16)
   23024:	0024a180 	call	24a18 <sbrk>
   23028:	00ffffc4 	movi	r3,-1
   2302c:	10c0031e 	bne	r2,r3,2303c <_sbrk_r+0x3c>
   23030:	80c00017 	ldw	r3,0(r16)
   23034:	18000126 	beq	r3,zero,2303c <_sbrk_r+0x3c>
   23038:	88c00015 	stw	r3,0(r17)
   2303c:	dfc00217 	ldw	ra,8(sp)
   23040:	dc400117 	ldw	r17,4(sp)
   23044:	dc000017 	ldw	r16,0(sp)
   23048:	dec00304 	addi	sp,sp,12
   2304c:	f800283a 	ret

00023050 <_init_signal_r>:
   23050:	20800b17 	ldw	r2,44(r4)
   23054:	defffe04 	addi	sp,sp,-8
   23058:	dc000015 	stw	r16,0(sp)
   2305c:	dfc00115 	stw	ra,4(sp)
   23060:	2021883a 	mov	r16,r4
   23064:	10000226 	beq	r2,zero,23070 <_init_signal_r+0x20>
   23068:	0005883a 	mov	r2,zero
   2306c:	00000d06 	br	230a4 <_init_signal_r+0x54>
   23070:	01402004 	movi	r5,128
   23074:	00228400 	call	22840 <_malloc_r>
   23078:	80800b15 	stw	r2,44(r16)
   2307c:	10000826 	beq	r2,zero,230a0 <_init_signal_r+0x50>
   23080:	0005883a 	mov	r2,zero
   23084:	01002004 	movi	r4,128
   23088:	80c00b17 	ldw	r3,44(r16)
   2308c:	1887883a 	add	r3,r3,r2
   23090:	18000015 	stw	zero,0(r3)
   23094:	10800104 	addi	r2,r2,4
   23098:	113ffb1e 	bne	r2,r4,23088 <__alt_data_end+0xf4023088>
   2309c:	003ff206 	br	23068 <__alt_data_end+0xf4023068>
   230a0:	00bfffc4 	movi	r2,-1
   230a4:	dfc00117 	ldw	ra,4(sp)
   230a8:	dc000017 	ldw	r16,0(sp)
   230ac:	dec00204 	addi	sp,sp,8
   230b0:	f800283a 	ret

000230b4 <_signal_r>:
   230b4:	defffc04 	addi	sp,sp,-16
   230b8:	dc400115 	stw	r17,4(sp)
   230bc:	dfc00315 	stw	ra,12(sp)
   230c0:	dc800215 	stw	r18,8(sp)
   230c4:	dc000015 	stw	r16,0(sp)
   230c8:	008007c4 	movi	r2,31
   230cc:	2023883a 	mov	r17,r4
   230d0:	1140032e 	bgeu	r2,r5,230e0 <_signal_r+0x2c>
   230d4:	00800584 	movi	r2,22
   230d8:	20800015 	stw	r2,0(r4)
   230dc:	00000d06 	br	23114 <_signal_r+0x60>
   230e0:	20800b17 	ldw	r2,44(r4)
   230e4:	3025883a 	mov	r18,r6
   230e8:	2821883a 	mov	r16,r5
   230ec:	10000726 	beq	r2,zero,2310c <_signal_r+0x58>
   230f0:	88800b17 	ldw	r2,44(r17)
   230f4:	8421883a 	add	r16,r16,r16
   230f8:	8421883a 	add	r16,r16,r16
   230fc:	1421883a 	add	r16,r2,r16
   23100:	80800017 	ldw	r2,0(r16)
   23104:	84800015 	stw	r18,0(r16)
   23108:	00000306 	br	23118 <_signal_r+0x64>
   2310c:	00230500 	call	23050 <_init_signal_r>
   23110:	103ff726 	beq	r2,zero,230f0 <__alt_data_end+0xf40230f0>
   23114:	00bfffc4 	movi	r2,-1
   23118:	dfc00317 	ldw	ra,12(sp)
   2311c:	dc800217 	ldw	r18,8(sp)
   23120:	dc400117 	ldw	r17,4(sp)
   23124:	dc000017 	ldw	r16,0(sp)
   23128:	dec00404 	addi	sp,sp,16
   2312c:	f800283a 	ret

00023130 <_raise_r>:
   23130:	008007c4 	movi	r2,31
   23134:	1140042e 	bgeu	r2,r5,23148 <_raise_r+0x18>
   23138:	00800584 	movi	r2,22
   2313c:	20800015 	stw	r2,0(r4)
   23140:	00bfffc4 	movi	r2,-1
   23144:	f800283a 	ret
   23148:	20c00b17 	ldw	r3,44(r4)
   2314c:	defffd04 	addi	sp,sp,-12
   23150:	dc400115 	stw	r17,4(sp)
   23154:	dc000015 	stw	r16,0(sp)
   23158:	dfc00215 	stw	ra,8(sp)
   2315c:	2821883a 	mov	r16,r5
   23160:	2023883a 	mov	r17,r4
   23164:	18000526 	beq	r3,zero,2317c <_raise_r+0x4c>
   23168:	2945883a 	add	r2,r5,r5
   2316c:	1085883a 	add	r2,r2,r2
   23170:	1887883a 	add	r3,r3,r2
   23174:	19400017 	ldw	r5,0(r3)
   23178:	28000a1e 	bne	r5,zero,231a4 <_raise_r+0x74>
   2317c:	8809883a 	mov	r4,r17
   23180:	00233340 	call	23334 <_getpid_r>
   23184:	8809883a 	mov	r4,r17
   23188:	100b883a 	mov	r5,r2
   2318c:	800d883a 	mov	r6,r16
   23190:	dfc00217 	ldw	ra,8(sp)
   23194:	dc400117 	ldw	r17,4(sp)
   23198:	dc000017 	ldw	r16,0(sp)
   2319c:	dec00304 	addi	sp,sp,12
   231a0:	00232e01 	jmpi	232e0 <_kill_r>
   231a4:	00800044 	movi	r2,1
   231a8:	28800826 	beq	r5,r2,231cc <_raise_r+0x9c>
   231ac:	013fffc4 	movi	r4,-1
   231b0:	2900031e 	bne	r5,r4,231c0 <_raise_r+0x90>
   231b4:	00c00584 	movi	r3,22
   231b8:	88c00015 	stw	r3,0(r17)
   231bc:	00000406 	br	231d0 <_raise_r+0xa0>
   231c0:	18000015 	stw	zero,0(r3)
   231c4:	8009883a 	mov	r4,r16
   231c8:	283ee83a 	callr	r5
   231cc:	0005883a 	mov	r2,zero
   231d0:	dfc00217 	ldw	ra,8(sp)
   231d4:	dc400117 	ldw	r17,4(sp)
   231d8:	dc000017 	ldw	r16,0(sp)
   231dc:	dec00304 	addi	sp,sp,12
   231e0:	f800283a 	ret

000231e4 <__sigtramp_r>:
   231e4:	008007c4 	movi	r2,31
   231e8:	11402636 	bltu	r2,r5,23284 <__sigtramp_r+0xa0>
   231ec:	20800b17 	ldw	r2,44(r4)
   231f0:	defffd04 	addi	sp,sp,-12
   231f4:	dc400115 	stw	r17,4(sp)
   231f8:	dc000015 	stw	r16,0(sp)
   231fc:	dfc00215 	stw	ra,8(sp)
   23200:	2023883a 	mov	r17,r4
   23204:	2821883a 	mov	r16,r5
   23208:	10000726 	beq	r2,zero,23228 <__sigtramp_r+0x44>
   2320c:	88c00b17 	ldw	r3,44(r17)
   23210:	8405883a 	add	r2,r16,r16
   23214:	1085883a 	add	r2,r2,r2
   23218:	1885883a 	add	r2,r3,r2
   2321c:	10c00017 	ldw	r3,0(r2)
   23220:	1800051e 	bne	r3,zero,23238 <__sigtramp_r+0x54>
   23224:	00000d06 	br	2325c <__sigtramp_r+0x78>
   23228:	00230500 	call	23050 <_init_signal_r>
   2322c:	103ff726 	beq	r2,zero,2320c <__alt_data_end+0xf402320c>
   23230:	00bfffc4 	movi	r2,-1
   23234:	00000e06 	br	23270 <__sigtramp_r+0x8c>
   23238:	013fffc4 	movi	r4,-1
   2323c:	19000926 	beq	r3,r4,23264 <__sigtramp_r+0x80>
   23240:	01000044 	movi	r4,1
   23244:	19000926 	beq	r3,r4,2326c <__sigtramp_r+0x88>
   23248:	10000015 	stw	zero,0(r2)
   2324c:	8009883a 	mov	r4,r16
   23250:	183ee83a 	callr	r3
   23254:	0005883a 	mov	r2,zero
   23258:	00000506 	br	23270 <__sigtramp_r+0x8c>
   2325c:	00800044 	movi	r2,1
   23260:	00000306 	br	23270 <__sigtramp_r+0x8c>
   23264:	00800084 	movi	r2,2
   23268:	00000106 	br	23270 <__sigtramp_r+0x8c>
   2326c:	008000c4 	movi	r2,3
   23270:	dfc00217 	ldw	ra,8(sp)
   23274:	dc400117 	ldw	r17,4(sp)
   23278:	dc000017 	ldw	r16,0(sp)
   2327c:	dec00304 	addi	sp,sp,12
   23280:	f800283a 	ret
   23284:	00bfffc4 	movi	r2,-1
   23288:	f800283a 	ret

0002328c <raise>:
   2328c:	00820034 	movhi	r2,2048
   23290:	10827a04 	addi	r2,r2,2536
   23294:	200b883a 	mov	r5,r4
   23298:	11000017 	ldw	r4,0(r2)
   2329c:	00231301 	jmpi	23130 <_raise_r>

000232a0 <signal>:
   232a0:	00c20034 	movhi	r3,2048
   232a4:	18c27a04 	addi	r3,r3,2536
   232a8:	2005883a 	mov	r2,r4
   232ac:	19000017 	ldw	r4,0(r3)
   232b0:	280d883a 	mov	r6,r5
   232b4:	100b883a 	mov	r5,r2
   232b8:	00230b41 	jmpi	230b4 <_signal_r>

000232bc <_init_signal>:
   232bc:	00820034 	movhi	r2,2048
   232c0:	10827a04 	addi	r2,r2,2536
   232c4:	11000017 	ldw	r4,0(r2)
   232c8:	00230501 	jmpi	23050 <_init_signal_r>

000232cc <__sigtramp>:
   232cc:	00820034 	movhi	r2,2048
   232d0:	10827a04 	addi	r2,r2,2536
   232d4:	200b883a 	mov	r5,r4
   232d8:	11000017 	ldw	r4,0(r2)
   232dc:	00231e41 	jmpi	231e4 <__sigtramp_r>

000232e0 <_kill_r>:
   232e0:	defffd04 	addi	sp,sp,-12
   232e4:	dc000015 	stw	r16,0(sp)
   232e8:	04020034 	movhi	r16,2048
   232ec:	dc400115 	stw	r17,4(sp)
   232f0:	84028c04 	addi	r16,r16,2608
   232f4:	2023883a 	mov	r17,r4
   232f8:	2809883a 	mov	r4,r5
   232fc:	300b883a 	mov	r5,r6
   23300:	dfc00215 	stw	ra,8(sp)
   23304:	80000015 	stw	zero,0(r16)
   23308:	00242d40 	call	242d4 <kill>
   2330c:	00ffffc4 	movi	r3,-1
   23310:	10c0031e 	bne	r2,r3,23320 <_kill_r+0x40>
   23314:	80c00017 	ldw	r3,0(r16)
   23318:	18000126 	beq	r3,zero,23320 <_kill_r+0x40>
   2331c:	88c00015 	stw	r3,0(r17)
   23320:	dfc00217 	ldw	ra,8(sp)
   23324:	dc400117 	ldw	r17,4(sp)
   23328:	dc000017 	ldw	r16,0(sp)
   2332c:	dec00304 	addi	sp,sp,12
   23330:	f800283a 	ret

00023334 <_getpid_r>:
   23334:	00242641 	jmpi	24264 <getpid>

00023338 <strcmp>:
   23338:	20800003 	ldbu	r2,0(r4)
   2333c:	10c03fcc 	andi	r3,r2,255
   23340:	18c0201c 	xori	r3,r3,128
   23344:	18ffe004 	addi	r3,r3,-128
   23348:	18000526 	beq	r3,zero,23360 <strcmp+0x28>
   2334c:	29800007 	ldb	r6,0(r5)
   23350:	1980031e 	bne	r3,r6,23360 <strcmp+0x28>
   23354:	21000044 	addi	r4,r4,1
   23358:	29400044 	addi	r5,r5,1
   2335c:	003ff606 	br	23338 <__alt_data_end+0xf4023338>
   23360:	28c00003 	ldbu	r3,0(r5)
   23364:	10803fcc 	andi	r2,r2,255
   23368:	10c5c83a 	sub	r2,r2,r3
   2336c:	f800283a 	ret

00023370 <strlen>:
   23370:	2005883a 	mov	r2,r4
   23374:	10c00007 	ldb	r3,0(r2)
   23378:	18000226 	beq	r3,zero,23384 <strlen+0x14>
   2337c:	10800044 	addi	r2,r2,1
   23380:	003ffc06 	br	23374 <__alt_data_end+0xf4023374>
   23384:	1105c83a 	sub	r2,r2,r4
   23388:	f800283a 	ret

0002338c <print_repeat>:
   2338c:	defffb04 	addi	sp,sp,-20
   23390:	dc800315 	stw	r18,12(sp)
   23394:	dc400215 	stw	r17,8(sp)
   23398:	dc000115 	stw	r16,4(sp)
   2339c:	dfc00415 	stw	ra,16(sp)
   233a0:	2025883a 	mov	r18,r4
   233a4:	2823883a 	mov	r17,r5
   233a8:	d9800005 	stb	r6,0(sp)
   233ac:	3821883a 	mov	r16,r7
   233b0:	04000a0e 	bge	zero,r16,233dc <print_repeat+0x50>
   233b4:	88800117 	ldw	r2,4(r17)
   233b8:	9009883a 	mov	r4,r18
   233bc:	880b883a 	mov	r5,r17
   233c0:	d80d883a 	mov	r6,sp
   233c4:	01c00044 	movi	r7,1
   233c8:	103ee83a 	callr	r2
   233cc:	843fffc4 	addi	r16,r16,-1
   233d0:	103ff726 	beq	r2,zero,233b0 <__alt_data_end+0xf40233b0>
   233d4:	00bfffc4 	movi	r2,-1
   233d8:	00000106 	br	233e0 <print_repeat+0x54>
   233dc:	0005883a 	mov	r2,zero
   233e0:	dfc00417 	ldw	ra,16(sp)
   233e4:	dc800317 	ldw	r18,12(sp)
   233e8:	dc400217 	ldw	r17,8(sp)
   233ec:	dc000117 	ldw	r16,4(sp)
   233f0:	dec00504 	addi	sp,sp,20
   233f4:	f800283a 	ret

000233f8 <___vfprintf_internal_r>:
   233f8:	deffe304 	addi	sp,sp,-116
   233fc:	d8c00804 	addi	r3,sp,32
   23400:	df001b15 	stw	fp,108(sp)
   23404:	ddc01a15 	stw	r23,104(sp)
   23408:	dd801915 	stw	r22,100(sp)
   2340c:	dd401815 	stw	r21,96(sp)
   23410:	dd001715 	stw	r20,92(sp)
   23414:	dcc01615 	stw	r19,88(sp)
   23418:	dc801515 	stw	r18,84(sp)
   2341c:	dc401415 	stw	r17,80(sp)
   23420:	dc001315 	stw	r16,76(sp)
   23424:	dfc01c15 	stw	ra,112(sp)
   23428:	2029883a 	mov	r20,r4
   2342c:	2823883a 	mov	r17,r5
   23430:	3839883a 	mov	fp,r7
   23434:	d9800f15 	stw	r6,60(sp)
   23438:	0021883a 	mov	r16,zero
   2343c:	d8000e15 	stw	zero,56(sp)
   23440:	002f883a 	mov	r23,zero
   23444:	002b883a 	mov	r21,zero
   23448:	0027883a 	mov	r19,zero
   2344c:	0025883a 	mov	r18,zero
   23450:	d8000c15 	stw	zero,48(sp)
   23454:	d8000b15 	stw	zero,44(sp)
   23458:	002d883a 	mov	r22,zero
   2345c:	d8c00915 	stw	r3,36(sp)
   23460:	d8c00f17 	ldw	r3,60(sp)
   23464:	19000003 	ldbu	r4,0(r3)
   23468:	20803fcc 	andi	r2,r4,255
   2346c:	1080201c 	xori	r2,r2,128
   23470:	10bfe004 	addi	r2,r2,-128
   23474:	10012e26 	beq	r2,zero,23930 <___vfprintf_internal_r+0x538>
   23478:	01400044 	movi	r5,1
   2347c:	b1401426 	beq	r22,r5,234d0 <___vfprintf_internal_r+0xd8>
   23480:	2d800216 	blt	r5,r22,2348c <___vfprintf_internal_r+0x94>
   23484:	b0000626 	beq	r22,zero,234a0 <___vfprintf_internal_r+0xa8>
   23488:	00012506 	br	23920 <___vfprintf_internal_r+0x528>
   2348c:	01400084 	movi	r5,2
   23490:	b1401d26 	beq	r22,r5,23508 <___vfprintf_internal_r+0x110>
   23494:	014000c4 	movi	r5,3
   23498:	b1402b26 	beq	r22,r5,23548 <___vfprintf_internal_r+0x150>
   2349c:	00012006 	br	23920 <___vfprintf_internal_r+0x528>
   234a0:	01400944 	movi	r5,37
   234a4:	11410d26 	beq	r2,r5,238dc <___vfprintf_internal_r+0x4e4>
   234a8:	88800117 	ldw	r2,4(r17)
   234ac:	d9000005 	stb	r4,0(sp)
   234b0:	880b883a 	mov	r5,r17
   234b4:	a009883a 	mov	r4,r20
   234b8:	d80d883a 	mov	r6,sp
   234bc:	01c00044 	movi	r7,1
   234c0:	103ee83a 	callr	r2
   234c4:	1000e81e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   234c8:	84000044 	addi	r16,r16,1
   234cc:	00011406 	br	23920 <___vfprintf_internal_r+0x528>
   234d0:	01400c04 	movi	r5,48
   234d4:	11410a26 	beq	r2,r5,23900 <___vfprintf_internal_r+0x508>
   234d8:	01400944 	movi	r5,37
   234dc:	11400a1e 	bne	r2,r5,23508 <___vfprintf_internal_r+0x110>
   234e0:	d8800005 	stb	r2,0(sp)
   234e4:	88800117 	ldw	r2,4(r17)
   234e8:	a009883a 	mov	r4,r20
   234ec:	880b883a 	mov	r5,r17
   234f0:	d80d883a 	mov	r6,sp
   234f4:	b00f883a 	mov	r7,r22
   234f8:	103ee83a 	callr	r2
   234fc:	1000da1e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   23500:	84000044 	addi	r16,r16,1
   23504:	00010506 	br	2391c <___vfprintf_internal_r+0x524>
   23508:	25bff404 	addi	r22,r4,-48
   2350c:	b5803fcc 	andi	r22,r22,255
   23510:	00c00244 	movi	r3,9
   23514:	1d800936 	bltu	r3,r22,2353c <___vfprintf_internal_r+0x144>
   23518:	00bfffc4 	movi	r2,-1
   2351c:	90800426 	beq	r18,r2,23530 <___vfprintf_internal_r+0x138>
   23520:	9009883a 	mov	r4,r18
   23524:	01400284 	movi	r5,10
   23528:	00222b80 	call	222b8 <__mulsi3>
   2352c:	00000106 	br	23534 <___vfprintf_internal_r+0x13c>
   23530:	0005883a 	mov	r2,zero
   23534:	15a5883a 	add	r18,r2,r22
   23538:	0000f206 	br	23904 <___vfprintf_internal_r+0x50c>
   2353c:	01400b84 	movi	r5,46
   23540:	1140f426 	beq	r2,r5,23914 <___vfprintf_internal_r+0x51c>
   23544:	05800084 	movi	r22,2
   23548:	213ff404 	addi	r4,r4,-48
   2354c:	20c03fcc 	andi	r3,r4,255
   23550:	01000244 	movi	r4,9
   23554:	20c00b36 	bltu	r4,r3,23584 <___vfprintf_internal_r+0x18c>
   23558:	00bfffc4 	movi	r2,-1
   2355c:	98800626 	beq	r19,r2,23578 <___vfprintf_internal_r+0x180>
   23560:	9809883a 	mov	r4,r19
   23564:	01400284 	movi	r5,10
   23568:	d8c01115 	stw	r3,68(sp)
   2356c:	00222b80 	call	222b8 <__mulsi3>
   23570:	d8c01117 	ldw	r3,68(sp)
   23574:	00000106 	br	2357c <___vfprintf_internal_r+0x184>
   23578:	0005883a 	mov	r2,zero
   2357c:	10e7883a 	add	r19,r2,r3
   23580:	0000e706 	br	23920 <___vfprintf_internal_r+0x528>
   23584:	01401b04 	movi	r5,108
   23588:	1140e026 	beq	r2,r5,2390c <___vfprintf_internal_r+0x514>
   2358c:	013fffc4 	movi	r4,-1
   23590:	99000226 	beq	r19,r4,2359c <___vfprintf_internal_r+0x1a4>
   23594:	d8000b15 	stw	zero,44(sp)
   23598:	00000106 	br	235a0 <___vfprintf_internal_r+0x1a8>
   2359c:	04c00044 	movi	r19,1
   235a0:	01001a44 	movi	r4,105
   235a4:	11001626 	beq	r2,r4,23600 <___vfprintf_internal_r+0x208>
   235a8:	20800916 	blt	r4,r2,235d0 <___vfprintf_internal_r+0x1d8>
   235ac:	010018c4 	movi	r4,99
   235b0:	11009626 	beq	r2,r4,2380c <___vfprintf_internal_r+0x414>
   235b4:	01001904 	movi	r4,100
   235b8:	11001126 	beq	r2,r4,23600 <___vfprintf_internal_r+0x208>
   235bc:	01001604 	movi	r4,88
   235c0:	1100d61e 	bne	r2,r4,2391c <___vfprintf_internal_r+0x524>
   235c4:	00c00044 	movi	r3,1
   235c8:	d8c00e15 	stw	r3,56(sp)
   235cc:	00001406 	br	23620 <___vfprintf_internal_r+0x228>
   235d0:	01001cc4 	movi	r4,115
   235d4:	1100a626 	beq	r2,r4,23870 <___vfprintf_internal_r+0x478>
   235d8:	20800416 	blt	r4,r2,235ec <___vfprintf_internal_r+0x1f4>
   235dc:	01001bc4 	movi	r4,111
   235e0:	1100ce1e 	bne	r2,r4,2391c <___vfprintf_internal_r+0x524>
   235e4:	05400204 	movi	r21,8
   235e8:	00000e06 	br	23624 <___vfprintf_internal_r+0x22c>
   235ec:	01001d44 	movi	r4,117
   235f0:	11000c26 	beq	r2,r4,23624 <___vfprintf_internal_r+0x22c>
   235f4:	01001e04 	movi	r4,120
   235f8:	11000926 	beq	r2,r4,23620 <___vfprintf_internal_r+0x228>
   235fc:	0000c706 	br	2391c <___vfprintf_internal_r+0x524>
   23600:	e0800104 	addi	r2,fp,4
   23604:	b8000726 	beq	r23,zero,23624 <___vfprintf_internal_r+0x22c>
   23608:	d8800d15 	stw	r2,52(sp)
   2360c:	e7000017 	ldw	fp,0(fp)
   23610:	e000080e 	bge	fp,zero,23634 <___vfprintf_internal_r+0x23c>
   23614:	0739c83a 	sub	fp,zero,fp
   23618:	02000044 	movi	r8,1
   2361c:	00000606 	br	23638 <___vfprintf_internal_r+0x240>
   23620:	05400404 	movi	r21,16
   23624:	e0c00104 	addi	r3,fp,4
   23628:	d8c00d15 	stw	r3,52(sp)
   2362c:	e7000017 	ldw	fp,0(fp)
   23630:	002f883a 	mov	r23,zero
   23634:	0011883a 	mov	r8,zero
   23638:	002d883a 	mov	r22,zero
   2363c:	dd87883a 	add	r3,sp,r22
   23640:	e0001a26 	beq	fp,zero,236ac <___vfprintf_internal_r+0x2b4>
   23644:	e009883a 	mov	r4,fp
   23648:	a80b883a 	mov	r5,r21
   2364c:	d8c01115 	stw	r3,68(sp)
   23650:	da001215 	stw	r8,72(sp)
   23654:	0023f540 	call	23f54 <__udivsi3>
   23658:	a809883a 	mov	r4,r21
   2365c:	100b883a 	mov	r5,r2
   23660:	d8801015 	stw	r2,64(sp)
   23664:	00222b80 	call	222b8 <__mulsi3>
   23668:	e085c83a 	sub	r2,fp,r2
   2366c:	01000244 	movi	r4,9
   23670:	d8c01117 	ldw	r3,68(sp)
   23674:	d9801017 	ldw	r6,64(sp)
   23678:	da001217 	ldw	r8,72(sp)
   2367c:	20800216 	blt	r4,r2,23688 <___vfprintf_internal_r+0x290>
   23680:	17000c04 	addi	fp,r2,48
   23684:	00000506 	br	2369c <___vfprintf_internal_r+0x2a4>
   23688:	d9400e17 	ldw	r5,56(sp)
   2368c:	28000226 	beq	r5,zero,23698 <___vfprintf_internal_r+0x2a0>
   23690:	17000dc4 	addi	fp,r2,55
   23694:	00000106 	br	2369c <___vfprintf_internal_r+0x2a4>
   23698:	170015c4 	addi	fp,r2,87
   2369c:	1f000005 	stb	fp,0(r3)
   236a0:	b5800044 	addi	r22,r22,1
   236a4:	3039883a 	mov	fp,r6
   236a8:	003fe406 	br	2363c <__alt_data_end+0xf402363c>
   236ac:	1ec5c83a 	sub	r2,r3,sp
   236b0:	d8800a15 	stw	r2,40(sp)
   236b4:	9885c83a 	sub	r2,r19,r2
   236b8:	1839883a 	mov	fp,r3
   236bc:	00800e0e 	bge	zero,r2,236f8 <___vfprintf_internal_r+0x300>
   236c0:	182d883a 	mov	r22,r3
   236c4:	1885883a 	add	r2,r3,r2
   236c8:	01000c04 	movi	r4,48
   236cc:	d9400917 	ldw	r5,36(sp)
   236d0:	b007883a 	mov	r3,r22
   236d4:	b140052e 	bgeu	r22,r5,236ec <___vfprintf_internal_r+0x2f4>
   236d8:	b5800044 	addi	r22,r22,1
   236dc:	19000005 	stb	r4,0(r3)
   236e0:	b039883a 	mov	fp,r22
   236e4:	b0bff91e 	bne	r22,r2,236cc <__alt_data_end+0xf40236cc>
   236e8:	00000106 	br	236f0 <___vfprintf_internal_r+0x2f8>
   236ec:	b039883a 	mov	fp,r22
   236f0:	b6edc83a 	sub	r22,r22,sp
   236f4:	dd800a15 	stw	r22,40(sp)
   236f8:	d8800a17 	ldw	r2,40(sp)
   236fc:	1207883a 	add	r3,r2,r8
   23700:	90edc83a 	sub	r22,r18,r3
   23704:	d8c00b17 	ldw	r3,44(sp)
   23708:	18001726 	beq	r3,zero,23768 <___vfprintf_internal_r+0x370>
   2370c:	40000a26 	beq	r8,zero,23738 <___vfprintf_internal_r+0x340>
   23710:	00800b44 	movi	r2,45
   23714:	d8800805 	stb	r2,32(sp)
   23718:	88800117 	ldw	r2,4(r17)
   2371c:	a009883a 	mov	r4,r20
   23720:	880b883a 	mov	r5,r17
   23724:	d9800804 	addi	r6,sp,32
   23728:	01c00044 	movi	r7,1
   2372c:	103ee83a 	callr	r2
   23730:	10004d1e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   23734:	84000044 	addi	r16,r16,1
   23738:	0580070e 	bge	zero,r22,23758 <___vfprintf_internal_r+0x360>
   2373c:	a009883a 	mov	r4,r20
   23740:	880b883a 	mov	r5,r17
   23744:	01800c04 	movi	r6,48
   23748:	b00f883a 	mov	r7,r22
   2374c:	002338c0 	call	2338c <print_repeat>
   23750:	1000451e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   23754:	85a1883a 	add	r16,r16,r22
   23758:	d9000a17 	ldw	r4,40(sp)
   2375c:	e007883a 	mov	r3,fp
   23760:	272dc83a 	sub	r22,r4,fp
   23764:	00002206 	br	237f0 <___vfprintf_internal_r+0x3f8>
   23768:	0580090e 	bge	zero,r22,23790 <___vfprintf_internal_r+0x398>
   2376c:	a009883a 	mov	r4,r20
   23770:	880b883a 	mov	r5,r17
   23774:	01800804 	movi	r6,32
   23778:	b00f883a 	mov	r7,r22
   2377c:	da001215 	stw	r8,72(sp)
   23780:	002338c0 	call	2338c <print_repeat>
   23784:	da001217 	ldw	r8,72(sp)
   23788:	1000371e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   2378c:	85a1883a 	add	r16,r16,r22
   23790:	403ff126 	beq	r8,zero,23758 <__alt_data_end+0xf4023758>
   23794:	00800b44 	movi	r2,45
   23798:	d8800805 	stb	r2,32(sp)
   2379c:	88800117 	ldw	r2,4(r17)
   237a0:	a009883a 	mov	r4,r20
   237a4:	880b883a 	mov	r5,r17
   237a8:	d9800804 	addi	r6,sp,32
   237ac:	01c00044 	movi	r7,1
   237b0:	103ee83a 	callr	r2
   237b4:	10002c1e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   237b8:	84000044 	addi	r16,r16,1
   237bc:	003fe606 	br	23758 <__alt_data_end+0xf4023758>
   237c0:	18ffffc4 	addi	r3,r3,-1
   237c4:	18800003 	ldbu	r2,0(r3)
   237c8:	a009883a 	mov	r4,r20
   237cc:	d8c01115 	stw	r3,68(sp)
   237d0:	d8800805 	stb	r2,32(sp)
   237d4:	88800117 	ldw	r2,4(r17)
   237d8:	880b883a 	mov	r5,r17
   237dc:	d9800804 	addi	r6,sp,32
   237e0:	01c00044 	movi	r7,1
   237e4:	103ee83a 	callr	r2
   237e8:	d8c01117 	ldw	r3,68(sp)
   237ec:	10001e1e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   237f0:	80c5c83a 	sub	r2,r16,r3
   237f4:	1d89883a 	add	r4,r3,r22
   237f8:	e085883a 	add	r2,fp,r2
   237fc:	013ff016 	blt	zero,r4,237c0 <__alt_data_end+0xf40237c0>
   23800:	1021883a 	mov	r16,r2
   23804:	df000d17 	ldw	fp,52(sp)
   23808:	00004406 	br	2391c <___vfprintf_internal_r+0x524>
   2380c:	01000044 	movi	r4,1
   23810:	2480080e 	bge	r4,r18,23834 <___vfprintf_internal_r+0x43c>
   23814:	95bfffc4 	addi	r22,r18,-1
   23818:	a009883a 	mov	r4,r20
   2381c:	880b883a 	mov	r5,r17
   23820:	01800804 	movi	r6,32
   23824:	b00f883a 	mov	r7,r22
   23828:	002338c0 	call	2338c <print_repeat>
   2382c:	10000e1e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   23830:	85a1883a 	add	r16,r16,r22
   23834:	e0800017 	ldw	r2,0(fp)
   23838:	a009883a 	mov	r4,r20
   2383c:	880b883a 	mov	r5,r17
   23840:	d8800005 	stb	r2,0(sp)
   23844:	88800117 	ldw	r2,4(r17)
   23848:	d80d883a 	mov	r6,sp
   2384c:	01c00044 	movi	r7,1
   23850:	e5800104 	addi	r22,fp,4
   23854:	103ee83a 	callr	r2
   23858:	1000031e 	bne	r2,zero,23868 <___vfprintf_internal_r+0x470>
   2385c:	84000044 	addi	r16,r16,1
   23860:	b039883a 	mov	fp,r22
   23864:	00002d06 	br	2391c <___vfprintf_internal_r+0x524>
   23868:	00bfffc4 	movi	r2,-1
   2386c:	00003106 	br	23934 <___vfprintf_internal_r+0x53c>
   23870:	e5800017 	ldw	r22,0(fp)
   23874:	e0c00104 	addi	r3,fp,4
   23878:	d8c00a15 	stw	r3,40(sp)
   2387c:	b009883a 	mov	r4,r22
   23880:	00233700 	call	23370 <strlen>
   23884:	9091c83a 	sub	r8,r18,r2
   23888:	1039883a 	mov	fp,r2
   2388c:	0200090e 	bge	zero,r8,238b4 <___vfprintf_internal_r+0x4bc>
   23890:	400f883a 	mov	r7,r8
   23894:	a009883a 	mov	r4,r20
   23898:	880b883a 	mov	r5,r17
   2389c:	01800804 	movi	r6,32
   238a0:	da001215 	stw	r8,72(sp)
   238a4:	002338c0 	call	2338c <print_repeat>
   238a8:	da001217 	ldw	r8,72(sp)
   238ac:	103fee1e 	bne	r2,zero,23868 <__alt_data_end+0xf4023868>
   238b0:	8221883a 	add	r16,r16,r8
   238b4:	88800117 	ldw	r2,4(r17)
   238b8:	a009883a 	mov	r4,r20
   238bc:	880b883a 	mov	r5,r17
   238c0:	b00d883a 	mov	r6,r22
   238c4:	e00f883a 	mov	r7,fp
   238c8:	103ee83a 	callr	r2
   238cc:	103fe61e 	bne	r2,zero,23868 <__alt_data_end+0xf4023868>
   238d0:	8721883a 	add	r16,r16,fp
   238d4:	df000a17 	ldw	fp,40(sp)
   238d8:	00001006 	br	2391c <___vfprintf_internal_r+0x524>
   238dc:	05c00044 	movi	r23,1
   238e0:	04ffffc4 	movi	r19,-1
   238e4:	d8000e15 	stw	zero,56(sp)
   238e8:	05400284 	movi	r21,10
   238ec:	9825883a 	mov	r18,r19
   238f0:	d8000c15 	stw	zero,48(sp)
   238f4:	d8000b15 	stw	zero,44(sp)
   238f8:	b82d883a 	mov	r22,r23
   238fc:	00000806 	br	23920 <___vfprintf_internal_r+0x528>
   23900:	dd800b15 	stw	r22,44(sp)
   23904:	05800084 	movi	r22,2
   23908:	00000506 	br	23920 <___vfprintf_internal_r+0x528>
   2390c:	00c00044 	movi	r3,1
   23910:	d8c00c15 	stw	r3,48(sp)
   23914:	058000c4 	movi	r22,3
   23918:	00000106 	br	23920 <___vfprintf_internal_r+0x528>
   2391c:	002d883a 	mov	r22,zero
   23920:	d8c00f17 	ldw	r3,60(sp)
   23924:	18c00044 	addi	r3,r3,1
   23928:	d8c00f15 	stw	r3,60(sp)
   2392c:	003ecc06 	br	23460 <__alt_data_end+0xf4023460>
   23930:	8005883a 	mov	r2,r16
   23934:	dfc01c17 	ldw	ra,112(sp)
   23938:	df001b17 	ldw	fp,108(sp)
   2393c:	ddc01a17 	ldw	r23,104(sp)
   23940:	dd801917 	ldw	r22,100(sp)
   23944:	dd401817 	ldw	r21,96(sp)
   23948:	dd001717 	ldw	r20,92(sp)
   2394c:	dcc01617 	ldw	r19,88(sp)
   23950:	dc801517 	ldw	r18,84(sp)
   23954:	dc401417 	ldw	r17,80(sp)
   23958:	dc001317 	ldw	r16,76(sp)
   2395c:	dec01d04 	addi	sp,sp,116
   23960:	f800283a 	ret

00023964 <__vfprintf_internal>:
   23964:	2007883a 	mov	r3,r4
   23968:	01020034 	movhi	r4,2048
   2396c:	21027a04 	addi	r4,r4,2536
   23970:	21000017 	ldw	r4,0(r4)
   23974:	2805883a 	mov	r2,r5
   23978:	300f883a 	mov	r7,r6
   2397c:	180b883a 	mov	r5,r3
   23980:	100d883a 	mov	r6,r2
   23984:	00233f81 	jmpi	233f8 <___vfprintf_internal_r>

00023988 <_malloc_trim_r>:
   23988:	defffb04 	addi	sp,sp,-20
   2398c:	dcc00315 	stw	r19,12(sp)
   23990:	04c20034 	movhi	r19,2048
   23994:	dc800215 	stw	r18,8(sp)
   23998:	dc400115 	stw	r17,4(sp)
   2399c:	dc000015 	stw	r16,0(sp)
   239a0:	dfc00415 	stw	ra,16(sp)
   239a4:	2821883a 	mov	r16,r5
   239a8:	2025883a 	mov	r18,r4
   239ac:	9cc0af04 	addi	r19,r19,700
   239b0:	00245600 	call	24560 <__malloc_lock>
   239b4:	98800217 	ldw	r2,8(r19)
   239b8:	14400117 	ldw	r17,4(r2)
   239bc:	00bfff04 	movi	r2,-4
   239c0:	88a2703a 	and	r17,r17,r2
   239c4:	8c21c83a 	sub	r16,r17,r16
   239c8:	84001bc4 	addi	r16,r16,111
   239cc:	8020d1fa 	srli	r16,r16,7
   239d0:	00801fc4 	movi	r2,127
   239d4:	843fffc4 	addi	r16,r16,-1
   239d8:	802091fa 	slli	r16,r16,7
   239dc:	14000416 	blt	r2,r16,239f0 <_malloc_trim_r+0x68>
   239e0:	9009883a 	mov	r4,r18
   239e4:	00245800 	call	24580 <__malloc_unlock>
   239e8:	0005883a 	mov	r2,zero
   239ec:	00002806 	br	23a90 <_malloc_trim_r+0x108>
   239f0:	9009883a 	mov	r4,r18
   239f4:	000b883a 	mov	r5,zero
   239f8:	00230000 	call	23000 <_sbrk_r>
   239fc:	98c00217 	ldw	r3,8(r19)
   23a00:	1c47883a 	add	r3,r3,r17
   23a04:	10fff61e 	bne	r2,r3,239e0 <__alt_data_end+0xf40239e0>
   23a08:	9009883a 	mov	r4,r18
   23a0c:	040bc83a 	sub	r5,zero,r16
   23a10:	00230000 	call	23000 <_sbrk_r>
   23a14:	00ffffc4 	movi	r3,-1
   23a18:	10c0111e 	bne	r2,r3,23a60 <_malloc_trim_r+0xd8>
   23a1c:	9009883a 	mov	r4,r18
   23a20:	000b883a 	mov	r5,zero
   23a24:	00230000 	call	23000 <_sbrk_r>
   23a28:	99000217 	ldw	r4,8(r19)
   23a2c:	014003c4 	movi	r5,15
   23a30:	1107c83a 	sub	r3,r2,r4
   23a34:	28ffea0e 	bge	r5,r3,239e0 <__alt_data_end+0xf40239e0>
   23a38:	01420034 	movhi	r5,2048
   23a3c:	29427704 	addi	r5,r5,2524
   23a40:	29400017 	ldw	r5,0(r5)
   23a44:	18c00054 	ori	r3,r3,1
   23a48:	20c00115 	stw	r3,4(r4)
   23a4c:	1145c83a 	sub	r2,r2,r5
   23a50:	01420034 	movhi	r5,2048
   23a54:	2944d204 	addi	r5,r5,4936
   23a58:	28800015 	stw	r2,0(r5)
   23a5c:	003fe006 	br	239e0 <__alt_data_end+0xf40239e0>
   23a60:	98800217 	ldw	r2,8(r19)
   23a64:	8c23c83a 	sub	r17,r17,r16
   23a68:	00c20034 	movhi	r3,2048
   23a6c:	18c4d204 	addi	r3,r3,4936
   23a70:	8c400054 	ori	r17,r17,1
   23a74:	14400115 	stw	r17,4(r2)
   23a78:	18800017 	ldw	r2,0(r3)
   23a7c:	9009883a 	mov	r4,r18
   23a80:	1421c83a 	sub	r16,r2,r16
   23a84:	1c000015 	stw	r16,0(r3)
   23a88:	00245800 	call	24580 <__malloc_unlock>
   23a8c:	00800044 	movi	r2,1
   23a90:	dfc00417 	ldw	ra,16(sp)
   23a94:	dcc00317 	ldw	r19,12(sp)
   23a98:	dc800217 	ldw	r18,8(sp)
   23a9c:	dc400117 	ldw	r17,4(sp)
   23aa0:	dc000017 	ldw	r16,0(sp)
   23aa4:	dec00504 	addi	sp,sp,20
   23aa8:	f800283a 	ret

00023aac <_free_r>:
   23aac:	2800a026 	beq	r5,zero,23d30 <_free_r+0x284>
   23ab0:	defffd04 	addi	sp,sp,-12
   23ab4:	dc400115 	stw	r17,4(sp)
   23ab8:	dc000015 	stw	r16,0(sp)
   23abc:	2823883a 	mov	r17,r5
   23ac0:	2021883a 	mov	r16,r4
   23ac4:	dfc00215 	stw	ra,8(sp)
   23ac8:	00245600 	call	24560 <__malloc_lock>
   23acc:	8a3fff17 	ldw	r8,-4(r17)
   23ad0:	00bfff84 	movi	r2,-2
   23ad4:	893ffe04 	addi	r4,r17,-8
   23ad8:	4084703a 	and	r2,r8,r2
   23adc:	208d883a 	add	r6,r4,r2
   23ae0:	31400117 	ldw	r5,4(r6)
   23ae4:	00ffff04 	movi	r3,-4
   23ae8:	28c6703a 	and	r3,r5,r3
   23aec:	01420034 	movhi	r5,2048
   23af0:	2940af04 	addi	r5,r5,700
   23af4:	2a400217 	ldw	r9,8(r5)
   23af8:	280f883a 	mov	r7,r5
   23afc:	4140004c 	andi	r5,r8,1
   23b00:	32401b1e 	bne	r6,r9,23b70 <_free_r+0xc4>
   23b04:	1885883a 	add	r2,r3,r2
   23b08:	2800071e 	bne	r5,zero,23b28 <_free_r+0x7c>
   23b0c:	88fffe17 	ldw	r3,-8(r17)
   23b10:	20c9c83a 	sub	r4,r4,r3
   23b14:	21400217 	ldw	r5,8(r4)
   23b18:	10c5883a 	add	r2,r2,r3
   23b1c:	20c00317 	ldw	r3,12(r4)
   23b20:	28c00315 	stw	r3,12(r5)
   23b24:	19400215 	stw	r5,8(r3)
   23b28:	10c00054 	ori	r3,r2,1
   23b2c:	20c00115 	stw	r3,4(r4)
   23b30:	00c20034 	movhi	r3,2048
   23b34:	18c27804 	addi	r3,r3,2528
   23b38:	18c00017 	ldw	r3,0(r3)
   23b3c:	39000215 	stw	r4,8(r7)
   23b40:	10c00536 	bltu	r2,r3,23b58 <_free_r+0xac>
   23b44:	00820034 	movhi	r2,2048
   23b48:	10828b04 	addi	r2,r2,2604
   23b4c:	11400017 	ldw	r5,0(r2)
   23b50:	8009883a 	mov	r4,r16
   23b54:	00239880 	call	23988 <_malloc_trim_r>
   23b58:	8009883a 	mov	r4,r16
   23b5c:	dfc00217 	ldw	ra,8(sp)
   23b60:	dc400117 	ldw	r17,4(sp)
   23b64:	dc000017 	ldw	r16,0(sp)
   23b68:	dec00304 	addi	sp,sp,12
   23b6c:	00245801 	jmpi	24580 <__malloc_unlock>
   23b70:	30c00115 	stw	r3,4(r6)
   23b74:	2800091e 	bne	r5,zero,23b9c <_free_r+0xf0>
   23b78:	897ffe17 	ldw	r5,-8(r17)
   23b7c:	3a000204 	addi	r8,r7,8
   23b80:	2149c83a 	sub	r4,r4,r5
   23b84:	1145883a 	add	r2,r2,r5
   23b88:	21400217 	ldw	r5,8(r4)
   23b8c:	2a000526 	beq	r5,r8,23ba4 <_free_r+0xf8>
   23b90:	22000317 	ldw	r8,12(r4)
   23b94:	2a000315 	stw	r8,12(r5)
   23b98:	41400215 	stw	r5,8(r8)
   23b9c:	000b883a 	mov	r5,zero
   23ba0:	00000106 	br	23ba8 <_free_r+0xfc>
   23ba4:	01400044 	movi	r5,1
   23ba8:	30d1883a 	add	r8,r6,r3
   23bac:	42000117 	ldw	r8,4(r8)
   23bb0:	4200004c 	andi	r8,r8,1
   23bb4:	4000101e 	bne	r8,zero,23bf8 <_free_r+0x14c>
   23bb8:	10c5883a 	add	r2,r2,r3
   23bbc:	28000a1e 	bne	r5,zero,23be8 <_free_r+0x13c>
   23bc0:	30c00217 	ldw	r3,8(r6)
   23bc4:	02020034 	movhi	r8,2048
   23bc8:	4200b104 	addi	r8,r8,708
   23bcc:	1a00061e 	bne	r3,r8,23be8 <_free_r+0x13c>
   23bd0:	39000515 	stw	r4,20(r7)
   23bd4:	39000415 	stw	r4,16(r7)
   23bd8:	20c00315 	stw	r3,12(r4)
   23bdc:	20c00215 	stw	r3,8(r4)
   23be0:	01400044 	movi	r5,1
   23be4:	00000406 	br	23bf8 <_free_r+0x14c>
   23be8:	30c00317 	ldw	r3,12(r6)
   23bec:	31800217 	ldw	r6,8(r6)
   23bf0:	30c00315 	stw	r3,12(r6)
   23bf4:	19800215 	stw	r6,8(r3)
   23bf8:	10c00054 	ori	r3,r2,1
   23bfc:	20c00115 	stw	r3,4(r4)
   23c00:	2087883a 	add	r3,r4,r2
   23c04:	18800015 	stw	r2,0(r3)
   23c08:	283fd31e 	bne	r5,zero,23b58 <__alt_data_end+0xf4023b58>
   23c0c:	00c07fc4 	movi	r3,511
   23c10:	18801036 	bltu	r3,r2,23c54 <_free_r+0x1a8>
   23c14:	1006d0fa 	srli	r3,r2,3
   23c18:	00800044 	movi	r2,1
   23c1c:	180bd0ba 	srai	r5,r3,2
   23c20:	18c7883a 	add	r3,r3,r3
   23c24:	18c7883a 	add	r3,r3,r3
   23c28:	114a983a 	sll	r5,r2,r5
   23c2c:	38800117 	ldw	r2,4(r7)
   23c30:	18c7883a 	add	r3,r3,r3
   23c34:	2884b03a 	or	r2,r5,r2
   23c38:	38800115 	stw	r2,4(r7)
   23c3c:	38c5883a 	add	r2,r7,r3
   23c40:	10c00217 	ldw	r3,8(r2)
   23c44:	20800315 	stw	r2,12(r4)
   23c48:	20c00215 	stw	r3,8(r4)
   23c4c:	11000215 	stw	r4,8(r2)
   23c50:	00003506 	br	23d28 <_free_r+0x27c>
   23c54:	1006d27a 	srli	r3,r2,9
   23c58:	01400104 	movi	r5,4
   23c5c:	28c00336 	bltu	r5,r3,23c6c <_free_r+0x1c0>
   23c60:	1006d1ba 	srli	r3,r2,6
   23c64:	18c00e04 	addi	r3,r3,56
   23c68:	00001406 	br	23cbc <_free_r+0x210>
   23c6c:	01400504 	movi	r5,20
   23c70:	28c00236 	bltu	r5,r3,23c7c <_free_r+0x1d0>
   23c74:	18c016c4 	addi	r3,r3,91
   23c78:	00001006 	br	23cbc <_free_r+0x210>
   23c7c:	01401504 	movi	r5,84
   23c80:	28c00336 	bltu	r5,r3,23c90 <_free_r+0x1e4>
   23c84:	1006d33a 	srli	r3,r2,12
   23c88:	18c01b84 	addi	r3,r3,110
   23c8c:	00000b06 	br	23cbc <_free_r+0x210>
   23c90:	01405504 	movi	r5,340
   23c94:	28c00336 	bltu	r5,r3,23ca4 <_free_r+0x1f8>
   23c98:	1006d3fa 	srli	r3,r2,15
   23c9c:	18c01dc4 	addi	r3,r3,119
   23ca0:	00000606 	br	23cbc <_free_r+0x210>
   23ca4:	01415504 	movi	r5,1364
   23ca8:	28c00336 	bltu	r5,r3,23cb8 <_free_r+0x20c>
   23cac:	1006d4ba 	srli	r3,r2,18
   23cb0:	18c01f04 	addi	r3,r3,124
   23cb4:	00000106 	br	23cbc <_free_r+0x210>
   23cb8:	00c01f84 	movi	r3,126
   23cbc:	18cd883a 	add	r6,r3,r3
   23cc0:	318d883a 	add	r6,r6,r6
   23cc4:	318d883a 	add	r6,r6,r6
   23cc8:	398b883a 	add	r5,r7,r6
   23ccc:	29800217 	ldw	r6,8(r5)
   23cd0:	02020034 	movhi	r8,2048
   23cd4:	4200af04 	addi	r8,r8,700
   23cd8:	3140081e 	bne	r6,r5,23cfc <_free_r+0x250>
   23cdc:	1807d0ba 	srai	r3,r3,2
   23ce0:	00800044 	movi	r2,1
   23ce4:	10c6983a 	sll	r3,r2,r3
   23ce8:	40800117 	ldw	r2,4(r8)
   23cec:	1886b03a 	or	r3,r3,r2
   23cf0:	40c00115 	stw	r3,4(r8)
   23cf4:	3007883a 	mov	r3,r6
   23cf8:	00000806 	br	23d1c <_free_r+0x270>
   23cfc:	3007883a 	mov	r3,r6
   23d00:	01ffff04 	movi	r7,-4
   23d04:	19800117 	ldw	r6,4(r3)
   23d08:	31cc703a 	and	r6,r6,r7
   23d0c:	1180022e 	bgeu	r2,r6,23d18 <_free_r+0x26c>
   23d10:	18c00217 	ldw	r3,8(r3)
   23d14:	197ffb1e 	bne	r3,r5,23d04 <__alt_data_end+0xf4023d04>
   23d18:	19800317 	ldw	r6,12(r3)
   23d1c:	21800315 	stw	r6,12(r4)
   23d20:	20c00215 	stw	r3,8(r4)
   23d24:	31000215 	stw	r4,8(r6)
   23d28:	19000315 	stw	r4,12(r3)
   23d2c:	003f8a06 	br	23b58 <__alt_data_end+0xf4023b58>
   23d30:	f800283a 	ret

00023d34 <__sfvwrite_small_dev>:
   23d34:	2880000b 	ldhu	r2,0(r5)
   23d38:	defffa04 	addi	sp,sp,-24
   23d3c:	dc000015 	stw	r16,0(sp)
   23d40:	dfc00515 	stw	ra,20(sp)
   23d44:	dd000415 	stw	r20,16(sp)
   23d48:	dcc00315 	stw	r19,12(sp)
   23d4c:	dc800215 	stw	r18,8(sp)
   23d50:	dc400115 	stw	r17,4(sp)
   23d54:	1080020c 	andi	r2,r2,8
   23d58:	2821883a 	mov	r16,r5
   23d5c:	10001726 	beq	r2,zero,23dbc <__sfvwrite_small_dev+0x88>
   23d60:	2880008f 	ldh	r2,2(r5)
   23d64:	10001216 	blt	r2,zero,23db0 <__sfvwrite_small_dev+0x7c>
   23d68:	2027883a 	mov	r19,r4
   23d6c:	3025883a 	mov	r18,r6
   23d70:	3823883a 	mov	r17,r7
   23d74:	05010004 	movi	r20,1024
   23d78:	04400b0e 	bge	zero,r17,23da8 <__sfvwrite_small_dev+0x74>
   23d7c:	8140008f 	ldh	r5,2(r16)
   23d80:	880f883a 	mov	r7,r17
   23d84:	a440010e 	bge	r20,r17,23d8c <__sfvwrite_small_dev+0x58>
   23d88:	01c10004 	movi	r7,1024
   23d8c:	9809883a 	mov	r4,r19
   23d90:	900d883a 	mov	r6,r18
   23d94:	0023de00 	call	23de0 <_write_r>
   23d98:	0080050e 	bge	zero,r2,23db0 <__sfvwrite_small_dev+0x7c>
   23d9c:	88a3c83a 	sub	r17,r17,r2
   23da0:	90a5883a 	add	r18,r18,r2
   23da4:	003ff406 	br	23d78 <__alt_data_end+0xf4023d78>
   23da8:	0005883a 	mov	r2,zero
   23dac:	00000406 	br	23dc0 <__sfvwrite_small_dev+0x8c>
   23db0:	8080000b 	ldhu	r2,0(r16)
   23db4:	10801014 	ori	r2,r2,64
   23db8:	8080000d 	sth	r2,0(r16)
   23dbc:	00bfffc4 	movi	r2,-1
   23dc0:	dfc00517 	ldw	ra,20(sp)
   23dc4:	dd000417 	ldw	r20,16(sp)
   23dc8:	dcc00317 	ldw	r19,12(sp)
   23dcc:	dc800217 	ldw	r18,8(sp)
   23dd0:	dc400117 	ldw	r17,4(sp)
   23dd4:	dc000017 	ldw	r16,0(sp)
   23dd8:	dec00604 	addi	sp,sp,24
   23ddc:	f800283a 	ret

00023de0 <_write_r>:
   23de0:	defffd04 	addi	sp,sp,-12
   23de4:	dc000015 	stw	r16,0(sp)
   23de8:	04020034 	movhi	r16,2048
   23dec:	dc400115 	stw	r17,4(sp)
   23df0:	84028c04 	addi	r16,r16,2608
   23df4:	2023883a 	mov	r17,r4
   23df8:	2809883a 	mov	r4,r5
   23dfc:	300b883a 	mov	r5,r6
   23e00:	380d883a 	mov	r6,r7
   23e04:	dfc00215 	stw	ra,8(sp)
   23e08:	80000015 	stw	zero,0(r16)
   23e0c:	0024ce40 	call	24ce4 <write>
   23e10:	00ffffc4 	movi	r3,-1
   23e14:	10c0031e 	bne	r2,r3,23e24 <_write_r+0x44>
   23e18:	80c00017 	ldw	r3,0(r16)
   23e1c:	18000126 	beq	r3,zero,23e24 <_write_r+0x44>
   23e20:	88c00015 	stw	r3,0(r17)
   23e24:	dfc00217 	ldw	ra,8(sp)
   23e28:	dc400117 	ldw	r17,4(sp)
   23e2c:	dc000017 	ldw	r16,0(sp)
   23e30:	dec00304 	addi	sp,sp,12
   23e34:	f800283a 	ret

00023e38 <udivmodsi4>:
   23e38:	2900182e 	bgeu	r5,r4,23e9c <udivmodsi4+0x64>
   23e3c:	28001716 	blt	r5,zero,23e9c <udivmodsi4+0x64>
   23e40:	00800804 	movi	r2,32
   23e44:	00c00044 	movi	r3,1
   23e48:	00000206 	br	23e54 <udivmodsi4+0x1c>
   23e4c:	10001126 	beq	r2,zero,23e94 <udivmodsi4+0x5c>
   23e50:	28000516 	blt	r5,zero,23e68 <udivmodsi4+0x30>
   23e54:	294b883a 	add	r5,r5,r5
   23e58:	10bfffc4 	addi	r2,r2,-1
   23e5c:	18c7883a 	add	r3,r3,r3
   23e60:	293ffa36 	bltu	r5,r4,23e4c <__alt_data_end+0xf4023e4c>
   23e64:	18000b26 	beq	r3,zero,23e94 <udivmodsi4+0x5c>
   23e68:	0005883a 	mov	r2,zero
   23e6c:	21400236 	bltu	r4,r5,23e78 <udivmodsi4+0x40>
   23e70:	2149c83a 	sub	r4,r4,r5
   23e74:	10c4b03a 	or	r2,r2,r3
   23e78:	1806d07a 	srli	r3,r3,1
   23e7c:	280ad07a 	srli	r5,r5,1
   23e80:	183ffa1e 	bne	r3,zero,23e6c <__alt_data_end+0xf4023e6c>
   23e84:	3000011e 	bne	r6,zero,23e8c <udivmodsi4+0x54>
   23e88:	f800283a 	ret
   23e8c:	2005883a 	mov	r2,r4
   23e90:	f800283a 	ret
   23e94:	0005883a 	mov	r2,zero
   23e98:	003ffa06 	br	23e84 <__alt_data_end+0xf4023e84>
   23e9c:	00c00044 	movi	r3,1
   23ea0:	003ff106 	br	23e68 <__alt_data_end+0xf4023e68>

00023ea4 <__divsi3>:
   23ea4:	defffe04 	addi	sp,sp,-8
   23ea8:	dfc00115 	stw	ra,4(sp)
   23eac:	dc000015 	stw	r16,0(sp)
   23eb0:	20000b16 	blt	r4,zero,23ee0 <__divsi3+0x3c>
   23eb4:	0021883a 	mov	r16,zero
   23eb8:	28000c16 	blt	r5,zero,23eec <__divsi3+0x48>
   23ebc:	000d883a 	mov	r6,zero
   23ec0:	0023e380 	call	23e38 <udivmodsi4>
   23ec4:	0407c83a 	sub	r3,zero,r16
   23ec8:	1884f03a 	xor	r2,r3,r2
   23ecc:	1405883a 	add	r2,r2,r16
   23ed0:	dfc00117 	ldw	ra,4(sp)
   23ed4:	dc000017 	ldw	r16,0(sp)
   23ed8:	dec00204 	addi	sp,sp,8
   23edc:	f800283a 	ret
   23ee0:	0109c83a 	sub	r4,zero,r4
   23ee4:	04000044 	movi	r16,1
   23ee8:	283ff40e 	bge	r5,zero,23ebc <__alt_data_end+0xf4023ebc>
   23eec:	014bc83a 	sub	r5,zero,r5
   23ef0:	8400005c 	xori	r16,r16,1
   23ef4:	003ff106 	br	23ebc <__alt_data_end+0xf4023ebc>

00023ef8 <__modsi3>:
   23ef8:	defffd04 	addi	sp,sp,-12
   23efc:	dfc00215 	stw	ra,8(sp)
   23f00:	dc400115 	stw	r17,4(sp)
   23f04:	dc000015 	stw	r16,0(sp)
   23f08:	20000c16 	blt	r4,zero,23f3c <__modsi3+0x44>
   23f0c:	0023883a 	mov	r17,zero
   23f10:	0021883a 	mov	r16,zero
   23f14:	28000d16 	blt	r5,zero,23f4c <__modsi3+0x54>
   23f18:	01800044 	movi	r6,1
   23f1c:	0023e380 	call	23e38 <udivmodsi4>
   23f20:	1404f03a 	xor	r2,r2,r16
   23f24:	8885883a 	add	r2,r17,r2
   23f28:	dfc00217 	ldw	ra,8(sp)
   23f2c:	dc400117 	ldw	r17,4(sp)
   23f30:	dc000017 	ldw	r16,0(sp)
   23f34:	dec00304 	addi	sp,sp,12
   23f38:	f800283a 	ret
   23f3c:	0109c83a 	sub	r4,zero,r4
   23f40:	04400044 	movi	r17,1
   23f44:	043fffc4 	movi	r16,-1
   23f48:	283ff30e 	bge	r5,zero,23f18 <__alt_data_end+0xf4023f18>
   23f4c:	014bc83a 	sub	r5,zero,r5
   23f50:	003ff106 	br	23f18 <__alt_data_end+0xf4023f18>

00023f54 <__udivsi3>:
   23f54:	000d883a 	mov	r6,zero
   23f58:	0023e381 	jmpi	23e38 <udivmodsi4>

00023f5c <__umodsi3>:
   23f5c:	01800044 	movi	r6,1
   23f60:	0023e381 	jmpi	23e38 <udivmodsi4>

00023f64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23f64:	defffe04 	addi	sp,sp,-8
   23f68:	dfc00115 	stw	ra,4(sp)
   23f6c:	df000015 	stw	fp,0(sp)
   23f70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23f74:	00820034 	movhi	r2,2048
   23f78:	10828004 	addi	r2,r2,2560
   23f7c:	10800017 	ldw	r2,0(r2)
   23f80:	10000526 	beq	r2,zero,23f98 <alt_get_errno+0x34>
   23f84:	00820034 	movhi	r2,2048
   23f88:	10828004 	addi	r2,r2,2560
   23f8c:	10800017 	ldw	r2,0(r2)
   23f90:	103ee83a 	callr	r2
   23f94:	00000206 	br	23fa0 <alt_get_errno+0x3c>
   23f98:	00820034 	movhi	r2,2048
   23f9c:	10828c04 	addi	r2,r2,2608
}
   23fa0:	e037883a 	mov	sp,fp
   23fa4:	dfc00117 	ldw	ra,4(sp)
   23fa8:	df000017 	ldw	fp,0(sp)
   23fac:	dec00204 	addi	sp,sp,8
   23fb0:	f800283a 	ret

00023fb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23fb4:	defffb04 	addi	sp,sp,-20
   23fb8:	dfc00415 	stw	ra,16(sp)
   23fbc:	df000315 	stw	fp,12(sp)
   23fc0:	df000304 	addi	fp,sp,12
   23fc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23fc8:	e0bfff17 	ldw	r2,-4(fp)
   23fcc:	10000816 	blt	r2,zero,23ff0 <close+0x3c>
   23fd0:	e13fff17 	ldw	r4,-4(fp)
   23fd4:	01400304 	movi	r5,12
   23fd8:	00222b80 	call	222b8 <__mulsi3>
   23fdc:	1007883a 	mov	r3,r2
   23fe0:	00820034 	movhi	r2,2048
   23fe4:	1081f304 	addi	r2,r2,1996
   23fe8:	1885883a 	add	r2,r3,r2
   23fec:	00000106 	br	23ff4 <close+0x40>
   23ff0:	0005883a 	mov	r2,zero
   23ff4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   23ff8:	e0bffd17 	ldw	r2,-12(fp)
   23ffc:	10001926 	beq	r2,zero,24064 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   24000:	e0bffd17 	ldw	r2,-12(fp)
   24004:	10800017 	ldw	r2,0(r2)
   24008:	10800417 	ldw	r2,16(r2)
   2400c:	10000626 	beq	r2,zero,24028 <close+0x74>
   24010:	e0bffd17 	ldw	r2,-12(fp)
   24014:	10800017 	ldw	r2,0(r2)
   24018:	10800417 	ldw	r2,16(r2)
   2401c:	e13ffd17 	ldw	r4,-12(fp)
   24020:	103ee83a 	callr	r2
   24024:	00000106 	br	2402c <close+0x78>
   24028:	0005883a 	mov	r2,zero
   2402c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24030:	e13fff17 	ldw	r4,-4(fp)
   24034:	00249980 	call	24998 <alt_release_fd>
    if (rval < 0)
   24038:	e0bffe17 	ldw	r2,-8(fp)
   2403c:	1000070e 	bge	r2,zero,2405c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   24040:	0023f640 	call	23f64 <alt_get_errno>
   24044:	1007883a 	mov	r3,r2
   24048:	e0bffe17 	ldw	r2,-8(fp)
   2404c:	0085c83a 	sub	r2,zero,r2
   24050:	18800015 	stw	r2,0(r3)
      return -1;
   24054:	00bfffc4 	movi	r2,-1
   24058:	00000706 	br	24078 <close+0xc4>
    }
    return 0;
   2405c:	0005883a 	mov	r2,zero
   24060:	00000506 	br	24078 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24064:	0023f640 	call	23f64 <alt_get_errno>
   24068:	1007883a 	mov	r3,r2
   2406c:	00801444 	movi	r2,81
   24070:	18800015 	stw	r2,0(r3)
    return -1;
   24074:	00bfffc4 	movi	r2,-1
  }
}
   24078:	e037883a 	mov	sp,fp
   2407c:	dfc00117 	ldw	ra,4(sp)
   24080:	df000017 	ldw	fp,0(sp)
   24084:	dec00204 	addi	sp,sp,8
   24088:	f800283a 	ret

0002408c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2408c:	defffc04 	addi	sp,sp,-16
   24090:	df000315 	stw	fp,12(sp)
   24094:	df000304 	addi	fp,sp,12
   24098:	e13ffd15 	stw	r4,-12(fp)
   2409c:	e17ffe15 	stw	r5,-8(fp)
   240a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   240a4:	e0bfff17 	ldw	r2,-4(fp)
}
   240a8:	e037883a 	mov	sp,fp
   240ac:	df000017 	ldw	fp,0(sp)
   240b0:	dec00104 	addi	sp,sp,4
   240b4:	f800283a 	ret

000240b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   240b8:	defffd04 	addi	sp,sp,-12
   240bc:	df000215 	stw	fp,8(sp)
   240c0:	df000204 	addi	fp,sp,8
   240c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   240c8:	0001883a 	nop
   240cc:	e0bfff17 	ldw	r2,-4(fp)
   240d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   240d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   240d8:	10000226 	beq	r2,zero,240e4 <_exit+0x2c>
    ALT_SIM_FAIL();
   240dc:	002af070 	cmpltui	zero,zero,43969
   240e0:	00000106 	br	240e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   240e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   240e8:	003fff06 	br	240e8 <__alt_data_end+0xf40240e8>

000240ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   240ec:	defffe04 	addi	sp,sp,-8
   240f0:	dfc00115 	stw	ra,4(sp)
   240f4:	df000015 	stw	fp,0(sp)
   240f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   240fc:	00820034 	movhi	r2,2048
   24100:	10828004 	addi	r2,r2,2560
   24104:	10800017 	ldw	r2,0(r2)
   24108:	10000526 	beq	r2,zero,24120 <alt_get_errno+0x34>
   2410c:	00820034 	movhi	r2,2048
   24110:	10828004 	addi	r2,r2,2560
   24114:	10800017 	ldw	r2,0(r2)
   24118:	103ee83a 	callr	r2
   2411c:	00000206 	br	24128 <alt_get_errno+0x3c>
   24120:	00820034 	movhi	r2,2048
   24124:	10828c04 	addi	r2,r2,2608
}
   24128:	e037883a 	mov	sp,fp
   2412c:	dfc00117 	ldw	ra,4(sp)
   24130:	df000017 	ldw	fp,0(sp)
   24134:	dec00204 	addi	sp,sp,8
   24138:	f800283a 	ret

0002413c <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   2413c:	defff704 	addi	sp,sp,-36
   24140:	dfc00615 	stw	ra,24(sp)
   24144:	df000515 	stw	fp,20(sp)
   24148:	df000504 	addi	fp,sp,20
   2414c:	e13ffe15 	stw	r4,-8(fp)
   24150:	e1800215 	stw	r6,8(fp)
   24154:	e1c00315 	stw	r7,12(fp)
   24158:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2415c:	e0bffe17 	ldw	r2,-8(fp)
   24160:	10000816 	blt	r2,zero,24184 <fcntl+0x48>
   24164:	e13ffe17 	ldw	r4,-8(fp)
   24168:	01400304 	movi	r5,12
   2416c:	00222b80 	call	222b8 <__mulsi3>
   24170:	1007883a 	mov	r3,r2
   24174:	00820034 	movhi	r2,2048
   24178:	1081f304 	addi	r2,r2,1996
   2417c:	1885883a 	add	r2,r3,r2
   24180:	00000106 	br	24188 <fcntl+0x4c>
   24184:	0005883a 	mov	r2,zero
   24188:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2418c:	e0bffb17 	ldw	r2,-20(fp)
   24190:	10002a26 	beq	r2,zero,2423c <fcntl+0x100>
  {
    switch (cmd)
   24194:	e0bfff17 	ldw	r2,-4(fp)
   24198:	10c000e0 	cmpeqi	r3,r2,3
   2419c:	1800031e 	bne	r3,zero,241ac <fcntl+0x70>
   241a0:	10800120 	cmpeqi	r2,r2,4
   241a4:	1000071e 	bne	r2,zero,241c4 <fcntl+0x88>
   241a8:	00001e06 	br	24224 <fcntl+0xe8>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   241ac:	e0bffb17 	ldw	r2,-20(fp)
   241b0:	10c00217 	ldw	r3,8(r2)
   241b4:	00900034 	movhi	r2,16384
   241b8:	10bfffc4 	addi	r2,r2,-1
   241bc:	1884703a 	and	r2,r3,r2
   241c0:	00002306 	br	24250 <fcntl+0x114>
    case F_SETFL:
      va_start(argp, cmd);
   241c4:	e0800204 	addi	r2,fp,8
   241c8:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   241cc:	e0bffd17 	ldw	r2,-12(fp)
   241d0:	10c00104 	addi	r3,r2,4
   241d4:	e0fffd15 	stw	r3,-12(fp)
   241d8:	10800017 	ldw	r2,0(r2)
   241dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   241e0:	e0bffb17 	ldw	r2,-20(fp)
   241e4:	10c00217 	ldw	r3,8(r2)
   241e8:	00affdc4 	movi	r2,-16393
   241ec:	1886703a 	and	r3,r3,r2
   241f0:	e0bffb17 	ldw	r2,-20(fp)
   241f4:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   241f8:	e0bffb17 	ldw	r2,-20(fp)
   241fc:	10800217 	ldw	r2,8(r2)
   24200:	1007883a 	mov	r3,r2
   24204:	e0bffc17 	ldw	r2,-16(fp)
   24208:	1090020c 	andi	r2,r2,16392
   2420c:	1884b03a 	or	r2,r3,r2
   24210:	1007883a 	mov	r3,r2
   24214:	e0bffb17 	ldw	r2,-20(fp)
   24218:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   2421c:	0005883a 	mov	r2,zero
   24220:	00000b06 	br	24250 <fcntl+0x114>
    default:
      ALT_ERRNO = EINVAL;
   24224:	00240ec0 	call	240ec <alt_get_errno>
   24228:	1007883a 	mov	r3,r2
   2422c:	00800584 	movi	r2,22
   24230:	18800015 	stw	r2,0(r3)
      return -1;
   24234:	00bfffc4 	movi	r2,-1
   24238:	00000506 	br	24250 <fcntl+0x114>
    }
  }

  ALT_ERRNO = EBADFD;
   2423c:	00240ec0 	call	240ec <alt_get_errno>
   24240:	1007883a 	mov	r3,r2
   24244:	00801444 	movi	r2,81
   24248:	18800015 	stw	r2,0(r3)
  return -1;
   2424c:	00bfffc4 	movi	r2,-1
}
   24250:	e037883a 	mov	sp,fp
   24254:	dfc00117 	ldw	ra,4(sp)
   24258:	df000017 	ldw	fp,0(sp)
   2425c:	dec00404 	addi	sp,sp,16
   24260:	f800283a 	ret

00024264 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   24264:	deffff04 	addi	sp,sp,-4
   24268:	df000015 	stw	fp,0(sp)
   2426c:	d839883a 	mov	fp,sp
  return 0;
   24270:	0005883a 	mov	r2,zero
}
   24274:	e037883a 	mov	sp,fp
   24278:	df000017 	ldw	fp,0(sp)
   2427c:	dec00104 	addi	sp,sp,4
   24280:	f800283a 	ret

00024284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24284:	defffe04 	addi	sp,sp,-8
   24288:	dfc00115 	stw	ra,4(sp)
   2428c:	df000015 	stw	fp,0(sp)
   24290:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24294:	00820034 	movhi	r2,2048
   24298:	10828004 	addi	r2,r2,2560
   2429c:	10800017 	ldw	r2,0(r2)
   242a0:	10000526 	beq	r2,zero,242b8 <alt_get_errno+0x34>
   242a4:	00820034 	movhi	r2,2048
   242a8:	10828004 	addi	r2,r2,2560
   242ac:	10800017 	ldw	r2,0(r2)
   242b0:	103ee83a 	callr	r2
   242b4:	00000206 	br	242c0 <alt_get_errno+0x3c>
   242b8:	00820034 	movhi	r2,2048
   242bc:	10828c04 	addi	r2,r2,2608
}
   242c0:	e037883a 	mov	sp,fp
   242c4:	dfc00117 	ldw	ra,4(sp)
   242c8:	df000017 	ldw	fp,0(sp)
   242cc:	dec00204 	addi	sp,sp,8
   242d0:	f800283a 	ret

000242d4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   242d4:	defffb04 	addi	sp,sp,-20
   242d8:	dfc00415 	stw	ra,16(sp)
   242dc:	df000315 	stw	fp,12(sp)
   242e0:	df000304 	addi	fp,sp,12
   242e4:	e13ffe15 	stw	r4,-8(fp)
   242e8:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   242ec:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   242f0:	e0bffe17 	ldw	r2,-8(fp)
   242f4:	00803116 	blt	zero,r2,243bc <kill+0xe8>
  {
    switch (sig)
   242f8:	e0bfff17 	ldw	r2,-4(fp)
   242fc:	10800828 	cmpgeui	r2,r2,32
   24300:	1000291e 	bne	r2,zero,243a8 <kill+0xd4>
   24304:	e0bfff17 	ldw	r2,-4(fp)
   24308:	100690ba 	slli	r3,r2,2
   2430c:	008000b4 	movhi	r2,2
   24310:	1090c804 	addi	r2,r2,17184
   24314:	1885883a 	add	r2,r3,r2
   24318:	10800017 	ldw	r2,0(r2)
   2431c:	1000683a 	jmp	r2
   24320:	000243b4 	movhi	zero,2318
   24324:	000243a8 	cmpgeui	zero,zero,2318
   24328:	000243a8 	cmpgeui	zero,zero,2318
   2432c:	000243a0 	cmpeqi	zero,zero,2318
   24330:	000243a0 	cmpeqi	zero,zero,2318
   24334:	000243a0 	cmpeqi	zero,zero,2318
   24338:	000243a0 	cmpeqi	zero,zero,2318
   2433c:	000243a8 	cmpgeui	zero,zero,2318
   24340:	000243a0 	cmpeqi	zero,zero,2318
   24344:	000243a0 	cmpeqi	zero,zero,2318
   24348:	000243a0 	cmpeqi	zero,zero,2318
   2434c:	000243a0 	cmpeqi	zero,zero,2318
   24350:	000243a0 	cmpeqi	zero,zero,2318
   24354:	000243a0 	cmpeqi	zero,zero,2318
   24358:	000243a0 	cmpeqi	zero,zero,2318
   2435c:	000243a0 	cmpeqi	zero,zero,2318
   24360:	000243b4 	movhi	zero,2318
   24364:	000243a8 	cmpgeui	zero,zero,2318
   24368:	000243a8 	cmpgeui	zero,zero,2318
   2436c:	000243a8 	cmpgeui	zero,zero,2318
   24370:	000243b4 	movhi	zero,2318
   24374:	000243a8 	cmpgeui	zero,zero,2318
   24378:	000243a8 	cmpgeui	zero,zero,2318
   2437c:	000243a0 	cmpeqi	zero,zero,2318
   24380:	000243a0 	cmpeqi	zero,zero,2318
   24384:	000243a0 	cmpeqi	zero,zero,2318
   24388:	000243a0 	cmpeqi	zero,zero,2318
   2438c:	000243a0 	cmpeqi	zero,zero,2318
   24390:	000243a8 	cmpgeui	zero,zero,2318
   24394:	000243a8 	cmpgeui	zero,zero,2318
   24398:	000243a0 	cmpeqi	zero,zero,2318
   2439c:	000243a0 	cmpeqi	zero,zero,2318
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   243a0:	0009883a 	mov	r4,zero
   243a4:	00240b80 	call	240b8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   243a8:	00800584 	movi	r2,22
   243ac:	e0bffd15 	stw	r2,-12(fp)
   243b0:	00000606 	br	243cc <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   243b4:	0001883a 	nop
   243b8:	00000406 	br	243cc <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
   243bc:	e0bffe17 	ldw	r2,-8(fp)
   243c0:	0080020e 	bge	zero,r2,243cc <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   243c4:	008000c4 	movi	r2,3
   243c8:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
   243cc:	e0bffd17 	ldw	r2,-12(fp)
   243d0:	10000626 	beq	r2,zero,243ec <kill+0x118>
  {
    ALT_ERRNO = status;
   243d4:	00242840 	call	24284 <alt_get_errno>
   243d8:	1007883a 	mov	r3,r2
   243dc:	e0bffd17 	ldw	r2,-12(fp)
   243e0:	18800015 	stw	r2,0(r3)
    return -1;
   243e4:	00bfffc4 	movi	r2,-1
   243e8:	00000106 	br	243f0 <kill+0x11c>
  }

  return 0;
   243ec:	0005883a 	mov	r2,zero
}
   243f0:	e037883a 	mov	sp,fp
   243f4:	dfc00117 	ldw	ra,4(sp)
   243f8:	df000017 	ldw	fp,0(sp)
   243fc:	dec00204 	addi	sp,sp,8
   24400:	f800283a 	ret

00024404 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   24404:	defffc04 	addi	sp,sp,-16
   24408:	df000315 	stw	fp,12(sp)
   2440c:	df000304 	addi	fp,sp,12
   24410:	e13ffd15 	stw	r4,-12(fp)
   24414:	e17ffe15 	stw	r5,-8(fp)
   24418:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2441c:	e0fffe17 	ldw	r3,-8(fp)
   24420:	e0bffd17 	ldw	r2,-12(fp)
   24424:	18800c26 	beq	r3,r2,24458 <alt_load_section+0x54>
  {
    while( to != end )
   24428:	00000806 	br	2444c <alt_load_section+0x48>
    {
      *to++ = *from++;
   2442c:	e0bffe17 	ldw	r2,-8(fp)
   24430:	10c00104 	addi	r3,r2,4
   24434:	e0fffe15 	stw	r3,-8(fp)
   24438:	e0fffd17 	ldw	r3,-12(fp)
   2443c:	19000104 	addi	r4,r3,4
   24440:	e13ffd15 	stw	r4,-12(fp)
   24444:	18c00017 	ldw	r3,0(r3)
   24448:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2444c:	e0fffe17 	ldw	r3,-8(fp)
   24450:	e0bfff17 	ldw	r2,-4(fp)
   24454:	18bff51e 	bne	r3,r2,2442c <__alt_data_end+0xf402442c>
    {
      *to++ = *from++;
    }
  }
}
   24458:	e037883a 	mov	sp,fp
   2445c:	df000017 	ldw	fp,0(sp)
   24460:	dec00104 	addi	sp,sp,4
   24464:	f800283a 	ret

00024468 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   24468:	defffe04 	addi	sp,sp,-8
   2446c:	dfc00115 	stw	ra,4(sp)
   24470:	df000015 	stw	fp,0(sp)
   24474:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   24478:	010000b4 	movhi	r4,2
   2447c:	21184d04 	addi	r4,r4,24884
   24480:	01420034 	movhi	r5,2048
   24484:	2940af04 	addi	r5,r5,700
   24488:	01820034 	movhi	r6,2048
   2448c:	31828404 	addi	r6,r6,2576
   24490:	00244040 	call	24404 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   24494:	010000b4 	movhi	r4,2
   24498:	21000804 	addi	r4,r4,32
   2449c:	014000b4 	movhi	r5,2
   244a0:	29400804 	addi	r5,r5,32
   244a4:	018000b4 	movhi	r6,2
   244a8:	31800804 	addi	r6,r6,32
   244ac:	00244040 	call	24404 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   244b0:	010000b4 	movhi	r4,2
   244b4:	21179e04 	addi	r4,r4,24184
   244b8:	01420034 	movhi	r5,2048
   244bc:	29400004 	addi	r5,r5,0
   244c0:	01820034 	movhi	r6,2048
   244c4:	3180af04 	addi	r6,r6,700
   244c8:	00244040 	call	24404 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   244cc:	00255200 	call	25520 <alt_dcache_flush_all>
  alt_icache_flush_all();
   244d0:	00259600 	call	25960 <alt_icache_flush_all>
}
   244d4:	e037883a 	mov	sp,fp
   244d8:	dfc00117 	ldw	ra,4(sp)
   244dc:	df000017 	ldw	fp,0(sp)
   244e0:	dec00204 	addi	sp,sp,8
   244e4:	f800283a 	ret

000244e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   244e8:	defffd04 	addi	sp,sp,-12
   244ec:	dfc00215 	stw	ra,8(sp)
   244f0:	df000115 	stw	fp,4(sp)
   244f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   244f8:	0009883a 	mov	r4,zero
   244fc:	0024e1c0 	call	24e1c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   24500:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   24504:	0024e500 	call	24e50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   24508:	01020034 	movhi	r4,2048
   2450c:	2100a004 	addi	r4,r4,640
   24510:	01420034 	movhi	r5,2048
   24514:	2940a004 	addi	r5,r5,640
   24518:	01820034 	movhi	r6,2048
   2451c:	3180a004 	addi	r6,r6,640
   24520:	0025a5c0 	call	25a5c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   24524:	00256300 	call	25630 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   24528:	010000b4 	movhi	r4,2
   2452c:	2115a304 	addi	r4,r4,22156
   24530:	0025af40 	call	25af4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   24534:	d1202417 	ldw	r4,-32624(gp)
   24538:	d0e02517 	ldw	r3,-32620(gp)
   2453c:	d0a02617 	ldw	r2,-32616(gp)
   24540:	180b883a 	mov	r5,r3
   24544:	100d883a 	mov	r6,r2
   24548:	00204b00 	call	204b0 <main>
   2454c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   24550:	01000044 	movi	r4,1
   24554:	0023fb40 	call	23fb4 <close>
  exit (result);
   24558:	e13fff17 	ldw	r4,-4(fp)
   2455c:	0025b080 	call	25b08 <exit>

00024560 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   24560:	defffe04 	addi	sp,sp,-8
   24564:	df000115 	stw	fp,4(sp)
   24568:	df000104 	addi	fp,sp,4
   2456c:	e13fff15 	stw	r4,-4(fp)
}
   24570:	e037883a 	mov	sp,fp
   24574:	df000017 	ldw	fp,0(sp)
   24578:	dec00104 	addi	sp,sp,4
   2457c:	f800283a 	ret

00024580 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   24580:	defffe04 	addi	sp,sp,-8
   24584:	df000115 	stw	fp,4(sp)
   24588:	df000104 	addi	fp,sp,4
   2458c:	e13fff15 	stw	r4,-4(fp)
}
   24590:	e037883a 	mov	sp,fp
   24594:	df000017 	ldw	fp,0(sp)
   24598:	dec00104 	addi	sp,sp,4
   2459c:	f800283a 	ret

000245a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   245a0:	defffe04 	addi	sp,sp,-8
   245a4:	dfc00115 	stw	ra,4(sp)
   245a8:	df000015 	stw	fp,0(sp)
   245ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   245b0:	00820034 	movhi	r2,2048
   245b4:	10828004 	addi	r2,r2,2560
   245b8:	10800017 	ldw	r2,0(r2)
   245bc:	10000526 	beq	r2,zero,245d4 <alt_get_errno+0x34>
   245c0:	00820034 	movhi	r2,2048
   245c4:	10828004 	addi	r2,r2,2560
   245c8:	10800017 	ldw	r2,0(r2)
   245cc:	103ee83a 	callr	r2
   245d0:	00000206 	br	245dc <alt_get_errno+0x3c>
   245d4:	00820034 	movhi	r2,2048
   245d8:	10828c04 	addi	r2,r2,2608
}
   245dc:	e037883a 	mov	sp,fp
   245e0:	dfc00117 	ldw	ra,4(sp)
   245e4:	df000017 	ldw	fp,0(sp)
   245e8:	dec00204 	addi	sp,sp,8
   245ec:	f800283a 	ret

000245f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   245f0:	defffb04 	addi	sp,sp,-20
   245f4:	dfc00415 	stw	ra,16(sp)
   245f8:	df000315 	stw	fp,12(sp)
   245fc:	dc000215 	stw	r16,8(sp)
   24600:	df000304 	addi	fp,sp,12
   24604:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   24608:	e0bffe17 	ldw	r2,-8(fp)
   2460c:	10800217 	ldw	r2,8(r2)
   24610:	10d00034 	orhi	r3,r2,16384
   24614:	e0bffe17 	ldw	r2,-8(fp)
   24618:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2461c:	e03ffd15 	stw	zero,-12(fp)
   24620:	00002306 	br	246b0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24624:	04020034 	movhi	r16,2048
   24628:	8401f304 	addi	r16,r16,1996
   2462c:	e0bffd17 	ldw	r2,-12(fp)
   24630:	1009883a 	mov	r4,r2
   24634:	01400304 	movi	r5,12
   24638:	00222b80 	call	222b8 <__mulsi3>
   2463c:	8085883a 	add	r2,r16,r2
   24640:	10c00017 	ldw	r3,0(r2)
   24644:	e0bffe17 	ldw	r2,-8(fp)
   24648:	10800017 	ldw	r2,0(r2)
   2464c:	1880151e 	bne	r3,r2,246a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24650:	04020034 	movhi	r16,2048
   24654:	8401f304 	addi	r16,r16,1996
   24658:	e0bffd17 	ldw	r2,-12(fp)
   2465c:	1009883a 	mov	r4,r2
   24660:	01400304 	movi	r5,12
   24664:	00222b80 	call	222b8 <__mulsi3>
   24668:	8085883a 	add	r2,r16,r2
   2466c:	10800204 	addi	r2,r2,8
   24670:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   24674:	10000b0e 	bge	r2,zero,246a4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   24678:	e13ffd17 	ldw	r4,-12(fp)
   2467c:	01400304 	movi	r5,12
   24680:	00222b80 	call	222b8 <__mulsi3>
   24684:	1007883a 	mov	r3,r2
   24688:	00820034 	movhi	r2,2048
   2468c:	1081f304 	addi	r2,r2,1996
   24690:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   24694:	e0bffe17 	ldw	r2,-8(fp)
   24698:	18800226 	beq	r3,r2,246a4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2469c:	00bffcc4 	movi	r2,-13
   246a0:	00000a06 	br	246cc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   246a4:	e0bffd17 	ldw	r2,-12(fp)
   246a8:	10800044 	addi	r2,r2,1
   246ac:	e0bffd15 	stw	r2,-12(fp)
   246b0:	00820034 	movhi	r2,2048
   246b4:	10827f04 	addi	r2,r2,2556
   246b8:	10800017 	ldw	r2,0(r2)
   246bc:	1007883a 	mov	r3,r2
   246c0:	e0bffd17 	ldw	r2,-12(fp)
   246c4:	18bfd72e 	bgeu	r3,r2,24624 <__alt_data_end+0xf4024624>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   246c8:	0005883a 	mov	r2,zero
}
   246cc:	e6ffff04 	addi	sp,fp,-4
   246d0:	dfc00217 	ldw	ra,8(sp)
   246d4:	df000117 	ldw	fp,4(sp)
   246d8:	dc000017 	ldw	r16,0(sp)
   246dc:	dec00304 	addi	sp,sp,12
   246e0:	f800283a 	ret

000246e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   246e4:	defff604 	addi	sp,sp,-40
   246e8:	dfc00915 	stw	ra,36(sp)
   246ec:	df000815 	stw	fp,32(sp)
   246f0:	df000804 	addi	fp,sp,32
   246f4:	e13ffd15 	stw	r4,-12(fp)
   246f8:	e17ffe15 	stw	r5,-8(fp)
   246fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24700:	00bfffc4 	movi	r2,-1
   24704:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   24708:	00bffb44 	movi	r2,-19
   2470c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   24710:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24714:	e13ffd17 	ldw	r4,-12(fp)
   24718:	01420034 	movhi	r5,2048
   2471c:	29427d04 	addi	r5,r5,2548
   24720:	00256e80 	call	256e8 <alt_find_dev>
   24724:	e0bff815 	stw	r2,-32(fp)
   24728:	e0bff817 	ldw	r2,-32(fp)
   2472c:	1000051e 	bne	r2,zero,24744 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24730:	e13ffd17 	ldw	r4,-12(fp)
   24734:	00257780 	call	25778 <alt_find_file>
   24738:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2473c:	00800044 	movi	r2,1
   24740:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24744:	e0bff817 	ldw	r2,-32(fp)
   24748:	10002b26 	beq	r2,zero,247f8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2474c:	e13ff817 	ldw	r4,-32(fp)
   24750:	002588c0 	call	2588c <alt_get_fd>
   24754:	e0bff915 	stw	r2,-28(fp)
   24758:	e0bff917 	ldw	r2,-28(fp)
   2475c:	1000030e 	bge	r2,zero,2476c <open+0x88>
    {
      status = index;
   24760:	e0bff917 	ldw	r2,-28(fp)
   24764:	e0bffa15 	stw	r2,-24(fp)
   24768:	00002506 	br	24800 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   2476c:	e13ff917 	ldw	r4,-28(fp)
   24770:	01400304 	movi	r5,12
   24774:	00222b80 	call	222b8 <__mulsi3>
   24778:	1007883a 	mov	r3,r2
   2477c:	00820034 	movhi	r2,2048
   24780:	1081f304 	addi	r2,r2,1996
   24784:	1885883a 	add	r2,r3,r2
   24788:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2478c:	e0fffe17 	ldw	r3,-8(fp)
   24790:	00900034 	movhi	r2,16384
   24794:	10bfffc4 	addi	r2,r2,-1
   24798:	1886703a 	and	r3,r3,r2
   2479c:	e0bffc17 	ldw	r2,-16(fp)
   247a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   247a4:	e0bffb17 	ldw	r2,-20(fp)
   247a8:	1000051e 	bne	r2,zero,247c0 <open+0xdc>
   247ac:	e13ffc17 	ldw	r4,-16(fp)
   247b0:	00245f00 	call	245f0 <alt_file_locked>
   247b4:	e0bffa15 	stw	r2,-24(fp)
   247b8:	e0bffa17 	ldw	r2,-24(fp)
   247bc:	10001016 	blt	r2,zero,24800 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   247c0:	e0bff817 	ldw	r2,-32(fp)
   247c4:	10800317 	ldw	r2,12(r2)
   247c8:	10000826 	beq	r2,zero,247ec <open+0x108>
   247cc:	e0bff817 	ldw	r2,-32(fp)
   247d0:	10800317 	ldw	r2,12(r2)
   247d4:	e13ffc17 	ldw	r4,-16(fp)
   247d8:	e17ffd17 	ldw	r5,-12(fp)
   247dc:	e1bffe17 	ldw	r6,-8(fp)
   247e0:	e1ffff17 	ldw	r7,-4(fp)
   247e4:	103ee83a 	callr	r2
   247e8:	00000106 	br	247f0 <open+0x10c>
   247ec:	0005883a 	mov	r2,zero
   247f0:	e0bffa15 	stw	r2,-24(fp)
   247f4:	00000206 	br	24800 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   247f8:	00bffb44 	movi	r2,-19
   247fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24800:	e0bffa17 	ldw	r2,-24(fp)
   24804:	1000090e 	bge	r2,zero,2482c <open+0x148>
  {
    alt_release_fd (index);  
   24808:	e13ff917 	ldw	r4,-28(fp)
   2480c:	00249980 	call	24998 <alt_release_fd>
    ALT_ERRNO = -status;
   24810:	00245a00 	call	245a0 <alt_get_errno>
   24814:	1007883a 	mov	r3,r2
   24818:	e0bffa17 	ldw	r2,-24(fp)
   2481c:	0085c83a 	sub	r2,zero,r2
   24820:	18800015 	stw	r2,0(r3)
    return -1;
   24824:	00bfffc4 	movi	r2,-1
   24828:	00000106 	br	24830 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   2482c:	e0bff917 	ldw	r2,-28(fp)
}
   24830:	e037883a 	mov	sp,fp
   24834:	dfc00117 	ldw	ra,4(sp)
   24838:	df000017 	ldw	fp,0(sp)
   2483c:	dec00204 	addi	sp,sp,8
   24840:	f800283a 	ret

00024844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24844:	defffe04 	addi	sp,sp,-8
   24848:	dfc00115 	stw	ra,4(sp)
   2484c:	df000015 	stw	fp,0(sp)
   24850:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24854:	00820034 	movhi	r2,2048
   24858:	10828004 	addi	r2,r2,2560
   2485c:	10800017 	ldw	r2,0(r2)
   24860:	10000526 	beq	r2,zero,24878 <alt_get_errno+0x34>
   24864:	00820034 	movhi	r2,2048
   24868:	10828004 	addi	r2,r2,2560
   2486c:	10800017 	ldw	r2,0(r2)
   24870:	103ee83a 	callr	r2
   24874:	00000206 	br	24880 <alt_get_errno+0x3c>
   24878:	00820034 	movhi	r2,2048
   2487c:	10828c04 	addi	r2,r2,2608
}
   24880:	e037883a 	mov	sp,fp
   24884:	dfc00117 	ldw	ra,4(sp)
   24888:	df000017 	ldw	fp,0(sp)
   2488c:	dec00204 	addi	sp,sp,8
   24890:	f800283a 	ret

00024894 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   24894:	defff904 	addi	sp,sp,-28
   24898:	dfc00615 	stw	ra,24(sp)
   2489c:	df000515 	stw	fp,20(sp)
   248a0:	df000504 	addi	fp,sp,20
   248a4:	e13ffd15 	stw	r4,-12(fp)
   248a8:	e17ffe15 	stw	r5,-8(fp)
   248ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   248b0:	e0bffd17 	ldw	r2,-12(fp)
   248b4:	10000816 	blt	r2,zero,248d8 <read+0x44>
   248b8:	e13ffd17 	ldw	r4,-12(fp)
   248bc:	01400304 	movi	r5,12
   248c0:	00222b80 	call	222b8 <__mulsi3>
   248c4:	1007883a 	mov	r3,r2
   248c8:	00820034 	movhi	r2,2048
   248cc:	1081f304 	addi	r2,r2,1996
   248d0:	1885883a 	add	r2,r3,r2
   248d4:	00000106 	br	248dc <read+0x48>
   248d8:	0005883a 	mov	r2,zero
   248dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   248e0:	e0bffb17 	ldw	r2,-20(fp)
   248e4:	10002226 	beq	r2,zero,24970 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   248e8:	e0bffb17 	ldw	r2,-20(fp)
   248ec:	10800217 	ldw	r2,8(r2)
   248f0:	108000cc 	andi	r2,r2,3
   248f4:	10800060 	cmpeqi	r2,r2,1
   248f8:	1000181e 	bne	r2,zero,2495c <read+0xc8>
        (fd->dev->read))
   248fc:	e0bffb17 	ldw	r2,-20(fp)
   24900:	10800017 	ldw	r2,0(r2)
   24904:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   24908:	10001426 	beq	r2,zero,2495c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2490c:	e0bffb17 	ldw	r2,-20(fp)
   24910:	10800017 	ldw	r2,0(r2)
   24914:	10800517 	ldw	r2,20(r2)
   24918:	e0ffff17 	ldw	r3,-4(fp)
   2491c:	e13ffb17 	ldw	r4,-20(fp)
   24920:	e17ffe17 	ldw	r5,-8(fp)
   24924:	180d883a 	mov	r6,r3
   24928:	103ee83a 	callr	r2
   2492c:	e0bffc15 	stw	r2,-16(fp)
   24930:	e0bffc17 	ldw	r2,-16(fp)
   24934:	1000070e 	bge	r2,zero,24954 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   24938:	00248440 	call	24844 <alt_get_errno>
   2493c:	1007883a 	mov	r3,r2
   24940:	e0bffc17 	ldw	r2,-16(fp)
   24944:	0085c83a 	sub	r2,zero,r2
   24948:	18800015 	stw	r2,0(r3)
          return -1;
   2494c:	00bfffc4 	movi	r2,-1
   24950:	00000c06 	br	24984 <read+0xf0>
        }
        return rval;
   24954:	e0bffc17 	ldw	r2,-16(fp)
   24958:	00000a06 	br	24984 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2495c:	00248440 	call	24844 <alt_get_errno>
   24960:	1007883a 	mov	r3,r2
   24964:	00800344 	movi	r2,13
   24968:	18800015 	stw	r2,0(r3)
   2496c:	00000406 	br	24980 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   24970:	00248440 	call	24844 <alt_get_errno>
   24974:	1007883a 	mov	r3,r2
   24978:	00801444 	movi	r2,81
   2497c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24980:	00bfffc4 	movi	r2,-1
}
   24984:	e037883a 	mov	sp,fp
   24988:	dfc00117 	ldw	ra,4(sp)
   2498c:	df000017 	ldw	fp,0(sp)
   24990:	dec00204 	addi	sp,sp,8
   24994:	f800283a 	ret

00024998 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24998:	defffc04 	addi	sp,sp,-16
   2499c:	dfc00315 	stw	ra,12(sp)
   249a0:	df000215 	stw	fp,8(sp)
   249a4:	dc000115 	stw	r16,4(sp)
   249a8:	df000204 	addi	fp,sp,8
   249ac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   249b0:	e0bffe17 	ldw	r2,-8(fp)
   249b4:	108000d0 	cmplti	r2,r2,3
   249b8:	1000111e 	bne	r2,zero,24a00 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   249bc:	04020034 	movhi	r16,2048
   249c0:	8401f304 	addi	r16,r16,1996
   249c4:	e0bffe17 	ldw	r2,-8(fp)
   249c8:	1009883a 	mov	r4,r2
   249cc:	01400304 	movi	r5,12
   249d0:	00222b80 	call	222b8 <__mulsi3>
   249d4:	8085883a 	add	r2,r16,r2
   249d8:	10800204 	addi	r2,r2,8
   249dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   249e0:	04020034 	movhi	r16,2048
   249e4:	8401f304 	addi	r16,r16,1996
   249e8:	e0bffe17 	ldw	r2,-8(fp)
   249ec:	1009883a 	mov	r4,r2
   249f0:	01400304 	movi	r5,12
   249f4:	00222b80 	call	222b8 <__mulsi3>
   249f8:	8085883a 	add	r2,r16,r2
   249fc:	10000015 	stw	zero,0(r2)
  }
}
   24a00:	e6ffff04 	addi	sp,fp,-4
   24a04:	dfc00217 	ldw	ra,8(sp)
   24a08:	df000117 	ldw	fp,4(sp)
   24a0c:	dc000017 	ldw	r16,0(sp)
   24a10:	dec00304 	addi	sp,sp,12
   24a14:	f800283a 	ret

00024a18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   24a18:	defff904 	addi	sp,sp,-28
   24a1c:	df000615 	stw	fp,24(sp)
   24a20:	df000604 	addi	fp,sp,24
   24a24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24a28:	0005303a 	rdctl	r2,status
   24a2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a30:	e0fffc17 	ldw	r3,-16(fp)
   24a34:	00bfff84 	movi	r2,-2
   24a38:	1884703a 	and	r2,r3,r2
   24a3c:	1001703a 	wrctl	status,r2
  
  return context;
   24a40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   24a44:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   24a48:	d0a01817 	ldw	r2,-32672(gp)
   24a4c:	10c000c4 	addi	r3,r2,3
   24a50:	00bfff04 	movi	r2,-4
   24a54:	1884703a 	and	r2,r3,r2
   24a58:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   24a5c:	d0e01817 	ldw	r3,-32672(gp)
   24a60:	e0bfff17 	ldw	r2,-4(fp)
   24a64:	1887883a 	add	r3,r3,r2
   24a68:	00830034 	movhi	r2,3072
   24a6c:	10800004 	addi	r2,r2,0
   24a70:	10c0062e 	bgeu	r2,r3,24a8c <sbrk+0x74>
   24a74:	e0bffa17 	ldw	r2,-24(fp)
   24a78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a7c:	e0bffd17 	ldw	r2,-12(fp)
   24a80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   24a84:	00bfffc4 	movi	r2,-1
   24a88:	00000b06 	br	24ab8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   24a8c:	d0a01817 	ldw	r2,-32672(gp)
   24a90:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   24a94:	d0e01817 	ldw	r3,-32672(gp)
   24a98:	e0bfff17 	ldw	r2,-4(fp)
   24a9c:	1885883a 	add	r2,r3,r2
   24aa0:	d0a01815 	stw	r2,-32672(gp)
   24aa4:	e0bffa17 	ldw	r2,-24(fp)
   24aa8:	e0bffe15 	stw	r2,-8(fp)
   24aac:	e0bffe17 	ldw	r2,-8(fp)
   24ab0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   24ab4:	e0bffb17 	ldw	r2,-20(fp)
} 
   24ab8:	e037883a 	mov	sp,fp
   24abc:	df000017 	ldw	fp,0(sp)
   24ac0:	dec00104 	addi	sp,sp,4
   24ac4:	f800283a 	ret

00024ac8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24ac8:	defffa04 	addi	sp,sp,-24
   24acc:	df000515 	stw	fp,20(sp)
   24ad0:	df000504 	addi	fp,sp,20
   24ad4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24ad8:	0005303a 	rdctl	r2,status
   24adc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24ae0:	e0fffc17 	ldw	r3,-16(fp)
   24ae4:	00bfff84 	movi	r2,-2
   24ae8:	1884703a 	and	r2,r3,r2
   24aec:	1001703a 	wrctl	status,r2
  
  return context;
   24af0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24af4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24af8:	e0bfff17 	ldw	r2,-4(fp)
   24afc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24b00:	e0bffd17 	ldw	r2,-12(fp)
   24b04:	10800017 	ldw	r2,0(r2)
   24b08:	e0fffd17 	ldw	r3,-12(fp)
   24b0c:	18c00117 	ldw	r3,4(r3)
   24b10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24b14:	e0bffd17 	ldw	r2,-12(fp)
   24b18:	10800117 	ldw	r2,4(r2)
   24b1c:	e0fffd17 	ldw	r3,-12(fp)
   24b20:	18c00017 	ldw	r3,0(r3)
   24b24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24b28:	e0bffd17 	ldw	r2,-12(fp)
   24b2c:	e0fffd17 	ldw	r3,-12(fp)
   24b30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24b34:	e0bffd17 	ldw	r2,-12(fp)
   24b38:	e0fffd17 	ldw	r3,-12(fp)
   24b3c:	10c00015 	stw	r3,0(r2)
   24b40:	e0bffb17 	ldw	r2,-20(fp)
   24b44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24b48:	e0bffe17 	ldw	r2,-8(fp)
   24b4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24b50:	e037883a 	mov	sp,fp
   24b54:	df000017 	ldw	fp,0(sp)
   24b58:	dec00104 	addi	sp,sp,4
   24b5c:	f800283a 	ret

00024b60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24b60:	defffb04 	addi	sp,sp,-20
   24b64:	dfc00415 	stw	ra,16(sp)
   24b68:	df000315 	stw	fp,12(sp)
   24b6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24b70:	d0a01917 	ldw	r2,-32668(gp)
   24b74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24b78:	d0a02817 	ldw	r2,-32608(gp)
   24b7c:	10800044 	addi	r2,r2,1
   24b80:	d0a02815 	stw	r2,-32608(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24b84:	00002e06 	br	24c40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24b88:	e0bffd17 	ldw	r2,-12(fp)
   24b8c:	10800017 	ldw	r2,0(r2)
   24b90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24b94:	e0bffd17 	ldw	r2,-12(fp)
   24b98:	10800403 	ldbu	r2,16(r2)
   24b9c:	10803fcc 	andi	r2,r2,255
   24ba0:	10000426 	beq	r2,zero,24bb4 <alt_tick+0x54>
   24ba4:	d0a02817 	ldw	r2,-32608(gp)
   24ba8:	1000021e 	bne	r2,zero,24bb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24bac:	e0bffd17 	ldw	r2,-12(fp)
   24bb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24bb4:	e0bffd17 	ldw	r2,-12(fp)
   24bb8:	10800217 	ldw	r2,8(r2)
   24bbc:	d0e02817 	ldw	r3,-32608(gp)
   24bc0:	18801d36 	bltu	r3,r2,24c38 <alt_tick+0xd8>
   24bc4:	e0bffd17 	ldw	r2,-12(fp)
   24bc8:	10800403 	ldbu	r2,16(r2)
   24bcc:	10803fcc 	andi	r2,r2,255
   24bd0:	1000191e 	bne	r2,zero,24c38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24bd4:	e0bffd17 	ldw	r2,-12(fp)
   24bd8:	10800317 	ldw	r2,12(r2)
   24bdc:	e0fffd17 	ldw	r3,-12(fp)
   24be0:	18c00517 	ldw	r3,20(r3)
   24be4:	1809883a 	mov	r4,r3
   24be8:	103ee83a 	callr	r2
   24bec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24bf0:	e0bfff17 	ldw	r2,-4(fp)
   24bf4:	1000031e 	bne	r2,zero,24c04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24bf8:	e13ffd17 	ldw	r4,-12(fp)
   24bfc:	0024ac80 	call	24ac8 <alt_alarm_stop>
   24c00:	00000d06 	br	24c38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24c04:	e0bffd17 	ldw	r2,-12(fp)
   24c08:	10c00217 	ldw	r3,8(r2)
   24c0c:	e0bfff17 	ldw	r2,-4(fp)
   24c10:	1887883a 	add	r3,r3,r2
   24c14:	e0bffd17 	ldw	r2,-12(fp)
   24c18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24c1c:	e0bffd17 	ldw	r2,-12(fp)
   24c20:	10c00217 	ldw	r3,8(r2)
   24c24:	d0a02817 	ldw	r2,-32608(gp)
   24c28:	1880032e 	bgeu	r3,r2,24c38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24c2c:	e0bffd17 	ldw	r2,-12(fp)
   24c30:	00c00044 	movi	r3,1
   24c34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24c38:	e0bffe17 	ldw	r2,-8(fp)
   24c3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24c40:	e0fffd17 	ldw	r3,-12(fp)
   24c44:	d0a01904 	addi	r2,gp,-32668
   24c48:	18bfcf1e 	bne	r3,r2,24b88 <__alt_data_end+0xf4024b88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24c4c:	0001883a 	nop
}
   24c50:	e037883a 	mov	sp,fp
   24c54:	dfc00117 	ldw	ra,4(sp)
   24c58:	df000017 	ldw	fp,0(sp)
   24c5c:	dec00204 	addi	sp,sp,8
   24c60:	f800283a 	ret

00024c64 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   24c64:	defffd04 	addi	sp,sp,-12
   24c68:	dfc00215 	stw	ra,8(sp)
   24c6c:	df000115 	stw	fp,4(sp)
   24c70:	df000104 	addi	fp,sp,4
   24c74:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   24c78:	e13fff17 	ldw	r4,-4(fp)
   24c7c:	00253c80 	call	253c8 <alt_busy_sleep>
}
   24c80:	e037883a 	mov	sp,fp
   24c84:	dfc00117 	ldw	ra,4(sp)
   24c88:	df000017 	ldw	fp,0(sp)
   24c8c:	dec00204 	addi	sp,sp,8
   24c90:	f800283a 	ret

00024c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24c94:	defffe04 	addi	sp,sp,-8
   24c98:	dfc00115 	stw	ra,4(sp)
   24c9c:	df000015 	stw	fp,0(sp)
   24ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24ca4:	00820034 	movhi	r2,2048
   24ca8:	10828004 	addi	r2,r2,2560
   24cac:	10800017 	ldw	r2,0(r2)
   24cb0:	10000526 	beq	r2,zero,24cc8 <alt_get_errno+0x34>
   24cb4:	00820034 	movhi	r2,2048
   24cb8:	10828004 	addi	r2,r2,2560
   24cbc:	10800017 	ldw	r2,0(r2)
   24cc0:	103ee83a 	callr	r2
   24cc4:	00000206 	br	24cd0 <alt_get_errno+0x3c>
   24cc8:	00820034 	movhi	r2,2048
   24ccc:	10828c04 	addi	r2,r2,2608
}
   24cd0:	e037883a 	mov	sp,fp
   24cd4:	dfc00117 	ldw	ra,4(sp)
   24cd8:	df000017 	ldw	fp,0(sp)
   24cdc:	dec00204 	addi	sp,sp,8
   24ce0:	f800283a 	ret

00024ce4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   24ce4:	defff904 	addi	sp,sp,-28
   24ce8:	dfc00615 	stw	ra,24(sp)
   24cec:	df000515 	stw	fp,20(sp)
   24cf0:	df000504 	addi	fp,sp,20
   24cf4:	e13ffd15 	stw	r4,-12(fp)
   24cf8:	e17ffe15 	stw	r5,-8(fp)
   24cfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24d00:	e0bffd17 	ldw	r2,-12(fp)
   24d04:	10000816 	blt	r2,zero,24d28 <write+0x44>
   24d08:	e13ffd17 	ldw	r4,-12(fp)
   24d0c:	01400304 	movi	r5,12
   24d10:	00222b80 	call	222b8 <__mulsi3>
   24d14:	1007883a 	mov	r3,r2
   24d18:	00820034 	movhi	r2,2048
   24d1c:	1081f304 	addi	r2,r2,1996
   24d20:	1885883a 	add	r2,r3,r2
   24d24:	00000106 	br	24d2c <write+0x48>
   24d28:	0005883a 	mov	r2,zero
   24d2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   24d30:	e0bffb17 	ldw	r2,-20(fp)
   24d34:	10002126 	beq	r2,zero,24dbc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   24d38:	e0bffb17 	ldw	r2,-20(fp)
   24d3c:	10800217 	ldw	r2,8(r2)
   24d40:	108000cc 	andi	r2,r2,3
   24d44:	10001826 	beq	r2,zero,24da8 <write+0xc4>
   24d48:	e0bffb17 	ldw	r2,-20(fp)
   24d4c:	10800017 	ldw	r2,0(r2)
   24d50:	10800617 	ldw	r2,24(r2)
   24d54:	10001426 	beq	r2,zero,24da8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   24d58:	e0bffb17 	ldw	r2,-20(fp)
   24d5c:	10800017 	ldw	r2,0(r2)
   24d60:	10800617 	ldw	r2,24(r2)
   24d64:	e0ffff17 	ldw	r3,-4(fp)
   24d68:	e13ffb17 	ldw	r4,-20(fp)
   24d6c:	e17ffe17 	ldw	r5,-8(fp)
   24d70:	180d883a 	mov	r6,r3
   24d74:	103ee83a 	callr	r2
   24d78:	e0bffc15 	stw	r2,-16(fp)
   24d7c:	e0bffc17 	ldw	r2,-16(fp)
   24d80:	1000070e 	bge	r2,zero,24da0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   24d84:	0024c940 	call	24c94 <alt_get_errno>
   24d88:	1007883a 	mov	r3,r2
   24d8c:	e0bffc17 	ldw	r2,-16(fp)
   24d90:	0085c83a 	sub	r2,zero,r2
   24d94:	18800015 	stw	r2,0(r3)
        return -1;
   24d98:	00bfffc4 	movi	r2,-1
   24d9c:	00000c06 	br	24dd0 <write+0xec>
      }
      return rval;
   24da0:	e0bffc17 	ldw	r2,-16(fp)
   24da4:	00000a06 	br	24dd0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   24da8:	0024c940 	call	24c94 <alt_get_errno>
   24dac:	1007883a 	mov	r3,r2
   24db0:	00800344 	movi	r2,13
   24db4:	18800015 	stw	r2,0(r3)
   24db8:	00000406 	br	24dcc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   24dbc:	0024c940 	call	24c94 <alt_get_errno>
   24dc0:	1007883a 	mov	r3,r2
   24dc4:	00801444 	movi	r2,81
   24dc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24dcc:	00bfffc4 	movi	r2,-1
}
   24dd0:	e037883a 	mov	sp,fp
   24dd4:	dfc00117 	ldw	ra,4(sp)
   24dd8:	df000017 	ldw	fp,0(sp)
   24ddc:	dec00204 	addi	sp,sp,8
   24de0:	f800283a 	ret

00024de4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   24de4:	defffd04 	addi	sp,sp,-12
   24de8:	dfc00215 	stw	ra,8(sp)
   24dec:	df000115 	stw	fp,4(sp)
   24df0:	df000104 	addi	fp,sp,4
   24df4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   24df8:	e13fff17 	ldw	r4,-4(fp)
   24dfc:	01420034 	movhi	r5,2048
   24e00:	29427d04 	addi	r5,r5,2548
   24e04:	002558c0 	call	2558c <alt_dev_llist_insert>
}
   24e08:	e037883a 	mov	sp,fp
   24e0c:	dfc00117 	ldw	ra,4(sp)
   24e10:	df000017 	ldw	fp,0(sp)
   24e14:	dec00204 	addi	sp,sp,8
   24e18:	f800283a 	ret

00024e1c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   24e1c:	defffd04 	addi	sp,sp,-12
   24e20:	dfc00215 	stw	ra,8(sp)
   24e24:	df000115 	stw	fp,4(sp)
   24e28:	df000104 	addi	fp,sp,4
   24e2c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   24e30:	0025ad40 	call	25ad4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   24e34:	00800044 	movi	r2,1
   24e38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   24e3c:	e037883a 	mov	sp,fp
   24e40:	dfc00117 	ldw	ra,4(sp)
   24e44:	df000017 	ldw	fp,0(sp)
   24e48:	dec00204 	addi	sp,sp,8
   24e4c:	f800283a 	ret

00024e50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   24e50:	defffe04 	addi	sp,sp,-8
   24e54:	dfc00115 	stw	ra,4(sp)
   24e58:	df000015 	stw	fp,0(sp)
   24e5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   24e60:	01020034 	movhi	r4,2048
   24e64:	21025304 	addi	r4,r4,2380
   24e68:	0024de40 	call	24de4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( BT_RS232_UART, bt_rs232_uart);
   24e6c:	01020034 	movhi	r4,2048
   24e70:	21025e04 	addi	r4,r4,2424
   24e74:	0024de40 	call	24de4 <alt_dev_reg>
}
   24e78:	e037883a 	mov	sp,fp
   24e7c:	dfc00117 	ldw	ra,4(sp)
   24e80:	df000017 	ldw	fp,0(sp)
   24e84:	dec00204 	addi	sp,sp,8
   24e88:	f800283a 	ret

00024e8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   24e8c:	defffa04 	addi	sp,sp,-24
   24e90:	dfc00515 	stw	ra,20(sp)
   24e94:	df000415 	stw	fp,16(sp)
   24e98:	df000404 	addi	fp,sp,16
   24e9c:	e13ffd15 	stw	r4,-12(fp)
   24ea0:	e17ffe15 	stw	r5,-8(fp)
   24ea4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24ea8:	e0bffd17 	ldw	r2,-12(fp)
   24eac:	10800017 	ldw	r2,0(r2)
   24eb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24eb4:	e0bffc17 	ldw	r2,-16(fp)
   24eb8:	10c00a04 	addi	r3,r2,40
   24ebc:	e0bffd17 	ldw	r2,-12(fp)
   24ec0:	10800217 	ldw	r2,8(r2)
   24ec4:	1809883a 	mov	r4,r3
   24ec8:	e17ffe17 	ldw	r5,-8(fp)
   24ecc:	e1bfff17 	ldw	r6,-4(fp)
   24ed0:	100f883a 	mov	r7,r2
   24ed4:	0024f4c0 	call	24f4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24ed8:	e037883a 	mov	sp,fp
   24edc:	dfc00117 	ldw	ra,4(sp)
   24ee0:	df000017 	ldw	fp,0(sp)
   24ee4:	dec00204 	addi	sp,sp,8
   24ee8:	f800283a 	ret

00024eec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   24eec:	defffa04 	addi	sp,sp,-24
   24ef0:	dfc00515 	stw	ra,20(sp)
   24ef4:	df000415 	stw	fp,16(sp)
   24ef8:	df000404 	addi	fp,sp,16
   24efc:	e13ffd15 	stw	r4,-12(fp)
   24f00:	e17ffe15 	stw	r5,-8(fp)
   24f04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24f08:	e0bffd17 	ldw	r2,-12(fp)
   24f0c:	10800017 	ldw	r2,0(r2)
   24f10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24f14:	e0bffc17 	ldw	r2,-16(fp)
   24f18:	10c00a04 	addi	r3,r2,40
   24f1c:	e0bffd17 	ldw	r2,-12(fp)
   24f20:	10800217 	ldw	r2,8(r2)
   24f24:	1809883a 	mov	r4,r3
   24f28:	e17ffe17 	ldw	r5,-8(fp)
   24f2c:	e1bfff17 	ldw	r6,-4(fp)
   24f30:	100f883a 	mov	r7,r2
   24f34:	00250300 	call	25030 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   24f38:	e037883a 	mov	sp,fp
   24f3c:	dfc00117 	ldw	ra,4(sp)
   24f40:	df000017 	ldw	fp,0(sp)
   24f44:	dec00204 	addi	sp,sp,8
   24f48:	f800283a 	ret

00024f4c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   24f4c:	defff704 	addi	sp,sp,-36
   24f50:	df000815 	stw	fp,32(sp)
   24f54:	df000804 	addi	fp,sp,32
   24f58:	e13ffc15 	stw	r4,-16(fp)
   24f5c:	e17ffd15 	stw	r5,-12(fp)
   24f60:	e1bffe15 	stw	r6,-8(fp)
   24f64:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24f68:	e0bffc17 	ldw	r2,-16(fp)
   24f6c:	10800017 	ldw	r2,0(r2)
   24f70:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   24f74:	e0bffd17 	ldw	r2,-12(fp)
   24f78:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   24f7c:	e0bffe17 	ldw	r2,-8(fp)
   24f80:	e0fffd17 	ldw	r3,-12(fp)
   24f84:	1885883a 	add	r2,r3,r2
   24f88:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   24f8c:	00001406 	br	24fe0 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   24f90:	e0bff917 	ldw	r2,-28(fp)
   24f94:	10800037 	ldwio	r2,0(r2)
   24f98:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   24f9c:	e0bffb17 	ldw	r2,-20(fp)
   24fa0:	10a0000c 	andi	r2,r2,32768
   24fa4:	10000626 	beq	r2,zero,24fc0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24fa8:	e0bff817 	ldw	r2,-32(fp)
   24fac:	10c00044 	addi	r3,r2,1
   24fb0:	e0fff815 	stw	r3,-32(fp)
   24fb4:	e0fffb17 	ldw	r3,-20(fp)
   24fb8:	10c00005 	stb	r3,0(r2)
   24fbc:	00000806 	br	24fe0 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   24fc0:	e0fff817 	ldw	r3,-32(fp)
   24fc4:	e0bffd17 	ldw	r2,-12(fp)
   24fc8:	18800126 	beq	r3,r2,24fd0 <altera_avalon_jtag_uart_read+0x84>
      break;
   24fcc:	00000706 	br	24fec <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   24fd0:	e0bfff17 	ldw	r2,-4(fp)
   24fd4:	1090000c 	andi	r2,r2,16384
   24fd8:	10000126 	beq	r2,zero,24fe0 <altera_avalon_jtag_uart_read+0x94>
      break;   
   24fdc:	00000306 	br	24fec <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   24fe0:	e0fff817 	ldw	r3,-32(fp)
   24fe4:	e0bffa17 	ldw	r2,-24(fp)
   24fe8:	18bfe936 	bltu	r3,r2,24f90 <__alt_data_end+0xf4024f90>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   24fec:	e0fff817 	ldw	r3,-32(fp)
   24ff0:	e0bffd17 	ldw	r2,-12(fp)
   24ff4:	18800426 	beq	r3,r2,25008 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   24ff8:	e0fff817 	ldw	r3,-32(fp)
   24ffc:	e0bffd17 	ldw	r2,-12(fp)
   25000:	1885c83a 	sub	r2,r3,r2
   25004:	00000606 	br	25020 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   25008:	e0bfff17 	ldw	r2,-4(fp)
   2500c:	1090000c 	andi	r2,r2,16384
   25010:	10000226 	beq	r2,zero,2501c <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   25014:	00bffd44 	movi	r2,-11
   25018:	00000106 	br	25020 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   2501c:	00bffec4 	movi	r2,-5
}
   25020:	e037883a 	mov	sp,fp
   25024:	df000017 	ldw	fp,0(sp)
   25028:	dec00104 	addi	sp,sp,4
   2502c:	f800283a 	ret

00025030 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   25030:	defff904 	addi	sp,sp,-28
   25034:	df000615 	stw	fp,24(sp)
   25038:	df000604 	addi	fp,sp,24
   2503c:	e13ffc15 	stw	r4,-16(fp)
   25040:	e17ffd15 	stw	r5,-12(fp)
   25044:	e1bffe15 	stw	r6,-8(fp)
   25048:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2504c:	e0bffc17 	ldw	r2,-16(fp)
   25050:	10800017 	ldw	r2,0(r2)
   25054:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   25058:	e0bffe17 	ldw	r2,-8(fp)
   2505c:	e0fffd17 	ldw	r3,-12(fp)
   25060:	1885883a 	add	r2,r3,r2
   25064:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   25068:	00000e06 	br	250a4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   2506c:	e0bffa17 	ldw	r2,-24(fp)
   25070:	10800104 	addi	r2,r2,4
   25074:	10800037 	ldwio	r2,0(r2)
   25078:	10bfffec 	andhi	r2,r2,65535
   2507c:	10000926 	beq	r2,zero,250a4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   25080:	e0fffa17 	ldw	r3,-24(fp)
   25084:	e0bffd17 	ldw	r2,-12(fp)
   25088:	11000044 	addi	r4,r2,1
   2508c:	e13ffd15 	stw	r4,-12(fp)
   25090:	10800003 	ldbu	r2,0(r2)
   25094:	10803fcc 	andi	r2,r2,255
   25098:	1080201c 	xori	r2,r2,128
   2509c:	10bfe004 	addi	r2,r2,-128
   250a0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   250a4:	e0fffd17 	ldw	r3,-12(fp)
   250a8:	e0bffb17 	ldw	r2,-20(fp)
   250ac:	18bfef36 	bltu	r3,r2,2506c <__alt_data_end+0xf402506c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   250b0:	e0bffe17 	ldw	r2,-8(fp)
}
   250b4:	e037883a 	mov	sp,fp
   250b8:	df000017 	ldw	fp,0(sp)
   250bc:	dec00104 	addi	sp,sp,4
   250c0:	f800283a 	ret

000250c4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   250c4:	defffa04 	addi	sp,sp,-24
   250c8:	dfc00515 	stw	ra,20(sp)
   250cc:	df000415 	stw	fp,16(sp)
   250d0:	df000404 	addi	fp,sp,16
   250d4:	e13ffd15 	stw	r4,-12(fp)
   250d8:	e17ffe15 	stw	r5,-8(fp)
   250dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   250e0:	e0bffd17 	ldw	r2,-12(fp)
   250e4:	10800017 	ldw	r2,0(r2)
   250e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   250ec:	e0bffc17 	ldw	r2,-16(fp)
   250f0:	10c00a04 	addi	r3,r2,40
   250f4:	e0bffd17 	ldw	r2,-12(fp)
   250f8:	10800217 	ldw	r2,8(r2)
   250fc:	1809883a 	mov	r4,r3
   25100:	e17ffe17 	ldw	r5,-8(fp)
   25104:	e1bfff17 	ldw	r6,-4(fp)
   25108:	100f883a 	mov	r7,r2
   2510c:	00251d40 	call	251d4 <altera_avalon_uart_read>
      fd->fd_flags);
}
   25110:	e037883a 	mov	sp,fp
   25114:	dfc00117 	ldw	ra,4(sp)
   25118:	df000017 	ldw	fp,0(sp)
   2511c:	dec00204 	addi	sp,sp,8
   25120:	f800283a 	ret

00025124 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   25124:	defffa04 	addi	sp,sp,-24
   25128:	dfc00515 	stw	ra,20(sp)
   2512c:	df000415 	stw	fp,16(sp)
   25130:	df000404 	addi	fp,sp,16
   25134:	e13ffd15 	stw	r4,-12(fp)
   25138:	e17ffe15 	stw	r5,-8(fp)
   2513c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   25140:	e0bffd17 	ldw	r2,-12(fp)
   25144:	10800017 	ldw	r2,0(r2)
   25148:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   2514c:	e0bffc17 	ldw	r2,-16(fp)
   25150:	10c00a04 	addi	r3,r2,40
   25154:	e0bffd17 	ldw	r2,-12(fp)
   25158:	10800217 	ldw	r2,8(r2)
   2515c:	1809883a 	mov	r4,r3
   25160:	e17ffe17 	ldw	r5,-8(fp)
   25164:	e1bfff17 	ldw	r6,-4(fp)
   25168:	100f883a 	mov	r7,r2
   2516c:	00252e80 	call	252e8 <altera_avalon_uart_write>
      fd->fd_flags);
}
   25170:	e037883a 	mov	sp,fp
   25174:	dfc00117 	ldw	ra,4(sp)
   25178:	df000017 	ldw	fp,0(sp)
   2517c:	dec00204 	addi	sp,sp,8
   25180:	f800283a 	ret

00025184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25184:	defffe04 	addi	sp,sp,-8
   25188:	dfc00115 	stw	ra,4(sp)
   2518c:	df000015 	stw	fp,0(sp)
   25190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25194:	00820034 	movhi	r2,2048
   25198:	10828004 	addi	r2,r2,2560
   2519c:	10800017 	ldw	r2,0(r2)
   251a0:	10000526 	beq	r2,zero,251b8 <alt_get_errno+0x34>
   251a4:	00820034 	movhi	r2,2048
   251a8:	10828004 	addi	r2,r2,2560
   251ac:	10800017 	ldw	r2,0(r2)
   251b0:	103ee83a 	callr	r2
   251b4:	00000206 	br	251c0 <alt_get_errno+0x3c>
   251b8:	00820034 	movhi	r2,2048
   251bc:	10828c04 	addi	r2,r2,2608
}
   251c0:	e037883a 	mov	sp,fp
   251c4:	dfc00117 	ldw	ra,4(sp)
   251c8:	df000017 	ldw	fp,0(sp)
   251cc:	dec00204 	addi	sp,sp,8
   251d0:	f800283a 	ret

000251d4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   251d4:	defff804 	addi	sp,sp,-32
   251d8:	dfc00715 	stw	ra,28(sp)
   251dc:	df000615 	stw	fp,24(sp)
   251e0:	df000604 	addi	fp,sp,24
   251e4:	e13ffc15 	stw	r4,-16(fp)
   251e8:	e17ffd15 	stw	r5,-12(fp)
   251ec:	e1bffe15 	stw	r6,-8(fp)
   251f0:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   251f4:	e0bfff17 	ldw	r2,-4(fp)
   251f8:	1090000c 	andi	r2,r2,16384
   251fc:	1005003a 	cmpeq	r2,r2,zero
   25200:	10803fcc 	andi	r2,r2,255
   25204:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   25208:	e0bffc17 	ldw	r2,-16(fp)
   2520c:	10800017 	ldw	r2,0(r2)
   25210:	10800204 	addi	r2,r2,8
   25214:	10800037 	ldwio	r2,0(r2)
   25218:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   2521c:	e0bffc17 	ldw	r2,-16(fp)
   25220:	10800017 	ldw	r2,0(r2)
   25224:	10800204 	addi	r2,r2,8
   25228:	0007883a 	mov	r3,zero
   2522c:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   25230:	e0bffb17 	ldw	r2,-20(fp)
   25234:	1080200c 	andi	r2,r2,128
   25238:	10000b26 	beq	r2,zero,25268 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   2523c:	e0bffc17 	ldw	r2,-16(fp)
   25240:	10800017 	ldw	r2,0(r2)
   25244:	10800037 	ldwio	r2,0(r2)
   25248:	1007883a 	mov	r3,r2
   2524c:	e0bffd17 	ldw	r2,-12(fp)
   25250:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   25254:	e0bffb17 	ldw	r2,-20(fp)
   25258:	108000cc 	andi	r2,r2,3
   2525c:	1000021e 	bne	r2,zero,25268 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   25260:	00800044 	movi	r2,1
   25264:	00000706 	br	25284 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   25268:	e0bffa17 	ldw	r2,-24(fp)
   2526c:	103fe61e 	bne	r2,zero,25208 <__alt_data_end+0xf4025208>

  ALT_ERRNO = EWOULDBLOCK;
   25270:	00251840 	call	25184 <alt_get_errno>
   25274:	1007883a 	mov	r3,r2
   25278:	008002c4 	movi	r2,11
   2527c:	18800015 	stw	r2,0(r3)
 
  return 0;
   25280:	0005883a 	mov	r2,zero
}
   25284:	e037883a 	mov	sp,fp
   25288:	dfc00117 	ldw	ra,4(sp)
   2528c:	df000017 	ldw	fp,0(sp)
   25290:	dec00204 	addi	sp,sp,8
   25294:	f800283a 	ret

00025298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25298:	defffe04 	addi	sp,sp,-8
   2529c:	dfc00115 	stw	ra,4(sp)
   252a0:	df000015 	stw	fp,0(sp)
   252a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   252a8:	00820034 	movhi	r2,2048
   252ac:	10828004 	addi	r2,r2,2560
   252b0:	10800017 	ldw	r2,0(r2)
   252b4:	10000526 	beq	r2,zero,252cc <alt_get_errno+0x34>
   252b8:	00820034 	movhi	r2,2048
   252bc:	10828004 	addi	r2,r2,2560
   252c0:	10800017 	ldw	r2,0(r2)
   252c4:	103ee83a 	callr	r2
   252c8:	00000206 	br	252d4 <alt_get_errno+0x3c>
   252cc:	00820034 	movhi	r2,2048
   252d0:	10828c04 	addi	r2,r2,2608
}
   252d4:	e037883a 	mov	sp,fp
   252d8:	dfc00117 	ldw	ra,4(sp)
   252dc:	df000017 	ldw	fp,0(sp)
   252e0:	dec00204 	addi	sp,sp,8
   252e4:	f800283a 	ret

000252e8 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   252e8:	defff704 	addi	sp,sp,-36
   252ec:	dfc00815 	stw	ra,32(sp)
   252f0:	df000715 	stw	fp,28(sp)
   252f4:	df000704 	addi	fp,sp,28
   252f8:	e13ffc15 	stw	r4,-16(fp)
   252fc:	e17ffd15 	stw	r5,-12(fp)
   25300:	e1bffe15 	stw	r6,-8(fp)
   25304:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   25308:	e0bfff17 	ldw	r2,-4(fp)
   2530c:	1090000c 	andi	r2,r2,16384
   25310:	1005003a 	cmpeq	r2,r2,zero
   25314:	10803fcc 	andi	r2,r2,255
   25318:	e0bffa15 	stw	r2,-24(fp)
  count = len;
   2531c:	e0bffe17 	ldw	r2,-8(fp)
   25320:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   25324:	e0bffc17 	ldw	r2,-16(fp)
   25328:	10800017 	ldw	r2,0(r2)
   2532c:	10800204 	addi	r2,r2,8
   25330:	10800037 	ldwio	r2,0(r2)
   25334:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   25338:	e0bffb17 	ldw	r2,-20(fp)
   2533c:	1080100c 	andi	r2,r2,64
   25340:	10000f26 	beq	r2,zero,25380 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   25344:	e0bffc17 	ldw	r2,-16(fp)
   25348:	10800017 	ldw	r2,0(r2)
   2534c:	10800104 	addi	r2,r2,4
   25350:	1009883a 	mov	r4,r2
   25354:	e0bffd17 	ldw	r2,-12(fp)
   25358:	10c00044 	addi	r3,r2,1
   2535c:	e0fffd15 	stw	r3,-12(fp)
   25360:	10800003 	ldbu	r2,0(r2)
   25364:	10803fcc 	andi	r2,r2,255
   25368:	1080201c 	xori	r2,r2,128
   2536c:	10bfe004 	addi	r2,r2,-128
   25370:	20800035 	stwio	r2,0(r4)
      count--;
   25374:	e0bff917 	ldw	r2,-28(fp)
   25378:	10bfffc4 	addi	r2,r2,-1
   2537c:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
   25380:	e0bffa17 	ldw	r2,-24(fp)
   25384:	10000226 	beq	r2,zero,25390 <altera_avalon_uart_write+0xa8>
   25388:	e0bff917 	ldw	r2,-28(fp)
   2538c:	103fe51e 	bne	r2,zero,25324 <__alt_data_end+0xf4025324>

  if (count)
   25390:	e0bff917 	ldw	r2,-28(fp)
   25394:	10000426 	beq	r2,zero,253a8 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   25398:	00252980 	call	25298 <alt_get_errno>
   2539c:	1007883a 	mov	r3,r2
   253a0:	008002c4 	movi	r2,11
   253a4:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   253a8:	e0fffe17 	ldw	r3,-8(fp)
   253ac:	e0bff917 	ldw	r2,-28(fp)
   253b0:	1885c83a 	sub	r2,r3,r2
}
   253b4:	e037883a 	mov	sp,fp
   253b8:	dfc00117 	ldw	ra,4(sp)
   253bc:	df000017 	ldw	fp,0(sp)
   253c0:	dec00204 	addi	sp,sp,8
   253c4:	f800283a 	ret

000253c8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   253c8:	defffa04 	addi	sp,sp,-24
   253cc:	dfc00515 	stw	ra,20(sp)
   253d0:	df000415 	stw	fp,16(sp)
   253d4:	df000404 	addi	fp,sp,16
   253d8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   253dc:	00800244 	movi	r2,9
   253e0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   253e4:	e13ffd17 	ldw	r4,-12(fp)
   253e8:	014003f4 	movhi	r5,15
   253ec:	29509004 	addi	r5,r5,16960
   253f0:	00222b80 	call	222b8 <__mulsi3>
   253f4:	0100bef4 	movhi	r4,763
   253f8:	213c2004 	addi	r4,r4,-3968
   253fc:	100b883a 	mov	r5,r2
   25400:	0023f540 	call	23f54 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   25404:	01200034 	movhi	r4,32768
   25408:	213fffc4 	addi	r4,r4,-1
   2540c:	100b883a 	mov	r5,r2
   25410:	0023f540 	call	23f54 <__udivsi3>
   25414:	e13fff17 	ldw	r4,-4(fp)
   25418:	100b883a 	mov	r5,r2
   2541c:	0023f540 	call	23f54 <__udivsi3>
   25420:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   25424:	e0bffe17 	ldw	r2,-8(fp)
   25428:	10002a26 	beq	r2,zero,254d4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   2542c:	e03ffc15 	stw	zero,-16(fp)
   25430:	00001706 	br	25490 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   25434:	00a00034 	movhi	r2,32768
   25438:	10bfffc4 	addi	r2,r2,-1
   2543c:	10bfffc4 	addi	r2,r2,-1
   25440:	103ffe1e 	bne	r2,zero,2543c <__alt_data_end+0xf402543c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   25444:	e13ffd17 	ldw	r4,-12(fp)
   25448:	014003f4 	movhi	r5,15
   2544c:	29509004 	addi	r5,r5,16960
   25450:	00222b80 	call	222b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   25454:	0100bef4 	movhi	r4,763
   25458:	213c2004 	addi	r4,r4,-3968
   2545c:	100b883a 	mov	r5,r2
   25460:	0023f540 	call	23f54 <__udivsi3>
   25464:	01200034 	movhi	r4,32768
   25468:	213fffc4 	addi	r4,r4,-1
   2546c:	100b883a 	mov	r5,r2
   25470:	0023f540 	call	23f54 <__udivsi3>
   25474:	1007883a 	mov	r3,r2
   25478:	e0bfff17 	ldw	r2,-4(fp)
   2547c:	10c5c83a 	sub	r2,r2,r3
   25480:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   25484:	e0bffc17 	ldw	r2,-16(fp)
   25488:	10800044 	addi	r2,r2,1
   2548c:	e0bffc15 	stw	r2,-16(fp)
   25490:	e0fffc17 	ldw	r3,-16(fp)
   25494:	e0bffe17 	ldw	r2,-8(fp)
   25498:	18bfe616 	blt	r3,r2,25434 <__alt_data_end+0xf4025434>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   2549c:	e13ffd17 	ldw	r4,-12(fp)
   254a0:	014003f4 	movhi	r5,15
   254a4:	29509004 	addi	r5,r5,16960
   254a8:	00222b80 	call	222b8 <__mulsi3>
   254ac:	0100bef4 	movhi	r4,763
   254b0:	213c2004 	addi	r4,r4,-3968
   254b4:	100b883a 	mov	r5,r2
   254b8:	0023f540 	call	23f54 <__udivsi3>
   254bc:	1009883a 	mov	r4,r2
   254c0:	e17fff17 	ldw	r5,-4(fp)
   254c4:	00222b80 	call	222b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   254c8:	10bfffc4 	addi	r2,r2,-1
   254cc:	103ffe1e 	bne	r2,zero,254c8 <__alt_data_end+0xf40254c8>
   254d0:	00000d06 	br	25508 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   254d4:	e13ffd17 	ldw	r4,-12(fp)
   254d8:	014003f4 	movhi	r5,15
   254dc:	29509004 	addi	r5,r5,16960
   254e0:	00222b80 	call	222b8 <__mulsi3>
   254e4:	0100bef4 	movhi	r4,763
   254e8:	213c2004 	addi	r4,r4,-3968
   254ec:	100b883a 	mov	r5,r2
   254f0:	0023f540 	call	23f54 <__udivsi3>
   254f4:	1009883a 	mov	r4,r2
   254f8:	e17fff17 	ldw	r5,-4(fp)
   254fc:	00222b80 	call	222b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   25500:	10bfffc4 	addi	r2,r2,-1
   25504:	00bffe16 	blt	zero,r2,25500 <__alt_data_end+0xf4025500>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   25508:	0005883a 	mov	r2,zero
}
   2550c:	e037883a 	mov	sp,fp
   25510:	dfc00117 	ldw	ra,4(sp)
   25514:	df000017 	ldw	fp,0(sp)
   25518:	dec00204 	addi	sp,sp,8
   2551c:	f800283a 	ret

00025520 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25520:	deffff04 	addi	sp,sp,-4
   25524:	df000015 	stw	fp,0(sp)
   25528:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2552c:	e037883a 	mov	sp,fp
   25530:	df000017 	ldw	fp,0(sp)
   25534:	dec00104 	addi	sp,sp,4
   25538:	f800283a 	ret

0002553c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2553c:	defffe04 	addi	sp,sp,-8
   25540:	dfc00115 	stw	ra,4(sp)
   25544:	df000015 	stw	fp,0(sp)
   25548:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2554c:	00820034 	movhi	r2,2048
   25550:	10828004 	addi	r2,r2,2560
   25554:	10800017 	ldw	r2,0(r2)
   25558:	10000526 	beq	r2,zero,25570 <alt_get_errno+0x34>
   2555c:	00820034 	movhi	r2,2048
   25560:	10828004 	addi	r2,r2,2560
   25564:	10800017 	ldw	r2,0(r2)
   25568:	103ee83a 	callr	r2
   2556c:	00000206 	br	25578 <alt_get_errno+0x3c>
   25570:	00820034 	movhi	r2,2048
   25574:	10828c04 	addi	r2,r2,2608
}
   25578:	e037883a 	mov	sp,fp
   2557c:	dfc00117 	ldw	ra,4(sp)
   25580:	df000017 	ldw	fp,0(sp)
   25584:	dec00204 	addi	sp,sp,8
   25588:	f800283a 	ret

0002558c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2558c:	defffa04 	addi	sp,sp,-24
   25590:	dfc00515 	stw	ra,20(sp)
   25594:	df000415 	stw	fp,16(sp)
   25598:	df000404 	addi	fp,sp,16
   2559c:	e13ffe15 	stw	r4,-8(fp)
   255a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   255a4:	e0bffe17 	ldw	r2,-8(fp)
   255a8:	10000326 	beq	r2,zero,255b8 <alt_dev_llist_insert+0x2c>
   255ac:	e0bffe17 	ldw	r2,-8(fp)
   255b0:	10800217 	ldw	r2,8(r2)
   255b4:	1000061e 	bne	r2,zero,255d0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   255b8:	002553c0 	call	2553c <alt_get_errno>
   255bc:	1007883a 	mov	r3,r2
   255c0:	00800584 	movi	r2,22
   255c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   255c8:	00bffa84 	movi	r2,-22
   255cc:	00001306 	br	2561c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   255d0:	e0bffe17 	ldw	r2,-8(fp)
   255d4:	e0ffff17 	ldw	r3,-4(fp)
   255d8:	e0fffc15 	stw	r3,-16(fp)
   255dc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   255e0:	e0bffd17 	ldw	r2,-12(fp)
   255e4:	e0fffc17 	ldw	r3,-16(fp)
   255e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   255ec:	e0bffc17 	ldw	r2,-16(fp)
   255f0:	10c00017 	ldw	r3,0(r2)
   255f4:	e0bffd17 	ldw	r2,-12(fp)
   255f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   255fc:	e0bffc17 	ldw	r2,-16(fp)
   25600:	10800017 	ldw	r2,0(r2)
   25604:	e0fffd17 	ldw	r3,-12(fp)
   25608:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2560c:	e0bffc17 	ldw	r2,-16(fp)
   25610:	e0fffd17 	ldw	r3,-12(fp)
   25614:	10c00015 	stw	r3,0(r2)

  return 0;  
   25618:	0005883a 	mov	r2,zero
}
   2561c:	e037883a 	mov	sp,fp
   25620:	dfc00117 	ldw	ra,4(sp)
   25624:	df000017 	ldw	fp,0(sp)
   25628:	dec00204 	addi	sp,sp,8
   2562c:	f800283a 	ret

00025630 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25630:	defffd04 	addi	sp,sp,-12
   25634:	dfc00215 	stw	ra,8(sp)
   25638:	df000115 	stw	fp,4(sp)
   2563c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25640:	008000b4 	movhi	r2,2
   25644:	10979d04 	addi	r2,r2,24180
   25648:	e0bfff15 	stw	r2,-4(fp)
   2564c:	00000606 	br	25668 <_do_ctors+0x38>
        (*ctor) (); 
   25650:	e0bfff17 	ldw	r2,-4(fp)
   25654:	10800017 	ldw	r2,0(r2)
   25658:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2565c:	e0bfff17 	ldw	r2,-4(fp)
   25660:	10bfff04 	addi	r2,r2,-4
   25664:	e0bfff15 	stw	r2,-4(fp)
   25668:	e0ffff17 	ldw	r3,-4(fp)
   2566c:	008000b4 	movhi	r2,2
   25670:	10979e04 	addi	r2,r2,24184
   25674:	18bff62e 	bgeu	r3,r2,25650 <__alt_data_end+0xf4025650>
        (*ctor) (); 
}
   25678:	e037883a 	mov	sp,fp
   2567c:	dfc00117 	ldw	ra,4(sp)
   25680:	df000017 	ldw	fp,0(sp)
   25684:	dec00204 	addi	sp,sp,8
   25688:	f800283a 	ret

0002568c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2568c:	defffd04 	addi	sp,sp,-12
   25690:	dfc00215 	stw	ra,8(sp)
   25694:	df000115 	stw	fp,4(sp)
   25698:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2569c:	008000b4 	movhi	r2,2
   256a0:	10979d04 	addi	r2,r2,24180
   256a4:	e0bfff15 	stw	r2,-4(fp)
   256a8:	00000606 	br	256c4 <_do_dtors+0x38>
        (*dtor) (); 
   256ac:	e0bfff17 	ldw	r2,-4(fp)
   256b0:	10800017 	ldw	r2,0(r2)
   256b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   256b8:	e0bfff17 	ldw	r2,-4(fp)
   256bc:	10bfff04 	addi	r2,r2,-4
   256c0:	e0bfff15 	stw	r2,-4(fp)
   256c4:	e0ffff17 	ldw	r3,-4(fp)
   256c8:	008000b4 	movhi	r2,2
   256cc:	10979e04 	addi	r2,r2,24184
   256d0:	18bff62e 	bgeu	r3,r2,256ac <__alt_data_end+0xf40256ac>
        (*dtor) (); 
}
   256d4:	e037883a 	mov	sp,fp
   256d8:	dfc00117 	ldw	ra,4(sp)
   256dc:	df000017 	ldw	fp,0(sp)
   256e0:	dec00204 	addi	sp,sp,8
   256e4:	f800283a 	ret

000256e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   256e8:	defffa04 	addi	sp,sp,-24
   256ec:	dfc00515 	stw	ra,20(sp)
   256f0:	df000415 	stw	fp,16(sp)
   256f4:	df000404 	addi	fp,sp,16
   256f8:	e13ffe15 	stw	r4,-8(fp)
   256fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25700:	e0bfff17 	ldw	r2,-4(fp)
   25704:	10800017 	ldw	r2,0(r2)
   25708:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2570c:	e13ffe17 	ldw	r4,-8(fp)
   25710:	00233700 	call	23370 <strlen>
   25714:	10800044 	addi	r2,r2,1
   25718:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2571c:	00000d06 	br	25754 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25720:	e0bffc17 	ldw	r2,-16(fp)
   25724:	10c00217 	ldw	r3,8(r2)
   25728:	e0bffd17 	ldw	r2,-12(fp)
   2572c:	1809883a 	mov	r4,r3
   25730:	e17ffe17 	ldw	r5,-8(fp)
   25734:	100d883a 	mov	r6,r2
   25738:	0025b280 	call	25b28 <memcmp>
   2573c:	1000021e 	bne	r2,zero,25748 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25740:	e0bffc17 	ldw	r2,-16(fp)
   25744:	00000706 	br	25764 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25748:	e0bffc17 	ldw	r2,-16(fp)
   2574c:	10800017 	ldw	r2,0(r2)
   25750:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25754:	e0fffc17 	ldw	r3,-16(fp)
   25758:	e0bfff17 	ldw	r2,-4(fp)
   2575c:	18bff01e 	bne	r3,r2,25720 <__alt_data_end+0xf4025720>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   25760:	0005883a 	mov	r2,zero
}
   25764:	e037883a 	mov	sp,fp
   25768:	dfc00117 	ldw	ra,4(sp)
   2576c:	df000017 	ldw	fp,0(sp)
   25770:	dec00204 	addi	sp,sp,8
   25774:	f800283a 	ret

00025778 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25778:	defffb04 	addi	sp,sp,-20
   2577c:	dfc00415 	stw	ra,16(sp)
   25780:	df000315 	stw	fp,12(sp)
   25784:	df000304 	addi	fp,sp,12
   25788:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2578c:	00820034 	movhi	r2,2048
   25790:	10827b04 	addi	r2,r2,2540
   25794:	10800017 	ldw	r2,0(r2)
   25798:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2579c:	00003106 	br	25864 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   257a0:	e0bffd17 	ldw	r2,-12(fp)
   257a4:	10800217 	ldw	r2,8(r2)
   257a8:	1009883a 	mov	r4,r2
   257ac:	00233700 	call	23370 <strlen>
   257b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   257b4:	e0bffd17 	ldw	r2,-12(fp)
   257b8:	10c00217 	ldw	r3,8(r2)
   257bc:	e0bffe17 	ldw	r2,-8(fp)
   257c0:	10bfffc4 	addi	r2,r2,-1
   257c4:	1885883a 	add	r2,r3,r2
   257c8:	10800003 	ldbu	r2,0(r2)
   257cc:	10803fcc 	andi	r2,r2,255
   257d0:	1080201c 	xori	r2,r2,128
   257d4:	10bfe004 	addi	r2,r2,-128
   257d8:	10800bd8 	cmpnei	r2,r2,47
   257dc:	1000031e 	bne	r2,zero,257ec <alt_find_file+0x74>
    {
      len -= 1;
   257e0:	e0bffe17 	ldw	r2,-8(fp)
   257e4:	10bfffc4 	addi	r2,r2,-1
   257e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   257ec:	e0bffe17 	ldw	r2,-8(fp)
   257f0:	e0ffff17 	ldw	r3,-4(fp)
   257f4:	1885883a 	add	r2,r3,r2
   257f8:	10800003 	ldbu	r2,0(r2)
   257fc:	10803fcc 	andi	r2,r2,255
   25800:	1080201c 	xori	r2,r2,128
   25804:	10bfe004 	addi	r2,r2,-128
   25808:	10800be0 	cmpeqi	r2,r2,47
   2580c:	1000081e 	bne	r2,zero,25830 <alt_find_file+0xb8>
   25810:	e0bffe17 	ldw	r2,-8(fp)
   25814:	e0ffff17 	ldw	r3,-4(fp)
   25818:	1885883a 	add	r2,r3,r2
   2581c:	10800003 	ldbu	r2,0(r2)
   25820:	10803fcc 	andi	r2,r2,255
   25824:	1080201c 	xori	r2,r2,128
   25828:	10bfe004 	addi	r2,r2,-128
   2582c:	10000a1e 	bne	r2,zero,25858 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   25830:	e0bffd17 	ldw	r2,-12(fp)
   25834:	10c00217 	ldw	r3,8(r2)
   25838:	e0bffe17 	ldw	r2,-8(fp)
   2583c:	1809883a 	mov	r4,r3
   25840:	e17fff17 	ldw	r5,-4(fp)
   25844:	100d883a 	mov	r6,r2
   25848:	0025b280 	call	25b28 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2584c:	1000021e 	bne	r2,zero,25858 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   25850:	e0bffd17 	ldw	r2,-12(fp)
   25854:	00000806 	br	25878 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   25858:	e0bffd17 	ldw	r2,-12(fp)
   2585c:	10800017 	ldw	r2,0(r2)
   25860:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25864:	e0fffd17 	ldw	r3,-12(fp)
   25868:	00820034 	movhi	r2,2048
   2586c:	10827b04 	addi	r2,r2,2540
   25870:	18bfcb1e 	bne	r3,r2,257a0 <__alt_data_end+0xf40257a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25874:	0005883a 	mov	r2,zero
}
   25878:	e037883a 	mov	sp,fp
   2587c:	dfc00117 	ldw	ra,4(sp)
   25880:	df000017 	ldw	fp,0(sp)
   25884:	dec00204 	addi	sp,sp,8
   25888:	f800283a 	ret

0002588c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2588c:	defffa04 	addi	sp,sp,-24
   25890:	dfc00515 	stw	ra,20(sp)
   25894:	df000415 	stw	fp,16(sp)
   25898:	dc000315 	stw	r16,12(sp)
   2589c:	df000404 	addi	fp,sp,16
   258a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   258a4:	00bffa04 	movi	r2,-24
   258a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   258ac:	e03ffc15 	stw	zero,-16(fp)
   258b0:	00002106 	br	25938 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   258b4:	04020034 	movhi	r16,2048
   258b8:	8401f304 	addi	r16,r16,1996
   258bc:	e0bffc17 	ldw	r2,-16(fp)
   258c0:	1009883a 	mov	r4,r2
   258c4:	01400304 	movi	r5,12
   258c8:	00222b80 	call	222b8 <__mulsi3>
   258cc:	8085883a 	add	r2,r16,r2
   258d0:	10800017 	ldw	r2,0(r2)
   258d4:	1000151e 	bne	r2,zero,2592c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   258d8:	04020034 	movhi	r16,2048
   258dc:	8401f304 	addi	r16,r16,1996
   258e0:	e0bffc17 	ldw	r2,-16(fp)
   258e4:	1009883a 	mov	r4,r2
   258e8:	01400304 	movi	r5,12
   258ec:	00222b80 	call	222b8 <__mulsi3>
   258f0:	8085883a 	add	r2,r16,r2
   258f4:	e0fffe17 	ldw	r3,-8(fp)
   258f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   258fc:	00820034 	movhi	r2,2048
   25900:	10827f04 	addi	r2,r2,2556
   25904:	10c00017 	ldw	r3,0(r2)
   25908:	e0bffc17 	ldw	r2,-16(fp)
   2590c:	1880040e 	bge	r3,r2,25920 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   25910:	00820034 	movhi	r2,2048
   25914:	10827f04 	addi	r2,r2,2556
   25918:	e0fffc17 	ldw	r3,-16(fp)
   2591c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25920:	e0bffc17 	ldw	r2,-16(fp)
   25924:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25928:	00000606 	br	25944 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2592c:	e0bffc17 	ldw	r2,-16(fp)
   25930:	10800044 	addi	r2,r2,1
   25934:	e0bffc15 	stw	r2,-16(fp)
   25938:	e0bffc17 	ldw	r2,-16(fp)
   2593c:	10800810 	cmplti	r2,r2,32
   25940:	103fdc1e 	bne	r2,zero,258b4 <__alt_data_end+0xf40258b4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25944:	e0bffd17 	ldw	r2,-12(fp)
}
   25948:	e6ffff04 	addi	sp,fp,-4
   2594c:	dfc00217 	ldw	ra,8(sp)
   25950:	df000117 	ldw	fp,4(sp)
   25954:	dc000017 	ldw	r16,0(sp)
   25958:	dec00304 	addi	sp,sp,12
   2595c:	f800283a 	ret

00025960 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25960:	deffff04 	addi	sp,sp,-4
   25964:	df000015 	stw	fp,0(sp)
   25968:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2596c:	e037883a 	mov	sp,fp
   25970:	df000017 	ldw	fp,0(sp)
   25974:	dec00104 	addi	sp,sp,4
   25978:	f800283a 	ret

0002597c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2597c:	defff804 	addi	sp,sp,-32
   25980:	dfc00715 	stw	ra,28(sp)
   25984:	df000615 	stw	fp,24(sp)
   25988:	dc000515 	stw	r16,20(sp)
   2598c:	df000604 	addi	fp,sp,24
   25990:	e13ffb15 	stw	r4,-20(fp)
   25994:	e17ffc15 	stw	r5,-16(fp)
   25998:	e1bffd15 	stw	r6,-12(fp)
   2599c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   259a0:	e13ffc17 	ldw	r4,-16(fp)
   259a4:	e17ffd17 	ldw	r5,-12(fp)
   259a8:	e1bffe17 	ldw	r6,-8(fp)
   259ac:	00246e40 	call	246e4 <open>
   259b0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   259b4:	e0bffa17 	ldw	r2,-24(fp)
   259b8:	10002216 	blt	r2,zero,25a44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   259bc:	04020034 	movhi	r16,2048
   259c0:	8401f304 	addi	r16,r16,1996
   259c4:	e0bffa17 	ldw	r2,-24(fp)
   259c8:	1009883a 	mov	r4,r2
   259cc:	01400304 	movi	r5,12
   259d0:	00222b80 	call	222b8 <__mulsi3>
   259d4:	8085883a 	add	r2,r16,r2
   259d8:	10c00017 	ldw	r3,0(r2)
   259dc:	e0bffb17 	ldw	r2,-20(fp)
   259e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   259e4:	04020034 	movhi	r16,2048
   259e8:	8401f304 	addi	r16,r16,1996
   259ec:	e0bffa17 	ldw	r2,-24(fp)
   259f0:	1009883a 	mov	r4,r2
   259f4:	01400304 	movi	r5,12
   259f8:	00222b80 	call	222b8 <__mulsi3>
   259fc:	8085883a 	add	r2,r16,r2
   25a00:	10800104 	addi	r2,r2,4
   25a04:	10c00017 	ldw	r3,0(r2)
   25a08:	e0bffb17 	ldw	r2,-20(fp)
   25a0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25a10:	04020034 	movhi	r16,2048
   25a14:	8401f304 	addi	r16,r16,1996
   25a18:	e0bffa17 	ldw	r2,-24(fp)
   25a1c:	1009883a 	mov	r4,r2
   25a20:	01400304 	movi	r5,12
   25a24:	00222b80 	call	222b8 <__mulsi3>
   25a28:	8085883a 	add	r2,r16,r2
   25a2c:	10800204 	addi	r2,r2,8
   25a30:	10c00017 	ldw	r3,0(r2)
   25a34:	e0bffb17 	ldw	r2,-20(fp)
   25a38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25a3c:	e13ffa17 	ldw	r4,-24(fp)
   25a40:	00249980 	call	24998 <alt_release_fd>
  }
} 
   25a44:	e6ffff04 	addi	sp,fp,-4
   25a48:	dfc00217 	ldw	ra,8(sp)
   25a4c:	df000117 	ldw	fp,4(sp)
   25a50:	dc000017 	ldw	r16,0(sp)
   25a54:	dec00304 	addi	sp,sp,12
   25a58:	f800283a 	ret

00025a5c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25a5c:	defffb04 	addi	sp,sp,-20
   25a60:	dfc00415 	stw	ra,16(sp)
   25a64:	df000315 	stw	fp,12(sp)
   25a68:	df000304 	addi	fp,sp,12
   25a6c:	e13ffd15 	stw	r4,-12(fp)
   25a70:	e17ffe15 	stw	r5,-8(fp)
   25a74:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25a78:	01020034 	movhi	r4,2048
   25a7c:	2101f604 	addi	r4,r4,2008
   25a80:	e17ffd17 	ldw	r5,-12(fp)
   25a84:	01800044 	movi	r6,1
   25a88:	01c07fc4 	movi	r7,511
   25a8c:	002597c0 	call	2597c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   25a90:	01020034 	movhi	r4,2048
   25a94:	2101f304 	addi	r4,r4,1996
   25a98:	e17ffe17 	ldw	r5,-8(fp)
   25a9c:	000d883a 	mov	r6,zero
   25aa0:	01c07fc4 	movi	r7,511
   25aa4:	002597c0 	call	2597c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25aa8:	01020034 	movhi	r4,2048
   25aac:	2101f904 	addi	r4,r4,2020
   25ab0:	e17fff17 	ldw	r5,-4(fp)
   25ab4:	01800044 	movi	r6,1
   25ab8:	01c07fc4 	movi	r7,511
   25abc:	002597c0 	call	2597c <alt_open_fd>
}  
   25ac0:	e037883a 	mov	sp,fp
   25ac4:	dfc00117 	ldw	ra,4(sp)
   25ac8:	df000017 	ldw	fp,0(sp)
   25acc:	dec00204 	addi	sp,sp,8
   25ad0:	f800283a 	ret

00025ad4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25ad4:	deffff04 	addi	sp,sp,-4
   25ad8:	df000015 	stw	fp,0(sp)
   25adc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25ae0:	000170fa 	wrctl	ienable,zero
}
   25ae4:	e037883a 	mov	sp,fp
   25ae8:	df000017 	ldw	fp,0(sp)
   25aec:	dec00104 	addi	sp,sp,4
   25af0:	f800283a 	ret

00025af4 <atexit>:
   25af4:	200b883a 	mov	r5,r4
   25af8:	000d883a 	mov	r6,zero
   25afc:	0009883a 	mov	r4,zero
   25b00:	000f883a 	mov	r7,zero
   25b04:	0025b581 	jmpi	25b58 <__register_exitproc>

00025b08 <exit>:
   25b08:	defffe04 	addi	sp,sp,-8
   25b0c:	000b883a 	mov	r5,zero
   25b10:	dc000015 	stw	r16,0(sp)
   25b14:	dfc00115 	stw	ra,4(sp)
   25b18:	2021883a 	mov	r16,r4
   25b1c:	0025c9c0 	call	25c9c <__call_exitprocs>
   25b20:	8009883a 	mov	r4,r16
   25b24:	00240b80 	call	240b8 <_exit>

00025b28 <memcmp>:
   25b28:	218d883a 	add	r6,r4,r6
   25b2c:	21800826 	beq	r4,r6,25b50 <memcmp+0x28>
   25b30:	20800003 	ldbu	r2,0(r4)
   25b34:	28c00003 	ldbu	r3,0(r5)
   25b38:	10c00226 	beq	r2,r3,25b44 <memcmp+0x1c>
   25b3c:	10c5c83a 	sub	r2,r2,r3
   25b40:	f800283a 	ret
   25b44:	21000044 	addi	r4,r4,1
   25b48:	29400044 	addi	r5,r5,1
   25b4c:	003ff706 	br	25b2c <__alt_data_end+0xf4025b2c>
   25b50:	0005883a 	mov	r2,zero
   25b54:	f800283a 	ret

00025b58 <__register_exitproc>:
   25b58:	00820034 	movhi	r2,2048
   25b5c:	defff904 	addi	sp,sp,-28
   25b60:	10827904 	addi	r2,r2,2532
   25b64:	dd400515 	stw	r21,20(sp)
   25b68:	15400017 	ldw	r21,0(r2)
   25b6c:	dc000015 	stw	r16,0(sp)
   25b70:	dd000415 	stw	r20,16(sp)
   25b74:	ac000c17 	ldw	r16,48(r21)
   25b78:	dcc00315 	stw	r19,12(sp)
   25b7c:	dc800215 	stw	r18,8(sp)
   25b80:	dc400115 	stw	r17,4(sp)
   25b84:	dfc00615 	stw	ra,24(sp)
   25b88:	2025883a 	mov	r18,r4
   25b8c:	2823883a 	mov	r17,r5
   25b90:	3029883a 	mov	r20,r6
   25b94:	3827883a 	mov	r19,r7
   25b98:	8000021e 	bne	r16,zero,25ba4 <__register_exitproc+0x4c>
   25b9c:	ac000d04 	addi	r16,r21,52
   25ba0:	ac000c15 	stw	r16,48(r21)
   25ba4:	80800117 	ldw	r2,4(r16)
   25ba8:	00c007c4 	movi	r3,31
   25bac:	18800d0e 	bge	r3,r2,25be4 <__register_exitproc+0x8c>
   25bb0:	008000b4 	movhi	r2,2
   25bb4:	108a0604 	addi	r2,r2,10264
   25bb8:	1000021e 	bne	r2,zero,25bc4 <__register_exitproc+0x6c>
   25bbc:	00bfffc4 	movi	r2,-1
   25bc0:	00002d06 	br	25c78 <__register_exitproc+0x120>
   25bc4:	01002304 	movi	r4,140
   25bc8:	00228180 	call	22818 <malloc>
   25bcc:	1021883a 	mov	r16,r2
   25bd0:	103ffa26 	beq	r2,zero,25bbc <__alt_data_end+0xf4025bbc>
   25bd4:	10000115 	stw	zero,4(r2)
   25bd8:	a8800c17 	ldw	r2,48(r21)
   25bdc:	80800015 	stw	r2,0(r16)
   25be0:	ac000c15 	stw	r16,48(r21)
   25be4:	90001b26 	beq	r18,zero,25c54 <__register_exitproc+0xfc>
   25be8:	80802217 	ldw	r2,136(r16)
   25bec:	1000091e 	bne	r2,zero,25c14 <__register_exitproc+0xbc>
   25bf0:	008000b4 	movhi	r2,2
   25bf4:	108a0604 	addi	r2,r2,10264
   25bf8:	103ff026 	beq	r2,zero,25bbc <__alt_data_end+0xf4025bbc>
   25bfc:	01004204 	movi	r4,264
   25c00:	00228180 	call	22818 <malloc>
   25c04:	103fed26 	beq	r2,zero,25bbc <__alt_data_end+0xf4025bbc>
   25c08:	10004015 	stw	zero,256(r2)
   25c0c:	10004115 	stw	zero,260(r2)
   25c10:	80802215 	stw	r2,136(r16)
   25c14:	81400117 	ldw	r5,4(r16)
   25c18:	01000044 	movi	r4,1
   25c1c:	2947883a 	add	r3,r5,r5
   25c20:	18c7883a 	add	r3,r3,r3
   25c24:	10c7883a 	add	r3,r2,r3
   25c28:	1d000015 	stw	r20,0(r3)
   25c2c:	214a983a 	sll	r5,r4,r5
   25c30:	11004017 	ldw	r4,256(r2)
   25c34:	2148b03a 	or	r4,r4,r5
   25c38:	11004015 	stw	r4,256(r2)
   25c3c:	1cc02015 	stw	r19,128(r3)
   25c40:	00c00084 	movi	r3,2
   25c44:	90c0031e 	bne	r18,r3,25c54 <__register_exitproc+0xfc>
   25c48:	10c04117 	ldw	r3,260(r2)
   25c4c:	194ab03a 	or	r5,r3,r5
   25c50:	11404115 	stw	r5,260(r2)
   25c54:	80800117 	ldw	r2,4(r16)
   25c58:	10c00044 	addi	r3,r2,1
   25c5c:	10800084 	addi	r2,r2,2
   25c60:	1085883a 	add	r2,r2,r2
   25c64:	1085883a 	add	r2,r2,r2
   25c68:	80c00115 	stw	r3,4(r16)
   25c6c:	80a1883a 	add	r16,r16,r2
   25c70:	84400015 	stw	r17,0(r16)
   25c74:	0005883a 	mov	r2,zero
   25c78:	dfc00617 	ldw	ra,24(sp)
   25c7c:	dd400517 	ldw	r21,20(sp)
   25c80:	dd000417 	ldw	r20,16(sp)
   25c84:	dcc00317 	ldw	r19,12(sp)
   25c88:	dc800217 	ldw	r18,8(sp)
   25c8c:	dc400117 	ldw	r17,4(sp)
   25c90:	dc000017 	ldw	r16,0(sp)
   25c94:	dec00704 	addi	sp,sp,28
   25c98:	f800283a 	ret

00025c9c <__call_exitprocs>:
   25c9c:	00820034 	movhi	r2,2048
   25ca0:	10827904 	addi	r2,r2,2532
   25ca4:	10800017 	ldw	r2,0(r2)
   25ca8:	defff304 	addi	sp,sp,-52
   25cac:	ddc00a15 	stw	r23,40(sp)
   25cb0:	d8800015 	stw	r2,0(sp)
   25cb4:	05c000b4 	movhi	r23,2
   25cb8:	10800c04 	addi	r2,r2,48
   25cbc:	dc800515 	stw	r18,20(sp)
   25cc0:	dfc00c15 	stw	ra,48(sp)
   25cc4:	df000b15 	stw	fp,44(sp)
   25cc8:	dd800915 	stw	r22,36(sp)
   25ccc:	dd400815 	stw	r21,32(sp)
   25cd0:	dd000715 	stw	r20,28(sp)
   25cd4:	dcc00615 	stw	r19,24(sp)
   25cd8:	dc400415 	stw	r17,16(sp)
   25cdc:	dc000315 	stw	r16,12(sp)
   25ce0:	d9000115 	stw	r4,4(sp)
   25ce4:	2825883a 	mov	r18,r5
   25ce8:	d8800215 	stw	r2,8(sp)
   25cec:	bdca0b04 	addi	r23,r23,10284
   25cf0:	d8800017 	ldw	r2,0(sp)
   25cf4:	dc400217 	ldw	r17,8(sp)
   25cf8:	14c00c17 	ldw	r19,48(r2)
   25cfc:	98004226 	beq	r19,zero,25e08 <__call_exitprocs+0x16c>
   25d00:	9c000117 	ldw	r16,4(r19)
   25d04:	00900034 	movhi	r2,16384
   25d08:	10bfffc4 	addi	r2,r2,-1
   25d0c:	9d002217 	ldw	r20,136(r19)
   25d10:	857fffc4 	addi	r21,r16,-1
   25d14:	80a1883a 	add	r16,r16,r2
   25d18:	8421883a 	add	r16,r16,r16
   25d1c:	8421883a 	add	r16,r16,r16
   25d20:	a42d883a 	add	r22,r20,r16
   25d24:	84000204 	addi	r16,r16,8
   25d28:	9c21883a 	add	r16,r19,r16
   25d2c:	a8002616 	blt	r21,zero,25dc8 <__call_exitprocs+0x12c>
   25d30:	90000326 	beq	r18,zero,25d40 <__call_exitprocs+0xa4>
   25d34:	a0002026 	beq	r20,zero,25db8 <__call_exitprocs+0x11c>
   25d38:	b1002017 	ldw	r4,128(r22)
   25d3c:	24801e1e 	bne	r4,r18,25db8 <__call_exitprocs+0x11c>
   25d40:	99000117 	ldw	r4,4(r19)
   25d44:	82000017 	ldw	r8,0(r16)
   25d48:	213fffc4 	addi	r4,r4,-1
   25d4c:	a900021e 	bne	r21,r4,25d58 <__call_exitprocs+0xbc>
   25d50:	9d400115 	stw	r21,4(r19)
   25d54:	00000106 	br	25d5c <__call_exitprocs+0xc0>
   25d58:	80000015 	stw	zero,0(r16)
   25d5c:	40001626 	beq	r8,zero,25db8 <__call_exitprocs+0x11c>
   25d60:	9f000117 	ldw	fp,4(r19)
   25d64:	a0000526 	beq	r20,zero,25d7c <__call_exitprocs+0xe0>
   25d68:	00800044 	movi	r2,1
   25d6c:	1552983a 	sll	r9,r2,r21
   25d70:	a1404017 	ldw	r5,256(r20)
   25d74:	494a703a 	and	r5,r9,r5
   25d78:	2800021e 	bne	r5,zero,25d84 <__call_exitprocs+0xe8>
   25d7c:	403ee83a 	callr	r8
   25d80:	00000906 	br	25da8 <__call_exitprocs+0x10c>
   25d84:	a1004117 	ldw	r4,260(r20)
   25d88:	4908703a 	and	r4,r9,r4
   25d8c:	2000041e 	bne	r4,zero,25da0 <__call_exitprocs+0x104>
   25d90:	d9000117 	ldw	r4,4(sp)
   25d94:	b1400017 	ldw	r5,0(r22)
   25d98:	403ee83a 	callr	r8
   25d9c:	00000206 	br	25da8 <__call_exitprocs+0x10c>
   25da0:	b1000017 	ldw	r4,0(r22)
   25da4:	403ee83a 	callr	r8
   25da8:	99000117 	ldw	r4,4(r19)
   25dac:	e13fd01e 	bne	fp,r4,25cf0 <__alt_data_end+0xf4025cf0>
   25db0:	89000017 	ldw	r4,0(r17)
   25db4:	24ffce1e 	bne	r4,r19,25cf0 <__alt_data_end+0xf4025cf0>
   25db8:	ad7fffc4 	addi	r21,r21,-1
   25dbc:	b5bfff04 	addi	r22,r22,-4
   25dc0:	843fff04 	addi	r16,r16,-4
   25dc4:	003fd906 	br	25d2c <__alt_data_end+0xf4025d2c>
   25dc8:	b8000f26 	beq	r23,zero,25e08 <__call_exitprocs+0x16c>
   25dcc:	99000117 	ldw	r4,4(r19)
   25dd0:	20000a1e 	bne	r4,zero,25dfc <__call_exitprocs+0x160>
   25dd4:	99000017 	ldw	r4,0(r19)
   25dd8:	20000826 	beq	r4,zero,25dfc <__call_exitprocs+0x160>
   25ddc:	89000015 	stw	r4,0(r17)
   25de0:	a0000226 	beq	r20,zero,25dec <__call_exitprocs+0x150>
   25de4:	a009883a 	mov	r4,r20
   25de8:	002282c0 	call	2282c <free>
   25dec:	9809883a 	mov	r4,r19
   25df0:	002282c0 	call	2282c <free>
   25df4:	8cc00017 	ldw	r19,0(r17)
   25df8:	003fc006 	br	25cfc <__alt_data_end+0xf4025cfc>
   25dfc:	9823883a 	mov	r17,r19
   25e00:	9cc00017 	ldw	r19,0(r19)
   25e04:	003fbd06 	br	25cfc <__alt_data_end+0xf4025cfc>
   25e08:	dfc00c17 	ldw	ra,48(sp)
   25e0c:	df000b17 	ldw	fp,44(sp)
   25e10:	ddc00a17 	ldw	r23,40(sp)
   25e14:	dd800917 	ldw	r22,36(sp)
   25e18:	dd400817 	ldw	r21,32(sp)
   25e1c:	dd000717 	ldw	r20,28(sp)
   25e20:	dcc00617 	ldw	r19,24(sp)
   25e24:	dc800517 	ldw	r18,20(sp)
   25e28:	dc400417 	ldw	r17,16(sp)
   25e2c:	dc000317 	ldw	r16,12(sp)
   25e30:	dec00d04 	addi	sp,sp,52
   25e34:	f800283a 	ret
   25e38:	0201ffff 	0x201ffff
   25e3c:	883a0000 	call	883a000 <_gp+0x83165c>
   25e40:	010d0bff 	0x10d0bff
   25e44:	01010002 	0x1010002
	...
   25e50:	010d0bff 	0x10d0bff
   25e54:	01010004 	movi	r4,1024
   25e58:	00000100 	call	10 <__alt_mem_onchip_memory2_0-0x1fff0>
   25e5c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25e60:	01110bff 	0x1110bff
   25e64:	01010004 	movi	r4,1024
   25e68:	7f000105 	stb	fp,4(r15)
   25e6c:	007d0000 	call	7d000 <__flash_rwdata_start+0x56ecc>
	...
