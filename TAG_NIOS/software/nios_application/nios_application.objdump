
nios_application.elf:     file format elf32-littlenios2
nios_application.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00005b80 memsz 0x00005b80 flags r-x
    LOAD off    0x00007000 vaddr 0x08000000 paddr 0x00015b80 align 2**12
         filesz 0x00000abc memsz 0x00001414 flags rw-
    LOAD off    0x00008000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00008020  2**0
                  CONTENTS
  2 .text         00005b80  00010000  00010000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000318  08000000  00015b80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000007a4  08000318  00015e98  00007318  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000958  08000abc  0001663c  00007abc  2**2
                  ALLOC, SMALL_DATA
  6 .sram_img     00000000  0001663c  0001663c  00008020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00020020  00020020  00008020  2**0
                  CONTENTS
  8 .sdram_controller 00000000  08001414  08001414  00008020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000ad8  00000000  00000000  00008048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00015b3e  00000000  00000000  00008b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006c9b  00000000  00000000  0001e65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007898  00000000  00000000  000252f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c18  00000000  00000000  0002cb94  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004d0d  00000000  00000000  0002e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000063c8  00000000  00000000  000334b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  00039884  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000008f0  00000000  00000000  00039898  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0003dd4f  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0003dd52  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003dd5e  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003dd5f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0003dd60  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0003dd6b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0003dd76  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000f  00000000  00000000  0003dd81  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000010  00000000  00000000  0003dd90  2**0
                  CONTENTS, READONLY
 28 .jdi          00004576  00000000  00000000  0003dda0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006f692  00000000  00000000  00042316  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00010000 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
08000318 l    d  .rwdata	00000000 .rwdata
08000abc l    d  .bss	00000000 .bss
0001663c l    d  .sram_img	00000000 .sram_img
00020020 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08001414 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_application_bsp//obj/HAL/src/crt0.o
00010038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 SDCard.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
00010558 l     F .text	00000058 _ZL12read_sleb128PKhPl
000105b0 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00010638 l     F .text	000000a0 _ZL21size_of_encoded_valueh
000106d8 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
000108e8 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0001093c l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
000109e4 l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
00010a6c l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00010cac l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
08000abc l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00011de8 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
08000ac8 l     O .bss	00000004 _ZL14emergency_used
08000bec l     O .bss	00000800 _ZL16emergency_buffer
08000ac4 l     O .bss	00000004 _ZL15dependents_used
08000aec l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00012200 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08000acc l     O .bss	00000004 fc_static
00012318 l     F .text	000000c0 _Unwind_RaiseException_Phase2
000123d8 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000132cc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08000720 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00013e24 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
00013fa4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014124 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08000aa0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000145dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001472c l     F .text	00000038 alt_dev_reg
08000800 l     O .rwdata	0000002c jtag_uart_0
0800082c l     O .rwdata	0000002c bt_rs232_uart
08000858 l     O .rwdata	0000002c wifi_rs232_uart
08000884 l     O .rwdata	0000002c sd_card_ic
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
00014db0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00014ef4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014f20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015178 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000152d0 l     F .text	00000050 alt_get_errno
00015320 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012048 g     F .text	00000044 __cxa_free_exception
00012e94 g     F .text	00000018 putchar
00011f4c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
000118e0 g     F .text	00000018 _ZSt10unexpectedv
00014208 g     F .text	00000078 alt_main
00012eac g     F .text	00000080 _puts_r
00012188 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00012494 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00015e98 g       *ABS*	00000000 __flash_rwdata_start
00011ebc g     F .text	00000084 __cxa_rethrow
00012420 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
0001191c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00012484 g     F .text	00000010 .hidden _Unwind_GetIP
08001414 g       *ABS*	00000000 __alt_heap_start
00013220 g     F .text	00000054 _kill_r
00012e40 g     F .text	0000004c printf
00012ff4 g     F .text	0000007c _signal_r
0800002c  w    O .rodata	00000010 _ZTV6BTUart
00012120 g     F .text	00000040 __cxa_free_dependent_exception
00011940 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
080000f0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000142a0 g     F .text	00000020 __malloc_unlock
00014c4c g     F .text	00000090 alt_up_rs232_read_fd
00012188 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00011d70 g     F .text	00000020 _ZSt18uncaught_exceptionv
000121b8 g     F .text	00000020 __cxa_deleted_virtual
000103c4 g     F .text	0000004c _ZN6BTUart5flushEv
00012160 g     F .text	00000004 _ZNSt9exceptionD2Ev
0800022c  w    O .rodata	00000014 _ZTVSt13bad_exception
000155f4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
000124d0 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00010000 g       *ABS*	00000000 __flash_exceptions_start
08000adc g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000126ac g     F .text	00000074 .hidden _Unwind_Backtrace
08000ae4 g     O .bss	00000004 alt_argv
08008a58 g       *ABS*	00000000 _gp
00013f84 g     F .text	00000020 getpid
000112e0 g     F .text	00000234 __cxa_call_unexpected
00011c04 g     F .text	00000008 __cxa_get_exception_ptr
080008d8 g     O .rwdata	00000180 alt_fd_list
08000a60  w    O .rwdata	00000008 _ZTS6BTUart
00012e8c g     F .text	00000008 _putchar_r
000125c0 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00012450 g     F .text	00000018 .hidden _Unwind_GetCFA
000118f8 g     F .text	00000014 _ZSt13set_terminatePFvvE
000150cc g     F .text	00000090 alt_find_dev
0001208c g     F .text	00000094 __cxa_allocate_dependent_exception
000115a4 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00015258 g     F .text	00000078 alt_io_redirect
00015b80 g       *ABS*	00000000 __DTOR_END__
000115bc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00014bd8 g     F .text	00000074 alt_up_rs232_read_data
00012f2c g     F .text	00000014 puts
000148ac g     F .text	000000e4 altera_avalon_jtag_uart_read
00012738 g     F .text	00000014 malloc
00012e04 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00013f40 g     F .text	00000008 .hidden __udivsi3
00013070 g     F .text	000000b4 _raise_r
08000ad8 g     O .bss	00000004 __malloc_top_pad
00013274 g     F .text	00000004 _getpid_r
0001166c g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00013124 g     F .text	000000a8 __sigtramp_r
00012f40 g     F .text	00000050 _sbrk_r
08000160  w    O .rodata	00000020 _ZTVSt9type_info
00012168 g     F .text	0000000c _ZNKSt9exception4whatEv
0001026c g     F .text	00000070 _ZN6BTUart6read_mEPhi
08000ab4 g     O .rwdata	00000004 alt_max_fd
00014b54 g     F .text	00000044 alt_up_rs232_check_parity
08000ad4 g     O .bss	00000004 __malloc_max_sbrked_mem
08000124  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00011600 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000117f4 g     F .text	00000004 _ZdlPv
0001006c g     F .text	00000048 _ZN6BTUartD1Ev
08000a98 g     O .rwdata	00000004 _global_impure_ptr
08001414 g       *ABS*	00000000 __bss_end
00012408 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00012720 g     F .text	00000018 abort
00011cc0 g     F .text	000000b0 __cxa_end_catch
00012164 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000118b8 g     F .text	00000018 _ZSt9terminatev
080008b0 g     O .rwdata	00000028 alt_dev_null
00012190 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0001003c g     F .text	00000030 _ZN6BTUartC2Ev
0001003c g     F .text	00000030 _ZN6BTUartC1Ev
08000094  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00014ed8 g     F .text	0000001c alt_dcache_flush_all
08000a74  w    O .rwdata	00000008 _ZTISt9exception
00010000 g       *ABS*	00000000 __alt_mem_sram_img
08000abc g       *ABS*	00000000 __ram_rwdata_end
00011f40 g     F .text	00000004 _ZNSt9type_infoD1Ev
08000aac g     O .rwdata	00000008 alt_dev_list
00012190 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001462c g     F .text	00000100 write
00013d74 g     F .text	00000058 _putc_r
00011f5c g     F .text	00000004 _ZNSt9type_infoD0Ev
08000318 g       *ABS*	00000000 __ram_rodata_end
00014cdc g     F .text	00000094 alt_up_rs232_write_fd
00013ff4 g     F .text	00000130 kill
00013f48 g     F .text	00000008 .hidden __umodsi3
00011f54 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0001190c g     F .text	00000010 _ZSt13get_terminatev
08001414 g       *ABS*	00000000 end
00012694 g     F .text	00000018 .hidden _Unwind_DeleteException
00011724 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00015b80 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0001152c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00014990 g     F .text	00000094 altera_avalon_jtag_uart_write
080001b4  w    O .rodata	00000012 _ZTSSt13bad_exception
00013338 g     F .text	0000056c ___vfprintf_internal_r
000139ec g     F .text	00000288 _free_r
000142c0 g     F .text	00000228 alt_printf
000159a4 g     F .text	0000019c __call_exitprocs
0001006c g     F .text	00000048 _ZN6BTUartD2Ev
08000a90 g     O .rwdata	00000004 __malloc_sbrk_base
00010000 g     F .text	0000003c _start
08000150  w    O .rodata	0000000d _ZTSSt9type_info
00012198 g     F .text	00000020 __cxa_pure_virtual
000131e0 g     F .text	0000001c signal
00014798 g     F .text	00000054 alt_sys_init
00015860 g     F .text	00000144 __register_exitproc
00011984 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00014b18 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000121d8 g     F .text	00000028 .hidden __mulsi3
08000318 g       *ABS*	00000000 __ram_rwdata_start
000124f0 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08000000 g       *ABS*	00000000 __ram_rodata_start
080013ec g     O .bss	00000028 __malloc_current_mallinfo
00012604 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
08000254  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00011f40 g     F .text	00000004 _ZNSt9type_infoD2Ev
00012194 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00011b80 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
000147ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015728 g     F .text	000000d4 alt_get_fd
08000a84  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00015830 g     F .text	00000030 memcmp
08001414 g       *ABS*	00000000 __alt_stack_base
00011940 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00012648 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00011f44 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
08000318 g     O .rwdata	00000408 __malloc_av_
08000218  w    O .rodata	00000014 _ZTVSt9exception
0001218c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00014a7c g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00015614 g     F .text	00000114 alt_find_file
00014f70 g     F .text	000000a4 alt_dev_llist_insert
00014280 g     F .text	00000020 __malloc_lock
0001452c g     F .text	000000b0 sbrk
080000c4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00011e2c g     F .text	00000090 __cxa_throw
000124b4 g     F .text	00000010 .hidden _Unwind_SetIP
00013c74 g     F .text	000000ac __sfvwrite_small_dev
08000abc g       *ABS*	00000000 __bss_start
000101b4 g     F .text	000000b8 _ZN6BTUart7write_sEh
00012de4 g     F .text	00000020 memset
00010410 g     F .text	00000148 main
08000ae8 g     O .bss	00000004 alt_envp
08000ad0 g     O .bss	00000004 __malloc_max_total_mem
0001484c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00011514 g     F .text	0000000c __cxa_get_globals_fast
0c000000 g       *ABS*	00000000 __alt_heap_limit
00010154 g     F .text	00000060 _ZN6BTUart6read_sEv
00012760 g     F .text	00000684 _malloc_r
000100b4 g     F .text	00000038 _ZN6BTUartD0Ev
00012174 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08000ab8 g     O .rwdata	00000004 alt_errno
000131fc g     F .text	00000010 _init_signal
080000b8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000102dc g     F .text	000000a0 _ZN6BTUart7write_mEPci
00012164 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00013d20 g     F .text	00000054 putc
00013e90 g     F .text	00000054 .hidden __divsi3
000138c8 g     F .text	00000124 _malloc_trim_r
00015b80 g       *ABS*	00000000 __CTOR_END__
00013278 g     F .text	00000038 strcmp
00015b80 g       *ABS*	00000000 __flash_rodata_start
08000240  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00015b80 g       *ABS*	00000000 __DTOR_LIST__
00014d70 g     F .text	00000040 alt_up_rs232_open_dev
00014764 g     F .text	00000034 alt_irq_init
00015574 g     F .text	00000080 alt_release_fd
00011950 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000157fc g     F .text	00000014 atexit
00013dcc g     F .text	00000058 _write_r
000124e8 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00011d90 g     F .text	00000058 __cxa_call_terminate
08000a9c g     O .rwdata	00000004 _impure_ptr
08000a7c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08000ae0 g     O .bss	00000004 alt_argc
00015070 g     F .text	0000005c _do_dtors
08000a58  w    O .rwdata	00000008 _ZTI6BTUart
00011930 g     F .text	00000010 _ZSt14get_unexpectedv
000124d8 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
08000aa4 g     O .rwdata	00000008 alt_fs_list
080001f4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00014a24 g     F .text	00000058 alt_up_rs232_enable_read_interrupt
000124c4 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00014b98 g     F .text	00000040 alt_up_rs232_write_data
00011c0c g     F .text	000000b4 __cxa_begin_catch
000115bc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000118d0 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
00012184 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08000a68 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00011fa4 g     F .text	000000a4 __cxa_allocate_exception
08000118  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08000abc g       *ABS*	00000000 _edata
08001414 g       *ABS*	00000000 _end
00010de0 g     F .text	00000500 __gxx_personality_sj0
00020020 g       *ABS*	00000000 __ram_exceptions_end
00012160 g     F .text	00000004 _ZNSt9exceptionD1Ev
08000a94 g     O .rwdata	00000004 __malloc_trim_threshold
00015810 g     F .text	00000020 exit
00012468 g     F .text	0000001c .hidden _Unwind_SetGR
00011ae4 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000117f8 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
00013ee4 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
080001c8  w    O .rodata	0000000c _ZTISt13bad_exception
00013f50 g     F .text	00000034 _exit
00012434 g     F .text	0000001c .hidden _Unwind_GetGR
00011520 g     F .text	0000000c __cxa_get_globals
08000a8c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
000132b0 g     F .text	0000001c strlen
00012f90 g     F .text	00000064 _init_signal_r
08000a6c  w    O .rwdata	00000008 _ZTISt9type_info
00015414 g     F .text	00000160 open
000144e8 g     F .text	00000044 alt_putchar
000100ec g     F .text	00000068 _ZN6BTUart4openEPKc
080001a4  w    O .rodata	0000000d _ZTSSt9exception
00012180 g     F .text	00000004 _ZNSt9exceptionD0Ev
0001515c g     F .text	0000001c alt_icache_flush_all
000124e0 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
000138a4 g     F .text	00000024 __vfprintf_internal
00015014 g     F .text	0000005c _do_ctors
0001320c g     F .text	00000014 __sigtramp
0001037c g     F .text	00000048 _ZN6BTUart10read_readyEv
00014ad8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00014e00 g     F .text	000000d8 close
080001d4  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00014188 g     F .text	00000080 alt_load
00011f60 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000131cc g     F .text	00000014 raise
0001274c g     F .text	00000014 free
000115cc g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   20004:	08400014 	ori	at,at,0
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00010000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   10004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10008:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   1000c:	d6a29614 	ori	gp,gp,35416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10010:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   10014:	1082af14 	ori	r2,r2,2748

    movhi r3, %hi(__bss_end)
   10018:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   1001c:	18c50514 	ori	r3,r3,5140

    beq r2, r3, 1f
   10020:	10c00326 	beq	r2,r3,10030 <_start+0x30>

0:
    stw zero, (r2)
   10024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1002c:	10fffd36 	bltu	r2,r3,10024 <__alt_data_end+0xf4010024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10030:	00141880 	call	14188 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10034:	00142080 	call	14208 <alt_main>

00010038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10038:	003fff06 	br	10038 <__alt_data_end+0xf4010038>

0001003c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
   1003c:	defffe04 	addi	sp,sp,-8
   10040:	df000115 	stw	fp,4(sp)
   10044:	df000104 	addi	fp,sp,4
   10048:	e13fff15 	stw	r4,-4(fp)
   1004c:	e0ffff17 	ldw	r3,-4(fp)
   10050:	00820034 	movhi	r2,2048
   10054:	10800d04 	addi	r2,r2,52
   10058:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   1005c:	e037883a 	mov	sp,fp
   10060:	df000017 	ldw	fp,0(sp)
   10064:	dec00104 	addi	sp,sp,4
   10068:	f800283a 	ret

0001006c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
   1006c:	defffd04 	addi	sp,sp,-12
   10070:	dfc00215 	stw	ra,8(sp)
   10074:	df000115 	stw	fp,4(sp)
   10078:	df000104 	addi	fp,sp,4
   1007c:	e13fff15 	stw	r4,-4(fp)
   10080:	e0ffff17 	ldw	r3,-4(fp)
   10084:	00820034 	movhi	r2,2048
   10088:	10800d04 	addi	r2,r2,52
   1008c:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   10090:	0005883a 	mov	r2,zero
   10094:	10000226 	beq	r2,zero,100a0 <_ZN6BTUartD1Ev+0x34>
   10098:	e13fff17 	ldw	r4,-4(fp)
   1009c:	00117f40 	call	117f4 <_ZdlPv>
   100a0:	e037883a 	mov	sp,fp
   100a4:	dfc00117 	ldw	ra,4(sp)
   100a8:	df000017 	ldw	fp,0(sp)
   100ac:	dec00204 	addi	sp,sp,8
   100b0:	f800283a 	ret

000100b4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
   100b4:	defffd04 	addi	sp,sp,-12
   100b8:	dfc00215 	stw	ra,8(sp)
   100bc:	df000115 	stw	fp,4(sp)
   100c0:	df000104 	addi	fp,sp,4
   100c4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   100c8:	e13fff17 	ldw	r4,-4(fp)
   100cc:	001006c0 	call	1006c <_ZN6BTUartD1Ev>
   100d0:	e13fff17 	ldw	r4,-4(fp)
   100d4:	00117f40 	call	117f4 <_ZdlPv>
   100d8:	e037883a 	mov	sp,fp
   100dc:	dfc00117 	ldw	ra,4(sp)
   100e0:	df000017 	ldw	fp,0(sp)
   100e4:	dec00204 	addi	sp,sp,8
   100e8:	f800283a 	ret

000100ec <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
   100ec:	defffc04 	addi	sp,sp,-16
   100f0:	dfc00315 	stw	ra,12(sp)
   100f4:	df000215 	stw	fp,8(sp)
   100f8:	df000204 	addi	fp,sp,8
   100fc:	e13ffe15 	stw	r4,-8(fp)
   10100:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
   10104:	e13fff17 	ldw	r4,-4(fp)
   10108:	0014d700 	call	14d70 <alt_up_rs232_open_dev>
   1010c:	1007883a 	mov	r3,r2
   10110:	e0bffe17 	ldw	r2,-8(fp)
   10114:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   10118:	e0bffe17 	ldw	r2,-8(fp)
   1011c:	10800117 	ldw	r2,4(r2)
   10120:	1009883a 	mov	r4,r2
   10124:	0014a240 	call	14a24 <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
   10128:	e0bffe17 	ldw	r2,-8(fp)
   1012c:	10800117 	ldw	r2,4(r2)
   10130:	1000021e 	bne	r2,zero,1013c <_ZN6BTUart4openEPKc+0x50>
        return 0;
   10134:	0005883a 	mov	r2,zero
   10138:	00000106 	br	10140 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
   1013c:	00800044 	movi	r2,1
}
   10140:	e037883a 	mov	sp,fp
   10144:	dfc00117 	ldw	ra,4(sp)
   10148:	df000017 	ldw	fp,0(sp)
   1014c:	dec00204 	addi	sp,sp,8
   10150:	f800283a 	ret

00010154 <_ZN6BTUart6read_sEv>:


unsigned char BTUart::read_s(void)
{
   10154:	defffc04 	addi	sp,sp,-16
   10158:	dfc00315 	stw	ra,12(sp)
   1015c:	df000215 	stw	fp,8(sp)
   10160:	df000204 	addi	fp,sp,8
   10164:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
   10168:	0001883a 	nop
   1016c:	e13fff17 	ldw	r4,-4(fp)
   10170:	001037c0 	call	1037c <_ZN6BTUart10read_readyEv>
   10174:	1005003a 	cmpeq	r2,r2,zero
   10178:	10803fcc 	andi	r2,r2,255
   1017c:	103ffb1e 	bne	r2,zero,1016c <__alt_data_end+0xf401016c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
   10180:	e0bfff17 	ldw	r2,-4(fp)
   10184:	10c00117 	ldw	r3,4(r2)
   10188:	e0bffe44 	addi	r2,fp,-7
   1018c:	1809883a 	mov	r4,r3
   10190:	e17ffe04 	addi	r5,fp,-8
   10194:	100d883a 	mov	r6,r2
   10198:	0014bd80 	call	14bd8 <alt_up_rs232_read_data>

    return (unsigned char) buffer;
   1019c:	e0bffe03 	ldbu	r2,-8(fp)
}
   101a0:	e037883a 	mov	sp,fp
   101a4:	dfc00117 	ldw	ra,4(sp)
   101a8:	df000017 	ldw	fp,0(sp)
   101ac:	dec00204 	addi	sp,sp,8
   101b0:	f800283a 	ret

000101b4 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
   101b4:	defffb04 	addi	sp,sp,-20
   101b8:	dfc00415 	stw	ra,16(sp)
   101bc:	df000315 	stw	fp,12(sp)
   101c0:	df000304 	addi	fp,sp,12
   101c4:	e13ffe15 	stw	r4,-8(fp)
   101c8:	2805883a 	mov	r2,r5
   101cc:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
   101d0:	e0bffe17 	ldw	r2,-8(fp)
   101d4:	10800117 	ldw	r2,4(r2)
   101d8:	1009883a 	mov	r4,r2
   101dc:	0014a7c0 	call	14a7c <alt_up_rs232_disable_read_interrupt>

    int result = 0;
   101e0:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
   101e4:	e0bffe17 	ldw	r2,-8(fp)
   101e8:	10800117 	ldw	r2,4(r2)
   101ec:	1009883a 	mov	r4,r2
   101f0:	0014b180 	call	14b18 <alt_up_rs232_get_available_space_in_write_FIFO>
   101f4:	1007883a 	mov	r3,r2
   101f8:	e0bffe17 	ldw	r2,-8(fp)
   101fc:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
   10200:	e0bffe17 	ldw	r2,-8(fp)
   10204:	10800217 	ldw	r2,8(r2)
   10208:	10802030 	cmpltui	r2,r2,128
   1020c:	10000d1e 	bne	r2,zero,10244 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
   10210:	e0bffe17 	ldw	r2,-8(fp)
   10214:	10c00117 	ldw	r3,4(r2)
   10218:	e0bfff03 	ldbu	r2,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	100b883a 	mov	r5,r2
   10224:	0014b980 	call	14b98 <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
   10228:	e0bfff03 	ldbu	r2,-4(fp)
   1022c:	01020034 	movhi	r4,2048
   10230:	21000004 	addi	r4,r4,0
   10234:	100b883a 	mov	r5,r2
   10238:	00142c00 	call	142c0 <alt_printf>
        result = 1;
   1023c:	00800044 	movi	r2,1
   10240:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   10244:	e0bffe17 	ldw	r2,-8(fp)
   10248:	10800117 	ldw	r2,4(r2)
   1024c:	1009883a 	mov	r4,r2
   10250:	0014a240 	call	14a24 <alt_up_rs232_enable_read_interrupt>
    return result;
   10254:	e0bffd17 	ldw	r2,-12(fp)
}
   10258:	e037883a 	mov	sp,fp
   1025c:	dfc00117 	ldw	ra,4(sp)
   10260:	df000017 	ldw	fp,0(sp)
   10264:	dec00204 	addi	sp,sp,8
   10268:	f800283a 	ret

0001026c <_ZN6BTUart6read_mEPhi>:


void BTUart::read_m(alt_u8 *buffer, int length)
{
   1026c:	defff904 	addi	sp,sp,-28
   10270:	dfc00615 	stw	ra,24(sp)
   10274:	df000515 	stw	fp,20(sp)
   10278:	dc000415 	stw	r16,16(sp)
   1027c:	df000504 	addi	fp,sp,20
   10280:	e13ffc15 	stw	r4,-16(fp)
   10284:	e17ffd15 	stw	r5,-12(fp)
   10288:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
   1028c:	e03ffb15 	stw	zero,-20(fp)
   10290:	00000906 	br	102b8 <_ZN6BTUart6read_mEPhi+0x4c>
		buffer[count] = read_s();
   10294:	e0bffb17 	ldw	r2,-20(fp)
   10298:	e0fffd17 	ldw	r3,-12(fp)
   1029c:	18a1883a 	add	r16,r3,r2
   102a0:	e13ffc17 	ldw	r4,-16(fp)
   102a4:	00101540 	call	10154 <_ZN6BTUart6read_sEv>
   102a8:	80800005 	stb	r2,0(r16)

void BTUart::read_m(alt_u8 *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
   102ac:	e0bffb17 	ldw	r2,-20(fp)
   102b0:	10800044 	addi	r2,r2,1
   102b4:	e0bffb15 	stw	r2,-20(fp)
   102b8:	e0fffb17 	ldw	r3,-20(fp)
   102bc:	e0bffe17 	ldw	r2,-8(fp)
   102c0:	18bff416 	blt	r3,r2,10294 <__alt_data_end+0xf4010294>
		buffer[count] = read_s();
	}
}
   102c4:	e6ffff04 	addi	sp,fp,-4
   102c8:	dfc00217 	ldw	ra,8(sp)
   102cc:	df000117 	ldw	fp,4(sp)
   102d0:	dc000017 	ldw	r16,0(sp)
   102d4:	dec00304 	addi	sp,sp,12
   102d8:	f800283a 	ret

000102dc <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
   102dc:	defffa04 	addi	sp,sp,-24
   102e0:	dfc00515 	stw	ra,20(sp)
   102e4:	df000415 	stw	fp,16(sp)
   102e8:	df000404 	addi	fp,sp,16
   102ec:	e13ffd15 	stw	r4,-12(fp)
   102f0:	e17ffe15 	stw	r5,-8(fp)
   102f4:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
   102f8:	e03ffc15 	stw	zero,-16(fp)
   102fc:	00001606 	br	10358 <_ZN6BTUart7write_mEPci+0x7c>
        printf("Write from m: %c\n", data[count]);
   10300:	e0bffc17 	ldw	r2,-16(fp)
   10304:	e0fffe17 	ldw	r3,-8(fp)
   10308:	1885883a 	add	r2,r3,r2
   1030c:	10800003 	ldbu	r2,0(r2)
   10310:	10803fcc 	andi	r2,r2,255
   10314:	1080201c 	xori	r2,r2,128
   10318:	10bfe004 	addi	r2,r2,-128
   1031c:	01020034 	movhi	r4,2048
   10320:	21000604 	addi	r4,r4,24
   10324:	100b883a 	mov	r5,r2
   10328:	0012e400 	call	12e40 <printf>
		write_s(data[count]);
   1032c:	e0bffc17 	ldw	r2,-16(fp)
   10330:	e0fffe17 	ldw	r3,-8(fp)
   10334:	1885883a 	add	r2,r3,r2
   10338:	10800003 	ldbu	r2,0(r2)
   1033c:	10803fcc 	andi	r2,r2,255
   10340:	e13ffd17 	ldw	r4,-12(fp)
   10344:	100b883a 	mov	r5,r2
   10348:	00101b40 	call	101b4 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
   1034c:	e0bffc17 	ldw	r2,-16(fp)
   10350:	10800044 	addi	r2,r2,1
   10354:	e0bffc15 	stw	r2,-16(fp)
   10358:	e0fffc17 	ldw	r3,-16(fp)
   1035c:	e0bfff17 	ldw	r2,-4(fp)
   10360:	18bfe716 	blt	r3,r2,10300 <__alt_data_end+0xf4010300>
        printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
   10364:	e0bffc17 	ldw	r2,-16(fp)
}
   10368:	e037883a 	mov	sp,fp
   1036c:	dfc00117 	ldw	ra,4(sp)
   10370:	df000017 	ldw	fp,0(sp)
   10374:	dec00204 	addi	sp,sp,8
   10378:	f800283a 	ret

0001037c <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
   1037c:	defffc04 	addi	sp,sp,-16
   10380:	dfc00315 	stw	ra,12(sp)
   10384:	df000215 	stw	fp,8(sp)
   10388:	df000204 	addi	fp,sp,8
   1038c:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
   10390:	e0bfff17 	ldw	r2,-4(fp)
   10394:	10800117 	ldw	r2,4(r2)
   10398:	1009883a 	mov	r4,r2
   1039c:	0014ad80 	call	14ad8 <alt_up_rs232_get_used_space_in_read_FIFO>
   103a0:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
   103a4:	e0bffe0b 	ldhu	r2,-8(fp)
   103a8:	1004c03a 	cmpne	r2,r2,zero
   103ac:	10803fcc 	andi	r2,r2,255
}
   103b0:	e037883a 	mov	sp,fp
   103b4:	dfc00117 	ldw	ra,4(sp)
   103b8:	df000017 	ldw	fp,0(sp)
   103bc:	dec00204 	addi	sp,sp,8
   103c0:	f800283a 	ret

000103c4 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
   103c4:	defffd04 	addi	sp,sp,-12
   103c8:	dfc00215 	stw	ra,8(sp)
   103cc:	df000115 	stw	fp,4(sp)
   103d0:	df000104 	addi	fp,sp,4
   103d4:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
   103d8:	00000206 	br	103e4 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
   103dc:	e13fff17 	ldw	r4,-4(fp)
   103e0:	00101540 	call	10154 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
   103e4:	e13fff17 	ldw	r4,-4(fp)
   103e8:	001037c0 	call	1037c <_ZN6BTUart10read_readyEv>
   103ec:	1004c03a 	cmpne	r2,r2,zero
   103f0:	10803fcc 	andi	r2,r2,255
   103f4:	103ff91e 	bne	r2,zero,103dc <__alt_data_end+0xf40103dc>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
   103f8:	0001883a 	nop
   103fc:	e037883a 	mov	sp,fp
   10400:	dfc00117 	ldw	ra,4(sp)
   10404:	df000017 	ldw	fp,0(sp)
   10408:	dec00204 	addi	sp,sp,8
   1040c:	f800283a 	ret

00010410 <main>:
#include "BTUart.h"

#define BT_UART_NAME (const char *)("/dev/bt_rs232_uart") // Qsys component name

int main()
{
   10410:	deffe304 	addi	sp,sp,-116
   10414:	dfc01c15 	stw	ra,112(sp)
   10418:	df001b15 	stw	fp,108(sp)
   1041c:	ddc01a15 	stw	r23,104(sp)
   10420:	dd801915 	stw	r22,100(sp)
   10424:	dd401815 	stw	r21,96(sp)
   10428:	dd001715 	stw	r20,92(sp)
   1042c:	dcc01615 	stw	r19,88(sp)
   10430:	dc801515 	stw	r18,84(sp)
   10434:	dc401415 	stw	r17,80(sp)
   10438:	dc001315 	stw	r16,76(sp)
   1043c:	df001b04 	addi	fp,sp,108
   10440:	00800074 	movhi	r2,1
   10444:	10837804 	addi	r2,r2,3552
   10448:	e0bff015 	stw	r2,-64(fp)
   1044c:	00800074 	movhi	r2,1
   10450:	1096d004 	addi	r2,r2,23360
   10454:	e0bff115 	stw	r2,-60(fp)
   10458:	e0bff204 	addi	r2,fp,-56
   1045c:	e0ffe504 	addi	r3,fp,-108
   10460:	10c00015 	stw	r3,0(r2)
   10464:	00c00074 	movhi	r3,1
   10468:	18c14a04 	addi	r3,r3,1320
   1046c:	10c00115 	stw	r3,4(r2)
   10470:	16c00215 	stw	sp,8(r2)
   10474:	e0bfea04 	addi	r2,fp,-88
   10478:	1009883a 	mov	r4,r2
   1047c:	00124080 	call	12408 <_Unwind_SjLj_Register>
  BTUart BT_UART;
   10480:	e0ffe704 	addi	r3,fp,-100
   10484:	00bfffc4 	movi	r2,-1
   10488:	e0bfeb15 	stw	r2,-84(fp)
   1048c:	1809883a 	mov	r4,r3
   10490:	001003c0 	call	1003c <_ZN6BTUartC1Ev>
  char c;

  int init_success = BT_UART.open(BT_UART_NAME);
   10494:	e0bfe704 	addi	r2,fp,-100
   10498:	1009883a 	mov	r4,r2
   1049c:	01420034 	movhi	r5,2048
   104a0:	00800044 	movi	r2,1
   104a4:	e0bfeb15 	stw	r2,-84(fp)
   104a8:	29400f04 	addi	r5,r5,60
   104ac:	00100ec0 	call	100ec <_ZN6BTUart4openEPKc>
   104b0:	e0bfe515 	stw	r2,-108(fp)
  BT_UART.flush();
   104b4:	e0bfe704 	addi	r2,fp,-100
   104b8:	1009883a 	mov	r4,r2
   104bc:	00103c40 	call	103c4 <_ZN6BTUart5flushEv>

  if (init_success)
   104c0:	e0bfe517 	ldw	r2,-108(fp)
   104c4:	10000326 	beq	r2,zero,104d4 <main+0xc4>
    printf("INIT SUCCESS: RS232 UART port.\n");
   104c8:	01020034 	movhi	r4,2048
   104cc:	21001404 	addi	r4,r4,80
   104d0:	0012f2c0 	call	12f2c <puts>


  printf("START READING FROM UART FIFO ...\n");
   104d4:	01020034 	movhi	r4,2048
   104d8:	00800044 	movi	r2,1
   104dc:	e0bfeb15 	stw	r2,-84(fp)
   104e0:	21001c04 	addi	r4,r4,112
   104e4:	0012f2c0 	call	12f2c <puts>

  while (1) {
    if (BT_UART.read_ready()) {
   104e8:	e0ffe704 	addi	r3,fp,-100
   104ec:	00800044 	movi	r2,1
   104f0:	e0bfeb15 	stw	r2,-84(fp)
   104f4:	1809883a 	mov	r4,r3
   104f8:	001037c0 	call	1037c <_ZN6BTUart10read_readyEv>
   104fc:	1004c03a 	cmpne	r2,r2,zero
   10500:	10803fcc 	andi	r2,r2,255
   10504:	103ff826 	beq	r2,zero,104e8 <__alt_data_end+0xf40104e8>
      c = BT_UART.read_s();
   10508:	e0bfe704 	addi	r2,fp,-100
   1050c:	1009883a 	mov	r4,r2
   10510:	00101540 	call	10154 <_ZN6BTUart6read_sEv>
   10514:	e0bfe605 	stb	r2,-104(fp)
      printf("%c", c);
   10518:	e0bfe607 	ldb	r2,-104(fp)
   1051c:	1009883a 	mov	r4,r2
   10520:	0012e940 	call	12e94 <putchar>
   10524:	003ff006 	br	104e8 <__alt_data_end+0xf40104e8>
   10528:	e7001b04 	addi	fp,fp,108
   1052c:	e0bfec17 	ldw	r2,-80(fp)
   10530:	e0bff715 	stw	r2,-36(fp)
    }
  }

  return 0;
   10534:	e0bfe704 	addi	r2,fp,-100
   10538:	e03feb15 	stw	zero,-84(fp)
   1053c:	1009883a 	mov	r4,r2
   10540:	001006c0 	call	1006c <_ZN6BTUartD1Ev>
   10544:	e0fff717 	ldw	r3,-36(fp)
   10548:	00bfffc4 	movi	r2,-1
   1054c:	e0bfeb15 	stw	r2,-84(fp)
   10550:	1809883a 	mov	r4,r3
   10554:	00126040 	call	12604 <_Unwind_SjLj_Resume>

00010558 <_ZL12read_sleb128PKhPl>:
   10558:	0011883a 	mov	r8,zero
   1055c:	000d883a 	mov	r6,zero
   10560:	21c00003 	ldbu	r7,0(r4)
   10564:	20800044 	addi	r2,r4,1
   10568:	1009883a 	mov	r4,r2
   1056c:	38c01fcc 	andi	r3,r7,127
   10570:	1986983a 	sll	r3,r3,r6
   10574:	3a403fcc 	andi	r9,r7,255
   10578:	4a40201c 	xori	r9,r9,128
   1057c:	4a7fe004 	addi	r9,r9,-128
   10580:	40d0b03a 	or	r8,r8,r3
   10584:	318001c4 	addi	r6,r6,7
   10588:	483ff516 	blt	r9,zero,10560 <__alt_data_end+0xf4010560>
   1058c:	00c007c4 	movi	r3,31
   10590:	19800536 	bltu	r3,r6,105a8 <_ZL12read_sleb128PKhPl+0x50>
   10594:	39c0100c 	andi	r7,r7,64
   10598:	38000326 	beq	r7,zero,105a8 <_ZL12read_sleb128PKhPl+0x50>
   1059c:	00ffffc4 	movi	r3,-1
   105a0:	198c983a 	sll	r6,r3,r6
   105a4:	3210b03a 	or	r8,r6,r8
   105a8:	2a000015 	stw	r8,0(r5)
   105ac:	f800283a 	ret

000105b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   105b0:	28800017 	ldw	r2,0(r5)
   105b4:	30c00017 	ldw	r3,0(r6)
   105b8:	defffb04 	addi	sp,sp,-20
   105bc:	10800217 	ldw	r2,8(r2)
   105c0:	dc400315 	stw	r17,12(sp)
   105c4:	dc000215 	stw	r16,8(sp)
   105c8:	d9400115 	stw	r5,4(sp)
   105cc:	dfc00415 	stw	ra,16(sp)
   105d0:	2021883a 	mov	r16,r4
   105d4:	d8c00015 	stw	r3,0(sp)
   105d8:	2809883a 	mov	r4,r5
   105dc:	3023883a 	mov	r17,r6
   105e0:	103ee83a 	callr	r2
   105e4:	10803fcc 	andi	r2,r2,255
   105e8:	d9400117 	ldw	r5,4(sp)
   105ec:	10000326 	beq	r2,zero,105fc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   105f0:	d8800017 	ldw	r2,0(sp)
   105f4:	10800017 	ldw	r2,0(r2)
   105f8:	d8800015 	stw	r2,0(sp)
   105fc:	80800017 	ldw	r2,0(r16)
   10600:	8009883a 	mov	r4,r16
   10604:	d80d883a 	mov	r6,sp
   10608:	10800417 	ldw	r2,16(r2)
   1060c:	01c00044 	movi	r7,1
   10610:	103ee83a 	callr	r2
   10614:	10c03fcc 	andi	r3,r2,255
   10618:	18000226 	beq	r3,zero,10624 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
   1061c:	d8c00017 	ldw	r3,0(sp)
   10620:	88c00015 	stw	r3,0(r17)
   10624:	dfc00417 	ldw	ra,16(sp)
   10628:	dc400317 	ldw	r17,12(sp)
   1062c:	dc000217 	ldw	r16,8(sp)
   10630:	dec00504 	addi	sp,sp,20
   10634:	f800283a 	ret

00010638 <_ZL21size_of_encoded_valueh>:
   10638:	deffff04 	addi	sp,sp,-4
   1063c:	dfc00015 	stw	ra,0(sp)
   10640:	00803fc4 	movi	r2,255
   10644:	20802026 	beq	r4,r2,106c8 <_ZL21size_of_encoded_valueh+0x90>
   10648:	210001cc 	andi	r4,r4,7
   1064c:	00800144 	movi	r2,5
   10650:	11001c36 	bltu	r2,r4,106c4 <_ZL21size_of_encoded_valueh+0x8c>
   10654:	200890ba 	slli	r4,r4,2
   10658:	00800074 	movhi	r2,1
   1065c:	10819b04 	addi	r2,r2,1644
   10660:	2089883a 	add	r4,r4,r2
   10664:	20800017 	ldw	r2,0(r4)
   10668:	1000683a 	jmp	r2
   1066c:	00010684 	movi	zero,1050
   10670:	000106c4 	movi	zero,1051
   10674:	00010694 	movui	zero,1050
   10678:	00010684 	movi	zero,1050
   1067c:	000106b4 	movhi	zero,1050
   10680:	000106a4 	muli	zero,zero,1050
   10684:	00800104 	movi	r2,4
   10688:	dfc00017 	ldw	ra,0(sp)
   1068c:	dec00104 	addi	sp,sp,4
   10690:	f800283a 	ret
   10694:	00800084 	movi	r2,2
   10698:	dfc00017 	ldw	ra,0(sp)
   1069c:	dec00104 	addi	sp,sp,4
   106a0:	f800283a 	ret
   106a4:	00800044 	movi	r2,1
   106a8:	dfc00017 	ldw	ra,0(sp)
   106ac:	dec00104 	addi	sp,sp,4
   106b0:	f800283a 	ret
   106b4:	00800204 	movi	r2,8
   106b8:	dfc00017 	ldw	ra,0(sp)
   106bc:	dec00104 	addi	sp,sp,4
   106c0:	f800283a 	ret
   106c4:	00127200 	call	12720 <abort>
   106c8:	0005883a 	mov	r2,zero
   106cc:	dfc00017 	ldw	ra,0(sp)
   106d0:	dec00104 	addi	sp,sp,4
   106d4:	f800283a 	ret

000106d8 <_ZL28read_encoded_value_with_basehjPKhPj>:
   106d8:	defffa04 	addi	sp,sp,-24
   106dc:	dc000315 	stw	r16,12(sp)
   106e0:	dfc00515 	stw	ra,20(sp)
   106e4:	dc400415 	stw	r17,16(sp)
   106e8:	00801404 	movi	r2,80
   106ec:	2021883a 	mov	r16,r4
   106f0:	20807526 	beq	r4,r2,108c8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
   106f4:	208003cc 	andi	r2,r4,15
   106f8:	00c00304 	movi	r3,12
   106fc:	18807136 	bltu	r3,r2,108c4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
   10700:	100490ba 	slli	r2,r2,2
   10704:	00c00074 	movhi	r3,1
   10708:	18c1c704 	addi	r3,r3,1820
   1070c:	10c5883a 	add	r2,r2,r3
   10710:	10800017 	ldw	r2,0(r2)
   10714:	2823883a 	mov	r17,r5
   10718:	1000683a 	jmp	r2
   1071c:	00010804 	movi	zero,1056
   10720:	00010834 	movhi	zero,1056
   10724:	000107ec 	andhi	zero,zero,1055
   10728:	00010750 	cmplti	zero,zero,1053
   1072c:	000107bc 	xorhi	zero,zero,1054
   10730:	00010870 	cmpltui	zero,zero,1057
   10734:	000108c4 	movi	zero,1059
   10738:	000108c4 	movi	zero,1059
   1073c:	000108c4 	movi	zero,1059
   10740:	0001087c 	xorhi	zero,zero,1057
   10744:	000108a0 	cmpeqi	zero,zero,1058
   10748:	00010750 	cmplti	zero,zero,1053
   1074c:	000107bc 	xorhi	zero,zero,1054
   10750:	30800043 	ldbu	r2,1(r6)
   10754:	30c00083 	ldbu	r3,2(r6)
   10758:	310000c3 	ldbu	r4,3(r6)
   1075c:	32000003 	ldbu	r8,0(r6)
   10760:	1004923a 	slli	r2,r2,8
   10764:	1806943a 	slli	r3,r3,16
   10768:	2008963a 	slli	r4,r4,24
   1076c:	1204b03a 	or	r2,r2,r8
   10770:	1884b03a 	or	r2,r3,r2
   10774:	2086b03a 	or	r3,r4,r2
   10778:	30800104 	addi	r2,r6,4
   1077c:	18000926 	beq	r3,zero,107a4 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   10780:	81401c0c 	andi	r5,r16,112
   10784:	01000404 	movi	r4,16
   10788:	29005526 	beq	r5,r4,108e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
   1078c:	84003fcc 	andi	r16,r16,255
   10790:	8400201c 	xori	r16,r16,128
   10794:	843fe004 	addi	r16,r16,-128
   10798:	1c47883a 	add	r3,r3,r17
   1079c:	8000010e 	bge	r16,zero,107a4 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   107a0:	18c00017 	ldw	r3,0(r3)
   107a4:	38c00015 	stw	r3,0(r7)
   107a8:	dfc00517 	ldw	ra,20(sp)
   107ac:	dc400417 	ldw	r17,16(sp)
   107b0:	dc000317 	ldw	r16,12(sp)
   107b4:	dec00604 	addi	sp,sp,24
   107b8:	f800283a 	ret
   107bc:	30800043 	ldbu	r2,1(r6)
   107c0:	30c00083 	ldbu	r3,2(r6)
   107c4:	310000c3 	ldbu	r4,3(r6)
   107c8:	32000003 	ldbu	r8,0(r6)
   107cc:	1004923a 	slli	r2,r2,8
   107d0:	1806943a 	slli	r3,r3,16
   107d4:	2008963a 	slli	r4,r4,24
   107d8:	1204b03a 	or	r2,r2,r8
   107dc:	1884b03a 	or	r2,r3,r2
   107e0:	2086b03a 	or	r3,r4,r2
   107e4:	30800204 	addi	r2,r6,8
   107e8:	003fe406 	br	1077c <__alt_data_end+0xf401077c>
   107ec:	30c00043 	ldbu	r3,1(r6)
   107f0:	32000003 	ldbu	r8,0(r6)
   107f4:	30800084 	addi	r2,r6,2
   107f8:	1806923a 	slli	r3,r3,8
   107fc:	1a06b03a 	or	r3,r3,r8
   10800:	003fde06 	br	1077c <__alt_data_end+0xf401077c>
   10804:	30800043 	ldbu	r2,1(r6)
   10808:	30c00083 	ldbu	r3,2(r6)
   1080c:	314000c3 	ldbu	r5,3(r6)
   10810:	31000003 	ldbu	r4,0(r6)
   10814:	1004923a 	slli	r2,r2,8
   10818:	1806943a 	slli	r3,r3,16
   1081c:	280a963a 	slli	r5,r5,24
   10820:	1104b03a 	or	r2,r2,r4
   10824:	1884b03a 	or	r2,r3,r2
   10828:	2886b03a 	or	r3,r5,r2
   1082c:	30800104 	addi	r2,r6,4
   10830:	003fd206 	br	1077c <__alt_data_end+0xf401077c>
   10834:	3013883a 	mov	r9,r6
   10838:	0007883a 	mov	r3,zero
   1083c:	0011883a 	mov	r8,zero
   10840:	49000003 	ldbu	r4,0(r9)
   10844:	48800044 	addi	r2,r9,1
   10848:	1013883a 	mov	r9,r2
   1084c:	21401fcc 	andi	r5,r4,127
   10850:	2a0a983a 	sll	r5,r5,r8
   10854:	21003fcc 	andi	r4,r4,255
   10858:	2100201c 	xori	r4,r4,128
   1085c:	213fe004 	addi	r4,r4,-128
   10860:	1946b03a 	or	r3,r3,r5
   10864:	420001c4 	addi	r8,r8,7
   10868:	203ff516 	blt	r4,zero,10840 <__alt_data_end+0xf4010840>
   1086c:	003fc306 	br	1077c <__alt_data_end+0xf401077c>
   10870:	30c00003 	ldbu	r3,0(r6)
   10874:	30800044 	addi	r2,r6,1
   10878:	003fc006 	br	1077c <__alt_data_end+0xf401077c>
   1087c:	3009883a 	mov	r4,r6
   10880:	d80b883a 	mov	r5,sp
   10884:	d9800115 	stw	r6,4(sp)
   10888:	d9c00215 	stw	r7,8(sp)
   1088c:	00105580 	call	10558 <_ZL12read_sleb128PKhPl>
   10890:	d8c00017 	ldw	r3,0(sp)
   10894:	d9800117 	ldw	r6,4(sp)
   10898:	d9c00217 	ldw	r7,8(sp)
   1089c:	003fb706 	br	1077c <__alt_data_end+0xf401077c>
   108a0:	30c00043 	ldbu	r3,1(r6)
   108a4:	32000003 	ldbu	r8,0(r6)
   108a8:	30800084 	addi	r2,r6,2
   108ac:	1806923a 	slli	r3,r3,8
   108b0:	1a06b03a 	or	r3,r3,r8
   108b4:	18ffffcc 	andi	r3,r3,65535
   108b8:	18e0001c 	xori	r3,r3,32768
   108bc:	18e00004 	addi	r3,r3,-32768
   108c0:	003fae06 	br	1077c <__alt_data_end+0xf401077c>
   108c4:	00127200 	call	12720 <abort>
   108c8:	318000c4 	addi	r6,r6,3
   108cc:	00bfff04 	movi	r2,-4
   108d0:	3084703a 	and	r2,r6,r2
   108d4:	10c00017 	ldw	r3,0(r2)
   108d8:	10800104 	addi	r2,r2,4
   108dc:	003fb106 	br	107a4 <__alt_data_end+0xf40107a4>
   108e0:	3023883a 	mov	r17,r6
   108e4:	003fa906 	br	1078c <__alt_data_end+0xf401078c>

000108e8 <_ZL15get_ttype_entryP16lsda_header_infom>:
   108e8:	defffc04 	addi	sp,sp,-16
   108ec:	dfc00315 	stw	ra,12(sp)
   108f0:	dc000215 	stw	r16,8(sp)
   108f4:	2021883a 	mov	r16,r4
   108f8:	21000503 	ldbu	r4,20(r4)
   108fc:	d9400115 	stw	r5,4(sp)
   10900:	00106380 	call	10638 <_ZL21size_of_encoded_valueh>
   10904:	d9400117 	ldw	r5,4(sp)
   10908:	1009883a 	mov	r4,r2
   1090c:	00121d80 	call	121d8 <__mulsi3>
   10910:	81800317 	ldw	r6,12(r16)
   10914:	81000503 	ldbu	r4,20(r16)
   10918:	81400217 	ldw	r5,8(r16)
   1091c:	308dc83a 	sub	r6,r6,r2
   10920:	d80f883a 	mov	r7,sp
   10924:	00106d80 	call	106d8 <_ZL28read_encoded_value_with_basehjPKhPj>
   10928:	d8800017 	ldw	r2,0(sp)
   1092c:	dfc00317 	ldw	ra,12(sp)
   10930:	dc000217 	ldw	r16,8(sp)
   10934:	dec00404 	addi	sp,sp,16
   10938:	f800283a 	ret

0001093c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   1093c:	defffb04 	addi	sp,sp,-20
   10940:	dc000115 	stw	r16,4(sp)
   10944:	24000317 	ldw	r16,12(r4)
   10948:	01ce303a 	nor	r7,zero,r7
   1094c:	dc800315 	stw	r18,12(sp)
   10950:	dc400215 	stw	r17,8(sp)
   10954:	dfc00415 	stw	ra,16(sp)
   10958:	2023883a 	mov	r17,r4
   1095c:	2825883a 	mov	r18,r5
   10960:	d9800015 	stw	r6,0(sp)
   10964:	81e1883a 	add	r16,r16,r7
   10968:	8009883a 	mov	r4,r16
   1096c:	000b883a 	mov	r5,zero
   10970:	000d883a 	mov	r6,zero
   10974:	20800003 	ldbu	r2,0(r4)
   10978:	84000044 	addi	r16,r16,1
   1097c:	8009883a 	mov	r4,r16
   10980:	10c01fcc 	andi	r3,r2,127
   10984:	1986983a 	sll	r3,r3,r6
   10988:	10803fcc 	andi	r2,r2,255
   1098c:	1080201c 	xori	r2,r2,128
   10990:	10bfe004 	addi	r2,r2,-128
   10994:	28cab03a 	or	r5,r5,r3
   10998:	318001c4 	addi	r6,r6,7
   1099c:	103ff516 	blt	r2,zero,10974 <__alt_data_end+0xf4010974>
   109a0:	28000e26 	beq	r5,zero,109dc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   109a4:	8809883a 	mov	r4,r17
   109a8:	00108e80 	call	108e8 <_ZL15get_ttype_entryP16lsda_header_infom>
   109ac:	1009883a 	mov	r4,r2
   109b0:	900b883a 	mov	r5,r18
   109b4:	d80d883a 	mov	r6,sp
   109b8:	00105b00 	call	105b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   109bc:	10c03fcc 	andi	r3,r2,255
   109c0:	183fe926 	beq	r3,zero,10968 <__alt_data_end+0xf4010968>
   109c4:	dfc00417 	ldw	ra,16(sp)
   109c8:	dc800317 	ldw	r18,12(sp)
   109cc:	dc400217 	ldw	r17,8(sp)
   109d0:	dc000117 	ldw	r16,4(sp)
   109d4:	dec00504 	addi	sp,sp,20
   109d8:	f800283a 	ret
   109dc:	0005883a 	mov	r2,zero
   109e0:	003ff806 	br	109c4 <__alt_data_end+0xf40109c4>

000109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   109e4:	deffff04 	addi	sp,sp,-4
   109e8:	dfc00015 	stw	ra,0(sp)
   109ec:	00803fc4 	movi	r2,255
   109f0:	20800e26 	beq	r4,r2,10a2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   109f4:	20801c0c 	andi	r2,r4,112
   109f8:	00c00804 	movi	r3,32
   109fc:	10c01726 	beq	r2,r3,10a5c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
   10a00:	18800e2e 	bgeu	r3,r2,10a3c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
   10a04:	00c01004 	movi	r3,64
   10a08:	10c01026 	beq	r2,r3,10a4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   10a0c:	00c01404 	movi	r3,80
   10a10:	10c00626 	beq	r2,r3,10a2c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   10a14:	00c00c04 	movi	r3,48
   10a18:	10c00b1e 	bne	r2,r3,10a48 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   10a1c:	2809883a 	mov	r4,r5
   10a20:	dfc00017 	ldw	ra,0(sp)
   10a24:	dec00104 	addi	sp,sp,4
   10a28:	00124e01 	jmpi	124e0 <_Unwind_GetDataRelBase>
   10a2c:	0005883a 	mov	r2,zero
   10a30:	dfc00017 	ldw	ra,0(sp)
   10a34:	dec00104 	addi	sp,sp,4
   10a38:	f800283a 	ret
   10a3c:	103ffb26 	beq	r2,zero,10a2c <__alt_data_end+0xf4010a2c>
   10a40:	00c00404 	movi	r3,16
   10a44:	10fff926 	beq	r2,r3,10a2c <__alt_data_end+0xf4010a2c>
   10a48:	00127200 	call	12720 <abort>
   10a4c:	2809883a 	mov	r4,r5
   10a50:	dfc00017 	ldw	ra,0(sp)
   10a54:	dec00104 	addi	sp,sp,4
   10a58:	00124d01 	jmpi	124d0 <_Unwind_GetRegionStart>
   10a5c:	2809883a 	mov	r4,r5
   10a60:	dfc00017 	ldw	ra,0(sp)
   10a64:	dec00104 	addi	sp,sp,4
   10a68:	00124e81 	jmpi	124e8 <_Unwind_GetTextRelBase>

00010a6c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   10a6c:	defff104 	addi	sp,sp,-60
   10a70:	dd800b15 	stw	r22,44(sp)
   10a74:	382dd23a 	srai	r22,r7,8
   10a78:	dd400a15 	stw	r21,40(sp)
   10a7c:	dd000915 	stw	r20,36(sp)
   10a80:	dfc00e15 	stw	ra,56(sp)
   10a84:	df000d15 	stw	fp,52(sp)
   10a88:	ddc00c15 	stw	r23,48(sp)
   10a8c:	dcc00815 	stw	r19,32(sp)
   10a90:	dc800715 	stw	r18,28(sp)
   10a94:	dc400615 	stw	r17,24(sp)
   10a98:	dc000515 	stw	r16,20(sp)
   10a9c:	d9c00315 	stw	r7,12(sp)
   10aa0:	d9400215 	stw	r5,8(sp)
   10aa4:	2029883a 	mov	r20,r4
   10aa8:	dd400f17 	ldw	r21,60(sp)
   10aac:	b000010e 	bge	r22,zero,10ab4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
   10ab0:	05adc83a 	sub	r22,zero,r22
   10ab4:	01000144 	movi	r4,5
   10ab8:	000b883a 	mov	r5,zero
   10abc:	d9800415 	stw	r6,16(sp)
   10ac0:	00109e40 	call	109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   10ac4:	d9800417 	ldw	r6,16(sp)
   10ac8:	100b883a 	mov	r5,r2
   10acc:	d9c00104 	addi	r7,sp,4
   10ad0:	01000144 	movi	r4,5
   10ad4:	00106d80 	call	106d8 <_ZL28read_encoded_value_with_basehjPKhPj>
   10ad8:	1009883a 	mov	r4,r2
   10adc:	017ffe44 	movi	r5,-7
   10ae0:	1021883a 	mov	r16,r2
   10ae4:	00121d80 	call	121d8 <__mulsi3>
   10ae8:	1027883a 	mov	r19,r2
   10aec:	002f883a 	mov	r23,zero
   10af0:	84400003 	ldbu	r17,0(r16)
   10af4:	8009883a 	mov	r4,r16
   10af8:	014001c4 	movi	r5,7
   10afc:	00121d80 	call	121d8 <__mulsi3>
   10b00:	88c01fcc 	andi	r3,r17,127
   10b04:	14c5883a 	add	r2,r2,r19
   10b08:	1886983a 	sll	r3,r3,r2
   10b0c:	8c403fcc 	andi	r17,r17,255
   10b10:	8c40201c 	xori	r17,r17,128
   10b14:	8c7fe004 	addi	r17,r17,-128
   10b18:	84000044 	addi	r16,r16,1
   10b1c:	b8eeb03a 	or	r23,r23,r3
   10b20:	883ff316 	blt	r17,zero,10af0 <__alt_data_end+0xf4010af0>
   10b24:	85e1883a 	add	r16,r16,r23
   10b28:	8009883a 	mov	r4,r16
   10b2c:	017ffe44 	movi	r5,-7
   10b30:	00121d80 	call	121d8 <__mulsi3>
   10b34:	102f883a 	mov	r23,r2
   10b38:	8007883a 	mov	r3,r16
   10b3c:	0025883a 	mov	r18,zero
   10b40:	1cc00003 	ldbu	r19,0(r3)
   10b44:	1809883a 	mov	r4,r3
   10b48:	014001c4 	movi	r5,7
   10b4c:	1c400044 	addi	r17,r3,1
   10b50:	00121d80 	call	121d8 <__mulsi3>
   10b54:	98c01fcc 	andi	r3,r19,127
   10b58:	15c5883a 	add	r2,r2,r23
   10b5c:	1884983a 	sll	r2,r3,r2
   10b60:	9cc03fcc 	andi	r19,r19,255
   10b64:	9cc0201c 	xori	r19,r19,128
   10b68:	9cffe004 	addi	r19,r19,-128
   10b6c:	8807883a 	mov	r3,r17
   10b70:	90a4b03a 	or	r18,r18,r2
   10b74:	983ff216 	blt	r19,zero,10b40 <__alt_data_end+0xf4010b40>
   10b78:	b7003fcc 	andi	fp,r22,255
   10b7c:	e73fffc4 	addi	fp,fp,-1
   10b80:	8f39883a 	add	fp,r17,fp
   10b84:	840000c4 	addi	r16,r16,3
   10b88:	848d883a 	add	r6,r16,r18
   10b8c:	e009883a 	mov	r4,fp
   10b90:	017ffe44 	movi	r5,-7
   10b94:	04ffff04 	movi	r19,-4
   10b98:	34e6703a 	and	r19,r6,r19
   10b9c:	00121d80 	call	121d8 <__mulsi3>
   10ba0:	002f883a 	mov	r23,zero
   10ba4:	102d883a 	mov	r22,r2
   10ba8:	e4400003 	ldbu	r17,0(fp)
   10bac:	e009883a 	mov	r4,fp
   10bb0:	014001c4 	movi	r5,7
   10bb4:	00121d80 	call	121d8 <__mulsi3>
   10bb8:	88c01fcc 	andi	r3,r17,127
   10bbc:	1585883a 	add	r2,r2,r22
   10bc0:	1886983a 	sll	r3,r3,r2
   10bc4:	8c403fcc 	andi	r17,r17,255
   10bc8:	8c40201c 	xori	r17,r17,128
   10bcc:	e4000044 	addi	r16,fp,1
   10bd0:	8c7fe004 	addi	r17,r17,-128
   10bd4:	b8eeb03a 	or	r23,r23,r3
   10bd8:	8039883a 	mov	fp,r16
   10bdc:	883ff216 	blt	r17,zero,10ba8 <__alt_data_end+0xf4010ba8>
   10be0:	d8800317 	ldw	r2,12(sp)
   10be4:	14803fcc 	andi	r18,r2,255
   10be8:	b8002326 	beq	r23,zero,10c78 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
   10bec:	9009883a 	mov	r4,r18
   10bf0:	00106380 	call	10638 <_ZL21size_of_encoded_valueh>
   10bf4:	1009883a 	mov	r4,r2
   10bf8:	b97fffc4 	addi	r5,r23,-1
   10bfc:	00121d80 	call	121d8 <__mulsi3>
   10c00:	9009883a 	mov	r4,r18
   10c04:	a80b883a 	mov	r5,r21
   10c08:	14cd883a 	add	r6,r2,r19
   10c0c:	d80f883a 	mov	r7,sp
   10c10:	00106d80 	call	106d8 <_ZL28read_encoded_value_with_basehjPKhPj>
   10c14:	d9000017 	ldw	r4,0(sp)
   10c18:	a00b883a 	mov	r5,r20
   10c1c:	d9800204 	addi	r6,sp,8
   10c20:	00105b00 	call	105b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   10c24:	10c03fcc 	andi	r3,r2,255
   10c28:	1800141e 	bne	r3,zero,10c7c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
   10c2c:	8009883a 	mov	r4,r16
   10c30:	017ffe44 	movi	r5,-7
   10c34:	00121d80 	call	121d8 <__mulsi3>
   10c38:	102d883a 	mov	r22,r2
   10c3c:	002f883a 	mov	r23,zero
   10c40:	84400003 	ldbu	r17,0(r16)
   10c44:	8009883a 	mov	r4,r16
   10c48:	014001c4 	movi	r5,7
   10c4c:	00121d80 	call	121d8 <__mulsi3>
   10c50:	88c01fcc 	andi	r3,r17,127
   10c54:	1585883a 	add	r2,r2,r22
   10c58:	1886983a 	sll	r3,r3,r2
   10c5c:	8c403fcc 	andi	r17,r17,255
   10c60:	8c40201c 	xori	r17,r17,128
   10c64:	8c7fe004 	addi	r17,r17,-128
   10c68:	84000044 	addi	r16,r16,1
   10c6c:	b8eeb03a 	or	r23,r23,r3
   10c70:	883ff316 	blt	r17,zero,10c40 <__alt_data_end+0xf4010c40>
   10c74:	003fdc06 	br	10be8 <__alt_data_end+0xf4010be8>
   10c78:	0005883a 	mov	r2,zero
   10c7c:	dfc00e17 	ldw	ra,56(sp)
   10c80:	df000d17 	ldw	fp,52(sp)
   10c84:	ddc00c17 	ldw	r23,48(sp)
   10c88:	dd800b17 	ldw	r22,44(sp)
   10c8c:	dd400a17 	ldw	r21,40(sp)
   10c90:	dd000917 	ldw	r20,36(sp)
   10c94:	dcc00817 	ldw	r19,32(sp)
   10c98:	dc800717 	ldw	r18,28(sp)
   10c9c:	dc400617 	ldw	r17,24(sp)
   10ca0:	dc000517 	ldw	r16,20(sp)
   10ca4:	dec00f04 	addi	sp,sp,60
   10ca8:	f800283a 	ret

00010cac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   10cac:	defffb04 	addi	sp,sp,-20
   10cb0:	dcc00315 	stw	r19,12(sp)
   10cb4:	dc400115 	stw	r17,4(sp)
   10cb8:	dc000015 	stw	r16,0(sp)
   10cbc:	dfc00415 	stw	ra,16(sp)
   10cc0:	dc800215 	stw	r18,8(sp)
   10cc4:	2027883a 	mov	r19,r4
   10cc8:	2821883a 	mov	r16,r5
   10ccc:	3023883a 	mov	r17,r6
   10cd0:	20003f26 	beq	r4,zero,10dd0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   10cd4:	00124d00 	call	124d0 <_Unwind_GetRegionStart>
   10cd8:	88800015 	stw	r2,0(r17)
   10cdc:	84800003 	ldbu	r18,0(r16)
   10ce0:	00c03fc4 	movi	r3,255
   10ce4:	84000044 	addi	r16,r16,1
   10ce8:	90c03726 	beq	r18,r3,10dc8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   10cec:	9009883a 	mov	r4,r18
   10cf0:	980b883a 	mov	r5,r19
   10cf4:	00109e40 	call	109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   10cf8:	800d883a 	mov	r6,r16
   10cfc:	9009883a 	mov	r4,r18
   10d00:	100b883a 	mov	r5,r2
   10d04:	89c00104 	addi	r7,r17,4
   10d08:	00106d80 	call	106d8 <_ZL28read_encoded_value_with_basehjPKhPj>
   10d0c:	1021883a 	mov	r16,r2
   10d10:	80c00003 	ldbu	r3,0(r16)
   10d14:	01003fc4 	movi	r4,255
   10d18:	80800044 	addi	r2,r16,1
   10d1c:	88c00505 	stb	r3,20(r17)
   10d20:	18c03fcc 	andi	r3,r3,255
   10d24:	19002c26 	beq	r3,r4,10dd8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   10d28:	100d883a 	mov	r6,r2
   10d2c:	000f883a 	mov	r7,zero
   10d30:	000b883a 	mov	r5,zero
   10d34:	30c00003 	ldbu	r3,0(r6)
   10d38:	10800044 	addi	r2,r2,1
   10d3c:	100d883a 	mov	r6,r2
   10d40:	19001fcc 	andi	r4,r3,127
   10d44:	2148983a 	sll	r4,r4,r5
   10d48:	18c03fcc 	andi	r3,r3,255
   10d4c:	18c0201c 	xori	r3,r3,128
   10d50:	18ffe004 	addi	r3,r3,-128
   10d54:	390eb03a 	or	r7,r7,r4
   10d58:	294001c4 	addi	r5,r5,7
   10d5c:	183ff516 	blt	r3,zero,10d34 <__alt_data_end+0xf4010d34>
   10d60:	11cf883a 	add	r7,r2,r7
   10d64:	89c00315 	stw	r7,12(r17)
   10d68:	10c00003 	ldbu	r3,0(r2)
   10d6c:	000f883a 	mov	r7,zero
   10d70:	10800044 	addi	r2,r2,1
   10d74:	88c00545 	stb	r3,21(r17)
   10d78:	000b883a 	mov	r5,zero
   10d7c:	10c00003 	ldbu	r3,0(r2)
   10d80:	10800044 	addi	r2,r2,1
   10d84:	19001fcc 	andi	r4,r3,127
   10d88:	2148983a 	sll	r4,r4,r5
   10d8c:	18c03fcc 	andi	r3,r3,255
   10d90:	18c0201c 	xori	r3,r3,128
   10d94:	18ffe004 	addi	r3,r3,-128
   10d98:	390eb03a 	or	r7,r7,r4
   10d9c:	294001c4 	addi	r5,r5,7
   10da0:	183ff616 	blt	r3,zero,10d7c <__alt_data_end+0xf4010d7c>
   10da4:	11cf883a 	add	r7,r2,r7
   10da8:	89c00415 	stw	r7,16(r17)
   10dac:	dfc00417 	ldw	ra,16(sp)
   10db0:	dcc00317 	ldw	r19,12(sp)
   10db4:	dc800217 	ldw	r18,8(sp)
   10db8:	dc400117 	ldw	r17,4(sp)
   10dbc:	dc000017 	ldw	r16,0(sp)
   10dc0:	dec00504 	addi	sp,sp,20
   10dc4:	f800283a 	ret
   10dc8:	88800115 	stw	r2,4(r17)
   10dcc:	003fd006 	br	10d10 <__alt_data_end+0xf4010d10>
   10dd0:	0005883a 	mov	r2,zero
   10dd4:	003fc006 	br	10cd8 <__alt_data_end+0xf4010cd8>
   10dd8:	88000315 	stw	zero,12(r17)
   10ddc:	003fe206 	br	10d68 <__alt_data_end+0xf4010d68>

00010de0 <__gxx_personality_sj0>:
   10de0:	00800074 	movhi	r2,1
   10de4:	deffde04 	addi	sp,sp,-136
   10de8:	10837804 	addi	r2,r2,3552
   10dec:	d8801015 	stw	r2,64(sp)
   10df0:	00800074 	movhi	r2,1
   10df4:	1096d204 	addi	r2,r2,23368
   10df8:	d8801115 	stw	r2,68(sp)
   10dfc:	00800074 	movhi	r2,1
   10e00:	1084b304 	addi	r2,r2,4812
   10e04:	d9001715 	stw	r4,92(sp)
   10e08:	d9000a04 	addi	r4,sp,40
   10e0c:	d8801315 	stw	r2,76(sp)
   10e10:	dfc02115 	stw	ra,132(sp)
   10e14:	df002015 	stw	fp,128(sp)
   10e18:	dec01215 	stw	sp,72(sp)
   10e1c:	dec01415 	stw	sp,80(sp)
   10e20:	d9401a15 	stw	r5,104(sp)
   10e24:	d9801815 	stw	r6,96(sp)
   10e28:	d9c01915 	stw	r7,100(sp)
   10e2c:	00124080 	call	12408 <_Unwind_SjLj_Register>
   10e30:	d8c01717 	ldw	r3,92(sp)
   10e34:	d8000915 	stw	zero,36(sp)
   10e38:	d8000815 	stw	zero,32(sp)
   10e3c:	00800044 	movi	r2,1
   10e40:	18800926 	beq	r3,r2,10e68 <__gxx_personality_sj0+0x88>
   10e44:	014000c4 	movi	r5,3
   10e48:	d9401715 	stw	r5,92(sp)
   10e4c:	d9000a04 	addi	r4,sp,40
   10e50:	00124200 	call	12420 <_Unwind_SjLj_Unregister>
   10e54:	d8801717 	ldw	r2,92(sp)
   10e58:	dfc02117 	ldw	ra,132(sp)
   10e5c:	df002017 	ldw	fp,128(sp)
   10e60:	dec02204 	addi	sp,sp,136
   10e64:	f800283a 	ret
   10e68:	d9401817 	ldw	r5,96(sp)
   10e6c:	012f3574 	movhi	r4,48341
   10e70:	21354004 	addi	r4,r4,-11008
   10e74:	2909883a 	add	r4,r5,r4
   10e78:	2145803a 	cmpltu	r2,r4,r5
   10e7c:	d9401917 	ldw	r5,100(sp)
   10e80:	d8c01b05 	stb	r3,108(sp)
   10e84:	00ee2cb4 	movhi	r3,47282
   10e88:	18eaaf04 	addi	r3,r3,-21828
   10e8c:	28c7883a 	add	r3,r5,r3
   10e90:	10c5883a 	add	r2,r2,r3
   10e94:	10003526 	beq	r2,zero,10f6c <__gxx_personality_sj0+0x18c>
   10e98:	d8c01a17 	ldw	r3,104(sp)
   10e9c:	00800184 	movi	r2,6
   10ea0:	18803826 	beq	r3,r2,10f84 <__gxx_personality_sj0+0x1a4>
   10ea4:	d9002317 	ldw	r4,140(sp)
   10ea8:	00ffffc4 	movi	r3,-1
   10eac:	d8c00b15 	stw	r3,44(sp)
   10eb0:	00124c40 	call	124c4 <_Unwind_GetLanguageSpecificData>
   10eb4:	d8801915 	stw	r2,100(sp)
   10eb8:	1000a326 	beq	r2,zero,11148 <__gxx_personality_sj0+0x368>
   10ebc:	d9002317 	ldw	r4,140(sp)
   10ec0:	d9401917 	ldw	r5,100(sp)
   10ec4:	d80d883a 	mov	r6,sp
   10ec8:	00bfffc4 	movi	r2,-1
   10ecc:	d8800b15 	stw	r2,44(sp)
   10ed0:	0010cac0 	call	10cac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   10ed4:	d9000503 	ldbu	r4,20(sp)
   10ed8:	d9402317 	ldw	r5,140(sp)
   10edc:	d8801715 	stw	r2,92(sp)
   10ee0:	00109e40 	call	109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   10ee4:	d9002317 	ldw	r4,140(sp)
   10ee8:	d9400804 	addi	r5,sp,32
   10eec:	d8800215 	stw	r2,8(sp)
   10ef0:	00124940 	call	12494 <_Unwind_GetIPInfo>
   10ef4:	d8c00817 	ldw	r3,32(sp)
   10ef8:	1800011e 	bne	r3,zero,10f00 <__gxx_personality_sj0+0x120>
   10efc:	10bfffc4 	addi	r2,r2,-1
   10f00:	10009116 	blt	r2,zero,11148 <__gxx_personality_sj0+0x368>
   10f04:	10004c1e 	bne	r2,zero,11038 <__gxx_personality_sj0+0x258>
   10f08:	d8001c15 	stw	zero,112(sp)
   10f0c:	00800044 	movi	r2,1
   10f10:	d8001715 	stw	zero,92(sp)
   10f14:	d8001815 	stw	zero,96(sp)
   10f18:	d9001a17 	ldw	r4,104(sp)
   10f1c:	20c0004c 	andi	r3,r4,1
   10f20:	18008c26 	beq	r3,zero,11154 <__gxx_personality_sj0+0x374>
   10f24:	00c00084 	movi	r3,2
   10f28:	10c08726 	beq	r2,r3,11148 <__gxx_personality_sj0+0x368>
   10f2c:	d8801b03 	ldbu	r2,108(sp)
   10f30:	1000d21e 	bne	r2,zero,1127c <__gxx_personality_sj0+0x49c>
   10f34:	d9402217 	ldw	r5,136(sp)
   10f38:	d8801717 	ldw	r2,92(sp)
   10f3c:	d8c01817 	ldw	r3,96(sp)
   10f40:	d9001917 	ldw	r4,100(sp)
   10f44:	28bffb15 	stw	r2,-20(r5)
   10f48:	d8800917 	ldw	r2,36(sp)
   10f4c:	28fffc15 	stw	r3,-16(r5)
   10f50:	00c00184 	movi	r3,6
   10f54:	28bfff15 	stw	r2,-4(r5)
   10f58:	d8801c17 	ldw	r2,112(sp)
   10f5c:	293ffd15 	stw	r4,-12(r5)
   10f60:	d8c01715 	stw	r3,92(sp)
   10f64:	28bffe15 	stw	r2,-8(r5)
   10f68:	003fb806 	br	10e4c <__alt_data_end+0xf4010e4c>
   10f6c:	d8801717 	ldw	r2,92(sp)
   10f70:	113fc936 	bltu	r2,r4,10e98 <__alt_data_end+0xf4010e98>
   10f74:	d8c01a17 	ldw	r3,104(sp)
   10f78:	d8001b05 	stb	zero,108(sp)
   10f7c:	00800184 	movi	r2,6
   10f80:	18bfc81e 	bne	r3,r2,10ea4 <__alt_data_end+0xf4010ea4>
   10f84:	d8801b03 	ldbu	r2,108(sp)
   10f88:	103fc61e 	bne	r2,zero,10ea4 <__alt_data_end+0xf4010ea4>
   10f8c:	d9002217 	ldw	r4,136(sp)
   10f90:	d9402217 	ldw	r5,136(sp)
   10f94:	d8802217 	ldw	r2,136(sp)
   10f98:	213ffe17 	ldw	r4,-8(r4)
   10f9c:	297ffb17 	ldw	r5,-20(r5)
   10fa0:	10bffd17 	ldw	r2,-12(r2)
   10fa4:	d9001c15 	stw	r4,112(sp)
   10fa8:	d9401715 	stw	r5,92(sp)
   10fac:	d8801915 	stw	r2,100(sp)
   10fb0:	20008726 	beq	r4,zero,111d0 <__gxx_personality_sj0+0x3f0>
   10fb4:	d8801717 	ldw	r2,92(sp)
   10fb8:	10006f0e 	bge	r2,zero,11178 <__gxx_personality_sj0+0x398>
   10fbc:	d9002317 	ldw	r4,140(sp)
   10fc0:	d9401917 	ldw	r5,100(sp)
   10fc4:	d80d883a 	mov	r6,sp
   10fc8:	00bfffc4 	movi	r2,-1
   10fcc:	d8800b15 	stw	r2,44(sp)
   10fd0:	0010cac0 	call	10cac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   10fd4:	d9000503 	ldbu	r4,20(sp)
   10fd8:	d9402317 	ldw	r5,140(sp)
   10fdc:	00109e40 	call	109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   10fe0:	d9000503 	ldbu	r4,20(sp)
   10fe4:	d9402317 	ldw	r5,140(sp)
   10fe8:	d8800215 	stw	r2,8(sp)
   10fec:	00109e40 	call	109e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   10ff0:	d8c02217 	ldw	r3,136(sp)
   10ff4:	18bffe15 	stw	r2,-8(r3)
   10ff8:	00005f06 	br	11178 <__gxx_personality_sj0+0x398>
   10ffc:	000f883a 	mov	r7,zero
   11000:	000d883a 	mov	r6,zero
   11004:	19000003 	ldbu	r4,0(r3)
   11008:	18c00044 	addi	r3,r3,1
   1100c:	d8c01715 	stw	r3,92(sp)
   11010:	21401fcc 	andi	r5,r4,127
   11014:	298a983a 	sll	r5,r5,r6
   11018:	21003fcc 	andi	r4,r4,255
   1101c:	2100201c 	xori	r4,r4,128
   11020:	213fe004 	addi	r4,r4,-128
   11024:	394eb03a 	or	r7,r7,r5
   11028:	318001c4 	addi	r6,r6,7
   1102c:	203ff516 	blt	r4,zero,11004 <__alt_data_end+0xf4011004>
   11030:	10bfffc4 	addi	r2,r2,-1
   11034:	10000e26 	beq	r2,zero,11070 <__gxx_personality_sj0+0x290>
   11038:	d8c01717 	ldw	r3,92(sp)
   1103c:	0011883a 	mov	r8,zero
   11040:	000d883a 	mov	r6,zero
   11044:	19000003 	ldbu	r4,0(r3)
   11048:	18c00044 	addi	r3,r3,1
   1104c:	21401fcc 	andi	r5,r4,127
   11050:	298a983a 	sll	r5,r5,r6
   11054:	21003fcc 	andi	r4,r4,255
   11058:	2100201c 	xori	r4,r4,128
   1105c:	213fe004 	addi	r4,r4,-128
   11060:	4150b03a 	or	r8,r8,r5
   11064:	318001c4 	addi	r6,r6,7
   11068:	203ff616 	blt	r4,zero,11044 <__alt_data_end+0xf4011044>
   1106c:	003fe306 	br	10ffc <__alt_data_end+0xf4010ffc>
   11070:	42000044 	addi	r8,r8,1
   11074:	da001c15 	stw	r8,112(sp)
   11078:	38004f26 	beq	r7,zero,111b8 <__gxx_personality_sj0+0x3d8>
   1107c:	d8800417 	ldw	r2,16(sp)
   11080:	39ffffc4 	addi	r7,r7,-1
   11084:	11c5883a 	add	r2,r2,r7
   11088:	d8801815 	stw	r2,96(sp)
   1108c:	40002e26 	beq	r8,zero,11148 <__gxx_personality_sj0+0x368>
   11090:	10004b26 	beq	r2,zero,111c0 <__gxx_personality_sj0+0x3e0>
   11094:	d8c01a17 	ldw	r3,104(sp)
   11098:	18c0020c 	andi	r3,r3,8
   1109c:	d8c01e15 	stw	r3,120(sp)
   110a0:	1800801e 	bne	r3,zero,112a4 <__gxx_personality_sj0+0x4c4>
   110a4:	d8801b03 	ldbu	r2,108(sp)
   110a8:	1000821e 	bne	r2,zero,112b4 <__gxx_personality_sj0+0x4d4>
   110ac:	d9002217 	ldw	r4,136(sp)
   110b0:	20800017 	ldw	r2,0(r4)
   110b4:	1080004c 	andi	r2,r2,1
   110b8:	1000821e 	bne	r2,zero,112c4 <__gxx_personality_sj0+0x4e4>
   110bc:	d9402217 	ldw	r5,136(sp)
   110c0:	28800504 	addi	r2,r5,20
   110c4:	d8800915 	stw	r2,36(sp)
   110c8:	10bff017 	ldw	r2,-64(r2)
   110cc:	d8801d15 	stw	r2,116(sp)
   110d0:	d9001b03 	ldbu	r4,108(sp)
   110d4:	d8001b45 	stb	zero,109(sp)
   110d8:	d9001f15 	stw	r4,124(sp)
   110dc:	00000e06 	br	11118 <__gxx_personality_sj0+0x338>
   110e0:	01c03d0e 	bge	zero,r7,111d8 <__gxx_personality_sj0+0x3f8>
   110e4:	017fffc4 	movi	r5,-1
   110e8:	d9400b15 	stw	r5,44(sp)
   110ec:	d809883a 	mov	r4,sp
   110f0:	380b883a 	mov	r5,r7
   110f4:	00108e80 	call	108e8 <_ZL15get_ttype_entryP16lsda_header_infom>
   110f8:	10004f26 	beq	r2,zero,11238 <__gxx_personality_sj0+0x458>
   110fc:	d8c01d17 	ldw	r3,116(sp)
   11100:	1800611e 	bne	r3,zero,11288 <__gxx_personality_sj0+0x4a8>
   11104:	d8800617 	ldw	r2,24(sp)
   11108:	10005726 	beq	r2,zero,11268 <__gxx_personality_sj0+0x488>
   1110c:	d9401717 	ldw	r5,92(sp)
   11110:	2885883a 	add	r2,r5,r2
   11114:	d8801815 	stw	r2,96(sp)
   11118:	d9001817 	ldw	r4,96(sp)
   1111c:	d9400704 	addi	r5,sp,28
   11120:	00105580 	call	10558 <_ZL12read_sleb128PKhPl>
   11124:	1009883a 	mov	r4,r2
   11128:	d9400604 	addi	r5,sp,24
   1112c:	d8801715 	stw	r2,92(sp)
   11130:	00105580 	call	10558 <_ZL12read_sleb128PKhPl>
   11134:	d9c00717 	ldw	r7,28(sp)
   11138:	383fe91e 	bne	r7,zero,110e0 <__alt_data_end+0xf40110e0>
   1113c:	01000044 	movi	r4,1
   11140:	d9001b45 	stb	r4,109(sp)
   11144:	003fef06 	br	11104 <__alt_data_end+0xf4011104>
   11148:	01000204 	movi	r4,8
   1114c:	d9001715 	stw	r4,92(sp)
   11150:	003f3e06 	br	10e4c <__alt_data_end+0xf4010e4c>
   11154:	d9001a17 	ldw	r4,104(sp)
   11158:	20c0020c 	andi	r3,r4,8
   1115c:	1800021e 	bne	r3,zero,11168 <__gxx_personality_sj0+0x388>
   11160:	d8c01b03 	ldbu	r3,108(sp)
   11164:	18001826 	beq	r3,zero,111c8 <__gxx_personality_sj0+0x3e8>
   11168:	00c00044 	movi	r3,1
   1116c:	10c05926 	beq	r2,r3,112d4 <__gxx_personality_sj0+0x4f4>
   11170:	d9401717 	ldw	r5,92(sp)
   11174:	28005816 	blt	r5,zero,112d8 <__gxx_personality_sj0+0x4f8>
   11178:	d9802217 	ldw	r6,136(sp)
   1117c:	d9002317 	ldw	r4,140(sp)
   11180:	00bfffc4 	movi	r2,-1
   11184:	000b883a 	mov	r5,zero
   11188:	d8800b15 	stw	r2,44(sp)
   1118c:	00124680 	call	12468 <_Unwind_SetGR>
   11190:	d9002317 	ldw	r4,140(sp)
   11194:	d9801717 	ldw	r6,92(sp)
   11198:	01400044 	movi	r5,1
   1119c:	00124680 	call	12468 <_Unwind_SetGR>
   111a0:	d9002317 	ldw	r4,140(sp)
   111a4:	d9401c17 	ldw	r5,112(sp)
   111a8:	00124b40 	call	124b4 <_Unwind_SetIP>
   111ac:	010001c4 	movi	r4,7
   111b0:	d9001715 	stw	r4,92(sp)
   111b4:	003f2506 	br	10e4c <__alt_data_end+0xf4010e4c>
   111b8:	d8c01c17 	ldw	r3,112(sp)
   111bc:	183fe226 	beq	r3,zero,11148 <__alt_data_end+0xf4011148>
   111c0:	00800084 	movi	r2,2
   111c4:	003f5206 	br	10f10 <__alt_data_end+0xf4010f10>
   111c8:	00c00044 	movi	r3,1
   111cc:	10ff791e 	bne	r2,r3,10fb4 <__alt_data_end+0xf4010fb4>
   111d0:	d9002217 	ldw	r4,136(sp)
   111d4:	0011d900 	call	11d90 <__cxa_call_terminate>
   111d8:	d9001d17 	ldw	r4,116(sp)
   111dc:	20000426 	beq	r4,zero,111f0 <__gxx_personality_sj0+0x410>
   111e0:	d9401e17 	ldw	r5,120(sp)
   111e4:	2800021e 	bne	r5,zero,111f0 <__gxx_personality_sj0+0x410>
   111e8:	d8801f17 	ldw	r2,124(sp)
   111ec:	10001626 	beq	r2,zero,11248 <__gxx_personality_sj0+0x468>
   111f0:	d8c00317 	ldw	r3,12(sp)
   111f4:	01ce303a 	nor	r7,zero,r7
   111f8:	000d883a 	mov	r6,zero
   111fc:	19c7883a 	add	r3,r3,r7
   11200:	000b883a 	mov	r5,zero
   11204:	18800003 	ldbu	r2,0(r3)
   11208:	18c00044 	addi	r3,r3,1
   1120c:	11001fcc 	andi	r4,r2,127
   11210:	2148983a 	sll	r4,r4,r5
   11214:	10803fcc 	andi	r2,r2,255
   11218:	1080201c 	xori	r2,r2,128
   1121c:	10bfe004 	addi	r2,r2,-128
   11220:	310cb03a 	or	r6,r6,r4
   11224:	294001c4 	addi	r5,r5,7
   11228:	103ff616 	blt	r2,zero,11204 <__alt_data_end+0xf4011204>
   1122c:	3005003a 	cmpeq	r2,r6,zero
   11230:	10803fcc 	andi	r2,r2,255
   11234:	103fb326 	beq	r2,zero,11104 <__alt_data_end+0xf4011104>
   11238:	d8800717 	ldw	r2,28(sp)
   1123c:	d8801715 	stw	r2,92(sp)
   11240:	008000c4 	movi	r2,3
   11244:	003f3406 	br	10f18 <__alt_data_end+0xf4010f18>
   11248:	d9401d17 	ldw	r5,116(sp)
   1124c:	d9800917 	ldw	r6,36(sp)
   11250:	00ffffc4 	movi	r3,-1
   11254:	d809883a 	mov	r4,sp
   11258:	d8c00b15 	stw	r3,44(sp)
   1125c:	001093c0 	call	1093c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   11260:	1080005c 	xori	r2,r2,1
   11264:	003ff206 	br	11230 <__alt_data_end+0xf4011230>
   11268:	d8801b43 	ldbu	r2,109(sp)
   1126c:	103fb626 	beq	r2,zero,11148 <__alt_data_end+0xf4011148>
   11270:	d8001715 	stw	zero,92(sp)
   11274:	00800084 	movi	r2,2
   11278:	003f2706 	br	10f18 <__alt_data_end+0xf4010f18>
   1127c:	00800184 	movi	r2,6
   11280:	d8801715 	stw	r2,92(sp)
   11284:	003ef106 	br	10e4c <__alt_data_end+0xf4010e4c>
   11288:	1009883a 	mov	r4,r2
   1128c:	180b883a 	mov	r5,r3
   11290:	d9800904 	addi	r6,sp,36
   11294:	00105b00 	call	105b0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   11298:	10803fcc 	andi	r2,r2,255
   1129c:	103fe61e 	bne	r2,zero,11238 <__alt_data_end+0xf4011238>
   112a0:	003f9806 	br	11104 <__alt_data_end+0xf4011104>
   112a4:	00820034 	movhi	r2,2048
   112a8:	10829f04 	addi	r2,r2,2684
   112ac:	d8801d15 	stw	r2,116(sp)
   112b0:	003f8706 	br	110d0 <__alt_data_end+0xf40110d0>
   112b4:	00c20034 	movhi	r3,2048
   112b8:	18c2a104 	addi	r3,r3,2692
   112bc:	d8c01d15 	stw	r3,116(sp)
   112c0:	003f8306 	br	110d0 <__alt_data_end+0xf40110d0>
   112c4:	20bff517 	ldw	r2,-44(r4)
   112c8:	003f7e06 	br	110c4 <__alt_data_end+0xf40110c4>
   112cc:	d9000c17 	ldw	r4,48(sp)
   112d0:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   112d4:	00118b80 	call	118b8 <_ZSt9terminatev>
   112d8:	d8c00b15 	stw	r3,44(sp)
   112dc:	00118e00 	call	118e0 <_ZSt10unexpectedv>

000112e0 <__cxa_call_unexpected>:
   112e0:	00800074 	movhi	r2,1
   112e4:	deffe604 	addi	sp,sp,-104
   112e8:	10837804 	addi	r2,r2,3552
   112ec:	d8800d15 	stw	r2,52(sp)
   112f0:	00800074 	movhi	r2,1
   112f4:	1096d604 	addi	r2,r2,23384
   112f8:	d8800e15 	stw	r2,56(sp)
   112fc:	d8800104 	addi	r2,sp,4
   11300:	d8800f15 	stw	r2,60(sp)
   11304:	00800074 	movhi	r2,1
   11308:	1084db04 	addi	r2,r2,4972
   1130c:	d9001415 	stw	r4,80(sp)
   11310:	d9000704 	addi	r4,sp,28
   11314:	dfc01915 	stw	ra,100(sp)
   11318:	d8801015 	stw	r2,64(sp)
   1131c:	df001815 	stw	fp,96(sp)
   11320:	dec01115 	stw	sp,68(sp)
   11324:	00124080 	call	12408 <_Unwind_SjLj_Register>
   11328:	d9001417 	ldw	r4,80(sp)
   1132c:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   11330:	d8c01417 	ldw	r3,80(sp)
   11334:	18bffe17 	ldw	r2,-8(r3)
   11338:	193ff717 	ldw	r4,-36(r3)
   1133c:	18fffd17 	ldw	r3,-12(r3)
   11340:	d8800315 	stw	r2,12(sp)
   11344:	d8c01615 	stw	r3,88(sp)
   11348:	d8c01417 	ldw	r3,80(sp)
   1134c:	18fffb17 	ldw	r3,-20(r3)
   11350:	d8c01515 	stw	r3,84(sp)
   11354:	d8c01417 	ldw	r3,80(sp)
   11358:	18fff817 	ldw	r3,-32(r3)
   1135c:	d8c01415 	stw	r3,80(sp)
   11360:	00c00044 	movi	r3,1
   11364:	d8c00815 	stw	r3,32(sp)
   11368:	00118d00 	call	118d0 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1136c:	d8c00917 	ldw	r3,36(sp)
   11370:	d8800817 	ldw	r2,32(sp)
   11374:	d8c01715 	stw	r3,92(sp)
   11378:	10000a26 	beq	r2,zero,113a4 <__cxa_call_unexpected+0xc4>
   1137c:	10bfffc4 	addi	r2,r2,-1
   11380:	10000126 	beq	r2,zero,11388 <__cxa_call_unexpected+0xa8>
   11384:	003da0fa 	break	3
   11388:	d8000815 	stw	zero,32(sp)
   1138c:	0011cc00 	call	11cc0 <__cxa_end_catch>
   11390:	0011cc00 	call	11cc0 <__cxa_end_catch>
   11394:	d9001717 	ldw	r4,92(sp)
   11398:	00bfffc4 	movi	r2,-1
   1139c:	d8800815 	stw	r2,32(sp)
   113a0:	00126040 	call	12604 <_Unwind_SjLj_Resume>
   113a4:	d9001717 	ldw	r4,92(sp)
   113a8:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   113ac:	00115140 	call	11514 <__cxa_get_globals_fast>
   113b0:	10800017 	ldw	r2,0(r2)
   113b4:	10c00b17 	ldw	r3,44(r2)
   113b8:	18c0004c 	andi	r3,r3,1
   113bc:	18001e26 	beq	r3,zero,11438 <__cxa_call_unexpected+0x158>
   113c0:	10800017 	ldw	r2,0(r2)
   113c4:	d8801715 	stw	r2,92(sp)
   113c8:	d8801517 	ldw	r2,84(sp)
   113cc:	00802b0e 	bge	zero,r2,1147c <__cxa_call_unexpected+0x19c>
   113d0:	d8c01717 	ldw	r3,92(sp)
   113d4:	d8800317 	ldw	r2,12(sp)
   113d8:	d9801617 	ldw	r6,88(sp)
   113dc:	193ff017 	ldw	r4,-64(r3)
   113e0:	d9c01517 	ldw	r7,84(sp)
   113e4:	d8800015 	stw	r2,0(sp)
   113e8:	180b883a 	mov	r5,r3
   113ec:	00800084 	movi	r2,2
   113f0:	d8800815 	stw	r2,32(sp)
   113f4:	0010a6c0 	call	10a6c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   113f8:	10803fcc 	andi	r2,r2,255
   113fc:	10001e1e 	bne	r2,zero,11478 <__cxa_call_unexpected+0x198>
   11400:	d8800317 	ldw	r2,12(sp)
   11404:	d9801617 	ldw	r6,88(sp)
   11408:	d9c01517 	ldw	r7,84(sp)
   1140c:	01020034 	movhi	r4,2048
   11410:	d8800015 	stw	r2,0(sp)
   11414:	21007204 	addi	r4,r4,456
   11418:	00800084 	movi	r2,2
   1141c:	000b883a 	mov	r5,zero
   11420:	d8800815 	stw	r2,32(sp)
   11424:	0010a6c0 	call	10a6c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   11428:	10803fcc 	andi	r2,r2,255
   1142c:	1000051e 	bne	r2,zero,11444 <__cxa_call_unexpected+0x164>
   11430:	d9001417 	ldw	r4,80(sp)
   11434:	00117f80 	call	117f8 <_ZN10__cxxabiv111__terminateEPFvvE>
   11438:	10801004 	addi	r2,r2,64
   1143c:	d8801715 	stw	r2,92(sp)
   11440:	003fe106 	br	113c8 <__alt_data_end+0xf40113c8>
   11444:	01000104 	movi	r4,4
   11448:	0011fa40 	call	11fa4 <__cxa_allocate_exception>
   1144c:	00c20034 	movhi	r3,2048
   11450:	18c08d04 	addi	r3,r3,564
   11454:	01420034 	movhi	r5,2048
   11458:	01800074 	movhi	r6,1
   1145c:	10c00015 	stw	r3,0(r2)
   11460:	29407204 	addi	r5,r5,456
   11464:	00c00084 	movi	r3,2
   11468:	31885904 	addi	r6,r6,8548
   1146c:	1009883a 	mov	r4,r2
   11470:	d8c00815 	stw	r3,32(sp)
   11474:	0011e2c0 	call	11e2c <__cxa_throw>
   11478:	0011ebc0 	call	11ebc <__cxa_rethrow>
   1147c:	d9401617 	ldw	r5,88(sp)
   11480:	00800084 	movi	r2,2
   11484:	0009883a 	mov	r4,zero
   11488:	d9800104 	addi	r6,sp,4
   1148c:	d8800815 	stw	r2,32(sp)
   11490:	0010cac0 	call	10cac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   11494:	d8801717 	ldw	r2,92(sp)
   11498:	d9c01517 	ldw	r7,84(sp)
   1149c:	d9000104 	addi	r4,sp,4
   114a0:	117ff017 	ldw	r5,-64(r2)
   114a4:	100d883a 	mov	r6,r2
   114a8:	001093c0 	call	1093c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   114ac:	10803fcc 	andi	r2,r2,255
   114b0:	1000171e 	bne	r2,zero,11510 <__cxa_call_unexpected+0x230>
   114b4:	d9c01517 	ldw	r7,84(sp)
   114b8:	01420034 	movhi	r5,2048
   114bc:	00800084 	movi	r2,2
   114c0:	29407204 	addi	r5,r5,456
   114c4:	d9000104 	addi	r4,sp,4
   114c8:	000d883a 	mov	r6,zero
   114cc:	d8800815 	stw	r2,32(sp)
   114d0:	001093c0 	call	1093c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   114d4:	10803fcc 	andi	r2,r2,255
   114d8:	103fd526 	beq	r2,zero,11430 <__alt_data_end+0xf4011430>
   114dc:	01000104 	movi	r4,4
   114e0:	0011fa40 	call	11fa4 <__cxa_allocate_exception>
   114e4:	00c20034 	movhi	r3,2048
   114e8:	18c08d04 	addi	r3,r3,564
   114ec:	01420034 	movhi	r5,2048
   114f0:	01800074 	movhi	r6,1
   114f4:	10c00015 	stw	r3,0(r2)
   114f8:	29407204 	addi	r5,r5,456
   114fc:	00c00084 	movi	r3,2
   11500:	31885904 	addi	r6,r6,8548
   11504:	1009883a 	mov	r4,r2
   11508:	d8c00815 	stw	r3,32(sp)
   1150c:	0011e2c0 	call	11e2c <__cxa_throw>
   11510:	0011ebc0 	call	11ebc <__cxa_rethrow>

00011514 <__cxa_get_globals_fast>:
   11514:	00820034 	movhi	r2,2048
   11518:	1082af04 	addi	r2,r2,2748
   1151c:	f800283a 	ret

00011520 <__cxa_get_globals>:
   11520:	00820034 	movhi	r2,2048
   11524:	1082af04 	addi	r2,r2,2748
   11528:	f800283a 	ret

0001152c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1152c:	20800017 	ldw	r2,0(r4)
   11530:	defffa04 	addi	sp,sp,-24
   11534:	dc000415 	stw	r16,16(sp)
   11538:	10800617 	ldw	r2,24(r2)
   1153c:	3021883a 	mov	r16,r6
   11540:	31800017 	ldw	r6,0(r6)
   11544:	00c00404 	movi	r3,16
   11548:	d8c00215 	stw	r3,8(sp)
   1154c:	dfc00515 	stw	ra,20(sp)
   11550:	d8000015 	stw	zero,0(sp)
   11554:	d8000115 	stw	zero,4(sp)
   11558:	d8000315 	stw	zero,12(sp)
   1155c:	d80f883a 	mov	r7,sp
   11560:	103ee83a 	callr	r2
   11564:	d8800117 	ldw	r2,4(sp)
   11568:	00c00184 	movi	r3,6
   1156c:	1080018c 	andi	r2,r2,6
   11570:	10c00526 	beq	r2,r3,11588 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   11574:	0005883a 	mov	r2,zero
   11578:	dfc00517 	ldw	ra,20(sp)
   1157c:	dc000417 	ldw	r16,16(sp)
   11580:	dec00604 	addi	sp,sp,24
   11584:	f800283a 	ret
   11588:	d8c00017 	ldw	r3,0(sp)
   1158c:	00800044 	movi	r2,1
   11590:	80c00015 	stw	r3,0(r16)
   11594:	dfc00517 	ldw	ra,20(sp)
   11598:	dc000417 	ldw	r16,16(sp)
   1159c:	dec00604 	addi	sp,sp,24
   115a0:	f800283a 	ret

000115a4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   115a4:	d8800017 	ldw	r2,0(sp)
   115a8:	11800226 	beq	r2,r6,115b4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   115ac:	00800044 	movi	r2,1
   115b0:	f800283a 	ret
   115b4:	00800184 	movi	r2,6
   115b8:	f800283a 	ret

000115bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   115bc:	00820034 	movhi	r2,2048
   115c0:	10803304 	addi	r2,r2,204
   115c4:	20800015 	stw	r2,0(r4)
   115c8:	0011f401 	jmpi	11f40 <_ZNSt9type_infoD1Ev>

000115cc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   115cc:	defffe04 	addi	sp,sp,-8
   115d0:	00820034 	movhi	r2,2048
   115d4:	dc000015 	stw	r16,0(sp)
   115d8:	dfc00115 	stw	ra,4(sp)
   115dc:	10803304 	addi	r2,r2,204
   115e0:	20800015 	stw	r2,0(r4)
   115e4:	2021883a 	mov	r16,r4
   115e8:	0011f400 	call	11f40 <_ZNSt9type_infoD1Ev>
   115ec:	8009883a 	mov	r4,r16
   115f0:	dfc00117 	ldw	ra,4(sp)
   115f4:	dc000017 	ldw	r16,0(sp)
   115f8:	dec00204 	addi	sp,sp,8
   115fc:	00117f41 	jmpi	117f4 <_ZdlPv>

00011600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   11600:	21000117 	ldw	r4,4(r4)
   11604:	29400117 	ldw	r5,4(r5)
   11608:	defffd04 	addi	sp,sp,-12
   1160c:	dc400115 	stw	r17,4(sp)
   11610:	dc000015 	stw	r16,0(sp)
   11614:	dfc00215 	stw	ra,8(sp)
   11618:	3023883a 	mov	r17,r6
   1161c:	3821883a 	mov	r16,r7
   11620:	21400b26 	beq	r4,r5,11650 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   11624:	20c00007 	ldb	r3,0(r4)
   11628:	00800a84 	movi	r2,42
   1162c:	18800226 	beq	r3,r2,11638 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   11630:	00132780 	call	13278 <strcmp>
   11634:	10000626 	beq	r2,zero,11650 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   11638:	0005883a 	mov	r2,zero
   1163c:	dfc00217 	ldw	ra,8(sp)
   11640:	dc400117 	ldw	r17,4(sp)
   11644:	dc000017 	ldw	r16,0(sp)
   11648:	dec00304 	addi	sp,sp,12
   1164c:	f800283a 	ret
   11650:	00800204 	movi	r2,8
   11654:	80800315 	stw	r2,12(r16)
   11658:	00800184 	movi	r2,6
   1165c:	80800115 	stw	r2,4(r16)
   11660:	84400015 	stw	r17,0(r16)
   11664:	00800044 	movi	r2,1
   11668:	003ff406 	br	1163c <__alt_data_end+0xf401163c>

0001166c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1166c:	20800117 	ldw	r2,4(r4)
   11670:	28c00117 	ldw	r3,4(r5)
   11674:	10c02926 	beq	r2,r3,1171c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   11678:	defffb04 	addi	sp,sp,-20
   1167c:	dcc00315 	stw	r19,12(sp)
   11680:	dc800215 	stw	r18,8(sp)
   11684:	dc400115 	stw	r17,4(sp)
   11688:	dc000015 	stw	r16,0(sp)
   1168c:	dfc00415 	stw	ra,16(sp)
   11690:	2821883a 	mov	r16,r5
   11694:	11400007 	ldb	r5,0(r2)
   11698:	2025883a 	mov	r18,r4
   1169c:	01000a84 	movi	r4,42
   116a0:	3823883a 	mov	r17,r7
   116a4:	3027883a 	mov	r19,r6
   116a8:	29000426 	beq	r5,r4,116bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
   116ac:	1009883a 	mov	r4,r2
   116b0:	180b883a 	mov	r5,r3
   116b4:	00132780 	call	13278 <strcmp>
   116b8:	10000a26 	beq	r2,zero,116e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
   116bc:	008000c4 	movi	r2,3
   116c0:	14400a2e 	bgeu	r2,r17,116ec <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   116c4:	0005883a 	mov	r2,zero
   116c8:	dfc00417 	ldw	ra,16(sp)
   116cc:	dcc00317 	ldw	r19,12(sp)
   116d0:	dc800217 	ldw	r18,8(sp)
   116d4:	dc400117 	ldw	r17,4(sp)
   116d8:	dc000017 	ldw	r16,0(sp)
   116dc:	dec00504 	addi	sp,sp,20
   116e0:	f800283a 	ret
   116e4:	00800044 	movi	r2,1
   116e8:	003ff706 	br	116c8 <__alt_data_end+0xf40116c8>
   116ec:	80800017 	ldw	r2,0(r16)
   116f0:	8009883a 	mov	r4,r16
   116f4:	900b883a 	mov	r5,r18
   116f8:	10800517 	ldw	r2,20(r2)
   116fc:	980d883a 	mov	r6,r19
   11700:	dfc00417 	ldw	ra,16(sp)
   11704:	dcc00317 	ldw	r19,12(sp)
   11708:	dc800217 	ldw	r18,8(sp)
   1170c:	dc400117 	ldw	r17,4(sp)
   11710:	dc000017 	ldw	r16,0(sp)
   11714:	dec00504 	addi	sp,sp,20
   11718:	1000683a 	jmp	r2
   1171c:	00800044 	movi	r2,1
   11720:	f800283a 	ret

00011724 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   11724:	defffb04 	addi	sp,sp,-20
   11728:	dc400315 	stw	r17,12(sp)
   1172c:	d8800717 	ldw	r2,28(sp)
   11730:	dc400517 	ldw	r17,20(sp)
   11734:	dc000215 	stw	r16,8(sp)
   11738:	dfc00415 	stw	ra,16(sp)
   1173c:	24000117 	ldw	r16,4(r4)
   11740:	88801026 	beq	r17,r2,11784 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   11744:	39400117 	ldw	r5,4(r7)
   11748:	81401d26 	beq	r16,r5,117c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   1174c:	80c00007 	ldb	r3,0(r16)
   11750:	00800a84 	movi	r2,42
   11754:	18800526 	beq	r3,r2,1176c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   11758:	8009883a 	mov	r4,r16
   1175c:	d9800115 	stw	r6,4(sp)
   11760:	00132780 	call	13278 <strcmp>
   11764:	d9800117 	ldw	r6,4(sp)
   11768:	10001526 	beq	r2,zero,117c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   1176c:	0005883a 	mov	r2,zero
   11770:	dfc00417 	ldw	ra,16(sp)
   11774:	dc400317 	ldw	r17,12(sp)
   11778:	dc000217 	ldw	r16,8(sp)
   1177c:	dec00504 	addi	sp,sp,20
   11780:	f800283a 	ret
   11784:	d8800617 	ldw	r2,24(sp)
   11788:	11400117 	ldw	r5,4(r2)
   1178c:	81401326 	beq	r16,r5,117dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   11790:	80c00007 	ldb	r3,0(r16)
   11794:	00800a84 	movi	r2,42
   11798:	18801326 	beq	r3,r2,117e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   1179c:	8009883a 	mov	r4,r16
   117a0:	d9800115 	stw	r6,4(sp)
   117a4:	d9c00015 	stw	r7,0(sp)
   117a8:	00132780 	call	13278 <strcmp>
   117ac:	d9800117 	ldw	r6,4(sp)
   117b0:	d9c00017 	ldw	r7,0(sp)
   117b4:	10000926 	beq	r2,zero,117dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   117b8:	39400117 	ldw	r5,4(r7)
   117bc:	817fe61e 	bne	r16,r5,11758 <__alt_data_end+0xf4011758>
   117c0:	d8800817 	ldw	r2,32(sp)
   117c4:	d8c00817 	ldw	r3,32(sp)
   117c8:	14400015 	stw	r17,0(r2)
   117cc:	11800115 	stw	r6,4(r2)
   117d0:	00800044 	movi	r2,1
   117d4:	18800315 	stw	r2,12(r3)
   117d8:	003fe406 	br	1176c <__alt_data_end+0xf401176c>
   117dc:	d8800817 	ldw	r2,32(sp)
   117e0:	11800215 	stw	r6,8(r2)
   117e4:	003fe106 	br	1176c <__alt_data_end+0xf401176c>
   117e8:	38800117 	ldw	r2,4(r7)
   117ec:	80bfdf1e 	bne	r16,r2,1176c <__alt_data_end+0xf401176c>
   117f0:	003ff306 	br	117c0 <__alt_data_end+0xf40117c0>

000117f4 <_ZdlPv>:
   117f4:	001274c1 	jmpi	1274c <free>

000117f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   117f8:	00800074 	movhi	r2,1
   117fc:	deffef04 	addi	sp,sp,-68
   11800:	10837804 	addi	r2,r2,3552
   11804:	d8800615 	stw	r2,24(sp)
   11808:	00800074 	movhi	r2,1
   1180c:	1096da04 	addi	r2,r2,23400
   11810:	d8800715 	stw	r2,28(sp)
   11814:	00800074 	movhi	r2,1
   11818:	10861404 	addi	r2,r2,6224
   1181c:	d9000d15 	stw	r4,52(sp)
   11820:	d809883a 	mov	r4,sp
   11824:	d8800915 	stw	r2,36(sp)
   11828:	dfc01015 	stw	ra,64(sp)
   1182c:	df000f15 	stw	fp,60(sp)
   11830:	dec00815 	stw	sp,32(sp)
   11834:	dec00a15 	stw	sp,40(sp)
   11838:	00124080 	call	12408 <_Unwind_SjLj_Register>
   1183c:	00800044 	movi	r2,1
   11840:	d8800115 	stw	r2,4(sp)
   11844:	d8800d17 	ldw	r2,52(sp)
   11848:	103ee83a 	callr	r2
   1184c:	00127200 	call	12720 <abort>
   11850:	d8c00217 	ldw	r3,8(sp)
   11854:	d8800117 	ldw	r2,4(sp)
   11858:	d8c00d15 	stw	r3,52(sp)
   1185c:	d8c00317 	ldw	r3,12(sp)
   11860:	d8c00e15 	stw	r3,56(sp)
   11864:	10000b26 	beq	r2,zero,11894 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   11868:	10bfffc4 	addi	r2,r2,-1
   1186c:	10000126 	beq	r2,zero,11874 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   11870:	003da0fa 	break	3
   11874:	d8000115 	stw	zero,4(sp)
   11878:	0011cc00 	call	11cc0 <__cxa_end_catch>
   1187c:	d8c00e17 	ldw	r3,56(sp)
   11880:	00bfffc4 	movi	r2,-1
   11884:	18800826 	beq	r3,r2,118a8 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   11888:	d9000d17 	ldw	r4,52(sp)
   1188c:	d8800115 	stw	r2,4(sp)
   11890:	00126040 	call	12604 <_Unwind_SjLj_Resume>
   11894:	d9000d17 	ldw	r4,52(sp)
   11898:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   1189c:	00800084 	movi	r2,2
   118a0:	d8800115 	stw	r2,4(sp)
   118a4:	00127200 	call	12720 <abort>
   118a8:	d8800e17 	ldw	r2,56(sp)
   118ac:	d9000d17 	ldw	r4,52(sp)
   118b0:	d8800115 	stw	r2,4(sp)
   118b4:	00112e00 	call	112e0 <__cxa_call_unexpected>

000118b8 <_ZSt9terminatev>:
   118b8:	00820034 	movhi	r2,2048
   118bc:	10829a04 	addi	r2,r2,2664
   118c0:	11000017 	ldw	r4,0(r2)
   118c4:	deffff04 	addi	sp,sp,-4
   118c8:	dfc00015 	stw	ra,0(sp)
   118cc:	00117f80 	call	117f8 <_ZN10__cxxabiv111__terminateEPFvvE>

000118d0 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   118d0:	deffff04 	addi	sp,sp,-4
   118d4:	dfc00015 	stw	ra,0(sp)
   118d8:	203ee83a 	callr	r4
   118dc:	00118b80 	call	118b8 <_ZSt9terminatev>

000118e0 <_ZSt10unexpectedv>:
   118e0:	00820034 	movhi	r2,2048
   118e4:	1082a304 	addi	r2,r2,2700
   118e8:	11000017 	ldw	r4,0(r2)
   118ec:	deffff04 	addi	sp,sp,-4
   118f0:	dfc00015 	stw	ra,0(sp)
   118f4:	00118d00 	call	118d0 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000118f8 <_ZSt13set_terminatePFvvE>:
   118f8:	00c20034 	movhi	r3,2048
   118fc:	18c29a04 	addi	r3,r3,2664
   11900:	18800017 	ldw	r2,0(r3)
   11904:	19000015 	stw	r4,0(r3)
   11908:	f800283a 	ret

0001190c <_ZSt13get_terminatev>:
   1190c:	00820034 	movhi	r2,2048
   11910:	10829a04 	addi	r2,r2,2664
   11914:	10800017 	ldw	r2,0(r2)
   11918:	f800283a 	ret

0001191c <_ZSt14set_unexpectedPFvvE>:
   1191c:	00c20034 	movhi	r3,2048
   11920:	18c2a304 	addi	r3,r3,2700
   11924:	18800017 	ldw	r2,0(r3)
   11928:	19000015 	stw	r4,0(r3)
   1192c:	f800283a 	ret

00011930 <_ZSt14get_unexpectedv>:
   11930:	00820034 	movhi	r2,2048
   11934:	1082a304 	addi	r2,r2,2700
   11938:	10800017 	ldw	r2,0(r2)
   1193c:	f800283a 	ret

00011940 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   11940:	00820034 	movhi	r2,2048
   11944:	10804b04 	addi	r2,r2,300
   11948:	20800015 	stw	r2,0(r4)
   1194c:	00115bc1 	jmpi	115bc <_ZN10__cxxabiv117__class_type_infoD1Ev>

00011950 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   11950:	defffe04 	addi	sp,sp,-8
   11954:	00820034 	movhi	r2,2048
   11958:	dc000015 	stw	r16,0(sp)
   1195c:	dfc00115 	stw	ra,4(sp)
   11960:	10804b04 	addi	r2,r2,300
   11964:	20800015 	stw	r2,0(r4)
   11968:	2021883a 	mov	r16,r4
   1196c:	00115bc0 	call	115bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   11970:	8009883a 	mov	r4,r16
   11974:	dfc00117 	ldw	ra,4(sp)
   11978:	dc000017 	ldw	r16,0(sp)
   1197c:	dec00204 	addi	sp,sp,8
   11980:	00117f41 	jmpi	117f4 <_ZdlPv>

00011984 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   11984:	defff504 	addi	sp,sp,-44
   11988:	dc000115 	stw	r16,4(sp)
   1198c:	38800117 	ldw	r2,4(r7)
   11990:	24000117 	ldw	r16,4(r4)
   11994:	ddc00815 	stw	r23,32(sp)
   11998:	dd800715 	stw	r22,28(sp)
   1199c:	dd400615 	stw	r21,24(sp)
   119a0:	dd000515 	stw	r20,20(sp)
   119a4:	dcc00415 	stw	r19,16(sp)
   119a8:	dc800315 	stw	r18,12(sp)
   119ac:	dc400215 	stw	r17,8(sp)
   119b0:	dfc00a15 	stw	ra,40(sp)
   119b4:	df000915 	stw	fp,36(sp)
   119b8:	202b883a 	mov	r21,r4
   119bc:	382d883a 	mov	r22,r7
   119c0:	2823883a 	mov	r17,r5
   119c4:	dc800b17 	ldw	r18,44(sp)
   119c8:	ddc00c17 	ldw	r23,48(sp)
   119cc:	dd000d17 	ldw	r20,52(sp)
   119d0:	dcc00e17 	ldw	r19,56(sp)
   119d4:	80801f26 	beq	r16,r2,11a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   119d8:	87000007 	ldb	fp,0(r16)
   119dc:	00c00a84 	movi	r3,42
   119e0:	e0c00626 	beq	fp,r3,119fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   119e4:	8009883a 	mov	r4,r16
   119e8:	100b883a 	mov	r5,r2
   119ec:	d9800015 	stw	r6,0(sp)
   119f0:	00132780 	call	13278 <strcmp>
   119f4:	d9800017 	ldw	r6,0(sp)
   119f8:	10001626 	beq	r2,zero,11a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   119fc:	95002c26 	beq	r18,r20,11ab0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
   11a00:	a9000217 	ldw	r4,8(r21)
   11a04:	880b883a 	mov	r5,r17
   11a08:	b00f883a 	mov	r7,r22
   11a0c:	20800017 	ldw	r2,0(r4)
   11a10:	dc800b15 	stw	r18,44(sp)
   11a14:	ddc00c15 	stw	r23,48(sp)
   11a18:	dd000d15 	stw	r20,52(sp)
   11a1c:	dcc00e15 	stw	r19,56(sp)
   11a20:	10800717 	ldw	r2,28(r2)
   11a24:	dfc00a17 	ldw	ra,40(sp)
   11a28:	df000917 	ldw	fp,36(sp)
   11a2c:	ddc00817 	ldw	r23,32(sp)
   11a30:	dd800717 	ldw	r22,28(sp)
   11a34:	dd400617 	ldw	r21,24(sp)
   11a38:	dd000517 	ldw	r20,20(sp)
   11a3c:	dcc00417 	ldw	r19,16(sp)
   11a40:	dc800317 	ldw	r18,12(sp)
   11a44:	dc400217 	ldw	r17,8(sp)
   11a48:	dc000117 	ldw	r16,4(sp)
   11a4c:	dec00b04 	addi	sp,sp,44
   11a50:	1000683a 	jmp	r2
   11a54:	9c800015 	stw	r18,0(r19)
   11a58:	99800115 	stw	r6,4(r19)
   11a5c:	88001116 	blt	r17,zero,11aa4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   11a60:	9463883a 	add	r17,r18,r17
   11a64:	a4401d26 	beq	r20,r17,11adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   11a68:	00800044 	movi	r2,1
   11a6c:	98800315 	stw	r2,12(r19)
   11a70:	0005883a 	mov	r2,zero
   11a74:	dfc00a17 	ldw	ra,40(sp)
   11a78:	df000917 	ldw	fp,36(sp)
   11a7c:	ddc00817 	ldw	r23,32(sp)
   11a80:	dd800717 	ldw	r22,28(sp)
   11a84:	dd400617 	ldw	r21,24(sp)
   11a88:	dd000517 	ldw	r20,20(sp)
   11a8c:	dcc00417 	ldw	r19,16(sp)
   11a90:	dc800317 	ldw	r18,12(sp)
   11a94:	dc400217 	ldw	r17,8(sp)
   11a98:	dc000117 	ldw	r16,4(sp)
   11a9c:	dec00b04 	addi	sp,sp,44
   11aa0:	f800283a 	ret
   11aa4:	00bfff84 	movi	r2,-2
   11aa8:	88bff11e 	bne	r17,r2,11a70 <__alt_data_end+0xf4011a70>
   11aac:	003fee06 	br	11a68 <__alt_data_end+0xf4011a68>
   11ab0:	b9400117 	ldw	r5,4(r23)
   11ab4:	81400726 	beq	r16,r5,11ad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   11ab8:	00800a84 	movi	r2,42
   11abc:	e0bfd026 	beq	fp,r2,11a00 <__alt_data_end+0xf4011a00>
   11ac0:	8009883a 	mov	r4,r16
   11ac4:	d9800015 	stw	r6,0(sp)
   11ac8:	00132780 	call	13278 <strcmp>
   11acc:	d9800017 	ldw	r6,0(sp)
   11ad0:	103fcb1e 	bne	r2,zero,11a00 <__alt_data_end+0xf4011a00>
   11ad4:	99800215 	stw	r6,8(r19)
   11ad8:	003fe506 	br	11a70 <__alt_data_end+0xf4011a70>
   11adc:	00800184 	movi	r2,6
   11ae0:	003fe206 	br	11a6c <__alt_data_end+0xf4011a6c>

00011ae4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   11ae4:	defffa04 	addi	sp,sp,-24
   11ae8:	dc000215 	stw	r16,8(sp)
   11aec:	dc000617 	ldw	r16,24(sp)
   11af0:	dc800415 	stw	r18,16(sp)
   11af4:	dc400315 	stw	r17,12(sp)
   11af8:	dfc00515 	stw	ra,20(sp)
   11afc:	2023883a 	mov	r17,r4
   11b00:	2825883a 	mov	r18,r5
   11b04:	81800b26 	beq	r16,r6,11b34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   11b08:	89000217 	ldw	r4,8(r17)
   11b0c:	900b883a 	mov	r5,r18
   11b10:	20800017 	ldw	r2,0(r4)
   11b14:	dc000615 	stw	r16,24(sp)
   11b18:	10800817 	ldw	r2,32(r2)
   11b1c:	dfc00517 	ldw	ra,20(sp)
   11b20:	dc800417 	ldw	r18,16(sp)
   11b24:	dc400317 	ldw	r17,12(sp)
   11b28:	dc000217 	ldw	r16,8(sp)
   11b2c:	dec00604 	addi	sp,sp,24
   11b30:	1000683a 	jmp	r2
   11b34:	21000117 	ldw	r4,4(r4)
   11b38:	39400117 	ldw	r5,4(r7)
   11b3c:	21400926 	beq	r4,r5,11b64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   11b40:	20c00007 	ldb	r3,0(r4)
   11b44:	00800a84 	movi	r2,42
   11b48:	18bfef26 	beq	r3,r2,11b08 <__alt_data_end+0xf4011b08>
   11b4c:	d9800015 	stw	r6,0(sp)
   11b50:	d9c00115 	stw	r7,4(sp)
   11b54:	00132780 	call	13278 <strcmp>
   11b58:	d9800017 	ldw	r6,0(sp)
   11b5c:	d9c00117 	ldw	r7,4(sp)
   11b60:	103fe91e 	bne	r2,zero,11b08 <__alt_data_end+0xf4011b08>
   11b64:	00800184 	movi	r2,6
   11b68:	dfc00517 	ldw	ra,20(sp)
   11b6c:	dc800417 	ldw	r18,16(sp)
   11b70:	dc400317 	ldw	r17,12(sp)
   11b74:	dc000217 	ldw	r16,8(sp)
   11b78:	dec00604 	addi	sp,sp,24
   11b7c:	f800283a 	ret

00011b80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   11b80:	defffb04 	addi	sp,sp,-20
   11b84:	dcc00315 	stw	r19,12(sp)
   11b88:	dc800215 	stw	r18,8(sp)
   11b8c:	dc400115 	stw	r17,4(sp)
   11b90:	dc000015 	stw	r16,0(sp)
   11b94:	dfc00415 	stw	ra,16(sp)
   11b98:	2027883a 	mov	r19,r4
   11b9c:	2825883a 	mov	r18,r5
   11ba0:	3023883a 	mov	r17,r6
   11ba4:	3821883a 	mov	r16,r7
   11ba8:	00116000 	call	11600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   11bac:	10c03fcc 	andi	r3,r2,255
   11bb0:	18000726 	beq	r3,zero,11bd0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   11bb4:	dfc00417 	ldw	ra,16(sp)
   11bb8:	dcc00317 	ldw	r19,12(sp)
   11bbc:	dc800217 	ldw	r18,8(sp)
   11bc0:	dc400117 	ldw	r17,4(sp)
   11bc4:	dc000017 	ldw	r16,0(sp)
   11bc8:	dec00504 	addi	sp,sp,20
   11bcc:	f800283a 	ret
   11bd0:	99000217 	ldw	r4,8(r19)
   11bd4:	900b883a 	mov	r5,r18
   11bd8:	880d883a 	mov	r6,r17
   11bdc:	20800017 	ldw	r2,0(r4)
   11be0:	800f883a 	mov	r7,r16
   11be4:	10800617 	ldw	r2,24(r2)
   11be8:	dfc00417 	ldw	ra,16(sp)
   11bec:	dcc00317 	ldw	r19,12(sp)
   11bf0:	dc800217 	ldw	r18,8(sp)
   11bf4:	dc400117 	ldw	r17,4(sp)
   11bf8:	dc000017 	ldw	r16,0(sp)
   11bfc:	dec00504 	addi	sp,sp,20
   11c00:	1000683a 	jmp	r2

00011c04 <__cxa_get_exception_ptr>:
   11c04:	20bfff17 	ldw	r2,-4(r4)
   11c08:	f800283a 	ret

00011c0c <__cxa_begin_catch>:
   11c0c:	defffe04 	addi	sp,sp,-8
   11c10:	dc000015 	stw	r16,0(sp)
   11c14:	dfc00115 	stw	ra,4(sp)
   11c18:	2021883a 	mov	r16,r4
   11c1c:	00115200 	call	11520 <__cxa_get_globals>
   11c20:	81000017 	ldw	r4,0(r16)
   11c24:	80c00117 	ldw	r3,4(r16)
   11c28:	01af3574 	movhi	r6,48341
   11c2c:	31b54004 	addi	r6,r6,-11008
   11c30:	016e2cb4 	movhi	r5,47282
   11c34:	296aaf04 	addi	r5,r5,-21828
   11c38:	218d883a 	add	r6,r4,r6
   11c3c:	3109803a 	cmpltu	r4,r6,r4
   11c40:	1947883a 	add	r3,r3,r5
   11c44:	20c7883a 	add	r3,r4,r3
   11c48:	817ff504 	addi	r5,r16,-44
   11c4c:	11000017 	ldw	r4,0(r2)
   11c50:	18000726 	beq	r3,zero,11c70 <__cxa_begin_catch+0x64>
   11c54:	2000191e 	bne	r4,zero,11cbc <__cxa_begin_catch+0xb0>
   11c58:	11400015 	stw	r5,0(r2)
   11c5c:	0005883a 	mov	r2,zero
   11c60:	dfc00117 	ldw	ra,4(sp)
   11c64:	dc000017 	ldw	r16,0(sp)
   11c68:	dec00204 	addi	sp,sp,8
   11c6c:	f800283a 	ret
   11c70:	01c00044 	movi	r7,1
   11c74:	39bff736 	bltu	r7,r6,11c54 <__alt_data_end+0xf4011c54>
   11c78:	80fffa17 	ldw	r3,-24(r16)
   11c7c:	18000d16 	blt	r3,zero,11cb4 <__cxa_begin_catch+0xa8>
   11c80:	18c00044 	addi	r3,r3,1
   11c84:	11800117 	ldw	r6,4(r2)
   11c88:	80fffa15 	stw	r3,-24(r16)
   11c8c:	30ffffc4 	addi	r3,r6,-1
   11c90:	10c00115 	stw	r3,4(r2)
   11c94:	21400226 	beq	r4,r5,11ca0 <__cxa_begin_catch+0x94>
   11c98:	813ff915 	stw	r4,-28(r16)
   11c9c:	11400015 	stw	r5,0(r2)
   11ca0:	80bfff17 	ldw	r2,-4(r16)
   11ca4:	dfc00117 	ldw	ra,4(sp)
   11ca8:	dc000017 	ldw	r16,0(sp)
   11cac:	dec00204 	addi	sp,sp,8
   11cb0:	f800283a 	ret
   11cb4:	38c7c83a 	sub	r3,r7,r3
   11cb8:	003ff206 	br	11c84 <__alt_data_end+0xf4011c84>
   11cbc:	00118b80 	call	118b8 <_ZSt9terminatev>

00011cc0 <__cxa_end_catch>:
   11cc0:	deffff04 	addi	sp,sp,-4
   11cc4:	dfc00015 	stw	ra,0(sp)
   11cc8:	00115140 	call	11514 <__cxa_get_globals_fast>
   11ccc:	11000017 	ldw	r4,0(r2)
   11cd0:	20001326 	beq	r4,zero,11d20 <__cxa_end_catch+0x60>
   11cd4:	21400b17 	ldw	r5,44(r4)
   11cd8:	01ef3574 	movhi	r7,48341
   11cdc:	39f54004 	addi	r7,r7,-11008
   11ce0:	29cf883a 	add	r7,r5,r7
   11ce4:	20c00c17 	ldw	r3,48(r4)
   11ce8:	394d803a 	cmpltu	r6,r7,r5
   11cec:	016e2cb4 	movhi	r5,47282
   11cf0:	296aaf04 	addi	r5,r5,-21828
   11cf4:	1947883a 	add	r3,r3,r5
   11cf8:	30c7883a 	add	r3,r6,r3
   11cfc:	18000b1e 	bne	r3,zero,11d2c <__cxa_end_catch+0x6c>
   11d00:	00c00044 	movi	r3,1
   11d04:	19c00936 	bltu	r3,r7,11d2c <__cxa_end_catch+0x6c>
   11d08:	20c00517 	ldw	r3,20(r4)
   11d0c:	18000c16 	blt	r3,zero,11d40 <__cxa_end_catch+0x80>
   11d10:	197fffc4 	addi	r5,r3,-1
   11d14:	28000f26 	beq	r5,zero,11d54 <__cxa_end_catch+0x94>
   11d18:	18001426 	beq	r3,zero,11d6c <__cxa_end_catch+0xac>
   11d1c:	21400515 	stw	r5,20(r4)
   11d20:	dfc00017 	ldw	ra,0(sp)
   11d24:	dec00104 	addi	sp,sp,4
   11d28:	f800283a 	ret
   11d2c:	21000b04 	addi	r4,r4,44
   11d30:	10000015 	stw	zero,0(r2)
   11d34:	dfc00017 	ldw	ra,0(sp)
   11d38:	dec00104 	addi	sp,sp,4
   11d3c:	00126941 	jmpi	12694 <_Unwind_DeleteException>
   11d40:	19400044 	addi	r5,r3,1
   11d44:	283ff51e 	bne	r5,zero,11d1c <__alt_data_end+0xf4011d1c>
   11d48:	20c00417 	ldw	r3,16(r4)
   11d4c:	10c00015 	stw	r3,0(r2)
   11d50:	003ff206 	br	11d1c <__alt_data_end+0xf4011d1c>
   11d54:	20c00417 	ldw	r3,16(r4)
   11d58:	21000b04 	addi	r4,r4,44
   11d5c:	10c00015 	stw	r3,0(r2)
   11d60:	dfc00017 	ldw	ra,0(sp)
   11d64:	dec00104 	addi	sp,sp,4
   11d68:	00126941 	jmpi	12694 <_Unwind_DeleteException>
   11d6c:	00118b80 	call	118b8 <_ZSt9terminatev>

00011d70 <_ZSt18uncaught_exceptionv>:
   11d70:	deffff04 	addi	sp,sp,-4
   11d74:	dfc00015 	stw	ra,0(sp)
   11d78:	00115200 	call	11520 <__cxa_get_globals>
   11d7c:	10800117 	ldw	r2,4(r2)
   11d80:	1004c03a 	cmpne	r2,r2,zero
   11d84:	dfc00017 	ldw	ra,0(sp)
   11d88:	dec00104 	addi	sp,sp,4
   11d8c:	f800283a 	ret

00011d90 <__cxa_call_terminate>:
   11d90:	defffe04 	addi	sp,sp,-8
   11d94:	dc000015 	stw	r16,0(sp)
   11d98:	dfc00115 	stw	ra,4(sp)
   11d9c:	2021883a 	mov	r16,r4
   11da0:	20000c26 	beq	r4,zero,11dd4 <__cxa_call_terminate+0x44>
   11da4:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   11da8:	80c00017 	ldw	r3,0(r16)
   11dac:	012f3574 	movhi	r4,48341
   11db0:	21354004 	addi	r4,r4,-11008
   11db4:	1909883a 	add	r4,r3,r4
   11db8:	80800117 	ldw	r2,4(r16)
   11dbc:	20cb803a 	cmpltu	r5,r4,r3
   11dc0:	00ee2cb4 	movhi	r3,47282
   11dc4:	18eaaf04 	addi	r3,r3,-21828
   11dc8:	10c5883a 	add	r2,r2,r3
   11dcc:	2885883a 	add	r2,r5,r2
   11dd0:	10000126 	beq	r2,zero,11dd8 <__cxa_call_terminate+0x48>
   11dd4:	00118b80 	call	118b8 <_ZSt9terminatev>
   11dd8:	00800044 	movi	r2,1
   11ddc:	113ffd36 	bltu	r2,r4,11dd4 <__alt_data_end+0xf4011dd4>
   11de0:	813ff817 	ldw	r4,-32(r16)
   11de4:	00117f80 	call	117f8 <_ZN10__cxxabiv111__terminateEPFvvE>

00011de8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   11de8:	defffe04 	addi	sp,sp,-8
   11dec:	dfc00115 	stw	ra,4(sp)
   11df0:	dc000015 	stw	r16,0(sp)
   11df4:	00800044 	movi	r2,1
   11df8:	11000a36 	bltu	r2,r4,11e24 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   11dfc:	28bff617 	ldw	r2,-40(r5)
   11e00:	2c000504 	addi	r16,r5,20
   11e04:	10000226 	beq	r2,zero,11e10 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   11e08:	8009883a 	mov	r4,r16
   11e0c:	103ee83a 	callr	r2
   11e10:	8009883a 	mov	r4,r16
   11e14:	dfc00117 	ldw	ra,4(sp)
   11e18:	dc000017 	ldw	r16,0(sp)
   11e1c:	dec00204 	addi	sp,sp,8
   11e20:	00120481 	jmpi	12048 <__cxa_free_exception>
   11e24:	293ff817 	ldw	r4,-32(r5)
   11e28:	00117f80 	call	117f8 <_ZN10__cxxabiv111__terminateEPFvvE>

00011e2c <__cxa_throw>:
   11e2c:	defffb04 	addi	sp,sp,-20
   11e30:	dfc00415 	stw	ra,16(sp)
   11e34:	dcc00315 	stw	r19,12(sp)
   11e38:	dc800215 	stw	r18,8(sp)
   11e3c:	2827883a 	mov	r19,r5
   11e40:	3025883a 	mov	r18,r6
   11e44:	dc400115 	stw	r17,4(sp)
   11e48:	dc000015 	stw	r16,0(sp)
   11e4c:	2021883a 	mov	r16,r4
   11e50:	00115200 	call	11520 <__cxa_get_globals>
   11e54:	10c00117 	ldw	r3,4(r2)
   11e58:	847ffb04 	addi	r17,r16,-20
   11e5c:	18c00044 	addi	r3,r3,1
   11e60:	10c00115 	stw	r3,4(r2)
   11e64:	00800044 	movi	r2,1
   11e68:	80bfef15 	stw	r2,-68(r16)
   11e6c:	84fff015 	stw	r19,-64(r16)
   11e70:	84bff115 	stw	r18,-60(r16)
   11e74:	00119300 	call	11930 <_ZSt14get_unexpectedv>
   11e78:	80bff215 	stw	r2,-56(r16)
   11e7c:	001190c0 	call	1190c <_ZSt13get_terminatev>
   11e80:	80bff315 	stw	r2,-52(r16)
   11e84:	0090caf4 	movhi	r2,17195
   11e88:	108ac004 	addi	r2,r2,11008
   11e8c:	80bffb15 	stw	r2,-20(r16)
   11e90:	0091d3b4 	movhi	r2,18254
   11e94:	109550c4 	addi	r2,r2,21827
   11e98:	80bffc15 	stw	r2,-16(r16)
   11e9c:	00800074 	movhi	r2,1
   11ea0:	10877a04 	addi	r2,r2,7656
   11ea4:	8809883a 	mov	r4,r17
   11ea8:	80bffd15 	stw	r2,-12(r16)
   11eac:	00124f00 	call	124f0 <_Unwind_SjLj_RaiseException>
   11eb0:	8809883a 	mov	r4,r17
   11eb4:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   11eb8:	00118b80 	call	118b8 <_ZSt9terminatev>

00011ebc <__cxa_rethrow>:
   11ebc:	defffe04 	addi	sp,sp,-8
   11ec0:	dfc00115 	stw	ra,4(sp)
   11ec4:	dc000015 	stw	r16,0(sp)
   11ec8:	00115200 	call	11520 <__cxa_get_globals>
   11ecc:	10c00117 	ldw	r3,4(r2)
   11ed0:	11000017 	ldw	r4,0(r2)
   11ed4:	18c00044 	addi	r3,r3,1
   11ed8:	10c00115 	stw	r3,4(r2)
   11edc:	20001126 	beq	r4,zero,11f24 <__cxa_rethrow+0x68>
   11ee0:	21400b17 	ldw	r5,44(r4)
   11ee4:	01ef3574 	movhi	r7,48341
   11ee8:	39f54004 	addi	r7,r7,-11008
   11eec:	29cf883a 	add	r7,r5,r7
   11ef0:	20c00c17 	ldw	r3,48(r4)
   11ef4:	394d803a 	cmpltu	r6,r7,r5
   11ef8:	016e2cb4 	movhi	r5,47282
   11efc:	296aaf04 	addi	r5,r5,-21828
   11f00:	1947883a 	add	r3,r3,r5
   11f04:	30c7883a 	add	r3,r6,r3
   11f08:	18000726 	beq	r3,zero,11f28 <__cxa_rethrow+0x6c>
   11f0c:	10000015 	stw	zero,0(r2)
   11f10:	24000b04 	addi	r16,r4,44
   11f14:	8009883a 	mov	r4,r16
   11f18:	00126480 	call	12648 <_Unwind_SjLj_Resume_or_Rethrow>
   11f1c:	8009883a 	mov	r4,r16
   11f20:	0011c0c0 	call	11c0c <__cxa_begin_catch>
   11f24:	00118b80 	call	118b8 <_ZSt9terminatev>
   11f28:	00c00044 	movi	r3,1
   11f2c:	19fff736 	bltu	r3,r7,11f0c <__alt_data_end+0xf4011f0c>
   11f30:	20800517 	ldw	r2,20(r4)
   11f34:	0085c83a 	sub	r2,zero,r2
   11f38:	20800515 	stw	r2,20(r4)
   11f3c:	003ff406 	br	11f10 <__alt_data_end+0xf4011f10>

00011f40 <_ZNSt9type_infoD1Ev>:
   11f40:	f800283a 	ret

00011f44 <_ZNKSt9type_info14__is_pointer_pEv>:
   11f44:	0005883a 	mov	r2,zero
   11f48:	f800283a 	ret

00011f4c <_ZNKSt9type_info15__is_function_pEv>:
   11f4c:	0005883a 	mov	r2,zero
   11f50:	f800283a 	ret

00011f54 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   11f54:	0005883a 	mov	r2,zero
   11f58:	f800283a 	ret

00011f5c <_ZNSt9type_infoD0Ev>:
   11f5c:	00117f41 	jmpi	117f4 <_ZdlPv>

00011f60 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   11f60:	21000117 	ldw	r4,4(r4)
   11f64:	29400117 	ldw	r5,4(r5)
   11f68:	21400c26 	beq	r4,r5,11f9c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   11f6c:	20c00007 	ldb	r3,0(r4)
   11f70:	00800a84 	movi	r2,42
   11f74:	18800726 	beq	r3,r2,11f94 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   11f78:	deffff04 	addi	sp,sp,-4
   11f7c:	dfc00015 	stw	ra,0(sp)
   11f80:	00132780 	call	13278 <strcmp>
   11f84:	1005003a 	cmpeq	r2,r2,zero
   11f88:	dfc00017 	ldw	ra,0(sp)
   11f8c:	dec00104 	addi	sp,sp,4
   11f90:	f800283a 	ret
   11f94:	0005883a 	mov	r2,zero
   11f98:	f800283a 	ret
   11f9c:	00800044 	movi	r2,1
   11fa0:	f800283a 	ret

00011fa4 <__cxa_allocate_exception>:
   11fa4:	defffd04 	addi	sp,sp,-12
   11fa8:	dc400115 	stw	r17,4(sp)
   11fac:	24401104 	addi	r17,r4,68
   11fb0:	8809883a 	mov	r4,r17
   11fb4:	dc000015 	stw	r16,0(sp)
   11fb8:	dfc00215 	stw	ra,8(sp)
   11fbc:	00127380 	call	12738 <malloc>
   11fc0:	1021883a 	mov	r16,r2
   11fc4:	10000a26 	beq	r2,zero,11ff0 <__cxa_allocate_exception+0x4c>
   11fc8:	8009883a 	mov	r4,r16
   11fcc:	000b883a 	mov	r5,zero
   11fd0:	01801104 	movi	r6,68
   11fd4:	0012de40 	call	12de4 <memset>
   11fd8:	80801104 	addi	r2,r16,68
   11fdc:	dfc00217 	ldw	ra,8(sp)
   11fe0:	dc400117 	ldw	r17,4(sp)
   11fe4:	dc000017 	ldw	r16,0(sp)
   11fe8:	dec00304 	addi	sp,sp,12
   11fec:	f800283a 	ret
   11ff0:	01420034 	movhi	r5,2048
   11ff4:	2942b204 	addi	r5,r5,2760
   11ff8:	00808004 	movi	r2,512
   11ffc:	29800017 	ldw	r6,0(r5)
   12000:	14400736 	bltu	r2,r17,12020 <__cxa_allocate_exception+0x7c>
   12004:	3005883a 	mov	r2,r6
   12008:	01000104 	movi	r4,4
   1200c:	10c0004c 	andi	r3,r2,1
   12010:	18000426 	beq	r3,zero,12024 <__cxa_allocate_exception+0x80>
   12014:	84000044 	addi	r16,r16,1
   12018:	1004d07a 	srli	r2,r2,1
   1201c:	813ffb1e 	bne	r16,r4,1200c <__alt_data_end+0xf401200c>
   12020:	00118b80 	call	118b8 <_ZSt9terminatev>
   12024:	00800044 	movi	r2,1
   12028:	1404983a 	sll	r2,r2,r16
   1202c:	8020927a 	slli	r16,r16,9
   12030:	118cb03a 	or	r6,r2,r6
   12034:	00820034 	movhi	r2,2048
   12038:	1082fb04 	addi	r2,r2,3052
   1203c:	29800015 	stw	r6,0(r5)
   12040:	80a1883a 	add	r16,r16,r2
   12044:	003fe006 	br	11fc8 <__alt_data_end+0xf4011fc8>

00012048 <__cxa_free_exception>:
   12048:	00820034 	movhi	r2,2048
   1204c:	1082fb04 	addi	r2,r2,3052
   12050:	20800236 	bltu	r4,r2,1205c <__cxa_free_exception+0x14>
   12054:	10c20004 	addi	r3,r2,2048
   12058:	20c00236 	bltu	r4,r3,12064 <__cxa_free_exception+0x1c>
   1205c:	213fef04 	addi	r4,r4,-68
   12060:	001274c1 	jmpi	1274c <free>
   12064:	2089c83a 	sub	r4,r4,r2
   12068:	2008d27a 	srli	r4,r4,9
   1206c:	01420034 	movhi	r5,2048
   12070:	2942b204 	addi	r5,r5,2760
   12074:	00ffff84 	movi	r3,-2
   12078:	28800017 	ldw	r2,0(r5)
   1207c:	1908183a 	rol	r4,r3,r4
   12080:	2088703a 	and	r4,r4,r2
   12084:	29000015 	stw	r4,0(r5)
   12088:	f800283a 	ret

0001208c <__cxa_allocate_dependent_exception>:
   1208c:	defffe04 	addi	sp,sp,-8
   12090:	01001004 	movi	r4,64
   12094:	dc000015 	stw	r16,0(sp)
   12098:	dfc00115 	stw	ra,4(sp)
   1209c:	00127380 	call	12738 <malloc>
   120a0:	1021883a 	mov	r16,r2
   120a4:	10000926 	beq	r2,zero,120cc <__cxa_allocate_dependent_exception+0x40>
   120a8:	8009883a 	mov	r4,r16
   120ac:	000b883a 	mov	r5,zero
   120b0:	01801004 	movi	r6,64
   120b4:	0012de40 	call	12de4 <memset>
   120b8:	8005883a 	mov	r2,r16
   120bc:	dfc00117 	ldw	ra,4(sp)
   120c0:	dc000017 	ldw	r16,0(sp)
   120c4:	dec00204 	addi	sp,sp,8
   120c8:	f800283a 	ret
   120cc:	01c20034 	movhi	r7,2048
   120d0:	39c2b104 	addi	r7,r7,2756
   120d4:	39800017 	ldw	r6,0(r7)
   120d8:	0005883a 	mov	r2,zero
   120dc:	01400104 	movi	r5,4
   120e0:	3007883a 	mov	r3,r6
   120e4:	1900004c 	andi	r4,r3,1
   120e8:	20000426 	beq	r4,zero,120fc <__cxa_allocate_dependent_exception+0x70>
   120ec:	10800044 	addi	r2,r2,1
   120f0:	1806d07a 	srli	r3,r3,1
   120f4:	117ffb1e 	bne	r2,r5,120e4 <__alt_data_end+0xf40120e4>
   120f8:	00118b80 	call	118b8 <_ZSt9terminatev>
   120fc:	00c00044 	movi	r3,1
   12100:	1886983a 	sll	r3,r3,r2
   12104:	100491ba 	slli	r2,r2,6
   12108:	04020034 	movhi	r16,2048
   1210c:	198cb03a 	or	r6,r3,r6
   12110:	8402bb04 	addi	r16,r16,2796
   12114:	39800015 	stw	r6,0(r7)
   12118:	1421883a 	add	r16,r2,r16
   1211c:	003fe206 	br	120a8 <__alt_data_end+0xf40120a8>

00012120 <__cxa_free_dependent_exception>:
   12120:	00820034 	movhi	r2,2048
   12124:	1082bb04 	addi	r2,r2,2796
   12128:	20800236 	bltu	r4,r2,12134 <__cxa_free_dependent_exception+0x14>
   1212c:	10c04004 	addi	r3,r2,256
   12130:	20c00136 	bltu	r4,r3,12138 <__cxa_free_dependent_exception+0x18>
   12134:	001274c1 	jmpi	1274c <free>
   12138:	2089c83a 	sub	r4,r4,r2
   1213c:	2008d1ba 	srli	r4,r4,6
   12140:	01420034 	movhi	r5,2048
   12144:	2942b104 	addi	r5,r5,2756
   12148:	00ffff84 	movi	r3,-2
   1214c:	28800017 	ldw	r2,0(r5)
   12150:	1908183a 	rol	r4,r3,r4
   12154:	2088703a 	and	r4,r4,r2
   12158:	29000015 	stw	r4,0(r5)
   1215c:	f800283a 	ret

00012160 <_ZNSt9exceptionD1Ev>:
   12160:	f800283a 	ret

00012164 <_ZNSt13bad_exceptionD1Ev>:
   12164:	f800283a 	ret

00012168 <_ZNKSt9exception4whatEv>:
   12168:	00820034 	movhi	r2,2048
   1216c:	10806004 	addi	r2,r2,384
   12170:	f800283a 	ret

00012174 <_ZNKSt13bad_exception4whatEv>:
   12174:	00820034 	movhi	r2,2048
   12178:	10806404 	addi	r2,r2,400
   1217c:	f800283a 	ret

00012180 <_ZNSt9exceptionD0Ev>:
   12180:	00117f41 	jmpi	117f4 <_ZdlPv>

00012184 <_ZNSt13bad_exceptionD0Ev>:
   12184:	00117f41 	jmpi	117f4 <_ZdlPv>

00012188 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   12188:	f800283a 	ret

0001218c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   1218c:	00117f41 	jmpi	117f4 <_ZdlPv>

00012190 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   12190:	f800283a 	ret

00012194 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   12194:	00117f41 	jmpi	117f4 <_ZdlPv>

00012198 <__cxa_pure_virtual>:
   12198:	01420034 	movhi	r5,2048
   1219c:	deffff04 	addi	sp,sp,-4
   121a0:	29409a04 	addi	r5,r5,616
   121a4:	01000084 	movi	r4,2
   121a8:	018006c4 	movi	r6,27
   121ac:	dfc00015 	stw	ra,0(sp)
   121b0:	001462c0 	call	1462c <write>
   121b4:	00118b80 	call	118b8 <_ZSt9terminatev>

000121b8 <__cxa_deleted_virtual>:
   121b8:	01420034 	movhi	r5,2048
   121bc:	deffff04 	addi	sp,sp,-4
   121c0:	2940a104 	addi	r5,r5,644
   121c4:	01000084 	movi	r4,2
   121c8:	01800784 	movi	r6,30
   121cc:	dfc00015 	stw	ra,0(sp)
   121d0:	001462c0 	call	1462c <write>
   121d4:	00118b80 	call	118b8 <_ZSt9terminatev>

000121d8 <__mulsi3>:
   121d8:	0005883a 	mov	r2,zero
   121dc:	20000726 	beq	r4,zero,121fc <__mulsi3+0x24>
   121e0:	20c0004c 	andi	r3,r4,1
   121e4:	2008d07a 	srli	r4,r4,1
   121e8:	18000126 	beq	r3,zero,121f0 <__mulsi3+0x18>
   121ec:	1145883a 	add	r2,r2,r5
   121f0:	294b883a 	add	r5,r5,r5
   121f4:	203ffa1e 	bne	r4,zero,121e0 <__alt_data_end+0xf40121e0>
   121f8:	f800283a 	ret
   121fc:	f800283a 	ret

00012200 <_Unwind_ForcedUnwind_Phase2>:
   12200:	defff404 	addi	sp,sp,-48
   12204:	dd800915 	stw	r22,36(sp)
   12208:	05820034 	movhi	r22,2048
   1220c:	ddc00a15 	stw	r23,40(sp)
   12210:	dd400815 	stw	r21,32(sp)
   12214:	dd000715 	stw	r20,28(sp)
   12218:	dcc00615 	stw	r19,24(sp)
   1221c:	dc400415 	stw	r17,16(sp)
   12220:	dc000315 	stw	r16,12(sp)
   12224:	dfc00b15 	stw	ra,44(sp)
   12228:	dc800515 	stw	r18,20(sp)
   1222c:	2021883a 	mov	r16,r4
   12230:	2823883a 	mov	r17,r5
   12234:	24c00317 	ldw	r19,12(r4)
   12238:	25000417 	ldw	r20,16(r4)
   1223c:	28c00017 	ldw	r3,0(r5)
   12240:	b582b304 	addi	r22,r22,2764
   12244:	054001c4 	movi	r21,7
   12248:	05c00204 	movi	r23,8
   1224c:	00001606 	br	122a8 <_Unwind_ForcedUnwind_Phase2+0xa8>
   12250:	81800017 	ldw	r6,0(r16)
   12254:	81c00117 	ldw	r7,4(r16)
   12258:	1c800617 	ldw	r18,24(r3)
   1225c:	dc000015 	stw	r16,0(sp)
   12260:	dc400115 	stw	r17,4(sp)
   12264:	dd000215 	stw	r20,8(sp)
   12268:	983ee83a 	callr	r19
   1226c:	01000044 	movi	r4,1
   12270:	01400284 	movi	r5,10
   12274:	1000241e 	bne	r2,zero,12308 <_Unwind_ForcedUnwind_Phase2+0x108>
   12278:	90000726 	beq	r18,zero,12298 <_Unwind_ForcedUnwind_Phase2+0x98>
   1227c:	81800017 	ldw	r6,0(r16)
   12280:	81c00117 	ldw	r7,4(r16)
   12284:	dc000015 	stw	r16,0(sp)
   12288:	dc400115 	stw	r17,4(sp)
   1228c:	903ee83a 	callr	r18
   12290:	15401f26 	beq	r2,r21,12310 <_Unwind_ForcedUnwind_Phase2+0x110>
   12294:	15c01c1e 	bne	r2,r23,12308 <_Unwind_ForcedUnwind_Phase2+0x108>
   12298:	88800017 	ldw	r2,0(r17)
   1229c:	10c00017 	ldw	r3,0(r2)
   122a0:	b0c00015 	stw	r3,0(r22)
   122a4:	88c00015 	stw	r3,0(r17)
   122a8:	01000044 	movi	r4,1
   122ac:	01400284 	movi	r5,10
   122b0:	183fe71e 	bne	r3,zero,12250 <__alt_data_end+0xf4012250>
   122b4:	81800017 	ldw	r6,0(r16)
   122b8:	81c00117 	ldw	r7,4(r16)
   122bc:	01000044 	movi	r4,1
   122c0:	dc000015 	stw	r16,0(sp)
   122c4:	dc400115 	stw	r17,4(sp)
   122c8:	dd000215 	stw	r20,8(sp)
   122cc:	01400684 	movi	r5,26
   122d0:	983ee83a 	callr	r19
   122d4:	10000c1e 	bne	r2,zero,12308 <_Unwind_ForcedUnwind_Phase2+0x108>
   122d8:	00800144 	movi	r2,5
   122dc:	dfc00b17 	ldw	ra,44(sp)
   122e0:	ddc00a17 	ldw	r23,40(sp)
   122e4:	dd800917 	ldw	r22,36(sp)
   122e8:	dd400817 	ldw	r21,32(sp)
   122ec:	dd000717 	ldw	r20,28(sp)
   122f0:	dcc00617 	ldw	r19,24(sp)
   122f4:	dc800517 	ldw	r18,20(sp)
   122f8:	dc400417 	ldw	r17,16(sp)
   122fc:	dc000317 	ldw	r16,12(sp)
   12300:	dec00c04 	addi	sp,sp,48
   12304:	f800283a 	ret
   12308:	00800084 	movi	r2,2
   1230c:	003ff306 	br	122dc <__alt_data_end+0xf40122dc>
   12310:	a805883a 	mov	r2,r21
   12314:	003ff106 	br	122dc <__alt_data_end+0xf40122dc>

00012318 <_Unwind_RaiseException_Phase2>:
   12318:	28c00017 	ldw	r3,0(r5)
   1231c:	defff804 	addi	sp,sp,-32
   12320:	dcc00515 	stw	r19,20(sp)
   12324:	dc800415 	stw	r18,16(sp)
   12328:	dc400315 	stw	r17,12(sp)
   1232c:	dc000215 	stw	r16,8(sp)
   12330:	dfc00715 	stw	ra,28(sp)
   12334:	dd000615 	stw	r20,24(sp)
   12338:	2823883a 	mov	r17,r5
   1233c:	2021883a 	mov	r16,r4
   12340:	048001c4 	movi	r18,7
   12344:	04c00204 	movi	r19,8
   12348:	18001326 	beq	r3,zero,12398 <_Unwind_RaiseException_Phase2+0x80>
   1234c:	81000417 	ldw	r4,16(r16)
   12350:	1a000617 	ldw	r8,24(r3)
   12354:	19001c26 	beq	r3,r4,123c8 <_Unwind_RaiseException_Phase2+0xb0>
   12358:	40000b26 	beq	r8,zero,12388 <_Unwind_RaiseException_Phase2+0x70>
   1235c:	01400084 	movi	r5,2
   12360:	0029883a 	mov	r20,zero
   12364:	81800017 	ldw	r6,0(r16)
   12368:	81c00117 	ldw	r7,4(r16)
   1236c:	01000044 	movi	r4,1
   12370:	dc000015 	stw	r16,0(sp)
   12374:	dc400115 	stw	r17,4(sp)
   12378:	403ee83a 	callr	r8
   1237c:	14800f26 	beq	r2,r18,123bc <_Unwind_RaiseException_Phase2+0xa4>
   12380:	14c0051e 	bne	r2,r19,12398 <_Unwind_RaiseException_Phase2+0x80>
   12384:	a0000f1e 	bne	r20,zero,123c4 <_Unwind_RaiseException_Phase2+0xac>
   12388:	88c00017 	ldw	r3,0(r17)
   1238c:	18c00017 	ldw	r3,0(r3)
   12390:	88c00015 	stw	r3,0(r17)
   12394:	183fed1e 	bne	r3,zero,1234c <__alt_data_end+0xf401234c>
   12398:	00800084 	movi	r2,2
   1239c:	dfc00717 	ldw	ra,28(sp)
   123a0:	dd000617 	ldw	r20,24(sp)
   123a4:	dcc00517 	ldw	r19,20(sp)
   123a8:	dc800417 	ldw	r18,16(sp)
   123ac:	dc400317 	ldw	r17,12(sp)
   123b0:	dc000217 	ldw	r16,8(sp)
   123b4:	dec00804 	addi	sp,sp,32
   123b8:	f800283a 	ret
   123bc:	9005883a 	mov	r2,r18
   123c0:	003ff606 	br	1239c <__alt_data_end+0xf401239c>
   123c4:	00127200 	call	12720 <abort>
   123c8:	403ffe26 	beq	r8,zero,123c4 <__alt_data_end+0xf40123c4>
   123cc:	01400184 	movi	r5,6
   123d0:	05000104 	movi	r20,4
   123d4:	003fe306 	br	12364 <__alt_data_end+0xf4012364>

000123d8 <uw_install_context.isra.1>:
   123d8:	20c00017 	ldw	r3,0(r4)
   123dc:	deffff04 	addi	sp,sp,-4
   123e0:	01420034 	movhi	r5,2048
   123e4:	19000917 	ldw	r4,36(r3)
   123e8:	df000015 	stw	fp,0(sp)
   123ec:	18800804 	addi	r2,r3,32
   123f0:	d839883a 	mov	fp,sp
   123f4:	2942b304 	addi	r5,r5,2764
   123f8:	28c00015 	stw	r3,0(r5)
   123fc:	17000017 	ldw	fp,0(r2)
   12400:	1ec00a17 	ldw	sp,40(r3)
   12404:	2000683a 	jmp	r4

00012408 <_Unwind_SjLj_Register>:
   12408:	00820034 	movhi	r2,2048
   1240c:	1082b304 	addi	r2,r2,2764
   12410:	10c00017 	ldw	r3,0(r2)
   12414:	11000015 	stw	r4,0(r2)
   12418:	20c00015 	stw	r3,0(r4)
   1241c:	f800283a 	ret

00012420 <_Unwind_SjLj_Unregister>:
   12420:	20c00017 	ldw	r3,0(r4)
   12424:	00820034 	movhi	r2,2048
   12428:	1082b304 	addi	r2,r2,2764
   1242c:	10c00015 	stw	r3,0(r2)
   12430:	f800283a 	ret

00012434 <_Unwind_GetGR>:
   12434:	20800017 	ldw	r2,0(r4)
   12438:	29400084 	addi	r5,r5,2
   1243c:	294b883a 	add	r5,r5,r5
   12440:	294b883a 	add	r5,r5,r5
   12444:	114b883a 	add	r5,r2,r5
   12448:	28800017 	ldw	r2,0(r5)
   1244c:	f800283a 	ret

00012450 <_Unwind_GetCFA>:
   12450:	20800017 	ldw	r2,0(r4)
   12454:	10000226 	beq	r2,zero,12460 <_Unwind_GetCFA+0x10>
   12458:	10800a17 	ldw	r2,40(r2)
   1245c:	f800283a 	ret
   12460:	0005883a 	mov	r2,zero
   12464:	f800283a 	ret

00012468 <_Unwind_SetGR>:
   12468:	20800017 	ldw	r2,0(r4)
   1246c:	29400084 	addi	r5,r5,2
   12470:	294b883a 	add	r5,r5,r5
   12474:	294b883a 	add	r5,r5,r5
   12478:	114b883a 	add	r5,r2,r5
   1247c:	29800015 	stw	r6,0(r5)
   12480:	f800283a 	ret

00012484 <_Unwind_GetIP>:
   12484:	20800017 	ldw	r2,0(r4)
   12488:	10800117 	ldw	r2,4(r2)
   1248c:	10800044 	addi	r2,r2,1
   12490:	f800283a 	ret

00012494 <_Unwind_GetIPInfo>:
   12494:	20800017 	ldw	r2,0(r4)
   12498:	28000015 	stw	zero,0(r5)
   1249c:	10000326 	beq	r2,zero,124ac <_Unwind_GetIPInfo+0x18>
   124a0:	10800117 	ldw	r2,4(r2)
   124a4:	10800044 	addi	r2,r2,1
   124a8:	f800283a 	ret
   124ac:	0005883a 	mov	r2,zero
   124b0:	f800283a 	ret

000124b4 <_Unwind_SetIP>:
   124b4:	20800017 	ldw	r2,0(r4)
   124b8:	297fffc4 	addi	r5,r5,-1
   124bc:	11400115 	stw	r5,4(r2)
   124c0:	f800283a 	ret

000124c4 <_Unwind_GetLanguageSpecificData>:
   124c4:	20800017 	ldw	r2,0(r4)
   124c8:	10800717 	ldw	r2,28(r2)
   124cc:	f800283a 	ret

000124d0 <_Unwind_GetRegionStart>:
   124d0:	0005883a 	mov	r2,zero
   124d4:	f800283a 	ret

000124d8 <_Unwind_FindEnclosingFunction>:
   124d8:	0005883a 	mov	r2,zero
   124dc:	f800283a 	ret

000124e0 <_Unwind_GetDataRelBase>:
   124e0:	0005883a 	mov	r2,zero
   124e4:	f800283a 	ret

000124e8 <_Unwind_GetTextRelBase>:
   124e8:	0005883a 	mov	r2,zero
   124ec:	f800283a 	ret

000124f0 <_Unwind_SjLj_RaiseException>:
   124f0:	00820034 	movhi	r2,2048
   124f4:	defff804 	addi	sp,sp,-32
   124f8:	1082b304 	addi	r2,r2,2764
   124fc:	dc800515 	stw	r18,20(sp)
   12500:	14800017 	ldw	r18,0(r2)
   12504:	dfc00715 	stw	ra,28(sp)
   12508:	dcc00615 	stw	r19,24(sp)
   1250c:	dc400415 	stw	r17,16(sp)
   12510:	dc000315 	stw	r16,12(sp)
   12514:	dc800215 	stw	r18,8(sp)
   12518:	90001426 	beq	r18,zero,1256c <_Unwind_SjLj_RaiseException+0x7c>
   1251c:	2021883a 	mov	r16,r4
   12520:	9005883a 	mov	r2,r18
   12524:	04400184 	movi	r17,6
   12528:	04c00204 	movi	r19,8
   1252c:	10800617 	ldw	r2,24(r2)
   12530:	10000a26 	beq	r2,zero,1255c <_Unwind_SjLj_RaiseException+0x6c>
   12534:	81800017 	ldw	r6,0(r16)
   12538:	81c00117 	ldw	r7,4(r16)
   1253c:	01000044 	movi	r4,1
   12540:	d8c00204 	addi	r3,sp,8
   12544:	dc000015 	stw	r16,0(sp)
   12548:	d8c00115 	stw	r3,4(sp)
   1254c:	200b883a 	mov	r5,r4
   12550:	103ee83a 	callr	r2
   12554:	14400d26 	beq	r2,r17,1258c <_Unwind_SjLj_RaiseException+0x9c>
   12558:	14c0171e 	bne	r2,r19,125b8 <_Unwind_SjLj_RaiseException+0xc8>
   1255c:	d8800217 	ldw	r2,8(sp)
   12560:	10800017 	ldw	r2,0(r2)
   12564:	d8800215 	stw	r2,8(sp)
   12568:	103ff01e 	bne	r2,zero,1252c <__alt_data_end+0xf401252c>
   1256c:	00800144 	movi	r2,5
   12570:	dfc00717 	ldw	ra,28(sp)
   12574:	dcc00617 	ldw	r19,24(sp)
   12578:	dc800517 	ldw	r18,20(sp)
   1257c:	dc400417 	ldw	r17,16(sp)
   12580:	dc000317 	ldw	r16,12(sp)
   12584:	dec00804 	addi	sp,sp,32
   12588:	f800283a 	ret
   1258c:	d8800217 	ldw	r2,8(sp)
   12590:	80000315 	stw	zero,12(r16)
   12594:	8009883a 	mov	r4,r16
   12598:	80800415 	stw	r2,16(r16)
   1259c:	d9400204 	addi	r5,sp,8
   125a0:	dc800215 	stw	r18,8(sp)
   125a4:	00123180 	call	12318 <_Unwind_RaiseException_Phase2>
   125a8:	00c001c4 	movi	r3,7
   125ac:	10fff01e 	bne	r2,r3,12570 <__alt_data_end+0xf4012570>
   125b0:	d9000204 	addi	r4,sp,8
   125b4:	00123d80 	call	123d8 <uw_install_context.isra.1>
   125b8:	008000c4 	movi	r2,3
   125bc:	003fec06 	br	12570 <__alt_data_end+0xf4012570>

000125c0 <_Unwind_SjLj_ForcedUnwind>:
   125c0:	00c20034 	movhi	r3,2048
   125c4:	18c2b304 	addi	r3,r3,2764
   125c8:	defffe04 	addi	sp,sp,-8
   125cc:	18c00017 	ldw	r3,0(r3)
   125d0:	dfc00115 	stw	ra,4(sp)
   125d4:	21400315 	stw	r5,12(r4)
   125d8:	21800415 	stw	r6,16(r4)
   125dc:	d80b883a 	mov	r5,sp
   125e0:	d8c00015 	stw	r3,0(sp)
   125e4:	00122000 	call	12200 <_Unwind_ForcedUnwind_Phase2>
   125e8:	00c001c4 	movi	r3,7
   125ec:	10c00326 	beq	r2,r3,125fc <_Unwind_SjLj_ForcedUnwind+0x3c>
   125f0:	dfc00117 	ldw	ra,4(sp)
   125f4:	dec00204 	addi	sp,sp,8
   125f8:	f800283a 	ret
   125fc:	d809883a 	mov	r4,sp
   12600:	00123d80 	call	123d8 <uw_install_context.isra.1>

00012604 <_Unwind_SjLj_Resume>:
   12604:	00c20034 	movhi	r3,2048
   12608:	18c2b304 	addi	r3,r3,2764
   1260c:	18c00017 	ldw	r3,0(r3)
   12610:	20800317 	ldw	r2,12(r4)
   12614:	defffe04 	addi	sp,sp,-8
   12618:	dfc00115 	stw	ra,4(sp)
   1261c:	d8c00015 	stw	r3,0(sp)
   12620:	d80b883a 	mov	r5,sp
   12624:	1000041e 	bne	r2,zero,12638 <_Unwind_SjLj_Resume+0x34>
   12628:	00123180 	call	12318 <_Unwind_RaiseException_Phase2>
   1262c:	00c001c4 	movi	r3,7
   12630:	10c00326 	beq	r2,r3,12640 <_Unwind_SjLj_Resume+0x3c>
   12634:	00127200 	call	12720 <abort>
   12638:	00122000 	call	12200 <_Unwind_ForcedUnwind_Phase2>
   1263c:	003ffb06 	br	1262c <__alt_data_end+0xf401262c>
   12640:	d809883a 	mov	r4,sp
   12644:	00123d80 	call	123d8 <uw_install_context.isra.1>

00012648 <_Unwind_SjLj_Resume_or_Rethrow>:
   12648:	20800317 	ldw	r2,12(r4)
   1264c:	defffe04 	addi	sp,sp,-8
   12650:	dfc00115 	stw	ra,4(sp)
   12654:	1000041e 	bne	r2,zero,12668 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   12658:	00124f00 	call	124f0 <_Unwind_SjLj_RaiseException>
   1265c:	dfc00117 	ldw	ra,4(sp)
   12660:	dec00204 	addi	sp,sp,8
   12664:	f800283a 	ret
   12668:	00820034 	movhi	r2,2048
   1266c:	1082b304 	addi	r2,r2,2764
   12670:	10800017 	ldw	r2,0(r2)
   12674:	d80b883a 	mov	r5,sp
   12678:	d8800015 	stw	r2,0(sp)
   1267c:	00122000 	call	12200 <_Unwind_ForcedUnwind_Phase2>
   12680:	00c001c4 	movi	r3,7
   12684:	10c00126 	beq	r2,r3,1268c <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   12688:	00127200 	call	12720 <abort>
   1268c:	d809883a 	mov	r4,sp
   12690:	00123d80 	call	123d8 <uw_install_context.isra.1>

00012694 <_Unwind_DeleteException>:
   12694:	20800217 	ldw	r2,8(r4)
   12698:	200b883a 	mov	r5,r4
   1269c:	10000226 	beq	r2,zero,126a8 <_Unwind_DeleteException+0x14>
   126a0:	01000044 	movi	r4,1
   126a4:	1000683a 	jmp	r2
   126a8:	f800283a 	ret

000126ac <_Unwind_Backtrace>:
   126ac:	00820034 	movhi	r2,2048
   126b0:	1082b304 	addi	r2,r2,2764
   126b4:	10800017 	ldw	r2,0(r2)
   126b8:	defffc04 	addi	sp,sp,-16
   126bc:	dc400215 	stw	r17,8(sp)
   126c0:	dc000115 	stw	r16,4(sp)
   126c4:	dfc00315 	stw	ra,12(sp)
   126c8:	2023883a 	mov	r17,r4
   126cc:	2821883a 	mov	r16,r5
   126d0:	d8800015 	stw	r2,0(sp)
   126d4:	00000506 	br	126ec <_Unwind_Backtrace+0x40>
   126d8:	883ee83a 	callr	r17
   126dc:	10000e1e 	bne	r2,zero,12718 <_Unwind_Backtrace+0x6c>
   126e0:	d8800017 	ldw	r2,0(sp)
   126e4:	10800017 	ldw	r2,0(r2)
   126e8:	d8800015 	stw	r2,0(sp)
   126ec:	d809883a 	mov	r4,sp
   126f0:	800b883a 	mov	r5,r16
   126f4:	103ff81e 	bne	r2,zero,126d8 <__alt_data_end+0xf40126d8>
   126f8:	883ee83a 	callr	r17
   126fc:	1000061e 	bne	r2,zero,12718 <_Unwind_Backtrace+0x6c>
   12700:	00800144 	movi	r2,5
   12704:	dfc00317 	ldw	ra,12(sp)
   12708:	dc400217 	ldw	r17,8(sp)
   1270c:	dc000117 	ldw	r16,4(sp)
   12710:	dec00404 	addi	sp,sp,16
   12714:	f800283a 	ret
   12718:	008000c4 	movi	r2,3
   1271c:	003ff906 	br	12704 <__alt_data_end+0xf4012704>

00012720 <abort>:
   12720:	deffff04 	addi	sp,sp,-4
   12724:	01000184 	movi	r4,6
   12728:	dfc00015 	stw	ra,0(sp)
   1272c:	00131cc0 	call	131cc <raise>
   12730:	01000044 	movi	r4,1
   12734:	0013f500 	call	13f50 <_exit>

00012738 <malloc>:
   12738:	00820034 	movhi	r2,2048
   1273c:	1082a704 	addi	r2,r2,2716
   12740:	200b883a 	mov	r5,r4
   12744:	11000017 	ldw	r4,0(r2)
   12748:	00127601 	jmpi	12760 <_malloc_r>

0001274c <free>:
   1274c:	00820034 	movhi	r2,2048
   12750:	1082a704 	addi	r2,r2,2716
   12754:	200b883a 	mov	r5,r4
   12758:	11000017 	ldw	r4,0(r2)
   1275c:	00139ec1 	jmpi	139ec <_free_r>

00012760 <_malloc_r>:
   12760:	defff604 	addi	sp,sp,-40
   12764:	dfc00915 	stw	ra,36(sp)
   12768:	df000815 	stw	fp,32(sp)
   1276c:	ddc00715 	stw	r23,28(sp)
   12770:	dd800615 	stw	r22,24(sp)
   12774:	dd400515 	stw	r21,20(sp)
   12778:	dd000415 	stw	r20,16(sp)
   1277c:	dcc00315 	stw	r19,12(sp)
   12780:	dc800215 	stw	r18,8(sp)
   12784:	dc400115 	stw	r17,4(sp)
   12788:	dc000015 	stw	r16,0(sp)
   1278c:	288002c4 	addi	r2,r5,11
   12790:	00c00584 	movi	r3,22
   12794:	1880042e 	bgeu	r3,r2,127a8 <_malloc_r+0x48>
   12798:	047ffe04 	movi	r17,-8
   1279c:	1462703a 	and	r17,r2,r17
   127a0:	8800020e 	bge	r17,zero,127ac <_malloc_r+0x4c>
   127a4:	00000206 	br	127b0 <_malloc_r+0x50>
   127a8:	04400404 	movi	r17,16
   127ac:	8940032e 	bgeu	r17,r5,127bc <_malloc_r+0x5c>
   127b0:	00800304 	movi	r2,12
   127b4:	20800015 	stw	r2,0(r4)
   127b8:	00017206 	br	12d84 <_malloc_r+0x624>
   127bc:	2027883a 	mov	r19,r4
   127c0:	00142800 	call	14280 <__malloc_lock>
   127c4:	04820034 	movhi	r18,2048
   127c8:	00807dc4 	movi	r2,503
   127cc:	9480c604 	addi	r18,r18,792
   127d0:	14401536 	bltu	r2,r17,12828 <_malloc_r+0xc8>
   127d4:	8804d0fa 	srli	r2,r17,3
   127d8:	1087883a 	add	r3,r2,r2
   127dc:	18c7883a 	add	r3,r3,r3
   127e0:	18c7883a 	add	r3,r3,r3
   127e4:	90c7883a 	add	r3,r18,r3
   127e8:	1c000317 	ldw	r16,12(r3)
   127ec:	80c0031e 	bne	r16,r3,127fc <_malloc_r+0x9c>
   127f0:	80c00204 	addi	r3,r16,8
   127f4:	84000517 	ldw	r16,20(r16)
   127f8:	80c00926 	beq	r16,r3,12820 <_malloc_r+0xc0>
   127fc:	80c00117 	ldw	r3,4(r16)
   12800:	00bfff04 	movi	r2,-4
   12804:	81000217 	ldw	r4,8(r16)
   12808:	1884703a 	and	r2,r3,r2
   1280c:	80c00317 	ldw	r3,12(r16)
   12810:	8085883a 	add	r2,r16,r2
   12814:	20c00315 	stw	r3,12(r4)
   12818:	19000215 	stw	r4,8(r3)
   1281c:	00002d06 	br	128d4 <_malloc_r+0x174>
   12820:	10800084 	addi	r2,r2,2
   12824:	00003506 	br	128fc <_malloc_r+0x19c>
   12828:	8804d27a 	srli	r2,r17,9
   1282c:	10001826 	beq	r2,zero,12890 <_malloc_r+0x130>
   12830:	00c00104 	movi	r3,4
   12834:	18800336 	bltu	r3,r2,12844 <_malloc_r+0xe4>
   12838:	8804d1ba 	srli	r2,r17,6
   1283c:	10800e04 	addi	r2,r2,56
   12840:	00001606 	br	1289c <_malloc_r+0x13c>
   12844:	00c00504 	movi	r3,20
   12848:	18800236 	bltu	r3,r2,12854 <_malloc_r+0xf4>
   1284c:	108016c4 	addi	r2,r2,91
   12850:	00001206 	br	1289c <_malloc_r+0x13c>
   12854:	00c01504 	movi	r3,84
   12858:	18800336 	bltu	r3,r2,12868 <_malloc_r+0x108>
   1285c:	8804d33a 	srli	r2,r17,12
   12860:	10801b84 	addi	r2,r2,110
   12864:	00000d06 	br	1289c <_malloc_r+0x13c>
   12868:	00c05504 	movi	r3,340
   1286c:	18800336 	bltu	r3,r2,1287c <_malloc_r+0x11c>
   12870:	8804d3fa 	srli	r2,r17,15
   12874:	10801dc4 	addi	r2,r2,119
   12878:	00000806 	br	1289c <_malloc_r+0x13c>
   1287c:	00c15504 	movi	r3,1364
   12880:	18800536 	bltu	r3,r2,12898 <_malloc_r+0x138>
   12884:	8804d4ba 	srli	r2,r17,18
   12888:	10801f04 	addi	r2,r2,124
   1288c:	00000306 	br	1289c <_malloc_r+0x13c>
   12890:	00800fc4 	movi	r2,63
   12894:	00000106 	br	1289c <_malloc_r+0x13c>
   12898:	00801f84 	movi	r2,126
   1289c:	1087883a 	add	r3,r2,r2
   128a0:	18c7883a 	add	r3,r3,r3
   128a4:	18c7883a 	add	r3,r3,r3
   128a8:	90c7883a 	add	r3,r18,r3
   128ac:	1c000317 	ldw	r16,12(r3)
   128b0:	01bfff04 	movi	r6,-4
   128b4:	01c003c4 	movi	r7,15
   128b8:	00000906 	br	128e0 <_malloc_r+0x180>
   128bc:	28000716 	blt	r5,zero,128dc <_malloc_r+0x17c>
   128c0:	80800317 	ldw	r2,12(r16)
   128c4:	80c00217 	ldw	r3,8(r16)
   128c8:	18800315 	stw	r2,12(r3)
   128cc:	10c00215 	stw	r3,8(r2)
   128d0:	8105883a 	add	r2,r16,r4
   128d4:	10c00117 	ldw	r3,4(r2)
   128d8:	00013106 	br	12da0 <_malloc_r+0x640>
   128dc:	84000317 	ldw	r16,12(r16)
   128e0:	80c00526 	beq	r16,r3,128f8 <_malloc_r+0x198>
   128e4:	81000117 	ldw	r4,4(r16)
   128e8:	2188703a 	and	r4,r4,r6
   128ec:	244bc83a 	sub	r5,r4,r17
   128f0:	397ff20e 	bge	r7,r5,128bc <__alt_data_end+0xf40128bc>
   128f4:	10bfffc4 	addi	r2,r2,-1
   128f8:	10800044 	addi	r2,r2,1
   128fc:	01020034 	movhi	r4,2048
   12900:	94000417 	ldw	r16,16(r18)
   12904:	2100c604 	addi	r4,r4,792
   12908:	21800204 	addi	r6,r4,8
   1290c:	81805c26 	beq	r16,r6,12a80 <_malloc_r+0x320>
   12910:	81400117 	ldw	r5,4(r16)
   12914:	00ffff04 	movi	r3,-4
   12918:	01c003c4 	movi	r7,15
   1291c:	28c6703a 	and	r3,r5,r3
   12920:	1c4bc83a 	sub	r5,r3,r17
   12924:	3940060e 	bge	r7,r5,12940 <_malloc_r+0x1e0>
   12928:	88800054 	ori	r2,r17,1
   1292c:	8447883a 	add	r3,r16,r17
   12930:	80800115 	stw	r2,4(r16)
   12934:	20c00515 	stw	r3,20(r4)
   12938:	20c00415 	stw	r3,16(r4)
   1293c:	00007706 	br	12b1c <_malloc_r+0x3bc>
   12940:	21800515 	stw	r6,20(r4)
   12944:	21800415 	stw	r6,16(r4)
   12948:	28000516 	blt	r5,zero,12960 <_malloc_r+0x200>
   1294c:	80c7883a 	add	r3,r16,r3
   12950:	18800117 	ldw	r2,4(r3)
   12954:	10800054 	ori	r2,r2,1
   12958:	18800115 	stw	r2,4(r3)
   1295c:	00011206 	br	12da8 <_malloc_r+0x648>
   12960:	01407fc4 	movi	r5,511
   12964:	28c01136 	bltu	r5,r3,129ac <_malloc_r+0x24c>
   12968:	1806d0fa 	srli	r3,r3,3
   1296c:	01400044 	movi	r5,1
   12970:	180fd0ba 	srai	r7,r3,2
   12974:	18c7883a 	add	r3,r3,r3
   12978:	18c7883a 	add	r3,r3,r3
   1297c:	29ce983a 	sll	r7,r5,r7
   12980:	21400117 	ldw	r5,4(r4)
   12984:	18c7883a 	add	r3,r3,r3
   12988:	394ab03a 	or	r5,r7,r5
   1298c:	21400115 	stw	r5,4(r4)
   12990:	1909883a 	add	r4,r3,r4
   12994:	20c00217 	ldw	r3,8(r4)
   12998:	81000315 	stw	r4,12(r16)
   1299c:	80c00215 	stw	r3,8(r16)
   129a0:	24000215 	stw	r16,8(r4)
   129a4:	1c000315 	stw	r16,12(r3)
   129a8:	00003506 	br	12a80 <_malloc_r+0x320>
   129ac:	180ad27a 	srli	r5,r3,9
   129b0:	01000104 	movi	r4,4
   129b4:	21400336 	bltu	r4,r5,129c4 <_malloc_r+0x264>
   129b8:	180ad1ba 	srli	r5,r3,6
   129bc:	29400e04 	addi	r5,r5,56
   129c0:	00001406 	br	12a14 <_malloc_r+0x2b4>
   129c4:	01000504 	movi	r4,20
   129c8:	21400236 	bltu	r4,r5,129d4 <_malloc_r+0x274>
   129cc:	294016c4 	addi	r5,r5,91
   129d0:	00001006 	br	12a14 <_malloc_r+0x2b4>
   129d4:	01001504 	movi	r4,84
   129d8:	21400336 	bltu	r4,r5,129e8 <_malloc_r+0x288>
   129dc:	180ad33a 	srli	r5,r3,12
   129e0:	29401b84 	addi	r5,r5,110
   129e4:	00000b06 	br	12a14 <_malloc_r+0x2b4>
   129e8:	01005504 	movi	r4,340
   129ec:	21400336 	bltu	r4,r5,129fc <_malloc_r+0x29c>
   129f0:	180ad3fa 	srli	r5,r3,15
   129f4:	29401dc4 	addi	r5,r5,119
   129f8:	00000606 	br	12a14 <_malloc_r+0x2b4>
   129fc:	01015504 	movi	r4,1364
   12a00:	21400336 	bltu	r4,r5,12a10 <_malloc_r+0x2b0>
   12a04:	180ad4ba 	srli	r5,r3,18
   12a08:	29401f04 	addi	r5,r5,124
   12a0c:	00000106 	br	12a14 <_malloc_r+0x2b4>
   12a10:	01401f84 	movi	r5,126
   12a14:	2949883a 	add	r4,r5,r5
   12a18:	2109883a 	add	r4,r4,r4
   12a1c:	2109883a 	add	r4,r4,r4
   12a20:	9109883a 	add	r4,r18,r4
   12a24:	21c00217 	ldw	r7,8(r4)
   12a28:	02020034 	movhi	r8,2048
   12a2c:	4200c604 	addi	r8,r8,792
   12a30:	3900081e 	bne	r7,r4,12a54 <_malloc_r+0x2f4>
   12a34:	280bd0ba 	srai	r5,r5,2
   12a38:	00c00044 	movi	r3,1
   12a3c:	194a983a 	sll	r5,r3,r5
   12a40:	40c00117 	ldw	r3,4(r8)
   12a44:	28cab03a 	or	r5,r5,r3
   12a48:	41400115 	stw	r5,4(r8)
   12a4c:	3807883a 	mov	r3,r7
   12a50:	00000706 	br	12a70 <_malloc_r+0x310>
   12a54:	023fff04 	movi	r8,-4
   12a58:	39400117 	ldw	r5,4(r7)
   12a5c:	2a0a703a 	and	r5,r5,r8
   12a60:	1940022e 	bgeu	r3,r5,12a6c <_malloc_r+0x30c>
   12a64:	39c00217 	ldw	r7,8(r7)
   12a68:	393ffb1e 	bne	r7,r4,12a58 <__alt_data_end+0xf4012a58>
   12a6c:	38c00317 	ldw	r3,12(r7)
   12a70:	80c00315 	stw	r3,12(r16)
   12a74:	81c00215 	stw	r7,8(r16)
   12a78:	1c000215 	stw	r16,8(r3)
   12a7c:	3c000315 	stw	r16,12(r7)
   12a80:	1007d0ba 	srai	r3,r2,2
   12a84:	02000044 	movi	r8,1
   12a88:	40d0983a 	sll	r8,r8,r3
   12a8c:	90c00117 	ldw	r3,4(r18)
   12a90:	1a004d36 	bltu	r3,r8,12bc8 <_malloc_r+0x468>
   12a94:	40c8703a 	and	r4,r8,r3
   12a98:	2000061e 	bne	r4,zero,12ab4 <_malloc_r+0x354>
   12a9c:	013fff04 	movi	r4,-4
   12aa0:	1104703a 	and	r2,r2,r4
   12aa4:	4211883a 	add	r8,r8,r8
   12aa8:	40c8703a 	and	r4,r8,r3
   12aac:	10800104 	addi	r2,r2,4
   12ab0:	203ffc26 	beq	r4,zero,12aa4 <__alt_data_end+0xf4012aa4>
   12ab4:	02bfff04 	movi	r10,-4
   12ab8:	02c003c4 	movi	r11,15
   12abc:	1087883a 	add	r3,r2,r2
   12ac0:	18c7883a 	add	r3,r3,r3
   12ac4:	18c7883a 	add	r3,r3,r3
   12ac8:	90c7883a 	add	r3,r18,r3
   12acc:	19c00304 	addi	r7,r3,12
   12ad0:	1013883a 	mov	r9,r2
   12ad4:	3b3ffd04 	addi	r12,r7,-12
   12ad8:	3c000017 	ldw	r16,0(r7)
   12adc:	00000106 	br	12ae4 <_malloc_r+0x384>
   12ae0:	84000317 	ldw	r16,12(r16)
   12ae4:	83001e26 	beq	r16,r12,12b60 <_malloc_r+0x400>
   12ae8:	81000117 	ldw	r4,4(r16)
   12aec:	2288703a 	and	r4,r4,r10
   12af0:	244bc83a 	sub	r5,r4,r17
   12af4:	5940100e 	bge	r11,r5,12b38 <_malloc_r+0x3d8>
   12af8:	88800054 	ori	r2,r17,1
   12afc:	80800115 	stw	r2,4(r16)
   12b00:	81000217 	ldw	r4,8(r16)
   12b04:	80800317 	ldw	r2,12(r16)
   12b08:	8447883a 	add	r3,r16,r17
   12b0c:	20800315 	stw	r2,12(r4)
   12b10:	11000215 	stw	r4,8(r2)
   12b14:	90c00515 	stw	r3,20(r18)
   12b18:	90c00415 	stw	r3,16(r18)
   12b1c:	28800054 	ori	r2,r5,1
   12b20:	19800315 	stw	r6,12(r3)
   12b24:	19800215 	stw	r6,8(r3)
   12b28:	18800115 	stw	r2,4(r3)
   12b2c:	1947883a 	add	r3,r3,r5
   12b30:	19400015 	stw	r5,0(r3)
   12b34:	00009c06 	br	12da8 <_malloc_r+0x648>
   12b38:	283fe916 	blt	r5,zero,12ae0 <__alt_data_end+0xf4012ae0>
   12b3c:	8105883a 	add	r2,r16,r4
   12b40:	10c00117 	ldw	r3,4(r2)
   12b44:	18c00054 	ori	r3,r3,1
   12b48:	10c00115 	stw	r3,4(r2)
   12b4c:	80800317 	ldw	r2,12(r16)
   12b50:	80c00217 	ldw	r3,8(r16)
   12b54:	18800315 	stw	r2,12(r3)
   12b58:	10c00215 	stw	r3,8(r2)
   12b5c:	00009206 	br	12da8 <_malloc_r+0x648>
   12b60:	4a400044 	addi	r9,r9,1
   12b64:	490000cc 	andi	r4,r9,3
   12b68:	39c00204 	addi	r7,r7,8
   12b6c:	203fd91e 	bne	r4,zero,12ad4 <__alt_data_end+0xf4012ad4>
   12b70:	110000cc 	andi	r4,r2,3
   12b74:	2000051e 	bne	r4,zero,12b8c <_malloc_r+0x42c>
   12b78:	90c00117 	ldw	r3,4(r18)
   12b7c:	0204303a 	nor	r2,zero,r8
   12b80:	10c4703a 	and	r2,r2,r3
   12b84:	90800115 	stw	r2,4(r18)
   12b88:	00000406 	br	12b9c <_malloc_r+0x43c>
   12b8c:	193ffe04 	addi	r4,r3,-8
   12b90:	18c00017 	ldw	r3,0(r3)
   12b94:	10bfffc4 	addi	r2,r2,-1
   12b98:	193ff526 	beq	r3,r4,12b70 <__alt_data_end+0xf4012b70>
   12b9c:	90800117 	ldw	r2,4(r18)
   12ba0:	4211883a 	add	r8,r8,r8
   12ba4:	12000836 	bltu	r2,r8,12bc8 <_malloc_r+0x468>
   12ba8:	40000726 	beq	r8,zero,12bc8 <_malloc_r+0x468>
   12bac:	4086703a 	and	r3,r8,r2
   12bb0:	1800031e 	bne	r3,zero,12bc0 <_malloc_r+0x460>
   12bb4:	4a400104 	addi	r9,r9,4
   12bb8:	4211883a 	add	r8,r8,r8
   12bbc:	003ffb06 	br	12bac <__alt_data_end+0xf4012bac>
   12bc0:	4805883a 	mov	r2,r9
   12bc4:	003fbd06 	br	12abc <__alt_data_end+0xf4012abc>
   12bc8:	95c00217 	ldw	r23,8(r18)
   12bcc:	00bfff04 	movi	r2,-4
   12bd0:	bd400117 	ldw	r21,4(r23)
   12bd4:	a8aa703a 	and	r21,r21,r2
   12bd8:	ac400336 	bltu	r21,r17,12be8 <_malloc_r+0x488>
   12bdc:	ac47c83a 	sub	r3,r21,r17
   12be0:	008003c4 	movi	r2,15
   12be4:	10c06916 	blt	r2,r3,12d8c <_malloc_r+0x62c>
   12be8:	d0a02017 	ldw	r2,-32640(gp)
   12bec:	d0e00e17 	ldw	r3,-32712(gp)
   12bf0:	05bfffc4 	movi	r22,-1
   12bf4:	bd61883a 	add	r16,r23,r21
   12bf8:	8885883a 	add	r2,r17,r2
   12bfc:	1d80021e 	bne	r3,r22,12c08 <_malloc_r+0x4a8>
   12c00:	17000404 	addi	fp,r2,16
   12c04:	00000306 	br	12c14 <_malloc_r+0x4b4>
   12c08:	108023c4 	addi	r2,r2,143
   12c0c:	073fe004 	movi	fp,-128
   12c10:	1738703a 	and	fp,r2,fp
   12c14:	9809883a 	mov	r4,r19
   12c18:	e00b883a 	mov	r5,fp
   12c1c:	0012f400 	call	12f40 <_sbrk_r>
   12c20:	1029883a 	mov	r20,r2
   12c24:	15804d26 	beq	r2,r22,12d5c <_malloc_r+0x5fc>
   12c28:	1400012e 	bgeu	r2,r16,12c30 <_malloc_r+0x4d0>
   12c2c:	bc804b1e 	bne	r23,r18,12d5c <_malloc_r+0x5fc>
   12c30:	05820034 	movhi	r22,2048
   12c34:	b584fb04 	addi	r22,r22,5100
   12c38:	b1000017 	ldw	r4,0(r22)
   12c3c:	e109883a 	add	r4,fp,r4
   12c40:	b1000015 	stw	r4,0(r22)
   12c44:	a400071e 	bne	r20,r16,12c64 <_malloc_r+0x504>
   12c48:	a0801fcc 	andi	r2,r20,127
   12c4c:	1000051e 	bne	r2,zero,12c64 <_malloc_r+0x504>
   12c50:	90c00217 	ldw	r3,8(r18)
   12c54:	e545883a 	add	r2,fp,r21
   12c58:	10800054 	ori	r2,r2,1
   12c5c:	18800115 	stw	r2,4(r3)
   12c60:	00003706 	br	12d40 <_malloc_r+0x5e0>
   12c64:	d0e00e17 	ldw	r3,-32712(gp)
   12c68:	00bfffc4 	movi	r2,-1
   12c6c:	1880021e 	bne	r3,r2,12c78 <_malloc_r+0x518>
   12c70:	d5200e15 	stw	r20,-32712(gp)
   12c74:	00000306 	br	12c84 <_malloc_r+0x524>
   12c78:	a407c83a 	sub	r3,r20,r16
   12c7c:	20c7883a 	add	r3,r4,r3
   12c80:	b0c00015 	stw	r3,0(r22)
   12c84:	a40001cc 	andi	r16,r20,7
   12c88:	80000426 	beq	r16,zero,12c9c <_malloc_r+0x53c>
   12c8c:	00c00204 	movi	r3,8
   12c90:	1c21c83a 	sub	r16,r3,r16
   12c94:	a429883a 	add	r20,r20,r16
   12c98:	00000106 	br	12ca0 <_malloc_r+0x540>
   12c9c:	0021883a 	mov	r16,zero
   12ca0:	a705883a 	add	r2,r20,fp
   12ca4:	10801fcc 	andi	r2,r2,127
   12ca8:	84002004 	addi	r16,r16,128
   12cac:	80a1c83a 	sub	r16,r16,r2
   12cb0:	9809883a 	mov	r4,r19
   12cb4:	800b883a 	mov	r5,r16
   12cb8:	0012f400 	call	12f40 <_sbrk_r>
   12cbc:	00ffffc4 	movi	r3,-1
   12cc0:	10c0021e 	bne	r2,r3,12ccc <_malloc_r+0x56c>
   12cc4:	a005883a 	mov	r2,r20
   12cc8:	0021883a 	mov	r16,zero
   12ccc:	b0c00017 	ldw	r3,0(r22)
   12cd0:	1505c83a 	sub	r2,r2,r20
   12cd4:	95000215 	stw	r20,8(r18)
   12cd8:	80c7883a 	add	r3,r16,r3
   12cdc:	1421883a 	add	r16,r2,r16
   12ce0:	84000054 	ori	r16,r16,1
   12ce4:	b0c00015 	stw	r3,0(r22)
   12ce8:	a4000115 	stw	r16,4(r20)
   12cec:	bc801426 	beq	r23,r18,12d40 <_malloc_r+0x5e0>
   12cf0:	00c003c4 	movi	r3,15
   12cf4:	1d400336 	bltu	r3,r21,12d04 <_malloc_r+0x5a4>
   12cf8:	00800044 	movi	r2,1
   12cfc:	a0800115 	stw	r2,4(r20)
   12d00:	00001606 	br	12d5c <_malloc_r+0x5fc>
   12d04:	00bffe04 	movi	r2,-8
   12d08:	ad7ffd04 	addi	r21,r21,-12
   12d0c:	a8aa703a 	and	r21,r21,r2
   12d10:	b8800117 	ldw	r2,4(r23)
   12d14:	01000144 	movi	r4,5
   12d18:	1080004c 	andi	r2,r2,1
   12d1c:	a884b03a 	or	r2,r21,r2
   12d20:	b8800115 	stw	r2,4(r23)
   12d24:	bd45883a 	add	r2,r23,r21
   12d28:	11000115 	stw	r4,4(r2)
   12d2c:	11000215 	stw	r4,8(r2)
   12d30:	1d40032e 	bgeu	r3,r21,12d40 <_malloc_r+0x5e0>
   12d34:	9809883a 	mov	r4,r19
   12d38:	b9400204 	addi	r5,r23,8
   12d3c:	00139ec0 	call	139ec <_free_r>
   12d40:	b0800017 	ldw	r2,0(r22)
   12d44:	d0e01f17 	ldw	r3,-32644(gp)
   12d48:	1880012e 	bgeu	r3,r2,12d50 <_malloc_r+0x5f0>
   12d4c:	d0a01f15 	stw	r2,-32644(gp)
   12d50:	d0e01e17 	ldw	r3,-32648(gp)
   12d54:	1880012e 	bgeu	r3,r2,12d5c <_malloc_r+0x5fc>
   12d58:	d0a01e15 	stw	r2,-32648(gp)
   12d5c:	90800217 	ldw	r2,8(r18)
   12d60:	10c00117 	ldw	r3,4(r2)
   12d64:	00bfff04 	movi	r2,-4
   12d68:	1884703a 	and	r2,r3,r2
   12d6c:	1447c83a 	sub	r3,r2,r17
   12d70:	14400236 	bltu	r2,r17,12d7c <_malloc_r+0x61c>
   12d74:	008003c4 	movi	r2,15
   12d78:	10c00416 	blt	r2,r3,12d8c <_malloc_r+0x62c>
   12d7c:	9809883a 	mov	r4,r19
   12d80:	00142a00 	call	142a0 <__malloc_unlock>
   12d84:	0005883a 	mov	r2,zero
   12d88:	00000a06 	br	12db4 <_malloc_r+0x654>
   12d8c:	94000217 	ldw	r16,8(r18)
   12d90:	88800054 	ori	r2,r17,1
   12d94:	80800115 	stw	r2,4(r16)
   12d98:	8445883a 	add	r2,r16,r17
   12d9c:	90800215 	stw	r2,8(r18)
   12da0:	18c00054 	ori	r3,r3,1
   12da4:	10c00115 	stw	r3,4(r2)
   12da8:	9809883a 	mov	r4,r19
   12dac:	00142a00 	call	142a0 <__malloc_unlock>
   12db0:	80800204 	addi	r2,r16,8
   12db4:	dfc00917 	ldw	ra,36(sp)
   12db8:	df000817 	ldw	fp,32(sp)
   12dbc:	ddc00717 	ldw	r23,28(sp)
   12dc0:	dd800617 	ldw	r22,24(sp)
   12dc4:	dd400517 	ldw	r21,20(sp)
   12dc8:	dd000417 	ldw	r20,16(sp)
   12dcc:	dcc00317 	ldw	r19,12(sp)
   12dd0:	dc800217 	ldw	r18,8(sp)
   12dd4:	dc400117 	ldw	r17,4(sp)
   12dd8:	dc000017 	ldw	r16,0(sp)
   12ddc:	dec00a04 	addi	sp,sp,40
   12de0:	f800283a 	ret

00012de4 <memset>:
   12de4:	2005883a 	mov	r2,r4
   12de8:	2007883a 	mov	r3,r4
   12dec:	218d883a 	add	r6,r4,r6
   12df0:	19800326 	beq	r3,r6,12e00 <memset+0x1c>
   12df4:	19400005 	stb	r5,0(r3)
   12df8:	18c00044 	addi	r3,r3,1
   12dfc:	003ffc06 	br	12df0 <__alt_data_end+0xf4012df0>
   12e00:	f800283a 	ret

00012e04 <_printf_r>:
   12e04:	defffd04 	addi	sp,sp,-12
   12e08:	dfc00015 	stw	ra,0(sp)
   12e0c:	d9800115 	stw	r6,4(sp)
   12e10:	d9c00215 	stw	r7,8(sp)
   12e14:	20c00217 	ldw	r3,8(r4)
   12e18:	280d883a 	mov	r6,r5
   12e1c:	01400074 	movhi	r5,1
   12e20:	294f1d04 	addi	r5,r5,15476
   12e24:	19400115 	stw	r5,4(r3)
   12e28:	21400217 	ldw	r5,8(r4)
   12e2c:	d9c00104 	addi	r7,sp,4
   12e30:	00133380 	call	13338 <___vfprintf_internal_r>
   12e34:	dfc00017 	ldw	ra,0(sp)
   12e38:	dec00304 	addi	sp,sp,12
   12e3c:	f800283a 	ret

00012e40 <printf>:
   12e40:	defffc04 	addi	sp,sp,-16
   12e44:	dfc00015 	stw	ra,0(sp)
   12e48:	d9400115 	stw	r5,4(sp)
   12e4c:	d9800215 	stw	r6,8(sp)
   12e50:	d9c00315 	stw	r7,12(sp)
   12e54:	00820034 	movhi	r2,2048
   12e58:	1082a704 	addi	r2,r2,2716
   12e5c:	10800017 	ldw	r2,0(r2)
   12e60:	200b883a 	mov	r5,r4
   12e64:	01000074 	movhi	r4,1
   12e68:	10c00217 	ldw	r3,8(r2)
   12e6c:	210f1d04 	addi	r4,r4,15476
   12e70:	d9800104 	addi	r6,sp,4
   12e74:	19000115 	stw	r4,4(r3)
   12e78:	11000217 	ldw	r4,8(r2)
   12e7c:	00138a40 	call	138a4 <__vfprintf_internal>
   12e80:	dfc00017 	ldw	ra,0(sp)
   12e84:	dec00404 	addi	sp,sp,16
   12e88:	f800283a 	ret

00012e8c <_putchar_r>:
   12e8c:	21800217 	ldw	r6,8(r4)
   12e90:	0013d741 	jmpi	13d74 <_putc_r>

00012e94 <putchar>:
   12e94:	00820034 	movhi	r2,2048
   12e98:	1082a704 	addi	r2,r2,2716
   12e9c:	200b883a 	mov	r5,r4
   12ea0:	11000017 	ldw	r4,0(r2)
   12ea4:	21800217 	ldw	r6,8(r4)
   12ea8:	0013d741 	jmpi	13d74 <_putc_r>

00012eac <_puts_r>:
   12eac:	defffd04 	addi	sp,sp,-12
   12eb0:	dc000015 	stw	r16,0(sp)
   12eb4:	2021883a 	mov	r16,r4
   12eb8:	2809883a 	mov	r4,r5
   12ebc:	dfc00215 	stw	ra,8(sp)
   12ec0:	dc400115 	stw	r17,4(sp)
   12ec4:	2823883a 	mov	r17,r5
   12ec8:	00132b00 	call	132b0 <strlen>
   12ecc:	81400217 	ldw	r5,8(r16)
   12ed0:	00c00074 	movhi	r3,1
   12ed4:	18cf1d04 	addi	r3,r3,15476
   12ed8:	28c00115 	stw	r3,4(r5)
   12edc:	8009883a 	mov	r4,r16
   12ee0:	880d883a 	mov	r6,r17
   12ee4:	100f883a 	mov	r7,r2
   12ee8:	0013c740 	call	13c74 <__sfvwrite_small_dev>
   12eec:	00ffffc4 	movi	r3,-1
   12ef0:	10c00926 	beq	r2,r3,12f18 <_puts_r+0x6c>
   12ef4:	81400217 	ldw	r5,8(r16)
   12ef8:	01820034 	movhi	r6,2048
   12efc:	8009883a 	mov	r4,r16
   12f00:	28800117 	ldw	r2,4(r5)
   12f04:	3180a904 	addi	r6,r6,676
   12f08:	01c00044 	movi	r7,1
   12f0c:	103ee83a 	callr	r2
   12f10:	10bfffe0 	cmpeqi	r2,r2,-1
   12f14:	0085c83a 	sub	r2,zero,r2
   12f18:	dfc00217 	ldw	ra,8(sp)
   12f1c:	dc400117 	ldw	r17,4(sp)
   12f20:	dc000017 	ldw	r16,0(sp)
   12f24:	dec00304 	addi	sp,sp,12
   12f28:	f800283a 	ret

00012f2c <puts>:
   12f2c:	00820034 	movhi	r2,2048
   12f30:	1082a704 	addi	r2,r2,2716
   12f34:	200b883a 	mov	r5,r4
   12f38:	11000017 	ldw	r4,0(r2)
   12f3c:	0012eac1 	jmpi	12eac <_puts_r>

00012f40 <_sbrk_r>:
   12f40:	defffd04 	addi	sp,sp,-12
   12f44:	dc000015 	stw	r16,0(sp)
   12f48:	04020034 	movhi	r16,2048
   12f4c:	dc400115 	stw	r17,4(sp)
   12f50:	8402b704 	addi	r16,r16,2780
   12f54:	2023883a 	mov	r17,r4
   12f58:	2809883a 	mov	r4,r5
   12f5c:	dfc00215 	stw	ra,8(sp)
   12f60:	80000015 	stw	zero,0(r16)
   12f64:	001452c0 	call	1452c <sbrk>
   12f68:	00ffffc4 	movi	r3,-1
   12f6c:	10c0031e 	bne	r2,r3,12f7c <_sbrk_r+0x3c>
   12f70:	80c00017 	ldw	r3,0(r16)
   12f74:	18000126 	beq	r3,zero,12f7c <_sbrk_r+0x3c>
   12f78:	88c00015 	stw	r3,0(r17)
   12f7c:	dfc00217 	ldw	ra,8(sp)
   12f80:	dc400117 	ldw	r17,4(sp)
   12f84:	dc000017 	ldw	r16,0(sp)
   12f88:	dec00304 	addi	sp,sp,12
   12f8c:	f800283a 	ret

00012f90 <_init_signal_r>:
   12f90:	20800b17 	ldw	r2,44(r4)
   12f94:	defffe04 	addi	sp,sp,-8
   12f98:	dc000015 	stw	r16,0(sp)
   12f9c:	dfc00115 	stw	ra,4(sp)
   12fa0:	2021883a 	mov	r16,r4
   12fa4:	10000226 	beq	r2,zero,12fb0 <_init_signal_r+0x20>
   12fa8:	0005883a 	mov	r2,zero
   12fac:	00000d06 	br	12fe4 <_init_signal_r+0x54>
   12fb0:	01402004 	movi	r5,128
   12fb4:	00127600 	call	12760 <_malloc_r>
   12fb8:	80800b15 	stw	r2,44(r16)
   12fbc:	10000826 	beq	r2,zero,12fe0 <_init_signal_r+0x50>
   12fc0:	0005883a 	mov	r2,zero
   12fc4:	01002004 	movi	r4,128
   12fc8:	80c00b17 	ldw	r3,44(r16)
   12fcc:	1887883a 	add	r3,r3,r2
   12fd0:	18000015 	stw	zero,0(r3)
   12fd4:	10800104 	addi	r2,r2,4
   12fd8:	113ffb1e 	bne	r2,r4,12fc8 <__alt_data_end+0xf4012fc8>
   12fdc:	003ff206 	br	12fa8 <__alt_data_end+0xf4012fa8>
   12fe0:	00bfffc4 	movi	r2,-1
   12fe4:	dfc00117 	ldw	ra,4(sp)
   12fe8:	dc000017 	ldw	r16,0(sp)
   12fec:	dec00204 	addi	sp,sp,8
   12ff0:	f800283a 	ret

00012ff4 <_signal_r>:
   12ff4:	defffc04 	addi	sp,sp,-16
   12ff8:	dc400115 	stw	r17,4(sp)
   12ffc:	dfc00315 	stw	ra,12(sp)
   13000:	dc800215 	stw	r18,8(sp)
   13004:	dc000015 	stw	r16,0(sp)
   13008:	008007c4 	movi	r2,31
   1300c:	2023883a 	mov	r17,r4
   13010:	1140032e 	bgeu	r2,r5,13020 <_signal_r+0x2c>
   13014:	00800584 	movi	r2,22
   13018:	20800015 	stw	r2,0(r4)
   1301c:	00000d06 	br	13054 <_signal_r+0x60>
   13020:	20800b17 	ldw	r2,44(r4)
   13024:	3025883a 	mov	r18,r6
   13028:	2821883a 	mov	r16,r5
   1302c:	10000726 	beq	r2,zero,1304c <_signal_r+0x58>
   13030:	88800b17 	ldw	r2,44(r17)
   13034:	8421883a 	add	r16,r16,r16
   13038:	8421883a 	add	r16,r16,r16
   1303c:	1421883a 	add	r16,r2,r16
   13040:	80800017 	ldw	r2,0(r16)
   13044:	84800015 	stw	r18,0(r16)
   13048:	00000306 	br	13058 <_signal_r+0x64>
   1304c:	0012f900 	call	12f90 <_init_signal_r>
   13050:	103ff726 	beq	r2,zero,13030 <__alt_data_end+0xf4013030>
   13054:	00bfffc4 	movi	r2,-1
   13058:	dfc00317 	ldw	ra,12(sp)
   1305c:	dc800217 	ldw	r18,8(sp)
   13060:	dc400117 	ldw	r17,4(sp)
   13064:	dc000017 	ldw	r16,0(sp)
   13068:	dec00404 	addi	sp,sp,16
   1306c:	f800283a 	ret

00013070 <_raise_r>:
   13070:	008007c4 	movi	r2,31
   13074:	1140042e 	bgeu	r2,r5,13088 <_raise_r+0x18>
   13078:	00800584 	movi	r2,22
   1307c:	20800015 	stw	r2,0(r4)
   13080:	00bfffc4 	movi	r2,-1
   13084:	f800283a 	ret
   13088:	20c00b17 	ldw	r3,44(r4)
   1308c:	defffd04 	addi	sp,sp,-12
   13090:	dc400115 	stw	r17,4(sp)
   13094:	dc000015 	stw	r16,0(sp)
   13098:	dfc00215 	stw	ra,8(sp)
   1309c:	2821883a 	mov	r16,r5
   130a0:	2023883a 	mov	r17,r4
   130a4:	18000526 	beq	r3,zero,130bc <_raise_r+0x4c>
   130a8:	2945883a 	add	r2,r5,r5
   130ac:	1085883a 	add	r2,r2,r2
   130b0:	1887883a 	add	r3,r3,r2
   130b4:	19400017 	ldw	r5,0(r3)
   130b8:	28000a1e 	bne	r5,zero,130e4 <_raise_r+0x74>
   130bc:	8809883a 	mov	r4,r17
   130c0:	00132740 	call	13274 <_getpid_r>
   130c4:	8809883a 	mov	r4,r17
   130c8:	100b883a 	mov	r5,r2
   130cc:	800d883a 	mov	r6,r16
   130d0:	dfc00217 	ldw	ra,8(sp)
   130d4:	dc400117 	ldw	r17,4(sp)
   130d8:	dc000017 	ldw	r16,0(sp)
   130dc:	dec00304 	addi	sp,sp,12
   130e0:	00132201 	jmpi	13220 <_kill_r>
   130e4:	00800044 	movi	r2,1
   130e8:	28800826 	beq	r5,r2,1310c <_raise_r+0x9c>
   130ec:	013fffc4 	movi	r4,-1
   130f0:	2900031e 	bne	r5,r4,13100 <_raise_r+0x90>
   130f4:	00c00584 	movi	r3,22
   130f8:	88c00015 	stw	r3,0(r17)
   130fc:	00000406 	br	13110 <_raise_r+0xa0>
   13100:	18000015 	stw	zero,0(r3)
   13104:	8009883a 	mov	r4,r16
   13108:	283ee83a 	callr	r5
   1310c:	0005883a 	mov	r2,zero
   13110:	dfc00217 	ldw	ra,8(sp)
   13114:	dc400117 	ldw	r17,4(sp)
   13118:	dc000017 	ldw	r16,0(sp)
   1311c:	dec00304 	addi	sp,sp,12
   13120:	f800283a 	ret

00013124 <__sigtramp_r>:
   13124:	008007c4 	movi	r2,31
   13128:	11402636 	bltu	r2,r5,131c4 <__sigtramp_r+0xa0>
   1312c:	20800b17 	ldw	r2,44(r4)
   13130:	defffd04 	addi	sp,sp,-12
   13134:	dc400115 	stw	r17,4(sp)
   13138:	dc000015 	stw	r16,0(sp)
   1313c:	dfc00215 	stw	ra,8(sp)
   13140:	2023883a 	mov	r17,r4
   13144:	2821883a 	mov	r16,r5
   13148:	10000726 	beq	r2,zero,13168 <__sigtramp_r+0x44>
   1314c:	88c00b17 	ldw	r3,44(r17)
   13150:	8405883a 	add	r2,r16,r16
   13154:	1085883a 	add	r2,r2,r2
   13158:	1885883a 	add	r2,r3,r2
   1315c:	10c00017 	ldw	r3,0(r2)
   13160:	1800051e 	bne	r3,zero,13178 <__sigtramp_r+0x54>
   13164:	00000d06 	br	1319c <__sigtramp_r+0x78>
   13168:	0012f900 	call	12f90 <_init_signal_r>
   1316c:	103ff726 	beq	r2,zero,1314c <__alt_data_end+0xf401314c>
   13170:	00bfffc4 	movi	r2,-1
   13174:	00000e06 	br	131b0 <__sigtramp_r+0x8c>
   13178:	013fffc4 	movi	r4,-1
   1317c:	19000926 	beq	r3,r4,131a4 <__sigtramp_r+0x80>
   13180:	01000044 	movi	r4,1
   13184:	19000926 	beq	r3,r4,131ac <__sigtramp_r+0x88>
   13188:	10000015 	stw	zero,0(r2)
   1318c:	8009883a 	mov	r4,r16
   13190:	183ee83a 	callr	r3
   13194:	0005883a 	mov	r2,zero
   13198:	00000506 	br	131b0 <__sigtramp_r+0x8c>
   1319c:	00800044 	movi	r2,1
   131a0:	00000306 	br	131b0 <__sigtramp_r+0x8c>
   131a4:	00800084 	movi	r2,2
   131a8:	00000106 	br	131b0 <__sigtramp_r+0x8c>
   131ac:	008000c4 	movi	r2,3
   131b0:	dfc00217 	ldw	ra,8(sp)
   131b4:	dc400117 	ldw	r17,4(sp)
   131b8:	dc000017 	ldw	r16,0(sp)
   131bc:	dec00304 	addi	sp,sp,12
   131c0:	f800283a 	ret
   131c4:	00bfffc4 	movi	r2,-1
   131c8:	f800283a 	ret

000131cc <raise>:
   131cc:	00820034 	movhi	r2,2048
   131d0:	1082a704 	addi	r2,r2,2716
   131d4:	200b883a 	mov	r5,r4
   131d8:	11000017 	ldw	r4,0(r2)
   131dc:	00130701 	jmpi	13070 <_raise_r>

000131e0 <signal>:
   131e0:	00c20034 	movhi	r3,2048
   131e4:	18c2a704 	addi	r3,r3,2716
   131e8:	2005883a 	mov	r2,r4
   131ec:	19000017 	ldw	r4,0(r3)
   131f0:	280d883a 	mov	r6,r5
   131f4:	100b883a 	mov	r5,r2
   131f8:	0012ff41 	jmpi	12ff4 <_signal_r>

000131fc <_init_signal>:
   131fc:	00820034 	movhi	r2,2048
   13200:	1082a704 	addi	r2,r2,2716
   13204:	11000017 	ldw	r4,0(r2)
   13208:	0012f901 	jmpi	12f90 <_init_signal_r>

0001320c <__sigtramp>:
   1320c:	00820034 	movhi	r2,2048
   13210:	1082a704 	addi	r2,r2,2716
   13214:	200b883a 	mov	r5,r4
   13218:	11000017 	ldw	r4,0(r2)
   1321c:	00131241 	jmpi	13124 <__sigtramp_r>

00013220 <_kill_r>:
   13220:	defffd04 	addi	sp,sp,-12
   13224:	dc000015 	stw	r16,0(sp)
   13228:	04020034 	movhi	r16,2048
   1322c:	dc400115 	stw	r17,4(sp)
   13230:	8402b704 	addi	r16,r16,2780
   13234:	2023883a 	mov	r17,r4
   13238:	2809883a 	mov	r4,r5
   1323c:	300b883a 	mov	r5,r6
   13240:	dfc00215 	stw	ra,8(sp)
   13244:	80000015 	stw	zero,0(r16)
   13248:	0013ff40 	call	13ff4 <kill>
   1324c:	00ffffc4 	movi	r3,-1
   13250:	10c0031e 	bne	r2,r3,13260 <_kill_r+0x40>
   13254:	80c00017 	ldw	r3,0(r16)
   13258:	18000126 	beq	r3,zero,13260 <_kill_r+0x40>
   1325c:	88c00015 	stw	r3,0(r17)
   13260:	dfc00217 	ldw	ra,8(sp)
   13264:	dc400117 	ldw	r17,4(sp)
   13268:	dc000017 	ldw	r16,0(sp)
   1326c:	dec00304 	addi	sp,sp,12
   13270:	f800283a 	ret

00013274 <_getpid_r>:
   13274:	0013f841 	jmpi	13f84 <getpid>

00013278 <strcmp>:
   13278:	20800003 	ldbu	r2,0(r4)
   1327c:	10c03fcc 	andi	r3,r2,255
   13280:	18c0201c 	xori	r3,r3,128
   13284:	18ffe004 	addi	r3,r3,-128
   13288:	18000526 	beq	r3,zero,132a0 <strcmp+0x28>
   1328c:	29800007 	ldb	r6,0(r5)
   13290:	1980031e 	bne	r3,r6,132a0 <strcmp+0x28>
   13294:	21000044 	addi	r4,r4,1
   13298:	29400044 	addi	r5,r5,1
   1329c:	003ff606 	br	13278 <__alt_data_end+0xf4013278>
   132a0:	28c00003 	ldbu	r3,0(r5)
   132a4:	10803fcc 	andi	r2,r2,255
   132a8:	10c5c83a 	sub	r2,r2,r3
   132ac:	f800283a 	ret

000132b0 <strlen>:
   132b0:	2005883a 	mov	r2,r4
   132b4:	10c00007 	ldb	r3,0(r2)
   132b8:	18000226 	beq	r3,zero,132c4 <strlen+0x14>
   132bc:	10800044 	addi	r2,r2,1
   132c0:	003ffc06 	br	132b4 <__alt_data_end+0xf40132b4>
   132c4:	1105c83a 	sub	r2,r2,r4
   132c8:	f800283a 	ret

000132cc <print_repeat>:
   132cc:	defffb04 	addi	sp,sp,-20
   132d0:	dc800315 	stw	r18,12(sp)
   132d4:	dc400215 	stw	r17,8(sp)
   132d8:	dc000115 	stw	r16,4(sp)
   132dc:	dfc00415 	stw	ra,16(sp)
   132e0:	2025883a 	mov	r18,r4
   132e4:	2823883a 	mov	r17,r5
   132e8:	d9800005 	stb	r6,0(sp)
   132ec:	3821883a 	mov	r16,r7
   132f0:	04000a0e 	bge	zero,r16,1331c <print_repeat+0x50>
   132f4:	88800117 	ldw	r2,4(r17)
   132f8:	9009883a 	mov	r4,r18
   132fc:	880b883a 	mov	r5,r17
   13300:	d80d883a 	mov	r6,sp
   13304:	01c00044 	movi	r7,1
   13308:	103ee83a 	callr	r2
   1330c:	843fffc4 	addi	r16,r16,-1
   13310:	103ff726 	beq	r2,zero,132f0 <__alt_data_end+0xf40132f0>
   13314:	00bfffc4 	movi	r2,-1
   13318:	00000106 	br	13320 <print_repeat+0x54>
   1331c:	0005883a 	mov	r2,zero
   13320:	dfc00417 	ldw	ra,16(sp)
   13324:	dc800317 	ldw	r18,12(sp)
   13328:	dc400217 	ldw	r17,8(sp)
   1332c:	dc000117 	ldw	r16,4(sp)
   13330:	dec00504 	addi	sp,sp,20
   13334:	f800283a 	ret

00013338 <___vfprintf_internal_r>:
   13338:	deffe304 	addi	sp,sp,-116
   1333c:	d8c00804 	addi	r3,sp,32
   13340:	df001b15 	stw	fp,108(sp)
   13344:	ddc01a15 	stw	r23,104(sp)
   13348:	dd801915 	stw	r22,100(sp)
   1334c:	dd401815 	stw	r21,96(sp)
   13350:	dd001715 	stw	r20,92(sp)
   13354:	dcc01615 	stw	r19,88(sp)
   13358:	dc801515 	stw	r18,84(sp)
   1335c:	dc401415 	stw	r17,80(sp)
   13360:	dc001315 	stw	r16,76(sp)
   13364:	dfc01c15 	stw	ra,112(sp)
   13368:	2029883a 	mov	r20,r4
   1336c:	2823883a 	mov	r17,r5
   13370:	3839883a 	mov	fp,r7
   13374:	d9800f15 	stw	r6,60(sp)
   13378:	0021883a 	mov	r16,zero
   1337c:	d8000e15 	stw	zero,56(sp)
   13380:	002f883a 	mov	r23,zero
   13384:	002b883a 	mov	r21,zero
   13388:	0027883a 	mov	r19,zero
   1338c:	0025883a 	mov	r18,zero
   13390:	d8000c15 	stw	zero,48(sp)
   13394:	d8000b15 	stw	zero,44(sp)
   13398:	002d883a 	mov	r22,zero
   1339c:	d8c00915 	stw	r3,36(sp)
   133a0:	d8c00f17 	ldw	r3,60(sp)
   133a4:	19000003 	ldbu	r4,0(r3)
   133a8:	20803fcc 	andi	r2,r4,255
   133ac:	1080201c 	xori	r2,r2,128
   133b0:	10bfe004 	addi	r2,r2,-128
   133b4:	10012e26 	beq	r2,zero,13870 <___vfprintf_internal_r+0x538>
   133b8:	01400044 	movi	r5,1
   133bc:	b1401426 	beq	r22,r5,13410 <___vfprintf_internal_r+0xd8>
   133c0:	2d800216 	blt	r5,r22,133cc <___vfprintf_internal_r+0x94>
   133c4:	b0000626 	beq	r22,zero,133e0 <___vfprintf_internal_r+0xa8>
   133c8:	00012506 	br	13860 <___vfprintf_internal_r+0x528>
   133cc:	01400084 	movi	r5,2
   133d0:	b1401d26 	beq	r22,r5,13448 <___vfprintf_internal_r+0x110>
   133d4:	014000c4 	movi	r5,3
   133d8:	b1402b26 	beq	r22,r5,13488 <___vfprintf_internal_r+0x150>
   133dc:	00012006 	br	13860 <___vfprintf_internal_r+0x528>
   133e0:	01400944 	movi	r5,37
   133e4:	11410d26 	beq	r2,r5,1381c <___vfprintf_internal_r+0x4e4>
   133e8:	88800117 	ldw	r2,4(r17)
   133ec:	d9000005 	stb	r4,0(sp)
   133f0:	880b883a 	mov	r5,r17
   133f4:	a009883a 	mov	r4,r20
   133f8:	d80d883a 	mov	r6,sp
   133fc:	01c00044 	movi	r7,1
   13400:	103ee83a 	callr	r2
   13404:	1000e81e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13408:	84000044 	addi	r16,r16,1
   1340c:	00011406 	br	13860 <___vfprintf_internal_r+0x528>
   13410:	01400c04 	movi	r5,48
   13414:	11410a26 	beq	r2,r5,13840 <___vfprintf_internal_r+0x508>
   13418:	01400944 	movi	r5,37
   1341c:	11400a1e 	bne	r2,r5,13448 <___vfprintf_internal_r+0x110>
   13420:	d8800005 	stb	r2,0(sp)
   13424:	88800117 	ldw	r2,4(r17)
   13428:	a009883a 	mov	r4,r20
   1342c:	880b883a 	mov	r5,r17
   13430:	d80d883a 	mov	r6,sp
   13434:	b00f883a 	mov	r7,r22
   13438:	103ee83a 	callr	r2
   1343c:	1000da1e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13440:	84000044 	addi	r16,r16,1
   13444:	00010506 	br	1385c <___vfprintf_internal_r+0x524>
   13448:	25bff404 	addi	r22,r4,-48
   1344c:	b5803fcc 	andi	r22,r22,255
   13450:	00c00244 	movi	r3,9
   13454:	1d800936 	bltu	r3,r22,1347c <___vfprintf_internal_r+0x144>
   13458:	00bfffc4 	movi	r2,-1
   1345c:	90800426 	beq	r18,r2,13470 <___vfprintf_internal_r+0x138>
   13460:	9009883a 	mov	r4,r18
   13464:	01400284 	movi	r5,10
   13468:	00121d80 	call	121d8 <__mulsi3>
   1346c:	00000106 	br	13474 <___vfprintf_internal_r+0x13c>
   13470:	0005883a 	mov	r2,zero
   13474:	15a5883a 	add	r18,r2,r22
   13478:	0000f206 	br	13844 <___vfprintf_internal_r+0x50c>
   1347c:	01400b84 	movi	r5,46
   13480:	1140f426 	beq	r2,r5,13854 <___vfprintf_internal_r+0x51c>
   13484:	05800084 	movi	r22,2
   13488:	213ff404 	addi	r4,r4,-48
   1348c:	20c03fcc 	andi	r3,r4,255
   13490:	01000244 	movi	r4,9
   13494:	20c00b36 	bltu	r4,r3,134c4 <___vfprintf_internal_r+0x18c>
   13498:	00bfffc4 	movi	r2,-1
   1349c:	98800626 	beq	r19,r2,134b8 <___vfprintf_internal_r+0x180>
   134a0:	9809883a 	mov	r4,r19
   134a4:	01400284 	movi	r5,10
   134a8:	d8c01115 	stw	r3,68(sp)
   134ac:	00121d80 	call	121d8 <__mulsi3>
   134b0:	d8c01117 	ldw	r3,68(sp)
   134b4:	00000106 	br	134bc <___vfprintf_internal_r+0x184>
   134b8:	0005883a 	mov	r2,zero
   134bc:	10e7883a 	add	r19,r2,r3
   134c0:	0000e706 	br	13860 <___vfprintf_internal_r+0x528>
   134c4:	01401b04 	movi	r5,108
   134c8:	1140e026 	beq	r2,r5,1384c <___vfprintf_internal_r+0x514>
   134cc:	013fffc4 	movi	r4,-1
   134d0:	99000226 	beq	r19,r4,134dc <___vfprintf_internal_r+0x1a4>
   134d4:	d8000b15 	stw	zero,44(sp)
   134d8:	00000106 	br	134e0 <___vfprintf_internal_r+0x1a8>
   134dc:	04c00044 	movi	r19,1
   134e0:	01001a44 	movi	r4,105
   134e4:	11001626 	beq	r2,r4,13540 <___vfprintf_internal_r+0x208>
   134e8:	20800916 	blt	r4,r2,13510 <___vfprintf_internal_r+0x1d8>
   134ec:	010018c4 	movi	r4,99
   134f0:	11009626 	beq	r2,r4,1374c <___vfprintf_internal_r+0x414>
   134f4:	01001904 	movi	r4,100
   134f8:	11001126 	beq	r2,r4,13540 <___vfprintf_internal_r+0x208>
   134fc:	01001604 	movi	r4,88
   13500:	1100d61e 	bne	r2,r4,1385c <___vfprintf_internal_r+0x524>
   13504:	00c00044 	movi	r3,1
   13508:	d8c00e15 	stw	r3,56(sp)
   1350c:	00001406 	br	13560 <___vfprintf_internal_r+0x228>
   13510:	01001cc4 	movi	r4,115
   13514:	1100a626 	beq	r2,r4,137b0 <___vfprintf_internal_r+0x478>
   13518:	20800416 	blt	r4,r2,1352c <___vfprintf_internal_r+0x1f4>
   1351c:	01001bc4 	movi	r4,111
   13520:	1100ce1e 	bne	r2,r4,1385c <___vfprintf_internal_r+0x524>
   13524:	05400204 	movi	r21,8
   13528:	00000e06 	br	13564 <___vfprintf_internal_r+0x22c>
   1352c:	01001d44 	movi	r4,117
   13530:	11000c26 	beq	r2,r4,13564 <___vfprintf_internal_r+0x22c>
   13534:	01001e04 	movi	r4,120
   13538:	11000926 	beq	r2,r4,13560 <___vfprintf_internal_r+0x228>
   1353c:	0000c706 	br	1385c <___vfprintf_internal_r+0x524>
   13540:	e0800104 	addi	r2,fp,4
   13544:	b8000726 	beq	r23,zero,13564 <___vfprintf_internal_r+0x22c>
   13548:	d8800d15 	stw	r2,52(sp)
   1354c:	e7000017 	ldw	fp,0(fp)
   13550:	e000080e 	bge	fp,zero,13574 <___vfprintf_internal_r+0x23c>
   13554:	0739c83a 	sub	fp,zero,fp
   13558:	02000044 	movi	r8,1
   1355c:	00000606 	br	13578 <___vfprintf_internal_r+0x240>
   13560:	05400404 	movi	r21,16
   13564:	e0c00104 	addi	r3,fp,4
   13568:	d8c00d15 	stw	r3,52(sp)
   1356c:	e7000017 	ldw	fp,0(fp)
   13570:	002f883a 	mov	r23,zero
   13574:	0011883a 	mov	r8,zero
   13578:	002d883a 	mov	r22,zero
   1357c:	dd87883a 	add	r3,sp,r22
   13580:	e0001a26 	beq	fp,zero,135ec <___vfprintf_internal_r+0x2b4>
   13584:	e009883a 	mov	r4,fp
   13588:	a80b883a 	mov	r5,r21
   1358c:	d8c01115 	stw	r3,68(sp)
   13590:	da001215 	stw	r8,72(sp)
   13594:	0013f400 	call	13f40 <__udivsi3>
   13598:	a809883a 	mov	r4,r21
   1359c:	100b883a 	mov	r5,r2
   135a0:	d8801015 	stw	r2,64(sp)
   135a4:	00121d80 	call	121d8 <__mulsi3>
   135a8:	e085c83a 	sub	r2,fp,r2
   135ac:	01000244 	movi	r4,9
   135b0:	d8c01117 	ldw	r3,68(sp)
   135b4:	d9801017 	ldw	r6,64(sp)
   135b8:	da001217 	ldw	r8,72(sp)
   135bc:	20800216 	blt	r4,r2,135c8 <___vfprintf_internal_r+0x290>
   135c0:	17000c04 	addi	fp,r2,48
   135c4:	00000506 	br	135dc <___vfprintf_internal_r+0x2a4>
   135c8:	d9400e17 	ldw	r5,56(sp)
   135cc:	28000226 	beq	r5,zero,135d8 <___vfprintf_internal_r+0x2a0>
   135d0:	17000dc4 	addi	fp,r2,55
   135d4:	00000106 	br	135dc <___vfprintf_internal_r+0x2a4>
   135d8:	170015c4 	addi	fp,r2,87
   135dc:	1f000005 	stb	fp,0(r3)
   135e0:	b5800044 	addi	r22,r22,1
   135e4:	3039883a 	mov	fp,r6
   135e8:	003fe406 	br	1357c <__alt_data_end+0xf401357c>
   135ec:	1ec5c83a 	sub	r2,r3,sp
   135f0:	d8800a15 	stw	r2,40(sp)
   135f4:	9885c83a 	sub	r2,r19,r2
   135f8:	1839883a 	mov	fp,r3
   135fc:	00800e0e 	bge	zero,r2,13638 <___vfprintf_internal_r+0x300>
   13600:	182d883a 	mov	r22,r3
   13604:	1885883a 	add	r2,r3,r2
   13608:	01000c04 	movi	r4,48
   1360c:	d9400917 	ldw	r5,36(sp)
   13610:	b007883a 	mov	r3,r22
   13614:	b140052e 	bgeu	r22,r5,1362c <___vfprintf_internal_r+0x2f4>
   13618:	b5800044 	addi	r22,r22,1
   1361c:	19000005 	stb	r4,0(r3)
   13620:	b039883a 	mov	fp,r22
   13624:	b0bff91e 	bne	r22,r2,1360c <__alt_data_end+0xf401360c>
   13628:	00000106 	br	13630 <___vfprintf_internal_r+0x2f8>
   1362c:	b039883a 	mov	fp,r22
   13630:	b6edc83a 	sub	r22,r22,sp
   13634:	dd800a15 	stw	r22,40(sp)
   13638:	d8800a17 	ldw	r2,40(sp)
   1363c:	1207883a 	add	r3,r2,r8
   13640:	90edc83a 	sub	r22,r18,r3
   13644:	d8c00b17 	ldw	r3,44(sp)
   13648:	18001726 	beq	r3,zero,136a8 <___vfprintf_internal_r+0x370>
   1364c:	40000a26 	beq	r8,zero,13678 <___vfprintf_internal_r+0x340>
   13650:	00800b44 	movi	r2,45
   13654:	d8800805 	stb	r2,32(sp)
   13658:	88800117 	ldw	r2,4(r17)
   1365c:	a009883a 	mov	r4,r20
   13660:	880b883a 	mov	r5,r17
   13664:	d9800804 	addi	r6,sp,32
   13668:	01c00044 	movi	r7,1
   1366c:	103ee83a 	callr	r2
   13670:	10004d1e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13674:	84000044 	addi	r16,r16,1
   13678:	0580070e 	bge	zero,r22,13698 <___vfprintf_internal_r+0x360>
   1367c:	a009883a 	mov	r4,r20
   13680:	880b883a 	mov	r5,r17
   13684:	01800c04 	movi	r6,48
   13688:	b00f883a 	mov	r7,r22
   1368c:	00132cc0 	call	132cc <print_repeat>
   13690:	1000451e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13694:	85a1883a 	add	r16,r16,r22
   13698:	d9000a17 	ldw	r4,40(sp)
   1369c:	e007883a 	mov	r3,fp
   136a0:	272dc83a 	sub	r22,r4,fp
   136a4:	00002206 	br	13730 <___vfprintf_internal_r+0x3f8>
   136a8:	0580090e 	bge	zero,r22,136d0 <___vfprintf_internal_r+0x398>
   136ac:	a009883a 	mov	r4,r20
   136b0:	880b883a 	mov	r5,r17
   136b4:	01800804 	movi	r6,32
   136b8:	b00f883a 	mov	r7,r22
   136bc:	da001215 	stw	r8,72(sp)
   136c0:	00132cc0 	call	132cc <print_repeat>
   136c4:	da001217 	ldw	r8,72(sp)
   136c8:	1000371e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   136cc:	85a1883a 	add	r16,r16,r22
   136d0:	403ff126 	beq	r8,zero,13698 <__alt_data_end+0xf4013698>
   136d4:	00800b44 	movi	r2,45
   136d8:	d8800805 	stb	r2,32(sp)
   136dc:	88800117 	ldw	r2,4(r17)
   136e0:	a009883a 	mov	r4,r20
   136e4:	880b883a 	mov	r5,r17
   136e8:	d9800804 	addi	r6,sp,32
   136ec:	01c00044 	movi	r7,1
   136f0:	103ee83a 	callr	r2
   136f4:	10002c1e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   136f8:	84000044 	addi	r16,r16,1
   136fc:	003fe606 	br	13698 <__alt_data_end+0xf4013698>
   13700:	18ffffc4 	addi	r3,r3,-1
   13704:	18800003 	ldbu	r2,0(r3)
   13708:	a009883a 	mov	r4,r20
   1370c:	d8c01115 	stw	r3,68(sp)
   13710:	d8800805 	stb	r2,32(sp)
   13714:	88800117 	ldw	r2,4(r17)
   13718:	880b883a 	mov	r5,r17
   1371c:	d9800804 	addi	r6,sp,32
   13720:	01c00044 	movi	r7,1
   13724:	103ee83a 	callr	r2
   13728:	d8c01117 	ldw	r3,68(sp)
   1372c:	10001e1e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13730:	80c5c83a 	sub	r2,r16,r3
   13734:	1d89883a 	add	r4,r3,r22
   13738:	e085883a 	add	r2,fp,r2
   1373c:	013ff016 	blt	zero,r4,13700 <__alt_data_end+0xf4013700>
   13740:	1021883a 	mov	r16,r2
   13744:	df000d17 	ldw	fp,52(sp)
   13748:	00004406 	br	1385c <___vfprintf_internal_r+0x524>
   1374c:	01000044 	movi	r4,1
   13750:	2480080e 	bge	r4,r18,13774 <___vfprintf_internal_r+0x43c>
   13754:	95bfffc4 	addi	r22,r18,-1
   13758:	a009883a 	mov	r4,r20
   1375c:	880b883a 	mov	r5,r17
   13760:	01800804 	movi	r6,32
   13764:	b00f883a 	mov	r7,r22
   13768:	00132cc0 	call	132cc <print_repeat>
   1376c:	10000e1e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   13770:	85a1883a 	add	r16,r16,r22
   13774:	e0800017 	ldw	r2,0(fp)
   13778:	a009883a 	mov	r4,r20
   1377c:	880b883a 	mov	r5,r17
   13780:	d8800005 	stb	r2,0(sp)
   13784:	88800117 	ldw	r2,4(r17)
   13788:	d80d883a 	mov	r6,sp
   1378c:	01c00044 	movi	r7,1
   13790:	e5800104 	addi	r22,fp,4
   13794:	103ee83a 	callr	r2
   13798:	1000031e 	bne	r2,zero,137a8 <___vfprintf_internal_r+0x470>
   1379c:	84000044 	addi	r16,r16,1
   137a0:	b039883a 	mov	fp,r22
   137a4:	00002d06 	br	1385c <___vfprintf_internal_r+0x524>
   137a8:	00bfffc4 	movi	r2,-1
   137ac:	00003106 	br	13874 <___vfprintf_internal_r+0x53c>
   137b0:	e5800017 	ldw	r22,0(fp)
   137b4:	e0c00104 	addi	r3,fp,4
   137b8:	d8c00a15 	stw	r3,40(sp)
   137bc:	b009883a 	mov	r4,r22
   137c0:	00132b00 	call	132b0 <strlen>
   137c4:	9091c83a 	sub	r8,r18,r2
   137c8:	1039883a 	mov	fp,r2
   137cc:	0200090e 	bge	zero,r8,137f4 <___vfprintf_internal_r+0x4bc>
   137d0:	400f883a 	mov	r7,r8
   137d4:	a009883a 	mov	r4,r20
   137d8:	880b883a 	mov	r5,r17
   137dc:	01800804 	movi	r6,32
   137e0:	da001215 	stw	r8,72(sp)
   137e4:	00132cc0 	call	132cc <print_repeat>
   137e8:	da001217 	ldw	r8,72(sp)
   137ec:	103fee1e 	bne	r2,zero,137a8 <__alt_data_end+0xf40137a8>
   137f0:	8221883a 	add	r16,r16,r8
   137f4:	88800117 	ldw	r2,4(r17)
   137f8:	a009883a 	mov	r4,r20
   137fc:	880b883a 	mov	r5,r17
   13800:	b00d883a 	mov	r6,r22
   13804:	e00f883a 	mov	r7,fp
   13808:	103ee83a 	callr	r2
   1380c:	103fe61e 	bne	r2,zero,137a8 <__alt_data_end+0xf40137a8>
   13810:	8721883a 	add	r16,r16,fp
   13814:	df000a17 	ldw	fp,40(sp)
   13818:	00001006 	br	1385c <___vfprintf_internal_r+0x524>
   1381c:	05c00044 	movi	r23,1
   13820:	04ffffc4 	movi	r19,-1
   13824:	d8000e15 	stw	zero,56(sp)
   13828:	05400284 	movi	r21,10
   1382c:	9825883a 	mov	r18,r19
   13830:	d8000c15 	stw	zero,48(sp)
   13834:	d8000b15 	stw	zero,44(sp)
   13838:	b82d883a 	mov	r22,r23
   1383c:	00000806 	br	13860 <___vfprintf_internal_r+0x528>
   13840:	dd800b15 	stw	r22,44(sp)
   13844:	05800084 	movi	r22,2
   13848:	00000506 	br	13860 <___vfprintf_internal_r+0x528>
   1384c:	00c00044 	movi	r3,1
   13850:	d8c00c15 	stw	r3,48(sp)
   13854:	058000c4 	movi	r22,3
   13858:	00000106 	br	13860 <___vfprintf_internal_r+0x528>
   1385c:	002d883a 	mov	r22,zero
   13860:	d8c00f17 	ldw	r3,60(sp)
   13864:	18c00044 	addi	r3,r3,1
   13868:	d8c00f15 	stw	r3,60(sp)
   1386c:	003ecc06 	br	133a0 <__alt_data_end+0xf40133a0>
   13870:	8005883a 	mov	r2,r16
   13874:	dfc01c17 	ldw	ra,112(sp)
   13878:	df001b17 	ldw	fp,108(sp)
   1387c:	ddc01a17 	ldw	r23,104(sp)
   13880:	dd801917 	ldw	r22,100(sp)
   13884:	dd401817 	ldw	r21,96(sp)
   13888:	dd001717 	ldw	r20,92(sp)
   1388c:	dcc01617 	ldw	r19,88(sp)
   13890:	dc801517 	ldw	r18,84(sp)
   13894:	dc401417 	ldw	r17,80(sp)
   13898:	dc001317 	ldw	r16,76(sp)
   1389c:	dec01d04 	addi	sp,sp,116
   138a0:	f800283a 	ret

000138a4 <__vfprintf_internal>:
   138a4:	2007883a 	mov	r3,r4
   138a8:	01020034 	movhi	r4,2048
   138ac:	2102a704 	addi	r4,r4,2716
   138b0:	21000017 	ldw	r4,0(r4)
   138b4:	2805883a 	mov	r2,r5
   138b8:	300f883a 	mov	r7,r6
   138bc:	180b883a 	mov	r5,r3
   138c0:	100d883a 	mov	r6,r2
   138c4:	00133381 	jmpi	13338 <___vfprintf_internal_r>

000138c8 <_malloc_trim_r>:
   138c8:	defffb04 	addi	sp,sp,-20
   138cc:	dcc00315 	stw	r19,12(sp)
   138d0:	04c20034 	movhi	r19,2048
   138d4:	dc800215 	stw	r18,8(sp)
   138d8:	dc400115 	stw	r17,4(sp)
   138dc:	dc000015 	stw	r16,0(sp)
   138e0:	dfc00415 	stw	ra,16(sp)
   138e4:	2821883a 	mov	r16,r5
   138e8:	2025883a 	mov	r18,r4
   138ec:	9cc0c604 	addi	r19,r19,792
   138f0:	00142800 	call	14280 <__malloc_lock>
   138f4:	98800217 	ldw	r2,8(r19)
   138f8:	14400117 	ldw	r17,4(r2)
   138fc:	00bfff04 	movi	r2,-4
   13900:	88a2703a 	and	r17,r17,r2
   13904:	8c21c83a 	sub	r16,r17,r16
   13908:	84001bc4 	addi	r16,r16,111
   1390c:	8020d1fa 	srli	r16,r16,7
   13910:	00801fc4 	movi	r2,127
   13914:	843fffc4 	addi	r16,r16,-1
   13918:	802091fa 	slli	r16,r16,7
   1391c:	14000416 	blt	r2,r16,13930 <_malloc_trim_r+0x68>
   13920:	9009883a 	mov	r4,r18
   13924:	00142a00 	call	142a0 <__malloc_unlock>
   13928:	0005883a 	mov	r2,zero
   1392c:	00002806 	br	139d0 <_malloc_trim_r+0x108>
   13930:	9009883a 	mov	r4,r18
   13934:	000b883a 	mov	r5,zero
   13938:	0012f400 	call	12f40 <_sbrk_r>
   1393c:	98c00217 	ldw	r3,8(r19)
   13940:	1c47883a 	add	r3,r3,r17
   13944:	10fff61e 	bne	r2,r3,13920 <__alt_data_end+0xf4013920>
   13948:	9009883a 	mov	r4,r18
   1394c:	040bc83a 	sub	r5,zero,r16
   13950:	0012f400 	call	12f40 <_sbrk_r>
   13954:	00ffffc4 	movi	r3,-1
   13958:	10c0111e 	bne	r2,r3,139a0 <_malloc_trim_r+0xd8>
   1395c:	9009883a 	mov	r4,r18
   13960:	000b883a 	mov	r5,zero
   13964:	0012f400 	call	12f40 <_sbrk_r>
   13968:	99000217 	ldw	r4,8(r19)
   1396c:	014003c4 	movi	r5,15
   13970:	1107c83a 	sub	r3,r2,r4
   13974:	28ffea0e 	bge	r5,r3,13920 <__alt_data_end+0xf4013920>
   13978:	01420034 	movhi	r5,2048
   1397c:	2942a404 	addi	r5,r5,2704
   13980:	29400017 	ldw	r5,0(r5)
   13984:	18c00054 	ori	r3,r3,1
   13988:	20c00115 	stw	r3,4(r4)
   1398c:	1145c83a 	sub	r2,r2,r5
   13990:	01420034 	movhi	r5,2048
   13994:	2944fb04 	addi	r5,r5,5100
   13998:	28800015 	stw	r2,0(r5)
   1399c:	003fe006 	br	13920 <__alt_data_end+0xf4013920>
   139a0:	98800217 	ldw	r2,8(r19)
   139a4:	8c23c83a 	sub	r17,r17,r16
   139a8:	00c20034 	movhi	r3,2048
   139ac:	18c4fb04 	addi	r3,r3,5100
   139b0:	8c400054 	ori	r17,r17,1
   139b4:	14400115 	stw	r17,4(r2)
   139b8:	18800017 	ldw	r2,0(r3)
   139bc:	9009883a 	mov	r4,r18
   139c0:	1421c83a 	sub	r16,r2,r16
   139c4:	1c000015 	stw	r16,0(r3)
   139c8:	00142a00 	call	142a0 <__malloc_unlock>
   139cc:	00800044 	movi	r2,1
   139d0:	dfc00417 	ldw	ra,16(sp)
   139d4:	dcc00317 	ldw	r19,12(sp)
   139d8:	dc800217 	ldw	r18,8(sp)
   139dc:	dc400117 	ldw	r17,4(sp)
   139e0:	dc000017 	ldw	r16,0(sp)
   139e4:	dec00504 	addi	sp,sp,20
   139e8:	f800283a 	ret

000139ec <_free_r>:
   139ec:	2800a026 	beq	r5,zero,13c70 <_free_r+0x284>
   139f0:	defffd04 	addi	sp,sp,-12
   139f4:	dc400115 	stw	r17,4(sp)
   139f8:	dc000015 	stw	r16,0(sp)
   139fc:	2823883a 	mov	r17,r5
   13a00:	2021883a 	mov	r16,r4
   13a04:	dfc00215 	stw	ra,8(sp)
   13a08:	00142800 	call	14280 <__malloc_lock>
   13a0c:	8a3fff17 	ldw	r8,-4(r17)
   13a10:	00bfff84 	movi	r2,-2
   13a14:	893ffe04 	addi	r4,r17,-8
   13a18:	4084703a 	and	r2,r8,r2
   13a1c:	208d883a 	add	r6,r4,r2
   13a20:	31400117 	ldw	r5,4(r6)
   13a24:	00ffff04 	movi	r3,-4
   13a28:	28c6703a 	and	r3,r5,r3
   13a2c:	01420034 	movhi	r5,2048
   13a30:	2940c604 	addi	r5,r5,792
   13a34:	2a400217 	ldw	r9,8(r5)
   13a38:	280f883a 	mov	r7,r5
   13a3c:	4140004c 	andi	r5,r8,1
   13a40:	32401b1e 	bne	r6,r9,13ab0 <_free_r+0xc4>
   13a44:	1885883a 	add	r2,r3,r2
   13a48:	2800071e 	bne	r5,zero,13a68 <_free_r+0x7c>
   13a4c:	88fffe17 	ldw	r3,-8(r17)
   13a50:	20c9c83a 	sub	r4,r4,r3
   13a54:	21400217 	ldw	r5,8(r4)
   13a58:	10c5883a 	add	r2,r2,r3
   13a5c:	20c00317 	ldw	r3,12(r4)
   13a60:	28c00315 	stw	r3,12(r5)
   13a64:	19400215 	stw	r5,8(r3)
   13a68:	10c00054 	ori	r3,r2,1
   13a6c:	20c00115 	stw	r3,4(r4)
   13a70:	00c20034 	movhi	r3,2048
   13a74:	18c2a504 	addi	r3,r3,2708
   13a78:	18c00017 	ldw	r3,0(r3)
   13a7c:	39000215 	stw	r4,8(r7)
   13a80:	10c00536 	bltu	r2,r3,13a98 <_free_r+0xac>
   13a84:	00820034 	movhi	r2,2048
   13a88:	1082b604 	addi	r2,r2,2776
   13a8c:	11400017 	ldw	r5,0(r2)
   13a90:	8009883a 	mov	r4,r16
   13a94:	00138c80 	call	138c8 <_malloc_trim_r>
   13a98:	8009883a 	mov	r4,r16
   13a9c:	dfc00217 	ldw	ra,8(sp)
   13aa0:	dc400117 	ldw	r17,4(sp)
   13aa4:	dc000017 	ldw	r16,0(sp)
   13aa8:	dec00304 	addi	sp,sp,12
   13aac:	00142a01 	jmpi	142a0 <__malloc_unlock>
   13ab0:	30c00115 	stw	r3,4(r6)
   13ab4:	2800091e 	bne	r5,zero,13adc <_free_r+0xf0>
   13ab8:	897ffe17 	ldw	r5,-8(r17)
   13abc:	3a000204 	addi	r8,r7,8
   13ac0:	2149c83a 	sub	r4,r4,r5
   13ac4:	1145883a 	add	r2,r2,r5
   13ac8:	21400217 	ldw	r5,8(r4)
   13acc:	2a000526 	beq	r5,r8,13ae4 <_free_r+0xf8>
   13ad0:	22000317 	ldw	r8,12(r4)
   13ad4:	2a000315 	stw	r8,12(r5)
   13ad8:	41400215 	stw	r5,8(r8)
   13adc:	000b883a 	mov	r5,zero
   13ae0:	00000106 	br	13ae8 <_free_r+0xfc>
   13ae4:	01400044 	movi	r5,1
   13ae8:	30d1883a 	add	r8,r6,r3
   13aec:	42000117 	ldw	r8,4(r8)
   13af0:	4200004c 	andi	r8,r8,1
   13af4:	4000101e 	bne	r8,zero,13b38 <_free_r+0x14c>
   13af8:	10c5883a 	add	r2,r2,r3
   13afc:	28000a1e 	bne	r5,zero,13b28 <_free_r+0x13c>
   13b00:	30c00217 	ldw	r3,8(r6)
   13b04:	02020034 	movhi	r8,2048
   13b08:	4200c804 	addi	r8,r8,800
   13b0c:	1a00061e 	bne	r3,r8,13b28 <_free_r+0x13c>
   13b10:	39000515 	stw	r4,20(r7)
   13b14:	39000415 	stw	r4,16(r7)
   13b18:	20c00315 	stw	r3,12(r4)
   13b1c:	20c00215 	stw	r3,8(r4)
   13b20:	01400044 	movi	r5,1
   13b24:	00000406 	br	13b38 <_free_r+0x14c>
   13b28:	30c00317 	ldw	r3,12(r6)
   13b2c:	31800217 	ldw	r6,8(r6)
   13b30:	30c00315 	stw	r3,12(r6)
   13b34:	19800215 	stw	r6,8(r3)
   13b38:	10c00054 	ori	r3,r2,1
   13b3c:	20c00115 	stw	r3,4(r4)
   13b40:	2087883a 	add	r3,r4,r2
   13b44:	18800015 	stw	r2,0(r3)
   13b48:	283fd31e 	bne	r5,zero,13a98 <__alt_data_end+0xf4013a98>
   13b4c:	00c07fc4 	movi	r3,511
   13b50:	18801036 	bltu	r3,r2,13b94 <_free_r+0x1a8>
   13b54:	1006d0fa 	srli	r3,r2,3
   13b58:	00800044 	movi	r2,1
   13b5c:	180bd0ba 	srai	r5,r3,2
   13b60:	18c7883a 	add	r3,r3,r3
   13b64:	18c7883a 	add	r3,r3,r3
   13b68:	114a983a 	sll	r5,r2,r5
   13b6c:	38800117 	ldw	r2,4(r7)
   13b70:	18c7883a 	add	r3,r3,r3
   13b74:	2884b03a 	or	r2,r5,r2
   13b78:	38800115 	stw	r2,4(r7)
   13b7c:	38c5883a 	add	r2,r7,r3
   13b80:	10c00217 	ldw	r3,8(r2)
   13b84:	20800315 	stw	r2,12(r4)
   13b88:	20c00215 	stw	r3,8(r4)
   13b8c:	11000215 	stw	r4,8(r2)
   13b90:	00003506 	br	13c68 <_free_r+0x27c>
   13b94:	1006d27a 	srli	r3,r2,9
   13b98:	01400104 	movi	r5,4
   13b9c:	28c00336 	bltu	r5,r3,13bac <_free_r+0x1c0>
   13ba0:	1006d1ba 	srli	r3,r2,6
   13ba4:	18c00e04 	addi	r3,r3,56
   13ba8:	00001406 	br	13bfc <_free_r+0x210>
   13bac:	01400504 	movi	r5,20
   13bb0:	28c00236 	bltu	r5,r3,13bbc <_free_r+0x1d0>
   13bb4:	18c016c4 	addi	r3,r3,91
   13bb8:	00001006 	br	13bfc <_free_r+0x210>
   13bbc:	01401504 	movi	r5,84
   13bc0:	28c00336 	bltu	r5,r3,13bd0 <_free_r+0x1e4>
   13bc4:	1006d33a 	srli	r3,r2,12
   13bc8:	18c01b84 	addi	r3,r3,110
   13bcc:	00000b06 	br	13bfc <_free_r+0x210>
   13bd0:	01405504 	movi	r5,340
   13bd4:	28c00336 	bltu	r5,r3,13be4 <_free_r+0x1f8>
   13bd8:	1006d3fa 	srli	r3,r2,15
   13bdc:	18c01dc4 	addi	r3,r3,119
   13be0:	00000606 	br	13bfc <_free_r+0x210>
   13be4:	01415504 	movi	r5,1364
   13be8:	28c00336 	bltu	r5,r3,13bf8 <_free_r+0x20c>
   13bec:	1006d4ba 	srli	r3,r2,18
   13bf0:	18c01f04 	addi	r3,r3,124
   13bf4:	00000106 	br	13bfc <_free_r+0x210>
   13bf8:	00c01f84 	movi	r3,126
   13bfc:	18cd883a 	add	r6,r3,r3
   13c00:	318d883a 	add	r6,r6,r6
   13c04:	318d883a 	add	r6,r6,r6
   13c08:	398b883a 	add	r5,r7,r6
   13c0c:	29800217 	ldw	r6,8(r5)
   13c10:	02020034 	movhi	r8,2048
   13c14:	4200c604 	addi	r8,r8,792
   13c18:	3140081e 	bne	r6,r5,13c3c <_free_r+0x250>
   13c1c:	1807d0ba 	srai	r3,r3,2
   13c20:	00800044 	movi	r2,1
   13c24:	10c6983a 	sll	r3,r2,r3
   13c28:	40800117 	ldw	r2,4(r8)
   13c2c:	1886b03a 	or	r3,r3,r2
   13c30:	40c00115 	stw	r3,4(r8)
   13c34:	3007883a 	mov	r3,r6
   13c38:	00000806 	br	13c5c <_free_r+0x270>
   13c3c:	3007883a 	mov	r3,r6
   13c40:	01ffff04 	movi	r7,-4
   13c44:	19800117 	ldw	r6,4(r3)
   13c48:	31cc703a 	and	r6,r6,r7
   13c4c:	1180022e 	bgeu	r2,r6,13c58 <_free_r+0x26c>
   13c50:	18c00217 	ldw	r3,8(r3)
   13c54:	197ffb1e 	bne	r3,r5,13c44 <__alt_data_end+0xf4013c44>
   13c58:	19800317 	ldw	r6,12(r3)
   13c5c:	21800315 	stw	r6,12(r4)
   13c60:	20c00215 	stw	r3,8(r4)
   13c64:	31000215 	stw	r4,8(r6)
   13c68:	19000315 	stw	r4,12(r3)
   13c6c:	003f8a06 	br	13a98 <__alt_data_end+0xf4013a98>
   13c70:	f800283a 	ret

00013c74 <__sfvwrite_small_dev>:
   13c74:	2880000b 	ldhu	r2,0(r5)
   13c78:	defffa04 	addi	sp,sp,-24
   13c7c:	dc000015 	stw	r16,0(sp)
   13c80:	dfc00515 	stw	ra,20(sp)
   13c84:	dd000415 	stw	r20,16(sp)
   13c88:	dcc00315 	stw	r19,12(sp)
   13c8c:	dc800215 	stw	r18,8(sp)
   13c90:	dc400115 	stw	r17,4(sp)
   13c94:	1080020c 	andi	r2,r2,8
   13c98:	2821883a 	mov	r16,r5
   13c9c:	10001726 	beq	r2,zero,13cfc <__sfvwrite_small_dev+0x88>
   13ca0:	2880008f 	ldh	r2,2(r5)
   13ca4:	10001216 	blt	r2,zero,13cf0 <__sfvwrite_small_dev+0x7c>
   13ca8:	2027883a 	mov	r19,r4
   13cac:	3025883a 	mov	r18,r6
   13cb0:	3823883a 	mov	r17,r7
   13cb4:	05010004 	movi	r20,1024
   13cb8:	04400b0e 	bge	zero,r17,13ce8 <__sfvwrite_small_dev+0x74>
   13cbc:	8140008f 	ldh	r5,2(r16)
   13cc0:	880f883a 	mov	r7,r17
   13cc4:	a440010e 	bge	r20,r17,13ccc <__sfvwrite_small_dev+0x58>
   13cc8:	01c10004 	movi	r7,1024
   13ccc:	9809883a 	mov	r4,r19
   13cd0:	900d883a 	mov	r6,r18
   13cd4:	0013dcc0 	call	13dcc <_write_r>
   13cd8:	0080050e 	bge	zero,r2,13cf0 <__sfvwrite_small_dev+0x7c>
   13cdc:	88a3c83a 	sub	r17,r17,r2
   13ce0:	90a5883a 	add	r18,r18,r2
   13ce4:	003ff406 	br	13cb8 <__alt_data_end+0xf4013cb8>
   13ce8:	0005883a 	mov	r2,zero
   13cec:	00000406 	br	13d00 <__sfvwrite_small_dev+0x8c>
   13cf0:	8080000b 	ldhu	r2,0(r16)
   13cf4:	10801014 	ori	r2,r2,64
   13cf8:	8080000d 	sth	r2,0(r16)
   13cfc:	00bfffc4 	movi	r2,-1
   13d00:	dfc00517 	ldw	ra,20(sp)
   13d04:	dd000417 	ldw	r20,16(sp)
   13d08:	dcc00317 	ldw	r19,12(sp)
   13d0c:	dc800217 	ldw	r18,8(sp)
   13d10:	dc400117 	ldw	r17,4(sp)
   13d14:	dc000017 	ldw	r16,0(sp)
   13d18:	dec00604 	addi	sp,sp,24
   13d1c:	f800283a 	ret

00013d20 <putc>:
   13d20:	defffd04 	addi	sp,sp,-12
   13d24:	00800074 	movhi	r2,1
   13d28:	dc000115 	stw	r16,4(sp)
   13d2c:	dfc00215 	stw	ra,8(sp)
   13d30:	108f1d04 	addi	r2,r2,15476
   13d34:	28800115 	stw	r2,4(r5)
   13d38:	00820034 	movhi	r2,2048
   13d3c:	1082a704 	addi	r2,r2,2716
   13d40:	d9000005 	stb	r4,0(sp)
   13d44:	2021883a 	mov	r16,r4
   13d48:	11000017 	ldw	r4,0(r2)
   13d4c:	d80d883a 	mov	r6,sp
   13d50:	01c00044 	movi	r7,1
   13d54:	0013c740 	call	13c74 <__sfvwrite_small_dev>
   13d58:	00ffffc4 	movi	r3,-1
   13d5c:	10c00126 	beq	r2,r3,13d64 <putc+0x44>
   13d60:	8005883a 	mov	r2,r16
   13d64:	dfc00217 	ldw	ra,8(sp)
   13d68:	dc000117 	ldw	r16,4(sp)
   13d6c:	dec00304 	addi	sp,sp,12
   13d70:	f800283a 	ret

00013d74 <_putc_r>:
   13d74:	defffd04 	addi	sp,sp,-12
   13d78:	00800074 	movhi	r2,1
   13d7c:	dc000115 	stw	r16,4(sp)
   13d80:	dfc00215 	stw	ra,8(sp)
   13d84:	108f1d04 	addi	r2,r2,15476
   13d88:	30800115 	stw	r2,4(r6)
   13d8c:	00820034 	movhi	r2,2048
   13d90:	1082a704 	addi	r2,r2,2716
   13d94:	11000017 	ldw	r4,0(r2)
   13d98:	2821883a 	mov	r16,r5
   13d9c:	01c00044 	movi	r7,1
   13da0:	300b883a 	mov	r5,r6
   13da4:	d80d883a 	mov	r6,sp
   13da8:	dc000005 	stb	r16,0(sp)
   13dac:	0013c740 	call	13c74 <__sfvwrite_small_dev>
   13db0:	00ffffc4 	movi	r3,-1
   13db4:	10c00126 	beq	r2,r3,13dbc <_putc_r+0x48>
   13db8:	8005883a 	mov	r2,r16
   13dbc:	dfc00217 	ldw	ra,8(sp)
   13dc0:	dc000117 	ldw	r16,4(sp)
   13dc4:	dec00304 	addi	sp,sp,12
   13dc8:	f800283a 	ret

00013dcc <_write_r>:
   13dcc:	defffd04 	addi	sp,sp,-12
   13dd0:	dc000015 	stw	r16,0(sp)
   13dd4:	04020034 	movhi	r16,2048
   13dd8:	dc400115 	stw	r17,4(sp)
   13ddc:	8402b704 	addi	r16,r16,2780
   13de0:	2023883a 	mov	r17,r4
   13de4:	2809883a 	mov	r4,r5
   13de8:	300b883a 	mov	r5,r6
   13dec:	380d883a 	mov	r6,r7
   13df0:	dfc00215 	stw	ra,8(sp)
   13df4:	80000015 	stw	zero,0(r16)
   13df8:	001462c0 	call	1462c <write>
   13dfc:	00ffffc4 	movi	r3,-1
   13e00:	10c0031e 	bne	r2,r3,13e10 <_write_r+0x44>
   13e04:	80c00017 	ldw	r3,0(r16)
   13e08:	18000126 	beq	r3,zero,13e10 <_write_r+0x44>
   13e0c:	88c00015 	stw	r3,0(r17)
   13e10:	dfc00217 	ldw	ra,8(sp)
   13e14:	dc400117 	ldw	r17,4(sp)
   13e18:	dc000017 	ldw	r16,0(sp)
   13e1c:	dec00304 	addi	sp,sp,12
   13e20:	f800283a 	ret

00013e24 <udivmodsi4>:
   13e24:	2900182e 	bgeu	r5,r4,13e88 <udivmodsi4+0x64>
   13e28:	28001716 	blt	r5,zero,13e88 <udivmodsi4+0x64>
   13e2c:	00800804 	movi	r2,32
   13e30:	00c00044 	movi	r3,1
   13e34:	00000206 	br	13e40 <udivmodsi4+0x1c>
   13e38:	10001126 	beq	r2,zero,13e80 <udivmodsi4+0x5c>
   13e3c:	28000516 	blt	r5,zero,13e54 <udivmodsi4+0x30>
   13e40:	294b883a 	add	r5,r5,r5
   13e44:	10bfffc4 	addi	r2,r2,-1
   13e48:	18c7883a 	add	r3,r3,r3
   13e4c:	293ffa36 	bltu	r5,r4,13e38 <__alt_data_end+0xf4013e38>
   13e50:	18000b26 	beq	r3,zero,13e80 <udivmodsi4+0x5c>
   13e54:	0005883a 	mov	r2,zero
   13e58:	21400236 	bltu	r4,r5,13e64 <udivmodsi4+0x40>
   13e5c:	2149c83a 	sub	r4,r4,r5
   13e60:	10c4b03a 	or	r2,r2,r3
   13e64:	1806d07a 	srli	r3,r3,1
   13e68:	280ad07a 	srli	r5,r5,1
   13e6c:	183ffa1e 	bne	r3,zero,13e58 <__alt_data_end+0xf4013e58>
   13e70:	3000011e 	bne	r6,zero,13e78 <udivmodsi4+0x54>
   13e74:	f800283a 	ret
   13e78:	2005883a 	mov	r2,r4
   13e7c:	f800283a 	ret
   13e80:	0005883a 	mov	r2,zero
   13e84:	003ffa06 	br	13e70 <__alt_data_end+0xf4013e70>
   13e88:	00c00044 	movi	r3,1
   13e8c:	003ff106 	br	13e54 <__alt_data_end+0xf4013e54>

00013e90 <__divsi3>:
   13e90:	defffe04 	addi	sp,sp,-8
   13e94:	dfc00115 	stw	ra,4(sp)
   13e98:	dc000015 	stw	r16,0(sp)
   13e9c:	20000b16 	blt	r4,zero,13ecc <__divsi3+0x3c>
   13ea0:	0021883a 	mov	r16,zero
   13ea4:	28000c16 	blt	r5,zero,13ed8 <__divsi3+0x48>
   13ea8:	000d883a 	mov	r6,zero
   13eac:	0013e240 	call	13e24 <udivmodsi4>
   13eb0:	0407c83a 	sub	r3,zero,r16
   13eb4:	1884f03a 	xor	r2,r3,r2
   13eb8:	1405883a 	add	r2,r2,r16
   13ebc:	dfc00117 	ldw	ra,4(sp)
   13ec0:	dc000017 	ldw	r16,0(sp)
   13ec4:	dec00204 	addi	sp,sp,8
   13ec8:	f800283a 	ret
   13ecc:	0109c83a 	sub	r4,zero,r4
   13ed0:	04000044 	movi	r16,1
   13ed4:	283ff40e 	bge	r5,zero,13ea8 <__alt_data_end+0xf4013ea8>
   13ed8:	014bc83a 	sub	r5,zero,r5
   13edc:	8400005c 	xori	r16,r16,1
   13ee0:	003ff106 	br	13ea8 <__alt_data_end+0xf4013ea8>

00013ee4 <__modsi3>:
   13ee4:	defffd04 	addi	sp,sp,-12
   13ee8:	dfc00215 	stw	ra,8(sp)
   13eec:	dc400115 	stw	r17,4(sp)
   13ef0:	dc000015 	stw	r16,0(sp)
   13ef4:	20000c16 	blt	r4,zero,13f28 <__modsi3+0x44>
   13ef8:	0023883a 	mov	r17,zero
   13efc:	0021883a 	mov	r16,zero
   13f00:	28000d16 	blt	r5,zero,13f38 <__modsi3+0x54>
   13f04:	01800044 	movi	r6,1
   13f08:	0013e240 	call	13e24 <udivmodsi4>
   13f0c:	1404f03a 	xor	r2,r2,r16
   13f10:	8885883a 	add	r2,r17,r2
   13f14:	dfc00217 	ldw	ra,8(sp)
   13f18:	dc400117 	ldw	r17,4(sp)
   13f1c:	dc000017 	ldw	r16,0(sp)
   13f20:	dec00304 	addi	sp,sp,12
   13f24:	f800283a 	ret
   13f28:	0109c83a 	sub	r4,zero,r4
   13f2c:	04400044 	movi	r17,1
   13f30:	043fffc4 	movi	r16,-1
   13f34:	283ff30e 	bge	r5,zero,13f04 <__alt_data_end+0xf4013f04>
   13f38:	014bc83a 	sub	r5,zero,r5
   13f3c:	003ff106 	br	13f04 <__alt_data_end+0xf4013f04>

00013f40 <__udivsi3>:
   13f40:	000d883a 	mov	r6,zero
   13f44:	0013e241 	jmpi	13e24 <udivmodsi4>

00013f48 <__umodsi3>:
   13f48:	01800044 	movi	r6,1
   13f4c:	0013e241 	jmpi	13e24 <udivmodsi4>

00013f50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13f50:	defffd04 	addi	sp,sp,-12
   13f54:	df000215 	stw	fp,8(sp)
   13f58:	df000204 	addi	fp,sp,8
   13f5c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13f60:	0001883a 	nop
   13f64:	e0bfff17 	ldw	r2,-4(fp)
   13f68:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13f6c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13f70:	10000226 	beq	r2,zero,13f7c <_exit+0x2c>
    ALT_SIM_FAIL();
   13f74:	002af070 	cmpltui	zero,zero,43969
   13f78:	00000106 	br	13f80 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13f7c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13f80:	003fff06 	br	13f80 <__alt_data_end+0xf4013f80>

00013f84 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   13f84:	deffff04 	addi	sp,sp,-4
   13f88:	df000015 	stw	fp,0(sp)
   13f8c:	d839883a 	mov	fp,sp
  return 0;
   13f90:	0005883a 	mov	r2,zero
}
   13f94:	e037883a 	mov	sp,fp
   13f98:	df000017 	ldw	fp,0(sp)
   13f9c:	dec00104 	addi	sp,sp,4
   13fa0:	f800283a 	ret

00013fa4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13fa4:	defffe04 	addi	sp,sp,-8
   13fa8:	dfc00115 	stw	ra,4(sp)
   13fac:	df000015 	stw	fp,0(sp)
   13fb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13fb4:	00820034 	movhi	r2,2048
   13fb8:	1082ae04 	addi	r2,r2,2744
   13fbc:	10800017 	ldw	r2,0(r2)
   13fc0:	10000526 	beq	r2,zero,13fd8 <alt_get_errno+0x34>
   13fc4:	00820034 	movhi	r2,2048
   13fc8:	1082ae04 	addi	r2,r2,2744
   13fcc:	10800017 	ldw	r2,0(r2)
   13fd0:	103ee83a 	callr	r2
   13fd4:	00000206 	br	13fe0 <alt_get_errno+0x3c>
   13fd8:	00820034 	movhi	r2,2048
   13fdc:	1082b704 	addi	r2,r2,2780
}
   13fe0:	e037883a 	mov	sp,fp
   13fe4:	dfc00117 	ldw	ra,4(sp)
   13fe8:	df000017 	ldw	fp,0(sp)
   13fec:	dec00204 	addi	sp,sp,8
   13ff0:	f800283a 	ret

00013ff4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   13ff4:	defffb04 	addi	sp,sp,-20
   13ff8:	dfc00415 	stw	ra,16(sp)
   13ffc:	df000315 	stw	fp,12(sp)
   14000:	df000304 	addi	fp,sp,12
   14004:	e13ffe15 	stw	r4,-8(fp)
   14008:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1400c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   14010:	e0bffe17 	ldw	r2,-8(fp)
   14014:	00803116 	blt	zero,r2,140dc <kill+0xe8>
  {
    switch (sig)
   14018:	e0bfff17 	ldw	r2,-4(fp)
   1401c:	10800828 	cmpgeui	r2,r2,32
   14020:	1000291e 	bne	r2,zero,140c8 <kill+0xd4>
   14024:	e0bfff17 	ldw	r2,-4(fp)
   14028:	100690ba 	slli	r3,r2,2
   1402c:	00800074 	movhi	r2,1
   14030:	10901004 	addi	r2,r2,16448
   14034:	1885883a 	add	r2,r3,r2
   14038:	10800017 	ldw	r2,0(r2)
   1403c:	1000683a 	jmp	r2
   14040:	000140d4 	movui	zero,1283
   14044:	000140c8 	cmpgei	zero,zero,1283
   14048:	000140c8 	cmpgei	zero,zero,1283
   1404c:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14050:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14054:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14058:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   1405c:	000140c8 	cmpgei	zero,zero,1283
   14060:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14064:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14068:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   1406c:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14070:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14074:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14078:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   1407c:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   14080:	000140d4 	movui	zero,1283
   14084:	000140c8 	cmpgei	zero,zero,1283
   14088:	000140c8 	cmpgei	zero,zero,1283
   1408c:	000140c8 	cmpgei	zero,zero,1283
   14090:	000140d4 	movui	zero,1283
   14094:	000140c8 	cmpgei	zero,zero,1283
   14098:	000140c8 	cmpgei	zero,zero,1283
   1409c:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140a0:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140a4:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140a8:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140ac:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140b0:	000140c8 	cmpgei	zero,zero,1283
   140b4:	000140c8 	cmpgei	zero,zero,1283
   140b8:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
   140bc:	000140c0 	call	140c <__alt_mem_sram_img-0xebf4>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   140c0:	0009883a 	mov	r4,zero
   140c4:	0013f500 	call	13f50 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   140c8:	00800584 	movi	r2,22
   140cc:	e0bffd15 	stw	r2,-12(fp)
   140d0:	00000606 	br	140ec <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   140d4:	0001883a 	nop
   140d8:	00000406 	br	140ec <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
   140dc:	e0bffe17 	ldw	r2,-8(fp)
   140e0:	0080020e 	bge	zero,r2,140ec <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   140e4:	008000c4 	movi	r2,3
   140e8:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
   140ec:	e0bffd17 	ldw	r2,-12(fp)
   140f0:	10000626 	beq	r2,zero,1410c <kill+0x118>
  {
    ALT_ERRNO = status;
   140f4:	0013fa40 	call	13fa4 <alt_get_errno>
   140f8:	1007883a 	mov	r3,r2
   140fc:	e0bffd17 	ldw	r2,-12(fp)
   14100:	18800015 	stw	r2,0(r3)
    return -1;
   14104:	00bfffc4 	movi	r2,-1
   14108:	00000106 	br	14110 <kill+0x11c>
  }

  return 0;
   1410c:	0005883a 	mov	r2,zero
}
   14110:	e037883a 	mov	sp,fp
   14114:	dfc00117 	ldw	ra,4(sp)
   14118:	df000017 	ldw	fp,0(sp)
   1411c:	dec00204 	addi	sp,sp,8
   14120:	f800283a 	ret

00014124 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14124:	defffc04 	addi	sp,sp,-16
   14128:	df000315 	stw	fp,12(sp)
   1412c:	df000304 	addi	fp,sp,12
   14130:	e13ffd15 	stw	r4,-12(fp)
   14134:	e17ffe15 	stw	r5,-8(fp)
   14138:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1413c:	e0fffe17 	ldw	r3,-8(fp)
   14140:	e0bffd17 	ldw	r2,-12(fp)
   14144:	18800c26 	beq	r3,r2,14178 <alt_load_section+0x54>
  {
    while( to != end )
   14148:	00000806 	br	1416c <alt_load_section+0x48>
    {
      *to++ = *from++;
   1414c:	e0bffe17 	ldw	r2,-8(fp)
   14150:	10c00104 	addi	r3,r2,4
   14154:	e0fffe15 	stw	r3,-8(fp)
   14158:	e0fffd17 	ldw	r3,-12(fp)
   1415c:	19000104 	addi	r4,r3,4
   14160:	e13ffd15 	stw	r4,-12(fp)
   14164:	18c00017 	ldw	r3,0(r3)
   14168:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1416c:	e0fffe17 	ldw	r3,-8(fp)
   14170:	e0bfff17 	ldw	r2,-4(fp)
   14174:	18bff51e 	bne	r3,r2,1414c <__alt_data_end+0xf401414c>
    {
      *to++ = *from++;
    }
  }
}
   14178:	e037883a 	mov	sp,fp
   1417c:	df000017 	ldw	fp,0(sp)
   14180:	dec00104 	addi	sp,sp,4
   14184:	f800283a 	ret

00014188 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14188:	defffe04 	addi	sp,sp,-8
   1418c:	dfc00115 	stw	ra,4(sp)
   14190:	df000015 	stw	fp,0(sp)
   14194:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14198:	01000074 	movhi	r4,1
   1419c:	2117a604 	addi	r4,r4,24216
   141a0:	01420034 	movhi	r5,2048
   141a4:	2940c604 	addi	r5,r5,792
   141a8:	01820034 	movhi	r6,2048
   141ac:	3182af04 	addi	r6,r6,2748
   141b0:	00141240 	call	14124 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   141b4:	01000074 	movhi	r4,1
   141b8:	21000004 	addi	r4,r4,0
   141bc:	014000b4 	movhi	r5,2
   141c0:	29400804 	addi	r5,r5,32
   141c4:	018000b4 	movhi	r6,2
   141c8:	31800804 	addi	r6,r6,32
   141cc:	00141240 	call	14124 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   141d0:	01000074 	movhi	r4,1
   141d4:	2116e004 	addi	r4,r4,23424
   141d8:	01420034 	movhi	r5,2048
   141dc:	29400004 	addi	r5,r5,0
   141e0:	01820034 	movhi	r6,2048
   141e4:	3180c604 	addi	r6,r6,792
   141e8:	00141240 	call	14124 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   141ec:	0014ed80 	call	14ed8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   141f0:	001515c0 	call	1515c <alt_icache_flush_all>
}
   141f4:	e037883a 	mov	sp,fp
   141f8:	dfc00117 	ldw	ra,4(sp)
   141fc:	df000017 	ldw	fp,0(sp)
   14200:	dec00204 	addi	sp,sp,8
   14204:	f800283a 	ret

00014208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14208:	defffd04 	addi	sp,sp,-12
   1420c:	dfc00215 	stw	ra,8(sp)
   14210:	df000115 	stw	fp,4(sp)
   14214:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14218:	0009883a 	mov	r4,zero
   1421c:	00147640 	call	14764 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14220:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14224:	00147980 	call	14798 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14228:	01020034 	movhi	r4,2048
   1422c:	2100aa04 	addi	r4,r4,680
   14230:	01420034 	movhi	r5,2048
   14234:	2940aa04 	addi	r5,r5,680
   14238:	01820034 	movhi	r6,2048
   1423c:	3180aa04 	addi	r6,r6,680
   14240:	00152580 	call	15258 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14244:	00150140 	call	15014 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14248:	01000074 	movhi	r4,1
   1424c:	21141c04 	addi	r4,r4,20592
   14250:	00157fc0 	call	157fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14254:	d1202217 	ldw	r4,-32632(gp)
   14258:	d0e02317 	ldw	r3,-32628(gp)
   1425c:	d0a02417 	ldw	r2,-32624(gp)
   14260:	180b883a 	mov	r5,r3
   14264:	100d883a 	mov	r6,r2
   14268:	00104100 	call	10410 <main>
   1426c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14270:	01000044 	movi	r4,1
   14274:	0014e000 	call	14e00 <close>
  exit (result);
   14278:	e13fff17 	ldw	r4,-4(fp)
   1427c:	00158100 	call	15810 <exit>

00014280 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14280:	defffe04 	addi	sp,sp,-8
   14284:	df000115 	stw	fp,4(sp)
   14288:	df000104 	addi	fp,sp,4
   1428c:	e13fff15 	stw	r4,-4(fp)
}
   14290:	e037883a 	mov	sp,fp
   14294:	df000017 	ldw	fp,0(sp)
   14298:	dec00104 	addi	sp,sp,4
   1429c:	f800283a 	ret

000142a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   142a0:	defffe04 	addi	sp,sp,-8
   142a4:	df000115 	stw	fp,4(sp)
   142a8:	df000104 	addi	fp,sp,4
   142ac:	e13fff15 	stw	r4,-4(fp)
}
   142b0:	e037883a 	mov	sp,fp
   142b4:	df000017 	ldw	fp,0(sp)
   142b8:	dec00104 	addi	sp,sp,4
   142bc:	f800283a 	ret

000142c0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   142c0:	defff204 	addi	sp,sp,-56
   142c4:	dfc00a15 	stw	ra,40(sp)
   142c8:	df000915 	stw	fp,36(sp)
   142cc:	df000904 	addi	fp,sp,36
   142d0:	e1400215 	stw	r5,8(fp)
   142d4:	e1800315 	stw	r6,12(fp)
   142d8:	e1c00415 	stw	r7,16(fp)
   142dc:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   142e0:	e0800204 	addi	r2,fp,8
   142e4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   142e8:	e0bfff17 	ldw	r2,-4(fp)
   142ec:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   142f0:	00007106 	br	144b8 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   142f4:	e0bff807 	ldb	r2,-32(fp)
   142f8:	10800960 	cmpeqi	r2,r2,37
   142fc:	1000041e 	bne	r2,zero,14310 <alt_printf+0x50>
        {
            alt_putchar(c);
   14300:	e0bff807 	ldb	r2,-32(fp)
   14304:	1009883a 	mov	r4,r2
   14308:	00144e80 	call	144e8 <alt_putchar>
   1430c:	00006a06 	br	144b8 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   14310:	e0bff717 	ldw	r2,-36(fp)
   14314:	10c00044 	addi	r3,r2,1
   14318:	e0fff715 	stw	r3,-36(fp)
   1431c:	10800003 	ldbu	r2,0(r2)
   14320:	e0bff805 	stb	r2,-32(fp)
   14324:	e0bff807 	ldb	r2,-32(fp)
   14328:	10006226 	beq	r2,zero,144b4 <alt_printf+0x1f4>
            {
                if (c == '%')
   1432c:	e0bff807 	ldb	r2,-32(fp)
   14330:	10800958 	cmpnei	r2,r2,37
   14334:	1000041e 	bne	r2,zero,14348 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   14338:	e0bff807 	ldb	r2,-32(fp)
   1433c:	1009883a 	mov	r4,r2
   14340:	00144e80 	call	144e8 <alt_putchar>
   14344:	00005c06 	br	144b8 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   14348:	e0bff807 	ldb	r2,-32(fp)
   1434c:	108018d8 	cmpnei	r2,r2,99
   14350:	1000081e 	bne	r2,zero,14374 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   14354:	e0bffe17 	ldw	r2,-8(fp)
   14358:	10c00104 	addi	r3,r2,4
   1435c:	e0fffe15 	stw	r3,-8(fp)
   14360:	10800017 	ldw	r2,0(r2)
   14364:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   14368:	e13ffd17 	ldw	r4,-12(fp)
   1436c:	00144e80 	call	144e8 <alt_putchar>
   14370:	00005106 	br	144b8 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   14374:	e0bff807 	ldb	r2,-32(fp)
   14378:	10801e18 	cmpnei	r2,r2,120
   1437c:	1000341e 	bne	r2,zero,14450 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   14380:	e0bffe17 	ldw	r2,-8(fp)
   14384:	10c00104 	addi	r3,r2,4
   14388:	e0fffe15 	stw	r3,-8(fp)
   1438c:	10800017 	ldw	r2,0(r2)
   14390:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   14394:	e0bffb17 	ldw	r2,-20(fp)
   14398:	1000031e 	bne	r2,zero,143a8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   1439c:	01000c04 	movi	r4,48
   143a0:	00144e80 	call	144e8 <alt_putchar>
                        continue;
   143a4:	00004406 	br	144b8 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   143a8:	00800704 	movi	r2,28
   143ac:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   143b0:	00000306 	br	143c0 <alt_printf+0x100>
                        digit_shift -= 4;
   143b4:	e0bff917 	ldw	r2,-28(fp)
   143b8:	10bfff04 	addi	r2,r2,-4
   143bc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   143c0:	00c003c4 	movi	r3,15
   143c4:	e0bff917 	ldw	r2,-28(fp)
   143c8:	1884983a 	sll	r2,r3,r2
   143cc:	1007883a 	mov	r3,r2
   143d0:	e0bffb17 	ldw	r2,-20(fp)
   143d4:	1884703a 	and	r2,r3,r2
   143d8:	103ff626 	beq	r2,zero,143b4 <__alt_data_end+0xf40143b4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   143dc:	00001906 	br	14444 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   143e0:	00c003c4 	movi	r3,15
   143e4:	e0bff917 	ldw	r2,-28(fp)
   143e8:	1884983a 	sll	r2,r3,r2
   143ec:	1007883a 	mov	r3,r2
   143f0:	e0bffb17 	ldw	r2,-20(fp)
   143f4:	1886703a 	and	r3,r3,r2
   143f8:	e0bff917 	ldw	r2,-28(fp)
   143fc:	1884d83a 	srl	r2,r3,r2
   14400:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   14404:	e0bffc17 	ldw	r2,-16(fp)
   14408:	108002a8 	cmpgeui	r2,r2,10
   1440c:	1000041e 	bne	r2,zero,14420 <alt_printf+0x160>
                            c = '0' + digit;
   14410:	e0bffc17 	ldw	r2,-16(fp)
   14414:	10800c04 	addi	r2,r2,48
   14418:	e0bff805 	stb	r2,-32(fp)
   1441c:	00000306 	br	1442c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   14420:	e0bffc17 	ldw	r2,-16(fp)
   14424:	108015c4 	addi	r2,r2,87
   14428:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   1442c:	e0bff807 	ldb	r2,-32(fp)
   14430:	1009883a 	mov	r4,r2
   14434:	00144e80 	call	144e8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   14438:	e0bff917 	ldw	r2,-28(fp)
   1443c:	10bfff04 	addi	r2,r2,-4
   14440:	e0bff915 	stw	r2,-28(fp)
   14444:	e0bff917 	ldw	r2,-28(fp)
   14448:	103fe50e 	bge	r2,zero,143e0 <__alt_data_end+0xf40143e0>
   1444c:	00001a06 	br	144b8 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   14450:	e0bff807 	ldb	r2,-32(fp)
   14454:	10801cd8 	cmpnei	r2,r2,115
   14458:	1000151e 	bne	r2,zero,144b0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   1445c:	e0bffe17 	ldw	r2,-8(fp)
   14460:	10c00104 	addi	r3,r2,4
   14464:	e0fffe15 	stw	r3,-8(fp)
   14468:	10800017 	ldw	r2,0(r2)
   1446c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   14470:	00000906 	br	14498 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   14474:	e0bffa17 	ldw	r2,-24(fp)
   14478:	10c00044 	addi	r3,r2,1
   1447c:	e0fffa15 	stw	r3,-24(fp)
   14480:	10800003 	ldbu	r2,0(r2)
   14484:	10803fcc 	andi	r2,r2,255
   14488:	1080201c 	xori	r2,r2,128
   1448c:	10bfe004 	addi	r2,r2,-128
   14490:	1009883a 	mov	r4,r2
   14494:	00144e80 	call	144e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   14498:	e0bffa17 	ldw	r2,-24(fp)
   1449c:	10800003 	ldbu	r2,0(r2)
   144a0:	10803fcc 	andi	r2,r2,255
   144a4:	1080201c 	xori	r2,r2,128
   144a8:	10bfe004 	addi	r2,r2,-128
   144ac:	103ff11e 	bne	r2,zero,14474 <__alt_data_end+0xf4014474>
   144b0:	00000106 	br	144b8 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   144b4:	00000706 	br	144d4 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   144b8:	e0bff717 	ldw	r2,-36(fp)
   144bc:	10c00044 	addi	r3,r2,1
   144c0:	e0fff715 	stw	r3,-36(fp)
   144c4:	10800003 	ldbu	r2,0(r2)
   144c8:	e0bff805 	stb	r2,-32(fp)
   144cc:	e0bff807 	ldb	r2,-32(fp)
   144d0:	103f881e 	bne	r2,zero,142f4 <__alt_data_end+0xf40142f4>
            {
                break;
            }
        }
    }
}
   144d4:	e037883a 	mov	sp,fp
   144d8:	dfc00117 	ldw	ra,4(sp)
   144dc:	df000017 	ldw	fp,0(sp)
   144e0:	dec00504 	addi	sp,sp,20
   144e4:	f800283a 	ret

000144e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   144e8:	defffd04 	addi	sp,sp,-12
   144ec:	dfc00215 	stw	ra,8(sp)
   144f0:	df000115 	stw	fp,4(sp)
   144f4:	df000104 	addi	fp,sp,4
   144f8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   144fc:	00820034 	movhi	r2,2048
   14500:	1082a704 	addi	r2,r2,2716
   14504:	10800017 	ldw	r2,0(r2)
   14508:	10800217 	ldw	r2,8(r2)
   1450c:	e13fff17 	ldw	r4,-4(fp)
   14510:	100b883a 	mov	r5,r2
   14514:	0013d200 	call	13d20 <putc>
#endif
}
   14518:	e037883a 	mov	sp,fp
   1451c:	dfc00117 	ldw	ra,4(sp)
   14520:	df000017 	ldw	fp,0(sp)
   14524:	dec00204 	addi	sp,sp,8
   14528:	f800283a 	ret

0001452c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1452c:	defff904 	addi	sp,sp,-28
   14530:	df000615 	stw	fp,24(sp)
   14534:	df000604 	addi	fp,sp,24
   14538:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1453c:	0005303a 	rdctl	r2,status
   14540:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14544:	e0fffc17 	ldw	r3,-16(fp)
   14548:	00bfff84 	movi	r2,-2
   1454c:	1884703a 	and	r2,r3,r2
   14550:	1001703a 	wrctl	status,r2
  
  return context;
   14554:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14558:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1455c:	d0a01217 	ldw	r2,-32696(gp)
   14560:	10c000c4 	addi	r3,r2,3
   14564:	00bfff04 	movi	r2,-4
   14568:	1884703a 	and	r2,r3,r2
   1456c:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14570:	d0e01217 	ldw	r3,-32696(gp)
   14574:	e0bfff17 	ldw	r2,-4(fp)
   14578:	1887883a 	add	r3,r3,r2
   1457c:	00830034 	movhi	r2,3072
   14580:	10800004 	addi	r2,r2,0
   14584:	10c0062e 	bgeu	r2,r3,145a0 <sbrk+0x74>
   14588:	e0bffa17 	ldw	r2,-24(fp)
   1458c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14590:	e0bffd17 	ldw	r2,-12(fp)
   14594:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14598:	00bfffc4 	movi	r2,-1
   1459c:	00000b06 	br	145cc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   145a0:	d0a01217 	ldw	r2,-32696(gp)
   145a4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   145a8:	d0e01217 	ldw	r3,-32696(gp)
   145ac:	e0bfff17 	ldw	r2,-4(fp)
   145b0:	1885883a 	add	r2,r3,r2
   145b4:	d0a01215 	stw	r2,-32696(gp)
   145b8:	e0bffa17 	ldw	r2,-24(fp)
   145bc:	e0bffe15 	stw	r2,-8(fp)
   145c0:	e0bffe17 	ldw	r2,-8(fp)
   145c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   145c8:	e0bffb17 	ldw	r2,-20(fp)
} 
   145cc:	e037883a 	mov	sp,fp
   145d0:	df000017 	ldw	fp,0(sp)
   145d4:	dec00104 	addi	sp,sp,4
   145d8:	f800283a 	ret

000145dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   145dc:	defffe04 	addi	sp,sp,-8
   145e0:	dfc00115 	stw	ra,4(sp)
   145e4:	df000015 	stw	fp,0(sp)
   145e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   145ec:	00820034 	movhi	r2,2048
   145f0:	1082ae04 	addi	r2,r2,2744
   145f4:	10800017 	ldw	r2,0(r2)
   145f8:	10000526 	beq	r2,zero,14610 <alt_get_errno+0x34>
   145fc:	00820034 	movhi	r2,2048
   14600:	1082ae04 	addi	r2,r2,2744
   14604:	10800017 	ldw	r2,0(r2)
   14608:	103ee83a 	callr	r2
   1460c:	00000206 	br	14618 <alt_get_errno+0x3c>
   14610:	00820034 	movhi	r2,2048
   14614:	1082b704 	addi	r2,r2,2780
}
   14618:	e037883a 	mov	sp,fp
   1461c:	dfc00117 	ldw	ra,4(sp)
   14620:	df000017 	ldw	fp,0(sp)
   14624:	dec00204 	addi	sp,sp,8
   14628:	f800283a 	ret

0001462c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1462c:	defff904 	addi	sp,sp,-28
   14630:	dfc00615 	stw	ra,24(sp)
   14634:	df000515 	stw	fp,20(sp)
   14638:	df000504 	addi	fp,sp,20
   1463c:	e13ffd15 	stw	r4,-12(fp)
   14640:	e17ffe15 	stw	r5,-8(fp)
   14644:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14648:	e0bffd17 	ldw	r2,-12(fp)
   1464c:	10000816 	blt	r2,zero,14670 <write+0x44>
   14650:	e13ffd17 	ldw	r4,-12(fp)
   14654:	01400304 	movi	r5,12
   14658:	00121d80 	call	121d8 <__mulsi3>
   1465c:	1007883a 	mov	r3,r2
   14660:	00820034 	movhi	r2,2048
   14664:	10823604 	addi	r2,r2,2264
   14668:	1885883a 	add	r2,r3,r2
   1466c:	00000106 	br	14674 <write+0x48>
   14670:	0005883a 	mov	r2,zero
   14674:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   14678:	e0bffb17 	ldw	r2,-20(fp)
   1467c:	10002126 	beq	r2,zero,14704 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14680:	e0bffb17 	ldw	r2,-20(fp)
   14684:	10800217 	ldw	r2,8(r2)
   14688:	108000cc 	andi	r2,r2,3
   1468c:	10001826 	beq	r2,zero,146f0 <write+0xc4>
   14690:	e0bffb17 	ldw	r2,-20(fp)
   14694:	10800017 	ldw	r2,0(r2)
   14698:	10800617 	ldw	r2,24(r2)
   1469c:	10001426 	beq	r2,zero,146f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   146a0:	e0bffb17 	ldw	r2,-20(fp)
   146a4:	10800017 	ldw	r2,0(r2)
   146a8:	10800617 	ldw	r2,24(r2)
   146ac:	e0ffff17 	ldw	r3,-4(fp)
   146b0:	e13ffb17 	ldw	r4,-20(fp)
   146b4:	e17ffe17 	ldw	r5,-8(fp)
   146b8:	180d883a 	mov	r6,r3
   146bc:	103ee83a 	callr	r2
   146c0:	e0bffc15 	stw	r2,-16(fp)
   146c4:	e0bffc17 	ldw	r2,-16(fp)
   146c8:	1000070e 	bge	r2,zero,146e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   146cc:	00145dc0 	call	145dc <alt_get_errno>
   146d0:	1007883a 	mov	r3,r2
   146d4:	e0bffc17 	ldw	r2,-16(fp)
   146d8:	0085c83a 	sub	r2,zero,r2
   146dc:	18800015 	stw	r2,0(r3)
        return -1;
   146e0:	00bfffc4 	movi	r2,-1
   146e4:	00000c06 	br	14718 <write+0xec>
      }
      return rval;
   146e8:	e0bffc17 	ldw	r2,-16(fp)
   146ec:	00000a06 	br	14718 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   146f0:	00145dc0 	call	145dc <alt_get_errno>
   146f4:	1007883a 	mov	r3,r2
   146f8:	00800344 	movi	r2,13
   146fc:	18800015 	stw	r2,0(r3)
   14700:	00000406 	br	14714 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14704:	00145dc0 	call	145dc <alt_get_errno>
   14708:	1007883a 	mov	r3,r2
   1470c:	00801444 	movi	r2,81
   14710:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14714:	00bfffc4 	movi	r2,-1
}
   14718:	e037883a 	mov	sp,fp
   1471c:	dfc00117 	ldw	ra,4(sp)
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00204 	addi	sp,sp,8
   14728:	f800283a 	ret

0001472c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1472c:	defffd04 	addi	sp,sp,-12
   14730:	dfc00215 	stw	ra,8(sp)
   14734:	df000115 	stw	fp,4(sp)
   14738:	df000104 	addi	fp,sp,4
   1473c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14740:	e13fff17 	ldw	r4,-4(fp)
   14744:	01420034 	movhi	r5,2048
   14748:	2942ab04 	addi	r5,r5,2732
   1474c:	0014f700 	call	14f70 <alt_dev_llist_insert>
}
   14750:	e037883a 	mov	sp,fp
   14754:	dfc00117 	ldw	ra,4(sp)
   14758:	df000017 	ldw	fp,0(sp)
   1475c:	dec00204 	addi	sp,sp,8
   14760:	f800283a 	ret

00014764 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14764:	defffd04 	addi	sp,sp,-12
   14768:	dfc00215 	stw	ra,8(sp)
   1476c:	df000115 	stw	fp,4(sp)
   14770:	df000104 	addi	fp,sp,4
   14774:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   14778:	00155f40 	call	155f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1477c:	00800044 	movi	r2,1
   14780:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14784:	e037883a 	mov	sp,fp
   14788:	dfc00117 	ldw	ra,4(sp)
   1478c:	df000017 	ldw	fp,0(sp)
   14790:	dec00204 	addi	sp,sp,8
   14794:	f800283a 	ret

00014798 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14798:	defffe04 	addi	sp,sp,-8
   1479c:	dfc00115 	stw	ra,4(sp)
   147a0:	df000015 	stw	fp,0(sp)
   147a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   147a8:	01020034 	movhi	r4,2048
   147ac:	21020004 	addi	r4,r4,2048
   147b0:	001472c0 	call	1472c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
   147b4:	01020034 	movhi	r4,2048
   147b8:	21020b04 	addi	r4,r4,2092
   147bc:	001472c0 	call	1472c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
   147c0:	01020034 	movhi	r4,2048
   147c4:	21021604 	addi	r4,r4,2136
   147c8:	001472c0 	call	1472c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_IC, sd_card_ic);
   147cc:	01020034 	movhi	r4,2048
   147d0:	21022104 	addi	r4,r4,2180
   147d4:	001472c0 	call	1472c <alt_dev_reg>
}
   147d8:	e037883a 	mov	sp,fp
   147dc:	dfc00117 	ldw	ra,4(sp)
   147e0:	df000017 	ldw	fp,0(sp)
   147e4:	dec00204 	addi	sp,sp,8
   147e8:	f800283a 	ret

000147ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   147ec:	defffa04 	addi	sp,sp,-24
   147f0:	dfc00515 	stw	ra,20(sp)
   147f4:	df000415 	stw	fp,16(sp)
   147f8:	df000404 	addi	fp,sp,16
   147fc:	e13ffd15 	stw	r4,-12(fp)
   14800:	e17ffe15 	stw	r5,-8(fp)
   14804:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14808:	e0bffd17 	ldw	r2,-12(fp)
   1480c:	10800017 	ldw	r2,0(r2)
   14810:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14814:	e0bffc17 	ldw	r2,-16(fp)
   14818:	10c00a04 	addi	r3,r2,40
   1481c:	e0bffd17 	ldw	r2,-12(fp)
   14820:	10800217 	ldw	r2,8(r2)
   14824:	1809883a 	mov	r4,r3
   14828:	e17ffe17 	ldw	r5,-8(fp)
   1482c:	e1bfff17 	ldw	r6,-4(fp)
   14830:	100f883a 	mov	r7,r2
   14834:	00148ac0 	call	148ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14838:	e037883a 	mov	sp,fp
   1483c:	dfc00117 	ldw	ra,4(sp)
   14840:	df000017 	ldw	fp,0(sp)
   14844:	dec00204 	addi	sp,sp,8
   14848:	f800283a 	ret

0001484c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1484c:	defffa04 	addi	sp,sp,-24
   14850:	dfc00515 	stw	ra,20(sp)
   14854:	df000415 	stw	fp,16(sp)
   14858:	df000404 	addi	fp,sp,16
   1485c:	e13ffd15 	stw	r4,-12(fp)
   14860:	e17ffe15 	stw	r5,-8(fp)
   14864:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14868:	e0bffd17 	ldw	r2,-12(fp)
   1486c:	10800017 	ldw	r2,0(r2)
   14870:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14874:	e0bffc17 	ldw	r2,-16(fp)
   14878:	10c00a04 	addi	r3,r2,40
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	10800217 	ldw	r2,8(r2)
   14884:	1809883a 	mov	r4,r3
   14888:	e17ffe17 	ldw	r5,-8(fp)
   1488c:	e1bfff17 	ldw	r6,-4(fp)
   14890:	100f883a 	mov	r7,r2
   14894:	00149900 	call	14990 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14898:	e037883a 	mov	sp,fp
   1489c:	dfc00117 	ldw	ra,4(sp)
   148a0:	df000017 	ldw	fp,0(sp)
   148a4:	dec00204 	addi	sp,sp,8
   148a8:	f800283a 	ret

000148ac <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   148ac:	defff704 	addi	sp,sp,-36
   148b0:	df000815 	stw	fp,32(sp)
   148b4:	df000804 	addi	fp,sp,32
   148b8:	e13ffc15 	stw	r4,-16(fp)
   148bc:	e17ffd15 	stw	r5,-12(fp)
   148c0:	e1bffe15 	stw	r6,-8(fp)
   148c4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   148c8:	e0bffc17 	ldw	r2,-16(fp)
   148cc:	10800017 	ldw	r2,0(r2)
   148d0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   148d4:	e0bffd17 	ldw	r2,-12(fp)
   148d8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   148dc:	e0bffe17 	ldw	r2,-8(fp)
   148e0:	e0fffd17 	ldw	r3,-12(fp)
   148e4:	1885883a 	add	r2,r3,r2
   148e8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   148ec:	00001406 	br	14940 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   148f0:	e0bff917 	ldw	r2,-28(fp)
   148f4:	10800037 	ldwio	r2,0(r2)
   148f8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   148fc:	e0bffb17 	ldw	r2,-20(fp)
   14900:	10a0000c 	andi	r2,r2,32768
   14904:	10000626 	beq	r2,zero,14920 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14908:	e0bff817 	ldw	r2,-32(fp)
   1490c:	10c00044 	addi	r3,r2,1
   14910:	e0fff815 	stw	r3,-32(fp)
   14914:	e0fffb17 	ldw	r3,-20(fp)
   14918:	10c00005 	stb	r3,0(r2)
   1491c:	00000806 	br	14940 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   14920:	e0fff817 	ldw	r3,-32(fp)
   14924:	e0bffd17 	ldw	r2,-12(fp)
   14928:	18800126 	beq	r3,r2,14930 <altera_avalon_jtag_uart_read+0x84>
      break;
   1492c:	00000706 	br	1494c <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   14930:	e0bfff17 	ldw	r2,-4(fp)
   14934:	1090000c 	andi	r2,r2,16384
   14938:	10000126 	beq	r2,zero,14940 <altera_avalon_jtag_uart_read+0x94>
      break;   
   1493c:	00000306 	br	1494c <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   14940:	e0fff817 	ldw	r3,-32(fp)
   14944:	e0bffa17 	ldw	r2,-24(fp)
   14948:	18bfe936 	bltu	r3,r2,148f0 <__alt_data_end+0xf40148f0>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   1494c:	e0fff817 	ldw	r3,-32(fp)
   14950:	e0bffd17 	ldw	r2,-12(fp)
   14954:	18800426 	beq	r3,r2,14968 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   14958:	e0fff817 	ldw	r3,-32(fp)
   1495c:	e0bffd17 	ldw	r2,-12(fp)
   14960:	1885c83a 	sub	r2,r3,r2
   14964:	00000606 	br	14980 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   14968:	e0bfff17 	ldw	r2,-4(fp)
   1496c:	1090000c 	andi	r2,r2,16384
   14970:	10000226 	beq	r2,zero,1497c <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   14974:	00bffd44 	movi	r2,-11
   14978:	00000106 	br	14980 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   1497c:	00bffec4 	movi	r2,-5
}
   14980:	e037883a 	mov	sp,fp
   14984:	df000017 	ldw	fp,0(sp)
   14988:	dec00104 	addi	sp,sp,4
   1498c:	f800283a 	ret

00014990 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14990:	defff904 	addi	sp,sp,-28
   14994:	df000615 	stw	fp,24(sp)
   14998:	df000604 	addi	fp,sp,24
   1499c:	e13ffc15 	stw	r4,-16(fp)
   149a0:	e17ffd15 	stw	r5,-12(fp)
   149a4:	e1bffe15 	stw	r6,-8(fp)
   149a8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   149ac:	e0bffc17 	ldw	r2,-16(fp)
   149b0:	10800017 	ldw	r2,0(r2)
   149b4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   149b8:	e0bffe17 	ldw	r2,-8(fp)
   149bc:	e0fffd17 	ldw	r3,-12(fp)
   149c0:	1885883a 	add	r2,r3,r2
   149c4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   149c8:	00000e06 	br	14a04 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   149cc:	e0bffa17 	ldw	r2,-24(fp)
   149d0:	10800104 	addi	r2,r2,4
   149d4:	10800037 	ldwio	r2,0(r2)
   149d8:	10bfffec 	andhi	r2,r2,65535
   149dc:	10000926 	beq	r2,zero,14a04 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   149e0:	e0fffa17 	ldw	r3,-24(fp)
   149e4:	e0bffd17 	ldw	r2,-12(fp)
   149e8:	11000044 	addi	r4,r2,1
   149ec:	e13ffd15 	stw	r4,-12(fp)
   149f0:	10800003 	ldbu	r2,0(r2)
   149f4:	10803fcc 	andi	r2,r2,255
   149f8:	1080201c 	xori	r2,r2,128
   149fc:	10bfe004 	addi	r2,r2,-128
   14a00:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   14a04:	e0fffd17 	ldw	r3,-12(fp)
   14a08:	e0bffb17 	ldw	r2,-20(fp)
   14a0c:	18bfef36 	bltu	r3,r2,149cc <__alt_data_end+0xf40149cc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   14a10:	e0bffe17 	ldw	r2,-8(fp)
}
   14a14:	e037883a 	mov	sp,fp
   14a18:	df000017 	ldw	fp,0(sp)
   14a1c:	dec00104 	addi	sp,sp,4
   14a20:	f800283a 	ret

00014a24 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   14a24:	defffd04 	addi	sp,sp,-12
   14a28:	df000215 	stw	fp,8(sp)
   14a2c:	df000204 	addi	fp,sp,8
   14a30:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14a34:	e0bfff17 	ldw	r2,-4(fp)
   14a38:	10800a17 	ldw	r2,40(r2)
   14a3c:	10800104 	addi	r2,r2,4
   14a40:	10800037 	ldwio	r2,0(r2)
   14a44:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   14a48:	e0bffe17 	ldw	r2,-8(fp)
   14a4c:	10800054 	ori	r2,r2,1
   14a50:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   14a54:	e0bfff17 	ldw	r2,-4(fp)
   14a58:	10800a17 	ldw	r2,40(r2)
   14a5c:	10800104 	addi	r2,r2,4
   14a60:	1007883a 	mov	r3,r2
   14a64:	e0bffe17 	ldw	r2,-8(fp)
   14a68:	18800035 	stwio	r2,0(r3)
}
   14a6c:	e037883a 	mov	sp,fp
   14a70:	df000017 	ldw	fp,0(sp)
   14a74:	dec00104 	addi	sp,sp,4
   14a78:	f800283a 	ret

00014a7c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   14a7c:	defffd04 	addi	sp,sp,-12
   14a80:	df000215 	stw	fp,8(sp)
   14a84:	df000204 	addi	fp,sp,8
   14a88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14a8c:	e0bfff17 	ldw	r2,-4(fp)
   14a90:	10800a17 	ldw	r2,40(r2)
   14a94:	10800104 	addi	r2,r2,4
   14a98:	10800037 	ldwio	r2,0(r2)
   14a9c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   14aa0:	e0fffe17 	ldw	r3,-8(fp)
   14aa4:	00bfff84 	movi	r2,-2
   14aa8:	1884703a 	and	r2,r3,r2
   14aac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   14ab0:	e0bfff17 	ldw	r2,-4(fp)
   14ab4:	10800a17 	ldw	r2,40(r2)
   14ab8:	10800104 	addi	r2,r2,4
   14abc:	1007883a 	mov	r3,r2
   14ac0:	e0bffe17 	ldw	r2,-8(fp)
   14ac4:	18800035 	stwio	r2,0(r3)
}
   14ac8:	e037883a 	mov	sp,fp
   14acc:	df000017 	ldw	fp,0(sp)
   14ad0:	dec00104 	addi	sp,sp,4
   14ad4:	f800283a 	ret

00014ad8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   14ad8:	defffd04 	addi	sp,sp,-12
   14adc:	df000215 	stw	fp,8(sp)
   14ae0:	df000204 	addi	fp,sp,8
   14ae4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   14ae8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   14aec:	e0bfff17 	ldw	r2,-4(fp)
   14af0:	10800a17 	ldw	r2,40(r2)
   14af4:	10800084 	addi	r2,r2,2
   14af8:	1080002b 	ldhuio	r2,0(r2)
   14afc:	10bfffcc 	andi	r2,r2,65535
   14b00:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   14b04:	e0bffe0b 	ldhu	r2,-8(fp)
}
   14b08:	e037883a 	mov	sp,fp
   14b0c:	df000017 	ldw	fp,0(sp)
   14b10:	dec00104 	addi	sp,sp,4
   14b14:	f800283a 	ret

00014b18 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   14b18:	defffd04 	addi	sp,sp,-12
   14b1c:	df000215 	stw	fp,8(sp)
   14b20:	df000204 	addi	fp,sp,8
   14b24:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   14b28:	e0bfff17 	ldw	r2,-4(fp)
   14b2c:	10800a17 	ldw	r2,40(r2)
   14b30:	10800104 	addi	r2,r2,4
   14b34:	10800037 	ldwio	r2,0(r2)
   14b38:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   14b3c:	e0bffe17 	ldw	r2,-8(fp)
   14b40:	1004d43a 	srli	r2,r2,16
}
   14b44:	e037883a 	mov	sp,fp
   14b48:	df000017 	ldw	fp,0(sp)
   14b4c:	dec00104 	addi	sp,sp,4
   14b50:	f800283a 	ret

00014b54 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   14b54:	defffd04 	addi	sp,sp,-12
   14b58:	df000215 	stw	fp,8(sp)
   14b5c:	df000204 	addi	fp,sp,8
   14b60:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   14b64:	e0bfff17 	ldw	r2,-4(fp)
   14b68:	1080800c 	andi	r2,r2,512
   14b6c:	1004d27a 	srli	r2,r2,9
   14b70:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   14b74:	e0bffe17 	ldw	r2,-8(fp)
   14b78:	10000226 	beq	r2,zero,14b84 <alt_up_rs232_check_parity+0x30>
   14b7c:	00bfffc4 	movi	r2,-1
   14b80:	00000106 	br	14b88 <alt_up_rs232_check_parity+0x34>
   14b84:	0005883a 	mov	r2,zero
}
   14b88:	e037883a 	mov	sp,fp
   14b8c:	df000017 	ldw	fp,0(sp)
   14b90:	dec00104 	addi	sp,sp,4
   14b94:	f800283a 	ret

00014b98 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   14b98:	defffd04 	addi	sp,sp,-12
   14b9c:	df000215 	stw	fp,8(sp)
   14ba0:	df000204 	addi	fp,sp,8
   14ba4:	e13ffe15 	stw	r4,-8(fp)
   14ba8:	2805883a 	mov	r2,r5
   14bac:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	10800a17 	ldw	r2,40(r2)
   14bb8:	1007883a 	mov	r3,r2
   14bbc:	e0bfff03 	ldbu	r2,-4(fp)
   14bc0:	18800035 	stwio	r2,0(r3)
	return 0;
   14bc4:	0005883a 	mov	r2,zero
}
   14bc8:	e037883a 	mov	sp,fp
   14bcc:	df000017 	ldw	fp,0(sp)
   14bd0:	dec00104 	addi	sp,sp,4
   14bd4:	f800283a 	ret

00014bd8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   14bd8:	defffa04 	addi	sp,sp,-24
   14bdc:	dfc00515 	stw	ra,20(sp)
   14be0:	df000415 	stw	fp,16(sp)
   14be4:	df000404 	addi	fp,sp,16
   14be8:	e13ffd15 	stw	r4,-12(fp)
   14bec:	e17ffe15 	stw	r5,-8(fp)
   14bf0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   14bf4:	e0bffd17 	ldw	r2,-12(fp)
   14bf8:	10800a17 	ldw	r2,40(r2)
   14bfc:	10800037 	ldwio	r2,0(r2)
   14c00:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   14c04:	e0bffc17 	ldw	r2,-16(fp)
   14c08:	1007883a 	mov	r3,r2
   14c0c:	e0bffe17 	ldw	r2,-8(fp)
   14c10:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   14c14:	e13ffc17 	ldw	r4,-16(fp)
   14c18:	0014b540 	call	14b54 <alt_up_rs232_check_parity>
   14c1c:	1007883a 	mov	r3,r2
   14c20:	e0bfff17 	ldw	r2,-4(fp)
   14c24:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   14c28:	e0bffc17 	ldw	r2,-16(fp)
   14c2c:	10a0000c 	andi	r2,r2,32768
   14c30:	1004d3fa 	srli	r2,r2,15
   14c34:	10bfffc4 	addi	r2,r2,-1
}
   14c38:	e037883a 	mov	sp,fp
   14c3c:	dfc00117 	ldw	ra,4(sp)
   14c40:	df000017 	ldw	fp,0(sp)
   14c44:	dec00204 	addi	sp,sp,8
   14c48:	f800283a 	ret

00014c4c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   14c4c:	defff804 	addi	sp,sp,-32
   14c50:	dfc00715 	stw	ra,28(sp)
   14c54:	df000615 	stw	fp,24(sp)
   14c58:	df000604 	addi	fp,sp,24
   14c5c:	e13ffd15 	stw	r4,-12(fp)
   14c60:	e17ffe15 	stw	r5,-8(fp)
   14c64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   14c68:	e0bffd17 	ldw	r2,-12(fp)
   14c6c:	10800017 	ldw	r2,0(r2)
   14c70:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   14c74:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   14c78:	00000e06 	br	14cb4 <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   14c7c:	e0bffe17 	ldw	r2,-8(fp)
   14c80:	10c00044 	addi	r3,r2,1
   14c84:	e0fffe15 	stw	r3,-8(fp)
   14c88:	e0fffc04 	addi	r3,fp,-16
   14c8c:	e13ffb17 	ldw	r4,-20(fp)
   14c90:	100b883a 	mov	r5,r2
   14c94:	180d883a 	mov	r6,r3
   14c98:	0014bd80 	call	14bd8 <alt_up_rs232_read_data>
   14c9c:	1000041e 	bne	r2,zero,14cb0 <alt_up_rs232_read_fd+0x64>
			count++;
   14ca0:	e0bffa17 	ldw	r2,-24(fp)
   14ca4:	10800044 	addi	r2,r2,1
   14ca8:	e0bffa15 	stw	r2,-24(fp)
   14cac:	00000106 	br	14cb4 <alt_up_rs232_read_fd+0x68>
		else
			break;
   14cb0:	00000406 	br	14cc4 <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   14cb4:	e0bfff17 	ldw	r2,-4(fp)
   14cb8:	10ffffc4 	addi	r3,r2,-1
   14cbc:	e0ffff15 	stw	r3,-4(fp)
   14cc0:	103fee1e 	bne	r2,zero,14c7c <__alt_data_end+0xf4014c7c>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   14cc4:	e0bffa17 	ldw	r2,-24(fp)
}
   14cc8:	e037883a 	mov	sp,fp
   14ccc:	dfc00117 	ldw	ra,4(sp)
   14cd0:	df000017 	ldw	fp,0(sp)
   14cd4:	dec00204 	addi	sp,sp,8
   14cd8:	f800283a 	ret

00014cdc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   14cdc:	defff904 	addi	sp,sp,-28
   14ce0:	dfc00615 	stw	ra,24(sp)
   14ce4:	df000515 	stw	fp,20(sp)
   14ce8:	df000504 	addi	fp,sp,20
   14cec:	e13ffd15 	stw	r4,-12(fp)
   14cf0:	e17ffe15 	stw	r5,-8(fp)
   14cf4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   14cf8:	e0bffd17 	ldw	r2,-12(fp)
   14cfc:	10800017 	ldw	r2,0(r2)
   14d00:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   14d04:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   14d08:	00000f06 	br	14d48 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   14d0c:	e0bffe17 	ldw	r2,-8(fp)
   14d10:	10800003 	ldbu	r2,0(r2)
   14d14:	10803fcc 	andi	r2,r2,255
   14d18:	e13ffc17 	ldw	r4,-16(fp)
   14d1c:	100b883a 	mov	r5,r2
   14d20:	0014b980 	call	14b98 <alt_up_rs232_write_data>
   14d24:	1000071e 	bne	r2,zero,14d44 <alt_up_rs232_write_fd+0x68>
		{
			count++;
   14d28:	e0bffb17 	ldw	r2,-20(fp)
   14d2c:	10800044 	addi	r2,r2,1
   14d30:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   14d34:	e0bffe17 	ldw	r2,-8(fp)
   14d38:	10800044 	addi	r2,r2,1
   14d3c:	e0bffe15 	stw	r2,-8(fp)
   14d40:	00000106 	br	14d48 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   14d44:	00000406 	br	14d58 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   14d48:	e0bfff17 	ldw	r2,-4(fp)
   14d4c:	10ffffc4 	addi	r3,r2,-1
   14d50:	e0ffff15 	stw	r3,-4(fp)
   14d54:	103fed1e 	bne	r2,zero,14d0c <__alt_data_end+0xf4014d0c>
			ptr++;
		}
		else
			break;
	}
	return count;
   14d58:	e0bffb17 	ldw	r2,-20(fp)
}
   14d5c:	e037883a 	mov	sp,fp
   14d60:	dfc00117 	ldw	ra,4(sp)
   14d64:	df000017 	ldw	fp,0(sp)
   14d68:	dec00204 	addi	sp,sp,8
   14d6c:	f800283a 	ret

00014d70 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   14d70:	defffc04 	addi	sp,sp,-16
   14d74:	dfc00315 	stw	ra,12(sp)
   14d78:	df000215 	stw	fp,8(sp)
   14d7c:	df000204 	addi	fp,sp,8
   14d80:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   14d84:	e13fff17 	ldw	r4,-4(fp)
   14d88:	01420034 	movhi	r5,2048
   14d8c:	2942ab04 	addi	r5,r5,2732
   14d90:	00150cc0 	call	150cc <alt_find_dev>
   14d94:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   14d98:	e0bffe17 	ldw	r2,-8(fp)
}
   14d9c:	e037883a 	mov	sp,fp
   14da0:	dfc00117 	ldw	ra,4(sp)
   14da4:	df000017 	ldw	fp,0(sp)
   14da8:	dec00204 	addi	sp,sp,8
   14dac:	f800283a 	ret

00014db0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14db0:	defffe04 	addi	sp,sp,-8
   14db4:	dfc00115 	stw	ra,4(sp)
   14db8:	df000015 	stw	fp,0(sp)
   14dbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14dc0:	00820034 	movhi	r2,2048
   14dc4:	1082ae04 	addi	r2,r2,2744
   14dc8:	10800017 	ldw	r2,0(r2)
   14dcc:	10000526 	beq	r2,zero,14de4 <alt_get_errno+0x34>
   14dd0:	00820034 	movhi	r2,2048
   14dd4:	1082ae04 	addi	r2,r2,2744
   14dd8:	10800017 	ldw	r2,0(r2)
   14ddc:	103ee83a 	callr	r2
   14de0:	00000206 	br	14dec <alt_get_errno+0x3c>
   14de4:	00820034 	movhi	r2,2048
   14de8:	1082b704 	addi	r2,r2,2780
}
   14dec:	e037883a 	mov	sp,fp
   14df0:	dfc00117 	ldw	ra,4(sp)
   14df4:	df000017 	ldw	fp,0(sp)
   14df8:	dec00204 	addi	sp,sp,8
   14dfc:	f800283a 	ret

00014e00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   14e00:	defffb04 	addi	sp,sp,-20
   14e04:	dfc00415 	stw	ra,16(sp)
   14e08:	df000315 	stw	fp,12(sp)
   14e0c:	df000304 	addi	fp,sp,12
   14e10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	10000816 	blt	r2,zero,14e3c <close+0x3c>
   14e1c:	e13fff17 	ldw	r4,-4(fp)
   14e20:	01400304 	movi	r5,12
   14e24:	00121d80 	call	121d8 <__mulsi3>
   14e28:	1007883a 	mov	r3,r2
   14e2c:	00820034 	movhi	r2,2048
   14e30:	10823604 	addi	r2,r2,2264
   14e34:	1885883a 	add	r2,r3,r2
   14e38:	00000106 	br	14e40 <close+0x40>
   14e3c:	0005883a 	mov	r2,zero
   14e40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   14e44:	e0bffd17 	ldw	r2,-12(fp)
   14e48:	10001926 	beq	r2,zero,14eb0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   14e4c:	e0bffd17 	ldw	r2,-12(fp)
   14e50:	10800017 	ldw	r2,0(r2)
   14e54:	10800417 	ldw	r2,16(r2)
   14e58:	10000626 	beq	r2,zero,14e74 <close+0x74>
   14e5c:	e0bffd17 	ldw	r2,-12(fp)
   14e60:	10800017 	ldw	r2,0(r2)
   14e64:	10800417 	ldw	r2,16(r2)
   14e68:	e13ffd17 	ldw	r4,-12(fp)
   14e6c:	103ee83a 	callr	r2
   14e70:	00000106 	br	14e78 <close+0x78>
   14e74:	0005883a 	mov	r2,zero
   14e78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   14e7c:	e13fff17 	ldw	r4,-4(fp)
   14e80:	00155740 	call	15574 <alt_release_fd>
    if (rval < 0)
   14e84:	e0bffe17 	ldw	r2,-8(fp)
   14e88:	1000070e 	bge	r2,zero,14ea8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   14e8c:	0014db00 	call	14db0 <alt_get_errno>
   14e90:	1007883a 	mov	r3,r2
   14e94:	e0bffe17 	ldw	r2,-8(fp)
   14e98:	0085c83a 	sub	r2,zero,r2
   14e9c:	18800015 	stw	r2,0(r3)
      return -1;
   14ea0:	00bfffc4 	movi	r2,-1
   14ea4:	00000706 	br	14ec4 <close+0xc4>
    }
    return 0;
   14ea8:	0005883a 	mov	r2,zero
   14eac:	00000506 	br	14ec4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   14eb0:	0014db00 	call	14db0 <alt_get_errno>
   14eb4:	1007883a 	mov	r3,r2
   14eb8:	00801444 	movi	r2,81
   14ebc:	18800015 	stw	r2,0(r3)
    return -1;
   14ec0:	00bfffc4 	movi	r2,-1
  }
}
   14ec4:	e037883a 	mov	sp,fp
   14ec8:	dfc00117 	ldw	ra,4(sp)
   14ecc:	df000017 	ldw	fp,0(sp)
   14ed0:	dec00204 	addi	sp,sp,8
   14ed4:	f800283a 	ret

00014ed8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14ed8:	deffff04 	addi	sp,sp,-4
   14edc:	df000015 	stw	fp,0(sp)
   14ee0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14ee4:	e037883a 	mov	sp,fp
   14ee8:	df000017 	ldw	fp,0(sp)
   14eec:	dec00104 	addi	sp,sp,4
   14ef0:	f800283a 	ret

00014ef4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   14ef4:	defffc04 	addi	sp,sp,-16
   14ef8:	df000315 	stw	fp,12(sp)
   14efc:	df000304 	addi	fp,sp,12
   14f00:	e13ffd15 	stw	r4,-12(fp)
   14f04:	e17ffe15 	stw	r5,-8(fp)
   14f08:	e1bfff15 	stw	r6,-4(fp)
  return len;
   14f0c:	e0bfff17 	ldw	r2,-4(fp)
}
   14f10:	e037883a 	mov	sp,fp
   14f14:	df000017 	ldw	fp,0(sp)
   14f18:	dec00104 	addi	sp,sp,4
   14f1c:	f800283a 	ret

00014f20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f20:	defffe04 	addi	sp,sp,-8
   14f24:	dfc00115 	stw	ra,4(sp)
   14f28:	df000015 	stw	fp,0(sp)
   14f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f30:	00820034 	movhi	r2,2048
   14f34:	1082ae04 	addi	r2,r2,2744
   14f38:	10800017 	ldw	r2,0(r2)
   14f3c:	10000526 	beq	r2,zero,14f54 <alt_get_errno+0x34>
   14f40:	00820034 	movhi	r2,2048
   14f44:	1082ae04 	addi	r2,r2,2744
   14f48:	10800017 	ldw	r2,0(r2)
   14f4c:	103ee83a 	callr	r2
   14f50:	00000206 	br	14f5c <alt_get_errno+0x3c>
   14f54:	00820034 	movhi	r2,2048
   14f58:	1082b704 	addi	r2,r2,2780
}
   14f5c:	e037883a 	mov	sp,fp
   14f60:	dfc00117 	ldw	ra,4(sp)
   14f64:	df000017 	ldw	fp,0(sp)
   14f68:	dec00204 	addi	sp,sp,8
   14f6c:	f800283a 	ret

00014f70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14f70:	defffa04 	addi	sp,sp,-24
   14f74:	dfc00515 	stw	ra,20(sp)
   14f78:	df000415 	stw	fp,16(sp)
   14f7c:	df000404 	addi	fp,sp,16
   14f80:	e13ffe15 	stw	r4,-8(fp)
   14f84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14f88:	e0bffe17 	ldw	r2,-8(fp)
   14f8c:	10000326 	beq	r2,zero,14f9c <alt_dev_llist_insert+0x2c>
   14f90:	e0bffe17 	ldw	r2,-8(fp)
   14f94:	10800217 	ldw	r2,8(r2)
   14f98:	1000061e 	bne	r2,zero,14fb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14f9c:	0014f200 	call	14f20 <alt_get_errno>
   14fa0:	1007883a 	mov	r3,r2
   14fa4:	00800584 	movi	r2,22
   14fa8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14fac:	00bffa84 	movi	r2,-22
   14fb0:	00001306 	br	15000 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14fb4:	e0bffe17 	ldw	r2,-8(fp)
   14fb8:	e0ffff17 	ldw	r3,-4(fp)
   14fbc:	e0fffc15 	stw	r3,-16(fp)
   14fc0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	e0fffc17 	ldw	r3,-16(fp)
   14fcc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14fd0:	e0bffc17 	ldw	r2,-16(fp)
   14fd4:	10c00017 	ldw	r3,0(r2)
   14fd8:	e0bffd17 	ldw	r2,-12(fp)
   14fdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14fe0:	e0bffc17 	ldw	r2,-16(fp)
   14fe4:	10800017 	ldw	r2,0(r2)
   14fe8:	e0fffd17 	ldw	r3,-12(fp)
   14fec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14ff0:	e0bffc17 	ldw	r2,-16(fp)
   14ff4:	e0fffd17 	ldw	r3,-12(fp)
   14ff8:	10c00015 	stw	r3,0(r2)

  return 0;  
   14ffc:	0005883a 	mov	r2,zero
}
   15000:	e037883a 	mov	sp,fp
   15004:	dfc00117 	ldw	ra,4(sp)
   15008:	df000017 	ldw	fp,0(sp)
   1500c:	dec00204 	addi	sp,sp,8
   15010:	f800283a 	ret

00015014 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15014:	defffd04 	addi	sp,sp,-12
   15018:	dfc00215 	stw	ra,8(sp)
   1501c:	df000115 	stw	fp,4(sp)
   15020:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15024:	00800074 	movhi	r2,1
   15028:	1096df04 	addi	r2,r2,23420
   1502c:	e0bfff15 	stw	r2,-4(fp)
   15030:	00000606 	br	1504c <_do_ctors+0x38>
        (*ctor) (); 
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	10800017 	ldw	r2,0(r2)
   1503c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15040:	e0bfff17 	ldw	r2,-4(fp)
   15044:	10bfff04 	addi	r2,r2,-4
   15048:	e0bfff15 	stw	r2,-4(fp)
   1504c:	e0ffff17 	ldw	r3,-4(fp)
   15050:	00800074 	movhi	r2,1
   15054:	1096e004 	addi	r2,r2,23424
   15058:	18bff62e 	bgeu	r3,r2,15034 <__alt_data_end+0xf4015034>
        (*ctor) (); 
}
   1505c:	e037883a 	mov	sp,fp
   15060:	dfc00117 	ldw	ra,4(sp)
   15064:	df000017 	ldw	fp,0(sp)
   15068:	dec00204 	addi	sp,sp,8
   1506c:	f800283a 	ret

00015070 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15070:	defffd04 	addi	sp,sp,-12
   15074:	dfc00215 	stw	ra,8(sp)
   15078:	df000115 	stw	fp,4(sp)
   1507c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15080:	00800074 	movhi	r2,1
   15084:	1096df04 	addi	r2,r2,23420
   15088:	e0bfff15 	stw	r2,-4(fp)
   1508c:	00000606 	br	150a8 <_do_dtors+0x38>
        (*dtor) (); 
   15090:	e0bfff17 	ldw	r2,-4(fp)
   15094:	10800017 	ldw	r2,0(r2)
   15098:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1509c:	e0bfff17 	ldw	r2,-4(fp)
   150a0:	10bfff04 	addi	r2,r2,-4
   150a4:	e0bfff15 	stw	r2,-4(fp)
   150a8:	e0ffff17 	ldw	r3,-4(fp)
   150ac:	00800074 	movhi	r2,1
   150b0:	1096e004 	addi	r2,r2,23424
   150b4:	18bff62e 	bgeu	r3,r2,15090 <__alt_data_end+0xf4015090>
        (*dtor) (); 
}
   150b8:	e037883a 	mov	sp,fp
   150bc:	dfc00117 	ldw	ra,4(sp)
   150c0:	df000017 	ldw	fp,0(sp)
   150c4:	dec00204 	addi	sp,sp,8
   150c8:	f800283a 	ret

000150cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   150cc:	defffa04 	addi	sp,sp,-24
   150d0:	dfc00515 	stw	ra,20(sp)
   150d4:	df000415 	stw	fp,16(sp)
   150d8:	df000404 	addi	fp,sp,16
   150dc:	e13ffe15 	stw	r4,-8(fp)
   150e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   150e4:	e0bfff17 	ldw	r2,-4(fp)
   150e8:	10800017 	ldw	r2,0(r2)
   150ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   150f0:	e13ffe17 	ldw	r4,-8(fp)
   150f4:	00132b00 	call	132b0 <strlen>
   150f8:	10800044 	addi	r2,r2,1
   150fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15100:	00000d06 	br	15138 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15104:	e0bffc17 	ldw	r2,-16(fp)
   15108:	10c00217 	ldw	r3,8(r2)
   1510c:	e0bffd17 	ldw	r2,-12(fp)
   15110:	1809883a 	mov	r4,r3
   15114:	e17ffe17 	ldw	r5,-8(fp)
   15118:	100d883a 	mov	r6,r2
   1511c:	00158300 	call	15830 <memcmp>
   15120:	1000021e 	bne	r2,zero,1512c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15124:	e0bffc17 	ldw	r2,-16(fp)
   15128:	00000706 	br	15148 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1512c:	e0bffc17 	ldw	r2,-16(fp)
   15130:	10800017 	ldw	r2,0(r2)
   15134:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15138:	e0fffc17 	ldw	r3,-16(fp)
   1513c:	e0bfff17 	ldw	r2,-4(fp)
   15140:	18bff01e 	bne	r3,r2,15104 <__alt_data_end+0xf4015104>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15144:	0005883a 	mov	r2,zero
}
   15148:	e037883a 	mov	sp,fp
   1514c:	dfc00117 	ldw	ra,4(sp)
   15150:	df000017 	ldw	fp,0(sp)
   15154:	dec00204 	addi	sp,sp,8
   15158:	f800283a 	ret

0001515c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1515c:	deffff04 	addi	sp,sp,-4
   15160:	df000015 	stw	fp,0(sp)
   15164:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15168:	e037883a 	mov	sp,fp
   1516c:	df000017 	ldw	fp,0(sp)
   15170:	dec00104 	addi	sp,sp,4
   15174:	f800283a 	ret

00015178 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15178:	defff804 	addi	sp,sp,-32
   1517c:	dfc00715 	stw	ra,28(sp)
   15180:	df000615 	stw	fp,24(sp)
   15184:	dc000515 	stw	r16,20(sp)
   15188:	df000604 	addi	fp,sp,24
   1518c:	e13ffb15 	stw	r4,-20(fp)
   15190:	e17ffc15 	stw	r5,-16(fp)
   15194:	e1bffd15 	stw	r6,-12(fp)
   15198:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1519c:	e13ffc17 	ldw	r4,-16(fp)
   151a0:	e17ffd17 	ldw	r5,-12(fp)
   151a4:	e1bffe17 	ldw	r6,-8(fp)
   151a8:	00154140 	call	15414 <open>
   151ac:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   151b0:	e0bffa17 	ldw	r2,-24(fp)
   151b4:	10002216 	blt	r2,zero,15240 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   151b8:	04020034 	movhi	r16,2048
   151bc:	84023604 	addi	r16,r16,2264
   151c0:	e0bffa17 	ldw	r2,-24(fp)
   151c4:	1009883a 	mov	r4,r2
   151c8:	01400304 	movi	r5,12
   151cc:	00121d80 	call	121d8 <__mulsi3>
   151d0:	8085883a 	add	r2,r16,r2
   151d4:	10c00017 	ldw	r3,0(r2)
   151d8:	e0bffb17 	ldw	r2,-20(fp)
   151dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   151e0:	04020034 	movhi	r16,2048
   151e4:	84023604 	addi	r16,r16,2264
   151e8:	e0bffa17 	ldw	r2,-24(fp)
   151ec:	1009883a 	mov	r4,r2
   151f0:	01400304 	movi	r5,12
   151f4:	00121d80 	call	121d8 <__mulsi3>
   151f8:	8085883a 	add	r2,r16,r2
   151fc:	10800104 	addi	r2,r2,4
   15200:	10c00017 	ldw	r3,0(r2)
   15204:	e0bffb17 	ldw	r2,-20(fp)
   15208:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1520c:	04020034 	movhi	r16,2048
   15210:	84023604 	addi	r16,r16,2264
   15214:	e0bffa17 	ldw	r2,-24(fp)
   15218:	1009883a 	mov	r4,r2
   1521c:	01400304 	movi	r5,12
   15220:	00121d80 	call	121d8 <__mulsi3>
   15224:	8085883a 	add	r2,r16,r2
   15228:	10800204 	addi	r2,r2,8
   1522c:	10c00017 	ldw	r3,0(r2)
   15230:	e0bffb17 	ldw	r2,-20(fp)
   15234:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15238:	e13ffa17 	ldw	r4,-24(fp)
   1523c:	00155740 	call	15574 <alt_release_fd>
  }
} 
   15240:	e6ffff04 	addi	sp,fp,-4
   15244:	dfc00217 	ldw	ra,8(sp)
   15248:	df000117 	ldw	fp,4(sp)
   1524c:	dc000017 	ldw	r16,0(sp)
   15250:	dec00304 	addi	sp,sp,12
   15254:	f800283a 	ret

00015258 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15258:	defffb04 	addi	sp,sp,-20
   1525c:	dfc00415 	stw	ra,16(sp)
   15260:	df000315 	stw	fp,12(sp)
   15264:	df000304 	addi	fp,sp,12
   15268:	e13ffd15 	stw	r4,-12(fp)
   1526c:	e17ffe15 	stw	r5,-8(fp)
   15270:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15274:	01020034 	movhi	r4,2048
   15278:	21023904 	addi	r4,r4,2276
   1527c:	e17ffd17 	ldw	r5,-12(fp)
   15280:	01800044 	movi	r6,1
   15284:	01c07fc4 	movi	r7,511
   15288:	00151780 	call	15178 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1528c:	01020034 	movhi	r4,2048
   15290:	21023604 	addi	r4,r4,2264
   15294:	e17ffe17 	ldw	r5,-8(fp)
   15298:	000d883a 	mov	r6,zero
   1529c:	01c07fc4 	movi	r7,511
   152a0:	00151780 	call	15178 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   152a4:	01020034 	movhi	r4,2048
   152a8:	21023c04 	addi	r4,r4,2288
   152ac:	e17fff17 	ldw	r5,-4(fp)
   152b0:	01800044 	movi	r6,1
   152b4:	01c07fc4 	movi	r7,511
   152b8:	00151780 	call	15178 <alt_open_fd>
}  
   152bc:	e037883a 	mov	sp,fp
   152c0:	dfc00117 	ldw	ra,4(sp)
   152c4:	df000017 	ldw	fp,0(sp)
   152c8:	dec00204 	addi	sp,sp,8
   152cc:	f800283a 	ret

000152d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   152d0:	defffe04 	addi	sp,sp,-8
   152d4:	dfc00115 	stw	ra,4(sp)
   152d8:	df000015 	stw	fp,0(sp)
   152dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   152e0:	00820034 	movhi	r2,2048
   152e4:	1082ae04 	addi	r2,r2,2744
   152e8:	10800017 	ldw	r2,0(r2)
   152ec:	10000526 	beq	r2,zero,15304 <alt_get_errno+0x34>
   152f0:	00820034 	movhi	r2,2048
   152f4:	1082ae04 	addi	r2,r2,2744
   152f8:	10800017 	ldw	r2,0(r2)
   152fc:	103ee83a 	callr	r2
   15300:	00000206 	br	1530c <alt_get_errno+0x3c>
   15304:	00820034 	movhi	r2,2048
   15308:	1082b704 	addi	r2,r2,2780
}
   1530c:	e037883a 	mov	sp,fp
   15310:	dfc00117 	ldw	ra,4(sp)
   15314:	df000017 	ldw	fp,0(sp)
   15318:	dec00204 	addi	sp,sp,8
   1531c:	f800283a 	ret

00015320 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15320:	defffb04 	addi	sp,sp,-20
   15324:	dfc00415 	stw	ra,16(sp)
   15328:	df000315 	stw	fp,12(sp)
   1532c:	dc000215 	stw	r16,8(sp)
   15330:	df000304 	addi	fp,sp,12
   15334:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15338:	e0bffe17 	ldw	r2,-8(fp)
   1533c:	10800217 	ldw	r2,8(r2)
   15340:	10d00034 	orhi	r3,r2,16384
   15344:	e0bffe17 	ldw	r2,-8(fp)
   15348:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1534c:	e03ffd15 	stw	zero,-12(fp)
   15350:	00002306 	br	153e0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15354:	04020034 	movhi	r16,2048
   15358:	84023604 	addi	r16,r16,2264
   1535c:	e0bffd17 	ldw	r2,-12(fp)
   15360:	1009883a 	mov	r4,r2
   15364:	01400304 	movi	r5,12
   15368:	00121d80 	call	121d8 <__mulsi3>
   1536c:	8085883a 	add	r2,r16,r2
   15370:	10c00017 	ldw	r3,0(r2)
   15374:	e0bffe17 	ldw	r2,-8(fp)
   15378:	10800017 	ldw	r2,0(r2)
   1537c:	1880151e 	bne	r3,r2,153d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15380:	04020034 	movhi	r16,2048
   15384:	84023604 	addi	r16,r16,2264
   15388:	e0bffd17 	ldw	r2,-12(fp)
   1538c:	1009883a 	mov	r4,r2
   15390:	01400304 	movi	r5,12
   15394:	00121d80 	call	121d8 <__mulsi3>
   15398:	8085883a 	add	r2,r16,r2
   1539c:	10800204 	addi	r2,r2,8
   153a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   153a4:	10000b0e 	bge	r2,zero,153d4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   153a8:	e13ffd17 	ldw	r4,-12(fp)
   153ac:	01400304 	movi	r5,12
   153b0:	00121d80 	call	121d8 <__mulsi3>
   153b4:	1007883a 	mov	r3,r2
   153b8:	00820034 	movhi	r2,2048
   153bc:	10823604 	addi	r2,r2,2264
   153c0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   153c4:	e0bffe17 	ldw	r2,-8(fp)
   153c8:	18800226 	beq	r3,r2,153d4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   153cc:	00bffcc4 	movi	r2,-13
   153d0:	00000a06 	br	153fc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   153d4:	e0bffd17 	ldw	r2,-12(fp)
   153d8:	10800044 	addi	r2,r2,1
   153dc:	e0bffd15 	stw	r2,-12(fp)
   153e0:	00820034 	movhi	r2,2048
   153e4:	1082ad04 	addi	r2,r2,2740
   153e8:	10800017 	ldw	r2,0(r2)
   153ec:	1007883a 	mov	r3,r2
   153f0:	e0bffd17 	ldw	r2,-12(fp)
   153f4:	18bfd72e 	bgeu	r3,r2,15354 <__alt_data_end+0xf4015354>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   153f8:	0005883a 	mov	r2,zero
}
   153fc:	e6ffff04 	addi	sp,fp,-4
   15400:	dfc00217 	ldw	ra,8(sp)
   15404:	df000117 	ldw	fp,4(sp)
   15408:	dc000017 	ldw	r16,0(sp)
   1540c:	dec00304 	addi	sp,sp,12
   15410:	f800283a 	ret

00015414 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15414:	defff604 	addi	sp,sp,-40
   15418:	dfc00915 	stw	ra,36(sp)
   1541c:	df000815 	stw	fp,32(sp)
   15420:	df000804 	addi	fp,sp,32
   15424:	e13ffd15 	stw	r4,-12(fp)
   15428:	e17ffe15 	stw	r5,-8(fp)
   1542c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15430:	00bfffc4 	movi	r2,-1
   15434:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15438:	00bffb44 	movi	r2,-19
   1543c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15440:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15444:	e13ffd17 	ldw	r4,-12(fp)
   15448:	01420034 	movhi	r5,2048
   1544c:	2942ab04 	addi	r5,r5,2732
   15450:	00150cc0 	call	150cc <alt_find_dev>
   15454:	e0bff815 	stw	r2,-32(fp)
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	1000051e 	bne	r2,zero,15474 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15460:	e13ffd17 	ldw	r4,-12(fp)
   15464:	00156140 	call	15614 <alt_find_file>
   15468:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1546c:	00800044 	movi	r2,1
   15470:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15474:	e0bff817 	ldw	r2,-32(fp)
   15478:	10002b26 	beq	r2,zero,15528 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1547c:	e13ff817 	ldw	r4,-32(fp)
   15480:	00157280 	call	15728 <alt_get_fd>
   15484:	e0bff915 	stw	r2,-28(fp)
   15488:	e0bff917 	ldw	r2,-28(fp)
   1548c:	1000030e 	bge	r2,zero,1549c <open+0x88>
    {
      status = index;
   15490:	e0bff917 	ldw	r2,-28(fp)
   15494:	e0bffa15 	stw	r2,-24(fp)
   15498:	00002506 	br	15530 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1549c:	e13ff917 	ldw	r4,-28(fp)
   154a0:	01400304 	movi	r5,12
   154a4:	00121d80 	call	121d8 <__mulsi3>
   154a8:	1007883a 	mov	r3,r2
   154ac:	00820034 	movhi	r2,2048
   154b0:	10823604 	addi	r2,r2,2264
   154b4:	1885883a 	add	r2,r3,r2
   154b8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   154bc:	e0fffe17 	ldw	r3,-8(fp)
   154c0:	00900034 	movhi	r2,16384
   154c4:	10bfffc4 	addi	r2,r2,-1
   154c8:	1886703a 	and	r3,r3,r2
   154cc:	e0bffc17 	ldw	r2,-16(fp)
   154d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   154d4:	e0bffb17 	ldw	r2,-20(fp)
   154d8:	1000051e 	bne	r2,zero,154f0 <open+0xdc>
   154dc:	e13ffc17 	ldw	r4,-16(fp)
   154e0:	00153200 	call	15320 <alt_file_locked>
   154e4:	e0bffa15 	stw	r2,-24(fp)
   154e8:	e0bffa17 	ldw	r2,-24(fp)
   154ec:	10001016 	blt	r2,zero,15530 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   154f0:	e0bff817 	ldw	r2,-32(fp)
   154f4:	10800317 	ldw	r2,12(r2)
   154f8:	10000826 	beq	r2,zero,1551c <open+0x108>
   154fc:	e0bff817 	ldw	r2,-32(fp)
   15500:	10800317 	ldw	r2,12(r2)
   15504:	e13ffc17 	ldw	r4,-16(fp)
   15508:	e17ffd17 	ldw	r5,-12(fp)
   1550c:	e1bffe17 	ldw	r6,-8(fp)
   15510:	e1ffff17 	ldw	r7,-4(fp)
   15514:	103ee83a 	callr	r2
   15518:	00000106 	br	15520 <open+0x10c>
   1551c:	0005883a 	mov	r2,zero
   15520:	e0bffa15 	stw	r2,-24(fp)
   15524:	00000206 	br	15530 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15528:	00bffb44 	movi	r2,-19
   1552c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15530:	e0bffa17 	ldw	r2,-24(fp)
   15534:	1000090e 	bge	r2,zero,1555c <open+0x148>
  {
    alt_release_fd (index);  
   15538:	e13ff917 	ldw	r4,-28(fp)
   1553c:	00155740 	call	15574 <alt_release_fd>
    ALT_ERRNO = -status;
   15540:	00152d00 	call	152d0 <alt_get_errno>
   15544:	1007883a 	mov	r3,r2
   15548:	e0bffa17 	ldw	r2,-24(fp)
   1554c:	0085c83a 	sub	r2,zero,r2
   15550:	18800015 	stw	r2,0(r3)
    return -1;
   15554:	00bfffc4 	movi	r2,-1
   15558:	00000106 	br	15560 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   1555c:	e0bff917 	ldw	r2,-28(fp)
}
   15560:	e037883a 	mov	sp,fp
   15564:	dfc00117 	ldw	ra,4(sp)
   15568:	df000017 	ldw	fp,0(sp)
   1556c:	dec00204 	addi	sp,sp,8
   15570:	f800283a 	ret

00015574 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   15574:	defffc04 	addi	sp,sp,-16
   15578:	dfc00315 	stw	ra,12(sp)
   1557c:	df000215 	stw	fp,8(sp)
   15580:	dc000115 	stw	r16,4(sp)
   15584:	df000204 	addi	fp,sp,8
   15588:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1558c:	e0bffe17 	ldw	r2,-8(fp)
   15590:	108000d0 	cmplti	r2,r2,3
   15594:	1000111e 	bne	r2,zero,155dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   15598:	04020034 	movhi	r16,2048
   1559c:	84023604 	addi	r16,r16,2264
   155a0:	e0bffe17 	ldw	r2,-8(fp)
   155a4:	1009883a 	mov	r4,r2
   155a8:	01400304 	movi	r5,12
   155ac:	00121d80 	call	121d8 <__mulsi3>
   155b0:	8085883a 	add	r2,r16,r2
   155b4:	10800204 	addi	r2,r2,8
   155b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   155bc:	04020034 	movhi	r16,2048
   155c0:	84023604 	addi	r16,r16,2264
   155c4:	e0bffe17 	ldw	r2,-8(fp)
   155c8:	1009883a 	mov	r4,r2
   155cc:	01400304 	movi	r5,12
   155d0:	00121d80 	call	121d8 <__mulsi3>
   155d4:	8085883a 	add	r2,r16,r2
   155d8:	10000015 	stw	zero,0(r2)
  }
}
   155dc:	e6ffff04 	addi	sp,fp,-4
   155e0:	dfc00217 	ldw	ra,8(sp)
   155e4:	df000117 	ldw	fp,4(sp)
   155e8:	dc000017 	ldw	r16,0(sp)
   155ec:	dec00304 	addi	sp,sp,12
   155f0:	f800283a 	ret

000155f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   155f4:	deffff04 	addi	sp,sp,-4
   155f8:	df000015 	stw	fp,0(sp)
   155fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15600:	000170fa 	wrctl	ienable,zero
}
   15604:	e037883a 	mov	sp,fp
   15608:	df000017 	ldw	fp,0(sp)
   1560c:	dec00104 	addi	sp,sp,4
   15610:	f800283a 	ret

00015614 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15614:	defffb04 	addi	sp,sp,-20
   15618:	dfc00415 	stw	ra,16(sp)
   1561c:	df000315 	stw	fp,12(sp)
   15620:	df000304 	addi	fp,sp,12
   15624:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15628:	00820034 	movhi	r2,2048
   1562c:	1082a904 	addi	r2,r2,2724
   15630:	10800017 	ldw	r2,0(r2)
   15634:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15638:	00003106 	br	15700 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   1563c:	e0bffd17 	ldw	r2,-12(fp)
   15640:	10800217 	ldw	r2,8(r2)
   15644:	1009883a 	mov	r4,r2
   15648:	00132b00 	call	132b0 <strlen>
   1564c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15650:	e0bffd17 	ldw	r2,-12(fp)
   15654:	10c00217 	ldw	r3,8(r2)
   15658:	e0bffe17 	ldw	r2,-8(fp)
   1565c:	10bfffc4 	addi	r2,r2,-1
   15660:	1885883a 	add	r2,r3,r2
   15664:	10800003 	ldbu	r2,0(r2)
   15668:	10803fcc 	andi	r2,r2,255
   1566c:	1080201c 	xori	r2,r2,128
   15670:	10bfe004 	addi	r2,r2,-128
   15674:	10800bd8 	cmpnei	r2,r2,47
   15678:	1000031e 	bne	r2,zero,15688 <alt_find_file+0x74>
    {
      len -= 1;
   1567c:	e0bffe17 	ldw	r2,-8(fp)
   15680:	10bfffc4 	addi	r2,r2,-1
   15684:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15688:	e0bffe17 	ldw	r2,-8(fp)
   1568c:	e0ffff17 	ldw	r3,-4(fp)
   15690:	1885883a 	add	r2,r3,r2
   15694:	10800003 	ldbu	r2,0(r2)
   15698:	10803fcc 	andi	r2,r2,255
   1569c:	1080201c 	xori	r2,r2,128
   156a0:	10bfe004 	addi	r2,r2,-128
   156a4:	10800be0 	cmpeqi	r2,r2,47
   156a8:	1000081e 	bne	r2,zero,156cc <alt_find_file+0xb8>
   156ac:	e0bffe17 	ldw	r2,-8(fp)
   156b0:	e0ffff17 	ldw	r3,-4(fp)
   156b4:	1885883a 	add	r2,r3,r2
   156b8:	10800003 	ldbu	r2,0(r2)
   156bc:	10803fcc 	andi	r2,r2,255
   156c0:	1080201c 	xori	r2,r2,128
   156c4:	10bfe004 	addi	r2,r2,-128
   156c8:	10000a1e 	bne	r2,zero,156f4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   156cc:	e0bffd17 	ldw	r2,-12(fp)
   156d0:	10c00217 	ldw	r3,8(r2)
   156d4:	e0bffe17 	ldw	r2,-8(fp)
   156d8:	1809883a 	mov	r4,r3
   156dc:	e17fff17 	ldw	r5,-4(fp)
   156e0:	100d883a 	mov	r6,r2
   156e4:	00158300 	call	15830 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   156e8:	1000021e 	bne	r2,zero,156f4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   156ec:	e0bffd17 	ldw	r2,-12(fp)
   156f0:	00000806 	br	15714 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   156f4:	e0bffd17 	ldw	r2,-12(fp)
   156f8:	10800017 	ldw	r2,0(r2)
   156fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15700:	e0fffd17 	ldw	r3,-12(fp)
   15704:	00820034 	movhi	r2,2048
   15708:	1082a904 	addi	r2,r2,2724
   1570c:	18bfcb1e 	bne	r3,r2,1563c <__alt_data_end+0xf401563c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15710:	0005883a 	mov	r2,zero
}
   15714:	e037883a 	mov	sp,fp
   15718:	dfc00117 	ldw	ra,4(sp)
   1571c:	df000017 	ldw	fp,0(sp)
   15720:	dec00204 	addi	sp,sp,8
   15724:	f800283a 	ret

00015728 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15728:	defffa04 	addi	sp,sp,-24
   1572c:	dfc00515 	stw	ra,20(sp)
   15730:	df000415 	stw	fp,16(sp)
   15734:	dc000315 	stw	r16,12(sp)
   15738:	df000404 	addi	fp,sp,16
   1573c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   15740:	00bffa04 	movi	r2,-24
   15744:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15748:	e03ffc15 	stw	zero,-16(fp)
   1574c:	00002106 	br	157d4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   15750:	04020034 	movhi	r16,2048
   15754:	84023604 	addi	r16,r16,2264
   15758:	e0bffc17 	ldw	r2,-16(fp)
   1575c:	1009883a 	mov	r4,r2
   15760:	01400304 	movi	r5,12
   15764:	00121d80 	call	121d8 <__mulsi3>
   15768:	8085883a 	add	r2,r16,r2
   1576c:	10800017 	ldw	r2,0(r2)
   15770:	1000151e 	bne	r2,zero,157c8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   15774:	04020034 	movhi	r16,2048
   15778:	84023604 	addi	r16,r16,2264
   1577c:	e0bffc17 	ldw	r2,-16(fp)
   15780:	1009883a 	mov	r4,r2
   15784:	01400304 	movi	r5,12
   15788:	00121d80 	call	121d8 <__mulsi3>
   1578c:	8085883a 	add	r2,r16,r2
   15790:	e0fffe17 	ldw	r3,-8(fp)
   15794:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15798:	00820034 	movhi	r2,2048
   1579c:	1082ad04 	addi	r2,r2,2740
   157a0:	10c00017 	ldw	r3,0(r2)
   157a4:	e0bffc17 	ldw	r2,-16(fp)
   157a8:	1880040e 	bge	r3,r2,157bc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   157ac:	00820034 	movhi	r2,2048
   157b0:	1082ad04 	addi	r2,r2,2740
   157b4:	e0fffc17 	ldw	r3,-16(fp)
   157b8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   157bc:	e0bffc17 	ldw	r2,-16(fp)
   157c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   157c4:	00000606 	br	157e0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   157c8:	e0bffc17 	ldw	r2,-16(fp)
   157cc:	10800044 	addi	r2,r2,1
   157d0:	e0bffc15 	stw	r2,-16(fp)
   157d4:	e0bffc17 	ldw	r2,-16(fp)
   157d8:	10800810 	cmplti	r2,r2,32
   157dc:	103fdc1e 	bne	r2,zero,15750 <__alt_data_end+0xf4015750>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   157e0:	e0bffd17 	ldw	r2,-12(fp)
}
   157e4:	e6ffff04 	addi	sp,fp,-4
   157e8:	dfc00217 	ldw	ra,8(sp)
   157ec:	df000117 	ldw	fp,4(sp)
   157f0:	dc000017 	ldw	r16,0(sp)
   157f4:	dec00304 	addi	sp,sp,12
   157f8:	f800283a 	ret

000157fc <atexit>:
   157fc:	200b883a 	mov	r5,r4
   15800:	000d883a 	mov	r6,zero
   15804:	0009883a 	mov	r4,zero
   15808:	000f883a 	mov	r7,zero
   1580c:	00158601 	jmpi	15860 <__register_exitproc>

00015810 <exit>:
   15810:	defffe04 	addi	sp,sp,-8
   15814:	000b883a 	mov	r5,zero
   15818:	dc000015 	stw	r16,0(sp)
   1581c:	dfc00115 	stw	ra,4(sp)
   15820:	2021883a 	mov	r16,r4
   15824:	00159a40 	call	159a4 <__call_exitprocs>
   15828:	8009883a 	mov	r4,r16
   1582c:	0013f500 	call	13f50 <_exit>

00015830 <memcmp>:
   15830:	218d883a 	add	r6,r4,r6
   15834:	21800826 	beq	r4,r6,15858 <memcmp+0x28>
   15838:	20800003 	ldbu	r2,0(r4)
   1583c:	28c00003 	ldbu	r3,0(r5)
   15840:	10c00226 	beq	r2,r3,1584c <memcmp+0x1c>
   15844:	10c5c83a 	sub	r2,r2,r3
   15848:	f800283a 	ret
   1584c:	21000044 	addi	r4,r4,1
   15850:	29400044 	addi	r5,r5,1
   15854:	003ff706 	br	15834 <__alt_data_end+0xf4015834>
   15858:	0005883a 	mov	r2,zero
   1585c:	f800283a 	ret

00015860 <__register_exitproc>:
   15860:	00820034 	movhi	r2,2048
   15864:	defff904 	addi	sp,sp,-28
   15868:	1082a604 	addi	r2,r2,2712
   1586c:	dd400515 	stw	r21,20(sp)
   15870:	15400017 	ldw	r21,0(r2)
   15874:	dc000015 	stw	r16,0(sp)
   15878:	dd000415 	stw	r20,16(sp)
   1587c:	ac000c17 	ldw	r16,48(r21)
   15880:	dcc00315 	stw	r19,12(sp)
   15884:	dc800215 	stw	r18,8(sp)
   15888:	dc400115 	stw	r17,4(sp)
   1588c:	dfc00615 	stw	ra,24(sp)
   15890:	2025883a 	mov	r18,r4
   15894:	2823883a 	mov	r17,r5
   15898:	3029883a 	mov	r20,r6
   1589c:	3827883a 	mov	r19,r7
   158a0:	8000021e 	bne	r16,zero,158ac <__register_exitproc+0x4c>
   158a4:	ac000d04 	addi	r16,r21,52
   158a8:	ac000c15 	stw	r16,48(r21)
   158ac:	80800117 	ldw	r2,4(r16)
   158b0:	00c007c4 	movi	r3,31
   158b4:	18800d0e 	bge	r3,r2,158ec <__register_exitproc+0x8c>
   158b8:	00800074 	movhi	r2,1
   158bc:	1089ce04 	addi	r2,r2,10040
   158c0:	1000021e 	bne	r2,zero,158cc <__register_exitproc+0x6c>
   158c4:	00bfffc4 	movi	r2,-1
   158c8:	00002d06 	br	15980 <__register_exitproc+0x120>
   158cc:	01002304 	movi	r4,140
   158d0:	00127380 	call	12738 <malloc>
   158d4:	1021883a 	mov	r16,r2
   158d8:	103ffa26 	beq	r2,zero,158c4 <__alt_data_end+0xf40158c4>
   158dc:	10000115 	stw	zero,4(r2)
   158e0:	a8800c17 	ldw	r2,48(r21)
   158e4:	80800015 	stw	r2,0(r16)
   158e8:	ac000c15 	stw	r16,48(r21)
   158ec:	90001b26 	beq	r18,zero,1595c <__register_exitproc+0xfc>
   158f0:	80802217 	ldw	r2,136(r16)
   158f4:	1000091e 	bne	r2,zero,1591c <__register_exitproc+0xbc>
   158f8:	00800074 	movhi	r2,1
   158fc:	1089ce04 	addi	r2,r2,10040
   15900:	103ff026 	beq	r2,zero,158c4 <__alt_data_end+0xf40158c4>
   15904:	01004204 	movi	r4,264
   15908:	00127380 	call	12738 <malloc>
   1590c:	103fed26 	beq	r2,zero,158c4 <__alt_data_end+0xf40158c4>
   15910:	10004015 	stw	zero,256(r2)
   15914:	10004115 	stw	zero,260(r2)
   15918:	80802215 	stw	r2,136(r16)
   1591c:	81400117 	ldw	r5,4(r16)
   15920:	01000044 	movi	r4,1
   15924:	2947883a 	add	r3,r5,r5
   15928:	18c7883a 	add	r3,r3,r3
   1592c:	10c7883a 	add	r3,r2,r3
   15930:	1d000015 	stw	r20,0(r3)
   15934:	214a983a 	sll	r5,r4,r5
   15938:	11004017 	ldw	r4,256(r2)
   1593c:	2148b03a 	or	r4,r4,r5
   15940:	11004015 	stw	r4,256(r2)
   15944:	1cc02015 	stw	r19,128(r3)
   15948:	00c00084 	movi	r3,2
   1594c:	90c0031e 	bne	r18,r3,1595c <__register_exitproc+0xfc>
   15950:	10c04117 	ldw	r3,260(r2)
   15954:	194ab03a 	or	r5,r3,r5
   15958:	11404115 	stw	r5,260(r2)
   1595c:	80800117 	ldw	r2,4(r16)
   15960:	10c00044 	addi	r3,r2,1
   15964:	10800084 	addi	r2,r2,2
   15968:	1085883a 	add	r2,r2,r2
   1596c:	1085883a 	add	r2,r2,r2
   15970:	80c00115 	stw	r3,4(r16)
   15974:	80a1883a 	add	r16,r16,r2
   15978:	84400015 	stw	r17,0(r16)
   1597c:	0005883a 	mov	r2,zero
   15980:	dfc00617 	ldw	ra,24(sp)
   15984:	dd400517 	ldw	r21,20(sp)
   15988:	dd000417 	ldw	r20,16(sp)
   1598c:	dcc00317 	ldw	r19,12(sp)
   15990:	dc800217 	ldw	r18,8(sp)
   15994:	dc400117 	ldw	r17,4(sp)
   15998:	dc000017 	ldw	r16,0(sp)
   1599c:	dec00704 	addi	sp,sp,28
   159a0:	f800283a 	ret

000159a4 <__call_exitprocs>:
   159a4:	00820034 	movhi	r2,2048
   159a8:	1082a604 	addi	r2,r2,2712
   159ac:	10800017 	ldw	r2,0(r2)
   159b0:	defff304 	addi	sp,sp,-52
   159b4:	ddc00a15 	stw	r23,40(sp)
   159b8:	d8800015 	stw	r2,0(sp)
   159bc:	05c00074 	movhi	r23,1
   159c0:	10800c04 	addi	r2,r2,48
   159c4:	dc800515 	stw	r18,20(sp)
   159c8:	dfc00c15 	stw	ra,48(sp)
   159cc:	df000b15 	stw	fp,44(sp)
   159d0:	dd800915 	stw	r22,36(sp)
   159d4:	dd400815 	stw	r21,32(sp)
   159d8:	dd000715 	stw	r20,28(sp)
   159dc:	dcc00615 	stw	r19,24(sp)
   159e0:	dc400415 	stw	r17,16(sp)
   159e4:	dc000315 	stw	r16,12(sp)
   159e8:	d9000115 	stw	r4,4(sp)
   159ec:	2825883a 	mov	r18,r5
   159f0:	d8800215 	stw	r2,8(sp)
   159f4:	bdc9d304 	addi	r23,r23,10060
   159f8:	d8800017 	ldw	r2,0(sp)
   159fc:	dc400217 	ldw	r17,8(sp)
   15a00:	14c00c17 	ldw	r19,48(r2)
   15a04:	98004226 	beq	r19,zero,15b10 <__call_exitprocs+0x16c>
   15a08:	9c000117 	ldw	r16,4(r19)
   15a0c:	00900034 	movhi	r2,16384
   15a10:	10bfffc4 	addi	r2,r2,-1
   15a14:	9d002217 	ldw	r20,136(r19)
   15a18:	857fffc4 	addi	r21,r16,-1
   15a1c:	80a1883a 	add	r16,r16,r2
   15a20:	8421883a 	add	r16,r16,r16
   15a24:	8421883a 	add	r16,r16,r16
   15a28:	a42d883a 	add	r22,r20,r16
   15a2c:	84000204 	addi	r16,r16,8
   15a30:	9c21883a 	add	r16,r19,r16
   15a34:	a8002616 	blt	r21,zero,15ad0 <__call_exitprocs+0x12c>
   15a38:	90000326 	beq	r18,zero,15a48 <__call_exitprocs+0xa4>
   15a3c:	a0002026 	beq	r20,zero,15ac0 <__call_exitprocs+0x11c>
   15a40:	b1002017 	ldw	r4,128(r22)
   15a44:	24801e1e 	bne	r4,r18,15ac0 <__call_exitprocs+0x11c>
   15a48:	99000117 	ldw	r4,4(r19)
   15a4c:	82000017 	ldw	r8,0(r16)
   15a50:	213fffc4 	addi	r4,r4,-1
   15a54:	a900021e 	bne	r21,r4,15a60 <__call_exitprocs+0xbc>
   15a58:	9d400115 	stw	r21,4(r19)
   15a5c:	00000106 	br	15a64 <__call_exitprocs+0xc0>
   15a60:	80000015 	stw	zero,0(r16)
   15a64:	40001626 	beq	r8,zero,15ac0 <__call_exitprocs+0x11c>
   15a68:	9f000117 	ldw	fp,4(r19)
   15a6c:	a0000526 	beq	r20,zero,15a84 <__call_exitprocs+0xe0>
   15a70:	00800044 	movi	r2,1
   15a74:	1552983a 	sll	r9,r2,r21
   15a78:	a1404017 	ldw	r5,256(r20)
   15a7c:	494a703a 	and	r5,r9,r5
   15a80:	2800021e 	bne	r5,zero,15a8c <__call_exitprocs+0xe8>
   15a84:	403ee83a 	callr	r8
   15a88:	00000906 	br	15ab0 <__call_exitprocs+0x10c>
   15a8c:	a1004117 	ldw	r4,260(r20)
   15a90:	4908703a 	and	r4,r9,r4
   15a94:	2000041e 	bne	r4,zero,15aa8 <__call_exitprocs+0x104>
   15a98:	d9000117 	ldw	r4,4(sp)
   15a9c:	b1400017 	ldw	r5,0(r22)
   15aa0:	403ee83a 	callr	r8
   15aa4:	00000206 	br	15ab0 <__call_exitprocs+0x10c>
   15aa8:	b1000017 	ldw	r4,0(r22)
   15aac:	403ee83a 	callr	r8
   15ab0:	99000117 	ldw	r4,4(r19)
   15ab4:	e13fd01e 	bne	fp,r4,159f8 <__alt_data_end+0xf40159f8>
   15ab8:	89000017 	ldw	r4,0(r17)
   15abc:	24ffce1e 	bne	r4,r19,159f8 <__alt_data_end+0xf40159f8>
   15ac0:	ad7fffc4 	addi	r21,r21,-1
   15ac4:	b5bfff04 	addi	r22,r22,-4
   15ac8:	843fff04 	addi	r16,r16,-4
   15acc:	003fd906 	br	15a34 <__alt_data_end+0xf4015a34>
   15ad0:	b8000f26 	beq	r23,zero,15b10 <__call_exitprocs+0x16c>
   15ad4:	99000117 	ldw	r4,4(r19)
   15ad8:	20000a1e 	bne	r4,zero,15b04 <__call_exitprocs+0x160>
   15adc:	99000017 	ldw	r4,0(r19)
   15ae0:	20000826 	beq	r4,zero,15b04 <__call_exitprocs+0x160>
   15ae4:	89000015 	stw	r4,0(r17)
   15ae8:	a0000226 	beq	r20,zero,15af4 <__call_exitprocs+0x150>
   15aec:	a009883a 	mov	r4,r20
   15af0:	001274c0 	call	1274c <free>
   15af4:	9809883a 	mov	r4,r19
   15af8:	001274c0 	call	1274c <free>
   15afc:	8cc00017 	ldw	r19,0(r17)
   15b00:	003fc006 	br	15a04 <__alt_data_end+0xf4015a04>
   15b04:	9823883a 	mov	r17,r19
   15b08:	9cc00017 	ldw	r19,0(r19)
   15b0c:	003fbd06 	br	15a04 <__alt_data_end+0xf4015a04>
   15b10:	dfc00c17 	ldw	ra,48(sp)
   15b14:	df000b17 	ldw	fp,44(sp)
   15b18:	ddc00a17 	ldw	r23,40(sp)
   15b1c:	dd800917 	ldw	r22,36(sp)
   15b20:	dd400817 	ldw	r21,32(sp)
   15b24:	dd000717 	ldw	r20,28(sp)
   15b28:	dcc00617 	ldw	r19,24(sp)
   15b2c:	dc800517 	ldw	r18,20(sp)
   15b30:	dc400417 	ldw	r17,16(sp)
   15b34:	dc000317 	ldw	r16,12(sp)
   15b38:	dec00d04 	addi	sp,sp,52
   15b3c:	f800283a 	ret
   15b40:	0201ffff 	0x201ffff
   15b44:	883a0000 	call	883a000 <_gp+0x8315a8>
   15b48:	010d0bff 	0x10d0bff
   15b4c:	01010002 	0x1010002
	...
   15b58:	010d0bff 	0x10d0bff
   15b5c:	01010004 	movi	r4,1024
   15b60:	00000100 	call	10 <__alt_mem_sram_img-0xfff0>
   15b64:	00000000 	call	0 <__alt_mem_sram_img-0x10000>
   15b68:	01110bff 	0x1110bff
   15b6c:	01010004 	movi	r4,1024
   15b70:	7f000105 	stb	fp,4(r15)
   15b74:	007d0000 	call	7d000 <__ram_exceptions_end+0x5cfe0>
	...
