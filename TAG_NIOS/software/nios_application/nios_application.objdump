
nios_application.elf:     file format elf32-littlenios2
nios_application.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000a2e8 memsz 0x0000a2e8 flags r-x
    LOAD off    0x0000c000 vaddr 0x08000000 paddr 0x0002a308 align 2**12
         filesz 0x00000f5c memsz 0x00002064 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  0000cf5c  2**0
                  CONTENTS
  2 .text         0000a2e8  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a8  08000000  0002a308  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000009b4  080005a8  0002a8b0  0000c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001108  08000f5c  0002b264  0000cf5c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002b264  0002b264  0000cf5c  2**0
                  CONTENTS
  7 .sdram_controller 00000000  08002064  08002064  0000cf5c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000cf5c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b58  00000000  00000000  0000cf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017ece  00000000  00000000  0000dad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007222  00000000  00000000  000259a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008706  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022ac  00000000  00000000  000352d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000058c3  00000000  00000000  0003757c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000063c8  00000000  00000000  0003ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00043208  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000950  00000000  00000000  00043218  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00048134  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00048137  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00048143  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00048144  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00048145  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00048150  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0004815b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000f  00000000  00000000  00048166  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000010  00000000  00000000  00048175  2**0
                  CONTENTS, READONLY
 27 .jdi          00004576  00000000  00000000  00048185  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00066b18  00000000  00000000  0004c6fb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
08000000 l    d  .rodata	00000000 .rodata
080005a8 l    d  .rwdata	00000000 .rwdata
08000f5c l    d  .bss	00000000 .bss
0002b264 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08002064 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_application_bsp//obj/HAL/src/crt0.o
00020058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 BTUart.cpp
00000000 l    df *ABS*	00000000 SDCard.cpp
00000000 l    df *ABS*	00000000 WiFiUart.cpp
00000000 l    df *ABS*	00000000 bt_task.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 sd_task.cpp
00000000 l    df *ABS*	00000000 wifi_task.cpp
00000000 l    df *ABS*	00000000 eh_personality.cc
00020964 l     F .text	00000058 _ZL12read_sleb128PKhPl
000209bc l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00020a44 l     F .text	000000a0 _ZL21size_of_encoded_valueh
00020ae4 l     F .text	00000210 _ZL28read_encoded_value_with_basehjPKhPj
00020cf4 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00020d48 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00020df0 l     F .text	00000088 _ZL21base_of_encoded_valuehP15_Unwind_Context
00020e78 l     F .text	00000240 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
000210b8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00000000 l    df *ABS*	00000000 eh_globals.cc
08000f70 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000221f4 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
08000f7c l     O .bss	00000004 _ZL14emergency_used
080012d4 l     O .bss	00000800 _ZL16emergency_buffer
08000f78 l     O .bss	00000004 _ZL15dependents_used
080011d4 l     O .bss	00000100 _ZL17dependents_buffer
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0002260c l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
08000f80 l     O .bss	00000004 fc_static
00022724 l     F .text	000000c0 _Unwind_RaiseException_Phase2
000227e4 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000236d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08000bb0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00024230 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
000243b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00024530 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08000f40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000249e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024b38 l     F .text	00000038 alt_dev_reg
08000c90 l     O .rwdata	0000002c jtag_uart_0
08000cbc l     O .rwdata	0000002c bt_rs232_uart
08000ce8 l     O .rwdata	0000002c wifi_rs232_uart
08000d14 l     O .rwdata	0000002c sd_card_ic
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_close.c
00029538 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0002967c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000296a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00029900 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00029a58 l     F .text	00000050 alt_get_errno
00029aa8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00022454 g     F .text	00000044 __cxa_free_exception
08000fa8 g     O .bss	00000004 aux_status_register
000232a0 g     F .text	00000018 putchar
00022358 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00021cec g     F .text	00000018 _ZSt10unexpectedv
00024614 g     F .text	00000078 alt_main
000232b8 g     F .text	00000080 _puts_r
00022594 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000228a0 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002a8b0 g       *ABS*	00000000 __flash_rwdata_start
000222c8 g     F .text	00000084 __cxa_rethrow
00024f64 g     F .text	000001ac Check_for_Master_Boot_Record
0002282c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00021d28 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00020538 g     F .text	00000148 _Z7bt_taskv
00022890 g     F .text	00000010 .hidden _Unwind_GetIP
08002064 g       *ABS*	00000000 __alt_heap_start
00028da8 g     F .text	000001cc alt_up_sd_card_fclose
0002362c g     F .text	00000054 _kill_r
0002324c g     F .text	0000004c printf
00023400 g     F .text	0000007c _signal_r
08000018  w    O .rodata	00000010 _ZTV6BTUart
0002252c g     F .text	00000040 __cxa_free_dependent_exception
00021d4c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
08000380  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0002047c g     F .text	00000038 _ZN6SDCardD0Ev
000246ac g     F .text	00000020 __malloc_unlock
000293d4 g     F .text	00000090 alt_up_rs232_read_fd
00022594 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00020404 g     F .text	00000030 _ZN6SDCardC2Ev
0002217c g     F .text	00000020 _ZSt18uncaught_exceptionv
08000fcc g     O .bss	00000004 current_sector_modified
000225c4 g     F .text	00000020 __cxa_deleted_virtual
000203b8 g     F .text	0000004c _ZN6BTUart5flushEv
0002256c g     F .text	00000004 _ZNSt9exceptionD2Ev
0002797c g     F .text	000000c4 alt_up_sd_card_is_Present
00024cac g     F .text	0000004c Save_Modified_Sector
080004bc  w    O .rodata	00000014 _ZTVSt13bad_exception
00029d7c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
08000fc4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
000228dc g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
08000f90 g     O .bss	00000004 errno
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
00022ab8 g     F .text	00000074 .hidden _Unwind_Backtrace
08000f98 g     O .bss	00000004 alt_argv
08008ee8 g       *ABS*	00000000 _gp
00027f38 g     F .text	00000384 alt_up_sd_card_fopen
00027aac g     F .text	000000d0 alt_up_sd_card_find_first
08000fb8 g     O .bss	00000004 command_argument_register
00024390 g     F .text	00000020 getpid
000216ec g     F .text	00000234 __cxa_call_unexpected
00022010 g     F .text	00000008 __cxa_get_exception_ptr
08000d68 g     O .rwdata	00000180 alt_fd_list
08000ef0  w    O .rwdata	00000008 _ZTS6BTUart
00023298 g     F .text	00000008 _putchar_r
000229cc g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
000271e8 g     F .text	00000134 find_first_empty_record_in_root_directory
0002285c g     F .text	00000018 .hidden _Unwind_GetCFA
00021d04 g     F .text	00000014 _ZSt13set_terminatePFvvE
00029854 g     F .text	00000090 alt_find_dev
00022498 g     F .text	00000094 __cxa_allocate_dependent_exception
000219b0 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
000299e0 g     F .text	00000078 alt_io_redirect
00020404 g     F .text	00000030 _ZN6SDCardC1Ev
0002a308 g       *ABS*	00000000 __DTOR_END__
000219c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00029360 g     F .text	00000074 alt_up_rs232_read_data
00023338 g     F .text	00000014 puts
00026de0 g     F .text	000001b4 find_first_empty_cluster
000278bc g     F .text	000000c0 alt_up_sd_card_open_dev
00029034 g     F .text	000000e4 altera_avalon_jtag_uart_read
00022b44 g     F .text	00000014 malloc
00023210 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002434c g     F .text	00000008 .hidden __udivsi3
0002347c g     F .text	000000b4 _raise_r
08000f8c g     O .bss	00000004 __malloc_top_pad
00023680 g     F .text	00000004 _getpid_r
00021a78 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00023530 g     F .text	000000a8 __sigtramp_r
000260d8 g     F .text	000000b8 get_dir_divider_location
0002334c g     F .text	00000050 _sbrk_r
00025dac g     F .text	000000c0 filename_to_upper_case
080003f0  w    O .rodata	00000020 _ZTVSt9type_info
000282bc g     F .text	00000084 alt_up_sd_card_set_attributes
00025110 g     F .text	0000027c Read_File_Record_At_Offset
000204b4 g     F .text	00000058 _ZN6SDCard4openEPKc
00022574 g     F .text	0000000c _ZNKSt9exception4whatEv
0002028c g     F .text	00000070 _ZN6BTUart6read_mEPhi
08000f54 g     O .rwdata	00000004 alt_max_fd
000292dc g     F .text	00000044 alt_up_rs232_check_parity
00026968 g     F .text	00000478 find_file_in_directory
08000f88 g     O .bss	00000004 __malloc_max_sbrked_mem
00027a40 g     F .text	0000006c alt_up_sd_card_is_FAT16
080003b4  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00021a0c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00021c00 g     F .text	00000004 _ZdlPv
0002008c g     F .text	00000048 _ZN6BTUartD1Ev
08000f38 g     O .rwdata	00000004 _global_impure_ptr
0002642c g     F .text	0000053c get_home_directory_cluster_for_file
08002064 g       *ABS*	00000000 __bss_end
00022814 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00020434 g     F .text	00000048 _ZN6SDCardD2Ev
00022b2c g     F .text	00000018 abort
0002050c g     F .text	0000002c _ZN6SDCard12card_presentEv
08000fd0 g     O .bss	00000004 current_sector_index
000220cc g     F .text	000000b0 __cxa_end_catch
00022570 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00024e84 g     F .text	000000e0 mark_cluster
00021cc4 g     F .text	00000018 _ZSt9terminatev
08000d40 g     O .rwdata	00000028 alt_dev_null
0002731c g     F .text	00000188 convert_filename_to_name_extension
0002259c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0002005c g     F .text	00000030 _ZN6BTUartC2Ev
0002005c g     F .text	00000030 _ZN6BTUartC1Ev
08000324  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00029660 g     F .text	0000001c alt_dcache_flush_all
08000fa4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
08000f14  w    O .rwdata	00000008 _ZTISt9exception
00026f94 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
08000f5c g       *ABS*	00000000 __ram_rwdata_end
0002234c g     F .text	00000004 _ZNSt9type_infoD1Ev
08000f4c g     O .rwdata	00000008 alt_dev_list
0002259c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00024a38 g     F .text	00000100 write
00024180 g     F .text	00000058 _putc_r
08000fc8 g     O .bss	00000004 device_pointer
00022368 g     F .text	00000004 _ZNSt9type_infoD0Ev
080005a8 g       *ABS*	00000000 __ram_rodata_end
00029464 g     F .text	00000094 alt_up_rs232_write_fd
00024400 g     F .text	00000130 kill
08000f60 g     O .bss	00000002 att
00024354 g     F .text	00000008 .hidden __umodsi3
00022360 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00021d18 g     F .text	00000010 _ZSt13get_terminatev
08002064 g       *ABS*	00000000 end
00022aa0 g     F .text	00000018 .hidden _Unwind_DeleteException
08000f64 g     O .bss	00000004 i
08000028  w    O .rodata	00000010 _ZTV6SDCard
00021b30 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0002a308 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
00021938 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00029118 g     F .text	00000094 altera_avalon_jtag_uart_write
08000444  w    O .rodata	00000012 _ZTSSt13bad_exception
00023744 g     F .text	0000056c ___vfprintf_internal_r
00023df8 g     F .text	00000288 _free_r
000246cc g     F .text	00000228 alt_printf
0002a12c g     F .text	0000019c __call_exitprocs
0002008c g     F .text	00000048 _ZN6BTUartD2Ev
08000f30 g     O .rwdata	00000004 __malloc_sbrk_base
00020020 g     F .text	0000003c _start
08000f68 g     O .bss	00000004 pixel
080003e0  w    O .rodata	0000000d _ZTSSt9type_info
000225a4 g     F .text	00000020 __cxa_pure_virtual
000235ec g     F .text	0000001c signal
00024ba4 g     F .text	00000054 alt_sys_init
00029fe8 g     F .text	00000144 __register_exitproc
080005a8 g     O .rwdata	00000200 buffer
00021d90 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000292a0 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
08000ef8  w    O .rwdata	00000008 _ZTI6SDCard
000225e4 g     F .text	00000028 .hidden __mulsi3
080005a8 g       *ABS*	00000000 __ram_rwdata_start
000228fc g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
08000000 g       *ABS*	00000000 __ram_rodata_start
08001ad4 g     O .bss	00000028 __malloc_current_mallinfo
00022a10 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00020434 g     F .text	00000048 _ZN6SDCardD1Ev
080004e4  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0002234c g     F .text	00000004 _ZNSt9type_infoD2Ev
08000fa0 g     O .bss	00000004 initialized
000225a0 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00021f8c g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00028f74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00029eb0 g     F .text	000000d4 alt_get_fd
08001afc g     O .bss	00000014 search_data
08000f24  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00029fb8 g     F .text	00000030 memcmp
08002064 g       *ABS*	00000000 __alt_stack_base
00021d4c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00022a54 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
08001b10 g     O .bss	00000054 boot_sector_data
00022350 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
080007a8 g     O .rwdata	00000408 __malloc_av_
080004a8  w    O .rodata	00000014 _ZTVSt9exception
00022598 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00029204 g     F .text	0000005c alt_up_rs232_disable_read_interrupt
00029d9c g     F .text	00000114 alt_find_file
000296f8 g     F .text	000000a4 alt_dev_llist_insert
0002468c g     F .text	00000020 __malloc_lock
00024938 g     F .text	000000b0 sbrk
08000f5c g     O .bss	00000002 sd_fileh
08000354  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00022238 g     F .text	00000090 __cxa_throw
000228c0 g     F .text	00000010 .hidden _Unwind_SetIP
00024080 g     F .text	000000ac __sfvwrite_small_dev
08000f5c g       *ABS*	00000000 __bss_start
08000fd4 g     O .bss	00000200 data
000201d4 g     F .text	000000b8 _ZN6BTUart7write_sEh
000231f0 g     F .text	00000020 memset
00020680 g     F .text	00000044 main
08000f9c g     O .bss	00000004 alt_envp
08000f84 g     O .bss	00000004 __malloc_max_total_mem
00028fd4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00021920 g     F .text	0000000c __cxa_get_globals_fast
00028340 g     F .text	00000088 alt_up_sd_card_get_attributes
00024bf8 g     F .text	000000b4 Write_Sector_Data
00028758 g     F .text	00000650 alt_up_sd_card_write
0c000000 g       *ABS*	00000000 __alt_heap_limit
00020174 g     F .text	00000060 _ZN6BTUart6read_sEv
00022b6c g     F .text	00000684 _malloc_r
000200d4 g     F .text	00000038 _ZN6BTUartD0Ev
00022580 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
08000f58 g     O .rwdata	00000004 alt_errno
00023608 g     F .text	00000010 _init_signal
08000348  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000202fc g     F .text	00000074 _ZN6BTUart7write_mEPci
00022570 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0002412c g     F .text	00000054 putc
000206c4 g     F .text	000002a0 _Z7sd_taskv
0002429c g     F .text	00000054 .hidden __divsi3
00023cd4 g     F .text	00000124 _malloc_trim_r
0002a308 g       *ABS*	00000000 __CTOR_END__
08000fac g     O .bss	00000004 status_register
00023684 g     F .text	00000038 strcmp
08000fb4 g     O .bss	00000004 command_register
0002a308 g       *ABS*	00000000 __flash_rodata_start
080004d0  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0002a308 g       *ABS*	00000000 __DTOR_LIST__
000294f8 g     F .text	00000040 alt_up_rs232_open_dev
00024b70 g     F .text	00000034 alt_irq_init
00029cfc g     F .text	00000080 alt_release_fd
00024dd0 g     F .text	000000b4 get_cluster_flag
00021d5c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0002538c g     F .text	0000028c Write_File_Record_At_Offset
00029f84 g     F .text	00000014 atexit
000241d8 g     F .text	00000058 _write_r
000228f4 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0002219c g     F .text	00000058 __cxa_call_terminate
00025618 g     F .text	000006a8 Check_for_DOS_FAT
000274a4 g     F .text	000002d4 create_file
08000f3c g     O .rwdata	00000004 _impure_ptr
08000f1c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
08000fb0 g     O .bss	00000004 CSD_register_w0
08000f94 g     O .bss	00000004 alt_argc
000297f8 g     F .text	0000005c _do_dtors
08000ee8  w    O .rwdata	00000008 _ZTI6BTUart
00021d3c g     F .text	00000010 _ZSt14get_unexpectedv
000228e4 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
08000f44 g     O .rwdata	00000008 alt_fs_list
08000484  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00025e6c g     F .text	0000026c check_file_name_for_FAT16_compliance
08000fbc g     O .bss	00000004 buffer_memory
000291ac g     F .text	00000058 alt_up_rs232_enable_read_interrupt
000228d0 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00029320 g     F .text	00000040 alt_up_rs232_write_data
00022018 g     F .text	000000b4 __cxa_begin_catch
000219c8 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00021cdc g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
08000f6c g     O .bss	00000004 att3
00020020 g       *ABS*	00000000 __ram_exceptions_start
08000f5e g     O .bss	00000002 sd_fileh2
00022590 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
08000f00  w    O .rwdata	00000008 _ZTS6SDCard
08000f08 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000223b0 g     F .text	000000a4 __cxa_allocate_exception
08000fc0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
080003a8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
08000f5c g       *ABS*	00000000 _edata
08002064 g       *ABS*	00000000 _end
08001b64 g     O .bss	00000500 active_files
000211ec g     F .text	00000500 __gxx_personality_sj0
00020020 g       *ABS*	00000000 __ram_exceptions_end
00027778 g     F .text	00000144 copy_file_record_name_to_string
00025cc0 g     F .text	000000ec Look_for_FAT16
0002256c g     F .text	00000004 _ZNSt9exceptionD1Ev
08000f34 g     O .rwdata	00000004 __malloc_trim_threshold
00029f98 g     F .text	00000020 exit
00022874 g     F .text	0000001c .hidden _Unwind_SetGR
00027b7c g     F .text	000003bc alt_up_sd_card_find_next
00021ef0 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00021c04 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
000242f0 g     F .text	0000005c .hidden __modsi3
00024cf8 g     F .text	000000d8 Read_Sector_Data
0c000000 g       *ABS*	00000000 __alt_data_end
08000458  w    O .rodata	0000000c _ZTISt13bad_exception
0002435c g     F .text	00000034 _exit
000283c8 g     F .text	00000390 alt_up_sd_card_read
00022840 g     F .text	0000001c .hidden _Unwind_GetGR
0002192c g     F .text	0000000c __cxa_get_globals
08000f2c g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
000236bc g     F .text	0000001c strlen
0002339c g     F .text	00000064 _init_signal_r
08000f0c  w    O .rwdata	00000008 _ZTISt9type_info
00029b9c g     F .text	00000160 open
000248f4 g     F .text	00000044 alt_putchar
0002010c g     F .text	00000068 _ZN6BTUart4openEPKc
08000434  w    O .rodata	0000000d _ZTSSt9exception
0002258c g     F .text	00000004 _ZNSt9exceptionD0Ev
000298e4 g     F .text	0000001c alt_icache_flush_all
000228ec g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00023cb0 g     F .text	00000024 __vfprintf_internal
0002979c g     F .text	0000005c _do_ctors
00023618 g     F .text	00000014 __sigtramp
00020370 g     F .text	00000048 _ZN6BTUart10read_readyEv
00029260 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00029588 g     F .text	000000d8 close
08000464  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00024594 g     F .text	00000080 alt_load
0002236c g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00026190 g     F .text	0000029c match_file_record_to_name_ext
000235d8 g     F .text	00000014 raise
00022b58 g     F .text	00000014 free
000219d8 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20028:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
   2002c:	d6a3ba14 	ori	gp,gp,36584
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20030:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
   20034:	1083d714 	ori	r2,r2,3932

    movhi r3, %hi(__bss_end)
   20038:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
   2003c:	18c81914 	ori	r3,r3,8292

    beq r2, r3, 1f
   20040:	10c00326 	beq	r2,r3,20050 <_start+0x30>

0:
    stw zero, (r2)
   20044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2004c:	10fffd36 	bltu	r2,r3,20044 <__alt_data_end+0xf4020044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20050:	00245940 	call	24594 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20054:	00246140 	call	24614 <alt_main>

00020058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20058:	003fff06 	br	20058 <__alt_data_end+0xf4020058>

0002005c <_ZN6BTUartC1Ev>:
#include "BTUart.h"
#include "sys/alt_dev.h"
#include "altera_up_avalon_rs232.h"


BTUart::BTUart()
   2005c:	defffe04 	addi	sp,sp,-8
   20060:	df000115 	stw	fp,4(sp)
   20064:	df000104 	addi	fp,sp,4
   20068:	e13fff15 	stw	r4,-4(fp)
   2006c:	e0ffff17 	ldw	r3,-4(fp)
   20070:	00820034 	movhi	r2,2048
   20074:	10800804 	addi	r2,r2,32
   20078:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   2007c:	e037883a 	mov	sp,fp
   20080:	df000017 	ldw	fp,0(sp)
   20084:	dec00104 	addi	sp,sp,4
   20088:	f800283a 	ret

0002008c <_ZN6BTUartD1Ev>:


BTUart::~BTUart()
   2008c:	defffd04 	addi	sp,sp,-12
   20090:	dfc00215 	stw	ra,8(sp)
   20094:	df000115 	stw	fp,4(sp)
   20098:	df000104 	addi	fp,sp,4
   2009c:	e13fff15 	stw	r4,-4(fp)
   200a0:	e0ffff17 	ldw	r3,-4(fp)
   200a4:	00820034 	movhi	r2,2048
   200a8:	10800804 	addi	r2,r2,32
   200ac:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   200b0:	0005883a 	mov	r2,zero
   200b4:	10000226 	beq	r2,zero,200c0 <_ZN6BTUartD1Ev+0x34>
   200b8:	e13fff17 	ldw	r4,-4(fp)
   200bc:	0021c000 	call	21c00 <_ZdlPv>
   200c0:	e037883a 	mov	sp,fp
   200c4:	dfc00117 	ldw	ra,4(sp)
   200c8:	df000017 	ldw	fp,0(sp)
   200cc:	dec00204 	addi	sp,sp,8
   200d0:	f800283a 	ret

000200d4 <_ZN6BTUartD0Ev>:
{
    // TODO Auto-generated constructor stub
}


BTUart::~BTUart()
   200d4:	defffd04 	addi	sp,sp,-12
   200d8:	dfc00215 	stw	ra,8(sp)
   200dc:	df000115 	stw	fp,4(sp)
   200e0:	df000104 	addi	fp,sp,4
   200e4:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   200e8:	e13fff17 	ldw	r4,-4(fp)
   200ec:	002008c0 	call	2008c <_ZN6BTUartD1Ev>
   200f0:	e13fff17 	ldw	r4,-4(fp)
   200f4:	0021c000 	call	21c00 <_ZdlPv>
   200f8:	e037883a 	mov	sp,fp
   200fc:	dfc00117 	ldw	ra,4(sp)
   20100:	df000017 	ldw	fp,0(sp)
   20104:	dec00204 	addi	sp,sp,8
   20108:	f800283a 	ret

0002010c <_ZN6BTUart4openEPKc>:


int BTUart::open(const char *device_name)
{
   2010c:	defffc04 	addi	sp,sp,-16
   20110:	dfc00315 	stw	ra,12(sp)
   20114:	df000215 	stw	fp,8(sp)
   20118:	df000204 	addi	fp,sp,8
   2011c:	e13ffe15 	stw	r4,-8(fp)
   20120:	e17fff15 	stw	r5,-4(fp)
	RS232_DEV = alt_up_rs232_open_dev(device_name);
   20124:	e13fff17 	ldw	r4,-4(fp)
   20128:	00294f80 	call	294f8 <alt_up_rs232_open_dev>
   2012c:	1007883a 	mov	r3,r2
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	10c00115 	stw	r3,4(r2)

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20138:	e0bffe17 	ldw	r2,-8(fp)
   2013c:	10800117 	ldw	r2,4(r2)
   20140:	1009883a 	mov	r4,r2
   20144:	00291ac0 	call	291ac <alt_up_rs232_enable_read_interrupt>

    if (RS232_DEV == NULL) {
   20148:	e0bffe17 	ldw	r2,-8(fp)
   2014c:	10800117 	ldw	r2,4(r2)
   20150:	1000021e 	bne	r2,zero,2015c <_ZN6BTUart4openEPKc+0x50>
        return 0;
   20154:	0005883a 	mov	r2,zero
   20158:	00000106 	br	20160 <_ZN6BTUart4openEPKc+0x54>
    }
        
    return 1;
   2015c:	00800044 	movi	r2,1
}
   20160:	e037883a 	mov	sp,fp
   20164:	dfc00117 	ldw	ra,4(sp)
   20168:	df000017 	ldw	fp,0(sp)
   2016c:	dec00204 	addi	sp,sp,8
   20170:	f800283a 	ret

00020174 <_ZN6BTUart6read_sEv>:


unsigned char BTUart::read_s(void)
{
   20174:	defffc04 	addi	sp,sp,-16
   20178:	dfc00315 	stw	ra,12(sp)
   2017c:	df000215 	stw	fp,8(sp)
   20180:	df000204 	addi	fp,sp,8
   20184:	e13fff15 	stw	r4,-4(fp)
    while (!read_ready()) {}    // Wait for data to be available to read
   20188:	0001883a 	nop
   2018c:	e13fff17 	ldw	r4,-4(fp)
   20190:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   20194:	1005003a 	cmpeq	r2,r2,zero
   20198:	10803fcc 	andi	r2,r2,255
   2019c:	103ffb1e 	bne	r2,zero,2018c <__alt_data_end+0xf402018c>

    alt_u8 buffer;
    alt_u8 parity_error;

    alt_up_rs232_read_data(RS232_DEV, &buffer, &parity_error);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	10c00117 	ldw	r3,4(r2)
   201a8:	e0bffe44 	addi	r2,fp,-7
   201ac:	1809883a 	mov	r4,r3
   201b0:	e17ffe04 	addi	r5,fp,-8
   201b4:	100d883a 	mov	r6,r2
   201b8:	00293600 	call	29360 <alt_up_rs232_read_data>

    return (unsigned char) buffer;
   201bc:	e0bffe03 	ldbu	r2,-8(fp)
}
   201c0:	e037883a 	mov	sp,fp
   201c4:	dfc00117 	ldw	ra,4(sp)
   201c8:	df000017 	ldw	fp,0(sp)
   201cc:	dec00204 	addi	sp,sp,8
   201d0:	f800283a 	ret

000201d4 <_ZN6BTUart7write_sEh>:


int BTUart::write_s(alt_u8 data)
{
   201d4:	defffb04 	addi	sp,sp,-20
   201d8:	dfc00415 	stw	ra,16(sp)
   201dc:	df000315 	stw	fp,12(sp)
   201e0:	df000304 	addi	fp,sp,12
   201e4:	e13ffe15 	stw	r4,-8(fp)
   201e8:	2805883a 	mov	r2,r5
   201ec:	e0bfff05 	stb	r2,-4(fp)
    alt_up_rs232_disable_read_interrupt(RS232_DEV);
   201f0:	e0bffe17 	ldw	r2,-8(fp)
   201f4:	10800117 	ldw	r2,4(r2)
   201f8:	1009883a 	mov	r4,r2
   201fc:	00292040 	call	29204 <alt_up_rs232_disable_read_interrupt>

    int result = 0;
   20200:	e03ffd15 	stw	zero,-12(fp)
    WRITE_FIFO_SPACE = alt_up_rs232_get_available_space_in_write_FIFO(RS232_DEV);
   20204:	e0bffe17 	ldw	r2,-8(fp)
   20208:	10800117 	ldw	r2,4(r2)
   2020c:	1009883a 	mov	r4,r2
   20210:	00292a00 	call	292a0 <alt_up_rs232_get_available_space_in_write_FIFO>
   20214:	1007883a 	mov	r3,r2
   20218:	e0bffe17 	ldw	r2,-8(fp)
   2021c:	10c00215 	stw	r3,8(r2)

    if (WRITE_FIFO_SPACE >= WRITE_FIFO_EMPTY) {
   20220:	e0bffe17 	ldw	r2,-8(fp)
   20224:	10800217 	ldw	r2,8(r2)
   20228:	10802030 	cmpltui	r2,r2,128
   2022c:	10000d1e 	bne	r2,zero,20264 <_ZN6BTUart7write_sEh+0x90>
        alt_up_rs232_write_data(RS232_DEV, data);
   20230:	e0bffe17 	ldw	r2,-8(fp)
   20234:	10c00117 	ldw	r3,4(r2)
   20238:	e0bfff03 	ldbu	r2,-4(fp)
   2023c:	1809883a 	mov	r4,r3
   20240:	100b883a 	mov	r5,r2
   20244:	00293200 	call	29320 <alt_up_rs232_write_data>
        alt_printf("write %c to RS232 UART\n", data);
   20248:	e0bfff03 	ldbu	r2,-4(fp)
   2024c:	01020034 	movhi	r4,2048
   20250:	21000004 	addi	r4,r4,0
   20254:	100b883a 	mov	r5,r2
   20258:	00246cc0 	call	246cc <alt_printf>
        result = 1;
   2025c:	00800044 	movi	r2,1
   20260:	e0bffd15 	stw	r2,-12(fp)
    }

    // Enable the read interrupts for the RS232 UART core 
    alt_up_rs232_enable_read_interrupt(RS232_DEV);
   20264:	e0bffe17 	ldw	r2,-8(fp)
   20268:	10800117 	ldw	r2,4(r2)
   2026c:	1009883a 	mov	r4,r2
   20270:	00291ac0 	call	291ac <alt_up_rs232_enable_read_interrupt>
    return result;
   20274:	e0bffd17 	ldw	r2,-12(fp)
}
   20278:	e037883a 	mov	sp,fp
   2027c:	dfc00117 	ldw	ra,4(sp)
   20280:	df000017 	ldw	fp,0(sp)
   20284:	dec00204 	addi	sp,sp,8
   20288:	f800283a 	ret

0002028c <_ZN6BTUart6read_mEPhi>:


void BTUart::read_m(alt_u8 *buffer, int length)
{
   2028c:	defff904 	addi	sp,sp,-28
   20290:	dfc00615 	stw	ra,24(sp)
   20294:	df000515 	stw	fp,20(sp)
   20298:	dc000415 	stw	r16,16(sp)
   2029c:	df000504 	addi	fp,sp,20
   202a0:	e13ffc15 	stw	r4,-16(fp)
   202a4:	e17ffd15 	stw	r5,-12(fp)
   202a8:	e1bffe15 	stw	r6,-8(fp)
    int count;

    for (count = 0; count < length; count++) {
   202ac:	e03ffb15 	stw	zero,-20(fp)
   202b0:	00000906 	br	202d8 <_ZN6BTUart6read_mEPhi+0x4c>
		buffer[count] = read_s();
   202b4:	e0bffb17 	ldw	r2,-20(fp)
   202b8:	e0fffd17 	ldw	r3,-12(fp)
   202bc:	18a1883a 	add	r16,r3,r2
   202c0:	e13ffc17 	ldw	r4,-16(fp)
   202c4:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
   202c8:	80800005 	stb	r2,0(r16)

void BTUart::read_m(alt_u8 *buffer, int length)
{
    int count;

    for (count = 0; count < length; count++) {
   202cc:	e0bffb17 	ldw	r2,-20(fp)
   202d0:	10800044 	addi	r2,r2,1
   202d4:	e0bffb15 	stw	r2,-20(fp)
   202d8:	e0fffb17 	ldw	r3,-20(fp)
   202dc:	e0bffe17 	ldw	r2,-8(fp)
   202e0:	18bff416 	blt	r3,r2,202b4 <__alt_data_end+0xf40202b4>
		buffer[count] = read_s();
	}
}
   202e4:	e6ffff04 	addi	sp,fp,-4
   202e8:	dfc00217 	ldw	ra,8(sp)
   202ec:	df000117 	ldw	fp,4(sp)
   202f0:	dc000017 	ldw	r16,0(sp)
   202f4:	dec00304 	addi	sp,sp,12
   202f8:	f800283a 	ret

000202fc <_ZN6BTUart7write_mEPci>:


int BTUart::write_m(char data[], int length)
{
   202fc:	defffa04 	addi	sp,sp,-24
   20300:	dfc00515 	stw	ra,20(sp)
   20304:	df000415 	stw	fp,16(sp)
   20308:	df000404 	addi	fp,sp,16
   2030c:	e13ffd15 	stw	r4,-12(fp)
   20310:	e17ffe15 	stw	r5,-8(fp)
   20314:	e1bfff15 	stw	r6,-4(fp)
    int count;

	for (count = 0; count < length; count++) {
   20318:	e03ffc15 	stw	zero,-16(fp)
   2031c:	00000b06 	br	2034c <_ZN6BTUart7write_mEPci+0x50>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
   20320:	e0bffc17 	ldw	r2,-16(fp)
   20324:	e0fffe17 	ldw	r3,-8(fp)
   20328:	1885883a 	add	r2,r3,r2
   2032c:	10800003 	ldbu	r2,0(r2)
   20330:	10803fcc 	andi	r2,r2,255
   20334:	e13ffd17 	ldw	r4,-12(fp)
   20338:	100b883a 	mov	r5,r2
   2033c:	00201d40 	call	201d4 <_ZN6BTUart7write_sEh>

int BTUart::write_m(char data[], int length)
{
    int count;

	for (count = 0; count < length; count++) {
   20340:	e0bffc17 	ldw	r2,-16(fp)
   20344:	10800044 	addi	r2,r2,1
   20348:	e0bffc15 	stw	r2,-16(fp)
   2034c:	e0fffc17 	ldw	r3,-16(fp)
   20350:	e0bfff17 	ldw	r2,-4(fp)
   20354:	18bff216 	blt	r3,r2,20320 <__alt_data_end+0xf4020320>
        // printf("Write from m: %c\n", data[count]);
		write_s(data[count]);
	}
    return count;
   20358:	e0bffc17 	ldw	r2,-16(fp)
}
   2035c:	e037883a 	mov	sp,fp
   20360:	dfc00117 	ldw	ra,4(sp)
   20364:	df000017 	ldw	fp,0(sp)
   20368:	dec00204 	addi	sp,sp,8
   2036c:	f800283a 	ret

00020370 <_ZN6BTUart10read_readyEv>:


int BTUart::read_ready(void)
{
   20370:	defffc04 	addi	sp,sp,-16
   20374:	dfc00315 	stw	ra,12(sp)
   20378:	df000215 	stw	fp,8(sp)
   2037c:	df000204 	addi	fp,sp,8
   20380:	e13fff15 	stw	r4,-4(fp)
    alt_u16 read_fifo_used = alt_up_rs232_get_used_space_in_read_FIFO(RS232_DEV);
   20384:	e0bfff17 	ldw	r2,-4(fp)
   20388:	10800117 	ldw	r2,4(r2)
   2038c:	1009883a 	mov	r4,r2
   20390:	00292600 	call	29260 <alt_up_rs232_get_used_space_in_read_FIFO>
   20394:	e0bffe0d 	sth	r2,-8(fp)
    return (read_fifo_used > READ_FIFO_EMPTY);
   20398:	e0bffe0b 	ldhu	r2,-8(fp)
   2039c:	1004c03a 	cmpne	r2,r2,zero
   203a0:	10803fcc 	andi	r2,r2,255
}
   203a4:	e037883a 	mov	sp,fp
   203a8:	dfc00117 	ldw	ra,4(sp)
   203ac:	df000017 	ldw	fp,0(sp)
   203b0:	dec00204 	addi	sp,sp,8
   203b4:	f800283a 	ret

000203b8 <_ZN6BTUart5flushEv>:


void BTUart::flush(void)
{
   203b8:	defffd04 	addi	sp,sp,-12
   203bc:	dfc00215 	stw	ra,8(sp)
   203c0:	df000115 	stw	fp,4(sp)
   203c4:	df000104 	addi	fp,sp,4
   203c8:	e13fff15 	stw	r4,-4(fp)
    while (read_ready()) {
   203cc:	00000206 	br	203d8 <_ZN6BTUart5flushEv+0x20>
        // read unwanted char out of fifo receiver buffer
        read_s();
   203d0:	e13fff17 	ldw	r4,-4(fp)
   203d4:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
}


void BTUart::flush(void)
{
    while (read_ready()) {
   203d8:	e13fff17 	ldw	r4,-4(fp)
   203dc:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   203e0:	1004c03a 	cmpne	r2,r2,zero
   203e4:	10803fcc 	andi	r2,r2,255
   203e8:	103ff91e 	bne	r2,zero,203d0 <__alt_data_end+0xf40203d0>
        // read unwanted char out of fifo receiver buffer
        read_s();
    }
    return; // no more characters so return 
   203ec:	0001883a 	nop
   203f0:	e037883a 	mov	sp,fp
   203f4:	dfc00117 	ldw	ra,4(sp)
   203f8:	df000017 	ldw	fp,0(sp)
   203fc:	dec00204 	addi	sp,sp,8
   20400:	f800283a 	ret

00020404 <_ZN6SDCardC1Ev>:
#include "SDCard.h"
#include "sys/alt_dev.h"
#include "altera_up_sd_card_avalon_interface.h"


SDCard::SDCard()
   20404:	defffe04 	addi	sp,sp,-8
   20408:	df000115 	stw	fp,4(sp)
   2040c:	df000104 	addi	fp,sp,4
   20410:	e13fff15 	stw	r4,-4(fp)
   20414:	e0ffff17 	ldw	r3,-4(fp)
   20418:	00820034 	movhi	r2,2048
   2041c:	10800c04 	addi	r2,r2,48
   20420:	18800015 	stw	r2,0(r3)
{
    // TODO Auto-generated constructor stub
}
   20424:	e037883a 	mov	sp,fp
   20428:	df000017 	ldw	fp,0(sp)
   2042c:	dec00104 	addi	sp,sp,4
   20430:	f800283a 	ret

00020434 <_ZN6SDCardD1Ev>:


SDCard::~SDCard()
   20434:	defffd04 	addi	sp,sp,-12
   20438:	dfc00215 	stw	ra,8(sp)
   2043c:	df000115 	stw	fp,4(sp)
   20440:	df000104 	addi	fp,sp,4
   20444:	e13fff15 	stw	r4,-4(fp)
   20448:	e0ffff17 	ldw	r3,-4(fp)
   2044c:	00820034 	movhi	r2,2048
   20450:	10800c04 	addi	r2,r2,48
   20454:	18800015 	stw	r2,0(r3)
{
	// TODO Auto-generated destructor stub
}
   20458:	0005883a 	mov	r2,zero
   2045c:	10000226 	beq	r2,zero,20468 <_ZN6SDCardD1Ev+0x34>
   20460:	e13fff17 	ldw	r4,-4(fp)
   20464:	0021c000 	call	21c00 <_ZdlPv>
   20468:	e037883a 	mov	sp,fp
   2046c:	dfc00117 	ldw	ra,4(sp)
   20470:	df000017 	ldw	fp,0(sp)
   20474:	dec00204 	addi	sp,sp,8
   20478:	f800283a 	ret

0002047c <_ZN6SDCardD0Ev>:
{
    // TODO Auto-generated constructor stub
}


SDCard::~SDCard()
   2047c:	defffd04 	addi	sp,sp,-12
   20480:	dfc00215 	stw	ra,8(sp)
   20484:	df000115 	stw	fp,4(sp)
   20488:	df000104 	addi	fp,sp,4
   2048c:	e13fff15 	stw	r4,-4(fp)
{
	// TODO Auto-generated destructor stub
}
   20490:	e13fff17 	ldw	r4,-4(fp)
   20494:	00204340 	call	20434 <_ZN6SDCardD1Ev>
   20498:	e13fff17 	ldw	r4,-4(fp)
   2049c:	0021c000 	call	21c00 <_ZdlPv>
   204a0:	e037883a 	mov	sp,fp
   204a4:	dfc00117 	ldw	ra,4(sp)
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00204 	addi	sp,sp,8
   204b0:	f800283a 	ret

000204b4 <_ZN6SDCard4openEPKc>:


int SDCard::open(const char *device_name)
{
   204b4:	defffc04 	addi	sp,sp,-16
   204b8:	dfc00315 	stw	ra,12(sp)
   204bc:	df000215 	stw	fp,8(sp)
   204c0:	df000204 	addi	fp,sp,8
   204c4:	e13ffe15 	stw	r4,-8(fp)
   204c8:	e17fff15 	stw	r5,-4(fp)
	SDCARD_DEV = alt_up_sd_card_open_dev(device_name);
   204cc:	e13fff17 	ldw	r4,-4(fp)
   204d0:	00278bc0 	call	278bc <alt_up_sd_card_open_dev>
   204d4:	1007883a 	mov	r3,r2
   204d8:	e0bffe17 	ldw	r2,-8(fp)
   204dc:	10c00115 	stw	r3,4(r2)

    if (SDCARD_DEV == 0) {
   204e0:	e0bffe17 	ldw	r2,-8(fp)
   204e4:	10800117 	ldw	r2,4(r2)
   204e8:	1000021e 	bne	r2,zero,204f4 <_ZN6SDCard4openEPKc+0x40>
        return 0;
   204ec:	0005883a 	mov	r2,zero
   204f0:	00000106 	br	204f8 <_ZN6SDCard4openEPKc+0x44>
    }
        
    return 1;
   204f4:	00800044 	movi	r2,1
}
   204f8:	e037883a 	mov	sp,fp
   204fc:	dfc00117 	ldw	ra,4(sp)
   20500:	df000017 	ldw	fp,0(sp)
   20504:	dec00204 	addi	sp,sp,8
   20508:	f800283a 	ret

0002050c <_ZN6SDCard12card_presentEv>:


bool SDCard::card_present(void)
{
   2050c:	defffd04 	addi	sp,sp,-12
   20510:	dfc00215 	stw	ra,8(sp)
   20514:	df000115 	stw	fp,4(sp)
   20518:	df000104 	addi	fp,sp,4
   2051c:	e13fff15 	stw	r4,-4(fp)
    return alt_up_sd_card_is_Present();
   20520:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <_Z7bt_taskv>:
#include "tasks.h"

#define BT_UART_NAME (const char *)("/dev/bt_rs232_uart") // Qsys component name

int bt_task()
{
   20538:	deffe304 	addi	sp,sp,-116
   2053c:	dfc01c15 	stw	ra,112(sp)
   20540:	df001b15 	stw	fp,108(sp)
   20544:	ddc01a15 	stw	r23,104(sp)
   20548:	dd801915 	stw	r22,100(sp)
   2054c:	dd401815 	stw	r21,96(sp)
   20550:	dd001715 	stw	r20,92(sp)
   20554:	dcc01615 	stw	r19,88(sp)
   20558:	dc801515 	stw	r18,84(sp)
   2055c:	dc401415 	stw	r17,80(sp)
   20560:	dc001315 	stw	r16,76(sp)
   20564:	df001b04 	addi	fp,sp,108
   20568:	008000b4 	movhi	r2,2
   2056c:	10847b04 	addi	r2,r2,4588
   20570:	e0bff015 	stw	r2,-64(fp)
   20574:	008000f4 	movhi	r2,3
   20578:	10a8b204 	addi	r2,r2,-23864
   2057c:	e0bff115 	stw	r2,-60(fp)
   20580:	e0bff204 	addi	r2,fp,-56
   20584:	e0ffe504 	addi	r3,fp,-108
   20588:	10c00015 	stw	r3,0(r2)
   2058c:	00c000b4 	movhi	r3,2
   20590:	18c19404 	addi	r3,r3,1616
   20594:	10c00115 	stw	r3,4(r2)
   20598:	16c00215 	stw	sp,8(r2)
   2059c:	e0bfea04 	addi	r2,fp,-88
   205a0:	1009883a 	mov	r4,r2
   205a4:	00228140 	call	22814 <_Unwind_SjLj_Register>
  BTUart BT_UART;
   205a8:	e0ffe704 	addi	r3,fp,-100
   205ac:	00bfffc4 	movi	r2,-1
   205b0:	e0bfeb15 	stw	r2,-84(fp)
   205b4:	1809883a 	mov	r4,r3
   205b8:	002005c0 	call	2005c <_ZN6BTUartC1Ev>
  char c;

  int init_success = BT_UART.open(BT_UART_NAME);
   205bc:	e0bfe704 	addi	r2,fp,-100
   205c0:	1009883a 	mov	r4,r2
   205c4:	01420034 	movhi	r5,2048
   205c8:	00800044 	movi	r2,1
   205cc:	e0bfeb15 	stw	r2,-84(fp)
   205d0:	29400e04 	addi	r5,r5,56
   205d4:	002010c0 	call	2010c <_ZN6BTUart4openEPKc>
   205d8:	e0bfe515 	stw	r2,-108(fp)
  BT_UART.flush();
   205dc:	e0bfe704 	addi	r2,fp,-100
   205e0:	1009883a 	mov	r4,r2
   205e4:	00203b80 	call	203b8 <_ZN6BTUart5flushEv>

  if (init_success)
   205e8:	e0bfe517 	ldw	r2,-108(fp)
   205ec:	10000326 	beq	r2,zero,205fc <_Z7bt_taskv+0xc4>
    printf("INIT SUCCESS: RS232 UART port.\n");
   205f0:	01020034 	movhi	r4,2048
   205f4:	21001304 	addi	r4,r4,76
   205f8:	00233380 	call	23338 <puts>


  printf("START READING FROM UART FIFO ...\n");
   205fc:	01020034 	movhi	r4,2048
   20600:	00800044 	movi	r2,1
   20604:	e0bfeb15 	stw	r2,-84(fp)
   20608:	21001b04 	addi	r4,r4,108
   2060c:	00233380 	call	23338 <puts>

  while (1) {
    if (BT_UART.read_ready()) {
   20610:	e0ffe704 	addi	r3,fp,-100
   20614:	00800044 	movi	r2,1
   20618:	e0bfeb15 	stw	r2,-84(fp)
   2061c:	1809883a 	mov	r4,r3
   20620:	00203700 	call	20370 <_ZN6BTUart10read_readyEv>
   20624:	1004c03a 	cmpne	r2,r2,zero
   20628:	10803fcc 	andi	r2,r2,255
   2062c:	103ff826 	beq	r2,zero,20610 <__alt_data_end+0xf4020610>
      c = BT_UART.read_s();
   20630:	e0bfe704 	addi	r2,fp,-100
   20634:	1009883a 	mov	r4,r2
   20638:	00201740 	call	20174 <_ZN6BTUart6read_sEv>
   2063c:	e0bfe605 	stb	r2,-104(fp)
      printf("%c", c);
   20640:	e0bfe607 	ldb	r2,-104(fp)
   20644:	1009883a 	mov	r4,r2
   20648:	00232a00 	call	232a0 <putchar>
   2064c:	003ff006 	br	20610 <__alt_data_end+0xf4020610>
   20650:	e7001b04 	addi	fp,fp,108
   20654:	e0bfec17 	ldw	r2,-80(fp)
   20658:	e0bff715 	stw	r2,-36(fp)
    }
  }

  return 0;
   2065c:	e0bfe704 	addi	r2,fp,-100
   20660:	e03feb15 	stw	zero,-84(fp)
   20664:	1009883a 	mov	r4,r2
   20668:	002008c0 	call	2008c <_ZN6BTUartD1Ev>
   2066c:	e0fff717 	ldw	r3,-36(fp)
   20670:	00bfffc4 	movi	r2,-1
   20674:	e0bfeb15 	stw	r2,-84(fp)
   20678:	1809883a 	mov	r4,r3
   2067c:	0022a100 	call	22a10 <_Unwind_SjLj_Resume>

00020680 <main>:
#define RUN_BT    0
#define RUN_SD    1
#define RUN_WIFI  0

int main()
{
   20680:	defffe04 	addi	sp,sp,-8
   20684:	dfc00115 	stw	ra,4(sp)
   20688:	df000015 	stw	fp,0(sp)
   2068c:	d839883a 	mov	fp,sp
  printf("NIOS II SOFTWARE APPLICATION\n");
   20690:	01020034 	movhi	r4,2048
   20694:	21002404 	addi	r4,r4,144
   20698:	00233380 	call	23338 <puts>
  printf("===========================================\n\n");
   2069c:	01020034 	movhi	r4,2048
   206a0:	21002c04 	addi	r4,r4,176
   206a4:	00233380 	call	23338 <puts>
  #if (RUN_BT)
    bt_task();
  #endif

  #if (RUN_SD)
    sd_task();
   206a8:	00206c40 	call	206c4 <_Z7sd_taskv>

  #if (RUN_WIFI)
     wifi_task();
  #endif

  return 0;
   206ac:	0005883a 	mov	r2,zero
}
   206b0:	e037883a 	mov	sp,fp
   206b4:	dfc00117 	ldw	ra,4(sp)
   206b8:	df000017 	ldw	fp,0(sp)
   206bc:	dec00204 	addi	sp,sp,8
   206c0:	f800283a 	ret

000206c4 <_Z7sd_taskv>:
char data[512];
int i, pixel, att3;


int sd_task()
{
   206c4:	defffb04 	addi	sp,sp,-20
   206c8:	dfc00415 	stw	ra,16(sp)
   206cc:	df000315 	stw	fp,12(sp)
   206d0:	dc000215 	stw	r16,8(sp)
   206d4:	df000304 	addi	fp,sp,12
    printf("SD CARD ACCESS TEST\n");
   206d8:	01020034 	movhi	r4,2048
   206dc:	21003804 	addi	r4,r4,224
   206e0:	00233380 	call	23338 <puts>
    printf("===========================================\n\n");
   206e4:	01020034 	movhi	r4,2048
   206e8:	21003d04 	addi	r4,r4,244
   206ec:	00233380 	call	23338 <puts>

    alt_up_sd_card_dev *SDCARD_DEV = alt_up_sd_card_open_dev(SDCARD_IFC_NAME);
   206f0:	01020034 	movhi	r4,2048
   206f4:	21004904 	addi	r4,r4,292
   206f8:	00278bc0 	call	278bc <alt_up_sd_card_open_dev>
   206fc:	e0bffe15 	stw	r2,-8(fp)

    if (SDCARD_DEV != 0) {
   20700:	e0bffe17 	ldw	r2,-8(fp)
   20704:	10008c26 	beq	r2,zero,20938 <_Z7sd_taskv+0x274>
        printf("INIT SUCCESS: SD Card IP Core HAL device driver.\n");
   20708:	01020034 	movhi	r4,2048
   2070c:	21004d04 	addi	r4,r4,308
   20710:	00233380 	call	23338 <puts>

        // Check if SD card is present at the SD card socket
        if (alt_up_sd_card_is_Present()) 
   20714:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   20718:	10803fcc 	andi	r2,r2,255
   2071c:	10000426 	beq	r2,zero,20730 <_Z7sd_taskv+0x6c>
            printf("W FAT16: SD Card contains a FAT16 partition.\n");
   20720:	01020034 	movhi	r4,2048
   20724:	21005a04 	addi	r4,r4,360
   20728:	00233380 	call	23338 <puts>
   2072c:	00000306 	br	2073c <_Z7sd_taskv+0x78>
        else
            printf("WTHT FAT16: SD Card does not contain a FAT16 partition.\n");
   20730:	01020034 	movhi	r4,2048
   20734:	21006604 	addi	r4,r4,408
   20738:	00233380 	call	23338 <puts>

        
        // Create new text file and write data to it
        sd_fileh = alt_up_sd_card_fopen("test1.txt", true);
   2073c:	01020034 	movhi	r4,2048
   20740:	21007404 	addi	r4,r4,464
   20744:	01400044 	movi	r5,1
   20748:	0027f380 	call	27f38 <alt_up_sd_card_fopen>
   2074c:	d0a01d0d 	sth	r2,-32652(gp)

        if (sd_fileh < 0)
   20750:	d0a01d0b 	ldhu	r2,-32652(gp)
   20754:	10bfffcc 	andi	r2,r2,65535
   20758:	10a0001c 	xori	r2,r2,32768
   2075c:	10a00004 	addi	r2,r2,-32768
   20760:	1000090e 	bge	r2,zero,20788 <_Z7sd_taskv+0xc4>
            printf("ERROR: Problem creating file - %i\n", sd_fileh);
   20764:	d0a01d0b 	ldhu	r2,-32652(gp)
   20768:	10bfffcc 	andi	r2,r2,65535
   2076c:	10a0001c 	xori	r2,r2,32768
   20770:	10a00004 	addi	r2,r2,-32768
   20774:	01020034 	movhi	r4,2048
   20778:	21007704 	addi	r4,r4,476
   2077c:	100b883a 	mov	r5,r2
   20780:	002324c0 	call	2324c <printf>
   20784:	00002b06 	br	20834 <_Z7sd_taskv+0x170>
        else {
            printf("SD ACCESS SUCCESS: Writing data to new file ...\n");
   20788:	01020034 	movhi	r4,2048
   2078c:	21008004 	addi	r4,r4,512
   20790:	00233380 	call	23338 <puts>

            int index = 0;
   20794:	e03ffd15 	stw	zero,-12(fp)

            // Write buffer data into test1.txt
            while (buffer[index] != '\0') {
   20798:	00001106 	br	207e0 <_Z7sd_taskv+0x11c>
                alt_up_sd_card_write(sd_fileh, buffer[index]);
   2079c:	d0a01d0b 	ldhu	r2,-32652(gp)
   207a0:	113fffcc 	andi	r4,r2,65535
   207a4:	2120001c 	xori	r4,r4,32768
   207a8:	21200004 	addi	r4,r4,-32768
   207ac:	00820034 	movhi	r2,2048
   207b0:	10816a04 	addi	r2,r2,1448
   207b4:	e0fffd17 	ldw	r3,-12(fp)
   207b8:	10c5883a 	add	r2,r2,r3
   207bc:	10800003 	ldbu	r2,0(r2)
   207c0:	10803fcc 	andi	r2,r2,255
   207c4:	1080201c 	xori	r2,r2,128
   207c8:	10bfe004 	addi	r2,r2,-128
   207cc:	100b883a 	mov	r5,r2
   207d0:	00287580 	call	28758 <alt_up_sd_card_write>
                index = index + 1;
   207d4:	e0bffd17 	ldw	r2,-12(fp)
   207d8:	10800044 	addi	r2,r2,1
   207dc:	e0bffd15 	stw	r2,-12(fp)
            printf("SD ACCESS SUCCESS: Writing data to new file ...\n");

            int index = 0;

            // Write buffer data into test1.txt
            while (buffer[index] != '\0') {
   207e0:	00820034 	movhi	r2,2048
   207e4:	10816a04 	addi	r2,r2,1448
   207e8:	e0fffd17 	ldw	r3,-12(fp)
   207ec:	10c5883a 	add	r2,r2,r3
   207f0:	10800003 	ldbu	r2,0(r2)
   207f4:	10803fcc 	andi	r2,r2,255
   207f8:	1080201c 	xori	r2,r2,128
   207fc:	10bfe004 	addi	r2,r2,-128
   20800:	103fe61e 	bne	r2,zero,2079c <__alt_data_end+0xf402079c>
                alt_up_sd_card_write(sd_fileh, buffer[index]);
                index = index + 1;
            }

            printf("WRITE DONE: All buffer data has been successfully written into file.\n");
   20804:	01020034 	movhi	r4,2048
   20808:	21008c04 	addi	r4,r4,560
   2080c:	00233380 	call	23338 <puts>

            alt_up_sd_card_fclose(sd_fileh);
   20810:	d0a01d0b 	ldhu	r2,-32652(gp)
   20814:	10bfffcc 	andi	r2,r2,65535
   20818:	10a0001c 	xori	r2,r2,32768
   2081c:	10a00004 	addi	r2,r2,-32768
   20820:	1009883a 	mov	r4,r2
   20824:	0028da80 	call	28da8 <alt_up_sd_card_fclose>
            printf("FILE CLOSED\n");
   20828:	01020034 	movhi	r4,2048
   2082c:	21009e04 	addi	r4,r4,632
   20830:	00233380 	call	23338 <puts>
        }


        // Read text file from SD Card
        sd_fileh2 = alt_up_sd_card_fopen("test2.txt", false);
   20834:	01020034 	movhi	r4,2048
   20838:	2100a104 	addi	r4,r4,644
   2083c:	000b883a 	mov	r5,zero
   20840:	0027f380 	call	27f38 <alt_up_sd_card_fopen>
   20844:	d0a01d8d 	sth	r2,-32650(gp)

        if (sd_fileh2 > 0)
   20848:	d0a01d8b 	ldhu	r2,-32650(gp)
   2084c:	10bfffcc 	andi	r2,r2,65535
   20850:	10a0001c 	xori	r2,r2,32768
   20854:	10a00004 	addi	r2,r2,-32768
   20858:	0080090e 	bge	zero,r2,20880 <_Z7sd_taskv+0x1bc>
            printf("ERROR: Problem opening file - %i\n", sd_fileh2);
   2085c:	d0a01d8b 	ldhu	r2,-32650(gp)
   20860:	10bfffcc 	andi	r2,r2,65535
   20864:	10a0001c 	xori	r2,r2,32768
   20868:	10a00004 	addi	r2,r2,-32768
   2086c:	01020034 	movhi	r4,2048
   20870:	2100a404 	addi	r4,r4,656
   20874:	100b883a 	mov	r5,r2
   20878:	002324c0 	call	2324c <printf>
   2087c:	00003206 	br	20948 <_Z7sd_taskv+0x284>
        else {
            printf("SD ACCESS SUCCESS: Reading data from opened file ...\n\n");
   20880:	01020034 	movhi	r4,2048
   20884:	2100ad04 	addi	r4,r4,692
   20888:	00233380 	call	23338 <puts>

            // Read content from the text file
            for (i = 0; i < 12; i++) {
   2088c:	d0201f15 	stw	zero,-32644(gp)
   20890:	00001906 	br	208f8 <_Z7sd_taskv+0x234>
                data[i] = alt_up_sd_card_read(sd_fileh2);
   20894:	d4201f17 	ldw	r16,-32644(gp)
   20898:	d0a01d8b 	ldhu	r2,-32650(gp)
   2089c:	10bfffcc 	andi	r2,r2,65535
   208a0:	10a0001c 	xori	r2,r2,32768
   208a4:	10a00004 	addi	r2,r2,-32768
   208a8:	1009883a 	mov	r4,r2
   208ac:	00283c80 	call	283c8 <alt_up_sd_card_read>
   208b0:	1007883a 	mov	r3,r2
   208b4:	00820034 	movhi	r2,2048
   208b8:	1083f504 	addi	r2,r2,4052
   208bc:	1405883a 	add	r2,r2,r16
   208c0:	10c00005 	stb	r3,0(r2)
                printf("%c", data[i]);
   208c4:	d0e01f17 	ldw	r3,-32644(gp)
   208c8:	00820034 	movhi	r2,2048
   208cc:	1083f504 	addi	r2,r2,4052
   208d0:	10c5883a 	add	r2,r2,r3
   208d4:	10800003 	ldbu	r2,0(r2)
   208d8:	10803fcc 	andi	r2,r2,255
   208dc:	1080201c 	xori	r2,r2,128
   208e0:	10bfe004 	addi	r2,r2,-128
   208e4:	1009883a 	mov	r4,r2
   208e8:	00232a00 	call	232a0 <putchar>
            printf("ERROR: Problem opening file - %i\n", sd_fileh2);
        else {
            printf("SD ACCESS SUCCESS: Reading data from opened file ...\n\n");

            // Read content from the text file
            for (i = 0; i < 12; i++) {
   208ec:	d0a01f17 	ldw	r2,-32644(gp)
   208f0:	10800044 	addi	r2,r2,1
   208f4:	d0a01f15 	stw	r2,-32644(gp)
   208f8:	d0a01f17 	ldw	r2,-32644(gp)
   208fc:	10800310 	cmplti	r2,r2,12
   20900:	103fe41e 	bne	r2,zero,20894 <__alt_data_end+0xf4020894>
                data[i] = alt_up_sd_card_read(sd_fileh2);
                printf("%c", data[i]);
            }

            printf("\nREAD DONE: Closing file ...\n");
   20904:	01020034 	movhi	r4,2048
   20908:	2100bb04 	addi	r4,r4,748
   2090c:	00233380 	call	23338 <puts>
            alt_up_sd_card_fclose(sd_fileh2);
   20910:	d0a01d8b 	ldhu	r2,-32650(gp)
   20914:	10bfffcc 	andi	r2,r2,65535
   20918:	10a0001c 	xori	r2,r2,32768
   2091c:	10a00004 	addi	r2,r2,-32768
   20920:	1009883a 	mov	r4,r2
   20924:	0028da80 	call	28da8 <alt_up_sd_card_fclose>

            printf("EXIT\n");
   20928:	01020034 	movhi	r4,2048
   2092c:	2100c304 	addi	r4,r4,780
   20930:	00233380 	call	23338 <puts>
   20934:	00000406 	br	20948 <_Z7sd_taskv+0x284>
        }

    } else {
        printf("INIT ERROR: %s\n", SDCARD_DEV);
   20938:	01020034 	movhi	r4,2048
   2093c:	2100c504 	addi	r4,r4,788
   20940:	e17ffe17 	ldw	r5,-8(fp)
   20944:	002324c0 	call	2324c <printf>
    }

    return 0;
   20948:	0005883a 	mov	r2,zero
   2094c:	e6ffff04 	addi	sp,fp,-4
   20950:	dfc00217 	ldw	ra,8(sp)
   20954:	df000117 	ldw	fp,4(sp)
   20958:	dc000017 	ldw	r16,0(sp)
   2095c:	dec00304 	addi	sp,sp,12
   20960:	f800283a 	ret

00020964 <_ZL12read_sleb128PKhPl>:
   20964:	0011883a 	mov	r8,zero
   20968:	000d883a 	mov	r6,zero
   2096c:	21c00003 	ldbu	r7,0(r4)
   20970:	20800044 	addi	r2,r4,1
   20974:	1009883a 	mov	r4,r2
   20978:	38c01fcc 	andi	r3,r7,127
   2097c:	1986983a 	sll	r3,r3,r6
   20980:	3a403fcc 	andi	r9,r7,255
   20984:	4a40201c 	xori	r9,r9,128
   20988:	4a7fe004 	addi	r9,r9,-128
   2098c:	40d0b03a 	or	r8,r8,r3
   20990:	318001c4 	addi	r6,r6,7
   20994:	483ff516 	blt	r9,zero,2096c <__alt_data_end+0xf402096c>
   20998:	00c007c4 	movi	r3,31
   2099c:	19800536 	bltu	r3,r6,209b4 <_ZL12read_sleb128PKhPl+0x50>
   209a0:	39c0100c 	andi	r7,r7,64
   209a4:	38000326 	beq	r7,zero,209b4 <_ZL12read_sleb128PKhPl+0x50>
   209a8:	00ffffc4 	movi	r3,-1
   209ac:	198c983a 	sll	r6,r3,r6
   209b0:	3210b03a 	or	r8,r6,r8
   209b4:	2a000015 	stw	r8,0(r5)
   209b8:	f800283a 	ret

000209bc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   209bc:	28800017 	ldw	r2,0(r5)
   209c0:	30c00017 	ldw	r3,0(r6)
   209c4:	defffb04 	addi	sp,sp,-20
   209c8:	10800217 	ldw	r2,8(r2)
   209cc:	dc400315 	stw	r17,12(sp)
   209d0:	dc000215 	stw	r16,8(sp)
   209d4:	d9400115 	stw	r5,4(sp)
   209d8:	dfc00415 	stw	ra,16(sp)
   209dc:	2021883a 	mov	r16,r4
   209e0:	d8c00015 	stw	r3,0(sp)
   209e4:	2809883a 	mov	r4,r5
   209e8:	3023883a 	mov	r17,r6
   209ec:	103ee83a 	callr	r2
   209f0:	10803fcc 	andi	r2,r2,255
   209f4:	d9400117 	ldw	r5,4(sp)
   209f8:	10000326 	beq	r2,zero,20a08 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   209fc:	d8800017 	ldw	r2,0(sp)
   20a00:	10800017 	ldw	r2,0(r2)
   20a04:	d8800015 	stw	r2,0(sp)
   20a08:	80800017 	ldw	r2,0(r16)
   20a0c:	8009883a 	mov	r4,r16
   20a10:	d80d883a 	mov	r6,sp
   20a14:	10800417 	ldw	r2,16(r2)
   20a18:	01c00044 	movi	r7,1
   20a1c:	103ee83a 	callr	r2
   20a20:	10c03fcc 	andi	r3,r2,255
   20a24:	18000226 	beq	r3,zero,20a30 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x74>
   20a28:	d8c00017 	ldw	r3,0(sp)
   20a2c:	88c00015 	stw	r3,0(r17)
   20a30:	dfc00417 	ldw	ra,16(sp)
   20a34:	dc400317 	ldw	r17,12(sp)
   20a38:	dc000217 	ldw	r16,8(sp)
   20a3c:	dec00504 	addi	sp,sp,20
   20a40:	f800283a 	ret

00020a44 <_ZL21size_of_encoded_valueh>:
   20a44:	deffff04 	addi	sp,sp,-4
   20a48:	dfc00015 	stw	ra,0(sp)
   20a4c:	00803fc4 	movi	r2,255
   20a50:	20802026 	beq	r4,r2,20ad4 <_ZL21size_of_encoded_valueh+0x90>
   20a54:	210001cc 	andi	r4,r4,7
   20a58:	00800144 	movi	r2,5
   20a5c:	11001c36 	bltu	r2,r4,20ad0 <_ZL21size_of_encoded_valueh+0x8c>
   20a60:	200890ba 	slli	r4,r4,2
   20a64:	008000b4 	movhi	r2,2
   20a68:	10829e04 	addi	r2,r2,2680
   20a6c:	2089883a 	add	r4,r4,r2
   20a70:	20800017 	ldw	r2,0(r4)
   20a74:	1000683a 	jmp	r2
   20a78:	00020a90 	cmplti	zero,zero,2090
   20a7c:	00020ad0 	cmplti	zero,zero,2091
   20a80:	00020aa0 	cmpeqi	zero,zero,2090
   20a84:	00020a90 	cmplti	zero,zero,2090
   20a88:	00020ac0 	call	20ac <__alt_mem_onchip_memory2_0-0x1df54>
   20a8c:	00020ab0 	cmpltui	zero,zero,2090
   20a90:	00800104 	movi	r2,4
   20a94:	dfc00017 	ldw	ra,0(sp)
   20a98:	dec00104 	addi	sp,sp,4
   20a9c:	f800283a 	ret
   20aa0:	00800084 	movi	r2,2
   20aa4:	dfc00017 	ldw	ra,0(sp)
   20aa8:	dec00104 	addi	sp,sp,4
   20aac:	f800283a 	ret
   20ab0:	00800044 	movi	r2,1
   20ab4:	dfc00017 	ldw	ra,0(sp)
   20ab8:	dec00104 	addi	sp,sp,4
   20abc:	f800283a 	ret
   20ac0:	00800204 	movi	r2,8
   20ac4:	dfc00017 	ldw	ra,0(sp)
   20ac8:	dec00104 	addi	sp,sp,4
   20acc:	f800283a 	ret
   20ad0:	0022b2c0 	call	22b2c <abort>
   20ad4:	0005883a 	mov	r2,zero
   20ad8:	dfc00017 	ldw	ra,0(sp)
   20adc:	dec00104 	addi	sp,sp,4
   20ae0:	f800283a 	ret

00020ae4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   20ae4:	defffa04 	addi	sp,sp,-24
   20ae8:	dc000315 	stw	r16,12(sp)
   20aec:	dfc00515 	stw	ra,20(sp)
   20af0:	dc400415 	stw	r17,16(sp)
   20af4:	00801404 	movi	r2,80
   20af8:	2021883a 	mov	r16,r4
   20afc:	20807526 	beq	r4,r2,20cd4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1f0>
   20b00:	208003cc 	andi	r2,r4,15
   20b04:	00c00304 	movi	r3,12
   20b08:	18807136 	bltu	r3,r2,20cd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
   20b0c:	100490ba 	slli	r2,r2,2
   20b10:	00c000b4 	movhi	r3,2
   20b14:	18c2ca04 	addi	r3,r3,2856
   20b18:	10c5883a 	add	r2,r2,r3
   20b1c:	10800017 	ldw	r2,0(r2)
   20b20:	2823883a 	mov	r17,r5
   20b24:	1000683a 	jmp	r2
   20b28:	00020c10 	cmplti	zero,zero,2096
   20b2c:	00020c40 	call	20c4 <__alt_mem_onchip_memory2_0-0x1df3c>
   20b30:	00020bf8 	rdprs	zero,zero,2095
   20b34:	00020b5c 	xori	zero,zero,2093
   20b38:	00020bc8 	cmpgei	zero,zero,2095
   20b3c:	00020c7c 	xorhi	zero,zero,2097
   20b40:	00020cd0 	cmplti	zero,zero,2099
   20b44:	00020cd0 	cmplti	zero,zero,2099
   20b48:	00020cd0 	cmplti	zero,zero,2099
   20b4c:	00020c88 	cmpgei	zero,zero,2098
   20b50:	00020cac 	andhi	zero,zero,2098
   20b54:	00020b5c 	xori	zero,zero,2093
   20b58:	00020bc8 	cmpgei	zero,zero,2095
   20b5c:	30800043 	ldbu	r2,1(r6)
   20b60:	30c00083 	ldbu	r3,2(r6)
   20b64:	310000c3 	ldbu	r4,3(r6)
   20b68:	32000003 	ldbu	r8,0(r6)
   20b6c:	1004923a 	slli	r2,r2,8
   20b70:	1806943a 	slli	r3,r3,16
   20b74:	2008963a 	slli	r4,r4,24
   20b78:	1204b03a 	or	r2,r2,r8
   20b7c:	1884b03a 	or	r2,r3,r2
   20b80:	2086b03a 	or	r3,r4,r2
   20b84:	30800104 	addi	r2,r6,4
   20b88:	18000926 	beq	r3,zero,20bb0 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   20b8c:	81401c0c 	andi	r5,r16,112
   20b90:	01000404 	movi	r4,16
   20b94:	29005526 	beq	r5,r4,20cec <_ZL28read_encoded_value_with_basehjPKhPj+0x208>
   20b98:	84003fcc 	andi	r16,r16,255
   20b9c:	8400201c 	xori	r16,r16,128
   20ba0:	843fe004 	addi	r16,r16,-128
   20ba4:	1c47883a 	add	r3,r3,r17
   20ba8:	8000010e 	bge	r16,zero,20bb0 <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
   20bac:	18c00017 	ldw	r3,0(r3)
   20bb0:	38c00015 	stw	r3,0(r7)
   20bb4:	dfc00517 	ldw	ra,20(sp)
   20bb8:	dc400417 	ldw	r17,16(sp)
   20bbc:	dc000317 	ldw	r16,12(sp)
   20bc0:	dec00604 	addi	sp,sp,24
   20bc4:	f800283a 	ret
   20bc8:	30800043 	ldbu	r2,1(r6)
   20bcc:	30c00083 	ldbu	r3,2(r6)
   20bd0:	310000c3 	ldbu	r4,3(r6)
   20bd4:	32000003 	ldbu	r8,0(r6)
   20bd8:	1004923a 	slli	r2,r2,8
   20bdc:	1806943a 	slli	r3,r3,16
   20be0:	2008963a 	slli	r4,r4,24
   20be4:	1204b03a 	or	r2,r2,r8
   20be8:	1884b03a 	or	r2,r3,r2
   20bec:	2086b03a 	or	r3,r4,r2
   20bf0:	30800204 	addi	r2,r6,8
   20bf4:	003fe406 	br	20b88 <__alt_data_end+0xf4020b88>
   20bf8:	30c00043 	ldbu	r3,1(r6)
   20bfc:	32000003 	ldbu	r8,0(r6)
   20c00:	30800084 	addi	r2,r6,2
   20c04:	1806923a 	slli	r3,r3,8
   20c08:	1a06b03a 	or	r3,r3,r8
   20c0c:	003fde06 	br	20b88 <__alt_data_end+0xf4020b88>
   20c10:	30800043 	ldbu	r2,1(r6)
   20c14:	30c00083 	ldbu	r3,2(r6)
   20c18:	314000c3 	ldbu	r5,3(r6)
   20c1c:	31000003 	ldbu	r4,0(r6)
   20c20:	1004923a 	slli	r2,r2,8
   20c24:	1806943a 	slli	r3,r3,16
   20c28:	280a963a 	slli	r5,r5,24
   20c2c:	1104b03a 	or	r2,r2,r4
   20c30:	1884b03a 	or	r2,r3,r2
   20c34:	2886b03a 	or	r3,r5,r2
   20c38:	30800104 	addi	r2,r6,4
   20c3c:	003fd206 	br	20b88 <__alt_data_end+0xf4020b88>
   20c40:	3013883a 	mov	r9,r6
   20c44:	0007883a 	mov	r3,zero
   20c48:	0011883a 	mov	r8,zero
   20c4c:	49000003 	ldbu	r4,0(r9)
   20c50:	48800044 	addi	r2,r9,1
   20c54:	1013883a 	mov	r9,r2
   20c58:	21401fcc 	andi	r5,r4,127
   20c5c:	2a0a983a 	sll	r5,r5,r8
   20c60:	21003fcc 	andi	r4,r4,255
   20c64:	2100201c 	xori	r4,r4,128
   20c68:	213fe004 	addi	r4,r4,-128
   20c6c:	1946b03a 	or	r3,r3,r5
   20c70:	420001c4 	addi	r8,r8,7
   20c74:	203ff516 	blt	r4,zero,20c4c <__alt_data_end+0xf4020c4c>
   20c78:	003fc306 	br	20b88 <__alt_data_end+0xf4020b88>
   20c7c:	30c00003 	ldbu	r3,0(r6)
   20c80:	30800044 	addi	r2,r6,1
   20c84:	003fc006 	br	20b88 <__alt_data_end+0xf4020b88>
   20c88:	3009883a 	mov	r4,r6
   20c8c:	d80b883a 	mov	r5,sp
   20c90:	d9800115 	stw	r6,4(sp)
   20c94:	d9c00215 	stw	r7,8(sp)
   20c98:	00209640 	call	20964 <_ZL12read_sleb128PKhPl>
   20c9c:	d8c00017 	ldw	r3,0(sp)
   20ca0:	d9800117 	ldw	r6,4(sp)
   20ca4:	d9c00217 	ldw	r7,8(sp)
   20ca8:	003fb706 	br	20b88 <__alt_data_end+0xf4020b88>
   20cac:	30c00043 	ldbu	r3,1(r6)
   20cb0:	32000003 	ldbu	r8,0(r6)
   20cb4:	30800084 	addi	r2,r6,2
   20cb8:	1806923a 	slli	r3,r3,8
   20cbc:	1a06b03a 	or	r3,r3,r8
   20cc0:	18ffffcc 	andi	r3,r3,65535
   20cc4:	18e0001c 	xori	r3,r3,32768
   20cc8:	18e00004 	addi	r3,r3,-32768
   20ccc:	003fae06 	br	20b88 <__alt_data_end+0xf4020b88>
   20cd0:	0022b2c0 	call	22b2c <abort>
   20cd4:	318000c4 	addi	r6,r6,3
   20cd8:	00bfff04 	movi	r2,-4
   20cdc:	3084703a 	and	r2,r6,r2
   20ce0:	10c00017 	ldw	r3,0(r2)
   20ce4:	10800104 	addi	r2,r2,4
   20ce8:	003fb106 	br	20bb0 <__alt_data_end+0xf4020bb0>
   20cec:	3023883a 	mov	r17,r6
   20cf0:	003fa906 	br	20b98 <__alt_data_end+0xf4020b98>

00020cf4 <_ZL15get_ttype_entryP16lsda_header_infom>:
   20cf4:	defffc04 	addi	sp,sp,-16
   20cf8:	dfc00315 	stw	ra,12(sp)
   20cfc:	dc000215 	stw	r16,8(sp)
   20d00:	2021883a 	mov	r16,r4
   20d04:	21000503 	ldbu	r4,20(r4)
   20d08:	d9400115 	stw	r5,4(sp)
   20d0c:	0020a440 	call	20a44 <_ZL21size_of_encoded_valueh>
   20d10:	d9400117 	ldw	r5,4(sp)
   20d14:	1009883a 	mov	r4,r2
   20d18:	00225e40 	call	225e4 <__mulsi3>
   20d1c:	81800317 	ldw	r6,12(r16)
   20d20:	81000503 	ldbu	r4,20(r16)
   20d24:	81400217 	ldw	r5,8(r16)
   20d28:	308dc83a 	sub	r6,r6,r2
   20d2c:	d80f883a 	mov	r7,sp
   20d30:	0020ae40 	call	20ae4 <_ZL28read_encoded_value_with_basehjPKhPj>
   20d34:	d8800017 	ldw	r2,0(sp)
   20d38:	dfc00317 	ldw	ra,12(sp)
   20d3c:	dc000217 	ldw	r16,8(sp)
   20d40:	dec00404 	addi	sp,sp,16
   20d44:	f800283a 	ret

00020d48 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   20d48:	defffb04 	addi	sp,sp,-20
   20d4c:	dc000115 	stw	r16,4(sp)
   20d50:	24000317 	ldw	r16,12(r4)
   20d54:	01ce303a 	nor	r7,zero,r7
   20d58:	dc800315 	stw	r18,12(sp)
   20d5c:	dc400215 	stw	r17,8(sp)
   20d60:	dfc00415 	stw	ra,16(sp)
   20d64:	2023883a 	mov	r17,r4
   20d68:	2825883a 	mov	r18,r5
   20d6c:	d9800015 	stw	r6,0(sp)
   20d70:	81e1883a 	add	r16,r16,r7
   20d74:	8009883a 	mov	r4,r16
   20d78:	000b883a 	mov	r5,zero
   20d7c:	000d883a 	mov	r6,zero
   20d80:	20800003 	ldbu	r2,0(r4)
   20d84:	84000044 	addi	r16,r16,1
   20d88:	8009883a 	mov	r4,r16
   20d8c:	10c01fcc 	andi	r3,r2,127
   20d90:	1986983a 	sll	r3,r3,r6
   20d94:	10803fcc 	andi	r2,r2,255
   20d98:	1080201c 	xori	r2,r2,128
   20d9c:	10bfe004 	addi	r2,r2,-128
   20da0:	28cab03a 	or	r5,r5,r3
   20da4:	318001c4 	addi	r6,r6,7
   20da8:	103ff516 	blt	r2,zero,20d80 <__alt_data_end+0xf4020d80>
   20dac:	28000e26 	beq	r5,zero,20de8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   20db0:	8809883a 	mov	r4,r17
   20db4:	0020cf40 	call	20cf4 <_ZL15get_ttype_entryP16lsda_header_infom>
   20db8:	1009883a 	mov	r4,r2
   20dbc:	900b883a 	mov	r5,r18
   20dc0:	d80d883a 	mov	r6,sp
   20dc4:	00209bc0 	call	209bc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   20dc8:	10c03fcc 	andi	r3,r2,255
   20dcc:	183fe926 	beq	r3,zero,20d74 <__alt_data_end+0xf4020d74>
   20dd0:	dfc00417 	ldw	ra,16(sp)
   20dd4:	dc800317 	ldw	r18,12(sp)
   20dd8:	dc400217 	ldw	r17,8(sp)
   20ddc:	dc000117 	ldw	r16,4(sp)
   20de0:	dec00504 	addi	sp,sp,20
   20de4:	f800283a 	ret
   20de8:	0005883a 	mov	r2,zero
   20dec:	003ff806 	br	20dd0 <__alt_data_end+0xf4020dd0>

00020df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   20df0:	deffff04 	addi	sp,sp,-4
   20df4:	dfc00015 	stw	ra,0(sp)
   20df8:	00803fc4 	movi	r2,255
   20dfc:	20800e26 	beq	r4,r2,20e38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20e00:	20801c0c 	andi	r2,r4,112
   20e04:	00c00804 	movi	r3,32
   20e08:	10c01726 	beq	r2,r3,20e68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
   20e0c:	18800e2e 	bgeu	r3,r2,20e48 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
   20e10:	00c01004 	movi	r3,64
   20e14:	10c01026 	beq	r2,r3,20e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   20e18:	00c01404 	movi	r3,80
   20e1c:	10c00626 	beq	r2,r3,20e38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x48>
   20e20:	00c00c04 	movi	r3,48
   20e24:	10c00b1e 	bne	r2,r3,20e54 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   20e28:	2809883a 	mov	r4,r5
   20e2c:	dfc00017 	ldw	ra,0(sp)
   20e30:	dec00104 	addi	sp,sp,4
   20e34:	00228ec1 	jmpi	228ec <_Unwind_GetDataRelBase>
   20e38:	0005883a 	mov	r2,zero
   20e3c:	dfc00017 	ldw	ra,0(sp)
   20e40:	dec00104 	addi	sp,sp,4
   20e44:	f800283a 	ret
   20e48:	103ffb26 	beq	r2,zero,20e38 <__alt_data_end+0xf4020e38>
   20e4c:	00c00404 	movi	r3,16
   20e50:	10fff926 	beq	r2,r3,20e38 <__alt_data_end+0xf4020e38>
   20e54:	0022b2c0 	call	22b2c <abort>
   20e58:	2809883a 	mov	r4,r5
   20e5c:	dfc00017 	ldw	ra,0(sp)
   20e60:	dec00104 	addi	sp,sp,4
   20e64:	00228dc1 	jmpi	228dc <_Unwind_GetRegionStart>
   20e68:	2809883a 	mov	r4,r5
   20e6c:	dfc00017 	ldw	ra,0(sp)
   20e70:	dec00104 	addi	sp,sp,4
   20e74:	00228f41 	jmpi	228f4 <_Unwind_GetTextRelBase>

00020e78 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   20e78:	defff104 	addi	sp,sp,-60
   20e7c:	dd800b15 	stw	r22,44(sp)
   20e80:	382dd23a 	srai	r22,r7,8
   20e84:	dd400a15 	stw	r21,40(sp)
   20e88:	dd000915 	stw	r20,36(sp)
   20e8c:	dfc00e15 	stw	ra,56(sp)
   20e90:	df000d15 	stw	fp,52(sp)
   20e94:	ddc00c15 	stw	r23,48(sp)
   20e98:	dcc00815 	stw	r19,32(sp)
   20e9c:	dc800715 	stw	r18,28(sp)
   20ea0:	dc400615 	stw	r17,24(sp)
   20ea4:	dc000515 	stw	r16,20(sp)
   20ea8:	d9c00315 	stw	r7,12(sp)
   20eac:	d9400215 	stw	r5,8(sp)
   20eb0:	2029883a 	mov	r20,r4
   20eb4:	dd400f17 	ldw	r21,60(sp)
   20eb8:	b000010e 	bge	r22,zero,20ec0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x48>
   20ebc:	05adc83a 	sub	r22,zero,r22
   20ec0:	01000144 	movi	r4,5
   20ec4:	000b883a 	mov	r5,zero
   20ec8:	d9800415 	stw	r6,16(sp)
   20ecc:	0020df00 	call	20df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20ed0:	d9800417 	ldw	r6,16(sp)
   20ed4:	100b883a 	mov	r5,r2
   20ed8:	d9c00104 	addi	r7,sp,4
   20edc:	01000144 	movi	r4,5
   20ee0:	0020ae40 	call	20ae4 <_ZL28read_encoded_value_with_basehjPKhPj>
   20ee4:	1009883a 	mov	r4,r2
   20ee8:	017ffe44 	movi	r5,-7
   20eec:	1021883a 	mov	r16,r2
   20ef0:	00225e40 	call	225e4 <__mulsi3>
   20ef4:	1027883a 	mov	r19,r2
   20ef8:	002f883a 	mov	r23,zero
   20efc:	84400003 	ldbu	r17,0(r16)
   20f00:	8009883a 	mov	r4,r16
   20f04:	014001c4 	movi	r5,7
   20f08:	00225e40 	call	225e4 <__mulsi3>
   20f0c:	88c01fcc 	andi	r3,r17,127
   20f10:	14c5883a 	add	r2,r2,r19
   20f14:	1886983a 	sll	r3,r3,r2
   20f18:	8c403fcc 	andi	r17,r17,255
   20f1c:	8c40201c 	xori	r17,r17,128
   20f20:	8c7fe004 	addi	r17,r17,-128
   20f24:	84000044 	addi	r16,r16,1
   20f28:	b8eeb03a 	or	r23,r23,r3
   20f2c:	883ff316 	blt	r17,zero,20efc <__alt_data_end+0xf4020efc>
   20f30:	85e1883a 	add	r16,r16,r23
   20f34:	8009883a 	mov	r4,r16
   20f38:	017ffe44 	movi	r5,-7
   20f3c:	00225e40 	call	225e4 <__mulsi3>
   20f40:	102f883a 	mov	r23,r2
   20f44:	8007883a 	mov	r3,r16
   20f48:	0025883a 	mov	r18,zero
   20f4c:	1cc00003 	ldbu	r19,0(r3)
   20f50:	1809883a 	mov	r4,r3
   20f54:	014001c4 	movi	r5,7
   20f58:	1c400044 	addi	r17,r3,1
   20f5c:	00225e40 	call	225e4 <__mulsi3>
   20f60:	98c01fcc 	andi	r3,r19,127
   20f64:	15c5883a 	add	r2,r2,r23
   20f68:	1884983a 	sll	r2,r3,r2
   20f6c:	9cc03fcc 	andi	r19,r19,255
   20f70:	9cc0201c 	xori	r19,r19,128
   20f74:	9cffe004 	addi	r19,r19,-128
   20f78:	8807883a 	mov	r3,r17
   20f7c:	90a4b03a 	or	r18,r18,r2
   20f80:	983ff216 	blt	r19,zero,20f4c <__alt_data_end+0xf4020f4c>
   20f84:	b7003fcc 	andi	fp,r22,255
   20f88:	e73fffc4 	addi	fp,fp,-1
   20f8c:	8f39883a 	add	fp,r17,fp
   20f90:	840000c4 	addi	r16,r16,3
   20f94:	848d883a 	add	r6,r16,r18
   20f98:	e009883a 	mov	r4,fp
   20f9c:	017ffe44 	movi	r5,-7
   20fa0:	04ffff04 	movi	r19,-4
   20fa4:	34e6703a 	and	r19,r6,r19
   20fa8:	00225e40 	call	225e4 <__mulsi3>
   20fac:	002f883a 	mov	r23,zero
   20fb0:	102d883a 	mov	r22,r2
   20fb4:	e4400003 	ldbu	r17,0(fp)
   20fb8:	e009883a 	mov	r4,fp
   20fbc:	014001c4 	movi	r5,7
   20fc0:	00225e40 	call	225e4 <__mulsi3>
   20fc4:	88c01fcc 	andi	r3,r17,127
   20fc8:	1585883a 	add	r2,r2,r22
   20fcc:	1886983a 	sll	r3,r3,r2
   20fd0:	8c403fcc 	andi	r17,r17,255
   20fd4:	8c40201c 	xori	r17,r17,128
   20fd8:	e4000044 	addi	r16,fp,1
   20fdc:	8c7fe004 	addi	r17,r17,-128
   20fe0:	b8eeb03a 	or	r23,r23,r3
   20fe4:	8039883a 	mov	fp,r16
   20fe8:	883ff216 	blt	r17,zero,20fb4 <__alt_data_end+0xf4020fb4>
   20fec:	d8800317 	ldw	r2,12(sp)
   20ff0:	14803fcc 	andi	r18,r2,255
   20ff4:	b8002326 	beq	r23,zero,21084 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x20c>
   20ff8:	9009883a 	mov	r4,r18
   20ffc:	0020a440 	call	20a44 <_ZL21size_of_encoded_valueh>
   21000:	1009883a 	mov	r4,r2
   21004:	b97fffc4 	addi	r5,r23,-1
   21008:	00225e40 	call	225e4 <__mulsi3>
   2100c:	9009883a 	mov	r4,r18
   21010:	a80b883a 	mov	r5,r21
   21014:	14cd883a 	add	r6,r2,r19
   21018:	d80f883a 	mov	r7,sp
   2101c:	0020ae40 	call	20ae4 <_ZL28read_encoded_value_with_basehjPKhPj>
   21020:	d9000017 	ldw	r4,0(sp)
   21024:	a00b883a 	mov	r5,r20
   21028:	d9800204 	addi	r6,sp,8
   2102c:	00209bc0 	call	209bc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   21030:	10c03fcc 	andi	r3,r2,255
   21034:	1800141e 	bne	r3,zero,21088 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x210>
   21038:	8009883a 	mov	r4,r16
   2103c:	017ffe44 	movi	r5,-7
   21040:	00225e40 	call	225e4 <__mulsi3>
   21044:	102d883a 	mov	r22,r2
   21048:	002f883a 	mov	r23,zero
   2104c:	84400003 	ldbu	r17,0(r16)
   21050:	8009883a 	mov	r4,r16
   21054:	014001c4 	movi	r5,7
   21058:	00225e40 	call	225e4 <__mulsi3>
   2105c:	88c01fcc 	andi	r3,r17,127
   21060:	1585883a 	add	r2,r2,r22
   21064:	1886983a 	sll	r3,r3,r2
   21068:	8c403fcc 	andi	r17,r17,255
   2106c:	8c40201c 	xori	r17,r17,128
   21070:	8c7fe004 	addi	r17,r17,-128
   21074:	84000044 	addi	r16,r16,1
   21078:	b8eeb03a 	or	r23,r23,r3
   2107c:	883ff316 	blt	r17,zero,2104c <__alt_data_end+0xf402104c>
   21080:	003fdc06 	br	20ff4 <__alt_data_end+0xf4020ff4>
   21084:	0005883a 	mov	r2,zero
   21088:	dfc00e17 	ldw	ra,56(sp)
   2108c:	df000d17 	ldw	fp,52(sp)
   21090:	ddc00c17 	ldw	r23,48(sp)
   21094:	dd800b17 	ldw	r22,44(sp)
   21098:	dd400a17 	ldw	r21,40(sp)
   2109c:	dd000917 	ldw	r20,36(sp)
   210a0:	dcc00817 	ldw	r19,32(sp)
   210a4:	dc800717 	ldw	r18,28(sp)
   210a8:	dc400617 	ldw	r17,24(sp)
   210ac:	dc000517 	ldw	r16,20(sp)
   210b0:	dec00f04 	addi	sp,sp,60
   210b4:	f800283a 	ret

000210b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   210b8:	defffb04 	addi	sp,sp,-20
   210bc:	dcc00315 	stw	r19,12(sp)
   210c0:	dc400115 	stw	r17,4(sp)
   210c4:	dc000015 	stw	r16,0(sp)
   210c8:	dfc00415 	stw	ra,16(sp)
   210cc:	dc800215 	stw	r18,8(sp)
   210d0:	2027883a 	mov	r19,r4
   210d4:	2821883a 	mov	r16,r5
   210d8:	3023883a 	mov	r17,r6
   210dc:	20003f26 	beq	r4,zero,211dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   210e0:	00228dc0 	call	228dc <_Unwind_GetRegionStart>
   210e4:	88800015 	stw	r2,0(r17)
   210e8:	84800003 	ldbu	r18,0(r16)
   210ec:	00c03fc4 	movi	r3,255
   210f0:	84000044 	addi	r16,r16,1
   210f4:	90c03726 	beq	r18,r3,211d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   210f8:	9009883a 	mov	r4,r18
   210fc:	980b883a 	mov	r5,r19
   21100:	0020df00 	call	20df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21104:	800d883a 	mov	r6,r16
   21108:	9009883a 	mov	r4,r18
   2110c:	100b883a 	mov	r5,r2
   21110:	89c00104 	addi	r7,r17,4
   21114:	0020ae40 	call	20ae4 <_ZL28read_encoded_value_with_basehjPKhPj>
   21118:	1021883a 	mov	r16,r2
   2111c:	80c00003 	ldbu	r3,0(r16)
   21120:	01003fc4 	movi	r4,255
   21124:	80800044 	addi	r2,r16,1
   21128:	88c00505 	stb	r3,20(r17)
   2112c:	18c03fcc 	andi	r3,r3,255
   21130:	19002c26 	beq	r3,r4,211e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   21134:	100d883a 	mov	r6,r2
   21138:	000f883a 	mov	r7,zero
   2113c:	000b883a 	mov	r5,zero
   21140:	30c00003 	ldbu	r3,0(r6)
   21144:	10800044 	addi	r2,r2,1
   21148:	100d883a 	mov	r6,r2
   2114c:	19001fcc 	andi	r4,r3,127
   21150:	2148983a 	sll	r4,r4,r5
   21154:	18c03fcc 	andi	r3,r3,255
   21158:	18c0201c 	xori	r3,r3,128
   2115c:	18ffe004 	addi	r3,r3,-128
   21160:	390eb03a 	or	r7,r7,r4
   21164:	294001c4 	addi	r5,r5,7
   21168:	183ff516 	blt	r3,zero,21140 <__alt_data_end+0xf4021140>
   2116c:	11cf883a 	add	r7,r2,r7
   21170:	89c00315 	stw	r7,12(r17)
   21174:	10c00003 	ldbu	r3,0(r2)
   21178:	000f883a 	mov	r7,zero
   2117c:	10800044 	addi	r2,r2,1
   21180:	88c00545 	stb	r3,21(r17)
   21184:	000b883a 	mov	r5,zero
   21188:	10c00003 	ldbu	r3,0(r2)
   2118c:	10800044 	addi	r2,r2,1
   21190:	19001fcc 	andi	r4,r3,127
   21194:	2148983a 	sll	r4,r4,r5
   21198:	18c03fcc 	andi	r3,r3,255
   2119c:	18c0201c 	xori	r3,r3,128
   211a0:	18ffe004 	addi	r3,r3,-128
   211a4:	390eb03a 	or	r7,r7,r4
   211a8:	294001c4 	addi	r5,r5,7
   211ac:	183ff616 	blt	r3,zero,21188 <__alt_data_end+0xf4021188>
   211b0:	11cf883a 	add	r7,r2,r7
   211b4:	89c00415 	stw	r7,16(r17)
   211b8:	dfc00417 	ldw	ra,16(sp)
   211bc:	dcc00317 	ldw	r19,12(sp)
   211c0:	dc800217 	ldw	r18,8(sp)
   211c4:	dc400117 	ldw	r17,4(sp)
   211c8:	dc000017 	ldw	r16,0(sp)
   211cc:	dec00504 	addi	sp,sp,20
   211d0:	f800283a 	ret
   211d4:	88800115 	stw	r2,4(r17)
   211d8:	003fd006 	br	2111c <__alt_data_end+0xf402111c>
   211dc:	0005883a 	mov	r2,zero
   211e0:	003fc006 	br	210e4 <__alt_data_end+0xf40210e4>
   211e4:	88000315 	stw	zero,12(r17)
   211e8:	003fe206 	br	21174 <__alt_data_end+0xf4021174>

000211ec <__gxx_personality_sj0>:
   211ec:	008000b4 	movhi	r2,2
   211f0:	deffde04 	addi	sp,sp,-136
   211f4:	10847b04 	addi	r2,r2,4588
   211f8:	d8801015 	stw	r2,64(sp)
   211fc:	008000f4 	movhi	r2,3
   21200:	10a8b404 	addi	r2,r2,-23856
   21204:	d8801115 	stw	r2,68(sp)
   21208:	008000b4 	movhi	r2,2
   2120c:	1085b604 	addi	r2,r2,5848
   21210:	d9001715 	stw	r4,92(sp)
   21214:	d9000a04 	addi	r4,sp,40
   21218:	d8801315 	stw	r2,76(sp)
   2121c:	dfc02115 	stw	ra,132(sp)
   21220:	df002015 	stw	fp,128(sp)
   21224:	dec01215 	stw	sp,72(sp)
   21228:	dec01415 	stw	sp,80(sp)
   2122c:	d9401a15 	stw	r5,104(sp)
   21230:	d9801815 	stw	r6,96(sp)
   21234:	d9c01915 	stw	r7,100(sp)
   21238:	00228140 	call	22814 <_Unwind_SjLj_Register>
   2123c:	d8c01717 	ldw	r3,92(sp)
   21240:	d8000915 	stw	zero,36(sp)
   21244:	d8000815 	stw	zero,32(sp)
   21248:	00800044 	movi	r2,1
   2124c:	18800926 	beq	r3,r2,21274 <__gxx_personality_sj0+0x88>
   21250:	014000c4 	movi	r5,3
   21254:	d9401715 	stw	r5,92(sp)
   21258:	d9000a04 	addi	r4,sp,40
   2125c:	002282c0 	call	2282c <_Unwind_SjLj_Unregister>
   21260:	d8801717 	ldw	r2,92(sp)
   21264:	dfc02117 	ldw	ra,132(sp)
   21268:	df002017 	ldw	fp,128(sp)
   2126c:	dec02204 	addi	sp,sp,136
   21270:	f800283a 	ret
   21274:	d9401817 	ldw	r5,96(sp)
   21278:	012f3574 	movhi	r4,48341
   2127c:	21354004 	addi	r4,r4,-11008
   21280:	2909883a 	add	r4,r5,r4
   21284:	2145803a 	cmpltu	r2,r4,r5
   21288:	d9401917 	ldw	r5,100(sp)
   2128c:	d8c01b05 	stb	r3,108(sp)
   21290:	00ee2cb4 	movhi	r3,47282
   21294:	18eaaf04 	addi	r3,r3,-21828
   21298:	28c7883a 	add	r3,r5,r3
   2129c:	10c5883a 	add	r2,r2,r3
   212a0:	10003526 	beq	r2,zero,21378 <__gxx_personality_sj0+0x18c>
   212a4:	d8c01a17 	ldw	r3,104(sp)
   212a8:	00800184 	movi	r2,6
   212ac:	18803826 	beq	r3,r2,21390 <__gxx_personality_sj0+0x1a4>
   212b0:	d9002317 	ldw	r4,140(sp)
   212b4:	00ffffc4 	movi	r3,-1
   212b8:	d8c00b15 	stw	r3,44(sp)
   212bc:	00228d00 	call	228d0 <_Unwind_GetLanguageSpecificData>
   212c0:	d8801915 	stw	r2,100(sp)
   212c4:	1000a326 	beq	r2,zero,21554 <__gxx_personality_sj0+0x368>
   212c8:	d9002317 	ldw	r4,140(sp)
   212cc:	d9401917 	ldw	r5,100(sp)
   212d0:	d80d883a 	mov	r6,sp
   212d4:	00bfffc4 	movi	r2,-1
   212d8:	d8800b15 	stw	r2,44(sp)
   212dc:	00210b80 	call	210b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   212e0:	d9000503 	ldbu	r4,20(sp)
   212e4:	d9402317 	ldw	r5,140(sp)
   212e8:	d8801715 	stw	r2,92(sp)
   212ec:	0020df00 	call	20df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   212f0:	d9002317 	ldw	r4,140(sp)
   212f4:	d9400804 	addi	r5,sp,32
   212f8:	d8800215 	stw	r2,8(sp)
   212fc:	00228a00 	call	228a0 <_Unwind_GetIPInfo>
   21300:	d8c00817 	ldw	r3,32(sp)
   21304:	1800011e 	bne	r3,zero,2130c <__gxx_personality_sj0+0x120>
   21308:	10bfffc4 	addi	r2,r2,-1
   2130c:	10009116 	blt	r2,zero,21554 <__gxx_personality_sj0+0x368>
   21310:	10004c1e 	bne	r2,zero,21444 <__gxx_personality_sj0+0x258>
   21314:	d8001c15 	stw	zero,112(sp)
   21318:	00800044 	movi	r2,1
   2131c:	d8001715 	stw	zero,92(sp)
   21320:	d8001815 	stw	zero,96(sp)
   21324:	d9001a17 	ldw	r4,104(sp)
   21328:	20c0004c 	andi	r3,r4,1
   2132c:	18008c26 	beq	r3,zero,21560 <__gxx_personality_sj0+0x374>
   21330:	00c00084 	movi	r3,2
   21334:	10c08726 	beq	r2,r3,21554 <__gxx_personality_sj0+0x368>
   21338:	d8801b03 	ldbu	r2,108(sp)
   2133c:	1000d21e 	bne	r2,zero,21688 <__gxx_personality_sj0+0x49c>
   21340:	d9402217 	ldw	r5,136(sp)
   21344:	d8801717 	ldw	r2,92(sp)
   21348:	d8c01817 	ldw	r3,96(sp)
   2134c:	d9001917 	ldw	r4,100(sp)
   21350:	28bffb15 	stw	r2,-20(r5)
   21354:	d8800917 	ldw	r2,36(sp)
   21358:	28fffc15 	stw	r3,-16(r5)
   2135c:	00c00184 	movi	r3,6
   21360:	28bfff15 	stw	r2,-4(r5)
   21364:	d8801c17 	ldw	r2,112(sp)
   21368:	293ffd15 	stw	r4,-12(r5)
   2136c:	d8c01715 	stw	r3,92(sp)
   21370:	28bffe15 	stw	r2,-8(r5)
   21374:	003fb806 	br	21258 <__alt_data_end+0xf4021258>
   21378:	d8801717 	ldw	r2,92(sp)
   2137c:	113fc936 	bltu	r2,r4,212a4 <__alt_data_end+0xf40212a4>
   21380:	d8c01a17 	ldw	r3,104(sp)
   21384:	d8001b05 	stb	zero,108(sp)
   21388:	00800184 	movi	r2,6
   2138c:	18bfc81e 	bne	r3,r2,212b0 <__alt_data_end+0xf40212b0>
   21390:	d8801b03 	ldbu	r2,108(sp)
   21394:	103fc61e 	bne	r2,zero,212b0 <__alt_data_end+0xf40212b0>
   21398:	d9002217 	ldw	r4,136(sp)
   2139c:	d9402217 	ldw	r5,136(sp)
   213a0:	d8802217 	ldw	r2,136(sp)
   213a4:	213ffe17 	ldw	r4,-8(r4)
   213a8:	297ffb17 	ldw	r5,-20(r5)
   213ac:	10bffd17 	ldw	r2,-12(r2)
   213b0:	d9001c15 	stw	r4,112(sp)
   213b4:	d9401715 	stw	r5,92(sp)
   213b8:	d8801915 	stw	r2,100(sp)
   213bc:	20008726 	beq	r4,zero,215dc <__gxx_personality_sj0+0x3f0>
   213c0:	d8801717 	ldw	r2,92(sp)
   213c4:	10006f0e 	bge	r2,zero,21584 <__gxx_personality_sj0+0x398>
   213c8:	d9002317 	ldw	r4,140(sp)
   213cc:	d9401917 	ldw	r5,100(sp)
   213d0:	d80d883a 	mov	r6,sp
   213d4:	00bfffc4 	movi	r2,-1
   213d8:	d8800b15 	stw	r2,44(sp)
   213dc:	00210b80 	call	210b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   213e0:	d9000503 	ldbu	r4,20(sp)
   213e4:	d9402317 	ldw	r5,140(sp)
   213e8:	0020df00 	call	20df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   213ec:	d9000503 	ldbu	r4,20(sp)
   213f0:	d9402317 	ldw	r5,140(sp)
   213f4:	d8800215 	stw	r2,8(sp)
   213f8:	0020df00 	call	20df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   213fc:	d8c02217 	ldw	r3,136(sp)
   21400:	18bffe15 	stw	r2,-8(r3)
   21404:	00005f06 	br	21584 <__gxx_personality_sj0+0x398>
   21408:	000f883a 	mov	r7,zero
   2140c:	000d883a 	mov	r6,zero
   21410:	19000003 	ldbu	r4,0(r3)
   21414:	18c00044 	addi	r3,r3,1
   21418:	d8c01715 	stw	r3,92(sp)
   2141c:	21401fcc 	andi	r5,r4,127
   21420:	298a983a 	sll	r5,r5,r6
   21424:	21003fcc 	andi	r4,r4,255
   21428:	2100201c 	xori	r4,r4,128
   2142c:	213fe004 	addi	r4,r4,-128
   21430:	394eb03a 	or	r7,r7,r5
   21434:	318001c4 	addi	r6,r6,7
   21438:	203ff516 	blt	r4,zero,21410 <__alt_data_end+0xf4021410>
   2143c:	10bfffc4 	addi	r2,r2,-1
   21440:	10000e26 	beq	r2,zero,2147c <__gxx_personality_sj0+0x290>
   21444:	d8c01717 	ldw	r3,92(sp)
   21448:	0011883a 	mov	r8,zero
   2144c:	000d883a 	mov	r6,zero
   21450:	19000003 	ldbu	r4,0(r3)
   21454:	18c00044 	addi	r3,r3,1
   21458:	21401fcc 	andi	r5,r4,127
   2145c:	298a983a 	sll	r5,r5,r6
   21460:	21003fcc 	andi	r4,r4,255
   21464:	2100201c 	xori	r4,r4,128
   21468:	213fe004 	addi	r4,r4,-128
   2146c:	4150b03a 	or	r8,r8,r5
   21470:	318001c4 	addi	r6,r6,7
   21474:	203ff616 	blt	r4,zero,21450 <__alt_data_end+0xf4021450>
   21478:	003fe306 	br	21408 <__alt_data_end+0xf4021408>
   2147c:	42000044 	addi	r8,r8,1
   21480:	da001c15 	stw	r8,112(sp)
   21484:	38004f26 	beq	r7,zero,215c4 <__gxx_personality_sj0+0x3d8>
   21488:	d8800417 	ldw	r2,16(sp)
   2148c:	39ffffc4 	addi	r7,r7,-1
   21490:	11c5883a 	add	r2,r2,r7
   21494:	d8801815 	stw	r2,96(sp)
   21498:	40002e26 	beq	r8,zero,21554 <__gxx_personality_sj0+0x368>
   2149c:	10004b26 	beq	r2,zero,215cc <__gxx_personality_sj0+0x3e0>
   214a0:	d8c01a17 	ldw	r3,104(sp)
   214a4:	18c0020c 	andi	r3,r3,8
   214a8:	d8c01e15 	stw	r3,120(sp)
   214ac:	1800801e 	bne	r3,zero,216b0 <__gxx_personality_sj0+0x4c4>
   214b0:	d8801b03 	ldbu	r2,108(sp)
   214b4:	1000821e 	bne	r2,zero,216c0 <__gxx_personality_sj0+0x4d4>
   214b8:	d9002217 	ldw	r4,136(sp)
   214bc:	20800017 	ldw	r2,0(r4)
   214c0:	1080004c 	andi	r2,r2,1
   214c4:	1000821e 	bne	r2,zero,216d0 <__gxx_personality_sj0+0x4e4>
   214c8:	d9402217 	ldw	r5,136(sp)
   214cc:	28800504 	addi	r2,r5,20
   214d0:	d8800915 	stw	r2,36(sp)
   214d4:	10bff017 	ldw	r2,-64(r2)
   214d8:	d8801d15 	stw	r2,116(sp)
   214dc:	d9001b03 	ldbu	r4,108(sp)
   214e0:	d8001b45 	stb	zero,109(sp)
   214e4:	d9001f15 	stw	r4,124(sp)
   214e8:	00000e06 	br	21524 <__gxx_personality_sj0+0x338>
   214ec:	01c03d0e 	bge	zero,r7,215e4 <__gxx_personality_sj0+0x3f8>
   214f0:	017fffc4 	movi	r5,-1
   214f4:	d9400b15 	stw	r5,44(sp)
   214f8:	d809883a 	mov	r4,sp
   214fc:	380b883a 	mov	r5,r7
   21500:	0020cf40 	call	20cf4 <_ZL15get_ttype_entryP16lsda_header_infom>
   21504:	10004f26 	beq	r2,zero,21644 <__gxx_personality_sj0+0x458>
   21508:	d8c01d17 	ldw	r3,116(sp)
   2150c:	1800611e 	bne	r3,zero,21694 <__gxx_personality_sj0+0x4a8>
   21510:	d8800617 	ldw	r2,24(sp)
   21514:	10005726 	beq	r2,zero,21674 <__gxx_personality_sj0+0x488>
   21518:	d9401717 	ldw	r5,92(sp)
   2151c:	2885883a 	add	r2,r5,r2
   21520:	d8801815 	stw	r2,96(sp)
   21524:	d9001817 	ldw	r4,96(sp)
   21528:	d9400704 	addi	r5,sp,28
   2152c:	00209640 	call	20964 <_ZL12read_sleb128PKhPl>
   21530:	1009883a 	mov	r4,r2
   21534:	d9400604 	addi	r5,sp,24
   21538:	d8801715 	stw	r2,92(sp)
   2153c:	00209640 	call	20964 <_ZL12read_sleb128PKhPl>
   21540:	d9c00717 	ldw	r7,28(sp)
   21544:	383fe91e 	bne	r7,zero,214ec <__alt_data_end+0xf40214ec>
   21548:	01000044 	movi	r4,1
   2154c:	d9001b45 	stb	r4,109(sp)
   21550:	003fef06 	br	21510 <__alt_data_end+0xf4021510>
   21554:	01000204 	movi	r4,8
   21558:	d9001715 	stw	r4,92(sp)
   2155c:	003f3e06 	br	21258 <__alt_data_end+0xf4021258>
   21560:	d9001a17 	ldw	r4,104(sp)
   21564:	20c0020c 	andi	r3,r4,8
   21568:	1800021e 	bne	r3,zero,21574 <__gxx_personality_sj0+0x388>
   2156c:	d8c01b03 	ldbu	r3,108(sp)
   21570:	18001826 	beq	r3,zero,215d4 <__gxx_personality_sj0+0x3e8>
   21574:	00c00044 	movi	r3,1
   21578:	10c05926 	beq	r2,r3,216e0 <__gxx_personality_sj0+0x4f4>
   2157c:	d9401717 	ldw	r5,92(sp)
   21580:	28005816 	blt	r5,zero,216e4 <__gxx_personality_sj0+0x4f8>
   21584:	d9802217 	ldw	r6,136(sp)
   21588:	d9002317 	ldw	r4,140(sp)
   2158c:	00bfffc4 	movi	r2,-1
   21590:	000b883a 	mov	r5,zero
   21594:	d8800b15 	stw	r2,44(sp)
   21598:	00228740 	call	22874 <_Unwind_SetGR>
   2159c:	d9002317 	ldw	r4,140(sp)
   215a0:	d9801717 	ldw	r6,92(sp)
   215a4:	01400044 	movi	r5,1
   215a8:	00228740 	call	22874 <_Unwind_SetGR>
   215ac:	d9002317 	ldw	r4,140(sp)
   215b0:	d9401c17 	ldw	r5,112(sp)
   215b4:	00228c00 	call	228c0 <_Unwind_SetIP>
   215b8:	010001c4 	movi	r4,7
   215bc:	d9001715 	stw	r4,92(sp)
   215c0:	003f2506 	br	21258 <__alt_data_end+0xf4021258>
   215c4:	d8c01c17 	ldw	r3,112(sp)
   215c8:	183fe226 	beq	r3,zero,21554 <__alt_data_end+0xf4021554>
   215cc:	00800084 	movi	r2,2
   215d0:	003f5206 	br	2131c <__alt_data_end+0xf402131c>
   215d4:	00c00044 	movi	r3,1
   215d8:	10ff791e 	bne	r2,r3,213c0 <__alt_data_end+0xf40213c0>
   215dc:	d9002217 	ldw	r4,136(sp)
   215e0:	002219c0 	call	2219c <__cxa_call_terminate>
   215e4:	d9001d17 	ldw	r4,116(sp)
   215e8:	20000426 	beq	r4,zero,215fc <__gxx_personality_sj0+0x410>
   215ec:	d9401e17 	ldw	r5,120(sp)
   215f0:	2800021e 	bne	r5,zero,215fc <__gxx_personality_sj0+0x410>
   215f4:	d8801f17 	ldw	r2,124(sp)
   215f8:	10001626 	beq	r2,zero,21654 <__gxx_personality_sj0+0x468>
   215fc:	d8c00317 	ldw	r3,12(sp)
   21600:	01ce303a 	nor	r7,zero,r7
   21604:	000d883a 	mov	r6,zero
   21608:	19c7883a 	add	r3,r3,r7
   2160c:	000b883a 	mov	r5,zero
   21610:	18800003 	ldbu	r2,0(r3)
   21614:	18c00044 	addi	r3,r3,1
   21618:	11001fcc 	andi	r4,r2,127
   2161c:	2148983a 	sll	r4,r4,r5
   21620:	10803fcc 	andi	r2,r2,255
   21624:	1080201c 	xori	r2,r2,128
   21628:	10bfe004 	addi	r2,r2,-128
   2162c:	310cb03a 	or	r6,r6,r4
   21630:	294001c4 	addi	r5,r5,7
   21634:	103ff616 	blt	r2,zero,21610 <__alt_data_end+0xf4021610>
   21638:	3005003a 	cmpeq	r2,r6,zero
   2163c:	10803fcc 	andi	r2,r2,255
   21640:	103fb326 	beq	r2,zero,21510 <__alt_data_end+0xf4021510>
   21644:	d8800717 	ldw	r2,28(sp)
   21648:	d8801715 	stw	r2,92(sp)
   2164c:	008000c4 	movi	r2,3
   21650:	003f3406 	br	21324 <__alt_data_end+0xf4021324>
   21654:	d9401d17 	ldw	r5,116(sp)
   21658:	d9800917 	ldw	r6,36(sp)
   2165c:	00ffffc4 	movi	r3,-1
   21660:	d809883a 	mov	r4,sp
   21664:	d8c00b15 	stw	r3,44(sp)
   21668:	0020d480 	call	20d48 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   2166c:	1080005c 	xori	r2,r2,1
   21670:	003ff206 	br	2163c <__alt_data_end+0xf402163c>
   21674:	d8801b43 	ldbu	r2,109(sp)
   21678:	103fb626 	beq	r2,zero,21554 <__alt_data_end+0xf4021554>
   2167c:	d8001715 	stw	zero,92(sp)
   21680:	00800084 	movi	r2,2
   21684:	003f2706 	br	21324 <__alt_data_end+0xf4021324>
   21688:	00800184 	movi	r2,6
   2168c:	d8801715 	stw	r2,92(sp)
   21690:	003ef106 	br	21258 <__alt_data_end+0xf4021258>
   21694:	1009883a 	mov	r4,r2
   21698:	180b883a 	mov	r5,r3
   2169c:	d9800904 	addi	r6,sp,36
   216a0:	00209bc0 	call	209bc <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   216a4:	10803fcc 	andi	r2,r2,255
   216a8:	103fe61e 	bne	r2,zero,21644 <__alt_data_end+0xf4021644>
   216ac:	003f9806 	br	21510 <__alt_data_end+0xf4021510>
   216b0:	00820034 	movhi	r2,2048
   216b4:	1083c704 	addi	r2,r2,3868
   216b8:	d8801d15 	stw	r2,116(sp)
   216bc:	003f8706 	br	214dc <__alt_data_end+0xf40214dc>
   216c0:	00c20034 	movhi	r3,2048
   216c4:	18c3c904 	addi	r3,r3,3876
   216c8:	d8c01d15 	stw	r3,116(sp)
   216cc:	003f8306 	br	214dc <__alt_data_end+0xf40214dc>
   216d0:	20bff517 	ldw	r2,-44(r4)
   216d4:	003f7e06 	br	214d0 <__alt_data_end+0xf40214d0>
   216d8:	d9000c17 	ldw	r4,48(sp)
   216dc:	00220180 	call	22018 <__cxa_begin_catch>
   216e0:	0021cc40 	call	21cc4 <_ZSt9terminatev>
   216e4:	d8c00b15 	stw	r3,44(sp)
   216e8:	0021cec0 	call	21cec <_ZSt10unexpectedv>

000216ec <__cxa_call_unexpected>:
   216ec:	008000b4 	movhi	r2,2
   216f0:	deffe604 	addi	sp,sp,-104
   216f4:	10847b04 	addi	r2,r2,4588
   216f8:	d8800d15 	stw	r2,52(sp)
   216fc:	008000f4 	movhi	r2,3
   21700:	10a8b804 	addi	r2,r2,-23840
   21704:	d8800e15 	stw	r2,56(sp)
   21708:	d8800104 	addi	r2,sp,4
   2170c:	d8800f15 	stw	r2,60(sp)
   21710:	008000b4 	movhi	r2,2
   21714:	1085de04 	addi	r2,r2,6008
   21718:	d9001415 	stw	r4,80(sp)
   2171c:	d9000704 	addi	r4,sp,28
   21720:	dfc01915 	stw	ra,100(sp)
   21724:	d8801015 	stw	r2,64(sp)
   21728:	df001815 	stw	fp,96(sp)
   2172c:	dec01115 	stw	sp,68(sp)
   21730:	00228140 	call	22814 <_Unwind_SjLj_Register>
   21734:	d9001417 	ldw	r4,80(sp)
   21738:	00220180 	call	22018 <__cxa_begin_catch>
   2173c:	d8c01417 	ldw	r3,80(sp)
   21740:	18bffe17 	ldw	r2,-8(r3)
   21744:	193ff717 	ldw	r4,-36(r3)
   21748:	18fffd17 	ldw	r3,-12(r3)
   2174c:	d8800315 	stw	r2,12(sp)
   21750:	d8c01615 	stw	r3,88(sp)
   21754:	d8c01417 	ldw	r3,80(sp)
   21758:	18fffb17 	ldw	r3,-20(r3)
   2175c:	d8c01515 	stw	r3,84(sp)
   21760:	d8c01417 	ldw	r3,80(sp)
   21764:	18fff817 	ldw	r3,-32(r3)
   21768:	d8c01415 	stw	r3,80(sp)
   2176c:	00c00044 	movi	r3,1
   21770:	d8c00815 	stw	r3,32(sp)
   21774:	0021cdc0 	call	21cdc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   21778:	d8c00917 	ldw	r3,36(sp)
   2177c:	d8800817 	ldw	r2,32(sp)
   21780:	d8c01715 	stw	r3,92(sp)
   21784:	10000a26 	beq	r2,zero,217b0 <__cxa_call_unexpected+0xc4>
   21788:	10bfffc4 	addi	r2,r2,-1
   2178c:	10000126 	beq	r2,zero,21794 <__cxa_call_unexpected+0xa8>
   21790:	003da0fa 	break	3
   21794:	d8000815 	stw	zero,32(sp)
   21798:	00220cc0 	call	220cc <__cxa_end_catch>
   2179c:	00220cc0 	call	220cc <__cxa_end_catch>
   217a0:	d9001717 	ldw	r4,92(sp)
   217a4:	00bfffc4 	movi	r2,-1
   217a8:	d8800815 	stw	r2,32(sp)
   217ac:	0022a100 	call	22a10 <_Unwind_SjLj_Resume>
   217b0:	d9001717 	ldw	r4,92(sp)
   217b4:	00220180 	call	22018 <__cxa_begin_catch>
   217b8:	00219200 	call	21920 <__cxa_get_globals_fast>
   217bc:	10800017 	ldw	r2,0(r2)
   217c0:	10c00b17 	ldw	r3,44(r2)
   217c4:	18c0004c 	andi	r3,r3,1
   217c8:	18001e26 	beq	r3,zero,21844 <__cxa_call_unexpected+0x158>
   217cc:	10800017 	ldw	r2,0(r2)
   217d0:	d8801715 	stw	r2,92(sp)
   217d4:	d8801517 	ldw	r2,84(sp)
   217d8:	00802b0e 	bge	zero,r2,21888 <__cxa_call_unexpected+0x19c>
   217dc:	d8c01717 	ldw	r3,92(sp)
   217e0:	d8800317 	ldw	r2,12(sp)
   217e4:	d9801617 	ldw	r6,88(sp)
   217e8:	193ff017 	ldw	r4,-64(r3)
   217ec:	d9c01517 	ldw	r7,84(sp)
   217f0:	d8800015 	stw	r2,0(sp)
   217f4:	180b883a 	mov	r5,r3
   217f8:	00800084 	movi	r2,2
   217fc:	d8800815 	stw	r2,32(sp)
   21800:	0020e780 	call	20e78 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21804:	10803fcc 	andi	r2,r2,255
   21808:	10001e1e 	bne	r2,zero,21884 <__cxa_call_unexpected+0x198>
   2180c:	d8800317 	ldw	r2,12(sp)
   21810:	d9801617 	ldw	r6,88(sp)
   21814:	d9c01517 	ldw	r7,84(sp)
   21818:	01020034 	movhi	r4,2048
   2181c:	d8800015 	stw	r2,0(sp)
   21820:	21011604 	addi	r4,r4,1112
   21824:	00800084 	movi	r2,2
   21828:	000b883a 	mov	r5,zero
   2182c:	d8800815 	stw	r2,32(sp)
   21830:	0020e780 	call	20e78 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   21834:	10803fcc 	andi	r2,r2,255
   21838:	1000051e 	bne	r2,zero,21850 <__cxa_call_unexpected+0x164>
   2183c:	d9001417 	ldw	r4,80(sp)
   21840:	0021c040 	call	21c04 <_ZN10__cxxabiv111__terminateEPFvvE>
   21844:	10801004 	addi	r2,r2,64
   21848:	d8801715 	stw	r2,92(sp)
   2184c:	003fe106 	br	217d4 <__alt_data_end+0xf40217d4>
   21850:	01000104 	movi	r4,4
   21854:	00223b00 	call	223b0 <__cxa_allocate_exception>
   21858:	00c20034 	movhi	r3,2048
   2185c:	18c13104 	addi	r3,r3,1220
   21860:	01420034 	movhi	r5,2048
   21864:	018000b4 	movhi	r6,2
   21868:	10c00015 	stw	r3,0(r2)
   2186c:	29411604 	addi	r5,r5,1112
   21870:	00c00084 	movi	r3,2
   21874:	31895c04 	addi	r6,r6,9584
   21878:	1009883a 	mov	r4,r2
   2187c:	d8c00815 	stw	r3,32(sp)
   21880:	00222380 	call	22238 <__cxa_throw>
   21884:	00222c80 	call	222c8 <__cxa_rethrow>
   21888:	d9401617 	ldw	r5,88(sp)
   2188c:	00800084 	movi	r2,2
   21890:	0009883a 	mov	r4,zero
   21894:	d9800104 	addi	r6,sp,4
   21898:	d8800815 	stw	r2,32(sp)
   2189c:	00210b80 	call	210b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   218a0:	d8801717 	ldw	r2,92(sp)
   218a4:	d9c01517 	ldw	r7,84(sp)
   218a8:	d9000104 	addi	r4,sp,4
   218ac:	117ff017 	ldw	r5,-64(r2)
   218b0:	100d883a 	mov	r6,r2
   218b4:	0020d480 	call	20d48 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   218b8:	10803fcc 	andi	r2,r2,255
   218bc:	1000171e 	bne	r2,zero,2191c <__cxa_call_unexpected+0x230>
   218c0:	d9c01517 	ldw	r7,84(sp)
   218c4:	01420034 	movhi	r5,2048
   218c8:	00800084 	movi	r2,2
   218cc:	29411604 	addi	r5,r5,1112
   218d0:	d9000104 	addi	r4,sp,4
   218d4:	000d883a 	mov	r6,zero
   218d8:	d8800815 	stw	r2,32(sp)
   218dc:	0020d480 	call	20d48 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   218e0:	10803fcc 	andi	r2,r2,255
   218e4:	103fd526 	beq	r2,zero,2183c <__alt_data_end+0xf402183c>
   218e8:	01000104 	movi	r4,4
   218ec:	00223b00 	call	223b0 <__cxa_allocate_exception>
   218f0:	00c20034 	movhi	r3,2048
   218f4:	18c13104 	addi	r3,r3,1220
   218f8:	01420034 	movhi	r5,2048
   218fc:	018000b4 	movhi	r6,2
   21900:	10c00015 	stw	r3,0(r2)
   21904:	29411604 	addi	r5,r5,1112
   21908:	00c00084 	movi	r3,2
   2190c:	31895c04 	addi	r6,r6,9584
   21910:	1009883a 	mov	r4,r2
   21914:	d8c00815 	stw	r3,32(sp)
   21918:	00222380 	call	22238 <__cxa_throw>
   2191c:	00222c80 	call	222c8 <__cxa_rethrow>

00021920 <__cxa_get_globals_fast>:
   21920:	00820034 	movhi	r2,2048
   21924:	1083dc04 	addi	r2,r2,3952
   21928:	f800283a 	ret

0002192c <__cxa_get_globals>:
   2192c:	00820034 	movhi	r2,2048
   21930:	1083dc04 	addi	r2,r2,3952
   21934:	f800283a 	ret

00021938 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   21938:	20800017 	ldw	r2,0(r4)
   2193c:	defffa04 	addi	sp,sp,-24
   21940:	dc000415 	stw	r16,16(sp)
   21944:	10800617 	ldw	r2,24(r2)
   21948:	3021883a 	mov	r16,r6
   2194c:	31800017 	ldw	r6,0(r6)
   21950:	00c00404 	movi	r3,16
   21954:	d8c00215 	stw	r3,8(sp)
   21958:	dfc00515 	stw	ra,20(sp)
   2195c:	d8000015 	stw	zero,0(sp)
   21960:	d8000115 	stw	zero,4(sp)
   21964:	d8000315 	stw	zero,12(sp)
   21968:	d80f883a 	mov	r7,sp
   2196c:	103ee83a 	callr	r2
   21970:	d8800117 	ldw	r2,4(sp)
   21974:	00c00184 	movi	r3,6
   21978:	1080018c 	andi	r2,r2,6
   2197c:	10c00526 	beq	r2,r3,21994 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   21980:	0005883a 	mov	r2,zero
   21984:	dfc00517 	ldw	ra,20(sp)
   21988:	dc000417 	ldw	r16,16(sp)
   2198c:	dec00604 	addi	sp,sp,24
   21990:	f800283a 	ret
   21994:	d8c00017 	ldw	r3,0(sp)
   21998:	00800044 	movi	r2,1
   2199c:	80c00015 	stw	r3,0(r16)
   219a0:	dfc00517 	ldw	ra,20(sp)
   219a4:	dc000417 	ldw	r16,16(sp)
   219a8:	dec00604 	addi	sp,sp,24
   219ac:	f800283a 	ret

000219b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   219b0:	d8800017 	ldw	r2,0(sp)
   219b4:	11800226 	beq	r2,r6,219c0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   219b8:	00800044 	movi	r2,1
   219bc:	f800283a 	ret
   219c0:	00800184 	movi	r2,6
   219c4:	f800283a 	ret

000219c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   219c8:	00820034 	movhi	r2,2048
   219cc:	1080d704 	addi	r2,r2,860
   219d0:	20800015 	stw	r2,0(r4)
   219d4:	002234c1 	jmpi	2234c <_ZNSt9type_infoD1Ev>

000219d8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   219d8:	defffe04 	addi	sp,sp,-8
   219dc:	00820034 	movhi	r2,2048
   219e0:	dc000015 	stw	r16,0(sp)
   219e4:	dfc00115 	stw	ra,4(sp)
   219e8:	1080d704 	addi	r2,r2,860
   219ec:	20800015 	stw	r2,0(r4)
   219f0:	2021883a 	mov	r16,r4
   219f4:	002234c0 	call	2234c <_ZNSt9type_infoD1Ev>
   219f8:	8009883a 	mov	r4,r16
   219fc:	dfc00117 	ldw	ra,4(sp)
   21a00:	dc000017 	ldw	r16,0(sp)
   21a04:	dec00204 	addi	sp,sp,8
   21a08:	0021c001 	jmpi	21c00 <_ZdlPv>

00021a0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   21a0c:	21000117 	ldw	r4,4(r4)
   21a10:	29400117 	ldw	r5,4(r5)
   21a14:	defffd04 	addi	sp,sp,-12
   21a18:	dc400115 	stw	r17,4(sp)
   21a1c:	dc000015 	stw	r16,0(sp)
   21a20:	dfc00215 	stw	ra,8(sp)
   21a24:	3023883a 	mov	r17,r6
   21a28:	3821883a 	mov	r16,r7
   21a2c:	21400b26 	beq	r4,r5,21a5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   21a30:	20c00007 	ldb	r3,0(r4)
   21a34:	00800a84 	movi	r2,42
   21a38:	18800226 	beq	r3,r2,21a44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   21a3c:	00236840 	call	23684 <strcmp>
   21a40:	10000626 	beq	r2,zero,21a5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
   21a44:	0005883a 	mov	r2,zero
   21a48:	dfc00217 	ldw	ra,8(sp)
   21a4c:	dc400117 	ldw	r17,4(sp)
   21a50:	dc000017 	ldw	r16,0(sp)
   21a54:	dec00304 	addi	sp,sp,12
   21a58:	f800283a 	ret
   21a5c:	00800204 	movi	r2,8
   21a60:	80800315 	stw	r2,12(r16)
   21a64:	00800184 	movi	r2,6
   21a68:	80800115 	stw	r2,4(r16)
   21a6c:	84400015 	stw	r17,0(r16)
   21a70:	00800044 	movi	r2,1
   21a74:	003ff406 	br	21a48 <__alt_data_end+0xf4021a48>

00021a78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   21a78:	20800117 	ldw	r2,4(r4)
   21a7c:	28c00117 	ldw	r3,4(r5)
   21a80:	10c02926 	beq	r2,r3,21b28 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   21a84:	defffb04 	addi	sp,sp,-20
   21a88:	dcc00315 	stw	r19,12(sp)
   21a8c:	dc800215 	stw	r18,8(sp)
   21a90:	dc400115 	stw	r17,4(sp)
   21a94:	dc000015 	stw	r16,0(sp)
   21a98:	dfc00415 	stw	ra,16(sp)
   21a9c:	2821883a 	mov	r16,r5
   21aa0:	11400007 	ldb	r5,0(r2)
   21aa4:	2025883a 	mov	r18,r4
   21aa8:	01000a84 	movi	r4,42
   21aac:	3823883a 	mov	r17,r7
   21ab0:	3027883a 	mov	r19,r6
   21ab4:	29000426 	beq	r5,r4,21ac8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
   21ab8:	1009883a 	mov	r4,r2
   21abc:	180b883a 	mov	r5,r3
   21ac0:	00236840 	call	23684 <strcmp>
   21ac4:	10000a26 	beq	r2,zero,21af0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
   21ac8:	008000c4 	movi	r2,3
   21acc:	14400a2e 	bgeu	r2,r17,21af8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   21ad0:	0005883a 	mov	r2,zero
   21ad4:	dfc00417 	ldw	ra,16(sp)
   21ad8:	dcc00317 	ldw	r19,12(sp)
   21adc:	dc800217 	ldw	r18,8(sp)
   21ae0:	dc400117 	ldw	r17,4(sp)
   21ae4:	dc000017 	ldw	r16,0(sp)
   21ae8:	dec00504 	addi	sp,sp,20
   21aec:	f800283a 	ret
   21af0:	00800044 	movi	r2,1
   21af4:	003ff706 	br	21ad4 <__alt_data_end+0xf4021ad4>
   21af8:	80800017 	ldw	r2,0(r16)
   21afc:	8009883a 	mov	r4,r16
   21b00:	900b883a 	mov	r5,r18
   21b04:	10800517 	ldw	r2,20(r2)
   21b08:	980d883a 	mov	r6,r19
   21b0c:	dfc00417 	ldw	ra,16(sp)
   21b10:	dcc00317 	ldw	r19,12(sp)
   21b14:	dc800217 	ldw	r18,8(sp)
   21b18:	dc400117 	ldw	r17,4(sp)
   21b1c:	dc000017 	ldw	r16,0(sp)
   21b20:	dec00504 	addi	sp,sp,20
   21b24:	1000683a 	jmp	r2
   21b28:	00800044 	movi	r2,1
   21b2c:	f800283a 	ret

00021b30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   21b30:	defffb04 	addi	sp,sp,-20
   21b34:	dc400315 	stw	r17,12(sp)
   21b38:	d8800717 	ldw	r2,28(sp)
   21b3c:	dc400517 	ldw	r17,20(sp)
   21b40:	dc000215 	stw	r16,8(sp)
   21b44:	dfc00415 	stw	ra,16(sp)
   21b48:	24000117 	ldw	r16,4(r4)
   21b4c:	88801026 	beq	r17,r2,21b90 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   21b50:	39400117 	ldw	r5,4(r7)
   21b54:	81401d26 	beq	r16,r5,21bcc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   21b58:	80c00007 	ldb	r3,0(r16)
   21b5c:	00800a84 	movi	r2,42
   21b60:	18800526 	beq	r3,r2,21b78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   21b64:	8009883a 	mov	r4,r16
   21b68:	d9800115 	stw	r6,4(sp)
   21b6c:	00236840 	call	23684 <strcmp>
   21b70:	d9800117 	ldw	r6,4(sp)
   21b74:	10001526 	beq	r2,zero,21bcc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
   21b78:	0005883a 	mov	r2,zero
   21b7c:	dfc00417 	ldw	ra,16(sp)
   21b80:	dc400317 	ldw	r17,12(sp)
   21b84:	dc000217 	ldw	r16,8(sp)
   21b88:	dec00504 	addi	sp,sp,20
   21b8c:	f800283a 	ret
   21b90:	d8800617 	ldw	r2,24(sp)
   21b94:	11400117 	ldw	r5,4(r2)
   21b98:	81401326 	beq	r16,r5,21be8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   21b9c:	80c00007 	ldb	r3,0(r16)
   21ba0:	00800a84 	movi	r2,42
   21ba4:	18801326 	beq	r3,r2,21bf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   21ba8:	8009883a 	mov	r4,r16
   21bac:	d9800115 	stw	r6,4(sp)
   21bb0:	d9c00015 	stw	r7,0(sp)
   21bb4:	00236840 	call	23684 <strcmp>
   21bb8:	d9800117 	ldw	r6,4(sp)
   21bbc:	d9c00017 	ldw	r7,0(sp)
   21bc0:	10000926 	beq	r2,zero,21be8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   21bc4:	39400117 	ldw	r5,4(r7)
   21bc8:	817fe61e 	bne	r16,r5,21b64 <__alt_data_end+0xf4021b64>
   21bcc:	d8800817 	ldw	r2,32(sp)
   21bd0:	d8c00817 	ldw	r3,32(sp)
   21bd4:	14400015 	stw	r17,0(r2)
   21bd8:	11800115 	stw	r6,4(r2)
   21bdc:	00800044 	movi	r2,1
   21be0:	18800315 	stw	r2,12(r3)
   21be4:	003fe406 	br	21b78 <__alt_data_end+0xf4021b78>
   21be8:	d8800817 	ldw	r2,32(sp)
   21bec:	11800215 	stw	r6,8(r2)
   21bf0:	003fe106 	br	21b78 <__alt_data_end+0xf4021b78>
   21bf4:	38800117 	ldw	r2,4(r7)
   21bf8:	80bfdf1e 	bne	r16,r2,21b78 <__alt_data_end+0xf4021b78>
   21bfc:	003ff306 	br	21bcc <__alt_data_end+0xf4021bcc>

00021c00 <_ZdlPv>:
   21c00:	0022b581 	jmpi	22b58 <free>

00021c04 <_ZN10__cxxabiv111__terminateEPFvvE>:
   21c04:	008000b4 	movhi	r2,2
   21c08:	deffef04 	addi	sp,sp,-68
   21c0c:	10847b04 	addi	r2,r2,4588
   21c10:	d8800615 	stw	r2,24(sp)
   21c14:	008000f4 	movhi	r2,3
   21c18:	10a8bc04 	addi	r2,r2,-23824
   21c1c:	d8800715 	stw	r2,28(sp)
   21c20:	008000b4 	movhi	r2,2
   21c24:	10871704 	addi	r2,r2,7260
   21c28:	d9000d15 	stw	r4,52(sp)
   21c2c:	d809883a 	mov	r4,sp
   21c30:	d8800915 	stw	r2,36(sp)
   21c34:	dfc01015 	stw	ra,64(sp)
   21c38:	df000f15 	stw	fp,60(sp)
   21c3c:	dec00815 	stw	sp,32(sp)
   21c40:	dec00a15 	stw	sp,40(sp)
   21c44:	00228140 	call	22814 <_Unwind_SjLj_Register>
   21c48:	00800044 	movi	r2,1
   21c4c:	d8800115 	stw	r2,4(sp)
   21c50:	d8800d17 	ldw	r2,52(sp)
   21c54:	103ee83a 	callr	r2
   21c58:	0022b2c0 	call	22b2c <abort>
   21c5c:	d8c00217 	ldw	r3,8(sp)
   21c60:	d8800117 	ldw	r2,4(sp)
   21c64:	d8c00d15 	stw	r3,52(sp)
   21c68:	d8c00317 	ldw	r3,12(sp)
   21c6c:	d8c00e15 	stw	r3,56(sp)
   21c70:	10000b26 	beq	r2,zero,21ca0 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   21c74:	10bfffc4 	addi	r2,r2,-1
   21c78:	10000126 	beq	r2,zero,21c80 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   21c7c:	003da0fa 	break	3
   21c80:	d8000115 	stw	zero,4(sp)
   21c84:	00220cc0 	call	220cc <__cxa_end_catch>
   21c88:	d8c00e17 	ldw	r3,56(sp)
   21c8c:	00bfffc4 	movi	r2,-1
   21c90:	18800826 	beq	r3,r2,21cb4 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   21c94:	d9000d17 	ldw	r4,52(sp)
   21c98:	d8800115 	stw	r2,4(sp)
   21c9c:	0022a100 	call	22a10 <_Unwind_SjLj_Resume>
   21ca0:	d9000d17 	ldw	r4,52(sp)
   21ca4:	00220180 	call	22018 <__cxa_begin_catch>
   21ca8:	00800084 	movi	r2,2
   21cac:	d8800115 	stw	r2,4(sp)
   21cb0:	0022b2c0 	call	22b2c <abort>
   21cb4:	d8800e17 	ldw	r2,56(sp)
   21cb8:	d9000d17 	ldw	r4,52(sp)
   21cbc:	d8800115 	stw	r2,4(sp)
   21cc0:	00216ec0 	call	216ec <__cxa_call_unexpected>

00021cc4 <_ZSt9terminatev>:
   21cc4:	00820034 	movhi	r2,2048
   21cc8:	1083c204 	addi	r2,r2,3848
   21ccc:	11000017 	ldw	r4,0(r2)
   21cd0:	deffff04 	addi	sp,sp,-4
   21cd4:	dfc00015 	stw	ra,0(sp)
   21cd8:	0021c040 	call	21c04 <_ZN10__cxxabiv111__terminateEPFvvE>

00021cdc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   21cdc:	deffff04 	addi	sp,sp,-4
   21ce0:	dfc00015 	stw	ra,0(sp)
   21ce4:	203ee83a 	callr	r4
   21ce8:	0021cc40 	call	21cc4 <_ZSt9terminatev>

00021cec <_ZSt10unexpectedv>:
   21cec:	00820034 	movhi	r2,2048
   21cf0:	1083cb04 	addi	r2,r2,3884
   21cf4:	11000017 	ldw	r4,0(r2)
   21cf8:	deffff04 	addi	sp,sp,-4
   21cfc:	dfc00015 	stw	ra,0(sp)
   21d00:	0021cdc0 	call	21cdc <_ZN10__cxxabiv112__unexpectedEPFvvE>

00021d04 <_ZSt13set_terminatePFvvE>:
   21d04:	00c20034 	movhi	r3,2048
   21d08:	18c3c204 	addi	r3,r3,3848
   21d0c:	18800017 	ldw	r2,0(r3)
   21d10:	19000015 	stw	r4,0(r3)
   21d14:	f800283a 	ret

00021d18 <_ZSt13get_terminatev>:
   21d18:	00820034 	movhi	r2,2048
   21d1c:	1083c204 	addi	r2,r2,3848
   21d20:	10800017 	ldw	r2,0(r2)
   21d24:	f800283a 	ret

00021d28 <_ZSt14set_unexpectedPFvvE>:
   21d28:	00c20034 	movhi	r3,2048
   21d2c:	18c3cb04 	addi	r3,r3,3884
   21d30:	18800017 	ldw	r2,0(r3)
   21d34:	19000015 	stw	r4,0(r3)
   21d38:	f800283a 	ret

00021d3c <_ZSt14get_unexpectedv>:
   21d3c:	00820034 	movhi	r2,2048
   21d40:	1083cb04 	addi	r2,r2,3884
   21d44:	10800017 	ldw	r2,0(r2)
   21d48:	f800283a 	ret

00021d4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   21d4c:	00820034 	movhi	r2,2048
   21d50:	1080ef04 	addi	r2,r2,956
   21d54:	20800015 	stw	r2,0(r4)
   21d58:	00219c81 	jmpi	219c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00021d5c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   21d5c:	defffe04 	addi	sp,sp,-8
   21d60:	00820034 	movhi	r2,2048
   21d64:	dc000015 	stw	r16,0(sp)
   21d68:	dfc00115 	stw	ra,4(sp)
   21d6c:	1080ef04 	addi	r2,r2,956
   21d70:	20800015 	stw	r2,0(r4)
   21d74:	2021883a 	mov	r16,r4
   21d78:	00219c80 	call	219c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   21d7c:	8009883a 	mov	r4,r16
   21d80:	dfc00117 	ldw	ra,4(sp)
   21d84:	dc000017 	ldw	r16,0(sp)
   21d88:	dec00204 	addi	sp,sp,8
   21d8c:	0021c001 	jmpi	21c00 <_ZdlPv>

00021d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   21d90:	defff504 	addi	sp,sp,-44
   21d94:	dc000115 	stw	r16,4(sp)
   21d98:	38800117 	ldw	r2,4(r7)
   21d9c:	24000117 	ldw	r16,4(r4)
   21da0:	ddc00815 	stw	r23,32(sp)
   21da4:	dd800715 	stw	r22,28(sp)
   21da8:	dd400615 	stw	r21,24(sp)
   21dac:	dd000515 	stw	r20,20(sp)
   21db0:	dcc00415 	stw	r19,16(sp)
   21db4:	dc800315 	stw	r18,12(sp)
   21db8:	dc400215 	stw	r17,8(sp)
   21dbc:	dfc00a15 	stw	ra,40(sp)
   21dc0:	df000915 	stw	fp,36(sp)
   21dc4:	202b883a 	mov	r21,r4
   21dc8:	382d883a 	mov	r22,r7
   21dcc:	2823883a 	mov	r17,r5
   21dd0:	dc800b17 	ldw	r18,44(sp)
   21dd4:	ddc00c17 	ldw	r23,48(sp)
   21dd8:	dd000d17 	ldw	r20,52(sp)
   21ddc:	dcc00e17 	ldw	r19,56(sp)
   21de0:	80801f26 	beq	r16,r2,21e60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21de4:	87000007 	ldb	fp,0(r16)
   21de8:	00c00a84 	movi	r3,42
   21dec:	e0c00626 	beq	fp,r3,21e08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   21df0:	8009883a 	mov	r4,r16
   21df4:	100b883a 	mov	r5,r2
   21df8:	d9800015 	stw	r6,0(sp)
   21dfc:	00236840 	call	23684 <strcmp>
   21e00:	d9800017 	ldw	r6,0(sp)
   21e04:	10001626 	beq	r2,zero,21e60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
   21e08:	95002c26 	beq	r18,r20,21ebc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
   21e0c:	a9000217 	ldw	r4,8(r21)
   21e10:	880b883a 	mov	r5,r17
   21e14:	b00f883a 	mov	r7,r22
   21e18:	20800017 	ldw	r2,0(r4)
   21e1c:	dc800b15 	stw	r18,44(sp)
   21e20:	ddc00c15 	stw	r23,48(sp)
   21e24:	dd000d15 	stw	r20,52(sp)
   21e28:	dcc00e15 	stw	r19,56(sp)
   21e2c:	10800717 	ldw	r2,28(r2)
   21e30:	dfc00a17 	ldw	ra,40(sp)
   21e34:	df000917 	ldw	fp,36(sp)
   21e38:	ddc00817 	ldw	r23,32(sp)
   21e3c:	dd800717 	ldw	r22,28(sp)
   21e40:	dd400617 	ldw	r21,24(sp)
   21e44:	dd000517 	ldw	r20,20(sp)
   21e48:	dcc00417 	ldw	r19,16(sp)
   21e4c:	dc800317 	ldw	r18,12(sp)
   21e50:	dc400217 	ldw	r17,8(sp)
   21e54:	dc000117 	ldw	r16,4(sp)
   21e58:	dec00b04 	addi	sp,sp,44
   21e5c:	1000683a 	jmp	r2
   21e60:	9c800015 	stw	r18,0(r19)
   21e64:	99800115 	stw	r6,4(r19)
   21e68:	88001116 	blt	r17,zero,21eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   21e6c:	9463883a 	add	r17,r18,r17
   21e70:	a4401d26 	beq	r20,r17,21ee8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   21e74:	00800044 	movi	r2,1
   21e78:	98800315 	stw	r2,12(r19)
   21e7c:	0005883a 	mov	r2,zero
   21e80:	dfc00a17 	ldw	ra,40(sp)
   21e84:	df000917 	ldw	fp,36(sp)
   21e88:	ddc00817 	ldw	r23,32(sp)
   21e8c:	dd800717 	ldw	r22,28(sp)
   21e90:	dd400617 	ldw	r21,24(sp)
   21e94:	dd000517 	ldw	r20,20(sp)
   21e98:	dcc00417 	ldw	r19,16(sp)
   21e9c:	dc800317 	ldw	r18,12(sp)
   21ea0:	dc400217 	ldw	r17,8(sp)
   21ea4:	dc000117 	ldw	r16,4(sp)
   21ea8:	dec00b04 	addi	sp,sp,44
   21eac:	f800283a 	ret
   21eb0:	00bfff84 	movi	r2,-2
   21eb4:	88bff11e 	bne	r17,r2,21e7c <__alt_data_end+0xf4021e7c>
   21eb8:	003fee06 	br	21e74 <__alt_data_end+0xf4021e74>
   21ebc:	b9400117 	ldw	r5,4(r23)
   21ec0:	81400726 	beq	r16,r5,21ee0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   21ec4:	00800a84 	movi	r2,42
   21ec8:	e0bfd026 	beq	fp,r2,21e0c <__alt_data_end+0xf4021e0c>
   21ecc:	8009883a 	mov	r4,r16
   21ed0:	d9800015 	stw	r6,0(sp)
   21ed4:	00236840 	call	23684 <strcmp>
   21ed8:	d9800017 	ldw	r6,0(sp)
   21edc:	103fcb1e 	bne	r2,zero,21e0c <__alt_data_end+0xf4021e0c>
   21ee0:	99800215 	stw	r6,8(r19)
   21ee4:	003fe506 	br	21e7c <__alt_data_end+0xf4021e7c>
   21ee8:	00800184 	movi	r2,6
   21eec:	003fe206 	br	21e78 <__alt_data_end+0xf4021e78>

00021ef0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   21ef0:	defffa04 	addi	sp,sp,-24
   21ef4:	dc000215 	stw	r16,8(sp)
   21ef8:	dc000617 	ldw	r16,24(sp)
   21efc:	dc800415 	stw	r18,16(sp)
   21f00:	dc400315 	stw	r17,12(sp)
   21f04:	dfc00515 	stw	ra,20(sp)
   21f08:	2023883a 	mov	r17,r4
   21f0c:	2825883a 	mov	r18,r5
   21f10:	81800b26 	beq	r16,r6,21f40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   21f14:	89000217 	ldw	r4,8(r17)
   21f18:	900b883a 	mov	r5,r18
   21f1c:	20800017 	ldw	r2,0(r4)
   21f20:	dc000615 	stw	r16,24(sp)
   21f24:	10800817 	ldw	r2,32(r2)
   21f28:	dfc00517 	ldw	ra,20(sp)
   21f2c:	dc800417 	ldw	r18,16(sp)
   21f30:	dc400317 	ldw	r17,12(sp)
   21f34:	dc000217 	ldw	r16,8(sp)
   21f38:	dec00604 	addi	sp,sp,24
   21f3c:	1000683a 	jmp	r2
   21f40:	21000117 	ldw	r4,4(r4)
   21f44:	39400117 	ldw	r5,4(r7)
   21f48:	21400926 	beq	r4,r5,21f70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   21f4c:	20c00007 	ldb	r3,0(r4)
   21f50:	00800a84 	movi	r2,42
   21f54:	18bfef26 	beq	r3,r2,21f14 <__alt_data_end+0xf4021f14>
   21f58:	d9800015 	stw	r6,0(sp)
   21f5c:	d9c00115 	stw	r7,4(sp)
   21f60:	00236840 	call	23684 <strcmp>
   21f64:	d9800017 	ldw	r6,0(sp)
   21f68:	d9c00117 	ldw	r7,4(sp)
   21f6c:	103fe91e 	bne	r2,zero,21f14 <__alt_data_end+0xf4021f14>
   21f70:	00800184 	movi	r2,6
   21f74:	dfc00517 	ldw	ra,20(sp)
   21f78:	dc800417 	ldw	r18,16(sp)
   21f7c:	dc400317 	ldw	r17,12(sp)
   21f80:	dc000217 	ldw	r16,8(sp)
   21f84:	dec00604 	addi	sp,sp,24
   21f88:	f800283a 	ret

00021f8c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   21f8c:	defffb04 	addi	sp,sp,-20
   21f90:	dcc00315 	stw	r19,12(sp)
   21f94:	dc800215 	stw	r18,8(sp)
   21f98:	dc400115 	stw	r17,4(sp)
   21f9c:	dc000015 	stw	r16,0(sp)
   21fa0:	dfc00415 	stw	ra,16(sp)
   21fa4:	2027883a 	mov	r19,r4
   21fa8:	2825883a 	mov	r18,r5
   21fac:	3023883a 	mov	r17,r6
   21fb0:	3821883a 	mov	r16,r7
   21fb4:	0021a0c0 	call	21a0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   21fb8:	10c03fcc 	andi	r3,r2,255
   21fbc:	18000726 	beq	r3,zero,21fdc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   21fc0:	dfc00417 	ldw	ra,16(sp)
   21fc4:	dcc00317 	ldw	r19,12(sp)
   21fc8:	dc800217 	ldw	r18,8(sp)
   21fcc:	dc400117 	ldw	r17,4(sp)
   21fd0:	dc000017 	ldw	r16,0(sp)
   21fd4:	dec00504 	addi	sp,sp,20
   21fd8:	f800283a 	ret
   21fdc:	99000217 	ldw	r4,8(r19)
   21fe0:	900b883a 	mov	r5,r18
   21fe4:	880d883a 	mov	r6,r17
   21fe8:	20800017 	ldw	r2,0(r4)
   21fec:	800f883a 	mov	r7,r16
   21ff0:	10800617 	ldw	r2,24(r2)
   21ff4:	dfc00417 	ldw	ra,16(sp)
   21ff8:	dcc00317 	ldw	r19,12(sp)
   21ffc:	dc800217 	ldw	r18,8(sp)
   22000:	dc400117 	ldw	r17,4(sp)
   22004:	dc000017 	ldw	r16,0(sp)
   22008:	dec00504 	addi	sp,sp,20
   2200c:	1000683a 	jmp	r2

00022010 <__cxa_get_exception_ptr>:
   22010:	20bfff17 	ldw	r2,-4(r4)
   22014:	f800283a 	ret

00022018 <__cxa_begin_catch>:
   22018:	defffe04 	addi	sp,sp,-8
   2201c:	dc000015 	stw	r16,0(sp)
   22020:	dfc00115 	stw	ra,4(sp)
   22024:	2021883a 	mov	r16,r4
   22028:	002192c0 	call	2192c <__cxa_get_globals>
   2202c:	81000017 	ldw	r4,0(r16)
   22030:	80c00117 	ldw	r3,4(r16)
   22034:	01af3574 	movhi	r6,48341
   22038:	31b54004 	addi	r6,r6,-11008
   2203c:	016e2cb4 	movhi	r5,47282
   22040:	296aaf04 	addi	r5,r5,-21828
   22044:	218d883a 	add	r6,r4,r6
   22048:	3109803a 	cmpltu	r4,r6,r4
   2204c:	1947883a 	add	r3,r3,r5
   22050:	20c7883a 	add	r3,r4,r3
   22054:	817ff504 	addi	r5,r16,-44
   22058:	11000017 	ldw	r4,0(r2)
   2205c:	18000726 	beq	r3,zero,2207c <__cxa_begin_catch+0x64>
   22060:	2000191e 	bne	r4,zero,220c8 <__cxa_begin_catch+0xb0>
   22064:	11400015 	stw	r5,0(r2)
   22068:	0005883a 	mov	r2,zero
   2206c:	dfc00117 	ldw	ra,4(sp)
   22070:	dc000017 	ldw	r16,0(sp)
   22074:	dec00204 	addi	sp,sp,8
   22078:	f800283a 	ret
   2207c:	01c00044 	movi	r7,1
   22080:	39bff736 	bltu	r7,r6,22060 <__alt_data_end+0xf4022060>
   22084:	80fffa17 	ldw	r3,-24(r16)
   22088:	18000d16 	blt	r3,zero,220c0 <__cxa_begin_catch+0xa8>
   2208c:	18c00044 	addi	r3,r3,1
   22090:	11800117 	ldw	r6,4(r2)
   22094:	80fffa15 	stw	r3,-24(r16)
   22098:	30ffffc4 	addi	r3,r6,-1
   2209c:	10c00115 	stw	r3,4(r2)
   220a0:	21400226 	beq	r4,r5,220ac <__cxa_begin_catch+0x94>
   220a4:	813ff915 	stw	r4,-28(r16)
   220a8:	11400015 	stw	r5,0(r2)
   220ac:	80bfff17 	ldw	r2,-4(r16)
   220b0:	dfc00117 	ldw	ra,4(sp)
   220b4:	dc000017 	ldw	r16,0(sp)
   220b8:	dec00204 	addi	sp,sp,8
   220bc:	f800283a 	ret
   220c0:	38c7c83a 	sub	r3,r7,r3
   220c4:	003ff206 	br	22090 <__alt_data_end+0xf4022090>
   220c8:	0021cc40 	call	21cc4 <_ZSt9terminatev>

000220cc <__cxa_end_catch>:
   220cc:	deffff04 	addi	sp,sp,-4
   220d0:	dfc00015 	stw	ra,0(sp)
   220d4:	00219200 	call	21920 <__cxa_get_globals_fast>
   220d8:	11000017 	ldw	r4,0(r2)
   220dc:	20001326 	beq	r4,zero,2212c <__cxa_end_catch+0x60>
   220e0:	21400b17 	ldw	r5,44(r4)
   220e4:	01ef3574 	movhi	r7,48341
   220e8:	39f54004 	addi	r7,r7,-11008
   220ec:	29cf883a 	add	r7,r5,r7
   220f0:	20c00c17 	ldw	r3,48(r4)
   220f4:	394d803a 	cmpltu	r6,r7,r5
   220f8:	016e2cb4 	movhi	r5,47282
   220fc:	296aaf04 	addi	r5,r5,-21828
   22100:	1947883a 	add	r3,r3,r5
   22104:	30c7883a 	add	r3,r6,r3
   22108:	18000b1e 	bne	r3,zero,22138 <__cxa_end_catch+0x6c>
   2210c:	00c00044 	movi	r3,1
   22110:	19c00936 	bltu	r3,r7,22138 <__cxa_end_catch+0x6c>
   22114:	20c00517 	ldw	r3,20(r4)
   22118:	18000c16 	blt	r3,zero,2214c <__cxa_end_catch+0x80>
   2211c:	197fffc4 	addi	r5,r3,-1
   22120:	28000f26 	beq	r5,zero,22160 <__cxa_end_catch+0x94>
   22124:	18001426 	beq	r3,zero,22178 <__cxa_end_catch+0xac>
   22128:	21400515 	stw	r5,20(r4)
   2212c:	dfc00017 	ldw	ra,0(sp)
   22130:	dec00104 	addi	sp,sp,4
   22134:	f800283a 	ret
   22138:	21000b04 	addi	r4,r4,44
   2213c:	10000015 	stw	zero,0(r2)
   22140:	dfc00017 	ldw	ra,0(sp)
   22144:	dec00104 	addi	sp,sp,4
   22148:	0022aa01 	jmpi	22aa0 <_Unwind_DeleteException>
   2214c:	19400044 	addi	r5,r3,1
   22150:	283ff51e 	bne	r5,zero,22128 <__alt_data_end+0xf4022128>
   22154:	20c00417 	ldw	r3,16(r4)
   22158:	10c00015 	stw	r3,0(r2)
   2215c:	003ff206 	br	22128 <__alt_data_end+0xf4022128>
   22160:	20c00417 	ldw	r3,16(r4)
   22164:	21000b04 	addi	r4,r4,44
   22168:	10c00015 	stw	r3,0(r2)
   2216c:	dfc00017 	ldw	ra,0(sp)
   22170:	dec00104 	addi	sp,sp,4
   22174:	0022aa01 	jmpi	22aa0 <_Unwind_DeleteException>
   22178:	0021cc40 	call	21cc4 <_ZSt9terminatev>

0002217c <_ZSt18uncaught_exceptionv>:
   2217c:	deffff04 	addi	sp,sp,-4
   22180:	dfc00015 	stw	ra,0(sp)
   22184:	002192c0 	call	2192c <__cxa_get_globals>
   22188:	10800117 	ldw	r2,4(r2)
   2218c:	1004c03a 	cmpne	r2,r2,zero
   22190:	dfc00017 	ldw	ra,0(sp)
   22194:	dec00104 	addi	sp,sp,4
   22198:	f800283a 	ret

0002219c <__cxa_call_terminate>:
   2219c:	defffe04 	addi	sp,sp,-8
   221a0:	dc000015 	stw	r16,0(sp)
   221a4:	dfc00115 	stw	ra,4(sp)
   221a8:	2021883a 	mov	r16,r4
   221ac:	20000c26 	beq	r4,zero,221e0 <__cxa_call_terminate+0x44>
   221b0:	00220180 	call	22018 <__cxa_begin_catch>
   221b4:	80c00017 	ldw	r3,0(r16)
   221b8:	012f3574 	movhi	r4,48341
   221bc:	21354004 	addi	r4,r4,-11008
   221c0:	1909883a 	add	r4,r3,r4
   221c4:	80800117 	ldw	r2,4(r16)
   221c8:	20cb803a 	cmpltu	r5,r4,r3
   221cc:	00ee2cb4 	movhi	r3,47282
   221d0:	18eaaf04 	addi	r3,r3,-21828
   221d4:	10c5883a 	add	r2,r2,r3
   221d8:	2885883a 	add	r2,r5,r2
   221dc:	10000126 	beq	r2,zero,221e4 <__cxa_call_terminate+0x48>
   221e0:	0021cc40 	call	21cc4 <_ZSt9terminatev>
   221e4:	00800044 	movi	r2,1
   221e8:	113ffd36 	bltu	r2,r4,221e0 <__alt_data_end+0xf40221e0>
   221ec:	813ff817 	ldw	r4,-32(r16)
   221f0:	0021c040 	call	21c04 <_ZN10__cxxabiv111__terminateEPFvvE>

000221f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   221f4:	defffe04 	addi	sp,sp,-8
   221f8:	dfc00115 	stw	ra,4(sp)
   221fc:	dc000015 	stw	r16,0(sp)
   22200:	00800044 	movi	r2,1
   22204:	11000a36 	bltu	r2,r4,22230 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   22208:	28bff617 	ldw	r2,-40(r5)
   2220c:	2c000504 	addi	r16,r5,20
   22210:	10000226 	beq	r2,zero,2221c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   22214:	8009883a 	mov	r4,r16
   22218:	103ee83a 	callr	r2
   2221c:	8009883a 	mov	r4,r16
   22220:	dfc00117 	ldw	ra,4(sp)
   22224:	dc000017 	ldw	r16,0(sp)
   22228:	dec00204 	addi	sp,sp,8
   2222c:	00224541 	jmpi	22454 <__cxa_free_exception>
   22230:	293ff817 	ldw	r4,-32(r5)
   22234:	0021c040 	call	21c04 <_ZN10__cxxabiv111__terminateEPFvvE>

00022238 <__cxa_throw>:
   22238:	defffb04 	addi	sp,sp,-20
   2223c:	dfc00415 	stw	ra,16(sp)
   22240:	dcc00315 	stw	r19,12(sp)
   22244:	dc800215 	stw	r18,8(sp)
   22248:	2827883a 	mov	r19,r5
   2224c:	3025883a 	mov	r18,r6
   22250:	dc400115 	stw	r17,4(sp)
   22254:	dc000015 	stw	r16,0(sp)
   22258:	2021883a 	mov	r16,r4
   2225c:	002192c0 	call	2192c <__cxa_get_globals>
   22260:	10c00117 	ldw	r3,4(r2)
   22264:	847ffb04 	addi	r17,r16,-20
   22268:	18c00044 	addi	r3,r3,1
   2226c:	10c00115 	stw	r3,4(r2)
   22270:	00800044 	movi	r2,1
   22274:	80bfef15 	stw	r2,-68(r16)
   22278:	84fff015 	stw	r19,-64(r16)
   2227c:	84bff115 	stw	r18,-60(r16)
   22280:	0021d3c0 	call	21d3c <_ZSt14get_unexpectedv>
   22284:	80bff215 	stw	r2,-56(r16)
   22288:	0021d180 	call	21d18 <_ZSt13get_terminatev>
   2228c:	80bff315 	stw	r2,-52(r16)
   22290:	0090caf4 	movhi	r2,17195
   22294:	108ac004 	addi	r2,r2,11008
   22298:	80bffb15 	stw	r2,-20(r16)
   2229c:	0091d3b4 	movhi	r2,18254
   222a0:	109550c4 	addi	r2,r2,21827
   222a4:	80bffc15 	stw	r2,-16(r16)
   222a8:	008000b4 	movhi	r2,2
   222ac:	10887d04 	addi	r2,r2,8692
   222b0:	8809883a 	mov	r4,r17
   222b4:	80bffd15 	stw	r2,-12(r16)
   222b8:	00228fc0 	call	228fc <_Unwind_SjLj_RaiseException>
   222bc:	8809883a 	mov	r4,r17
   222c0:	00220180 	call	22018 <__cxa_begin_catch>
   222c4:	0021cc40 	call	21cc4 <_ZSt9terminatev>

000222c8 <__cxa_rethrow>:
   222c8:	defffe04 	addi	sp,sp,-8
   222cc:	dfc00115 	stw	ra,4(sp)
   222d0:	dc000015 	stw	r16,0(sp)
   222d4:	002192c0 	call	2192c <__cxa_get_globals>
   222d8:	10c00117 	ldw	r3,4(r2)
   222dc:	11000017 	ldw	r4,0(r2)
   222e0:	18c00044 	addi	r3,r3,1
   222e4:	10c00115 	stw	r3,4(r2)
   222e8:	20001126 	beq	r4,zero,22330 <__cxa_rethrow+0x68>
   222ec:	21400b17 	ldw	r5,44(r4)
   222f0:	01ef3574 	movhi	r7,48341
   222f4:	39f54004 	addi	r7,r7,-11008
   222f8:	29cf883a 	add	r7,r5,r7
   222fc:	20c00c17 	ldw	r3,48(r4)
   22300:	394d803a 	cmpltu	r6,r7,r5
   22304:	016e2cb4 	movhi	r5,47282
   22308:	296aaf04 	addi	r5,r5,-21828
   2230c:	1947883a 	add	r3,r3,r5
   22310:	30c7883a 	add	r3,r6,r3
   22314:	18000726 	beq	r3,zero,22334 <__cxa_rethrow+0x6c>
   22318:	10000015 	stw	zero,0(r2)
   2231c:	24000b04 	addi	r16,r4,44
   22320:	8009883a 	mov	r4,r16
   22324:	0022a540 	call	22a54 <_Unwind_SjLj_Resume_or_Rethrow>
   22328:	8009883a 	mov	r4,r16
   2232c:	00220180 	call	22018 <__cxa_begin_catch>
   22330:	0021cc40 	call	21cc4 <_ZSt9terminatev>
   22334:	00c00044 	movi	r3,1
   22338:	19fff736 	bltu	r3,r7,22318 <__alt_data_end+0xf4022318>
   2233c:	20800517 	ldw	r2,20(r4)
   22340:	0085c83a 	sub	r2,zero,r2
   22344:	20800515 	stw	r2,20(r4)
   22348:	003ff406 	br	2231c <__alt_data_end+0xf402231c>

0002234c <_ZNSt9type_infoD1Ev>:
   2234c:	f800283a 	ret

00022350 <_ZNKSt9type_info14__is_pointer_pEv>:
   22350:	0005883a 	mov	r2,zero
   22354:	f800283a 	ret

00022358 <_ZNKSt9type_info15__is_function_pEv>:
   22358:	0005883a 	mov	r2,zero
   2235c:	f800283a 	ret

00022360 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   22360:	0005883a 	mov	r2,zero
   22364:	f800283a 	ret

00022368 <_ZNSt9type_infoD0Ev>:
   22368:	0021c001 	jmpi	21c00 <_ZdlPv>

0002236c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   2236c:	21000117 	ldw	r4,4(r4)
   22370:	29400117 	ldw	r5,4(r5)
   22374:	21400c26 	beq	r4,r5,223a8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   22378:	20c00007 	ldb	r3,0(r4)
   2237c:	00800a84 	movi	r2,42
   22380:	18800726 	beq	r3,r2,223a0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   22384:	deffff04 	addi	sp,sp,-4
   22388:	dfc00015 	stw	ra,0(sp)
   2238c:	00236840 	call	23684 <strcmp>
   22390:	1005003a 	cmpeq	r2,r2,zero
   22394:	dfc00017 	ldw	ra,0(sp)
   22398:	dec00104 	addi	sp,sp,4
   2239c:	f800283a 	ret
   223a0:	0005883a 	mov	r2,zero
   223a4:	f800283a 	ret
   223a8:	00800044 	movi	r2,1
   223ac:	f800283a 	ret

000223b0 <__cxa_allocate_exception>:
   223b0:	defffd04 	addi	sp,sp,-12
   223b4:	dc400115 	stw	r17,4(sp)
   223b8:	24401104 	addi	r17,r4,68
   223bc:	8809883a 	mov	r4,r17
   223c0:	dc000015 	stw	r16,0(sp)
   223c4:	dfc00215 	stw	ra,8(sp)
   223c8:	0022b440 	call	22b44 <malloc>
   223cc:	1021883a 	mov	r16,r2
   223d0:	10000a26 	beq	r2,zero,223fc <__cxa_allocate_exception+0x4c>
   223d4:	8009883a 	mov	r4,r16
   223d8:	000b883a 	mov	r5,zero
   223dc:	01801104 	movi	r6,68
   223e0:	00231f00 	call	231f0 <memset>
   223e4:	80801104 	addi	r2,r16,68
   223e8:	dfc00217 	ldw	ra,8(sp)
   223ec:	dc400117 	ldw	r17,4(sp)
   223f0:	dc000017 	ldw	r16,0(sp)
   223f4:	dec00304 	addi	sp,sp,12
   223f8:	f800283a 	ret
   223fc:	01420034 	movhi	r5,2048
   22400:	2943df04 	addi	r5,r5,3964
   22404:	00808004 	movi	r2,512
   22408:	29800017 	ldw	r6,0(r5)
   2240c:	14400736 	bltu	r2,r17,2242c <__cxa_allocate_exception+0x7c>
   22410:	3005883a 	mov	r2,r6
   22414:	01000104 	movi	r4,4
   22418:	10c0004c 	andi	r3,r2,1
   2241c:	18000426 	beq	r3,zero,22430 <__cxa_allocate_exception+0x80>
   22420:	84000044 	addi	r16,r16,1
   22424:	1004d07a 	srli	r2,r2,1
   22428:	813ffb1e 	bne	r16,r4,22418 <__alt_data_end+0xf4022418>
   2242c:	0021cc40 	call	21cc4 <_ZSt9terminatev>
   22430:	00800044 	movi	r2,1
   22434:	1404983a 	sll	r2,r2,r16
   22438:	8020927a 	slli	r16,r16,9
   2243c:	118cb03a 	or	r6,r2,r6
   22440:	00820034 	movhi	r2,2048
   22444:	1084b504 	addi	r2,r2,4820
   22448:	29800015 	stw	r6,0(r5)
   2244c:	80a1883a 	add	r16,r16,r2
   22450:	003fe006 	br	223d4 <__alt_data_end+0xf40223d4>

00022454 <__cxa_free_exception>:
   22454:	00820034 	movhi	r2,2048
   22458:	1084b504 	addi	r2,r2,4820
   2245c:	20800236 	bltu	r4,r2,22468 <__cxa_free_exception+0x14>
   22460:	10c20004 	addi	r3,r2,2048
   22464:	20c00236 	bltu	r4,r3,22470 <__cxa_free_exception+0x1c>
   22468:	213fef04 	addi	r4,r4,-68
   2246c:	0022b581 	jmpi	22b58 <free>
   22470:	2089c83a 	sub	r4,r4,r2
   22474:	2008d27a 	srli	r4,r4,9
   22478:	01420034 	movhi	r5,2048
   2247c:	2943df04 	addi	r5,r5,3964
   22480:	00ffff84 	movi	r3,-2
   22484:	28800017 	ldw	r2,0(r5)
   22488:	1908183a 	rol	r4,r3,r4
   2248c:	2088703a 	and	r4,r4,r2
   22490:	29000015 	stw	r4,0(r5)
   22494:	f800283a 	ret

00022498 <__cxa_allocate_dependent_exception>:
   22498:	defffe04 	addi	sp,sp,-8
   2249c:	01001004 	movi	r4,64
   224a0:	dc000015 	stw	r16,0(sp)
   224a4:	dfc00115 	stw	ra,4(sp)
   224a8:	0022b440 	call	22b44 <malloc>
   224ac:	1021883a 	mov	r16,r2
   224b0:	10000926 	beq	r2,zero,224d8 <__cxa_allocate_dependent_exception+0x40>
   224b4:	8009883a 	mov	r4,r16
   224b8:	000b883a 	mov	r5,zero
   224bc:	01801004 	movi	r6,64
   224c0:	00231f00 	call	231f0 <memset>
   224c4:	8005883a 	mov	r2,r16
   224c8:	dfc00117 	ldw	ra,4(sp)
   224cc:	dc000017 	ldw	r16,0(sp)
   224d0:	dec00204 	addi	sp,sp,8
   224d4:	f800283a 	ret
   224d8:	01c20034 	movhi	r7,2048
   224dc:	39c3de04 	addi	r7,r7,3960
   224e0:	39800017 	ldw	r6,0(r7)
   224e4:	0005883a 	mov	r2,zero
   224e8:	01400104 	movi	r5,4
   224ec:	3007883a 	mov	r3,r6
   224f0:	1900004c 	andi	r4,r3,1
   224f4:	20000426 	beq	r4,zero,22508 <__cxa_allocate_dependent_exception+0x70>
   224f8:	10800044 	addi	r2,r2,1
   224fc:	1806d07a 	srli	r3,r3,1
   22500:	117ffb1e 	bne	r2,r5,224f0 <__alt_data_end+0xf40224f0>
   22504:	0021cc40 	call	21cc4 <_ZSt9terminatev>
   22508:	00c00044 	movi	r3,1
   2250c:	1886983a 	sll	r3,r3,r2
   22510:	100491ba 	slli	r2,r2,6
   22514:	04020034 	movhi	r16,2048
   22518:	198cb03a 	or	r6,r3,r6
   2251c:	84047504 	addi	r16,r16,4564
   22520:	39800015 	stw	r6,0(r7)
   22524:	1421883a 	add	r16,r2,r16
   22528:	003fe206 	br	224b4 <__alt_data_end+0xf40224b4>

0002252c <__cxa_free_dependent_exception>:
   2252c:	00820034 	movhi	r2,2048
   22530:	10847504 	addi	r2,r2,4564
   22534:	20800236 	bltu	r4,r2,22540 <__cxa_free_dependent_exception+0x14>
   22538:	10c04004 	addi	r3,r2,256
   2253c:	20c00136 	bltu	r4,r3,22544 <__cxa_free_dependent_exception+0x18>
   22540:	0022b581 	jmpi	22b58 <free>
   22544:	2089c83a 	sub	r4,r4,r2
   22548:	2008d1ba 	srli	r4,r4,6
   2254c:	01420034 	movhi	r5,2048
   22550:	2943de04 	addi	r5,r5,3960
   22554:	00ffff84 	movi	r3,-2
   22558:	28800017 	ldw	r2,0(r5)
   2255c:	1908183a 	rol	r4,r3,r4
   22560:	2088703a 	and	r4,r4,r2
   22564:	29000015 	stw	r4,0(r5)
   22568:	f800283a 	ret

0002256c <_ZNSt9exceptionD1Ev>:
   2256c:	f800283a 	ret

00022570 <_ZNSt13bad_exceptionD1Ev>:
   22570:	f800283a 	ret

00022574 <_ZNKSt9exception4whatEv>:
   22574:	00820034 	movhi	r2,2048
   22578:	10810404 	addi	r2,r2,1040
   2257c:	f800283a 	ret

00022580 <_ZNKSt13bad_exception4whatEv>:
   22580:	00820034 	movhi	r2,2048
   22584:	10810804 	addi	r2,r2,1056
   22588:	f800283a 	ret

0002258c <_ZNSt9exceptionD0Ev>:
   2258c:	0021c001 	jmpi	21c00 <_ZdlPv>

00022590 <_ZNSt13bad_exceptionD0Ev>:
   22590:	0021c001 	jmpi	21c00 <_ZdlPv>

00022594 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   22594:	f800283a 	ret

00022598 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   22598:	0021c001 	jmpi	21c00 <_ZdlPv>

0002259c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   2259c:	f800283a 	ret

000225a0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   225a0:	0021c001 	jmpi	21c00 <_ZdlPv>

000225a4 <__cxa_pure_virtual>:
   225a4:	01420034 	movhi	r5,2048
   225a8:	deffff04 	addi	sp,sp,-4
   225ac:	29413e04 	addi	r5,r5,1272
   225b0:	01000084 	movi	r4,2
   225b4:	018006c4 	movi	r6,27
   225b8:	dfc00015 	stw	ra,0(sp)
   225bc:	0024a380 	call	24a38 <write>
   225c0:	0021cc40 	call	21cc4 <_ZSt9terminatev>

000225c4 <__cxa_deleted_virtual>:
   225c4:	01420034 	movhi	r5,2048
   225c8:	deffff04 	addi	sp,sp,-4
   225cc:	29414504 	addi	r5,r5,1300
   225d0:	01000084 	movi	r4,2
   225d4:	01800784 	movi	r6,30
   225d8:	dfc00015 	stw	ra,0(sp)
   225dc:	0024a380 	call	24a38 <write>
   225e0:	0021cc40 	call	21cc4 <_ZSt9terminatev>

000225e4 <__mulsi3>:
   225e4:	0005883a 	mov	r2,zero
   225e8:	20000726 	beq	r4,zero,22608 <__mulsi3+0x24>
   225ec:	20c0004c 	andi	r3,r4,1
   225f0:	2008d07a 	srli	r4,r4,1
   225f4:	18000126 	beq	r3,zero,225fc <__mulsi3+0x18>
   225f8:	1145883a 	add	r2,r2,r5
   225fc:	294b883a 	add	r5,r5,r5
   22600:	203ffa1e 	bne	r4,zero,225ec <__alt_data_end+0xf40225ec>
   22604:	f800283a 	ret
   22608:	f800283a 	ret

0002260c <_Unwind_ForcedUnwind_Phase2>:
   2260c:	defff404 	addi	sp,sp,-48
   22610:	dd800915 	stw	r22,36(sp)
   22614:	05820034 	movhi	r22,2048
   22618:	ddc00a15 	stw	r23,40(sp)
   2261c:	dd400815 	stw	r21,32(sp)
   22620:	dd000715 	stw	r20,28(sp)
   22624:	dcc00615 	stw	r19,24(sp)
   22628:	dc400415 	stw	r17,16(sp)
   2262c:	dc000315 	stw	r16,12(sp)
   22630:	dfc00b15 	stw	ra,44(sp)
   22634:	dc800515 	stw	r18,20(sp)
   22638:	2021883a 	mov	r16,r4
   2263c:	2823883a 	mov	r17,r5
   22640:	24c00317 	ldw	r19,12(r4)
   22644:	25000417 	ldw	r20,16(r4)
   22648:	28c00017 	ldw	r3,0(r5)
   2264c:	b583e004 	addi	r22,r22,3968
   22650:	054001c4 	movi	r21,7
   22654:	05c00204 	movi	r23,8
   22658:	00001606 	br	226b4 <_Unwind_ForcedUnwind_Phase2+0xa8>
   2265c:	81800017 	ldw	r6,0(r16)
   22660:	81c00117 	ldw	r7,4(r16)
   22664:	1c800617 	ldw	r18,24(r3)
   22668:	dc000015 	stw	r16,0(sp)
   2266c:	dc400115 	stw	r17,4(sp)
   22670:	dd000215 	stw	r20,8(sp)
   22674:	983ee83a 	callr	r19
   22678:	01000044 	movi	r4,1
   2267c:	01400284 	movi	r5,10
   22680:	1000241e 	bne	r2,zero,22714 <_Unwind_ForcedUnwind_Phase2+0x108>
   22684:	90000726 	beq	r18,zero,226a4 <_Unwind_ForcedUnwind_Phase2+0x98>
   22688:	81800017 	ldw	r6,0(r16)
   2268c:	81c00117 	ldw	r7,4(r16)
   22690:	dc000015 	stw	r16,0(sp)
   22694:	dc400115 	stw	r17,4(sp)
   22698:	903ee83a 	callr	r18
   2269c:	15401f26 	beq	r2,r21,2271c <_Unwind_ForcedUnwind_Phase2+0x110>
   226a0:	15c01c1e 	bne	r2,r23,22714 <_Unwind_ForcedUnwind_Phase2+0x108>
   226a4:	88800017 	ldw	r2,0(r17)
   226a8:	10c00017 	ldw	r3,0(r2)
   226ac:	b0c00015 	stw	r3,0(r22)
   226b0:	88c00015 	stw	r3,0(r17)
   226b4:	01000044 	movi	r4,1
   226b8:	01400284 	movi	r5,10
   226bc:	183fe71e 	bne	r3,zero,2265c <__alt_data_end+0xf402265c>
   226c0:	81800017 	ldw	r6,0(r16)
   226c4:	81c00117 	ldw	r7,4(r16)
   226c8:	01000044 	movi	r4,1
   226cc:	dc000015 	stw	r16,0(sp)
   226d0:	dc400115 	stw	r17,4(sp)
   226d4:	dd000215 	stw	r20,8(sp)
   226d8:	01400684 	movi	r5,26
   226dc:	983ee83a 	callr	r19
   226e0:	10000c1e 	bne	r2,zero,22714 <_Unwind_ForcedUnwind_Phase2+0x108>
   226e4:	00800144 	movi	r2,5
   226e8:	dfc00b17 	ldw	ra,44(sp)
   226ec:	ddc00a17 	ldw	r23,40(sp)
   226f0:	dd800917 	ldw	r22,36(sp)
   226f4:	dd400817 	ldw	r21,32(sp)
   226f8:	dd000717 	ldw	r20,28(sp)
   226fc:	dcc00617 	ldw	r19,24(sp)
   22700:	dc800517 	ldw	r18,20(sp)
   22704:	dc400417 	ldw	r17,16(sp)
   22708:	dc000317 	ldw	r16,12(sp)
   2270c:	dec00c04 	addi	sp,sp,48
   22710:	f800283a 	ret
   22714:	00800084 	movi	r2,2
   22718:	003ff306 	br	226e8 <__alt_data_end+0xf40226e8>
   2271c:	a805883a 	mov	r2,r21
   22720:	003ff106 	br	226e8 <__alt_data_end+0xf40226e8>

00022724 <_Unwind_RaiseException_Phase2>:
   22724:	28c00017 	ldw	r3,0(r5)
   22728:	defff804 	addi	sp,sp,-32
   2272c:	dcc00515 	stw	r19,20(sp)
   22730:	dc800415 	stw	r18,16(sp)
   22734:	dc400315 	stw	r17,12(sp)
   22738:	dc000215 	stw	r16,8(sp)
   2273c:	dfc00715 	stw	ra,28(sp)
   22740:	dd000615 	stw	r20,24(sp)
   22744:	2823883a 	mov	r17,r5
   22748:	2021883a 	mov	r16,r4
   2274c:	048001c4 	movi	r18,7
   22750:	04c00204 	movi	r19,8
   22754:	18001326 	beq	r3,zero,227a4 <_Unwind_RaiseException_Phase2+0x80>
   22758:	81000417 	ldw	r4,16(r16)
   2275c:	1a000617 	ldw	r8,24(r3)
   22760:	19001c26 	beq	r3,r4,227d4 <_Unwind_RaiseException_Phase2+0xb0>
   22764:	40000b26 	beq	r8,zero,22794 <_Unwind_RaiseException_Phase2+0x70>
   22768:	01400084 	movi	r5,2
   2276c:	0029883a 	mov	r20,zero
   22770:	81800017 	ldw	r6,0(r16)
   22774:	81c00117 	ldw	r7,4(r16)
   22778:	01000044 	movi	r4,1
   2277c:	dc000015 	stw	r16,0(sp)
   22780:	dc400115 	stw	r17,4(sp)
   22784:	403ee83a 	callr	r8
   22788:	14800f26 	beq	r2,r18,227c8 <_Unwind_RaiseException_Phase2+0xa4>
   2278c:	14c0051e 	bne	r2,r19,227a4 <_Unwind_RaiseException_Phase2+0x80>
   22790:	a0000f1e 	bne	r20,zero,227d0 <_Unwind_RaiseException_Phase2+0xac>
   22794:	88c00017 	ldw	r3,0(r17)
   22798:	18c00017 	ldw	r3,0(r3)
   2279c:	88c00015 	stw	r3,0(r17)
   227a0:	183fed1e 	bne	r3,zero,22758 <__alt_data_end+0xf4022758>
   227a4:	00800084 	movi	r2,2
   227a8:	dfc00717 	ldw	ra,28(sp)
   227ac:	dd000617 	ldw	r20,24(sp)
   227b0:	dcc00517 	ldw	r19,20(sp)
   227b4:	dc800417 	ldw	r18,16(sp)
   227b8:	dc400317 	ldw	r17,12(sp)
   227bc:	dc000217 	ldw	r16,8(sp)
   227c0:	dec00804 	addi	sp,sp,32
   227c4:	f800283a 	ret
   227c8:	9005883a 	mov	r2,r18
   227cc:	003ff606 	br	227a8 <__alt_data_end+0xf40227a8>
   227d0:	0022b2c0 	call	22b2c <abort>
   227d4:	403ffe26 	beq	r8,zero,227d0 <__alt_data_end+0xf40227d0>
   227d8:	01400184 	movi	r5,6
   227dc:	05000104 	movi	r20,4
   227e0:	003fe306 	br	22770 <__alt_data_end+0xf4022770>

000227e4 <uw_install_context.isra.1>:
   227e4:	20c00017 	ldw	r3,0(r4)
   227e8:	deffff04 	addi	sp,sp,-4
   227ec:	01420034 	movhi	r5,2048
   227f0:	19000917 	ldw	r4,36(r3)
   227f4:	df000015 	stw	fp,0(sp)
   227f8:	18800804 	addi	r2,r3,32
   227fc:	d839883a 	mov	fp,sp
   22800:	2943e004 	addi	r5,r5,3968
   22804:	28c00015 	stw	r3,0(r5)
   22808:	17000017 	ldw	fp,0(r2)
   2280c:	1ec00a17 	ldw	sp,40(r3)
   22810:	2000683a 	jmp	r4

00022814 <_Unwind_SjLj_Register>:
   22814:	00820034 	movhi	r2,2048
   22818:	1083e004 	addi	r2,r2,3968
   2281c:	10c00017 	ldw	r3,0(r2)
   22820:	11000015 	stw	r4,0(r2)
   22824:	20c00015 	stw	r3,0(r4)
   22828:	f800283a 	ret

0002282c <_Unwind_SjLj_Unregister>:
   2282c:	20c00017 	ldw	r3,0(r4)
   22830:	00820034 	movhi	r2,2048
   22834:	1083e004 	addi	r2,r2,3968
   22838:	10c00015 	stw	r3,0(r2)
   2283c:	f800283a 	ret

00022840 <_Unwind_GetGR>:
   22840:	20800017 	ldw	r2,0(r4)
   22844:	29400084 	addi	r5,r5,2
   22848:	294b883a 	add	r5,r5,r5
   2284c:	294b883a 	add	r5,r5,r5
   22850:	114b883a 	add	r5,r2,r5
   22854:	28800017 	ldw	r2,0(r5)
   22858:	f800283a 	ret

0002285c <_Unwind_GetCFA>:
   2285c:	20800017 	ldw	r2,0(r4)
   22860:	10000226 	beq	r2,zero,2286c <_Unwind_GetCFA+0x10>
   22864:	10800a17 	ldw	r2,40(r2)
   22868:	f800283a 	ret
   2286c:	0005883a 	mov	r2,zero
   22870:	f800283a 	ret

00022874 <_Unwind_SetGR>:
   22874:	20800017 	ldw	r2,0(r4)
   22878:	29400084 	addi	r5,r5,2
   2287c:	294b883a 	add	r5,r5,r5
   22880:	294b883a 	add	r5,r5,r5
   22884:	114b883a 	add	r5,r2,r5
   22888:	29800015 	stw	r6,0(r5)
   2288c:	f800283a 	ret

00022890 <_Unwind_GetIP>:
   22890:	20800017 	ldw	r2,0(r4)
   22894:	10800117 	ldw	r2,4(r2)
   22898:	10800044 	addi	r2,r2,1
   2289c:	f800283a 	ret

000228a0 <_Unwind_GetIPInfo>:
   228a0:	20800017 	ldw	r2,0(r4)
   228a4:	28000015 	stw	zero,0(r5)
   228a8:	10000326 	beq	r2,zero,228b8 <_Unwind_GetIPInfo+0x18>
   228ac:	10800117 	ldw	r2,4(r2)
   228b0:	10800044 	addi	r2,r2,1
   228b4:	f800283a 	ret
   228b8:	0005883a 	mov	r2,zero
   228bc:	f800283a 	ret

000228c0 <_Unwind_SetIP>:
   228c0:	20800017 	ldw	r2,0(r4)
   228c4:	297fffc4 	addi	r5,r5,-1
   228c8:	11400115 	stw	r5,4(r2)
   228cc:	f800283a 	ret

000228d0 <_Unwind_GetLanguageSpecificData>:
   228d0:	20800017 	ldw	r2,0(r4)
   228d4:	10800717 	ldw	r2,28(r2)
   228d8:	f800283a 	ret

000228dc <_Unwind_GetRegionStart>:
   228dc:	0005883a 	mov	r2,zero
   228e0:	f800283a 	ret

000228e4 <_Unwind_FindEnclosingFunction>:
   228e4:	0005883a 	mov	r2,zero
   228e8:	f800283a 	ret

000228ec <_Unwind_GetDataRelBase>:
   228ec:	0005883a 	mov	r2,zero
   228f0:	f800283a 	ret

000228f4 <_Unwind_GetTextRelBase>:
   228f4:	0005883a 	mov	r2,zero
   228f8:	f800283a 	ret

000228fc <_Unwind_SjLj_RaiseException>:
   228fc:	00820034 	movhi	r2,2048
   22900:	defff804 	addi	sp,sp,-32
   22904:	1083e004 	addi	r2,r2,3968
   22908:	dc800515 	stw	r18,20(sp)
   2290c:	14800017 	ldw	r18,0(r2)
   22910:	dfc00715 	stw	ra,28(sp)
   22914:	dcc00615 	stw	r19,24(sp)
   22918:	dc400415 	stw	r17,16(sp)
   2291c:	dc000315 	stw	r16,12(sp)
   22920:	dc800215 	stw	r18,8(sp)
   22924:	90001426 	beq	r18,zero,22978 <_Unwind_SjLj_RaiseException+0x7c>
   22928:	2021883a 	mov	r16,r4
   2292c:	9005883a 	mov	r2,r18
   22930:	04400184 	movi	r17,6
   22934:	04c00204 	movi	r19,8
   22938:	10800617 	ldw	r2,24(r2)
   2293c:	10000a26 	beq	r2,zero,22968 <_Unwind_SjLj_RaiseException+0x6c>
   22940:	81800017 	ldw	r6,0(r16)
   22944:	81c00117 	ldw	r7,4(r16)
   22948:	01000044 	movi	r4,1
   2294c:	d8c00204 	addi	r3,sp,8
   22950:	dc000015 	stw	r16,0(sp)
   22954:	d8c00115 	stw	r3,4(sp)
   22958:	200b883a 	mov	r5,r4
   2295c:	103ee83a 	callr	r2
   22960:	14400d26 	beq	r2,r17,22998 <_Unwind_SjLj_RaiseException+0x9c>
   22964:	14c0171e 	bne	r2,r19,229c4 <_Unwind_SjLj_RaiseException+0xc8>
   22968:	d8800217 	ldw	r2,8(sp)
   2296c:	10800017 	ldw	r2,0(r2)
   22970:	d8800215 	stw	r2,8(sp)
   22974:	103ff01e 	bne	r2,zero,22938 <__alt_data_end+0xf4022938>
   22978:	00800144 	movi	r2,5
   2297c:	dfc00717 	ldw	ra,28(sp)
   22980:	dcc00617 	ldw	r19,24(sp)
   22984:	dc800517 	ldw	r18,20(sp)
   22988:	dc400417 	ldw	r17,16(sp)
   2298c:	dc000317 	ldw	r16,12(sp)
   22990:	dec00804 	addi	sp,sp,32
   22994:	f800283a 	ret
   22998:	d8800217 	ldw	r2,8(sp)
   2299c:	80000315 	stw	zero,12(r16)
   229a0:	8009883a 	mov	r4,r16
   229a4:	80800415 	stw	r2,16(r16)
   229a8:	d9400204 	addi	r5,sp,8
   229ac:	dc800215 	stw	r18,8(sp)
   229b0:	00227240 	call	22724 <_Unwind_RaiseException_Phase2>
   229b4:	00c001c4 	movi	r3,7
   229b8:	10fff01e 	bne	r2,r3,2297c <__alt_data_end+0xf402297c>
   229bc:	d9000204 	addi	r4,sp,8
   229c0:	00227e40 	call	227e4 <uw_install_context.isra.1>
   229c4:	008000c4 	movi	r2,3
   229c8:	003fec06 	br	2297c <__alt_data_end+0xf402297c>

000229cc <_Unwind_SjLj_ForcedUnwind>:
   229cc:	00c20034 	movhi	r3,2048
   229d0:	18c3e004 	addi	r3,r3,3968
   229d4:	defffe04 	addi	sp,sp,-8
   229d8:	18c00017 	ldw	r3,0(r3)
   229dc:	dfc00115 	stw	ra,4(sp)
   229e0:	21400315 	stw	r5,12(r4)
   229e4:	21800415 	stw	r6,16(r4)
   229e8:	d80b883a 	mov	r5,sp
   229ec:	d8c00015 	stw	r3,0(sp)
   229f0:	002260c0 	call	2260c <_Unwind_ForcedUnwind_Phase2>
   229f4:	00c001c4 	movi	r3,7
   229f8:	10c00326 	beq	r2,r3,22a08 <_Unwind_SjLj_ForcedUnwind+0x3c>
   229fc:	dfc00117 	ldw	ra,4(sp)
   22a00:	dec00204 	addi	sp,sp,8
   22a04:	f800283a 	ret
   22a08:	d809883a 	mov	r4,sp
   22a0c:	00227e40 	call	227e4 <uw_install_context.isra.1>

00022a10 <_Unwind_SjLj_Resume>:
   22a10:	00c20034 	movhi	r3,2048
   22a14:	18c3e004 	addi	r3,r3,3968
   22a18:	18c00017 	ldw	r3,0(r3)
   22a1c:	20800317 	ldw	r2,12(r4)
   22a20:	defffe04 	addi	sp,sp,-8
   22a24:	dfc00115 	stw	ra,4(sp)
   22a28:	d8c00015 	stw	r3,0(sp)
   22a2c:	d80b883a 	mov	r5,sp
   22a30:	1000041e 	bne	r2,zero,22a44 <_Unwind_SjLj_Resume+0x34>
   22a34:	00227240 	call	22724 <_Unwind_RaiseException_Phase2>
   22a38:	00c001c4 	movi	r3,7
   22a3c:	10c00326 	beq	r2,r3,22a4c <_Unwind_SjLj_Resume+0x3c>
   22a40:	0022b2c0 	call	22b2c <abort>
   22a44:	002260c0 	call	2260c <_Unwind_ForcedUnwind_Phase2>
   22a48:	003ffb06 	br	22a38 <__alt_data_end+0xf4022a38>
   22a4c:	d809883a 	mov	r4,sp
   22a50:	00227e40 	call	227e4 <uw_install_context.isra.1>

00022a54 <_Unwind_SjLj_Resume_or_Rethrow>:
   22a54:	20800317 	ldw	r2,12(r4)
   22a58:	defffe04 	addi	sp,sp,-8
   22a5c:	dfc00115 	stw	ra,4(sp)
   22a60:	1000041e 	bne	r2,zero,22a74 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   22a64:	00228fc0 	call	228fc <_Unwind_SjLj_RaiseException>
   22a68:	dfc00117 	ldw	ra,4(sp)
   22a6c:	dec00204 	addi	sp,sp,8
   22a70:	f800283a 	ret
   22a74:	00820034 	movhi	r2,2048
   22a78:	1083e004 	addi	r2,r2,3968
   22a7c:	10800017 	ldw	r2,0(r2)
   22a80:	d80b883a 	mov	r5,sp
   22a84:	d8800015 	stw	r2,0(sp)
   22a88:	002260c0 	call	2260c <_Unwind_ForcedUnwind_Phase2>
   22a8c:	00c001c4 	movi	r3,7
   22a90:	10c00126 	beq	r2,r3,22a98 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   22a94:	0022b2c0 	call	22b2c <abort>
   22a98:	d809883a 	mov	r4,sp
   22a9c:	00227e40 	call	227e4 <uw_install_context.isra.1>

00022aa0 <_Unwind_DeleteException>:
   22aa0:	20800217 	ldw	r2,8(r4)
   22aa4:	200b883a 	mov	r5,r4
   22aa8:	10000226 	beq	r2,zero,22ab4 <_Unwind_DeleteException+0x14>
   22aac:	01000044 	movi	r4,1
   22ab0:	1000683a 	jmp	r2
   22ab4:	f800283a 	ret

00022ab8 <_Unwind_Backtrace>:
   22ab8:	00820034 	movhi	r2,2048
   22abc:	1083e004 	addi	r2,r2,3968
   22ac0:	10800017 	ldw	r2,0(r2)
   22ac4:	defffc04 	addi	sp,sp,-16
   22ac8:	dc400215 	stw	r17,8(sp)
   22acc:	dc000115 	stw	r16,4(sp)
   22ad0:	dfc00315 	stw	ra,12(sp)
   22ad4:	2023883a 	mov	r17,r4
   22ad8:	2821883a 	mov	r16,r5
   22adc:	d8800015 	stw	r2,0(sp)
   22ae0:	00000506 	br	22af8 <_Unwind_Backtrace+0x40>
   22ae4:	883ee83a 	callr	r17
   22ae8:	10000e1e 	bne	r2,zero,22b24 <_Unwind_Backtrace+0x6c>
   22aec:	d8800017 	ldw	r2,0(sp)
   22af0:	10800017 	ldw	r2,0(r2)
   22af4:	d8800015 	stw	r2,0(sp)
   22af8:	d809883a 	mov	r4,sp
   22afc:	800b883a 	mov	r5,r16
   22b00:	103ff81e 	bne	r2,zero,22ae4 <__alt_data_end+0xf4022ae4>
   22b04:	883ee83a 	callr	r17
   22b08:	1000061e 	bne	r2,zero,22b24 <_Unwind_Backtrace+0x6c>
   22b0c:	00800144 	movi	r2,5
   22b10:	dfc00317 	ldw	ra,12(sp)
   22b14:	dc400217 	ldw	r17,8(sp)
   22b18:	dc000117 	ldw	r16,4(sp)
   22b1c:	dec00404 	addi	sp,sp,16
   22b20:	f800283a 	ret
   22b24:	008000c4 	movi	r2,3
   22b28:	003ff906 	br	22b10 <__alt_data_end+0xf4022b10>

00022b2c <abort>:
   22b2c:	deffff04 	addi	sp,sp,-4
   22b30:	01000184 	movi	r4,6
   22b34:	dfc00015 	stw	ra,0(sp)
   22b38:	00235d80 	call	235d8 <raise>
   22b3c:	01000044 	movi	r4,1
   22b40:	002435c0 	call	2435c <_exit>

00022b44 <malloc>:
   22b44:	00820034 	movhi	r2,2048
   22b48:	1083cf04 	addi	r2,r2,3900
   22b4c:	200b883a 	mov	r5,r4
   22b50:	11000017 	ldw	r4,0(r2)
   22b54:	0022b6c1 	jmpi	22b6c <_malloc_r>

00022b58 <free>:
   22b58:	00820034 	movhi	r2,2048
   22b5c:	1083cf04 	addi	r2,r2,3900
   22b60:	200b883a 	mov	r5,r4
   22b64:	11000017 	ldw	r4,0(r2)
   22b68:	0023df81 	jmpi	23df8 <_free_r>

00022b6c <_malloc_r>:
   22b6c:	defff604 	addi	sp,sp,-40
   22b70:	dfc00915 	stw	ra,36(sp)
   22b74:	df000815 	stw	fp,32(sp)
   22b78:	ddc00715 	stw	r23,28(sp)
   22b7c:	dd800615 	stw	r22,24(sp)
   22b80:	dd400515 	stw	r21,20(sp)
   22b84:	dd000415 	stw	r20,16(sp)
   22b88:	dcc00315 	stw	r19,12(sp)
   22b8c:	dc800215 	stw	r18,8(sp)
   22b90:	dc400115 	stw	r17,4(sp)
   22b94:	dc000015 	stw	r16,0(sp)
   22b98:	288002c4 	addi	r2,r5,11
   22b9c:	00c00584 	movi	r3,22
   22ba0:	1880042e 	bgeu	r3,r2,22bb4 <_malloc_r+0x48>
   22ba4:	047ffe04 	movi	r17,-8
   22ba8:	1462703a 	and	r17,r2,r17
   22bac:	8800020e 	bge	r17,zero,22bb8 <_malloc_r+0x4c>
   22bb0:	00000206 	br	22bbc <_malloc_r+0x50>
   22bb4:	04400404 	movi	r17,16
   22bb8:	8940032e 	bgeu	r17,r5,22bc8 <_malloc_r+0x5c>
   22bbc:	00800304 	movi	r2,12
   22bc0:	20800015 	stw	r2,0(r4)
   22bc4:	00017206 	br	23190 <_malloc_r+0x624>
   22bc8:	2027883a 	mov	r19,r4
   22bcc:	002468c0 	call	2468c <__malloc_lock>
   22bd0:	04820034 	movhi	r18,2048
   22bd4:	00807dc4 	movi	r2,503
   22bd8:	9481ea04 	addi	r18,r18,1960
   22bdc:	14401536 	bltu	r2,r17,22c34 <_malloc_r+0xc8>
   22be0:	8804d0fa 	srli	r2,r17,3
   22be4:	1087883a 	add	r3,r2,r2
   22be8:	18c7883a 	add	r3,r3,r3
   22bec:	18c7883a 	add	r3,r3,r3
   22bf0:	90c7883a 	add	r3,r18,r3
   22bf4:	1c000317 	ldw	r16,12(r3)
   22bf8:	80c0031e 	bne	r16,r3,22c08 <_malloc_r+0x9c>
   22bfc:	80c00204 	addi	r3,r16,8
   22c00:	84000517 	ldw	r16,20(r16)
   22c04:	80c00926 	beq	r16,r3,22c2c <_malloc_r+0xc0>
   22c08:	80c00117 	ldw	r3,4(r16)
   22c0c:	00bfff04 	movi	r2,-4
   22c10:	81000217 	ldw	r4,8(r16)
   22c14:	1884703a 	and	r2,r3,r2
   22c18:	80c00317 	ldw	r3,12(r16)
   22c1c:	8085883a 	add	r2,r16,r2
   22c20:	20c00315 	stw	r3,12(r4)
   22c24:	19000215 	stw	r4,8(r3)
   22c28:	00002d06 	br	22ce0 <_malloc_r+0x174>
   22c2c:	10800084 	addi	r2,r2,2
   22c30:	00003506 	br	22d08 <_malloc_r+0x19c>
   22c34:	8804d27a 	srli	r2,r17,9
   22c38:	10001826 	beq	r2,zero,22c9c <_malloc_r+0x130>
   22c3c:	00c00104 	movi	r3,4
   22c40:	18800336 	bltu	r3,r2,22c50 <_malloc_r+0xe4>
   22c44:	8804d1ba 	srli	r2,r17,6
   22c48:	10800e04 	addi	r2,r2,56
   22c4c:	00001606 	br	22ca8 <_malloc_r+0x13c>
   22c50:	00c00504 	movi	r3,20
   22c54:	18800236 	bltu	r3,r2,22c60 <_malloc_r+0xf4>
   22c58:	108016c4 	addi	r2,r2,91
   22c5c:	00001206 	br	22ca8 <_malloc_r+0x13c>
   22c60:	00c01504 	movi	r3,84
   22c64:	18800336 	bltu	r3,r2,22c74 <_malloc_r+0x108>
   22c68:	8804d33a 	srli	r2,r17,12
   22c6c:	10801b84 	addi	r2,r2,110
   22c70:	00000d06 	br	22ca8 <_malloc_r+0x13c>
   22c74:	00c05504 	movi	r3,340
   22c78:	18800336 	bltu	r3,r2,22c88 <_malloc_r+0x11c>
   22c7c:	8804d3fa 	srli	r2,r17,15
   22c80:	10801dc4 	addi	r2,r2,119
   22c84:	00000806 	br	22ca8 <_malloc_r+0x13c>
   22c88:	00c15504 	movi	r3,1364
   22c8c:	18800536 	bltu	r3,r2,22ca4 <_malloc_r+0x138>
   22c90:	8804d4ba 	srli	r2,r17,18
   22c94:	10801f04 	addi	r2,r2,124
   22c98:	00000306 	br	22ca8 <_malloc_r+0x13c>
   22c9c:	00800fc4 	movi	r2,63
   22ca0:	00000106 	br	22ca8 <_malloc_r+0x13c>
   22ca4:	00801f84 	movi	r2,126
   22ca8:	1087883a 	add	r3,r2,r2
   22cac:	18c7883a 	add	r3,r3,r3
   22cb0:	18c7883a 	add	r3,r3,r3
   22cb4:	90c7883a 	add	r3,r18,r3
   22cb8:	1c000317 	ldw	r16,12(r3)
   22cbc:	01bfff04 	movi	r6,-4
   22cc0:	01c003c4 	movi	r7,15
   22cc4:	00000906 	br	22cec <_malloc_r+0x180>
   22cc8:	28000716 	blt	r5,zero,22ce8 <_malloc_r+0x17c>
   22ccc:	80800317 	ldw	r2,12(r16)
   22cd0:	80c00217 	ldw	r3,8(r16)
   22cd4:	18800315 	stw	r2,12(r3)
   22cd8:	10c00215 	stw	r3,8(r2)
   22cdc:	8105883a 	add	r2,r16,r4
   22ce0:	10c00117 	ldw	r3,4(r2)
   22ce4:	00013106 	br	231ac <_malloc_r+0x640>
   22ce8:	84000317 	ldw	r16,12(r16)
   22cec:	80c00526 	beq	r16,r3,22d04 <_malloc_r+0x198>
   22cf0:	81000117 	ldw	r4,4(r16)
   22cf4:	2188703a 	and	r4,r4,r6
   22cf8:	244bc83a 	sub	r5,r4,r17
   22cfc:	397ff20e 	bge	r7,r5,22cc8 <__alt_data_end+0xf4022cc8>
   22d00:	10bfffc4 	addi	r2,r2,-1
   22d04:	10800044 	addi	r2,r2,1
   22d08:	01020034 	movhi	r4,2048
   22d0c:	94000417 	ldw	r16,16(r18)
   22d10:	2101ea04 	addi	r4,r4,1960
   22d14:	21800204 	addi	r6,r4,8
   22d18:	81805c26 	beq	r16,r6,22e8c <_malloc_r+0x320>
   22d1c:	81400117 	ldw	r5,4(r16)
   22d20:	00ffff04 	movi	r3,-4
   22d24:	01c003c4 	movi	r7,15
   22d28:	28c6703a 	and	r3,r5,r3
   22d2c:	1c4bc83a 	sub	r5,r3,r17
   22d30:	3940060e 	bge	r7,r5,22d4c <_malloc_r+0x1e0>
   22d34:	88800054 	ori	r2,r17,1
   22d38:	8447883a 	add	r3,r16,r17
   22d3c:	80800115 	stw	r2,4(r16)
   22d40:	20c00515 	stw	r3,20(r4)
   22d44:	20c00415 	stw	r3,16(r4)
   22d48:	00007706 	br	22f28 <_malloc_r+0x3bc>
   22d4c:	21800515 	stw	r6,20(r4)
   22d50:	21800415 	stw	r6,16(r4)
   22d54:	28000516 	blt	r5,zero,22d6c <_malloc_r+0x200>
   22d58:	80c7883a 	add	r3,r16,r3
   22d5c:	18800117 	ldw	r2,4(r3)
   22d60:	10800054 	ori	r2,r2,1
   22d64:	18800115 	stw	r2,4(r3)
   22d68:	00011206 	br	231b4 <_malloc_r+0x648>
   22d6c:	01407fc4 	movi	r5,511
   22d70:	28c01136 	bltu	r5,r3,22db8 <_malloc_r+0x24c>
   22d74:	1806d0fa 	srli	r3,r3,3
   22d78:	01400044 	movi	r5,1
   22d7c:	180fd0ba 	srai	r7,r3,2
   22d80:	18c7883a 	add	r3,r3,r3
   22d84:	18c7883a 	add	r3,r3,r3
   22d88:	29ce983a 	sll	r7,r5,r7
   22d8c:	21400117 	ldw	r5,4(r4)
   22d90:	18c7883a 	add	r3,r3,r3
   22d94:	394ab03a 	or	r5,r7,r5
   22d98:	21400115 	stw	r5,4(r4)
   22d9c:	1909883a 	add	r4,r3,r4
   22da0:	20c00217 	ldw	r3,8(r4)
   22da4:	81000315 	stw	r4,12(r16)
   22da8:	80c00215 	stw	r3,8(r16)
   22dac:	24000215 	stw	r16,8(r4)
   22db0:	1c000315 	stw	r16,12(r3)
   22db4:	00003506 	br	22e8c <_malloc_r+0x320>
   22db8:	180ad27a 	srli	r5,r3,9
   22dbc:	01000104 	movi	r4,4
   22dc0:	21400336 	bltu	r4,r5,22dd0 <_malloc_r+0x264>
   22dc4:	180ad1ba 	srli	r5,r3,6
   22dc8:	29400e04 	addi	r5,r5,56
   22dcc:	00001406 	br	22e20 <_malloc_r+0x2b4>
   22dd0:	01000504 	movi	r4,20
   22dd4:	21400236 	bltu	r4,r5,22de0 <_malloc_r+0x274>
   22dd8:	294016c4 	addi	r5,r5,91
   22ddc:	00001006 	br	22e20 <_malloc_r+0x2b4>
   22de0:	01001504 	movi	r4,84
   22de4:	21400336 	bltu	r4,r5,22df4 <_malloc_r+0x288>
   22de8:	180ad33a 	srli	r5,r3,12
   22dec:	29401b84 	addi	r5,r5,110
   22df0:	00000b06 	br	22e20 <_malloc_r+0x2b4>
   22df4:	01005504 	movi	r4,340
   22df8:	21400336 	bltu	r4,r5,22e08 <_malloc_r+0x29c>
   22dfc:	180ad3fa 	srli	r5,r3,15
   22e00:	29401dc4 	addi	r5,r5,119
   22e04:	00000606 	br	22e20 <_malloc_r+0x2b4>
   22e08:	01015504 	movi	r4,1364
   22e0c:	21400336 	bltu	r4,r5,22e1c <_malloc_r+0x2b0>
   22e10:	180ad4ba 	srli	r5,r3,18
   22e14:	29401f04 	addi	r5,r5,124
   22e18:	00000106 	br	22e20 <_malloc_r+0x2b4>
   22e1c:	01401f84 	movi	r5,126
   22e20:	2949883a 	add	r4,r5,r5
   22e24:	2109883a 	add	r4,r4,r4
   22e28:	2109883a 	add	r4,r4,r4
   22e2c:	9109883a 	add	r4,r18,r4
   22e30:	21c00217 	ldw	r7,8(r4)
   22e34:	02020034 	movhi	r8,2048
   22e38:	4201ea04 	addi	r8,r8,1960
   22e3c:	3900081e 	bne	r7,r4,22e60 <_malloc_r+0x2f4>
   22e40:	280bd0ba 	srai	r5,r5,2
   22e44:	00c00044 	movi	r3,1
   22e48:	194a983a 	sll	r5,r3,r5
   22e4c:	40c00117 	ldw	r3,4(r8)
   22e50:	28cab03a 	or	r5,r5,r3
   22e54:	41400115 	stw	r5,4(r8)
   22e58:	3807883a 	mov	r3,r7
   22e5c:	00000706 	br	22e7c <_malloc_r+0x310>
   22e60:	023fff04 	movi	r8,-4
   22e64:	39400117 	ldw	r5,4(r7)
   22e68:	2a0a703a 	and	r5,r5,r8
   22e6c:	1940022e 	bgeu	r3,r5,22e78 <_malloc_r+0x30c>
   22e70:	39c00217 	ldw	r7,8(r7)
   22e74:	393ffb1e 	bne	r7,r4,22e64 <__alt_data_end+0xf4022e64>
   22e78:	38c00317 	ldw	r3,12(r7)
   22e7c:	80c00315 	stw	r3,12(r16)
   22e80:	81c00215 	stw	r7,8(r16)
   22e84:	1c000215 	stw	r16,8(r3)
   22e88:	3c000315 	stw	r16,12(r7)
   22e8c:	1007d0ba 	srai	r3,r2,2
   22e90:	02000044 	movi	r8,1
   22e94:	40d0983a 	sll	r8,r8,r3
   22e98:	90c00117 	ldw	r3,4(r18)
   22e9c:	1a004d36 	bltu	r3,r8,22fd4 <_malloc_r+0x468>
   22ea0:	40c8703a 	and	r4,r8,r3
   22ea4:	2000061e 	bne	r4,zero,22ec0 <_malloc_r+0x354>
   22ea8:	013fff04 	movi	r4,-4
   22eac:	1104703a 	and	r2,r2,r4
   22eb0:	4211883a 	add	r8,r8,r8
   22eb4:	40c8703a 	and	r4,r8,r3
   22eb8:	10800104 	addi	r2,r2,4
   22ebc:	203ffc26 	beq	r4,zero,22eb0 <__alt_data_end+0xf4022eb0>
   22ec0:	02bfff04 	movi	r10,-4
   22ec4:	02c003c4 	movi	r11,15
   22ec8:	1087883a 	add	r3,r2,r2
   22ecc:	18c7883a 	add	r3,r3,r3
   22ed0:	18c7883a 	add	r3,r3,r3
   22ed4:	90c7883a 	add	r3,r18,r3
   22ed8:	19c00304 	addi	r7,r3,12
   22edc:	1013883a 	mov	r9,r2
   22ee0:	3b3ffd04 	addi	r12,r7,-12
   22ee4:	3c000017 	ldw	r16,0(r7)
   22ee8:	00000106 	br	22ef0 <_malloc_r+0x384>
   22eec:	84000317 	ldw	r16,12(r16)
   22ef0:	83001e26 	beq	r16,r12,22f6c <_malloc_r+0x400>
   22ef4:	81000117 	ldw	r4,4(r16)
   22ef8:	2288703a 	and	r4,r4,r10
   22efc:	244bc83a 	sub	r5,r4,r17
   22f00:	5940100e 	bge	r11,r5,22f44 <_malloc_r+0x3d8>
   22f04:	88800054 	ori	r2,r17,1
   22f08:	80800115 	stw	r2,4(r16)
   22f0c:	81000217 	ldw	r4,8(r16)
   22f10:	80800317 	ldw	r2,12(r16)
   22f14:	8447883a 	add	r3,r16,r17
   22f18:	20800315 	stw	r2,12(r4)
   22f1c:	11000215 	stw	r4,8(r2)
   22f20:	90c00515 	stw	r3,20(r18)
   22f24:	90c00415 	stw	r3,16(r18)
   22f28:	28800054 	ori	r2,r5,1
   22f2c:	19800315 	stw	r6,12(r3)
   22f30:	19800215 	stw	r6,8(r3)
   22f34:	18800115 	stw	r2,4(r3)
   22f38:	1947883a 	add	r3,r3,r5
   22f3c:	19400015 	stw	r5,0(r3)
   22f40:	00009c06 	br	231b4 <_malloc_r+0x648>
   22f44:	283fe916 	blt	r5,zero,22eec <__alt_data_end+0xf4022eec>
   22f48:	8105883a 	add	r2,r16,r4
   22f4c:	10c00117 	ldw	r3,4(r2)
   22f50:	18c00054 	ori	r3,r3,1
   22f54:	10c00115 	stw	r3,4(r2)
   22f58:	80800317 	ldw	r2,12(r16)
   22f5c:	80c00217 	ldw	r3,8(r16)
   22f60:	18800315 	stw	r2,12(r3)
   22f64:	10c00215 	stw	r3,8(r2)
   22f68:	00009206 	br	231b4 <_malloc_r+0x648>
   22f6c:	4a400044 	addi	r9,r9,1
   22f70:	490000cc 	andi	r4,r9,3
   22f74:	39c00204 	addi	r7,r7,8
   22f78:	203fd91e 	bne	r4,zero,22ee0 <__alt_data_end+0xf4022ee0>
   22f7c:	110000cc 	andi	r4,r2,3
   22f80:	2000051e 	bne	r4,zero,22f98 <_malloc_r+0x42c>
   22f84:	90c00117 	ldw	r3,4(r18)
   22f88:	0204303a 	nor	r2,zero,r8
   22f8c:	10c4703a 	and	r2,r2,r3
   22f90:	90800115 	stw	r2,4(r18)
   22f94:	00000406 	br	22fa8 <_malloc_r+0x43c>
   22f98:	193ffe04 	addi	r4,r3,-8
   22f9c:	18c00017 	ldw	r3,0(r3)
   22fa0:	10bfffc4 	addi	r2,r2,-1
   22fa4:	193ff526 	beq	r3,r4,22f7c <__alt_data_end+0xf4022f7c>
   22fa8:	90800117 	ldw	r2,4(r18)
   22fac:	4211883a 	add	r8,r8,r8
   22fb0:	12000836 	bltu	r2,r8,22fd4 <_malloc_r+0x468>
   22fb4:	40000726 	beq	r8,zero,22fd4 <_malloc_r+0x468>
   22fb8:	4086703a 	and	r3,r8,r2
   22fbc:	1800031e 	bne	r3,zero,22fcc <_malloc_r+0x460>
   22fc0:	4a400104 	addi	r9,r9,4
   22fc4:	4211883a 	add	r8,r8,r8
   22fc8:	003ffb06 	br	22fb8 <__alt_data_end+0xf4022fb8>
   22fcc:	4805883a 	mov	r2,r9
   22fd0:	003fbd06 	br	22ec8 <__alt_data_end+0xf4022ec8>
   22fd4:	95c00217 	ldw	r23,8(r18)
   22fd8:	00bfff04 	movi	r2,-4
   22fdc:	bd400117 	ldw	r21,4(r23)
   22fe0:	a8aa703a 	and	r21,r21,r2
   22fe4:	ac400336 	bltu	r21,r17,22ff4 <_malloc_r+0x488>
   22fe8:	ac47c83a 	sub	r3,r21,r17
   22fec:	008003c4 	movi	r2,15
   22ff0:	10c06916 	blt	r2,r3,23198 <_malloc_r+0x62c>
   22ff4:	d0a02917 	ldw	r2,-32604(gp)
   22ff8:	d0e01217 	ldw	r3,-32696(gp)
   22ffc:	05bfffc4 	movi	r22,-1
   23000:	bd61883a 	add	r16,r23,r21
   23004:	8885883a 	add	r2,r17,r2
   23008:	1d80021e 	bne	r3,r22,23014 <_malloc_r+0x4a8>
   2300c:	17000404 	addi	fp,r2,16
   23010:	00000306 	br	23020 <_malloc_r+0x4b4>
   23014:	108023c4 	addi	r2,r2,143
   23018:	073fe004 	movi	fp,-128
   2301c:	1738703a 	and	fp,r2,fp
   23020:	9809883a 	mov	r4,r19
   23024:	e00b883a 	mov	r5,fp
   23028:	002334c0 	call	2334c <_sbrk_r>
   2302c:	1029883a 	mov	r20,r2
   23030:	15804d26 	beq	r2,r22,23168 <_malloc_r+0x5fc>
   23034:	1400012e 	bgeu	r2,r16,2303c <_malloc_r+0x4d0>
   23038:	bc804b1e 	bne	r23,r18,23168 <_malloc_r+0x5fc>
   2303c:	05820034 	movhi	r22,2048
   23040:	b586b504 	addi	r22,r22,6868
   23044:	b1000017 	ldw	r4,0(r22)
   23048:	e109883a 	add	r4,fp,r4
   2304c:	b1000015 	stw	r4,0(r22)
   23050:	a400071e 	bne	r20,r16,23070 <_malloc_r+0x504>
   23054:	a0801fcc 	andi	r2,r20,127
   23058:	1000051e 	bne	r2,zero,23070 <_malloc_r+0x504>
   2305c:	90c00217 	ldw	r3,8(r18)
   23060:	e545883a 	add	r2,fp,r21
   23064:	10800054 	ori	r2,r2,1
   23068:	18800115 	stw	r2,4(r3)
   2306c:	00003706 	br	2314c <_malloc_r+0x5e0>
   23070:	d0e01217 	ldw	r3,-32696(gp)
   23074:	00bfffc4 	movi	r2,-1
   23078:	1880021e 	bne	r3,r2,23084 <_malloc_r+0x518>
   2307c:	d5201215 	stw	r20,-32696(gp)
   23080:	00000306 	br	23090 <_malloc_r+0x524>
   23084:	a407c83a 	sub	r3,r20,r16
   23088:	20c7883a 	add	r3,r4,r3
   2308c:	b0c00015 	stw	r3,0(r22)
   23090:	a40001cc 	andi	r16,r20,7
   23094:	80000426 	beq	r16,zero,230a8 <_malloc_r+0x53c>
   23098:	00c00204 	movi	r3,8
   2309c:	1c21c83a 	sub	r16,r3,r16
   230a0:	a429883a 	add	r20,r20,r16
   230a4:	00000106 	br	230ac <_malloc_r+0x540>
   230a8:	0021883a 	mov	r16,zero
   230ac:	a705883a 	add	r2,r20,fp
   230b0:	10801fcc 	andi	r2,r2,127
   230b4:	84002004 	addi	r16,r16,128
   230b8:	80a1c83a 	sub	r16,r16,r2
   230bc:	9809883a 	mov	r4,r19
   230c0:	800b883a 	mov	r5,r16
   230c4:	002334c0 	call	2334c <_sbrk_r>
   230c8:	00ffffc4 	movi	r3,-1
   230cc:	10c0021e 	bne	r2,r3,230d8 <_malloc_r+0x56c>
   230d0:	a005883a 	mov	r2,r20
   230d4:	0021883a 	mov	r16,zero
   230d8:	b0c00017 	ldw	r3,0(r22)
   230dc:	1505c83a 	sub	r2,r2,r20
   230e0:	95000215 	stw	r20,8(r18)
   230e4:	80c7883a 	add	r3,r16,r3
   230e8:	1421883a 	add	r16,r2,r16
   230ec:	84000054 	ori	r16,r16,1
   230f0:	b0c00015 	stw	r3,0(r22)
   230f4:	a4000115 	stw	r16,4(r20)
   230f8:	bc801426 	beq	r23,r18,2314c <_malloc_r+0x5e0>
   230fc:	00c003c4 	movi	r3,15
   23100:	1d400336 	bltu	r3,r21,23110 <_malloc_r+0x5a4>
   23104:	00800044 	movi	r2,1
   23108:	a0800115 	stw	r2,4(r20)
   2310c:	00001606 	br	23168 <_malloc_r+0x5fc>
   23110:	00bffe04 	movi	r2,-8
   23114:	ad7ffd04 	addi	r21,r21,-12
   23118:	a8aa703a 	and	r21,r21,r2
   2311c:	b8800117 	ldw	r2,4(r23)
   23120:	01000144 	movi	r4,5
   23124:	1080004c 	andi	r2,r2,1
   23128:	a884b03a 	or	r2,r21,r2
   2312c:	b8800115 	stw	r2,4(r23)
   23130:	bd45883a 	add	r2,r23,r21
   23134:	11000115 	stw	r4,4(r2)
   23138:	11000215 	stw	r4,8(r2)
   2313c:	1d40032e 	bgeu	r3,r21,2314c <_malloc_r+0x5e0>
   23140:	9809883a 	mov	r4,r19
   23144:	b9400204 	addi	r5,r23,8
   23148:	0023df80 	call	23df8 <_free_r>
   2314c:	b0800017 	ldw	r2,0(r22)
   23150:	d0e02817 	ldw	r3,-32608(gp)
   23154:	1880012e 	bgeu	r3,r2,2315c <_malloc_r+0x5f0>
   23158:	d0a02815 	stw	r2,-32608(gp)
   2315c:	d0e02717 	ldw	r3,-32612(gp)
   23160:	1880012e 	bgeu	r3,r2,23168 <_malloc_r+0x5fc>
   23164:	d0a02715 	stw	r2,-32612(gp)
   23168:	90800217 	ldw	r2,8(r18)
   2316c:	10c00117 	ldw	r3,4(r2)
   23170:	00bfff04 	movi	r2,-4
   23174:	1884703a 	and	r2,r3,r2
   23178:	1447c83a 	sub	r3,r2,r17
   2317c:	14400236 	bltu	r2,r17,23188 <_malloc_r+0x61c>
   23180:	008003c4 	movi	r2,15
   23184:	10c00416 	blt	r2,r3,23198 <_malloc_r+0x62c>
   23188:	9809883a 	mov	r4,r19
   2318c:	00246ac0 	call	246ac <__malloc_unlock>
   23190:	0005883a 	mov	r2,zero
   23194:	00000a06 	br	231c0 <_malloc_r+0x654>
   23198:	94000217 	ldw	r16,8(r18)
   2319c:	88800054 	ori	r2,r17,1
   231a0:	80800115 	stw	r2,4(r16)
   231a4:	8445883a 	add	r2,r16,r17
   231a8:	90800215 	stw	r2,8(r18)
   231ac:	18c00054 	ori	r3,r3,1
   231b0:	10c00115 	stw	r3,4(r2)
   231b4:	9809883a 	mov	r4,r19
   231b8:	00246ac0 	call	246ac <__malloc_unlock>
   231bc:	80800204 	addi	r2,r16,8
   231c0:	dfc00917 	ldw	ra,36(sp)
   231c4:	df000817 	ldw	fp,32(sp)
   231c8:	ddc00717 	ldw	r23,28(sp)
   231cc:	dd800617 	ldw	r22,24(sp)
   231d0:	dd400517 	ldw	r21,20(sp)
   231d4:	dd000417 	ldw	r20,16(sp)
   231d8:	dcc00317 	ldw	r19,12(sp)
   231dc:	dc800217 	ldw	r18,8(sp)
   231e0:	dc400117 	ldw	r17,4(sp)
   231e4:	dc000017 	ldw	r16,0(sp)
   231e8:	dec00a04 	addi	sp,sp,40
   231ec:	f800283a 	ret

000231f0 <memset>:
   231f0:	2005883a 	mov	r2,r4
   231f4:	2007883a 	mov	r3,r4
   231f8:	218d883a 	add	r6,r4,r6
   231fc:	19800326 	beq	r3,r6,2320c <memset+0x1c>
   23200:	19400005 	stb	r5,0(r3)
   23204:	18c00044 	addi	r3,r3,1
   23208:	003ffc06 	br	231fc <__alt_data_end+0xf40231fc>
   2320c:	f800283a 	ret

00023210 <_printf_r>:
   23210:	defffd04 	addi	sp,sp,-12
   23214:	dfc00015 	stw	ra,0(sp)
   23218:	d9800115 	stw	r6,4(sp)
   2321c:	d9c00215 	stw	r7,8(sp)
   23220:	20c00217 	ldw	r3,8(r4)
   23224:	280d883a 	mov	r6,r5
   23228:	014000b4 	movhi	r5,2
   2322c:	29502004 	addi	r5,r5,16512
   23230:	19400115 	stw	r5,4(r3)
   23234:	21400217 	ldw	r5,8(r4)
   23238:	d9c00104 	addi	r7,sp,4
   2323c:	00237440 	call	23744 <___vfprintf_internal_r>
   23240:	dfc00017 	ldw	ra,0(sp)
   23244:	dec00304 	addi	sp,sp,12
   23248:	f800283a 	ret

0002324c <printf>:
   2324c:	defffc04 	addi	sp,sp,-16
   23250:	dfc00015 	stw	ra,0(sp)
   23254:	d9400115 	stw	r5,4(sp)
   23258:	d9800215 	stw	r6,8(sp)
   2325c:	d9c00315 	stw	r7,12(sp)
   23260:	00820034 	movhi	r2,2048
   23264:	1083cf04 	addi	r2,r2,3900
   23268:	10800017 	ldw	r2,0(r2)
   2326c:	200b883a 	mov	r5,r4
   23270:	010000b4 	movhi	r4,2
   23274:	10c00217 	ldw	r3,8(r2)
   23278:	21102004 	addi	r4,r4,16512
   2327c:	d9800104 	addi	r6,sp,4
   23280:	19000115 	stw	r4,4(r3)
   23284:	11000217 	ldw	r4,8(r2)
   23288:	0023cb00 	call	23cb0 <__vfprintf_internal>
   2328c:	dfc00017 	ldw	ra,0(sp)
   23290:	dec00404 	addi	sp,sp,16
   23294:	f800283a 	ret

00023298 <_putchar_r>:
   23298:	21800217 	ldw	r6,8(r4)
   2329c:	00241801 	jmpi	24180 <_putc_r>

000232a0 <putchar>:
   232a0:	00820034 	movhi	r2,2048
   232a4:	1083cf04 	addi	r2,r2,3900
   232a8:	200b883a 	mov	r5,r4
   232ac:	11000017 	ldw	r4,0(r2)
   232b0:	21800217 	ldw	r6,8(r4)
   232b4:	00241801 	jmpi	24180 <_putc_r>

000232b8 <_puts_r>:
   232b8:	defffd04 	addi	sp,sp,-12
   232bc:	dc000015 	stw	r16,0(sp)
   232c0:	2021883a 	mov	r16,r4
   232c4:	2809883a 	mov	r4,r5
   232c8:	dfc00215 	stw	ra,8(sp)
   232cc:	dc400115 	stw	r17,4(sp)
   232d0:	2823883a 	mov	r17,r5
   232d4:	00236bc0 	call	236bc <strlen>
   232d8:	81400217 	ldw	r5,8(r16)
   232dc:	00c000b4 	movhi	r3,2
   232e0:	18d02004 	addi	r3,r3,16512
   232e4:	28c00115 	stw	r3,4(r5)
   232e8:	8009883a 	mov	r4,r16
   232ec:	880d883a 	mov	r6,r17
   232f0:	100f883a 	mov	r7,r2
   232f4:	00240800 	call	24080 <__sfvwrite_small_dev>
   232f8:	00ffffc4 	movi	r3,-1
   232fc:	10c00926 	beq	r2,r3,23324 <_puts_r+0x6c>
   23300:	81400217 	ldw	r5,8(r16)
   23304:	01820034 	movhi	r6,2048
   23308:	8009883a 	mov	r4,r16
   2330c:	28800117 	ldw	r2,4(r5)
   23310:	31814d04 	addi	r6,r6,1332
   23314:	01c00044 	movi	r7,1
   23318:	103ee83a 	callr	r2
   2331c:	10bfffe0 	cmpeqi	r2,r2,-1
   23320:	0085c83a 	sub	r2,zero,r2
   23324:	dfc00217 	ldw	ra,8(sp)
   23328:	dc400117 	ldw	r17,4(sp)
   2332c:	dc000017 	ldw	r16,0(sp)
   23330:	dec00304 	addi	sp,sp,12
   23334:	f800283a 	ret

00023338 <puts>:
   23338:	00820034 	movhi	r2,2048
   2333c:	1083cf04 	addi	r2,r2,3900
   23340:	200b883a 	mov	r5,r4
   23344:	11000017 	ldw	r4,0(r2)
   23348:	00232b81 	jmpi	232b8 <_puts_r>

0002334c <_sbrk_r>:
   2334c:	defffd04 	addi	sp,sp,-12
   23350:	dc000015 	stw	r16,0(sp)
   23354:	04020034 	movhi	r16,2048
   23358:	dc400115 	stw	r17,4(sp)
   2335c:	8403e404 	addi	r16,r16,3984
   23360:	2023883a 	mov	r17,r4
   23364:	2809883a 	mov	r4,r5
   23368:	dfc00215 	stw	ra,8(sp)
   2336c:	80000015 	stw	zero,0(r16)
   23370:	00249380 	call	24938 <sbrk>
   23374:	00ffffc4 	movi	r3,-1
   23378:	10c0031e 	bne	r2,r3,23388 <_sbrk_r+0x3c>
   2337c:	80c00017 	ldw	r3,0(r16)
   23380:	18000126 	beq	r3,zero,23388 <_sbrk_r+0x3c>
   23384:	88c00015 	stw	r3,0(r17)
   23388:	dfc00217 	ldw	ra,8(sp)
   2338c:	dc400117 	ldw	r17,4(sp)
   23390:	dc000017 	ldw	r16,0(sp)
   23394:	dec00304 	addi	sp,sp,12
   23398:	f800283a 	ret

0002339c <_init_signal_r>:
   2339c:	20800b17 	ldw	r2,44(r4)
   233a0:	defffe04 	addi	sp,sp,-8
   233a4:	dc000015 	stw	r16,0(sp)
   233a8:	dfc00115 	stw	ra,4(sp)
   233ac:	2021883a 	mov	r16,r4
   233b0:	10000226 	beq	r2,zero,233bc <_init_signal_r+0x20>
   233b4:	0005883a 	mov	r2,zero
   233b8:	00000d06 	br	233f0 <_init_signal_r+0x54>
   233bc:	01402004 	movi	r5,128
   233c0:	0022b6c0 	call	22b6c <_malloc_r>
   233c4:	80800b15 	stw	r2,44(r16)
   233c8:	10000826 	beq	r2,zero,233ec <_init_signal_r+0x50>
   233cc:	0005883a 	mov	r2,zero
   233d0:	01002004 	movi	r4,128
   233d4:	80c00b17 	ldw	r3,44(r16)
   233d8:	1887883a 	add	r3,r3,r2
   233dc:	18000015 	stw	zero,0(r3)
   233e0:	10800104 	addi	r2,r2,4
   233e4:	113ffb1e 	bne	r2,r4,233d4 <__alt_data_end+0xf40233d4>
   233e8:	003ff206 	br	233b4 <__alt_data_end+0xf40233b4>
   233ec:	00bfffc4 	movi	r2,-1
   233f0:	dfc00117 	ldw	ra,4(sp)
   233f4:	dc000017 	ldw	r16,0(sp)
   233f8:	dec00204 	addi	sp,sp,8
   233fc:	f800283a 	ret

00023400 <_signal_r>:
   23400:	defffc04 	addi	sp,sp,-16
   23404:	dc400115 	stw	r17,4(sp)
   23408:	dfc00315 	stw	ra,12(sp)
   2340c:	dc800215 	stw	r18,8(sp)
   23410:	dc000015 	stw	r16,0(sp)
   23414:	008007c4 	movi	r2,31
   23418:	2023883a 	mov	r17,r4
   2341c:	1140032e 	bgeu	r2,r5,2342c <_signal_r+0x2c>
   23420:	00800584 	movi	r2,22
   23424:	20800015 	stw	r2,0(r4)
   23428:	00000d06 	br	23460 <_signal_r+0x60>
   2342c:	20800b17 	ldw	r2,44(r4)
   23430:	3025883a 	mov	r18,r6
   23434:	2821883a 	mov	r16,r5
   23438:	10000726 	beq	r2,zero,23458 <_signal_r+0x58>
   2343c:	88800b17 	ldw	r2,44(r17)
   23440:	8421883a 	add	r16,r16,r16
   23444:	8421883a 	add	r16,r16,r16
   23448:	1421883a 	add	r16,r2,r16
   2344c:	80800017 	ldw	r2,0(r16)
   23450:	84800015 	stw	r18,0(r16)
   23454:	00000306 	br	23464 <_signal_r+0x64>
   23458:	002339c0 	call	2339c <_init_signal_r>
   2345c:	103ff726 	beq	r2,zero,2343c <__alt_data_end+0xf402343c>
   23460:	00bfffc4 	movi	r2,-1
   23464:	dfc00317 	ldw	ra,12(sp)
   23468:	dc800217 	ldw	r18,8(sp)
   2346c:	dc400117 	ldw	r17,4(sp)
   23470:	dc000017 	ldw	r16,0(sp)
   23474:	dec00404 	addi	sp,sp,16
   23478:	f800283a 	ret

0002347c <_raise_r>:
   2347c:	008007c4 	movi	r2,31
   23480:	1140042e 	bgeu	r2,r5,23494 <_raise_r+0x18>
   23484:	00800584 	movi	r2,22
   23488:	20800015 	stw	r2,0(r4)
   2348c:	00bfffc4 	movi	r2,-1
   23490:	f800283a 	ret
   23494:	20c00b17 	ldw	r3,44(r4)
   23498:	defffd04 	addi	sp,sp,-12
   2349c:	dc400115 	stw	r17,4(sp)
   234a0:	dc000015 	stw	r16,0(sp)
   234a4:	dfc00215 	stw	ra,8(sp)
   234a8:	2821883a 	mov	r16,r5
   234ac:	2023883a 	mov	r17,r4
   234b0:	18000526 	beq	r3,zero,234c8 <_raise_r+0x4c>
   234b4:	2945883a 	add	r2,r5,r5
   234b8:	1085883a 	add	r2,r2,r2
   234bc:	1887883a 	add	r3,r3,r2
   234c0:	19400017 	ldw	r5,0(r3)
   234c4:	28000a1e 	bne	r5,zero,234f0 <_raise_r+0x74>
   234c8:	8809883a 	mov	r4,r17
   234cc:	00236800 	call	23680 <_getpid_r>
   234d0:	8809883a 	mov	r4,r17
   234d4:	100b883a 	mov	r5,r2
   234d8:	800d883a 	mov	r6,r16
   234dc:	dfc00217 	ldw	ra,8(sp)
   234e0:	dc400117 	ldw	r17,4(sp)
   234e4:	dc000017 	ldw	r16,0(sp)
   234e8:	dec00304 	addi	sp,sp,12
   234ec:	002362c1 	jmpi	2362c <_kill_r>
   234f0:	00800044 	movi	r2,1
   234f4:	28800826 	beq	r5,r2,23518 <_raise_r+0x9c>
   234f8:	013fffc4 	movi	r4,-1
   234fc:	2900031e 	bne	r5,r4,2350c <_raise_r+0x90>
   23500:	00c00584 	movi	r3,22
   23504:	88c00015 	stw	r3,0(r17)
   23508:	00000406 	br	2351c <_raise_r+0xa0>
   2350c:	18000015 	stw	zero,0(r3)
   23510:	8009883a 	mov	r4,r16
   23514:	283ee83a 	callr	r5
   23518:	0005883a 	mov	r2,zero
   2351c:	dfc00217 	ldw	ra,8(sp)
   23520:	dc400117 	ldw	r17,4(sp)
   23524:	dc000017 	ldw	r16,0(sp)
   23528:	dec00304 	addi	sp,sp,12
   2352c:	f800283a 	ret

00023530 <__sigtramp_r>:
   23530:	008007c4 	movi	r2,31
   23534:	11402636 	bltu	r2,r5,235d0 <__sigtramp_r+0xa0>
   23538:	20800b17 	ldw	r2,44(r4)
   2353c:	defffd04 	addi	sp,sp,-12
   23540:	dc400115 	stw	r17,4(sp)
   23544:	dc000015 	stw	r16,0(sp)
   23548:	dfc00215 	stw	ra,8(sp)
   2354c:	2023883a 	mov	r17,r4
   23550:	2821883a 	mov	r16,r5
   23554:	10000726 	beq	r2,zero,23574 <__sigtramp_r+0x44>
   23558:	88c00b17 	ldw	r3,44(r17)
   2355c:	8405883a 	add	r2,r16,r16
   23560:	1085883a 	add	r2,r2,r2
   23564:	1885883a 	add	r2,r3,r2
   23568:	10c00017 	ldw	r3,0(r2)
   2356c:	1800051e 	bne	r3,zero,23584 <__sigtramp_r+0x54>
   23570:	00000d06 	br	235a8 <__sigtramp_r+0x78>
   23574:	002339c0 	call	2339c <_init_signal_r>
   23578:	103ff726 	beq	r2,zero,23558 <__alt_data_end+0xf4023558>
   2357c:	00bfffc4 	movi	r2,-1
   23580:	00000e06 	br	235bc <__sigtramp_r+0x8c>
   23584:	013fffc4 	movi	r4,-1
   23588:	19000926 	beq	r3,r4,235b0 <__sigtramp_r+0x80>
   2358c:	01000044 	movi	r4,1
   23590:	19000926 	beq	r3,r4,235b8 <__sigtramp_r+0x88>
   23594:	10000015 	stw	zero,0(r2)
   23598:	8009883a 	mov	r4,r16
   2359c:	183ee83a 	callr	r3
   235a0:	0005883a 	mov	r2,zero
   235a4:	00000506 	br	235bc <__sigtramp_r+0x8c>
   235a8:	00800044 	movi	r2,1
   235ac:	00000306 	br	235bc <__sigtramp_r+0x8c>
   235b0:	00800084 	movi	r2,2
   235b4:	00000106 	br	235bc <__sigtramp_r+0x8c>
   235b8:	008000c4 	movi	r2,3
   235bc:	dfc00217 	ldw	ra,8(sp)
   235c0:	dc400117 	ldw	r17,4(sp)
   235c4:	dc000017 	ldw	r16,0(sp)
   235c8:	dec00304 	addi	sp,sp,12
   235cc:	f800283a 	ret
   235d0:	00bfffc4 	movi	r2,-1
   235d4:	f800283a 	ret

000235d8 <raise>:
   235d8:	00820034 	movhi	r2,2048
   235dc:	1083cf04 	addi	r2,r2,3900
   235e0:	200b883a 	mov	r5,r4
   235e4:	11000017 	ldw	r4,0(r2)
   235e8:	002347c1 	jmpi	2347c <_raise_r>

000235ec <signal>:
   235ec:	00c20034 	movhi	r3,2048
   235f0:	18c3cf04 	addi	r3,r3,3900
   235f4:	2005883a 	mov	r2,r4
   235f8:	19000017 	ldw	r4,0(r3)
   235fc:	280d883a 	mov	r6,r5
   23600:	100b883a 	mov	r5,r2
   23604:	00234001 	jmpi	23400 <_signal_r>

00023608 <_init_signal>:
   23608:	00820034 	movhi	r2,2048
   2360c:	1083cf04 	addi	r2,r2,3900
   23610:	11000017 	ldw	r4,0(r2)
   23614:	002339c1 	jmpi	2339c <_init_signal_r>

00023618 <__sigtramp>:
   23618:	00820034 	movhi	r2,2048
   2361c:	1083cf04 	addi	r2,r2,3900
   23620:	200b883a 	mov	r5,r4
   23624:	11000017 	ldw	r4,0(r2)
   23628:	00235301 	jmpi	23530 <__sigtramp_r>

0002362c <_kill_r>:
   2362c:	defffd04 	addi	sp,sp,-12
   23630:	dc000015 	stw	r16,0(sp)
   23634:	04020034 	movhi	r16,2048
   23638:	dc400115 	stw	r17,4(sp)
   2363c:	8403e404 	addi	r16,r16,3984
   23640:	2023883a 	mov	r17,r4
   23644:	2809883a 	mov	r4,r5
   23648:	300b883a 	mov	r5,r6
   2364c:	dfc00215 	stw	ra,8(sp)
   23650:	80000015 	stw	zero,0(r16)
   23654:	00244000 	call	24400 <kill>
   23658:	00ffffc4 	movi	r3,-1
   2365c:	10c0031e 	bne	r2,r3,2366c <_kill_r+0x40>
   23660:	80c00017 	ldw	r3,0(r16)
   23664:	18000126 	beq	r3,zero,2366c <_kill_r+0x40>
   23668:	88c00015 	stw	r3,0(r17)
   2366c:	dfc00217 	ldw	ra,8(sp)
   23670:	dc400117 	ldw	r17,4(sp)
   23674:	dc000017 	ldw	r16,0(sp)
   23678:	dec00304 	addi	sp,sp,12
   2367c:	f800283a 	ret

00023680 <_getpid_r>:
   23680:	00243901 	jmpi	24390 <getpid>

00023684 <strcmp>:
   23684:	20800003 	ldbu	r2,0(r4)
   23688:	10c03fcc 	andi	r3,r2,255
   2368c:	18c0201c 	xori	r3,r3,128
   23690:	18ffe004 	addi	r3,r3,-128
   23694:	18000526 	beq	r3,zero,236ac <strcmp+0x28>
   23698:	29800007 	ldb	r6,0(r5)
   2369c:	1980031e 	bne	r3,r6,236ac <strcmp+0x28>
   236a0:	21000044 	addi	r4,r4,1
   236a4:	29400044 	addi	r5,r5,1
   236a8:	003ff606 	br	23684 <__alt_data_end+0xf4023684>
   236ac:	28c00003 	ldbu	r3,0(r5)
   236b0:	10803fcc 	andi	r2,r2,255
   236b4:	10c5c83a 	sub	r2,r2,r3
   236b8:	f800283a 	ret

000236bc <strlen>:
   236bc:	2005883a 	mov	r2,r4
   236c0:	10c00007 	ldb	r3,0(r2)
   236c4:	18000226 	beq	r3,zero,236d0 <strlen+0x14>
   236c8:	10800044 	addi	r2,r2,1
   236cc:	003ffc06 	br	236c0 <__alt_data_end+0xf40236c0>
   236d0:	1105c83a 	sub	r2,r2,r4
   236d4:	f800283a 	ret

000236d8 <print_repeat>:
   236d8:	defffb04 	addi	sp,sp,-20
   236dc:	dc800315 	stw	r18,12(sp)
   236e0:	dc400215 	stw	r17,8(sp)
   236e4:	dc000115 	stw	r16,4(sp)
   236e8:	dfc00415 	stw	ra,16(sp)
   236ec:	2025883a 	mov	r18,r4
   236f0:	2823883a 	mov	r17,r5
   236f4:	d9800005 	stb	r6,0(sp)
   236f8:	3821883a 	mov	r16,r7
   236fc:	04000a0e 	bge	zero,r16,23728 <print_repeat+0x50>
   23700:	88800117 	ldw	r2,4(r17)
   23704:	9009883a 	mov	r4,r18
   23708:	880b883a 	mov	r5,r17
   2370c:	d80d883a 	mov	r6,sp
   23710:	01c00044 	movi	r7,1
   23714:	103ee83a 	callr	r2
   23718:	843fffc4 	addi	r16,r16,-1
   2371c:	103ff726 	beq	r2,zero,236fc <__alt_data_end+0xf40236fc>
   23720:	00bfffc4 	movi	r2,-1
   23724:	00000106 	br	2372c <print_repeat+0x54>
   23728:	0005883a 	mov	r2,zero
   2372c:	dfc00417 	ldw	ra,16(sp)
   23730:	dc800317 	ldw	r18,12(sp)
   23734:	dc400217 	ldw	r17,8(sp)
   23738:	dc000117 	ldw	r16,4(sp)
   2373c:	dec00504 	addi	sp,sp,20
   23740:	f800283a 	ret

00023744 <___vfprintf_internal_r>:
   23744:	deffe304 	addi	sp,sp,-116
   23748:	d8c00804 	addi	r3,sp,32
   2374c:	df001b15 	stw	fp,108(sp)
   23750:	ddc01a15 	stw	r23,104(sp)
   23754:	dd801915 	stw	r22,100(sp)
   23758:	dd401815 	stw	r21,96(sp)
   2375c:	dd001715 	stw	r20,92(sp)
   23760:	dcc01615 	stw	r19,88(sp)
   23764:	dc801515 	stw	r18,84(sp)
   23768:	dc401415 	stw	r17,80(sp)
   2376c:	dc001315 	stw	r16,76(sp)
   23770:	dfc01c15 	stw	ra,112(sp)
   23774:	2029883a 	mov	r20,r4
   23778:	2823883a 	mov	r17,r5
   2377c:	3839883a 	mov	fp,r7
   23780:	d9800f15 	stw	r6,60(sp)
   23784:	0021883a 	mov	r16,zero
   23788:	d8000e15 	stw	zero,56(sp)
   2378c:	002f883a 	mov	r23,zero
   23790:	002b883a 	mov	r21,zero
   23794:	0027883a 	mov	r19,zero
   23798:	0025883a 	mov	r18,zero
   2379c:	d8000c15 	stw	zero,48(sp)
   237a0:	d8000b15 	stw	zero,44(sp)
   237a4:	002d883a 	mov	r22,zero
   237a8:	d8c00915 	stw	r3,36(sp)
   237ac:	d8c00f17 	ldw	r3,60(sp)
   237b0:	19000003 	ldbu	r4,0(r3)
   237b4:	20803fcc 	andi	r2,r4,255
   237b8:	1080201c 	xori	r2,r2,128
   237bc:	10bfe004 	addi	r2,r2,-128
   237c0:	10012e26 	beq	r2,zero,23c7c <___vfprintf_internal_r+0x538>
   237c4:	01400044 	movi	r5,1
   237c8:	b1401426 	beq	r22,r5,2381c <___vfprintf_internal_r+0xd8>
   237cc:	2d800216 	blt	r5,r22,237d8 <___vfprintf_internal_r+0x94>
   237d0:	b0000626 	beq	r22,zero,237ec <___vfprintf_internal_r+0xa8>
   237d4:	00012506 	br	23c6c <___vfprintf_internal_r+0x528>
   237d8:	01400084 	movi	r5,2
   237dc:	b1401d26 	beq	r22,r5,23854 <___vfprintf_internal_r+0x110>
   237e0:	014000c4 	movi	r5,3
   237e4:	b1402b26 	beq	r22,r5,23894 <___vfprintf_internal_r+0x150>
   237e8:	00012006 	br	23c6c <___vfprintf_internal_r+0x528>
   237ec:	01400944 	movi	r5,37
   237f0:	11410d26 	beq	r2,r5,23c28 <___vfprintf_internal_r+0x4e4>
   237f4:	88800117 	ldw	r2,4(r17)
   237f8:	d9000005 	stb	r4,0(sp)
   237fc:	880b883a 	mov	r5,r17
   23800:	a009883a 	mov	r4,r20
   23804:	d80d883a 	mov	r6,sp
   23808:	01c00044 	movi	r7,1
   2380c:	103ee83a 	callr	r2
   23810:	1000e81e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23814:	84000044 	addi	r16,r16,1
   23818:	00011406 	br	23c6c <___vfprintf_internal_r+0x528>
   2381c:	01400c04 	movi	r5,48
   23820:	11410a26 	beq	r2,r5,23c4c <___vfprintf_internal_r+0x508>
   23824:	01400944 	movi	r5,37
   23828:	11400a1e 	bne	r2,r5,23854 <___vfprintf_internal_r+0x110>
   2382c:	d8800005 	stb	r2,0(sp)
   23830:	88800117 	ldw	r2,4(r17)
   23834:	a009883a 	mov	r4,r20
   23838:	880b883a 	mov	r5,r17
   2383c:	d80d883a 	mov	r6,sp
   23840:	b00f883a 	mov	r7,r22
   23844:	103ee83a 	callr	r2
   23848:	1000da1e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   2384c:	84000044 	addi	r16,r16,1
   23850:	00010506 	br	23c68 <___vfprintf_internal_r+0x524>
   23854:	25bff404 	addi	r22,r4,-48
   23858:	b5803fcc 	andi	r22,r22,255
   2385c:	00c00244 	movi	r3,9
   23860:	1d800936 	bltu	r3,r22,23888 <___vfprintf_internal_r+0x144>
   23864:	00bfffc4 	movi	r2,-1
   23868:	90800426 	beq	r18,r2,2387c <___vfprintf_internal_r+0x138>
   2386c:	9009883a 	mov	r4,r18
   23870:	01400284 	movi	r5,10
   23874:	00225e40 	call	225e4 <__mulsi3>
   23878:	00000106 	br	23880 <___vfprintf_internal_r+0x13c>
   2387c:	0005883a 	mov	r2,zero
   23880:	15a5883a 	add	r18,r2,r22
   23884:	0000f206 	br	23c50 <___vfprintf_internal_r+0x50c>
   23888:	01400b84 	movi	r5,46
   2388c:	1140f426 	beq	r2,r5,23c60 <___vfprintf_internal_r+0x51c>
   23890:	05800084 	movi	r22,2
   23894:	213ff404 	addi	r4,r4,-48
   23898:	20c03fcc 	andi	r3,r4,255
   2389c:	01000244 	movi	r4,9
   238a0:	20c00b36 	bltu	r4,r3,238d0 <___vfprintf_internal_r+0x18c>
   238a4:	00bfffc4 	movi	r2,-1
   238a8:	98800626 	beq	r19,r2,238c4 <___vfprintf_internal_r+0x180>
   238ac:	9809883a 	mov	r4,r19
   238b0:	01400284 	movi	r5,10
   238b4:	d8c01115 	stw	r3,68(sp)
   238b8:	00225e40 	call	225e4 <__mulsi3>
   238bc:	d8c01117 	ldw	r3,68(sp)
   238c0:	00000106 	br	238c8 <___vfprintf_internal_r+0x184>
   238c4:	0005883a 	mov	r2,zero
   238c8:	10e7883a 	add	r19,r2,r3
   238cc:	0000e706 	br	23c6c <___vfprintf_internal_r+0x528>
   238d0:	01401b04 	movi	r5,108
   238d4:	1140e026 	beq	r2,r5,23c58 <___vfprintf_internal_r+0x514>
   238d8:	013fffc4 	movi	r4,-1
   238dc:	99000226 	beq	r19,r4,238e8 <___vfprintf_internal_r+0x1a4>
   238e0:	d8000b15 	stw	zero,44(sp)
   238e4:	00000106 	br	238ec <___vfprintf_internal_r+0x1a8>
   238e8:	04c00044 	movi	r19,1
   238ec:	01001a44 	movi	r4,105
   238f0:	11001626 	beq	r2,r4,2394c <___vfprintf_internal_r+0x208>
   238f4:	20800916 	blt	r4,r2,2391c <___vfprintf_internal_r+0x1d8>
   238f8:	010018c4 	movi	r4,99
   238fc:	11009626 	beq	r2,r4,23b58 <___vfprintf_internal_r+0x414>
   23900:	01001904 	movi	r4,100
   23904:	11001126 	beq	r2,r4,2394c <___vfprintf_internal_r+0x208>
   23908:	01001604 	movi	r4,88
   2390c:	1100d61e 	bne	r2,r4,23c68 <___vfprintf_internal_r+0x524>
   23910:	00c00044 	movi	r3,1
   23914:	d8c00e15 	stw	r3,56(sp)
   23918:	00001406 	br	2396c <___vfprintf_internal_r+0x228>
   2391c:	01001cc4 	movi	r4,115
   23920:	1100a626 	beq	r2,r4,23bbc <___vfprintf_internal_r+0x478>
   23924:	20800416 	blt	r4,r2,23938 <___vfprintf_internal_r+0x1f4>
   23928:	01001bc4 	movi	r4,111
   2392c:	1100ce1e 	bne	r2,r4,23c68 <___vfprintf_internal_r+0x524>
   23930:	05400204 	movi	r21,8
   23934:	00000e06 	br	23970 <___vfprintf_internal_r+0x22c>
   23938:	01001d44 	movi	r4,117
   2393c:	11000c26 	beq	r2,r4,23970 <___vfprintf_internal_r+0x22c>
   23940:	01001e04 	movi	r4,120
   23944:	11000926 	beq	r2,r4,2396c <___vfprintf_internal_r+0x228>
   23948:	0000c706 	br	23c68 <___vfprintf_internal_r+0x524>
   2394c:	e0800104 	addi	r2,fp,4
   23950:	b8000726 	beq	r23,zero,23970 <___vfprintf_internal_r+0x22c>
   23954:	d8800d15 	stw	r2,52(sp)
   23958:	e7000017 	ldw	fp,0(fp)
   2395c:	e000080e 	bge	fp,zero,23980 <___vfprintf_internal_r+0x23c>
   23960:	0739c83a 	sub	fp,zero,fp
   23964:	02000044 	movi	r8,1
   23968:	00000606 	br	23984 <___vfprintf_internal_r+0x240>
   2396c:	05400404 	movi	r21,16
   23970:	e0c00104 	addi	r3,fp,4
   23974:	d8c00d15 	stw	r3,52(sp)
   23978:	e7000017 	ldw	fp,0(fp)
   2397c:	002f883a 	mov	r23,zero
   23980:	0011883a 	mov	r8,zero
   23984:	002d883a 	mov	r22,zero
   23988:	dd87883a 	add	r3,sp,r22
   2398c:	e0001a26 	beq	fp,zero,239f8 <___vfprintf_internal_r+0x2b4>
   23990:	e009883a 	mov	r4,fp
   23994:	a80b883a 	mov	r5,r21
   23998:	d8c01115 	stw	r3,68(sp)
   2399c:	da001215 	stw	r8,72(sp)
   239a0:	002434c0 	call	2434c <__udivsi3>
   239a4:	a809883a 	mov	r4,r21
   239a8:	100b883a 	mov	r5,r2
   239ac:	d8801015 	stw	r2,64(sp)
   239b0:	00225e40 	call	225e4 <__mulsi3>
   239b4:	e085c83a 	sub	r2,fp,r2
   239b8:	01000244 	movi	r4,9
   239bc:	d8c01117 	ldw	r3,68(sp)
   239c0:	d9801017 	ldw	r6,64(sp)
   239c4:	da001217 	ldw	r8,72(sp)
   239c8:	20800216 	blt	r4,r2,239d4 <___vfprintf_internal_r+0x290>
   239cc:	17000c04 	addi	fp,r2,48
   239d0:	00000506 	br	239e8 <___vfprintf_internal_r+0x2a4>
   239d4:	d9400e17 	ldw	r5,56(sp)
   239d8:	28000226 	beq	r5,zero,239e4 <___vfprintf_internal_r+0x2a0>
   239dc:	17000dc4 	addi	fp,r2,55
   239e0:	00000106 	br	239e8 <___vfprintf_internal_r+0x2a4>
   239e4:	170015c4 	addi	fp,r2,87
   239e8:	1f000005 	stb	fp,0(r3)
   239ec:	b5800044 	addi	r22,r22,1
   239f0:	3039883a 	mov	fp,r6
   239f4:	003fe406 	br	23988 <__alt_data_end+0xf4023988>
   239f8:	1ec5c83a 	sub	r2,r3,sp
   239fc:	d8800a15 	stw	r2,40(sp)
   23a00:	9885c83a 	sub	r2,r19,r2
   23a04:	1839883a 	mov	fp,r3
   23a08:	00800e0e 	bge	zero,r2,23a44 <___vfprintf_internal_r+0x300>
   23a0c:	182d883a 	mov	r22,r3
   23a10:	1885883a 	add	r2,r3,r2
   23a14:	01000c04 	movi	r4,48
   23a18:	d9400917 	ldw	r5,36(sp)
   23a1c:	b007883a 	mov	r3,r22
   23a20:	b140052e 	bgeu	r22,r5,23a38 <___vfprintf_internal_r+0x2f4>
   23a24:	b5800044 	addi	r22,r22,1
   23a28:	19000005 	stb	r4,0(r3)
   23a2c:	b039883a 	mov	fp,r22
   23a30:	b0bff91e 	bne	r22,r2,23a18 <__alt_data_end+0xf4023a18>
   23a34:	00000106 	br	23a3c <___vfprintf_internal_r+0x2f8>
   23a38:	b039883a 	mov	fp,r22
   23a3c:	b6edc83a 	sub	r22,r22,sp
   23a40:	dd800a15 	stw	r22,40(sp)
   23a44:	d8800a17 	ldw	r2,40(sp)
   23a48:	1207883a 	add	r3,r2,r8
   23a4c:	90edc83a 	sub	r22,r18,r3
   23a50:	d8c00b17 	ldw	r3,44(sp)
   23a54:	18001726 	beq	r3,zero,23ab4 <___vfprintf_internal_r+0x370>
   23a58:	40000a26 	beq	r8,zero,23a84 <___vfprintf_internal_r+0x340>
   23a5c:	00800b44 	movi	r2,45
   23a60:	d8800805 	stb	r2,32(sp)
   23a64:	88800117 	ldw	r2,4(r17)
   23a68:	a009883a 	mov	r4,r20
   23a6c:	880b883a 	mov	r5,r17
   23a70:	d9800804 	addi	r6,sp,32
   23a74:	01c00044 	movi	r7,1
   23a78:	103ee83a 	callr	r2
   23a7c:	10004d1e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23a80:	84000044 	addi	r16,r16,1
   23a84:	0580070e 	bge	zero,r22,23aa4 <___vfprintf_internal_r+0x360>
   23a88:	a009883a 	mov	r4,r20
   23a8c:	880b883a 	mov	r5,r17
   23a90:	01800c04 	movi	r6,48
   23a94:	b00f883a 	mov	r7,r22
   23a98:	00236d80 	call	236d8 <print_repeat>
   23a9c:	1000451e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23aa0:	85a1883a 	add	r16,r16,r22
   23aa4:	d9000a17 	ldw	r4,40(sp)
   23aa8:	e007883a 	mov	r3,fp
   23aac:	272dc83a 	sub	r22,r4,fp
   23ab0:	00002206 	br	23b3c <___vfprintf_internal_r+0x3f8>
   23ab4:	0580090e 	bge	zero,r22,23adc <___vfprintf_internal_r+0x398>
   23ab8:	a009883a 	mov	r4,r20
   23abc:	880b883a 	mov	r5,r17
   23ac0:	01800804 	movi	r6,32
   23ac4:	b00f883a 	mov	r7,r22
   23ac8:	da001215 	stw	r8,72(sp)
   23acc:	00236d80 	call	236d8 <print_repeat>
   23ad0:	da001217 	ldw	r8,72(sp)
   23ad4:	1000371e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23ad8:	85a1883a 	add	r16,r16,r22
   23adc:	403ff126 	beq	r8,zero,23aa4 <__alt_data_end+0xf4023aa4>
   23ae0:	00800b44 	movi	r2,45
   23ae4:	d8800805 	stb	r2,32(sp)
   23ae8:	88800117 	ldw	r2,4(r17)
   23aec:	a009883a 	mov	r4,r20
   23af0:	880b883a 	mov	r5,r17
   23af4:	d9800804 	addi	r6,sp,32
   23af8:	01c00044 	movi	r7,1
   23afc:	103ee83a 	callr	r2
   23b00:	10002c1e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23b04:	84000044 	addi	r16,r16,1
   23b08:	003fe606 	br	23aa4 <__alt_data_end+0xf4023aa4>
   23b0c:	18ffffc4 	addi	r3,r3,-1
   23b10:	18800003 	ldbu	r2,0(r3)
   23b14:	a009883a 	mov	r4,r20
   23b18:	d8c01115 	stw	r3,68(sp)
   23b1c:	d8800805 	stb	r2,32(sp)
   23b20:	88800117 	ldw	r2,4(r17)
   23b24:	880b883a 	mov	r5,r17
   23b28:	d9800804 	addi	r6,sp,32
   23b2c:	01c00044 	movi	r7,1
   23b30:	103ee83a 	callr	r2
   23b34:	d8c01117 	ldw	r3,68(sp)
   23b38:	10001e1e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23b3c:	80c5c83a 	sub	r2,r16,r3
   23b40:	1d89883a 	add	r4,r3,r22
   23b44:	e085883a 	add	r2,fp,r2
   23b48:	013ff016 	blt	zero,r4,23b0c <__alt_data_end+0xf4023b0c>
   23b4c:	1021883a 	mov	r16,r2
   23b50:	df000d17 	ldw	fp,52(sp)
   23b54:	00004406 	br	23c68 <___vfprintf_internal_r+0x524>
   23b58:	01000044 	movi	r4,1
   23b5c:	2480080e 	bge	r4,r18,23b80 <___vfprintf_internal_r+0x43c>
   23b60:	95bfffc4 	addi	r22,r18,-1
   23b64:	a009883a 	mov	r4,r20
   23b68:	880b883a 	mov	r5,r17
   23b6c:	01800804 	movi	r6,32
   23b70:	b00f883a 	mov	r7,r22
   23b74:	00236d80 	call	236d8 <print_repeat>
   23b78:	10000e1e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23b7c:	85a1883a 	add	r16,r16,r22
   23b80:	e0800017 	ldw	r2,0(fp)
   23b84:	a009883a 	mov	r4,r20
   23b88:	880b883a 	mov	r5,r17
   23b8c:	d8800005 	stb	r2,0(sp)
   23b90:	88800117 	ldw	r2,4(r17)
   23b94:	d80d883a 	mov	r6,sp
   23b98:	01c00044 	movi	r7,1
   23b9c:	e5800104 	addi	r22,fp,4
   23ba0:	103ee83a 	callr	r2
   23ba4:	1000031e 	bne	r2,zero,23bb4 <___vfprintf_internal_r+0x470>
   23ba8:	84000044 	addi	r16,r16,1
   23bac:	b039883a 	mov	fp,r22
   23bb0:	00002d06 	br	23c68 <___vfprintf_internal_r+0x524>
   23bb4:	00bfffc4 	movi	r2,-1
   23bb8:	00003106 	br	23c80 <___vfprintf_internal_r+0x53c>
   23bbc:	e5800017 	ldw	r22,0(fp)
   23bc0:	e0c00104 	addi	r3,fp,4
   23bc4:	d8c00a15 	stw	r3,40(sp)
   23bc8:	b009883a 	mov	r4,r22
   23bcc:	00236bc0 	call	236bc <strlen>
   23bd0:	9091c83a 	sub	r8,r18,r2
   23bd4:	1039883a 	mov	fp,r2
   23bd8:	0200090e 	bge	zero,r8,23c00 <___vfprintf_internal_r+0x4bc>
   23bdc:	400f883a 	mov	r7,r8
   23be0:	a009883a 	mov	r4,r20
   23be4:	880b883a 	mov	r5,r17
   23be8:	01800804 	movi	r6,32
   23bec:	da001215 	stw	r8,72(sp)
   23bf0:	00236d80 	call	236d8 <print_repeat>
   23bf4:	da001217 	ldw	r8,72(sp)
   23bf8:	103fee1e 	bne	r2,zero,23bb4 <__alt_data_end+0xf4023bb4>
   23bfc:	8221883a 	add	r16,r16,r8
   23c00:	88800117 	ldw	r2,4(r17)
   23c04:	a009883a 	mov	r4,r20
   23c08:	880b883a 	mov	r5,r17
   23c0c:	b00d883a 	mov	r6,r22
   23c10:	e00f883a 	mov	r7,fp
   23c14:	103ee83a 	callr	r2
   23c18:	103fe61e 	bne	r2,zero,23bb4 <__alt_data_end+0xf4023bb4>
   23c1c:	8721883a 	add	r16,r16,fp
   23c20:	df000a17 	ldw	fp,40(sp)
   23c24:	00001006 	br	23c68 <___vfprintf_internal_r+0x524>
   23c28:	05c00044 	movi	r23,1
   23c2c:	04ffffc4 	movi	r19,-1
   23c30:	d8000e15 	stw	zero,56(sp)
   23c34:	05400284 	movi	r21,10
   23c38:	9825883a 	mov	r18,r19
   23c3c:	d8000c15 	stw	zero,48(sp)
   23c40:	d8000b15 	stw	zero,44(sp)
   23c44:	b82d883a 	mov	r22,r23
   23c48:	00000806 	br	23c6c <___vfprintf_internal_r+0x528>
   23c4c:	dd800b15 	stw	r22,44(sp)
   23c50:	05800084 	movi	r22,2
   23c54:	00000506 	br	23c6c <___vfprintf_internal_r+0x528>
   23c58:	00c00044 	movi	r3,1
   23c5c:	d8c00c15 	stw	r3,48(sp)
   23c60:	058000c4 	movi	r22,3
   23c64:	00000106 	br	23c6c <___vfprintf_internal_r+0x528>
   23c68:	002d883a 	mov	r22,zero
   23c6c:	d8c00f17 	ldw	r3,60(sp)
   23c70:	18c00044 	addi	r3,r3,1
   23c74:	d8c00f15 	stw	r3,60(sp)
   23c78:	003ecc06 	br	237ac <__alt_data_end+0xf40237ac>
   23c7c:	8005883a 	mov	r2,r16
   23c80:	dfc01c17 	ldw	ra,112(sp)
   23c84:	df001b17 	ldw	fp,108(sp)
   23c88:	ddc01a17 	ldw	r23,104(sp)
   23c8c:	dd801917 	ldw	r22,100(sp)
   23c90:	dd401817 	ldw	r21,96(sp)
   23c94:	dd001717 	ldw	r20,92(sp)
   23c98:	dcc01617 	ldw	r19,88(sp)
   23c9c:	dc801517 	ldw	r18,84(sp)
   23ca0:	dc401417 	ldw	r17,80(sp)
   23ca4:	dc001317 	ldw	r16,76(sp)
   23ca8:	dec01d04 	addi	sp,sp,116
   23cac:	f800283a 	ret

00023cb0 <__vfprintf_internal>:
   23cb0:	2007883a 	mov	r3,r4
   23cb4:	01020034 	movhi	r4,2048
   23cb8:	2103cf04 	addi	r4,r4,3900
   23cbc:	21000017 	ldw	r4,0(r4)
   23cc0:	2805883a 	mov	r2,r5
   23cc4:	300f883a 	mov	r7,r6
   23cc8:	180b883a 	mov	r5,r3
   23ccc:	100d883a 	mov	r6,r2
   23cd0:	00237441 	jmpi	23744 <___vfprintf_internal_r>

00023cd4 <_malloc_trim_r>:
   23cd4:	defffb04 	addi	sp,sp,-20
   23cd8:	dcc00315 	stw	r19,12(sp)
   23cdc:	04c20034 	movhi	r19,2048
   23ce0:	dc800215 	stw	r18,8(sp)
   23ce4:	dc400115 	stw	r17,4(sp)
   23ce8:	dc000015 	stw	r16,0(sp)
   23cec:	dfc00415 	stw	ra,16(sp)
   23cf0:	2821883a 	mov	r16,r5
   23cf4:	2025883a 	mov	r18,r4
   23cf8:	9cc1ea04 	addi	r19,r19,1960
   23cfc:	002468c0 	call	2468c <__malloc_lock>
   23d00:	98800217 	ldw	r2,8(r19)
   23d04:	14400117 	ldw	r17,4(r2)
   23d08:	00bfff04 	movi	r2,-4
   23d0c:	88a2703a 	and	r17,r17,r2
   23d10:	8c21c83a 	sub	r16,r17,r16
   23d14:	84001bc4 	addi	r16,r16,111
   23d18:	8020d1fa 	srli	r16,r16,7
   23d1c:	00801fc4 	movi	r2,127
   23d20:	843fffc4 	addi	r16,r16,-1
   23d24:	802091fa 	slli	r16,r16,7
   23d28:	14000416 	blt	r2,r16,23d3c <_malloc_trim_r+0x68>
   23d2c:	9009883a 	mov	r4,r18
   23d30:	00246ac0 	call	246ac <__malloc_unlock>
   23d34:	0005883a 	mov	r2,zero
   23d38:	00002806 	br	23ddc <_malloc_trim_r+0x108>
   23d3c:	9009883a 	mov	r4,r18
   23d40:	000b883a 	mov	r5,zero
   23d44:	002334c0 	call	2334c <_sbrk_r>
   23d48:	98c00217 	ldw	r3,8(r19)
   23d4c:	1c47883a 	add	r3,r3,r17
   23d50:	10fff61e 	bne	r2,r3,23d2c <__alt_data_end+0xf4023d2c>
   23d54:	9009883a 	mov	r4,r18
   23d58:	040bc83a 	sub	r5,zero,r16
   23d5c:	002334c0 	call	2334c <_sbrk_r>
   23d60:	00ffffc4 	movi	r3,-1
   23d64:	10c0111e 	bne	r2,r3,23dac <_malloc_trim_r+0xd8>
   23d68:	9009883a 	mov	r4,r18
   23d6c:	000b883a 	mov	r5,zero
   23d70:	002334c0 	call	2334c <_sbrk_r>
   23d74:	99000217 	ldw	r4,8(r19)
   23d78:	014003c4 	movi	r5,15
   23d7c:	1107c83a 	sub	r3,r2,r4
   23d80:	28ffea0e 	bge	r5,r3,23d2c <__alt_data_end+0xf4023d2c>
   23d84:	01420034 	movhi	r5,2048
   23d88:	2943cc04 	addi	r5,r5,3888
   23d8c:	29400017 	ldw	r5,0(r5)
   23d90:	18c00054 	ori	r3,r3,1
   23d94:	20c00115 	stw	r3,4(r4)
   23d98:	1145c83a 	sub	r2,r2,r5
   23d9c:	01420034 	movhi	r5,2048
   23da0:	2946b504 	addi	r5,r5,6868
   23da4:	28800015 	stw	r2,0(r5)
   23da8:	003fe006 	br	23d2c <__alt_data_end+0xf4023d2c>
   23dac:	98800217 	ldw	r2,8(r19)
   23db0:	8c23c83a 	sub	r17,r17,r16
   23db4:	00c20034 	movhi	r3,2048
   23db8:	18c6b504 	addi	r3,r3,6868
   23dbc:	8c400054 	ori	r17,r17,1
   23dc0:	14400115 	stw	r17,4(r2)
   23dc4:	18800017 	ldw	r2,0(r3)
   23dc8:	9009883a 	mov	r4,r18
   23dcc:	1421c83a 	sub	r16,r2,r16
   23dd0:	1c000015 	stw	r16,0(r3)
   23dd4:	00246ac0 	call	246ac <__malloc_unlock>
   23dd8:	00800044 	movi	r2,1
   23ddc:	dfc00417 	ldw	ra,16(sp)
   23de0:	dcc00317 	ldw	r19,12(sp)
   23de4:	dc800217 	ldw	r18,8(sp)
   23de8:	dc400117 	ldw	r17,4(sp)
   23dec:	dc000017 	ldw	r16,0(sp)
   23df0:	dec00504 	addi	sp,sp,20
   23df4:	f800283a 	ret

00023df8 <_free_r>:
   23df8:	2800a026 	beq	r5,zero,2407c <_free_r+0x284>
   23dfc:	defffd04 	addi	sp,sp,-12
   23e00:	dc400115 	stw	r17,4(sp)
   23e04:	dc000015 	stw	r16,0(sp)
   23e08:	2823883a 	mov	r17,r5
   23e0c:	2021883a 	mov	r16,r4
   23e10:	dfc00215 	stw	ra,8(sp)
   23e14:	002468c0 	call	2468c <__malloc_lock>
   23e18:	8a3fff17 	ldw	r8,-4(r17)
   23e1c:	00bfff84 	movi	r2,-2
   23e20:	893ffe04 	addi	r4,r17,-8
   23e24:	4084703a 	and	r2,r8,r2
   23e28:	208d883a 	add	r6,r4,r2
   23e2c:	31400117 	ldw	r5,4(r6)
   23e30:	00ffff04 	movi	r3,-4
   23e34:	28c6703a 	and	r3,r5,r3
   23e38:	01420034 	movhi	r5,2048
   23e3c:	2941ea04 	addi	r5,r5,1960
   23e40:	2a400217 	ldw	r9,8(r5)
   23e44:	280f883a 	mov	r7,r5
   23e48:	4140004c 	andi	r5,r8,1
   23e4c:	32401b1e 	bne	r6,r9,23ebc <_free_r+0xc4>
   23e50:	1885883a 	add	r2,r3,r2
   23e54:	2800071e 	bne	r5,zero,23e74 <_free_r+0x7c>
   23e58:	88fffe17 	ldw	r3,-8(r17)
   23e5c:	20c9c83a 	sub	r4,r4,r3
   23e60:	21400217 	ldw	r5,8(r4)
   23e64:	10c5883a 	add	r2,r2,r3
   23e68:	20c00317 	ldw	r3,12(r4)
   23e6c:	28c00315 	stw	r3,12(r5)
   23e70:	19400215 	stw	r5,8(r3)
   23e74:	10c00054 	ori	r3,r2,1
   23e78:	20c00115 	stw	r3,4(r4)
   23e7c:	00c20034 	movhi	r3,2048
   23e80:	18c3cd04 	addi	r3,r3,3892
   23e84:	18c00017 	ldw	r3,0(r3)
   23e88:	39000215 	stw	r4,8(r7)
   23e8c:	10c00536 	bltu	r2,r3,23ea4 <_free_r+0xac>
   23e90:	00820034 	movhi	r2,2048
   23e94:	1083e304 	addi	r2,r2,3980
   23e98:	11400017 	ldw	r5,0(r2)
   23e9c:	8009883a 	mov	r4,r16
   23ea0:	0023cd40 	call	23cd4 <_malloc_trim_r>
   23ea4:	8009883a 	mov	r4,r16
   23ea8:	dfc00217 	ldw	ra,8(sp)
   23eac:	dc400117 	ldw	r17,4(sp)
   23eb0:	dc000017 	ldw	r16,0(sp)
   23eb4:	dec00304 	addi	sp,sp,12
   23eb8:	00246ac1 	jmpi	246ac <__malloc_unlock>
   23ebc:	30c00115 	stw	r3,4(r6)
   23ec0:	2800091e 	bne	r5,zero,23ee8 <_free_r+0xf0>
   23ec4:	897ffe17 	ldw	r5,-8(r17)
   23ec8:	3a000204 	addi	r8,r7,8
   23ecc:	2149c83a 	sub	r4,r4,r5
   23ed0:	1145883a 	add	r2,r2,r5
   23ed4:	21400217 	ldw	r5,8(r4)
   23ed8:	2a000526 	beq	r5,r8,23ef0 <_free_r+0xf8>
   23edc:	22000317 	ldw	r8,12(r4)
   23ee0:	2a000315 	stw	r8,12(r5)
   23ee4:	41400215 	stw	r5,8(r8)
   23ee8:	000b883a 	mov	r5,zero
   23eec:	00000106 	br	23ef4 <_free_r+0xfc>
   23ef0:	01400044 	movi	r5,1
   23ef4:	30d1883a 	add	r8,r6,r3
   23ef8:	42000117 	ldw	r8,4(r8)
   23efc:	4200004c 	andi	r8,r8,1
   23f00:	4000101e 	bne	r8,zero,23f44 <_free_r+0x14c>
   23f04:	10c5883a 	add	r2,r2,r3
   23f08:	28000a1e 	bne	r5,zero,23f34 <_free_r+0x13c>
   23f0c:	30c00217 	ldw	r3,8(r6)
   23f10:	02020034 	movhi	r8,2048
   23f14:	4201ec04 	addi	r8,r8,1968
   23f18:	1a00061e 	bne	r3,r8,23f34 <_free_r+0x13c>
   23f1c:	39000515 	stw	r4,20(r7)
   23f20:	39000415 	stw	r4,16(r7)
   23f24:	20c00315 	stw	r3,12(r4)
   23f28:	20c00215 	stw	r3,8(r4)
   23f2c:	01400044 	movi	r5,1
   23f30:	00000406 	br	23f44 <_free_r+0x14c>
   23f34:	30c00317 	ldw	r3,12(r6)
   23f38:	31800217 	ldw	r6,8(r6)
   23f3c:	30c00315 	stw	r3,12(r6)
   23f40:	19800215 	stw	r6,8(r3)
   23f44:	10c00054 	ori	r3,r2,1
   23f48:	20c00115 	stw	r3,4(r4)
   23f4c:	2087883a 	add	r3,r4,r2
   23f50:	18800015 	stw	r2,0(r3)
   23f54:	283fd31e 	bne	r5,zero,23ea4 <__alt_data_end+0xf4023ea4>
   23f58:	00c07fc4 	movi	r3,511
   23f5c:	18801036 	bltu	r3,r2,23fa0 <_free_r+0x1a8>
   23f60:	1006d0fa 	srli	r3,r2,3
   23f64:	00800044 	movi	r2,1
   23f68:	180bd0ba 	srai	r5,r3,2
   23f6c:	18c7883a 	add	r3,r3,r3
   23f70:	18c7883a 	add	r3,r3,r3
   23f74:	114a983a 	sll	r5,r2,r5
   23f78:	38800117 	ldw	r2,4(r7)
   23f7c:	18c7883a 	add	r3,r3,r3
   23f80:	2884b03a 	or	r2,r5,r2
   23f84:	38800115 	stw	r2,4(r7)
   23f88:	38c5883a 	add	r2,r7,r3
   23f8c:	10c00217 	ldw	r3,8(r2)
   23f90:	20800315 	stw	r2,12(r4)
   23f94:	20c00215 	stw	r3,8(r4)
   23f98:	11000215 	stw	r4,8(r2)
   23f9c:	00003506 	br	24074 <_free_r+0x27c>
   23fa0:	1006d27a 	srli	r3,r2,9
   23fa4:	01400104 	movi	r5,4
   23fa8:	28c00336 	bltu	r5,r3,23fb8 <_free_r+0x1c0>
   23fac:	1006d1ba 	srli	r3,r2,6
   23fb0:	18c00e04 	addi	r3,r3,56
   23fb4:	00001406 	br	24008 <_free_r+0x210>
   23fb8:	01400504 	movi	r5,20
   23fbc:	28c00236 	bltu	r5,r3,23fc8 <_free_r+0x1d0>
   23fc0:	18c016c4 	addi	r3,r3,91
   23fc4:	00001006 	br	24008 <_free_r+0x210>
   23fc8:	01401504 	movi	r5,84
   23fcc:	28c00336 	bltu	r5,r3,23fdc <_free_r+0x1e4>
   23fd0:	1006d33a 	srli	r3,r2,12
   23fd4:	18c01b84 	addi	r3,r3,110
   23fd8:	00000b06 	br	24008 <_free_r+0x210>
   23fdc:	01405504 	movi	r5,340
   23fe0:	28c00336 	bltu	r5,r3,23ff0 <_free_r+0x1f8>
   23fe4:	1006d3fa 	srli	r3,r2,15
   23fe8:	18c01dc4 	addi	r3,r3,119
   23fec:	00000606 	br	24008 <_free_r+0x210>
   23ff0:	01415504 	movi	r5,1364
   23ff4:	28c00336 	bltu	r5,r3,24004 <_free_r+0x20c>
   23ff8:	1006d4ba 	srli	r3,r2,18
   23ffc:	18c01f04 	addi	r3,r3,124
   24000:	00000106 	br	24008 <_free_r+0x210>
   24004:	00c01f84 	movi	r3,126
   24008:	18cd883a 	add	r6,r3,r3
   2400c:	318d883a 	add	r6,r6,r6
   24010:	318d883a 	add	r6,r6,r6
   24014:	398b883a 	add	r5,r7,r6
   24018:	29800217 	ldw	r6,8(r5)
   2401c:	02020034 	movhi	r8,2048
   24020:	4201ea04 	addi	r8,r8,1960
   24024:	3140081e 	bne	r6,r5,24048 <_free_r+0x250>
   24028:	1807d0ba 	srai	r3,r3,2
   2402c:	00800044 	movi	r2,1
   24030:	10c6983a 	sll	r3,r2,r3
   24034:	40800117 	ldw	r2,4(r8)
   24038:	1886b03a 	or	r3,r3,r2
   2403c:	40c00115 	stw	r3,4(r8)
   24040:	3007883a 	mov	r3,r6
   24044:	00000806 	br	24068 <_free_r+0x270>
   24048:	3007883a 	mov	r3,r6
   2404c:	01ffff04 	movi	r7,-4
   24050:	19800117 	ldw	r6,4(r3)
   24054:	31cc703a 	and	r6,r6,r7
   24058:	1180022e 	bgeu	r2,r6,24064 <_free_r+0x26c>
   2405c:	18c00217 	ldw	r3,8(r3)
   24060:	197ffb1e 	bne	r3,r5,24050 <__alt_data_end+0xf4024050>
   24064:	19800317 	ldw	r6,12(r3)
   24068:	21800315 	stw	r6,12(r4)
   2406c:	20c00215 	stw	r3,8(r4)
   24070:	31000215 	stw	r4,8(r6)
   24074:	19000315 	stw	r4,12(r3)
   24078:	003f8a06 	br	23ea4 <__alt_data_end+0xf4023ea4>
   2407c:	f800283a 	ret

00024080 <__sfvwrite_small_dev>:
   24080:	2880000b 	ldhu	r2,0(r5)
   24084:	defffa04 	addi	sp,sp,-24
   24088:	dc000015 	stw	r16,0(sp)
   2408c:	dfc00515 	stw	ra,20(sp)
   24090:	dd000415 	stw	r20,16(sp)
   24094:	dcc00315 	stw	r19,12(sp)
   24098:	dc800215 	stw	r18,8(sp)
   2409c:	dc400115 	stw	r17,4(sp)
   240a0:	1080020c 	andi	r2,r2,8
   240a4:	2821883a 	mov	r16,r5
   240a8:	10001726 	beq	r2,zero,24108 <__sfvwrite_small_dev+0x88>
   240ac:	2880008f 	ldh	r2,2(r5)
   240b0:	10001216 	blt	r2,zero,240fc <__sfvwrite_small_dev+0x7c>
   240b4:	2027883a 	mov	r19,r4
   240b8:	3025883a 	mov	r18,r6
   240bc:	3823883a 	mov	r17,r7
   240c0:	05010004 	movi	r20,1024
   240c4:	04400b0e 	bge	zero,r17,240f4 <__sfvwrite_small_dev+0x74>
   240c8:	8140008f 	ldh	r5,2(r16)
   240cc:	880f883a 	mov	r7,r17
   240d0:	a440010e 	bge	r20,r17,240d8 <__sfvwrite_small_dev+0x58>
   240d4:	01c10004 	movi	r7,1024
   240d8:	9809883a 	mov	r4,r19
   240dc:	900d883a 	mov	r6,r18
   240e0:	00241d80 	call	241d8 <_write_r>
   240e4:	0080050e 	bge	zero,r2,240fc <__sfvwrite_small_dev+0x7c>
   240e8:	88a3c83a 	sub	r17,r17,r2
   240ec:	90a5883a 	add	r18,r18,r2
   240f0:	003ff406 	br	240c4 <__alt_data_end+0xf40240c4>
   240f4:	0005883a 	mov	r2,zero
   240f8:	00000406 	br	2410c <__sfvwrite_small_dev+0x8c>
   240fc:	8080000b 	ldhu	r2,0(r16)
   24100:	10801014 	ori	r2,r2,64
   24104:	8080000d 	sth	r2,0(r16)
   24108:	00bfffc4 	movi	r2,-1
   2410c:	dfc00517 	ldw	ra,20(sp)
   24110:	dd000417 	ldw	r20,16(sp)
   24114:	dcc00317 	ldw	r19,12(sp)
   24118:	dc800217 	ldw	r18,8(sp)
   2411c:	dc400117 	ldw	r17,4(sp)
   24120:	dc000017 	ldw	r16,0(sp)
   24124:	dec00604 	addi	sp,sp,24
   24128:	f800283a 	ret

0002412c <putc>:
   2412c:	defffd04 	addi	sp,sp,-12
   24130:	008000b4 	movhi	r2,2
   24134:	dc000115 	stw	r16,4(sp)
   24138:	dfc00215 	stw	ra,8(sp)
   2413c:	10902004 	addi	r2,r2,16512
   24140:	28800115 	stw	r2,4(r5)
   24144:	00820034 	movhi	r2,2048
   24148:	1083cf04 	addi	r2,r2,3900
   2414c:	d9000005 	stb	r4,0(sp)
   24150:	2021883a 	mov	r16,r4
   24154:	11000017 	ldw	r4,0(r2)
   24158:	d80d883a 	mov	r6,sp
   2415c:	01c00044 	movi	r7,1
   24160:	00240800 	call	24080 <__sfvwrite_small_dev>
   24164:	00ffffc4 	movi	r3,-1
   24168:	10c00126 	beq	r2,r3,24170 <putc+0x44>
   2416c:	8005883a 	mov	r2,r16
   24170:	dfc00217 	ldw	ra,8(sp)
   24174:	dc000117 	ldw	r16,4(sp)
   24178:	dec00304 	addi	sp,sp,12
   2417c:	f800283a 	ret

00024180 <_putc_r>:
   24180:	defffd04 	addi	sp,sp,-12
   24184:	008000b4 	movhi	r2,2
   24188:	dc000115 	stw	r16,4(sp)
   2418c:	dfc00215 	stw	ra,8(sp)
   24190:	10902004 	addi	r2,r2,16512
   24194:	30800115 	stw	r2,4(r6)
   24198:	00820034 	movhi	r2,2048
   2419c:	1083cf04 	addi	r2,r2,3900
   241a0:	11000017 	ldw	r4,0(r2)
   241a4:	2821883a 	mov	r16,r5
   241a8:	01c00044 	movi	r7,1
   241ac:	300b883a 	mov	r5,r6
   241b0:	d80d883a 	mov	r6,sp
   241b4:	dc000005 	stb	r16,0(sp)
   241b8:	00240800 	call	24080 <__sfvwrite_small_dev>
   241bc:	00ffffc4 	movi	r3,-1
   241c0:	10c00126 	beq	r2,r3,241c8 <_putc_r+0x48>
   241c4:	8005883a 	mov	r2,r16
   241c8:	dfc00217 	ldw	ra,8(sp)
   241cc:	dc000117 	ldw	r16,4(sp)
   241d0:	dec00304 	addi	sp,sp,12
   241d4:	f800283a 	ret

000241d8 <_write_r>:
   241d8:	defffd04 	addi	sp,sp,-12
   241dc:	dc000015 	stw	r16,0(sp)
   241e0:	04020034 	movhi	r16,2048
   241e4:	dc400115 	stw	r17,4(sp)
   241e8:	8403e404 	addi	r16,r16,3984
   241ec:	2023883a 	mov	r17,r4
   241f0:	2809883a 	mov	r4,r5
   241f4:	300b883a 	mov	r5,r6
   241f8:	380d883a 	mov	r6,r7
   241fc:	dfc00215 	stw	ra,8(sp)
   24200:	80000015 	stw	zero,0(r16)
   24204:	0024a380 	call	24a38 <write>
   24208:	00ffffc4 	movi	r3,-1
   2420c:	10c0031e 	bne	r2,r3,2421c <_write_r+0x44>
   24210:	80c00017 	ldw	r3,0(r16)
   24214:	18000126 	beq	r3,zero,2421c <_write_r+0x44>
   24218:	88c00015 	stw	r3,0(r17)
   2421c:	dfc00217 	ldw	ra,8(sp)
   24220:	dc400117 	ldw	r17,4(sp)
   24224:	dc000017 	ldw	r16,0(sp)
   24228:	dec00304 	addi	sp,sp,12
   2422c:	f800283a 	ret

00024230 <udivmodsi4>:
   24230:	2900182e 	bgeu	r5,r4,24294 <udivmodsi4+0x64>
   24234:	28001716 	blt	r5,zero,24294 <udivmodsi4+0x64>
   24238:	00800804 	movi	r2,32
   2423c:	00c00044 	movi	r3,1
   24240:	00000206 	br	2424c <udivmodsi4+0x1c>
   24244:	10001126 	beq	r2,zero,2428c <udivmodsi4+0x5c>
   24248:	28000516 	blt	r5,zero,24260 <udivmodsi4+0x30>
   2424c:	294b883a 	add	r5,r5,r5
   24250:	10bfffc4 	addi	r2,r2,-1
   24254:	18c7883a 	add	r3,r3,r3
   24258:	293ffa36 	bltu	r5,r4,24244 <__alt_data_end+0xf4024244>
   2425c:	18000b26 	beq	r3,zero,2428c <udivmodsi4+0x5c>
   24260:	0005883a 	mov	r2,zero
   24264:	21400236 	bltu	r4,r5,24270 <udivmodsi4+0x40>
   24268:	2149c83a 	sub	r4,r4,r5
   2426c:	10c4b03a 	or	r2,r2,r3
   24270:	1806d07a 	srli	r3,r3,1
   24274:	280ad07a 	srli	r5,r5,1
   24278:	183ffa1e 	bne	r3,zero,24264 <__alt_data_end+0xf4024264>
   2427c:	3000011e 	bne	r6,zero,24284 <udivmodsi4+0x54>
   24280:	f800283a 	ret
   24284:	2005883a 	mov	r2,r4
   24288:	f800283a 	ret
   2428c:	0005883a 	mov	r2,zero
   24290:	003ffa06 	br	2427c <__alt_data_end+0xf402427c>
   24294:	00c00044 	movi	r3,1
   24298:	003ff106 	br	24260 <__alt_data_end+0xf4024260>

0002429c <__divsi3>:
   2429c:	defffe04 	addi	sp,sp,-8
   242a0:	dfc00115 	stw	ra,4(sp)
   242a4:	dc000015 	stw	r16,0(sp)
   242a8:	20000b16 	blt	r4,zero,242d8 <__divsi3+0x3c>
   242ac:	0021883a 	mov	r16,zero
   242b0:	28000c16 	blt	r5,zero,242e4 <__divsi3+0x48>
   242b4:	000d883a 	mov	r6,zero
   242b8:	00242300 	call	24230 <udivmodsi4>
   242bc:	0407c83a 	sub	r3,zero,r16
   242c0:	1884f03a 	xor	r2,r3,r2
   242c4:	1405883a 	add	r2,r2,r16
   242c8:	dfc00117 	ldw	ra,4(sp)
   242cc:	dc000017 	ldw	r16,0(sp)
   242d0:	dec00204 	addi	sp,sp,8
   242d4:	f800283a 	ret
   242d8:	0109c83a 	sub	r4,zero,r4
   242dc:	04000044 	movi	r16,1
   242e0:	283ff40e 	bge	r5,zero,242b4 <__alt_data_end+0xf40242b4>
   242e4:	014bc83a 	sub	r5,zero,r5
   242e8:	8400005c 	xori	r16,r16,1
   242ec:	003ff106 	br	242b4 <__alt_data_end+0xf40242b4>

000242f0 <__modsi3>:
   242f0:	defffd04 	addi	sp,sp,-12
   242f4:	dfc00215 	stw	ra,8(sp)
   242f8:	dc400115 	stw	r17,4(sp)
   242fc:	dc000015 	stw	r16,0(sp)
   24300:	20000c16 	blt	r4,zero,24334 <__modsi3+0x44>
   24304:	0023883a 	mov	r17,zero
   24308:	0021883a 	mov	r16,zero
   2430c:	28000d16 	blt	r5,zero,24344 <__modsi3+0x54>
   24310:	01800044 	movi	r6,1
   24314:	00242300 	call	24230 <udivmodsi4>
   24318:	1404f03a 	xor	r2,r2,r16
   2431c:	8885883a 	add	r2,r17,r2
   24320:	dfc00217 	ldw	ra,8(sp)
   24324:	dc400117 	ldw	r17,4(sp)
   24328:	dc000017 	ldw	r16,0(sp)
   2432c:	dec00304 	addi	sp,sp,12
   24330:	f800283a 	ret
   24334:	0109c83a 	sub	r4,zero,r4
   24338:	04400044 	movi	r17,1
   2433c:	043fffc4 	movi	r16,-1
   24340:	283ff30e 	bge	r5,zero,24310 <__alt_data_end+0xf4024310>
   24344:	014bc83a 	sub	r5,zero,r5
   24348:	003ff106 	br	24310 <__alt_data_end+0xf4024310>

0002434c <__udivsi3>:
   2434c:	000d883a 	mov	r6,zero
   24350:	00242301 	jmpi	24230 <udivmodsi4>

00024354 <__umodsi3>:
   24354:	01800044 	movi	r6,1
   24358:	00242301 	jmpi	24230 <udivmodsi4>

0002435c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2435c:	defffd04 	addi	sp,sp,-12
   24360:	df000215 	stw	fp,8(sp)
   24364:	df000204 	addi	fp,sp,8
   24368:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2436c:	0001883a 	nop
   24370:	e0bfff17 	ldw	r2,-4(fp)
   24374:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24378:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2437c:	10000226 	beq	r2,zero,24388 <_exit+0x2c>
    ALT_SIM_FAIL();
   24380:	002af070 	cmpltui	zero,zero,43969
   24384:	00000106 	br	2438c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   24388:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2438c:	003fff06 	br	2438c <__alt_data_end+0xf402438c>

00024390 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   24390:	deffff04 	addi	sp,sp,-4
   24394:	df000015 	stw	fp,0(sp)
   24398:	d839883a 	mov	fp,sp
  return 0;
   2439c:	0005883a 	mov	r2,zero
}
   243a0:	e037883a 	mov	sp,fp
   243a4:	df000017 	ldw	fp,0(sp)
   243a8:	dec00104 	addi	sp,sp,4
   243ac:	f800283a 	ret

000243b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   243b0:	defffe04 	addi	sp,sp,-8
   243b4:	dfc00115 	stw	ra,4(sp)
   243b8:	df000015 	stw	fp,0(sp)
   243bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   243c0:	00820034 	movhi	r2,2048
   243c4:	1083d604 	addi	r2,r2,3928
   243c8:	10800017 	ldw	r2,0(r2)
   243cc:	10000526 	beq	r2,zero,243e4 <alt_get_errno+0x34>
   243d0:	00820034 	movhi	r2,2048
   243d4:	1083d604 	addi	r2,r2,3928
   243d8:	10800017 	ldw	r2,0(r2)
   243dc:	103ee83a 	callr	r2
   243e0:	00000206 	br	243ec <alt_get_errno+0x3c>
   243e4:	00820034 	movhi	r2,2048
   243e8:	1083e404 	addi	r2,r2,3984
}
   243ec:	e037883a 	mov	sp,fp
   243f0:	dfc00117 	ldw	ra,4(sp)
   243f4:	df000017 	ldw	fp,0(sp)
   243f8:	dec00204 	addi	sp,sp,8
   243fc:	f800283a 	ret

00024400 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   24400:	defffb04 	addi	sp,sp,-20
   24404:	dfc00415 	stw	ra,16(sp)
   24408:	df000315 	stw	fp,12(sp)
   2440c:	df000304 	addi	fp,sp,12
   24410:	e13ffe15 	stw	r4,-8(fp)
   24414:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   24418:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   2441c:	e0bffe17 	ldw	r2,-8(fp)
   24420:	00803116 	blt	zero,r2,244e8 <kill+0xe8>
  {
    switch (sig)
   24424:	e0bfff17 	ldw	r2,-4(fp)
   24428:	10800828 	cmpgeui	r2,r2,32
   2442c:	1000291e 	bne	r2,zero,244d4 <kill+0xd4>
   24430:	e0bfff17 	ldw	r2,-4(fp)
   24434:	100690ba 	slli	r3,r2,2
   24438:	008000b4 	movhi	r2,2
   2443c:	10911304 	addi	r2,r2,17484
   24440:	1885883a 	add	r2,r3,r2
   24444:	10800017 	ldw	r2,0(r2)
   24448:	1000683a 	jmp	r2
   2444c:	000244e0 	cmpeqi	zero,zero,2323
   24450:	000244d4 	movui	zero,2323
   24454:	000244d4 	movui	zero,2323
   24458:	000244cc 	andi	zero,zero,2323
   2445c:	000244cc 	andi	zero,zero,2323
   24460:	000244cc 	andi	zero,zero,2323
   24464:	000244cc 	andi	zero,zero,2323
   24468:	000244d4 	movui	zero,2323
   2446c:	000244cc 	andi	zero,zero,2323
   24470:	000244cc 	andi	zero,zero,2323
   24474:	000244cc 	andi	zero,zero,2323
   24478:	000244cc 	andi	zero,zero,2323
   2447c:	000244cc 	andi	zero,zero,2323
   24480:	000244cc 	andi	zero,zero,2323
   24484:	000244cc 	andi	zero,zero,2323
   24488:	000244cc 	andi	zero,zero,2323
   2448c:	000244e0 	cmpeqi	zero,zero,2323
   24490:	000244d4 	movui	zero,2323
   24494:	000244d4 	movui	zero,2323
   24498:	000244d4 	movui	zero,2323
   2449c:	000244e0 	cmpeqi	zero,zero,2323
   244a0:	000244d4 	movui	zero,2323
   244a4:	000244d4 	movui	zero,2323
   244a8:	000244cc 	andi	zero,zero,2323
   244ac:	000244cc 	andi	zero,zero,2323
   244b0:	000244cc 	andi	zero,zero,2323
   244b4:	000244cc 	andi	zero,zero,2323
   244b8:	000244cc 	andi	zero,zero,2323
   244bc:	000244d4 	movui	zero,2323
   244c0:	000244d4 	movui	zero,2323
   244c4:	000244cc 	andi	zero,zero,2323
   244c8:	000244cc 	andi	zero,zero,2323
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   244cc:	0009883a 	mov	r4,zero
   244d0:	002435c0 	call	2435c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   244d4:	00800584 	movi	r2,22
   244d8:	e0bffd15 	stw	r2,-12(fp)
   244dc:	00000606 	br	244f8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   244e0:	0001883a 	nop
   244e4:	00000406 	br	244f8 <kill+0xf8>

      status = EINVAL;
    }
  }

  else if (pid > 0)
   244e8:	e0bffe17 	ldw	r2,-8(fp)
   244ec:	0080020e 	bge	zero,r2,244f8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   244f0:	008000c4 	movi	r2,3
   244f4:	e0bffd15 	stw	r2,-12(fp)
  }

  if (status)
   244f8:	e0bffd17 	ldw	r2,-12(fp)
   244fc:	10000626 	beq	r2,zero,24518 <kill+0x118>
  {
    ALT_ERRNO = status;
   24500:	00243b00 	call	243b0 <alt_get_errno>
   24504:	1007883a 	mov	r3,r2
   24508:	e0bffd17 	ldw	r2,-12(fp)
   2450c:	18800015 	stw	r2,0(r3)
    return -1;
   24510:	00bfffc4 	movi	r2,-1
   24514:	00000106 	br	2451c <kill+0x11c>
  }

  return 0;
   24518:	0005883a 	mov	r2,zero
}
   2451c:	e037883a 	mov	sp,fp
   24520:	dfc00117 	ldw	ra,4(sp)
   24524:	df000017 	ldw	fp,0(sp)
   24528:	dec00204 	addi	sp,sp,8
   2452c:	f800283a 	ret

00024530 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   24530:	defffc04 	addi	sp,sp,-16
   24534:	df000315 	stw	fp,12(sp)
   24538:	df000304 	addi	fp,sp,12
   2453c:	e13ffd15 	stw	r4,-12(fp)
   24540:	e17ffe15 	stw	r5,-8(fp)
   24544:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   24548:	e0fffe17 	ldw	r3,-8(fp)
   2454c:	e0bffd17 	ldw	r2,-12(fp)
   24550:	18800c26 	beq	r3,r2,24584 <alt_load_section+0x54>
  {
    while( to != end )
   24554:	00000806 	br	24578 <alt_load_section+0x48>
    {
      *to++ = *from++;
   24558:	e0bffe17 	ldw	r2,-8(fp)
   2455c:	10c00104 	addi	r3,r2,4
   24560:	e0fffe15 	stw	r3,-8(fp)
   24564:	e0fffd17 	ldw	r3,-12(fp)
   24568:	19000104 	addi	r4,r3,4
   2456c:	e13ffd15 	stw	r4,-12(fp)
   24570:	18c00017 	ldw	r3,0(r3)
   24574:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   24578:	e0fffe17 	ldw	r3,-8(fp)
   2457c:	e0bfff17 	ldw	r2,-4(fp)
   24580:	18bff51e 	bne	r3,r2,24558 <__alt_data_end+0xf4024558>
    {
      *to++ = *from++;
    }
  }
}
   24584:	e037883a 	mov	sp,fp
   24588:	df000017 	ldw	fp,0(sp)
   2458c:	dec00104 	addi	sp,sp,4
   24590:	f800283a 	ret

00024594 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   24594:	defffe04 	addi	sp,sp,-8
   24598:	dfc00115 	stw	ra,4(sp)
   2459c:	df000015 	stw	fp,0(sp)
   245a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   245a4:	010000f4 	movhi	r4,3
   245a8:	212a2c04 	addi	r4,r4,-22352
   245ac:	01420034 	movhi	r5,2048
   245b0:	29416a04 	addi	r5,r5,1448
   245b4:	01820034 	movhi	r6,2048
   245b8:	3183d704 	addi	r6,r6,3932
   245bc:	00245300 	call	24530 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   245c0:	010000b4 	movhi	r4,2
   245c4:	21000804 	addi	r4,r4,32
   245c8:	014000b4 	movhi	r5,2
   245cc:	29400804 	addi	r5,r5,32
   245d0:	018000b4 	movhi	r6,2
   245d4:	31800804 	addi	r6,r6,32
   245d8:	00245300 	call	24530 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   245dc:	010000f4 	movhi	r4,3
   245e0:	2128c204 	addi	r4,r4,-23800
   245e4:	01420034 	movhi	r5,2048
   245e8:	29400004 	addi	r5,r5,0
   245ec:	01820034 	movhi	r6,2048
   245f0:	31816a04 	addi	r6,r6,1448
   245f4:	00245300 	call	24530 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   245f8:	00296600 	call	29660 <alt_dcache_flush_all>
  alt_icache_flush_all();
   245fc:	00298e40 	call	298e4 <alt_icache_flush_all>
}
   24600:	e037883a 	mov	sp,fp
   24604:	dfc00117 	ldw	ra,4(sp)
   24608:	df000017 	ldw	fp,0(sp)
   2460c:	dec00204 	addi	sp,sp,8
   24610:	f800283a 	ret

00024614 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   24614:	defffd04 	addi	sp,sp,-12
   24618:	dfc00215 	stw	ra,8(sp)
   2461c:	df000115 	stw	fp,4(sp)
   24620:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   24624:	0009883a 	mov	r4,zero
   24628:	0024b700 	call	24b70 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2462c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   24630:	0024ba40 	call	24ba4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   24634:	01020034 	movhi	r4,2048
   24638:	21014e04 	addi	r4,r4,1336
   2463c:	01420034 	movhi	r5,2048
   24640:	29414e04 	addi	r5,r5,1336
   24644:	01820034 	movhi	r6,2048
   24648:	31814e04 	addi	r6,r6,1336
   2464c:	00299e00 	call	299e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   24650:	002979c0 	call	2979c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   24654:	010000f4 	movhi	r4,3
   24658:	2125fe04 	addi	r4,r4,-26632
   2465c:	0029f840 	call	29f84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   24660:	d1202b17 	ldw	r4,-32596(gp)
   24664:	d0e02c17 	ldw	r3,-32592(gp)
   24668:	d0a02d17 	ldw	r2,-32588(gp)
   2466c:	180b883a 	mov	r5,r3
   24670:	100d883a 	mov	r6,r2
   24674:	00206800 	call	20680 <main>
   24678:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2467c:	01000044 	movi	r4,1
   24680:	00295880 	call	29588 <close>
  exit (result);
   24684:	e13fff17 	ldw	r4,-4(fp)
   24688:	0029f980 	call	29f98 <exit>

0002468c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2468c:	defffe04 	addi	sp,sp,-8
   24690:	df000115 	stw	fp,4(sp)
   24694:	df000104 	addi	fp,sp,4
   24698:	e13fff15 	stw	r4,-4(fp)
}
   2469c:	e037883a 	mov	sp,fp
   246a0:	df000017 	ldw	fp,0(sp)
   246a4:	dec00104 	addi	sp,sp,4
   246a8:	f800283a 	ret

000246ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   246ac:	defffe04 	addi	sp,sp,-8
   246b0:	df000115 	stw	fp,4(sp)
   246b4:	df000104 	addi	fp,sp,4
   246b8:	e13fff15 	stw	r4,-4(fp)
}
   246bc:	e037883a 	mov	sp,fp
   246c0:	df000017 	ldw	fp,0(sp)
   246c4:	dec00104 	addi	sp,sp,4
   246c8:	f800283a 	ret

000246cc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   246cc:	defff204 	addi	sp,sp,-56
   246d0:	dfc00a15 	stw	ra,40(sp)
   246d4:	df000915 	stw	fp,36(sp)
   246d8:	df000904 	addi	fp,sp,36
   246dc:	e1400215 	stw	r5,8(fp)
   246e0:	e1800315 	stw	r6,12(fp)
   246e4:	e1c00415 	stw	r7,16(fp)
   246e8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   246ec:	e0800204 	addi	r2,fp,8
   246f0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   246f4:	e0bfff17 	ldw	r2,-4(fp)
   246f8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   246fc:	00007106 	br	248c4 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   24700:	e0bff807 	ldb	r2,-32(fp)
   24704:	10800960 	cmpeqi	r2,r2,37
   24708:	1000041e 	bne	r2,zero,2471c <alt_printf+0x50>
        {
            alt_putchar(c);
   2470c:	e0bff807 	ldb	r2,-32(fp)
   24710:	1009883a 	mov	r4,r2
   24714:	00248f40 	call	248f4 <alt_putchar>
   24718:	00006a06 	br	248c4 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2471c:	e0bff717 	ldw	r2,-36(fp)
   24720:	10c00044 	addi	r3,r2,1
   24724:	e0fff715 	stw	r3,-36(fp)
   24728:	10800003 	ldbu	r2,0(r2)
   2472c:	e0bff805 	stb	r2,-32(fp)
   24730:	e0bff807 	ldb	r2,-32(fp)
   24734:	10006226 	beq	r2,zero,248c0 <alt_printf+0x1f4>
            {
                if (c == '%')
   24738:	e0bff807 	ldb	r2,-32(fp)
   2473c:	10800958 	cmpnei	r2,r2,37
   24740:	1000041e 	bne	r2,zero,24754 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   24744:	e0bff807 	ldb	r2,-32(fp)
   24748:	1009883a 	mov	r4,r2
   2474c:	00248f40 	call	248f4 <alt_putchar>
   24750:	00005c06 	br	248c4 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   24754:	e0bff807 	ldb	r2,-32(fp)
   24758:	108018d8 	cmpnei	r2,r2,99
   2475c:	1000081e 	bne	r2,zero,24780 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   24760:	e0bffe17 	ldw	r2,-8(fp)
   24764:	10c00104 	addi	r3,r2,4
   24768:	e0fffe15 	stw	r3,-8(fp)
   2476c:	10800017 	ldw	r2,0(r2)
   24770:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   24774:	e13ffd17 	ldw	r4,-12(fp)
   24778:	00248f40 	call	248f4 <alt_putchar>
   2477c:	00005106 	br	248c4 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   24780:	e0bff807 	ldb	r2,-32(fp)
   24784:	10801e18 	cmpnei	r2,r2,120
   24788:	1000341e 	bne	r2,zero,2485c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2478c:	e0bffe17 	ldw	r2,-8(fp)
   24790:	10c00104 	addi	r3,r2,4
   24794:	e0fffe15 	stw	r3,-8(fp)
   24798:	10800017 	ldw	r2,0(r2)
   2479c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   247a0:	e0bffb17 	ldw	r2,-20(fp)
   247a4:	1000031e 	bne	r2,zero,247b4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   247a8:	01000c04 	movi	r4,48
   247ac:	00248f40 	call	248f4 <alt_putchar>
                        continue;
   247b0:	00004406 	br	248c4 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   247b4:	00800704 	movi	r2,28
   247b8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   247bc:	00000306 	br	247cc <alt_printf+0x100>
                        digit_shift -= 4;
   247c0:	e0bff917 	ldw	r2,-28(fp)
   247c4:	10bfff04 	addi	r2,r2,-4
   247c8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   247cc:	00c003c4 	movi	r3,15
   247d0:	e0bff917 	ldw	r2,-28(fp)
   247d4:	1884983a 	sll	r2,r3,r2
   247d8:	1007883a 	mov	r3,r2
   247dc:	e0bffb17 	ldw	r2,-20(fp)
   247e0:	1884703a 	and	r2,r3,r2
   247e4:	103ff626 	beq	r2,zero,247c0 <__alt_data_end+0xf40247c0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   247e8:	00001906 	br	24850 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   247ec:	00c003c4 	movi	r3,15
   247f0:	e0bff917 	ldw	r2,-28(fp)
   247f4:	1884983a 	sll	r2,r3,r2
   247f8:	1007883a 	mov	r3,r2
   247fc:	e0bffb17 	ldw	r2,-20(fp)
   24800:	1886703a 	and	r3,r3,r2
   24804:	e0bff917 	ldw	r2,-28(fp)
   24808:	1884d83a 	srl	r2,r3,r2
   2480c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   24810:	e0bffc17 	ldw	r2,-16(fp)
   24814:	108002a8 	cmpgeui	r2,r2,10
   24818:	1000041e 	bne	r2,zero,2482c <alt_printf+0x160>
                            c = '0' + digit;
   2481c:	e0bffc17 	ldw	r2,-16(fp)
   24820:	10800c04 	addi	r2,r2,48
   24824:	e0bff805 	stb	r2,-32(fp)
   24828:	00000306 	br	24838 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2482c:	e0bffc17 	ldw	r2,-16(fp)
   24830:	108015c4 	addi	r2,r2,87
   24834:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   24838:	e0bff807 	ldb	r2,-32(fp)
   2483c:	1009883a 	mov	r4,r2
   24840:	00248f40 	call	248f4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   24844:	e0bff917 	ldw	r2,-28(fp)
   24848:	10bfff04 	addi	r2,r2,-4
   2484c:	e0bff915 	stw	r2,-28(fp)
   24850:	e0bff917 	ldw	r2,-28(fp)
   24854:	103fe50e 	bge	r2,zero,247ec <__alt_data_end+0xf40247ec>
   24858:	00001a06 	br	248c4 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2485c:	e0bff807 	ldb	r2,-32(fp)
   24860:	10801cd8 	cmpnei	r2,r2,115
   24864:	1000151e 	bne	r2,zero,248bc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   24868:	e0bffe17 	ldw	r2,-8(fp)
   2486c:	10c00104 	addi	r3,r2,4
   24870:	e0fffe15 	stw	r3,-8(fp)
   24874:	10800017 	ldw	r2,0(r2)
   24878:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2487c:	00000906 	br	248a4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   24880:	e0bffa17 	ldw	r2,-24(fp)
   24884:	10c00044 	addi	r3,r2,1
   24888:	e0fffa15 	stw	r3,-24(fp)
   2488c:	10800003 	ldbu	r2,0(r2)
   24890:	10803fcc 	andi	r2,r2,255
   24894:	1080201c 	xori	r2,r2,128
   24898:	10bfe004 	addi	r2,r2,-128
   2489c:	1009883a 	mov	r4,r2
   248a0:	00248f40 	call	248f4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   248a4:	e0bffa17 	ldw	r2,-24(fp)
   248a8:	10800003 	ldbu	r2,0(r2)
   248ac:	10803fcc 	andi	r2,r2,255
   248b0:	1080201c 	xori	r2,r2,128
   248b4:	10bfe004 	addi	r2,r2,-128
   248b8:	103ff11e 	bne	r2,zero,24880 <__alt_data_end+0xf4024880>
   248bc:	00000106 	br	248c4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   248c0:	00000706 	br	248e0 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   248c4:	e0bff717 	ldw	r2,-36(fp)
   248c8:	10c00044 	addi	r3,r2,1
   248cc:	e0fff715 	stw	r3,-36(fp)
   248d0:	10800003 	ldbu	r2,0(r2)
   248d4:	e0bff805 	stb	r2,-32(fp)
   248d8:	e0bff807 	ldb	r2,-32(fp)
   248dc:	103f881e 	bne	r2,zero,24700 <__alt_data_end+0xf4024700>
            {
                break;
            }
        }
    }
}
   248e0:	e037883a 	mov	sp,fp
   248e4:	dfc00117 	ldw	ra,4(sp)
   248e8:	df000017 	ldw	fp,0(sp)
   248ec:	dec00504 	addi	sp,sp,20
   248f0:	f800283a 	ret

000248f4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   248f4:	defffd04 	addi	sp,sp,-12
   248f8:	dfc00215 	stw	ra,8(sp)
   248fc:	df000115 	stw	fp,4(sp)
   24900:	df000104 	addi	fp,sp,4
   24904:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   24908:	00820034 	movhi	r2,2048
   2490c:	1083cf04 	addi	r2,r2,3900
   24910:	10800017 	ldw	r2,0(r2)
   24914:	10800217 	ldw	r2,8(r2)
   24918:	e13fff17 	ldw	r4,-4(fp)
   2491c:	100b883a 	mov	r5,r2
   24920:	002412c0 	call	2412c <putc>
#endif
}
   24924:	e037883a 	mov	sp,fp
   24928:	dfc00117 	ldw	ra,4(sp)
   2492c:	df000017 	ldw	fp,0(sp)
   24930:	dec00204 	addi	sp,sp,8
   24934:	f800283a 	ret

00024938 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   24938:	defff904 	addi	sp,sp,-28
   2493c:	df000615 	stw	fp,24(sp)
   24940:	df000604 	addi	fp,sp,24
   24944:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24948:	0005303a 	rdctl	r2,status
   2494c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24950:	e0fffc17 	ldw	r3,-16(fp)
   24954:	00bfff84 	movi	r2,-2
   24958:	1884703a 	and	r2,r3,r2
   2495c:	1001703a 	wrctl	status,r2
  
  return context;
   24960:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   24964:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   24968:	d0a01617 	ldw	r2,-32680(gp)
   2496c:	10c000c4 	addi	r3,r2,3
   24970:	00bfff04 	movi	r2,-4
   24974:	1884703a 	and	r2,r3,r2
   24978:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2497c:	d0e01617 	ldw	r3,-32680(gp)
   24980:	e0bfff17 	ldw	r2,-4(fp)
   24984:	1887883a 	add	r3,r3,r2
   24988:	00830034 	movhi	r2,3072
   2498c:	10800004 	addi	r2,r2,0
   24990:	10c0062e 	bgeu	r2,r3,249ac <sbrk+0x74>
   24994:	e0bffa17 	ldw	r2,-24(fp)
   24998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2499c:	e0bffd17 	ldw	r2,-12(fp)
   249a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   249a4:	00bfffc4 	movi	r2,-1
   249a8:	00000b06 	br	249d8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   249ac:	d0a01617 	ldw	r2,-32680(gp)
   249b0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   249b4:	d0e01617 	ldw	r3,-32680(gp)
   249b8:	e0bfff17 	ldw	r2,-4(fp)
   249bc:	1885883a 	add	r2,r3,r2
   249c0:	d0a01615 	stw	r2,-32680(gp)
   249c4:	e0bffa17 	ldw	r2,-24(fp)
   249c8:	e0bffe15 	stw	r2,-8(fp)
   249cc:	e0bffe17 	ldw	r2,-8(fp)
   249d0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   249d4:	e0bffb17 	ldw	r2,-20(fp)
} 
   249d8:	e037883a 	mov	sp,fp
   249dc:	df000017 	ldw	fp,0(sp)
   249e0:	dec00104 	addi	sp,sp,4
   249e4:	f800283a 	ret

000249e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   249e8:	defffe04 	addi	sp,sp,-8
   249ec:	dfc00115 	stw	ra,4(sp)
   249f0:	df000015 	stw	fp,0(sp)
   249f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   249f8:	00820034 	movhi	r2,2048
   249fc:	1083d604 	addi	r2,r2,3928
   24a00:	10800017 	ldw	r2,0(r2)
   24a04:	10000526 	beq	r2,zero,24a1c <alt_get_errno+0x34>
   24a08:	00820034 	movhi	r2,2048
   24a0c:	1083d604 	addi	r2,r2,3928
   24a10:	10800017 	ldw	r2,0(r2)
   24a14:	103ee83a 	callr	r2
   24a18:	00000206 	br	24a24 <alt_get_errno+0x3c>
   24a1c:	00820034 	movhi	r2,2048
   24a20:	1083e404 	addi	r2,r2,3984
}
   24a24:	e037883a 	mov	sp,fp
   24a28:	dfc00117 	ldw	ra,4(sp)
   24a2c:	df000017 	ldw	fp,0(sp)
   24a30:	dec00204 	addi	sp,sp,8
   24a34:	f800283a 	ret

00024a38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   24a38:	defff904 	addi	sp,sp,-28
   24a3c:	dfc00615 	stw	ra,24(sp)
   24a40:	df000515 	stw	fp,20(sp)
   24a44:	df000504 	addi	fp,sp,20
   24a48:	e13ffd15 	stw	r4,-12(fp)
   24a4c:	e17ffe15 	stw	r5,-8(fp)
   24a50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24a54:	e0bffd17 	ldw	r2,-12(fp)
   24a58:	10000816 	blt	r2,zero,24a7c <write+0x44>
   24a5c:	e13ffd17 	ldw	r4,-12(fp)
   24a60:	01400304 	movi	r5,12
   24a64:	00225e40 	call	225e4 <__mulsi3>
   24a68:	1007883a 	mov	r3,r2
   24a6c:	00820034 	movhi	r2,2048
   24a70:	10835a04 	addi	r2,r2,3432
   24a74:	1885883a 	add	r2,r3,r2
   24a78:	00000106 	br	24a80 <write+0x48>
   24a7c:	0005883a 	mov	r2,zero
   24a80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   24a84:	e0bffb17 	ldw	r2,-20(fp)
   24a88:	10002126 	beq	r2,zero,24b10 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   24a8c:	e0bffb17 	ldw	r2,-20(fp)
   24a90:	10800217 	ldw	r2,8(r2)
   24a94:	108000cc 	andi	r2,r2,3
   24a98:	10001826 	beq	r2,zero,24afc <write+0xc4>
   24a9c:	e0bffb17 	ldw	r2,-20(fp)
   24aa0:	10800017 	ldw	r2,0(r2)
   24aa4:	10800617 	ldw	r2,24(r2)
   24aa8:	10001426 	beq	r2,zero,24afc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   24aac:	e0bffb17 	ldw	r2,-20(fp)
   24ab0:	10800017 	ldw	r2,0(r2)
   24ab4:	10800617 	ldw	r2,24(r2)
   24ab8:	e0ffff17 	ldw	r3,-4(fp)
   24abc:	e13ffb17 	ldw	r4,-20(fp)
   24ac0:	e17ffe17 	ldw	r5,-8(fp)
   24ac4:	180d883a 	mov	r6,r3
   24ac8:	103ee83a 	callr	r2
   24acc:	e0bffc15 	stw	r2,-16(fp)
   24ad0:	e0bffc17 	ldw	r2,-16(fp)
   24ad4:	1000070e 	bge	r2,zero,24af4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   24ad8:	00249e80 	call	249e8 <alt_get_errno>
   24adc:	1007883a 	mov	r3,r2
   24ae0:	e0bffc17 	ldw	r2,-16(fp)
   24ae4:	0085c83a 	sub	r2,zero,r2
   24ae8:	18800015 	stw	r2,0(r3)
        return -1;
   24aec:	00bfffc4 	movi	r2,-1
   24af0:	00000c06 	br	24b24 <write+0xec>
      }
      return rval;
   24af4:	e0bffc17 	ldw	r2,-16(fp)
   24af8:	00000a06 	br	24b24 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   24afc:	00249e80 	call	249e8 <alt_get_errno>
   24b00:	1007883a 	mov	r3,r2
   24b04:	00800344 	movi	r2,13
   24b08:	18800015 	stw	r2,0(r3)
   24b0c:	00000406 	br	24b20 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   24b10:	00249e80 	call	249e8 <alt_get_errno>
   24b14:	1007883a 	mov	r3,r2
   24b18:	00801444 	movi	r2,81
   24b1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24b20:	00bfffc4 	movi	r2,-1
}
   24b24:	e037883a 	mov	sp,fp
   24b28:	dfc00117 	ldw	ra,4(sp)
   24b2c:	df000017 	ldw	fp,0(sp)
   24b30:	dec00204 	addi	sp,sp,8
   24b34:	f800283a 	ret

00024b38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   24b38:	defffd04 	addi	sp,sp,-12
   24b3c:	dfc00215 	stw	ra,8(sp)
   24b40:	df000115 	stw	fp,4(sp)
   24b44:	df000104 	addi	fp,sp,4
   24b48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   24b4c:	e13fff17 	ldw	r4,-4(fp)
   24b50:	01420034 	movhi	r5,2048
   24b54:	2943d304 	addi	r5,r5,3916
   24b58:	00296f80 	call	296f8 <alt_dev_llist_insert>
}
   24b5c:	e037883a 	mov	sp,fp
   24b60:	dfc00117 	ldw	ra,4(sp)
   24b64:	df000017 	ldw	fp,0(sp)
   24b68:	dec00204 	addi	sp,sp,8
   24b6c:	f800283a 	ret

00024b70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   24b70:	defffd04 	addi	sp,sp,-12
   24b74:	dfc00215 	stw	ra,8(sp)
   24b78:	df000115 	stw	fp,4(sp)
   24b7c:	df000104 	addi	fp,sp,4
   24b80:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   24b84:	0029d7c0 	call	29d7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   24b88:	00800044 	movi	r2,1
   24b8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   24b90:	e037883a 	mov	sp,fp
   24b94:	dfc00117 	ldw	ra,4(sp)
   24b98:	df000017 	ldw	fp,0(sp)
   24b9c:	dec00204 	addi	sp,sp,8
   24ba0:	f800283a 	ret

00024ba4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   24ba4:	defffe04 	addi	sp,sp,-8
   24ba8:	dfc00115 	stw	ra,4(sp)
   24bac:	df000015 	stw	fp,0(sp)
   24bb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   24bb4:	01020034 	movhi	r4,2048
   24bb8:	21032404 	addi	r4,r4,3216
   24bbc:	0024b380 	call	24b38 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( BT_RS232_UART, bt_rs232_uart);
   24bc0:	01020034 	movhi	r4,2048
   24bc4:	21032f04 	addi	r4,r4,3260
   24bc8:	0024b380 	call	24b38 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_RS232_UART, wifi_rs232_uart);
   24bcc:	01020034 	movhi	r4,2048
   24bd0:	21033a04 	addi	r4,r4,3304
   24bd4:	0024b380 	call	24b38 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_IC, sd_card_ic);
   24bd8:	01020034 	movhi	r4,2048
   24bdc:	21034504 	addi	r4,r4,3348
   24be0:	0024b380 	call	24b38 <alt_dev_reg>
}
   24be4:	e037883a 	mov	sp,fp
   24be8:	dfc00117 	ldw	ra,4(sp)
   24bec:	df000017 	ldw	fp,0(sp)
   24bf0:	dec00204 	addi	sp,sp,8
   24bf4:	f800283a 	ret

00024bf8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   24bf8:	defffa04 	addi	sp,sp,-24
   24bfc:	dfc00515 	stw	ra,20(sp)
   24c00:	df000415 	stw	fp,16(sp)
   24c04:	df000404 	addi	fp,sp,16
   24c08:	e13ffe15 	stw	r4,-8(fp)
   24c0c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   24c10:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
   24c14:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   24c18:	10001e26 	beq	r2,zero,24c94 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
   24c1c:	00803fc4 	movi	r2,255
   24c20:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   24c24:	d0a03417 	ldw	r2,-32560(gp)
   24c28:	e13ffe17 	ldw	r4,-8(fp)
   24c2c:	e0ffff17 	ldw	r3,-4(fp)
   24c30:	20c7883a 	add	r3,r4,r3
   24c34:	1806927a 	slli	r3,r3,9
   24c38:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
   24c3c:	d0a03317 	ldw	r2,-32564(gp)
   24c40:	00c00604 	movi	r3,24
   24c44:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   24c48:	d0a03017 	ldw	r2,-32576(gp)
   24c4c:	1080002b 	ldhuio	r2,0(r2)
   24c50:	10bfffcc 	andi	r2,r2,65535
   24c54:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
   24c58:	e0bffd0b 	ldhu	r2,-12(fp)
   24c5c:	10bfffcc 	andi	r2,r2,65535
   24c60:	1080010c 	andi	r2,r2,4
   24c64:	103ff81e 	bne	r2,zero,24c48 <__alt_data_end+0xf4024c48>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   24c68:	e0bffd0b 	ldhu	r2,-12(fp)
   24c6c:	10bfffcc 	andi	r2,r2,65535
   24c70:	1080040c 	andi	r2,r2,16
   24c74:	1000071e 	bne	r2,zero,24c94 <Write_Sector_Data+0x9c>
        {
            result = true;
   24c78:	00800044 	movi	r2,1
   24c7c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   24c80:	d0203915 	stw	zero,-32540(gp)
            current_sector_index = sector_index+partition_offset;
   24c84:	e0fffe17 	ldw	r3,-8(fp)
   24c88:	e0bfff17 	ldw	r2,-4(fp)
   24c8c:	1885883a 	add	r2,r3,r2
   24c90:	d0a03a15 	stw	r2,-32536(gp)
        }
    }
    return result;
   24c94:	e0bffc17 	ldw	r2,-16(fp)
}
   24c98:	e037883a 	mov	sp,fp
   24c9c:	dfc00117 	ldw	ra,4(sp)
   24ca0:	df000017 	ldw	fp,0(sp)
   24ca4:	dec00204 	addi	sp,sp,8
   24ca8:	f800283a 	ret

00024cac <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   24cac:	defffd04 	addi	sp,sp,-12
   24cb0:	dfc00215 	stw	ra,8(sp)
   24cb4:	df000115 	stw	fp,4(sp)
   24cb8:	df000104 	addi	fp,sp,4
    bool result = true;
   24cbc:	00800044 	movi	r2,1
   24cc0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   24cc4:	d0a03917 	ldw	r2,-32540(gp)
   24cc8:	10000526 	beq	r2,zero,24ce0 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   24ccc:	d0a03a17 	ldw	r2,-32536(gp)
   24cd0:	1009883a 	mov	r4,r2
   24cd4:	000b883a 	mov	r5,zero
   24cd8:	0024bf80 	call	24bf8 <Write_Sector_Data>
   24cdc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   24ce0:	e0bfff17 	ldw	r2,-4(fp)
}
   24ce4:	e037883a 	mov	sp,fp
   24ce8:	dfc00117 	ldw	ra,4(sp)
   24cec:	df000017 	ldw	fp,0(sp)
   24cf0:	dec00204 	addi	sp,sp,8
   24cf4:	f800283a 	ret

00024cf8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   24cf8:	defffa04 	addi	sp,sp,-24
   24cfc:	dfc00515 	stw	ra,20(sp)
   24d00:	df000415 	stw	fp,16(sp)
   24d04:	df000404 	addi	fp,sp,16
   24d08:	e13ffe15 	stw	r4,-8(fp)
   24d0c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
   24d10:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
   24d14:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   24d18:	10002726 	beq	r2,zero,24db8 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
   24d1c:	00803fc4 	movi	r2,255
   24d20:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   24d24:	d0a03917 	ldw	r2,-32540(gp)
   24d28:	10000726 	beq	r2,zero,24d48 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   24d2c:	d0a03a17 	ldw	r2,-32536(gp)
   24d30:	1009883a 	mov	r4,r2
   24d34:	000b883a 	mov	r5,zero
   24d38:	0024bf80 	call	24bf8 <Write_Sector_Data>
   24d3c:	1000021e 	bne	r2,zero,24d48 <Read_Sector_Data+0x50>
            {
                return false;
   24d40:	0005883a 	mov	r2,zero
   24d44:	00001d06 	br	24dbc <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
   24d48:	d0a03417 	ldw	r2,-32560(gp)
   24d4c:	e13ffe17 	ldw	r4,-8(fp)
   24d50:	e0ffff17 	ldw	r3,-4(fp)
   24d54:	20c7883a 	add	r3,r4,r3
   24d58:	1806927a 	slli	r3,r3,9
   24d5c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
   24d60:	d0a03317 	ldw	r2,-32564(gp)
   24d64:	00c00444 	movi	r3,17
   24d68:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
   24d6c:	d0a03017 	ldw	r2,-32576(gp)
   24d70:	1080002b 	ldhuio	r2,0(r2)
   24d74:	10bfffcc 	andi	r2,r2,65535
   24d78:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
   24d7c:	e0bffd0b 	ldhu	r2,-12(fp)
   24d80:	10bfffcc 	andi	r2,r2,65535
   24d84:	1080010c 	andi	r2,r2,4
   24d88:	103ff81e 	bne	r2,zero,24d6c <__alt_data_end+0xf4024d6c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   24d8c:	e0bffd0b 	ldhu	r2,-12(fp)
   24d90:	10bfffcc 	andi	r2,r2,65535
   24d94:	1080040c 	andi	r2,r2,16
   24d98:	1000071e 	bne	r2,zero,24db8 <Read_Sector_Data+0xc0>
		{
			result = true;
   24d9c:	00800044 	movi	r2,1
   24da0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   24da4:	d0203915 	stw	zero,-32540(gp)
            current_sector_index = sector_index+partition_offset;
   24da8:	e0fffe17 	ldw	r3,-8(fp)
   24dac:	e0bfff17 	ldw	r2,-4(fp)
   24db0:	1885883a 	add	r2,r3,r2
   24db4:	d0a03a15 	stw	r2,-32536(gp)
		}
	}
	return result;
   24db8:	e0bffc17 	ldw	r2,-16(fp)
}
   24dbc:	e037883a 	mov	sp,fp
   24dc0:	dfc00117 	ldw	ra,4(sp)
   24dc4:	df000017 	ldw	fp,0(sp)
   24dc8:	dec00204 	addi	sp,sp,8
   24dcc:	f800283a 	ret

00024dd0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   24dd0:	defffb04 	addi	sp,sp,-20
   24dd4:	dfc00415 	stw	ra,16(sp)
   24dd8:	df000315 	stw	fp,12(sp)
   24ddc:	df000304 	addi	fp,sp,12
   24de0:	e13ffe15 	stw	r4,-8(fp)
   24de4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   24de8:	e0bffe17 	ldw	r2,-8(fp)
   24dec:	1004d23a 	srli	r2,r2,8
   24df0:	d0e03617 	ldw	r3,-32552(gp)
   24df4:	10c5883a 	add	r2,r2,r3
   24df8:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   24dfc:	00820034 	movhi	r2,2048
   24e00:	1086c404 	addi	r2,r2,6928
   24e04:	10801117 	ldw	r2,68(r2)
   24e08:	e0fffd17 	ldw	r3,-12(fp)
   24e0c:	1885883a 	add	r2,r3,r2
   24e10:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
   24e14:	d0a03a17 	ldw	r2,-32536(gp)
   24e18:	e0fffd17 	ldw	r3,-12(fp)
   24e1c:	18800726 	beq	r3,r2,24e3c <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   24e20:	e0bffd17 	ldw	r2,-12(fp)
   24e24:	1009883a 	mov	r4,r2
   24e28:	000b883a 	mov	r5,zero
   24e2c:	0024cf80 	call	24cf8 <Read_Sector_Data>
   24e30:	1000021e 	bne	r2,zero,24e3c <get_cluster_flag+0x6c>
        {
            return false;
   24e34:	0005883a 	mov	r2,zero
   24e38:	00000d06 	br	24e70 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
   24e3c:	e0bffe17 	ldw	r2,-8(fp)
   24e40:	10803fcc 	andi	r2,r2,255
   24e44:	1085883a 	add	r2,r2,r2
   24e48:	1007883a 	mov	r3,r2
   24e4c:	d0a03817 	ldw	r2,-32544(gp)
   24e50:	10800a17 	ldw	r2,40(r2)
   24e54:	1885883a 	add	r2,r3,r2
   24e58:	1080002b 	ldhuio	r2,0(r2)
   24e5c:	10bfffcc 	andi	r2,r2,65535
   24e60:	1007883a 	mov	r3,r2
   24e64:	e0bfff17 	ldw	r2,-4(fp)
   24e68:	10c0000d 	sth	r3,0(r2)
    return true;
   24e6c:	00800044 	movi	r2,1
}
   24e70:	e037883a 	mov	sp,fp
   24e74:	dfc00117 	ldw	ra,4(sp)
   24e78:	df000017 	ldw	fp,0(sp)
   24e7c:	dec00204 	addi	sp,sp,8
   24e80:	f800283a 	ret

00024e84 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   24e84:	defffa04 	addi	sp,sp,-24
   24e88:	dfc00515 	stw	ra,20(sp)
   24e8c:	df000415 	stw	fp,16(sp)
   24e90:	df000404 	addi	fp,sp,16
   24e94:	e13ffd15 	stw	r4,-12(fp)
   24e98:	2805883a 	mov	r2,r5
   24e9c:	e1bfff15 	stw	r6,-4(fp)
   24ea0:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   24ea4:	e0bffd17 	ldw	r2,-12(fp)
   24ea8:	1004d23a 	srli	r2,r2,8
   24eac:	d0e03617 	ldw	r3,-32552(gp)
   24eb0:	10c5883a 	add	r2,r2,r3
   24eb4:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
   24eb8:	e0bfff17 	ldw	r2,-4(fp)
   24ebc:	10000726 	beq	r2,zero,24edc <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   24ec0:	00820034 	movhi	r2,2048
   24ec4:	1086c404 	addi	r2,r2,6928
   24ec8:	10801117 	ldw	r2,68(r2)
   24ecc:	e0fffc17 	ldw	r3,-16(fp)
   24ed0:	1885883a 	add	r2,r3,r2
   24ed4:	e0bffc15 	stw	r2,-16(fp)
   24ed8:	00000606 	br	24ef4 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   24edc:	00820034 	movhi	r2,2048
   24ee0:	1086c404 	addi	r2,r2,6928
   24ee4:	10801217 	ldw	r2,72(r2)
   24ee8:	e0fffc17 	ldw	r3,-16(fp)
   24eec:	1885883a 	add	r2,r3,r2
   24ef0:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
   24ef4:	d0a03a17 	ldw	r2,-32536(gp)
   24ef8:	e0fffc17 	ldw	r3,-16(fp)
   24efc:	18800726 	beq	r3,r2,24f1c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   24f00:	e0bffc17 	ldw	r2,-16(fp)
   24f04:	1009883a 	mov	r4,r2
   24f08:	000b883a 	mov	r5,zero
   24f0c:	0024cf80 	call	24cf8 <Read_Sector_Data>
   24f10:	1000021e 	bne	r2,zero,24f1c <mark_cluster+0x98>
        {
            return false;
   24f14:	0005883a 	mov	r2,zero
   24f18:	00000d06 	br	24f50 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
   24f1c:	e0bffd17 	ldw	r2,-12(fp)
   24f20:	10803fcc 	andi	r2,r2,255
   24f24:	1085883a 	add	r2,r2,r2
   24f28:	1007883a 	mov	r3,r2
   24f2c:	d0a03817 	ldw	r2,-32544(gp)
   24f30:	10800a17 	ldw	r2,40(r2)
   24f34:	1885883a 	add	r2,r3,r2
   24f38:	1007883a 	mov	r3,r2
   24f3c:	e0bffe0f 	ldh	r2,-8(fp)
   24f40:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
   24f44:	00800044 	movi	r2,1
   24f48:	d0a03915 	stw	r2,-32540(gp)
    return true;
   24f4c:	00800044 	movi	r2,1
}
   24f50:	e037883a 	mov	sp,fp
   24f54:	dfc00117 	ldw	ra,4(sp)
   24f58:	df000017 	ldw	fp,0(sp)
   24f5c:	dec00204 	addi	sp,sp,8
   24f60:	f800283a 	ret

00024f64 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   24f64:	defff704 	addi	sp,sp,-36
   24f68:	dfc00815 	stw	ra,32(sp)
   24f6c:	df000715 	stw	fp,28(sp)
   24f70:	df000704 	addi	fp,sp,28
	bool result = false;
   24f74:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   24f78:	0009883a 	mov	r4,zero
   24f7c:	000b883a 	mov	r5,zero
   24f80:	0024cf80 	call	24cf8 <Read_Sector_Data>
   24f84:	10005c26 	beq	r2,zero,250f8 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
   24f88:	d0a03817 	ldw	r2,-32544(gp)
   24f8c:	10800a17 	ldw	r2,40(r2)
   24f90:	10807f84 	addi	r2,r2,510
   24f94:	1080002b 	ldhuio	r2,0(r2)
   24f98:	10bfffcc 	andi	r2,r2,65535
   24f9c:	10bfffcc 	andi	r2,r2,65535
   24fa0:	10a0001c 	xori	r2,r2,32768
   24fa4:	10a00004 	addi	r2,r2,-32768
   24fa8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   24fac:	e0bffb17 	ldw	r2,-20(fp)
   24fb0:	10ffffcc 	andi	r3,r2,65535
   24fb4:	00aa9554 	movui	r2,43605
   24fb8:	18804f1e 	bne	r3,r2,250f8 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   24fbc:	e03ffa15 	stw	zero,-24(fp)
   24fc0:	00004a06 	br	250ec <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   24fc4:	e0bffa17 	ldw	r2,-24(fp)
   24fc8:	1004913a 	slli	r2,r2,4
   24fcc:	10806f84 	addi	r2,r2,446
   24fd0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
   24fd4:	d0a03817 	ldw	r2,-32544(gp)
   24fd8:	10c00a17 	ldw	r3,40(r2)
   24fdc:	e0bffc17 	ldw	r2,-16(fp)
   24fe0:	1885883a 	add	r2,r3,r2
   24fe4:	10800104 	addi	r2,r2,4
   24fe8:	10800023 	ldbuio	r2,0(r2)
   24fec:	10803fcc 	andi	r2,r2,255
   24ff0:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   24ff4:	e0bffd07 	ldb	r2,-12(fp)
   24ff8:	10800060 	cmpeqi	r2,r2,1
   24ffc:	1000091e 	bne	r2,zero,25024 <Check_for_Master_Boot_Record+0xc0>
   25000:	e0bffd07 	ldb	r2,-12(fp)
   25004:	10800120 	cmpeqi	r2,r2,4
   25008:	1000061e 	bne	r2,zero,25024 <Check_for_Master_Boot_Record+0xc0>
   2500c:	e0bffd07 	ldb	r2,-12(fp)
   25010:	108001a0 	cmpeqi	r2,r2,6
   25014:	1000031e 	bne	r2,zero,25024 <Check_for_Master_Boot_Record+0xc0>
   25018:	e0bffd07 	ldb	r2,-12(fp)
   2501c:	10800398 	cmpnei	r2,r2,14
   25020:	10002f1e 	bne	r2,zero,250e0 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
   25024:	d0a03817 	ldw	r2,-32544(gp)
   25028:	10c00a17 	ldw	r3,40(r2)
   2502c:	e0bffc17 	ldw	r2,-16(fp)
   25030:	1885883a 	add	r2,r3,r2
   25034:	10800284 	addi	r2,r2,10
   25038:	1080002b 	ldhuio	r2,0(r2)
   2503c:	10bfffcc 	andi	r2,r2,65535
   25040:	10bfffcc 	andi	r2,r2,65535
   25044:	1006943a 	slli	r3,r2,16
   25048:	d0a03817 	ldw	r2,-32544(gp)
   2504c:	11000a17 	ldw	r4,40(r2)
   25050:	e0bffc17 	ldw	r2,-16(fp)
   25054:	2085883a 	add	r2,r4,r2
   25058:	10800204 	addi	r2,r2,8
   2505c:	1080002b 	ldhuio	r2,0(r2)
   25060:	10bfffcc 	andi	r2,r2,65535
   25064:	10bfffcc 	andi	r2,r2,65535
   25068:	1884b03a 	or	r2,r3,r2
   2506c:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
   25070:	d0a03817 	ldw	r2,-32544(gp)
   25074:	10c00a17 	ldw	r3,40(r2)
   25078:	e0bffc17 	ldw	r2,-16(fp)
   2507c:	1885883a 	add	r2,r3,r2
   25080:	10800384 	addi	r2,r2,14
   25084:	1080002b 	ldhuio	r2,0(r2)
   25088:	10bfffcc 	andi	r2,r2,65535
   2508c:	10bfffcc 	andi	r2,r2,65535
   25090:	1006943a 	slli	r3,r2,16
   25094:	d0a03817 	ldw	r2,-32544(gp)
   25098:	11000a17 	ldw	r4,40(r2)
   2509c:	e0bffc17 	ldw	r2,-16(fp)
   250a0:	2085883a 	add	r2,r4,r2
   250a4:	10800304 	addi	r2,r2,12
   250a8:	1080002b 	ldhuio	r2,0(r2)
   250ac:	10bfffcc 	andi	r2,r2,65535
   250b0:	10bfffcc 	andi	r2,r2,65535
   250b4:	1884b03a 	or	r2,r3,r2
   250b8:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   250bc:	e0bfff17 	ldw	r2,-4(fp)
   250c0:	0080070e 	bge	zero,r2,250e0 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
   250c4:	00800044 	movi	r2,1
   250c8:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   250cc:	e0bfff17 	ldw	r2,-4(fp)
   250d0:	d0a03715 	stw	r2,-32548(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   250d4:	e0bffe17 	ldw	r2,-8(fp)
   250d8:	d0a03615 	stw	r2,-32552(gp)
						break;
   250dc:	00000606 	br	250f8 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   250e0:	e0bffa17 	ldw	r2,-24(fp)
   250e4:	10800044 	addi	r2,r2,1
   250e8:	e0bffa15 	stw	r2,-24(fp)
   250ec:	e0bffa17 	ldw	r2,-24(fp)
   250f0:	10800110 	cmplti	r2,r2,4
   250f4:	103fb31e 	bne	r2,zero,24fc4 <__alt_data_end+0xf4024fc4>
				}
			}
		}
	}

	return result;
   250f8:	e0bff917 	ldw	r2,-28(fp)
}
   250fc:	e037883a 	mov	sp,fp
   25100:	dfc00117 	ldw	ra,4(sp)
   25104:	df000017 	ldw	fp,0(sp)
   25108:	dec00204 	addi	sp,sp,8
   2510c:	f800283a 	ret

00025110 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   25110:	defff804 	addi	sp,sp,-32
   25114:	dfc00715 	stw	ra,28(sp)
   25118:	df000615 	stw	fp,24(sp)
   2511c:	df000604 	addi	fp,sp,24
   25120:	e13ffc15 	stw	r4,-16(fp)
   25124:	e17ffd15 	stw	r5,-12(fp)
   25128:	e1bffe15 	stw	r6,-8(fp)
   2512c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   25130:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   25134:	e0bffc17 	ldw	r2,-16(fp)
   25138:	108007cc 	andi	r2,r2,31
   2513c:	10008d1e 	bne	r2,zero,25374 <Read_File_Record_At_Offset+0x264>
   25140:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   25144:	10008b26 	beq	r2,zero,25374 <Read_File_Record_At_Offset+0x264>
   25148:	d0a02f17 	ldw	r2,-32580(gp)
   2514c:	10008926 	beq	r2,zero,25374 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   25150:	e03ffb15 	stw	zero,-20(fp)
   25154:	00001106 	br	2519c <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
   25158:	e0fffc17 	ldw	r3,-16(fp)
   2515c:	e0bffb17 	ldw	r2,-20(fp)
   25160:	1885883a 	add	r2,r3,r2
   25164:	1007883a 	mov	r3,r2
   25168:	d0a03817 	ldw	r2,-32544(gp)
   2516c:	10800a17 	ldw	r2,40(r2)
   25170:	1885883a 	add	r2,r3,r2
   25174:	10800023 	ldbuio	r2,0(r2)
   25178:	10803fcc 	andi	r2,r2,255
   2517c:	1009883a 	mov	r4,r2
   25180:	e0fffd17 	ldw	r3,-12(fp)
   25184:	e0bffb17 	ldw	r2,-20(fp)
   25188:	1885883a 	add	r2,r3,r2
   2518c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   25190:	e0bffb17 	ldw	r2,-20(fp)
   25194:	10800044 	addi	r2,r2,1
   25198:	e0bffb15 	stw	r2,-20(fp)
   2519c:	e0bffb17 	ldw	r2,-20(fp)
   251a0:	10800210 	cmplti	r2,r2,8
   251a4:	103fec1e 	bne	r2,zero,25158 <__alt_data_end+0xf4025158>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   251a8:	e03ffb15 	stw	zero,-20(fp)
   251ac:	00001306 	br	251fc <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
   251b0:	e0fffc17 	ldw	r3,-16(fp)
   251b4:	e0bffb17 	ldw	r2,-20(fp)
   251b8:	1885883a 	add	r2,r3,r2
   251bc:	1007883a 	mov	r3,r2
   251c0:	d0a03817 	ldw	r2,-32544(gp)
   251c4:	10800a17 	ldw	r2,40(r2)
   251c8:	1885883a 	add	r2,r3,r2
   251cc:	10800204 	addi	r2,r2,8
   251d0:	10800023 	ldbuio	r2,0(r2)
   251d4:	10803fcc 	andi	r2,r2,255
   251d8:	1009883a 	mov	r4,r2
   251dc:	e0fffd17 	ldw	r3,-12(fp)
   251e0:	e0bffb17 	ldw	r2,-20(fp)
   251e4:	1885883a 	add	r2,r3,r2
   251e8:	10800204 	addi	r2,r2,8
   251ec:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
   251f0:	e0bffb17 	ldw	r2,-20(fp)
   251f4:	10800044 	addi	r2,r2,1
   251f8:	e0bffb15 	stw	r2,-20(fp)
   251fc:	e0bffb17 	ldw	r2,-20(fp)
   25200:	108000d0 	cmplti	r2,r2,3
   25204:	103fea1e 	bne	r2,zero,251b0 <__alt_data_end+0xf40251b0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
   25208:	d0a03817 	ldw	r2,-32544(gp)
   2520c:	10c00a17 	ldw	r3,40(r2)
   25210:	e0bffc17 	ldw	r2,-16(fp)
   25214:	1885883a 	add	r2,r3,r2
   25218:	108002c4 	addi	r2,r2,11
   2521c:	10800023 	ldbuio	r2,0(r2)
   25220:	10803fcc 	andi	r2,r2,255
   25224:	1007883a 	mov	r3,r2
   25228:	e0bffd17 	ldw	r2,-12(fp)
   2522c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
   25230:	d0a03817 	ldw	r2,-32544(gp)
   25234:	10c00a17 	ldw	r3,40(r2)
   25238:	e0bffc17 	ldw	r2,-16(fp)
   2523c:	1885883a 	add	r2,r3,r2
   25240:	10800384 	addi	r2,r2,14
   25244:	1080002b 	ldhuio	r2,0(r2)
   25248:	10bfffcc 	andi	r2,r2,65535
   2524c:	1007883a 	mov	r3,r2
   25250:	e0bffd17 	ldw	r2,-12(fp)
   25254:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
   25258:	d0a03817 	ldw	r2,-32544(gp)
   2525c:	10c00a17 	ldw	r3,40(r2)
   25260:	e0bffc17 	ldw	r2,-16(fp)
   25264:	1885883a 	add	r2,r3,r2
   25268:	10800404 	addi	r2,r2,16
   2526c:	1080002b 	ldhuio	r2,0(r2)
   25270:	10bfffcc 	andi	r2,r2,65535
   25274:	1007883a 	mov	r3,r2
   25278:	e0bffd17 	ldw	r2,-12(fp)
   2527c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
   25280:	d0a03817 	ldw	r2,-32544(gp)
   25284:	10c00a17 	ldw	r3,40(r2)
   25288:	e0bffc17 	ldw	r2,-16(fp)
   2528c:	1885883a 	add	r2,r3,r2
   25290:	10800484 	addi	r2,r2,18
   25294:	1080002b 	ldhuio	r2,0(r2)
   25298:	10bfffcc 	andi	r2,r2,65535
   2529c:	1007883a 	mov	r3,r2
   252a0:	e0bffd17 	ldw	r2,-12(fp)
   252a4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
   252a8:	d0a03817 	ldw	r2,-32544(gp)
   252ac:	10c00a17 	ldw	r3,40(r2)
   252b0:	e0bffc17 	ldw	r2,-16(fp)
   252b4:	1885883a 	add	r2,r3,r2
   252b8:	10800584 	addi	r2,r2,22
   252bc:	1080002b 	ldhuio	r2,0(r2)
   252c0:	10bfffcc 	andi	r2,r2,65535
   252c4:	1007883a 	mov	r3,r2
   252c8:	e0bffd17 	ldw	r2,-12(fp)
   252cc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
   252d0:	d0a03817 	ldw	r2,-32544(gp)
   252d4:	10c00a17 	ldw	r3,40(r2)
   252d8:	e0bffc17 	ldw	r2,-16(fp)
   252dc:	1885883a 	add	r2,r3,r2
   252e0:	10800604 	addi	r2,r2,24
   252e4:	1080002b 	ldhuio	r2,0(r2)
   252e8:	10bfffcc 	andi	r2,r2,65535
   252ec:	1007883a 	mov	r3,r2
   252f0:	e0bffd17 	ldw	r2,-12(fp)
   252f4:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
   252f8:	d0a03817 	ldw	r2,-32544(gp)
   252fc:	10c00a17 	ldw	r3,40(r2)
   25300:	e0bffc17 	ldw	r2,-16(fp)
   25304:	1885883a 	add	r2,r3,r2
   25308:	10800684 	addi	r2,r2,26
   2530c:	1080002b 	ldhuio	r2,0(r2)
   25310:	10bfffcc 	andi	r2,r2,65535
   25314:	1007883a 	mov	r3,r2
   25318:	e0bffd17 	ldw	r2,-12(fp)
   2531c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
   25320:	d0a03817 	ldw	r2,-32544(gp)
   25324:	10c00a17 	ldw	r3,40(r2)
   25328:	e0bffc17 	ldw	r2,-16(fp)
   2532c:	1885883a 	add	r2,r3,r2
   25330:	10800704 	addi	r2,r2,28
   25334:	10800037 	ldwio	r2,0(r2)
   25338:	1007883a 	mov	r3,r2
   2533c:	e0bffd17 	ldw	r2,-12(fp)
   25340:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   25344:	e0bffd17 	ldw	r2,-12(fp)
   25348:	e0fffe17 	ldw	r3,-8(fp)
   2534c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
   25350:	e0bffd17 	ldw	r2,-12(fp)
   25354:	e0ffff17 	ldw	r3,-4(fp)
   25358:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
   2535c:	e0bffc17 	ldw	r2,-16(fp)
   25360:	1007883a 	mov	r3,r2
   25364:	e0bffd17 	ldw	r2,-12(fp)
   25368:	10c00c0d 	sth	r3,48(r2)
		result = true;
   2536c:	00800044 	movi	r2,1
   25370:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
   25374:	e0bffa17 	ldw	r2,-24(fp)
}
   25378:	e037883a 	mov	sp,fp
   2537c:	dfc00117 	ldw	ra,4(sp)
   25380:	df000017 	ldw	fp,0(sp)
   25384:	dec00204 	addi	sp,sp,8
   25388:	f800283a 	ret

0002538c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   2538c:	defff904 	addi	sp,sp,-28
   25390:	dfc00615 	stw	ra,24(sp)
   25394:	df000515 	stw	fp,20(sp)
   25398:	df000504 	addi	fp,sp,20
   2539c:	e13ffe15 	stw	r4,-8(fp)
   253a0:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   253a4:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   253a8:	e0bffe17 	ldw	r2,-8(fp)
   253ac:	108007cc 	andi	r2,r2,31
   253b0:	1000931e 	bne	r2,zero,25600 <Write_File_Record_At_Offset+0x274>
   253b4:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   253b8:	10009126 	beq	r2,zero,25600 <Write_File_Record_At_Offset+0x274>
   253bc:	d0a02f17 	ldw	r2,-32580(gp)
   253c0:	10008f26 	beq	r2,zero,25600 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   253c4:	e03ffc15 	stw	zero,-16(fp)
   253c8:	00001f06 	br	25448 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
   253cc:	e0bffc17 	ldw	r2,-16(fp)
   253d0:	10800044 	addi	r2,r2,1
   253d4:	e0ffff17 	ldw	r3,-4(fp)
   253d8:	1885883a 	add	r2,r3,r2
   253dc:	10800003 	ldbu	r2,0(r2)
   253e0:	10803fcc 	andi	r2,r2,255
   253e4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
   253e8:	e0bffd0f 	ldh	r2,-12(fp)
   253ec:	1004923a 	slli	r2,r2,8
   253f0:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
   253f4:	e0ffff17 	ldw	r3,-4(fp)
   253f8:	e0bffc17 	ldw	r2,-16(fp)
   253fc:	1885883a 	add	r2,r3,r2
   25400:	10800003 	ldbu	r2,0(r2)
   25404:	10c03fcc 	andi	r3,r2,255
   25408:	e0bffd0b 	ldhu	r2,-12(fp)
   2540c:	1884b03a 	or	r2,r3,r2
   25410:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
   25414:	e0fffe17 	ldw	r3,-8(fp)
   25418:	e0bffc17 	ldw	r2,-16(fp)
   2541c:	1885883a 	add	r2,r3,r2
   25420:	1007883a 	mov	r3,r2
   25424:	d0a03817 	ldw	r2,-32544(gp)
   25428:	10800a17 	ldw	r2,40(r2)
   2542c:	1885883a 	add	r2,r3,r2
   25430:	1007883a 	mov	r3,r2
   25434:	e0bffd0f 	ldh	r2,-12(fp)
   25438:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   2543c:	e0bffc17 	ldw	r2,-16(fp)
   25440:	10800084 	addi	r2,r2,2
   25444:	e0bffc15 	stw	r2,-16(fp)
   25448:	e0bffc17 	ldw	r2,-16(fp)
   2544c:	10800210 	cmplti	r2,r2,8
   25450:	103fde1e 	bne	r2,zero,253cc <__alt_data_end+0xf40253cc>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   25454:	e03ffc15 	stw	zero,-16(fp)
   25458:	00001306 	br	254a8 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
   2545c:	e0fffe17 	ldw	r3,-8(fp)
   25460:	e0bffc17 	ldw	r2,-16(fp)
   25464:	1885883a 	add	r2,r3,r2
   25468:	1007883a 	mov	r3,r2
   2546c:	d0a03817 	ldw	r2,-32544(gp)
   25470:	10800a17 	ldw	r2,40(r2)
   25474:	1885883a 	add	r2,r3,r2
   25478:	10800204 	addi	r2,r2,8
   2547c:	1009883a 	mov	r4,r2
   25480:	e0ffff17 	ldw	r3,-4(fp)
   25484:	e0bffc17 	ldw	r2,-16(fp)
   25488:	1885883a 	add	r2,r3,r2
   2548c:	10800204 	addi	r2,r2,8
   25490:	10800003 	ldbu	r2,0(r2)
   25494:	10803fcc 	andi	r2,r2,255
   25498:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
   2549c:	e0bffc17 	ldw	r2,-16(fp)
   254a0:	10800044 	addi	r2,r2,1
   254a4:	e0bffc15 	stw	r2,-16(fp)
   254a8:	e0bffc17 	ldw	r2,-16(fp)
   254ac:	108000d0 	cmplti	r2,r2,3
   254b0:	103fea1e 	bne	r2,zero,2545c <__alt_data_end+0xf402545c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
   254b4:	d0a03817 	ldw	r2,-32544(gp)
   254b8:	10c00a17 	ldw	r3,40(r2)
   254bc:	e0bffe17 	ldw	r2,-8(fp)
   254c0:	1885883a 	add	r2,r3,r2
   254c4:	108002c4 	addi	r2,r2,11
   254c8:	1007883a 	mov	r3,r2
   254cc:	e0bfff17 	ldw	r2,-4(fp)
   254d0:	108002c3 	ldbu	r2,11(r2)
   254d4:	10803fcc 	andi	r2,r2,255
   254d8:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
   254dc:	d0a03817 	ldw	r2,-32544(gp)
   254e0:	10c00a17 	ldw	r3,40(r2)
   254e4:	e0bffe17 	ldw	r2,-8(fp)
   254e8:	1885883a 	add	r2,r3,r2
   254ec:	10800384 	addi	r2,r2,14
   254f0:	1007883a 	mov	r3,r2
   254f4:	e0bfff17 	ldw	r2,-4(fp)
   254f8:	1080030b 	ldhu	r2,12(r2)
   254fc:	10bfffcc 	andi	r2,r2,65535
   25500:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
   25504:	d0a03817 	ldw	r2,-32544(gp)
   25508:	10c00a17 	ldw	r3,40(r2)
   2550c:	e0bffe17 	ldw	r2,-8(fp)
   25510:	1885883a 	add	r2,r3,r2
   25514:	10800404 	addi	r2,r2,16
   25518:	1007883a 	mov	r3,r2
   2551c:	e0bfff17 	ldw	r2,-4(fp)
   25520:	1080038b 	ldhu	r2,14(r2)
   25524:	10bfffcc 	andi	r2,r2,65535
   25528:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
   2552c:	d0a03817 	ldw	r2,-32544(gp)
   25530:	10c00a17 	ldw	r3,40(r2)
   25534:	e0bffe17 	ldw	r2,-8(fp)
   25538:	1885883a 	add	r2,r3,r2
   2553c:	10800484 	addi	r2,r2,18
   25540:	1007883a 	mov	r3,r2
   25544:	e0bfff17 	ldw	r2,-4(fp)
   25548:	1080040b 	ldhu	r2,16(r2)
   2554c:	10bfffcc 	andi	r2,r2,65535
   25550:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
   25554:	d0a03817 	ldw	r2,-32544(gp)
   25558:	10c00a17 	ldw	r3,40(r2)
   2555c:	e0bffe17 	ldw	r2,-8(fp)
   25560:	1885883a 	add	r2,r3,r2
   25564:	10800584 	addi	r2,r2,22
   25568:	1007883a 	mov	r3,r2
   2556c:	e0bfff17 	ldw	r2,-4(fp)
   25570:	1080048b 	ldhu	r2,18(r2)
   25574:	10bfffcc 	andi	r2,r2,65535
   25578:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
   2557c:	d0a03817 	ldw	r2,-32544(gp)
   25580:	10c00a17 	ldw	r3,40(r2)
   25584:	e0bffe17 	ldw	r2,-8(fp)
   25588:	1885883a 	add	r2,r3,r2
   2558c:	10800604 	addi	r2,r2,24
   25590:	1007883a 	mov	r3,r2
   25594:	e0bfff17 	ldw	r2,-4(fp)
   25598:	1080050b 	ldhu	r2,20(r2)
   2559c:	10bfffcc 	andi	r2,r2,65535
   255a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
   255a4:	d0a03817 	ldw	r2,-32544(gp)
   255a8:	10c00a17 	ldw	r3,40(r2)
   255ac:	e0bffe17 	ldw	r2,-8(fp)
   255b0:	1885883a 	add	r2,r3,r2
   255b4:	10800684 	addi	r2,r2,26
   255b8:	1007883a 	mov	r3,r2
   255bc:	e0bfff17 	ldw	r2,-4(fp)
   255c0:	1080058b 	ldhu	r2,22(r2)
   255c4:	10bfffcc 	andi	r2,r2,65535
   255c8:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
   255cc:	d0a03817 	ldw	r2,-32544(gp)
   255d0:	10c00a17 	ldw	r3,40(r2)
   255d4:	e0bffe17 	ldw	r2,-8(fp)
   255d8:	1885883a 	add	r2,r3,r2
   255dc:	10800704 	addi	r2,r2,28
   255e0:	1007883a 	mov	r3,r2
   255e4:	e0bfff17 	ldw	r2,-4(fp)
   255e8:	10800617 	ldw	r2,24(r2)
   255ec:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
   255f0:	00800044 	movi	r2,1
   255f4:	d0a03915 	stw	r2,-32540(gp)
        result = true;
   255f8:	00800044 	movi	r2,1
   255fc:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   25600:	e0bffb17 	ldw	r2,-20(fp)
}
   25604:	e037883a 	mov	sp,fp
   25608:	dfc00117 	ldw	ra,4(sp)
   2560c:	df000017 	ldw	fp,0(sp)
   25610:	dec00204 	addi	sp,sp,8
   25614:	f800283a 	ret

00025618 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   25618:	defff804 	addi	sp,sp,-32
   2561c:	dfc00715 	stw	ra,28(sp)
   25620:	df000615 	stw	fp,24(sp)
   25624:	dc000515 	stw	r16,20(sp)
   25628:	df000604 	addi	fp,sp,24
   2562c:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
   25630:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
   25634:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   25638:	0009883a 	mov	r4,zero
   2563c:	e17ffe17 	ldw	r5,-8(fp)
   25640:	0024cf80 	call	24cf8 <Read_Sector_Data>
   25644:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
   25648:	d0a03817 	ldw	r2,-32544(gp)
   2564c:	10800a17 	ldw	r2,40(r2)
   25650:	10807f84 	addi	r2,r2,510
   25654:	1080002b 	ldhuio	r2,0(r2)
   25658:	10bfffcc 	andi	r2,r2,65535
   2565c:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
   25660:	e0bffd0f 	ldh	r2,-12(fp)
   25664:	10ffffcc 	andi	r3,r2,65535
   25668:	00aa9554 	movui	r2,43605
   2566c:	18818c1e 	bne	r3,r2,25ca0 <Check_for_DOS_FAT+0x688>
   25670:	e0bffa17 	ldw	r2,-24(fp)
   25674:	10018a26 	beq	r2,zero,25ca0 <Check_for_DOS_FAT+0x688>
	{
		int num_clusters = 0;
   25678:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
   2567c:	d0a03817 	ldw	r2,-32544(gp)
   25680:	10800a17 	ldw	r2,40(r2)
   25684:	10800023 	ldbuio	r2,0(r2)
   25688:	10803fcc 	andi	r2,r2,255
   2568c:	1007883a 	mov	r3,r2
   25690:	00820034 	movhi	r2,2048
   25694:	1086c404 	addi	r2,r2,6928
   25698:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
   2569c:	d0a03817 	ldw	r2,-32544(gp)
   256a0:	10800a17 	ldw	r2,40(r2)
   256a4:	10800044 	addi	r2,r2,1
   256a8:	10800023 	ldbuio	r2,0(r2)
   256ac:	10803fcc 	andi	r2,r2,255
   256b0:	1007883a 	mov	r3,r2
   256b4:	00820034 	movhi	r2,2048
   256b8:	1086c404 	addi	r2,r2,6928
   256bc:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
   256c0:	d0a03817 	ldw	r2,-32544(gp)
   256c4:	10800a17 	ldw	r2,40(r2)
   256c8:	10800084 	addi	r2,r2,2
   256cc:	10800023 	ldbuio	r2,0(r2)
   256d0:	10803fcc 	andi	r2,r2,255
   256d4:	1007883a 	mov	r3,r2
   256d8:	00820034 	movhi	r2,2048
   256dc:	1086c404 	addi	r2,r2,6928
   256e0:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   256e4:	e03ffb15 	stw	zero,-20(fp)
   256e8:	00001006 	br	2572c <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
   256ec:	d0a03817 	ldw	r2,-32544(gp)
   256f0:	10c00a17 	ldw	r3,40(r2)
   256f4:	e0bffb17 	ldw	r2,-20(fp)
   256f8:	1885883a 	add	r2,r3,r2
   256fc:	108000c4 	addi	r2,r2,3
   25700:	10800023 	ldbuio	r2,0(r2)
   25704:	10803fcc 	andi	r2,r2,255
   25708:	1009883a 	mov	r4,r2
   2570c:	00820034 	movhi	r2,2048
   25710:	1086c404 	addi	r2,r2,6928
   25714:	e0fffb17 	ldw	r3,-20(fp)
   25718:	10c5883a 	add	r2,r2,r3
   2571c:	110000c5 	stb	r4,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
   25720:	e0bffb17 	ldw	r2,-20(fp)
   25724:	10800044 	addi	r2,r2,1
   25728:	e0bffb15 	stw	r2,-20(fp)
   2572c:	e0bffb17 	ldw	r2,-20(fp)
   25730:	10800210 	cmplti	r2,r2,8
   25734:	103fed1e 	bne	r2,zero,256ec <__alt_data_end+0xf40256ec>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
   25738:	d0a03817 	ldw	r2,-32544(gp)
   2573c:	10800a17 	ldw	r2,40(r2)
   25740:	10800304 	addi	r2,r2,12
   25744:	10800023 	ldbuio	r2,0(r2)
   25748:	10803fcc 	andi	r2,r2,255
   2574c:	10803fcc 	andi	r2,r2,255
   25750:	1004923a 	slli	r2,r2,8
   25754:	1007883a 	mov	r3,r2
   25758:	d0a03817 	ldw	r2,-32544(gp)
   2575c:	10800a17 	ldw	r2,40(r2)
   25760:	108002c4 	addi	r2,r2,11
   25764:	10800023 	ldbuio	r2,0(r2)
   25768:	10803fcc 	andi	r2,r2,255
   2576c:	10803fcc 	andi	r2,r2,255
   25770:	1080201c 	xori	r2,r2,128
   25774:	10bfe004 	addi	r2,r2,-128
   25778:	1884b03a 	or	r2,r3,r2
   2577c:	1007883a 	mov	r3,r2
   25780:	00820034 	movhi	r2,2048
   25784:	1086c404 	addi	r2,r2,6928
   25788:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
   2578c:	d0a03817 	ldw	r2,-32544(gp)
   25790:	10800a17 	ldw	r2,40(r2)
   25794:	10800344 	addi	r2,r2,13
   25798:	10800023 	ldbuio	r2,0(r2)
   2579c:	10803fcc 	andi	r2,r2,255
   257a0:	1007883a 	mov	r3,r2
   257a4:	00820034 	movhi	r2,2048
   257a8:	1086c404 	addi	r2,r2,6928
   257ac:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
   257b0:	d0a03817 	ldw	r2,-32544(gp)
   257b4:	10800a17 	ldw	r2,40(r2)
   257b8:	10800384 	addi	r2,r2,14
   257bc:	1080002b 	ldhuio	r2,0(r2)
   257c0:	10bfffcc 	andi	r2,r2,65535
   257c4:	1007883a 	mov	r3,r2
   257c8:	00820034 	movhi	r2,2048
   257cc:	1086c404 	addi	r2,r2,6928
   257d0:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
   257d4:	d0a03817 	ldw	r2,-32544(gp)
   257d8:	10800a17 	ldw	r2,40(r2)
   257dc:	10800404 	addi	r2,r2,16
   257e0:	10800023 	ldbuio	r2,0(r2)
   257e4:	10803fcc 	andi	r2,r2,255
   257e8:	1007883a 	mov	r3,r2
   257ec:	00820034 	movhi	r2,2048
   257f0:	1086c404 	addi	r2,r2,6928
   257f4:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
   257f8:	d0a03817 	ldw	r2,-32544(gp)
   257fc:	10800a17 	ldw	r2,40(r2)
   25800:	10800484 	addi	r2,r2,18
   25804:	10800023 	ldbuio	r2,0(r2)
   25808:	10803fcc 	andi	r2,r2,255
   2580c:	10803fcc 	andi	r2,r2,255
   25810:	1004923a 	slli	r2,r2,8
   25814:	1007883a 	mov	r3,r2
   25818:	d0a03817 	ldw	r2,-32544(gp)
   2581c:	10800a17 	ldw	r2,40(r2)
   25820:	10800444 	addi	r2,r2,17
   25824:	10800023 	ldbuio	r2,0(r2)
   25828:	10803fcc 	andi	r2,r2,255
   2582c:	10803fcc 	andi	r2,r2,255
   25830:	1884b03a 	or	r2,r3,r2
   25834:	1007883a 	mov	r3,r2
   25838:	00820034 	movhi	r2,2048
   2583c:	1086c404 	addi	r2,r2,6928
   25840:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
   25844:	d0a03817 	ldw	r2,-32544(gp)
   25848:	10800a17 	ldw	r2,40(r2)
   2584c:	10800504 	addi	r2,r2,20
   25850:	10800023 	ldbuio	r2,0(r2)
   25854:	10803fcc 	andi	r2,r2,255
   25858:	10803fcc 	andi	r2,r2,255
   2585c:	1004923a 	slli	r2,r2,8
   25860:	1007883a 	mov	r3,r2
   25864:	d0a03817 	ldw	r2,-32544(gp)
   25868:	10800a17 	ldw	r2,40(r2)
   2586c:	108004c4 	addi	r2,r2,19
   25870:	10800023 	ldbuio	r2,0(r2)
   25874:	10803fcc 	andi	r2,r2,255
   25878:	10803fcc 	andi	r2,r2,255
   2587c:	1884b03a 	or	r2,r3,r2
   25880:	1007883a 	mov	r3,r2
   25884:	00820034 	movhi	r2,2048
   25888:	1086c404 	addi	r2,r2,6928
   2588c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
   25890:	d0a03817 	ldw	r2,-32544(gp)
   25894:	10800a17 	ldw	r2,40(r2)
   25898:	10800544 	addi	r2,r2,21
   2589c:	10800023 	ldbuio	r2,0(r2)
   258a0:	10803fcc 	andi	r2,r2,255
   258a4:	1007883a 	mov	r3,r2
   258a8:	00820034 	movhi	r2,2048
   258ac:	1086c404 	addi	r2,r2,6928
   258b0:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
   258b4:	d0a03817 	ldw	r2,-32544(gp)
   258b8:	10800a17 	ldw	r2,40(r2)
   258bc:	10800584 	addi	r2,r2,22
   258c0:	1080002b 	ldhuio	r2,0(r2)
   258c4:	10bfffcc 	andi	r2,r2,65535
   258c8:	1007883a 	mov	r3,r2
   258cc:	00820034 	movhi	r2,2048
   258d0:	1086c404 	addi	r2,r2,6928
   258d4:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
   258d8:	d0a03817 	ldw	r2,-32544(gp)
   258dc:	10800a17 	ldw	r2,40(r2)
   258e0:	10800604 	addi	r2,r2,24
   258e4:	1080002b 	ldhuio	r2,0(r2)
   258e8:	10bfffcc 	andi	r2,r2,65535
   258ec:	1007883a 	mov	r3,r2
   258f0:	00820034 	movhi	r2,2048
   258f4:	1086c404 	addi	r2,r2,6928
   258f8:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
   258fc:	d0a03817 	ldw	r2,-32544(gp)
   25900:	10800a17 	ldw	r2,40(r2)
   25904:	10800684 	addi	r2,r2,26
   25908:	1080002b 	ldhuio	r2,0(r2)
   2590c:	10bfffcc 	andi	r2,r2,65535
   25910:	1007883a 	mov	r3,r2
   25914:	00820034 	movhi	r2,2048
   25918:	1086c404 	addi	r2,r2,6928
   2591c:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
   25920:	d0a03817 	ldw	r2,-32544(gp)
   25924:	10800a17 	ldw	r2,40(r2)
   25928:	10800704 	addi	r2,r2,28
   2592c:	10800037 	ldwio	r2,0(r2)
   25930:	1007883a 	mov	r3,r2
   25934:	00820034 	movhi	r2,2048
   25938:	1086c404 	addi	r2,r2,6928
   2593c:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
   25940:	d0a03817 	ldw	r2,-32544(gp)
   25944:	10800a17 	ldw	r2,40(r2)
   25948:	10800804 	addi	r2,r2,32
   2594c:	10800037 	ldwio	r2,0(r2)
   25950:	1007883a 	mov	r3,r2
   25954:	00820034 	movhi	r2,2048
   25958:	1086c404 	addi	r2,r2,6928
   2595c:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
   25960:	d0a03817 	ldw	r2,-32544(gp)
   25964:	10800a17 	ldw	r2,40(r2)
   25968:	10800904 	addi	r2,r2,36
   2596c:	10800023 	ldbuio	r2,0(r2)
   25970:	10803fcc 	andi	r2,r2,255
   25974:	1007883a 	mov	r3,r2
   25978:	00820034 	movhi	r2,2048
   2597c:	1086c404 	addi	r2,r2,6928
   25980:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
   25984:	d0a03817 	ldw	r2,-32544(gp)
   25988:	10800a17 	ldw	r2,40(r2)
   2598c:	10800944 	addi	r2,r2,37
   25990:	10800023 	ldbuio	r2,0(r2)
   25994:	10803fcc 	andi	r2,r2,255
   25998:	1007883a 	mov	r3,r2
   2599c:	00820034 	movhi	r2,2048
   259a0:	1086c404 	addi	r2,r2,6928
   259a4:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
   259a8:	d0a03817 	ldw	r2,-32544(gp)
   259ac:	10800a17 	ldw	r2,40(r2)
   259b0:	10800984 	addi	r2,r2,38
   259b4:	10800023 	ldbuio	r2,0(r2)
   259b8:	10803fcc 	andi	r2,r2,255
   259bc:	1007883a 	mov	r3,r2
   259c0:	00820034 	movhi	r2,2048
   259c4:	1086c404 	addi	r2,r2,6928
   259c8:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   259cc:	00820034 	movhi	r2,2048
   259d0:	1086c404 	addi	r2,r2,6928
   259d4:	1080040b 	ldhu	r2,16(r2)
   259d8:	10ffffcc 	andi	r3,r2,65535
   259dc:	00820034 	movhi	r2,2048
   259e0:	1086c404 	addi	r2,r2,6928
   259e4:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   259e8:	00820034 	movhi	r2,2048
   259ec:	1086c404 	addi	r2,r2,6928
   259f0:	10c01117 	ldw	r3,68(r2)
   259f4:	00820034 	movhi	r2,2048
   259f8:	1086c404 	addi	r2,r2,6928
   259fc:	1080068b 	ldhu	r2,26(r2)
   25a00:	10bfffcc 	andi	r2,r2,65535
   25a04:	1887883a 	add	r3,r3,r2
   25a08:	00820034 	movhi	r2,2048
   25a0c:	1086c404 	addi	r2,r2,6928
   25a10:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   25a14:	00820034 	movhi	r2,2048
   25a18:	1086c404 	addi	r2,r2,6928
   25a1c:	10c01217 	ldw	r3,72(r2)
   25a20:	00820034 	movhi	r2,2048
   25a24:	1086c404 	addi	r2,r2,6928
   25a28:	1080068b 	ldhu	r2,26(r2)
   25a2c:	10bfffcc 	andi	r2,r2,65535
   25a30:	1887883a 	add	r3,r3,r2
   25a34:	00820034 	movhi	r2,2048
   25a38:	1086c404 	addi	r2,r2,6928
   25a3c:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   25a40:	00820034 	movhi	r2,2048
   25a44:	1086c404 	addi	r2,r2,6928
   25a48:	14001317 	ldw	r16,76(r2)
   25a4c:	00820034 	movhi	r2,2048
   25a50:	1086c404 	addi	r2,r2,6928
   25a54:	1080050b 	ldhu	r2,20(r2)
   25a58:	10bfffcc 	andi	r2,r2,65535
   25a5c:	1006917a 	slli	r3,r2,5
   25a60:	00820034 	movhi	r2,2048
   25a64:	1086c404 	addi	r2,r2,6928
   25a68:	1080030b 	ldhu	r2,12(r2)
   25a6c:	10bfffcc 	andi	r2,r2,65535
   25a70:	1809883a 	mov	r4,r3
   25a74:	100b883a 	mov	r5,r2
   25a78:	002429c0 	call	2429c <__divsi3>
   25a7c:	8087883a 	add	r3,r16,r2
   25a80:	00820034 	movhi	r2,2048
   25a84:	1086c404 	addi	r2,r2,6928
   25a88:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
   25a8c:	00820034 	movhi	r2,2048
   25a90:	1086c404 	addi	r2,r2,6928
   25a94:	1080058b 	ldhu	r2,22(r2)
   25a98:	10bfffcc 	andi	r2,r2,65535
   25a9c:	10000d26 	beq	r2,zero,25ad4 <Check_for_DOS_FAT+0x4bc>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
   25aa0:	00820034 	movhi	r2,2048
   25aa4:	1086c404 	addi	r2,r2,6928
   25aa8:	1080058b 	ldhu	r2,22(r2)
   25aac:	10ffffcc 	andi	r3,r2,65535
   25ab0:	00820034 	movhi	r2,2048
   25ab4:	1086c404 	addi	r2,r2,6928
   25ab8:	10800383 	ldbu	r2,14(r2)
   25abc:	10803fcc 	andi	r2,r2,255
   25ac0:	1809883a 	mov	r4,r3
   25ac4:	100b883a 	mov	r5,r2
   25ac8:	002429c0 	call	2429c <__divsi3>
   25acc:	e0bffc15 	stw	r2,-16(fp)
   25ad0:	00000b06 	br	25b00 <Check_for_DOS_FAT+0x4e8>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
   25ad4:	00820034 	movhi	r2,2048
   25ad8:	1086c404 	addi	r2,r2,6928
   25adc:	10c00917 	ldw	r3,36(r2)
   25ae0:	00820034 	movhi	r2,2048
   25ae4:	1086c404 	addi	r2,r2,6928
   25ae8:	10800383 	ldbu	r2,14(r2)
   25aec:	10803fcc 	andi	r2,r2,255
   25af0:	1809883a 	mov	r4,r3
   25af4:	100b883a 	mov	r5,r2
   25af8:	002434c0 	call	2434c <__udivsi3>
   25afc:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
   25b00:	e0bffc17 	ldw	r2,-16(fp)
   25b04:	1083fdc8 	cmpgei	r2,r2,4087
   25b08:	1000051e 	bne	r2,zero,25b20 <Check_for_DOS_FAT+0x508>
		{
			boot_sector_data.bits_for_cluster_index = 12;
   25b0c:	00820034 	movhi	r2,2048
   25b10:	1086c404 	addi	r2,r2,6928
   25b14:	00c00304 	movi	r3,12
   25b18:	10c01085 	stb	r3,66(r2)
   25b1c:	00000c06 	br	25b50 <Check_for_DOS_FAT+0x538>
		}
		else if (num_clusters <= 65517)
   25b20:	e0bffc17 	ldw	r2,-16(fp)
   25b24:	00fffb54 	movui	r3,65517
   25b28:	18800516 	blt	r3,r2,25b40 <Check_for_DOS_FAT+0x528>
		{
			boot_sector_data.bits_for_cluster_index = 16;
   25b2c:	00820034 	movhi	r2,2048
   25b30:	1086c404 	addi	r2,r2,6928
   25b34:	00c00404 	movi	r3,16
   25b38:	10c01085 	stb	r3,66(r2)
   25b3c:	00000406 	br	25b50 <Check_for_DOS_FAT+0x538>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
   25b40:	00820034 	movhi	r2,2048
   25b44:	1086c404 	addi	r2,r2,6928
   25b48:	00c00804 	movi	r3,32
   25b4c:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
   25b50:	e03ffb15 	stw	zero,-20(fp)
   25b54:	00001106 	br	25b9c <Check_for_DOS_FAT+0x584>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
   25b58:	d0a03817 	ldw	r2,-32544(gp)
   25b5c:	10c00a17 	ldw	r3,40(r2)
   25b60:	e0bffb17 	ldw	r2,-20(fp)
   25b64:	1885883a 	add	r2,r3,r2
   25b68:	108009c4 	addi	r2,r2,39
   25b6c:	10800023 	ldbuio	r2,0(r2)
   25b70:	10803fcc 	andi	r2,r2,255
   25b74:	1009883a 	mov	r4,r2
   25b78:	00820034 	movhi	r2,2048
   25b7c:	1086c404 	addi	r2,r2,6928
   25b80:	e0fffb17 	ldw	r3,-20(fp)
   25b84:	10c5883a 	add	r2,r2,r3
   25b88:	10800a04 	addi	r2,r2,40
   25b8c:	110000c5 	stb	r4,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
   25b90:	e0bffb17 	ldw	r2,-20(fp)
   25b94:	10800044 	addi	r2,r2,1
   25b98:	e0bffb15 	stw	r2,-20(fp)
   25b9c:	e0bffb17 	ldw	r2,-20(fp)
   25ba0:	10800110 	cmplti	r2,r2,4
   25ba4:	103fec1e 	bne	r2,zero,25b58 <__alt_data_end+0xf4025b58>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   25ba8:	e03ffb15 	stw	zero,-20(fp)
   25bac:	00001106 	br	25bf4 <Check_for_DOS_FAT+0x5dc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
   25bb0:	d0a03817 	ldw	r2,-32544(gp)
   25bb4:	10c00a17 	ldw	r3,40(r2)
   25bb8:	e0bffb17 	ldw	r2,-20(fp)
   25bbc:	1885883a 	add	r2,r3,r2
   25bc0:	10800ac4 	addi	r2,r2,43
   25bc4:	10800023 	ldbuio	r2,0(r2)
   25bc8:	10803fcc 	andi	r2,r2,255
   25bcc:	1009883a 	mov	r4,r2
   25bd0:	00820034 	movhi	r2,2048
   25bd4:	1086c404 	addi	r2,r2,6928
   25bd8:	e0fffb17 	ldw	r3,-20(fp)
   25bdc:	10c5883a 	add	r2,r2,r3
   25be0:	10800b04 	addi	r2,r2,44
   25be4:	110000c5 	stb	r4,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   25be8:	e0bffb17 	ldw	r2,-20(fp)
   25bec:	10800044 	addi	r2,r2,1
   25bf0:	e0bffb15 	stw	r2,-20(fp)
   25bf4:	e0bffb17 	ldw	r2,-20(fp)
   25bf8:	108002d0 	cmplti	r2,r2,11
   25bfc:	103fec1e 	bne	r2,zero,25bb0 <__alt_data_end+0xf4025bb0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   25c00:	e03ffb15 	stw	zero,-20(fp)
   25c04:	00001106 	br	25c4c <Check_for_DOS_FAT+0x634>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
   25c08:	d0a03817 	ldw	r2,-32544(gp)
   25c0c:	10c00a17 	ldw	r3,40(r2)
   25c10:	e0bffb17 	ldw	r2,-20(fp)
   25c14:	1885883a 	add	r2,r3,r2
   25c18:	10800d84 	addi	r2,r2,54
   25c1c:	10800023 	ldbuio	r2,0(r2)
   25c20:	10803fcc 	andi	r2,r2,255
   25c24:	1009883a 	mov	r4,r2
   25c28:	00820034 	movhi	r2,2048
   25c2c:	1086c404 	addi	r2,r2,6928
   25c30:	e0fffb17 	ldw	r3,-20(fp)
   25c34:	10c5883a 	add	r2,r2,r3
   25c38:	10800e04 	addi	r2,r2,56
   25c3c:	11000085 	stb	r4,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   25c40:	e0bffb17 	ldw	r2,-20(fp)
   25c44:	10800044 	addi	r2,r2,1
   25c48:	e0bffb15 	stw	r2,-20(fp)
   25c4c:	e0bffb17 	ldw	r2,-20(fp)
   25c50:	10800210 	cmplti	r2,r2,8
   25c54:	103fec1e 	bne	r2,zero,25c08 <__alt_data_end+0xf4025c08>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   25c58:	e03ffb15 	stw	zero,-20(fp)
   25c5c:	00000a06 	br	25c88 <Check_for_DOS_FAT+0x670>
		{
			active_files[counter].in_use = false;
   25c60:	00820034 	movhi	r2,2048
   25c64:	1086d904 	addi	r2,r2,7012
   25c68:	e0fffb17 	ldw	r3,-20(fp)
   25c6c:	180691ba 	slli	r3,r3,6
   25c70:	10c5883a 	add	r2,r2,r3
   25c74:	10800f04 	addi	r2,r2,60
   25c78:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   25c7c:	e0bffb17 	ldw	r2,-20(fp)
   25c80:	10800044 	addi	r2,r2,1
   25c84:	e0bffb15 	stw	r2,-20(fp)
   25c88:	e0bffb17 	ldw	r2,-20(fp)
   25c8c:	10800510 	cmplti	r2,r2,20
   25c90:	103ff31e 	bne	r2,zero,25c60 <__alt_data_end+0xf4025c60>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   25c94:	00800044 	movi	r2,1
   25c98:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
   25c9c:	00000106 	br	25ca4 <Check_for_DOS_FAT+0x68c>
		}
		result = true;
	}
    else
    {
        result = false;
   25ca0:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
   25ca4:	e0bffa17 	ldw	r2,-24(fp)
}
   25ca8:	e6ffff04 	addi	sp,fp,-4
   25cac:	dfc00217 	ldw	ra,8(sp)
   25cb0:	df000117 	ldw	fp,4(sp)
   25cb4:	dc000017 	ldw	r16,0(sp)
   25cb8:	dec00304 	addi	sp,sp,12
   25cbc:	f800283a 	ret

00025cc0 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   25cc0:	defffc04 	addi	sp,sp,-16
   25cc4:	dfc00315 	stw	ra,12(sp)
   25cc8:	df000215 	stw	fp,8(sp)
   25ccc:	df000204 	addi	fp,sp,8
	bool result = false;
   25cd0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
   25cd4:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   25cd8:	10002e26 	beq	r2,zero,25d94 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
   25cdc:	d0a03217 	ldw	r2,-32568(gp)
   25ce0:	1080000b 	ldhu	r2,0(r2)
   25ce4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   25ce8:	d0203615 	stw	zero,-32552(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   25cec:	d0203715 	stw	zero,-32548(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   25cf0:	e0bfff0f 	ldh	r2,-4(fp)
   25cf4:	10002716 	blt	r2,zero,25d94 <Look_for_FAT16+0xd4>
   25cf8:	e0bfff0b 	ldhu	r2,-4(fp)
   25cfc:	10bfffcc 	andi	r2,r2,65535
   25d00:	1083000c 	andi	r2,r2,3072
   25d04:	10830020 	cmpeqi	r2,r2,3072
   25d08:	1000221e 	bne	r2,zero,25d94 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   25d0c:	e0bfff0b 	ldhu	r2,-4(fp)
   25d10:	10bfffcc 	andi	r2,r2,65535
   25d14:	1083000c 	andi	r2,r2,3072
   25d18:	10810018 	cmpnei	r2,r2,1024
   25d1c:	1000031e 	bne	r2,zero,25d2c <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   25d20:	0009883a 	mov	r4,zero
   25d24:	00256180 	call	25618 <Check_for_DOS_FAT>
   25d28:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   25d2c:	e0bfff0b 	ldhu	r2,-4(fp)
   25d30:	10bfffcc 	andi	r2,r2,65535
   25d34:	1083000c 	andi	r2,r2,3072
   25d38:	1000061e 	bne	r2,zero,25d54 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   25d3c:	0024f640 	call	24f64 <Check_for_Master_Boot_Record>
   25d40:	10000426 	beq	r2,zero,25d54 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   25d44:	d0a03617 	ldw	r2,-32552(gp)
   25d48:	1009883a 	mov	r4,r2
   25d4c:	00256180 	call	25618 <Check_for_DOS_FAT>
   25d50:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
   25d54:	e0bffe17 	ldw	r2,-8(fp)
   25d58:	10800058 	cmpnei	r2,r2,1
   25d5c:	10000d1e 	bne	r2,zero,25d94 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
   25d60:	00820034 	movhi	r2,2048
   25d64:	1086c404 	addi	r2,r2,6928
   25d68:	10801083 	ldbu	r2,66(r2)
   25d6c:	10803fcc 	andi	r2,r2,255
   25d70:	10800420 	cmpeqi	r2,r2,16
   25d74:	1000021e 	bne	r2,zero,25d80 <Look_for_FAT16+0xc0>
				{
					result = false;
   25d78:	e03ffe15 	stw	zero,-8(fp)
   25d7c:	00000506 	br	25d94 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   25d80:	00820034 	movhi	r2,2048
   25d84:	1086c404 	addi	r2,r2,6928
   25d88:	1080058b 	ldhu	r2,22(r2)
   25d8c:	10bfffcc 	andi	r2,r2,65535
   25d90:	d0a03715 	stw	r2,-32548(gp)
				}
			}
		}
	}
	return result;
   25d94:	e0bffe17 	ldw	r2,-8(fp)
}
   25d98:	e037883a 	mov	sp,fp
   25d9c:	dfc00117 	ldw	ra,4(sp)
   25da0:	df000017 	ldw	fp,0(sp)
   25da4:	dec00204 	addi	sp,sp,8
   25da8:	f800283a 	ret

00025dac <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   25dac:	defffb04 	addi	sp,sp,-20
   25db0:	dfc00415 	stw	ra,16(sp)
   25db4:	df000315 	stw	fp,12(sp)
   25db8:	df000304 	addi	fp,sp,12
   25dbc:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   25dc0:	e13fff17 	ldw	r4,-4(fp)
   25dc4:	00236bc0 	call	236bc <strlen>
   25dc8:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
   25dcc:	e03ffd15 	stw	zero,-12(fp)
   25dd0:	00001e06 	br	25e4c <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   25dd4:	e0bffd17 	ldw	r2,-12(fp)
   25dd8:	e0ffff17 	ldw	r3,-4(fp)
   25ddc:	1885883a 	add	r2,r3,r2
   25de0:	10800003 	ldbu	r2,0(r2)
   25de4:	10803fcc 	andi	r2,r2,255
   25de8:	1080201c 	xori	r2,r2,128
   25dec:	10bfe004 	addi	r2,r2,-128
   25df0:	10801850 	cmplti	r2,r2,97
   25df4:	1000121e 	bne	r2,zero,25e40 <filename_to_upper_case+0x94>
   25df8:	e0bffd17 	ldw	r2,-12(fp)
   25dfc:	e0ffff17 	ldw	r3,-4(fp)
   25e00:	1885883a 	add	r2,r3,r2
   25e04:	10800003 	ldbu	r2,0(r2)
   25e08:	10803fcc 	andi	r2,r2,255
   25e0c:	1080201c 	xori	r2,r2,128
   25e10:	10bfe004 	addi	r2,r2,-128
   25e14:	10801ec8 	cmpgei	r2,r2,123
   25e18:	1000091e 	bne	r2,zero,25e40 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   25e1c:	e0bffd17 	ldw	r2,-12(fp)
   25e20:	e0ffff17 	ldw	r3,-4(fp)
   25e24:	1885883a 	add	r2,r3,r2
   25e28:	e0fffd17 	ldw	r3,-12(fp)
   25e2c:	e13fff17 	ldw	r4,-4(fp)
   25e30:	20c7883a 	add	r3,r4,r3
   25e34:	18c00003 	ldbu	r3,0(r3)
   25e38:	18fff804 	addi	r3,r3,-32
   25e3c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   25e40:	e0bffd17 	ldw	r2,-12(fp)
   25e44:	10800044 	addi	r2,r2,1
   25e48:	e0bffd15 	stw	r2,-12(fp)
   25e4c:	e0fffd17 	ldw	r3,-12(fp)
   25e50:	e0bffe17 	ldw	r2,-8(fp)
   25e54:	18bfdf16 	blt	r3,r2,25dd4 <__alt_data_end+0xf4025dd4>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   25e58:	e037883a 	mov	sp,fp
   25e5c:	dfc00117 	ldw	ra,4(sp)
   25e60:	df000017 	ldw	fp,0(sp)
   25e64:	dec00204 	addi	sp,sp,8
   25e68:	f800283a 	ret

00025e6c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   25e6c:	defff804 	addi	sp,sp,-32
   25e70:	dfc00715 	stw	ra,28(sp)
   25e74:	df000615 	stw	fp,24(sp)
   25e78:	df000604 	addi	fp,sp,24
   25e7c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   25e80:	e13fff17 	ldw	r4,-4(fp)
   25e84:	00236bc0 	call	236bc <strlen>
   25e88:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   25e8c:	00bfffc4 	movi	r2,-1
   25e90:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
   25e94:	00bfffc4 	movi	r2,-1
   25e98:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
   25e9c:	00800044 	movi	r2,1
   25ea0:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   25ea4:	e03ffa15 	stw	zero,-24(fp)
   25ea8:	00006d06 	br	26060 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
   25eac:	e0bffa17 	ldw	r2,-24(fp)
   25eb0:	e0ffff17 	ldw	r3,-4(fp)
   25eb4:	1885883a 	add	r2,r3,r2
   25eb8:	10800003 	ldbu	r2,0(r2)
   25ebc:	10803fcc 	andi	r2,r2,255
   25ec0:	1080201c 	xori	r2,r2,128
   25ec4:	10bfe004 	addi	r2,r2,-128
   25ec8:	10800820 	cmpeqi	r2,r2,32
   25ecc:	10003e1e 	bne	r2,zero,25fc8 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   25ed0:	e0bffa17 	ldw	r2,-24(fp)
   25ed4:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
   25ed8:	e0bffb17 	ldw	r2,-20(fp)
   25edc:	1880121e 	bne	r3,r2,25f28 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   25ee0:	e0bffa17 	ldw	r2,-24(fp)
   25ee4:	e0ffff17 	ldw	r3,-4(fp)
   25ee8:	1885883a 	add	r2,r3,r2
   25eec:	10800003 	ldbu	r2,0(r2)
   25ef0:	10803fcc 	andi	r2,r2,255
   25ef4:	1080201c 	xori	r2,r2,128
   25ef8:	10bfe004 	addi	r2,r2,-128
   25efc:	10801720 	cmpeqi	r2,r2,92
   25f00:	1000311e 	bne	r2,zero,25fc8 <check_file_name_for_FAT16_compliance+0x15c>
   25f04:	e0bffa17 	ldw	r2,-24(fp)
   25f08:	e0ffff17 	ldw	r3,-4(fp)
   25f0c:	1885883a 	add	r2,r3,r2
   25f10:	10800003 	ldbu	r2,0(r2)
   25f14:	10803fcc 	andi	r2,r2,255
   25f18:	1080201c 	xori	r2,r2,128
   25f1c:	10bfe004 	addi	r2,r2,-128
   25f20:	10800be0 	cmpeqi	r2,r2,47
   25f24:	1000281e 	bne	r2,zero,25fc8 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   25f28:	e0fffa17 	ldw	r3,-24(fp)
   25f2c:	e0bffc17 	ldw	r2,-16(fp)
   25f30:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
   25f34:	10800258 	cmpnei	r2,r2,9
   25f38:	1000091e 	bne	r2,zero,25f60 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
   25f3c:	e0bffa17 	ldw	r2,-24(fp)
   25f40:	e0ffff17 	ldw	r3,-4(fp)
   25f44:	1885883a 	add	r2,r3,r2
   25f48:	10800003 	ldbu	r2,0(r2)
   25f4c:	10803fcc 	andi	r2,r2,255
   25f50:	1080201c 	xori	r2,r2,128
   25f54:	10bfe004 	addi	r2,r2,-128
   25f58:	10800b98 	cmpnei	r2,r2,46
   25f5c:	10001a1e 	bne	r2,zero,25fc8 <check_file_name_for_FAT16_compliance+0x15c>
   25f60:	e0fffb17 	ldw	r3,-20(fp)
   25f64:	e0bffc17 	ldw	r2,-16(fp)
   25f68:	18801926 	beq	r3,r2,25fd0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   25f6c:	e0fffa17 	ldw	r3,-24(fp)
   25f70:	e0bffc17 	ldw	r2,-16(fp)
   25f74:	1885c83a 	sub	r2,r3,r2
   25f78:	10800110 	cmplti	r2,r2,4
   25f7c:	1000141e 	bne	r2,zero,25fd0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   25f80:	e0bffa17 	ldw	r2,-24(fp)
   25f84:	e0ffff17 	ldw	r3,-4(fp)
   25f88:	1885883a 	add	r2,r3,r2
   25f8c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
   25f90:	10803fcc 	andi	r2,r2,255
   25f94:	1080201c 	xori	r2,r2,128
   25f98:	10bfe004 	addi	r2,r2,-128
   25f9c:	10801720 	cmpeqi	r2,r2,92
   25fa0:	10000b1e 	bne	r2,zero,25fd0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
   25fa4:	e0bffa17 	ldw	r2,-24(fp)
   25fa8:	e0ffff17 	ldw	r3,-4(fp)
   25fac:	1885883a 	add	r2,r3,r2
   25fb0:	10800003 	ldbu	r2,0(r2)
   25fb4:	10803fcc 	andi	r2,r2,255
   25fb8:	1080201c 	xori	r2,r2,128
   25fbc:	10bfe004 	addi	r2,r2,-128
   25fc0:	10800be0 	cmpeqi	r2,r2,47
   25fc4:	1000021e 	bne	r2,zero,25fd0 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
   25fc8:	e03ffd15 	stw	zero,-12(fp)
            break;
   25fcc:	00002706 	br	2606c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   25fd0:	e0bffa17 	ldw	r2,-24(fp)
   25fd4:	e0ffff17 	ldw	r3,-4(fp)
   25fd8:	1885883a 	add	r2,r3,r2
   25fdc:	10800003 	ldbu	r2,0(r2)
   25fe0:	10803fcc 	andi	r2,r2,255
   25fe4:	1080201c 	xori	r2,r2,128
   25fe8:	10bfe004 	addi	r2,r2,-128
   25fec:	10801720 	cmpeqi	r2,r2,92
   25ff0:	1000091e 	bne	r2,zero,26018 <check_file_name_for_FAT16_compliance+0x1ac>
   25ff4:	e0bffa17 	ldw	r2,-24(fp)
   25ff8:	e0ffff17 	ldw	r3,-4(fp)
   25ffc:	1885883a 	add	r2,r3,r2
   26000:	10800003 	ldbu	r2,0(r2)
   26004:	10803fcc 	andi	r2,r2,255
   26008:	1080201c 	xori	r2,r2,128
   2600c:	10bfe004 	addi	r2,r2,-128
   26010:	10800bd8 	cmpnei	r2,r2,47
   26014:	1000041e 	bne	r2,zero,26028 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
   26018:	e0bffa17 	ldw	r2,-24(fp)
   2601c:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
   26020:	e0bffa17 	ldw	r2,-24(fp)
   26024:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
   26028:	e0bffa17 	ldw	r2,-24(fp)
   2602c:	e0ffff17 	ldw	r3,-4(fp)
   26030:	1885883a 	add	r2,r3,r2
   26034:	10800003 	ldbu	r2,0(r2)
   26038:	10803fcc 	andi	r2,r2,255
   2603c:	1080201c 	xori	r2,r2,128
   26040:	10bfe004 	addi	r2,r2,-128
   26044:	10800b98 	cmpnei	r2,r2,46
   26048:	1000021e 	bne	r2,zero,26054 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
   2604c:	e0bffa17 	ldw	r2,-24(fp)
   26050:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   26054:	e0bffa17 	ldw	r2,-24(fp)
   26058:	10800044 	addi	r2,r2,1
   2605c:	e0bffa15 	stw	r2,-24(fp)
   26060:	e0fffa17 	ldw	r3,-24(fp)
   26064:	e0bffe17 	ldw	r2,-8(fp)
   26068:	18bf9016 	blt	r3,r2,25eac <__alt_data_end+0xf4025eac>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   2606c:	e0bffe17 	ldw	r2,-8(fp)
   26070:	10bfffc4 	addi	r2,r2,-1
   26074:	e0ffff17 	ldw	r3,-4(fp)
   26078:	1885883a 	add	r2,r3,r2
   2607c:	10800003 	ldbu	r2,0(r2)
   26080:	10803fcc 	andi	r2,r2,255
   26084:	1080201c 	xori	r2,r2,128
   26088:	10bfe004 	addi	r2,r2,-128
   2608c:	10801720 	cmpeqi	r2,r2,92
   26090:	10000a1e 	bne	r2,zero,260bc <check_file_name_for_FAT16_compliance+0x250>
   26094:	e0bffe17 	ldw	r2,-8(fp)
   26098:	10bfffc4 	addi	r2,r2,-1
   2609c:	e0ffff17 	ldw	r3,-4(fp)
   260a0:	1885883a 	add	r2,r3,r2
   260a4:	10800003 	ldbu	r2,0(r2)
   260a8:	10803fcc 	andi	r2,r2,255
   260ac:	1080201c 	xori	r2,r2,128
   260b0:	10bfe004 	addi	r2,r2,-128
   260b4:	10800bd8 	cmpnei	r2,r2,47
   260b8:	1000011e 	bne	r2,zero,260c0 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
   260bc:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
   260c0:	e0bffd17 	ldw	r2,-12(fp)
}
   260c4:	e037883a 	mov	sp,fp
   260c8:	dfc00117 	ldw	ra,4(sp)
   260cc:	df000017 	ldw	fp,0(sp)
   260d0:	dec00204 	addi	sp,sp,8
   260d4:	f800283a 	ret

000260d8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   260d8:	defffb04 	addi	sp,sp,-20
   260dc:	dfc00415 	stw	ra,16(sp)
   260e0:	df000315 	stw	fp,12(sp)
   260e4:	df000304 	addi	fp,sp,12
   260e8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   260ec:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
   260f0:	e13fff17 	ldw	r4,-4(fp)
   260f4:	00236bc0 	call	236bc <strlen>
   260f8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
   260fc:	e03ffd15 	stw	zero,-12(fp)
   26100:	00001506 	br	26158 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   26104:	e0bffd17 	ldw	r2,-12(fp)
   26108:	e0ffff17 	ldw	r3,-4(fp)
   2610c:	1885883a 	add	r2,r3,r2
   26110:	10800003 	ldbu	r2,0(r2)
   26114:	10803fcc 	andi	r2,r2,255
   26118:	1080201c 	xori	r2,r2,128
   2611c:	10bfe004 	addi	r2,r2,-128
   26120:	10801720 	cmpeqi	r2,r2,92
   26124:	10000f1e 	bne	r2,zero,26164 <get_dir_divider_location+0x8c>
   26128:	e0bffd17 	ldw	r2,-12(fp)
   2612c:	e0ffff17 	ldw	r3,-4(fp)
   26130:	1885883a 	add	r2,r3,r2
   26134:	10800003 	ldbu	r2,0(r2)
   26138:	10803fcc 	andi	r2,r2,255
   2613c:	1080201c 	xori	r2,r2,128
   26140:	10bfe004 	addi	r2,r2,-128
   26144:	10800be0 	cmpeqi	r2,r2,47
   26148:	1000061e 	bne	r2,zero,26164 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   2614c:	e0bffd17 	ldw	r2,-12(fp)
   26150:	10800044 	addi	r2,r2,1
   26154:	e0bffd15 	stw	r2,-12(fp)
   26158:	e0fffd17 	ldw	r3,-12(fp)
   2615c:	e0bffe17 	ldw	r2,-8(fp)
   26160:	18bfe816 	blt	r3,r2,26104 <__alt_data_end+0xf4026104>
        {
            break;
        }
    }
    
    if (index == length)
   26164:	e0fffd17 	ldw	r3,-12(fp)
   26168:	e0bffe17 	ldw	r2,-8(fp)
   2616c:	1880021e 	bne	r3,r2,26178 <get_dir_divider_location+0xa0>
    {
        index = -1;
   26170:	00bfffc4 	movi	r2,-1
   26174:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
   26178:	e0bffd17 	ldw	r2,-12(fp)
}
   2617c:	e037883a 	mov	sp,fp
   26180:	dfc00117 	ldw	ra,4(sp)
   26184:	df000017 	ldw	fp,0(sp)
   26188:	dec00204 	addi	sp,sp,8
   2618c:	f800283a 	ret

00026190 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   26190:	defffa04 	addi	sp,sp,-24
   26194:	df000515 	stw	fp,20(sp)
   26198:	df000504 	addi	fp,sp,20
   2619c:	e13ffd15 	stw	r4,-12(fp)
   261a0:	e17ffe15 	stw	r5,-8(fp)
   261a4:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
   261a8:	00800044 	movi	r2,1
   261ac:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
   261b0:	e03ffc15 	stw	zero,-16(fp)
   261b4:	00004606 	br	262d0 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   261b8:	e0fffd17 	ldw	r3,-12(fp)
   261bc:	e0bffc17 	ldw	r2,-16(fp)
   261c0:	1885883a 	add	r2,r3,r2
   261c4:	10800003 	ldbu	r2,0(r2)
   261c8:	10803fcc 	andi	r2,r2,255
   261cc:	10801870 	cmpltui	r2,r2,97
   261d0:	1000101e 	bne	r2,zero,26214 <match_file_record_to_name_ext+0x84>
   261d4:	e0fffd17 	ldw	r3,-12(fp)
   261d8:	e0bffc17 	ldw	r2,-16(fp)
   261dc:	1885883a 	add	r2,r3,r2
   261e0:	10800003 	ldbu	r2,0(r2)
   261e4:	10803fcc 	andi	r2,r2,255
   261e8:	10801ee8 	cmpgeui	r2,r2,123
   261ec:	1000091e 	bne	r2,zero,26214 <match_file_record_to_name_ext+0x84>
   261f0:	e0fffd17 	ldw	r3,-12(fp)
   261f4:	e0bffc17 	ldw	r2,-16(fp)
   261f8:	1885883a 	add	r2,r3,r2
   261fc:	10800003 	ldbu	r2,0(r2)
   26200:	10bff804 	addi	r2,r2,-32
   26204:	10c03fcc 	andi	r3,r2,255
   26208:	18c0201c 	xori	r3,r3,128
   2620c:	18ffe004 	addi	r3,r3,-128
   26210:	00000706 	br	26230 <match_file_record_to_name_ext+0xa0>
   26214:	e0fffd17 	ldw	r3,-12(fp)
   26218:	e0bffc17 	ldw	r2,-16(fp)
   2621c:	1885883a 	add	r2,r3,r2
   26220:	10800003 	ldbu	r2,0(r2)
   26224:	10c03fcc 	andi	r3,r2,255
   26228:	18c0201c 	xori	r3,r3,128
   2622c:	18ffe004 	addi	r3,r3,-128
   26230:	e0bffc17 	ldw	r2,-16(fp)
   26234:	e13ffe17 	ldw	r4,-8(fp)
   26238:	2085883a 	add	r2,r4,r2
   2623c:	10800003 	ldbu	r2,0(r2)
   26240:	10803fcc 	andi	r2,r2,255
   26244:	1080201c 	xori	r2,r2,128
   26248:	10bfe004 	addi	r2,r2,-128
   2624c:	10801850 	cmplti	r2,r2,97
   26250:	1000121e 	bne	r2,zero,2629c <match_file_record_to_name_ext+0x10c>
   26254:	e0bffc17 	ldw	r2,-16(fp)
   26258:	e13ffe17 	ldw	r4,-8(fp)
   2625c:	2085883a 	add	r2,r4,r2
   26260:	10800003 	ldbu	r2,0(r2)
   26264:	10803fcc 	andi	r2,r2,255
   26268:	1080201c 	xori	r2,r2,128
   2626c:	10bfe004 	addi	r2,r2,-128
   26270:	10801ec8 	cmpgei	r2,r2,123
   26274:	1000091e 	bne	r2,zero,2629c <match_file_record_to_name_ext+0x10c>
   26278:	e0bffc17 	ldw	r2,-16(fp)
   2627c:	e13ffe17 	ldw	r4,-8(fp)
   26280:	2085883a 	add	r2,r4,r2
   26284:	10800003 	ldbu	r2,0(r2)
   26288:	10bff804 	addi	r2,r2,-32
   2628c:	10803fcc 	andi	r2,r2,255
   26290:	1080201c 	xori	r2,r2,128
   26294:	10bfe004 	addi	r2,r2,-128
   26298:	00000706 	br	262b8 <match_file_record_to_name_ext+0x128>
   2629c:	e0bffc17 	ldw	r2,-16(fp)
   262a0:	e13ffe17 	ldw	r4,-8(fp)
   262a4:	2085883a 	add	r2,r4,r2
   262a8:	10800003 	ldbu	r2,0(r2)
   262ac:	10803fcc 	andi	r2,r2,255
   262b0:	1080201c 	xori	r2,r2,128
   262b4:	10bfe004 	addi	r2,r2,-128
   262b8:	18800226 	beq	r3,r2,262c4 <match_file_record_to_name_ext+0x134>
        {
            match = false;
   262bc:	e03ffb15 	stw	zero,-20(fp)
			break;
   262c0:	00000606 	br	262dc <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   262c4:	e0bffc17 	ldw	r2,-16(fp)
   262c8:	10800044 	addi	r2,r2,1
   262cc:	e0bffc15 	stw	r2,-16(fp)
   262d0:	e0bffc17 	ldw	r2,-16(fp)
   262d4:	10800210 	cmplti	r2,r2,8
   262d8:	103fb71e 	bne	r2,zero,261b8 <__alt_data_end+0xf40261b8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   262dc:	e03ffc15 	stw	zero,-16(fp)
   262e0:	00004a06 	br	2640c <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   262e4:	e0fffd17 	ldw	r3,-12(fp)
   262e8:	e0bffc17 	ldw	r2,-16(fp)
   262ec:	1885883a 	add	r2,r3,r2
   262f0:	10800204 	addi	r2,r2,8
   262f4:	10800003 	ldbu	r2,0(r2)
   262f8:	10803fcc 	andi	r2,r2,255
   262fc:	10801870 	cmpltui	r2,r2,97
   26300:	1000121e 	bne	r2,zero,2634c <match_file_record_to_name_ext+0x1bc>
   26304:	e0fffd17 	ldw	r3,-12(fp)
   26308:	e0bffc17 	ldw	r2,-16(fp)
   2630c:	1885883a 	add	r2,r3,r2
   26310:	10800204 	addi	r2,r2,8
   26314:	10800003 	ldbu	r2,0(r2)
   26318:	10803fcc 	andi	r2,r2,255
   2631c:	10801ee8 	cmpgeui	r2,r2,123
   26320:	10000a1e 	bne	r2,zero,2634c <match_file_record_to_name_ext+0x1bc>
   26324:	e0fffd17 	ldw	r3,-12(fp)
   26328:	e0bffc17 	ldw	r2,-16(fp)
   2632c:	1885883a 	add	r2,r3,r2
   26330:	10800204 	addi	r2,r2,8
   26334:	10800003 	ldbu	r2,0(r2)
   26338:	10bff804 	addi	r2,r2,-32
   2633c:	10c03fcc 	andi	r3,r2,255
   26340:	18c0201c 	xori	r3,r3,128
   26344:	18ffe004 	addi	r3,r3,-128
   26348:	00000806 	br	2636c <match_file_record_to_name_ext+0x1dc>
   2634c:	e0fffd17 	ldw	r3,-12(fp)
   26350:	e0bffc17 	ldw	r2,-16(fp)
   26354:	1885883a 	add	r2,r3,r2
   26358:	10800204 	addi	r2,r2,8
   2635c:	10800003 	ldbu	r2,0(r2)
   26360:	10c03fcc 	andi	r3,r2,255
   26364:	18c0201c 	xori	r3,r3,128
   26368:	18ffe004 	addi	r3,r3,-128
   2636c:	e0bffc17 	ldw	r2,-16(fp)
   26370:	e13fff17 	ldw	r4,-4(fp)
   26374:	2085883a 	add	r2,r4,r2
   26378:	10800003 	ldbu	r2,0(r2)
   2637c:	10803fcc 	andi	r2,r2,255
   26380:	1080201c 	xori	r2,r2,128
   26384:	10bfe004 	addi	r2,r2,-128
   26388:	10801850 	cmplti	r2,r2,97
   2638c:	1000121e 	bne	r2,zero,263d8 <match_file_record_to_name_ext+0x248>
   26390:	e0bffc17 	ldw	r2,-16(fp)
   26394:	e13fff17 	ldw	r4,-4(fp)
   26398:	2085883a 	add	r2,r4,r2
   2639c:	10800003 	ldbu	r2,0(r2)
   263a0:	10803fcc 	andi	r2,r2,255
   263a4:	1080201c 	xori	r2,r2,128
   263a8:	10bfe004 	addi	r2,r2,-128
   263ac:	10801ec8 	cmpgei	r2,r2,123
   263b0:	1000091e 	bne	r2,zero,263d8 <match_file_record_to_name_ext+0x248>
   263b4:	e0bffc17 	ldw	r2,-16(fp)
   263b8:	e13fff17 	ldw	r4,-4(fp)
   263bc:	2085883a 	add	r2,r4,r2
   263c0:	10800003 	ldbu	r2,0(r2)
   263c4:	10bff804 	addi	r2,r2,-32
   263c8:	10803fcc 	andi	r2,r2,255
   263cc:	1080201c 	xori	r2,r2,128
   263d0:	10bfe004 	addi	r2,r2,-128
   263d4:	00000706 	br	263f4 <match_file_record_to_name_ext+0x264>
   263d8:	e0bffc17 	ldw	r2,-16(fp)
   263dc:	e13fff17 	ldw	r4,-4(fp)
   263e0:	2085883a 	add	r2,r4,r2
   263e4:	10800003 	ldbu	r2,0(r2)
   263e8:	10803fcc 	andi	r2,r2,255
   263ec:	1080201c 	xori	r2,r2,128
   263f0:	10bfe004 	addi	r2,r2,-128
   263f4:	18800226 	beq	r3,r2,26400 <match_file_record_to_name_ext+0x270>
        {
            match = false;
   263f8:	e03ffb15 	stw	zero,-20(fp)
			break;
   263fc:	00000606 	br	26418 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   26400:	e0bffc17 	ldw	r2,-16(fp)
   26404:	10800044 	addi	r2,r2,1
   26408:	e0bffc15 	stw	r2,-16(fp)
   2640c:	e0bffc17 	ldw	r2,-16(fp)
   26410:	108000d0 	cmplti	r2,r2,3
   26414:	103fb31e 	bne	r2,zero,262e4 <__alt_data_end+0xf40262e4>
        {
            match = false;
			break;
        }
    }
	return match;
   26418:	e0bffb17 	ldw	r2,-20(fp)
}
   2641c:	e037883a 	mov	sp,fp
   26420:	df000017 	ldw	fp,0(sp)
   26424:	dec00104 	addi	sp,sp,4
   26428:	f800283a 	ret

0002642c <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   2642c:	deffe704 	addi	sp,sp,-100
   26430:	dfc01815 	stw	ra,96(sp)
   26434:	df001715 	stw	fp,92(sp)
   26438:	df001704 	addi	fp,sp,92
   2643c:	e13ffd15 	stw	r4,-12(fp)
   26440:	e17ffe15 	stw	r5,-8(fp)
   26444:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
   26448:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
   2644c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
   26450:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   26454:	e13ffd17 	ldw	r4,-12(fp)
   26458:	00260d80 	call	260d8 <get_dir_divider_location>
   2645c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
   26460:	00013006 	br	26924 <get_home_directory_cluster_for_file+0x4f8>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   26464:	00800804 	movi	r2,32
   26468:	e0bff905 	stb	r2,-28(fp)
   2646c:	00800804 	movi	r2,32
   26470:	e0bff945 	stb	r2,-27(fp)
   26474:	00800804 	movi	r2,32
   26478:	e0bff985 	stb	r2,-26(fp)
   2647c:	00800804 	movi	r2,32
   26480:	e0bff9c5 	stb	r2,-25(fp)
   26484:	00800804 	movi	r2,32
   26488:	e0bffa05 	stb	r2,-24(fp)
   2648c:	00800804 	movi	r2,32
   26490:	e0bffa45 	stb	r2,-23(fp)
   26494:	00800804 	movi	r2,32
   26498:	e0bffa85 	stb	r2,-22(fp)
   2649c:	00800804 	movi	r2,32
   264a0:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
   264a4:	00800804 	movi	r2,32
   264a8:	e0bffb05 	stb	r2,-20(fp)
   264ac:	00800804 	movi	r2,32
   264b0:	e0bffb45 	stb	r2,-19(fp)
   264b4:	00800804 	movi	r2,32
   264b8:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
   264bc:	00bfffc4 	movi	r2,-1
   264c0:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
   264c4:	e0bfea17 	ldw	r2,-88(fp)
   264c8:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   264cc:	e03fec15 	stw	zero,-80(fp)
   264d0:	00002d06 	br	26588 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
   264d4:	e0ffec17 	ldw	r3,-80(fp)
   264d8:	e0bfed17 	ldw	r2,-76(fp)
   264dc:	1885883a 	add	r2,r3,r2
   264e0:	1007883a 	mov	r3,r2
   264e4:	e0bffd17 	ldw	r2,-12(fp)
   264e8:	10c5883a 	add	r2,r2,r3
   264ec:	10800003 	ldbu	r2,0(r2)
   264f0:	10803fcc 	andi	r2,r2,255
   264f4:	1080201c 	xori	r2,r2,128
   264f8:	10bfe004 	addi	r2,r2,-128
   264fc:	10800b98 	cmpnei	r2,r2,46
   26500:	1000031e 	bne	r2,zero,26510 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   26504:	e0bfec17 	ldw	r2,-80(fp)
   26508:	e0bfee15 	stw	r2,-72(fp)
   2650c:	00001b06 	br	2657c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
   26510:	e0bfee17 	ldw	r2,-72(fp)
   26514:	10000c0e 	bge	r2,zero,26548 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
   26518:	e0ffec17 	ldw	r3,-80(fp)
   2651c:	e0bfed17 	ldw	r2,-76(fp)
   26520:	1885883a 	add	r2,r3,r2
   26524:	1007883a 	mov	r3,r2
   26528:	e0bffd17 	ldw	r2,-12(fp)
   2652c:	10c5883a 	add	r2,r2,r3
   26530:	10c00003 	ldbu	r3,0(r2)
   26534:	e13ff904 	addi	r4,fp,-28
   26538:	e0bfec17 	ldw	r2,-80(fp)
   2653c:	2085883a 	add	r2,r4,r2
   26540:	10c00005 	stb	r3,0(r2)
   26544:	00000d06 	br	2657c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   26548:	e0ffec17 	ldw	r3,-80(fp)
   2654c:	e0bfee17 	ldw	r2,-72(fp)
   26550:	1885c83a 	sub	r2,r3,r2
   26554:	e13fec17 	ldw	r4,-80(fp)
   26558:	e0ffed17 	ldw	r3,-76(fp)
   2655c:	20c7883a 	add	r3,r4,r3
   26560:	1809883a 	mov	r4,r3
   26564:	e0fffd17 	ldw	r3,-12(fp)
   26568:	1907883a 	add	r3,r3,r4
   2656c:	18c00003 	ldbu	r3,0(r3)
   26570:	e13ffb04 	addi	r4,fp,-20
   26574:	2085883a 	add	r2,r4,r2
   26578:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   2657c:	e0bfec17 	ldw	r2,-80(fp)
   26580:	10800044 	addi	r2,r2,1
   26584:	e0bfec15 	stw	r2,-80(fp)
   26588:	e0ffec17 	ldw	r3,-80(fp)
   2658c:	e0bfeb17 	ldw	r2,-84(fp)
   26590:	18bfd016 	blt	r3,r2,264d4 <__alt_data_end+0xf40264d4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   26594:	e0bfea17 	ldw	r2,-88(fp)
   26598:	10005d1e 	bne	r2,zero,26710 <get_home_directory_cluster_for_file+0x2e4>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   2659c:	00820034 	movhi	r2,2048
   265a0:	1086c404 	addi	r2,r2,6928
   265a4:	1080050b 	ldhu	r2,20(r2)
   265a8:	10bfffcc 	andi	r2,r2,65535
   265ac:	1006917a 	slli	r3,r2,5
   265b0:	00820034 	movhi	r2,2048
   265b4:	1086c404 	addi	r2,r2,6928
   265b8:	1080030b 	ldhu	r2,12(r2)
   265bc:	10bfffcc 	andi	r2,r2,65535
   265c0:	1809883a 	mov	r4,r3
   265c4:	100b883a 	mov	r5,r2
   265c8:	002429c0 	call	2429c <__divsi3>
   265cc:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   265d0:	e03ff015 	stw	zero,-64(fp)
   265d4:	00003e06 	br	266d0 <get_home_directory_cluster_for_file+0x2a4>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   265d8:	00820034 	movhi	r2,2048
   265dc:	1086c404 	addi	r2,r2,6928
   265e0:	10c01317 	ldw	r3,76(r2)
   265e4:	e0bff017 	ldw	r2,-64(fp)
   265e8:	1885883a 	add	r2,r3,r2
   265ec:	1007883a 	mov	r3,r2
   265f0:	d0a03617 	ldw	r2,-32552(gp)
   265f4:	1809883a 	mov	r4,r3
   265f8:	100b883a 	mov	r5,r2
   265fc:	0024cf80 	call	24cf8 <Read_Sector_Data>
   26600:	10002e26 	beq	r2,zero,266bc <get_home_directory_cluster_for_file+0x290>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   26604:	e03ff115 	stw	zero,-60(fp)
   26608:	00002506 	br	266a0 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   2660c:	e0bff117 	ldw	r2,-60(fp)
   26610:	1006917a 	slli	r3,r2,5
   26614:	e0bff017 	ldw	r2,-64(fp)
   26618:	1809883a 	mov	r4,r3
   2661c:	e17fff17 	ldw	r5,-4(fp)
   26620:	000d883a 	mov	r6,zero
   26624:	100f883a 	mov	r7,r2
   26628:	00251100 	call	25110 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   2662c:	e0bfff17 	ldw	r2,-4(fp)
   26630:	10800003 	ldbu	r2,0(r2)
   26634:	10803fcc 	andi	r2,r2,255
   26638:	10803960 	cmpeqi	r2,r2,229
   2663c:	1000151e 	bne	r2,zero,26694 <get_home_directory_cluster_for_file+0x268>
   26640:	e0bfff17 	ldw	r2,-4(fp)
   26644:	10800003 	ldbu	r2,0(r2)
   26648:	10803fcc 	andi	r2,r2,255
   2664c:	10001126 	beq	r2,zero,26694 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   26650:	e0fff904 	addi	r3,fp,-28
   26654:	e0bffb04 	addi	r2,fp,-20
   26658:	e13fff17 	ldw	r4,-4(fp)
   2665c:	180b883a 	mov	r5,r3
   26660:	100d883a 	mov	r6,r2
   26664:	00261900 	call	26190 <match_file_record_to_name_ext>
   26668:	e0bff815 	stw	r2,-32(fp)
                            if (match)
   2666c:	e0bff817 	ldw	r2,-32(fp)
   26670:	10000826 	beq	r2,zero,26694 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
   26674:	e0bfff17 	ldw	r2,-4(fp)
   26678:	1080058b 	ldhu	r2,22(r2)
   2667c:	10bfffcc 	andi	r2,r2,65535
   26680:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   26684:	e0bfff17 	ldw	r2,-4(fp)
   26688:	00c00044 	movi	r3,1
   2668c:	10c00a15 	stw	r3,40(r2)
                                break;
   26690:	00000606 	br	266ac <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   26694:	e0bff117 	ldw	r2,-60(fp)
   26698:	10800044 	addi	r2,r2,1
   2669c:	e0bff115 	stw	r2,-60(fp)
   266a0:	e0bff117 	ldw	r2,-60(fp)
   266a4:	10800410 	cmplti	r2,r2,16
   266a8:	103fd81e 	bne	r2,zero,2660c <__alt_data_end+0xf402660c>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   266ac:	e0ffef17 	ldw	r3,-68(fp)
   266b0:	e0bfea17 	ldw	r2,-88(fp)
   266b4:	18800326 	beq	r3,r2,266c4 <get_home_directory_cluster_for_file+0x298>
   266b8:	00000106 	br	266c0 <get_home_directory_cluster_for_file+0x294>
                        }
                    }
                }
                else
                {
                    break;
   266bc:	00000706 	br	266dc <get_home_directory_cluster_for_file+0x2b0>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
   266c0:	00000606 	br	266dc <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   266c4:	e0bff017 	ldw	r2,-64(fp)
   266c8:	10800044 	addi	r2,r2,1
   266cc:	e0bff015 	stw	r2,-64(fp)
   266d0:	e0fff017 	ldw	r3,-64(fp)
   266d4:	e0bff717 	ldw	r2,-36(fp)
   266d8:	18bfbf16 	blt	r3,r2,265d8 <__alt_data_end+0xf40265d8>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   266dc:	e0ffef17 	ldw	r3,-68(fp)
   266e0:	e0bfea17 	ldw	r2,-88(fp)
   266e4:	18800826 	beq	r3,r2,26708 <get_home_directory_cluster_for_file+0x2dc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   266e8:	e0bfef17 	ldw	r2,-68(fp)
   266ec:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   266f0:	e0ffed17 	ldw	r3,-76(fp)
   266f4:	e0bfeb17 	ldw	r2,-84(fp)
   266f8:	1885883a 	add	r2,r3,r2
   266fc:	10800044 	addi	r2,r2,1
   26700:	e0bfed15 	stw	r2,-76(fp)
   26704:	00007d06 	br	268fc <get_home_directory_cluster_for_file+0x4d0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   26708:	0005883a 	mov	r2,zero
   2670c:	00009106 	br	26954 <get_home_directory_cluster_for_file+0x528>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   26710:	e0bfea17 	ldw	r2,-88(fp)
   26714:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   26718:	e0bff417 	ldw	r2,-48(fp)
   2671c:	10ffff84 	addi	r3,r2,-2
   26720:	00820034 	movhi	r2,2048
   26724:	1086c404 	addi	r2,r2,6928
   26728:	10800383 	ldbu	r2,14(r2)
   2672c:	10803fcc 	andi	r2,r2,255
   26730:	1809883a 	mov	r4,r3
   26734:	100b883a 	mov	r5,r2
   26738:	00225e40 	call	225e4 <__mulsi3>
   2673c:	1007883a 	mov	r3,r2
   26740:	00820034 	movhi	r2,2048
   26744:	1086c404 	addi	r2,r2,6928
   26748:	10801417 	ldw	r2,80(r2)
   2674c:	1885883a 	add	r2,r3,r2
   26750:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   26754:	e03ff215 	stw	zero,-56(fp)
   26758:	00003806 	br	2683c <get_home_directory_cluster_for_file+0x410>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   2675c:	e0fff217 	ldw	r3,-56(fp)
   26760:	e0bff517 	ldw	r2,-44(fp)
   26764:	1887883a 	add	r3,r3,r2
   26768:	d0a03617 	ldw	r2,-32552(gp)
   2676c:	1809883a 	mov	r4,r3
   26770:	100b883a 	mov	r5,r2
   26774:	0024cf80 	call	24cf8 <Read_Sector_Data>
   26778:	10002b26 	beq	r2,zero,26828 <get_home_directory_cluster_for_file+0x3fc>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   2677c:	e03ff315 	stw	zero,-52(fp)
   26780:	00002206 	br	2680c <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   26784:	e0bff317 	ldw	r2,-52(fp)
   26788:	1008917a 	slli	r4,r2,5
   2678c:	e0fff417 	ldw	r3,-48(fp)
   26790:	e0bff217 	ldw	r2,-56(fp)
   26794:	e17fff17 	ldw	r5,-4(fp)
   26798:	180d883a 	mov	r6,r3
   2679c:	100f883a 	mov	r7,r2
   267a0:	00251100 	call	25110 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   267a4:	e0bfff17 	ldw	r2,-4(fp)
   267a8:	10800003 	ldbu	r2,0(r2)
   267ac:	10803fcc 	andi	r2,r2,255
   267b0:	10803960 	cmpeqi	r2,r2,229
   267b4:	1000121e 	bne	r2,zero,26800 <get_home_directory_cluster_for_file+0x3d4>
   267b8:	e0bfff17 	ldw	r2,-4(fp)
   267bc:	10800003 	ldbu	r2,0(r2)
   267c0:	10803fcc 	andi	r2,r2,255
   267c4:	10000e26 	beq	r2,zero,26800 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   267c8:	e0fff904 	addi	r3,fp,-28
   267cc:	e0bffb04 	addi	r2,fp,-20
   267d0:	e13fff17 	ldw	r4,-4(fp)
   267d4:	180b883a 	mov	r5,r3
   267d8:	100d883a 	mov	r6,r2
   267dc:	00261900 	call	26190 <match_file_record_to_name_ext>
   267e0:	e0bff615 	stw	r2,-40(fp)
                                if (match)
   267e4:	e0bff617 	ldw	r2,-40(fp)
   267e8:	10000526 	beq	r2,zero,26800 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   267ec:	e0bfff17 	ldw	r2,-4(fp)
   267f0:	1080058b 	ldhu	r2,22(r2)
   267f4:	10bfffcc 	andi	r2,r2,65535
   267f8:	e0bfef15 	stw	r2,-68(fp)
                                    break;
   267fc:	00000606 	br	26818 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   26800:	e0bff317 	ldw	r2,-52(fp)
   26804:	10800044 	addi	r2,r2,1
   26808:	e0bff315 	stw	r2,-52(fp)
   2680c:	e0bff317 	ldw	r2,-52(fp)
   26810:	10800410 	cmplti	r2,r2,16
   26814:	103fdb1e 	bne	r2,zero,26784 <__alt_data_end+0xf4026784>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   26818:	e0ffef17 	ldw	r3,-68(fp)
   2681c:	e0bfea17 	ldw	r2,-88(fp)
   26820:	18800326 	beq	r3,r2,26830 <get_home_directory_cluster_for_file+0x404>
   26824:	00000106 	br	2682c <get_home_directory_cluster_for_file+0x400>
                            }
                        }
                    }
                    else
                    {
                        break;
   26828:	00000a06 	br	26854 <get_home_directory_cluster_for_file+0x428>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
   2682c:	00000906 	br	26854 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   26830:	e0bff217 	ldw	r2,-56(fp)
   26834:	10800044 	addi	r2,r2,1
   26838:	e0bff215 	stw	r2,-56(fp)
   2683c:	00820034 	movhi	r2,2048
   26840:	1086c404 	addi	r2,r2,6928
   26844:	10800383 	ldbu	r2,14(r2)
   26848:	10803fcc 	andi	r2,r2,255
   2684c:	e0fff217 	ldw	r3,-56(fp)
   26850:	18bfc216 	blt	r3,r2,2675c <__alt_data_end+0xf402675c>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   26854:	e0ffef17 	ldw	r3,-68(fp)
   26858:	e0bfea17 	ldw	r2,-88(fp)
   2685c:	1880141e 	bne	r3,r2,268b0 <get_home_directory_cluster_for_file+0x484>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   26860:	e0ffef17 	ldw	r3,-68(fp)
   26864:	e0bffc04 	addi	r2,fp,-16
   26868:	1809883a 	mov	r4,r3
   2686c:	100b883a 	mov	r5,r2
   26870:	0024dd00 	call	24dd0 <get_cluster_flag>
   26874:	10000c26 	beq	r2,zero,268a8 <get_home_directory_cluster_for_file+0x47c>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   26878:	e0bffc0b 	ldhu	r2,-16(fp)
   2687c:	10bfffcc 	andi	r2,r2,65535
   26880:	10fffe0c 	andi	r3,r2,65528
   26884:	00bffe14 	movui	r2,65528
   26888:	1880021e 	bne	r3,r2,26894 <get_home_directory_cluster_for_file+0x468>
						{
							return false;
   2688c:	0005883a 	mov	r2,zero
   26890:	00003006 	br	26954 <get_home_directory_cluster_for_file+0x528>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   26894:	e0bffc0b 	ldhu	r2,-16(fp)
   26898:	10bfffcc 	andi	r2,r2,65535
   2689c:	10bffe0c 	andi	r2,r2,65528
   268a0:	e0bfef15 	stw	r2,-68(fp)
   268a4:	00000206 	br	268b0 <get_home_directory_cluster_for_file+0x484>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   268a8:	0005883a 	mov	r2,zero
   268ac:	00002906 	br	26954 <get_home_directory_cluster_for_file+0x528>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   268b0:	e0bff417 	ldw	r2,-48(fp)
   268b4:	00fffdd4 	movui	r3,65527
   268b8:	18800316 	blt	r3,r2,268c8 <get_home_directory_cluster_for_file+0x49c>
   268bc:	e0ffef17 	ldw	r3,-68(fp)
   268c0:	e0bfea17 	ldw	r2,-88(fp)
   268c4:	18bf9426 	beq	r3,r2,26718 <__alt_data_end+0xf4026718>
            if (new_cluster != home_dir_cluster)
   268c8:	e0ffef17 	ldw	r3,-68(fp)
   268cc:	e0bfea17 	ldw	r2,-88(fp)
   268d0:	18800826 	beq	r3,r2,268f4 <get_home_directory_cluster_for_file+0x4c8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   268d4:	e0bfef17 	ldw	r2,-68(fp)
   268d8:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
   268dc:	e0ffed17 	ldw	r3,-76(fp)
   268e0:	e0bfeb17 	ldw	r2,-84(fp)
   268e4:	1885883a 	add	r2,r3,r2
   268e8:	10800044 	addi	r2,r2,1
   268ec:	e0bfed15 	stw	r2,-76(fp)
   268f0:	00000206 	br	268fc <get_home_directory_cluster_for_file+0x4d0>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   268f4:	0005883a 	mov	r2,zero
   268f8:	00001606 	br	26954 <get_home_directory_cluster_for_file+0x528>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   268fc:	e0bfed17 	ldw	r2,-76(fp)
   26900:	e0fffd17 	ldw	r3,-12(fp)
   26904:	1885883a 	add	r2,r3,r2
   26908:	1009883a 	mov	r4,r2
   2690c:	00260d80 	call	260d8 <get_dir_divider_location>
   26910:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
   26914:	e0bfeb17 	ldw	r2,-84(fp)
   26918:	1000020e 	bge	r2,zero,26924 <get_home_directory_cluster_for_file+0x4f8>
        {
            // Directory has been located.
            result = true;
   2691c:	00800044 	movi	r2,1
   26920:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   26924:	e0bfeb17 	ldw	r2,-84(fp)
   26928:	00bece16 	blt	zero,r2,26464 <__alt_data_end+0xf4026464>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   2692c:	e0bffe17 	ldw	r2,-8(fp)
   26930:	e0ffea17 	ldw	r3,-88(fp)
   26934:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
   26938:	e0bfea17 	ldw	r2,-88(fp)
   2693c:	1000041e 	bne	r2,zero,26950 <get_home_directory_cluster_for_file+0x524>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   26940:	e0bfff17 	ldw	r2,-4(fp)
   26944:	10000a15 	stw	zero,40(r2)
		result = true;
   26948:	00800044 	movi	r2,1
   2694c:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
   26950:	e0bfe917 	ldw	r2,-92(fp)
}
   26954:	e037883a 	mov	sp,fp
   26958:	dfc00117 	ldw	ra,4(sp)
   2695c:	df000017 	ldw	fp,0(sp)
   26960:	dec00204 	addi	sp,sp,8
   26964:	f800283a 	ret

00026968 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   26968:	deffe804 	addi	sp,sp,-96
   2696c:	dfc01715 	stw	ra,92(sp)
   26970:	df001615 	stw	fp,88(sp)
   26974:	df001604 	addi	fp,sp,88
   26978:	e13ffd15 	stw	r4,-12(fp)
   2697c:	e17ffe15 	stw	r5,-8(fp)
   26980:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
   26984:	e13ffe17 	ldw	r4,-8(fp)
   26988:	00260d80 	call	260d8 <get_dir_divider_location>
   2698c:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
   26990:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   26994:	00800804 	movi	r2,32
   26998:	e0bff905 	stb	r2,-28(fp)
   2699c:	00800804 	movi	r2,32
   269a0:	e0bff945 	stb	r2,-27(fp)
   269a4:	00800804 	movi	r2,32
   269a8:	e0bff985 	stb	r2,-26(fp)
   269ac:	00800804 	movi	r2,32
   269b0:	e0bff9c5 	stb	r2,-25(fp)
   269b4:	00800804 	movi	r2,32
   269b8:	e0bffa05 	stb	r2,-24(fp)
   269bc:	00800804 	movi	r2,32
   269c0:	e0bffa45 	stb	r2,-23(fp)
   269c4:	00800804 	movi	r2,32
   269c8:	e0bffa85 	stb	r2,-22(fp)
   269cc:	00800804 	movi	r2,32
   269d0:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
   269d4:	00800804 	movi	r2,32
   269d8:	e0bffb05 	stb	r2,-20(fp)
   269dc:	00800804 	movi	r2,32
   269e0:	e0bffb45 	stb	r2,-19(fp)
   269e4:	00800804 	movi	r2,32
   269e8:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
   269ec:	00bfffc4 	movi	r2,-1
   269f0:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
   269f4:	e0bffd17 	ldw	r2,-12(fp)
   269f8:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
   269fc:	e13ffe17 	ldw	r4,-8(fp)
   26a00:	00236bc0 	call	236bc <strlen>
   26a04:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
   26a08:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   26a0c:	00000b06 	br	26a3c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   26a10:	e0ffeb17 	ldw	r3,-84(fp)
   26a14:	e0bfea17 	ldw	r2,-88(fp)
   26a18:	1885883a 	add	r2,r3,r2
   26a1c:	10800044 	addi	r2,r2,1
   26a20:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   26a24:	e0bfeb17 	ldw	r2,-84(fp)
   26a28:	e0fffe17 	ldw	r3,-8(fp)
   26a2c:	1885883a 	add	r2,r3,r2
   26a30:	1009883a 	mov	r4,r2
   26a34:	00260d80 	call	260d8 <get_dir_divider_location>
   26a38:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   26a3c:	e0bfea17 	ldw	r2,-88(fp)
   26a40:	00bff316 	blt	zero,r2,26a10 <__alt_data_end+0xf4026a10>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   26a44:	e0bfeb17 	ldw	r2,-84(fp)
   26a48:	e0bfee15 	stw	r2,-72(fp)
   26a4c:	00002706 	br	26aec <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
   26a50:	e0bfee17 	ldw	r2,-72(fp)
   26a54:	e0fffe17 	ldw	r3,-8(fp)
   26a58:	1885883a 	add	r2,r3,r2
   26a5c:	10800003 	ldbu	r2,0(r2)
   26a60:	10803fcc 	andi	r2,r2,255
   26a64:	1080201c 	xori	r2,r2,128
   26a68:	10bfe004 	addi	r2,r2,-128
   26a6c:	10800b98 	cmpnei	r2,r2,46
   26a70:	1000031e 	bne	r2,zero,26a80 <find_file_in_directory+0x118>
        {
            ext_index = index;
   26a74:	e0bfee17 	ldw	r2,-72(fp)
   26a78:	e0bfec15 	stw	r2,-80(fp)
   26a7c:	00001806 	br	26ae0 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
   26a80:	e0bfec17 	ldw	r2,-80(fp)
   26a84:	10000b0e 	bge	r2,zero,26ab4 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
   26a88:	e0ffee17 	ldw	r3,-72(fp)
   26a8c:	e0bfeb17 	ldw	r2,-84(fp)
   26a90:	1885c83a 	sub	r2,r3,r2
   26a94:	e0ffee17 	ldw	r3,-72(fp)
   26a98:	e13ffe17 	ldw	r4,-8(fp)
   26a9c:	20c7883a 	add	r3,r4,r3
   26aa0:	18c00003 	ldbu	r3,0(r3)
   26aa4:	e13ff904 	addi	r4,fp,-28
   26aa8:	2085883a 	add	r2,r4,r2
   26aac:	10c00005 	stb	r3,0(r2)
   26ab0:	00000b06 	br	26ae0 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   26ab4:	e0ffee17 	ldw	r3,-72(fp)
   26ab8:	e0bfec17 	ldw	r2,-80(fp)
   26abc:	1885c83a 	sub	r2,r3,r2
   26ac0:	10bfffc4 	addi	r2,r2,-1
   26ac4:	e0ffee17 	ldw	r3,-72(fp)
   26ac8:	e13ffe17 	ldw	r4,-8(fp)
   26acc:	20c7883a 	add	r3,r4,r3
   26ad0:	18c00003 	ldbu	r3,0(r3)
   26ad4:	e13ffb04 	addi	r4,fp,-20
   26ad8:	2085883a 	add	r2,r4,r2
   26adc:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   26ae0:	e0bfee17 	ldw	r2,-72(fp)
   26ae4:	10800044 	addi	r2,r2,1
   26ae8:	e0bfee15 	stw	r2,-72(fp)
   26aec:	e0ffee17 	ldw	r3,-72(fp)
   26af0:	e0bff417 	ldw	r2,-48(fp)
   26af4:	18bfd616 	blt	r3,r2,26a50 <__alt_data_end+0xf4026a50>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   26af8:	e0bffd17 	ldw	r2,-12(fp)
   26afc:	10004b1e 	bne	r2,zero,26c2c <find_file_in_directory+0x2c4>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   26b00:	00820034 	movhi	r2,2048
   26b04:	1086c404 	addi	r2,r2,6928
   26b08:	1080050b 	ldhu	r2,20(r2)
   26b0c:	10bfffcc 	andi	r2,r2,65535
   26b10:	1006917a 	slli	r3,r2,5
   26b14:	00820034 	movhi	r2,2048
   26b18:	1086c404 	addi	r2,r2,6928
   26b1c:	1080030b 	ldhu	r2,12(r2)
   26b20:	10bfffcc 	andi	r2,r2,65535
   26b24:	1809883a 	mov	r4,r3
   26b28:	100b883a 	mov	r5,r2
   26b2c:	002429c0 	call	2429c <__divsi3>
   26b30:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   26b34:	e03ff015 	stw	zero,-64(fp)
   26b38:	00003806 	br	26c1c <find_file_in_directory+0x2b4>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   26b3c:	00820034 	movhi	r2,2048
   26b40:	1086c404 	addi	r2,r2,6928
   26b44:	10c01317 	ldw	r3,76(r2)
   26b48:	e0bff017 	ldw	r2,-64(fp)
   26b4c:	1885883a 	add	r2,r3,r2
   26b50:	1007883a 	mov	r3,r2
   26b54:	d0a03617 	ldw	r2,-32552(gp)
   26b58:	1809883a 	mov	r4,r3
   26b5c:	100b883a 	mov	r5,r2
   26b60:	0024cf80 	call	24cf8 <Read_Sector_Data>
   26b64:	10002826 	beq	r2,zero,26c08 <find_file_in_directory+0x2a0>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   26b68:	e03ff115 	stw	zero,-60(fp)
   26b6c:	00002006 	br	26bf0 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   26b70:	e0bff117 	ldw	r2,-60(fp)
   26b74:	1006917a 	slli	r3,r2,5
   26b78:	e0bff017 	ldw	r2,-64(fp)
   26b7c:	1809883a 	mov	r4,r3
   26b80:	e17fff17 	ldw	r5,-4(fp)
   26b84:	000d883a 	mov	r6,zero
   26b88:	100f883a 	mov	r7,r2
   26b8c:	00251100 	call	25110 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   26b90:	e0bfff17 	ldw	r2,-4(fp)
   26b94:	10800003 	ldbu	r2,0(r2)
   26b98:	10803fcc 	andi	r2,r2,255
   26b9c:	10803960 	cmpeqi	r2,r2,229
   26ba0:	1000101e 	bne	r2,zero,26be4 <find_file_in_directory+0x27c>
   26ba4:	e0bfff17 	ldw	r2,-4(fp)
   26ba8:	10800003 	ldbu	r2,0(r2)
   26bac:	10803fcc 	andi	r2,r2,255
   26bb0:	10000c26 	beq	r2,zero,26be4 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   26bb4:	e0fff904 	addi	r3,fp,-28
   26bb8:	e0bffb04 	addi	r2,fp,-20
   26bbc:	e13fff17 	ldw	r4,-4(fp)
   26bc0:	180b883a 	mov	r5,r3
   26bc4:	100d883a 	mov	r6,r2
   26bc8:	00261900 	call	26190 <match_file_record_to_name_ext>
   26bcc:	e0bff815 	stw	r2,-32(fp)

                        if (match)
   26bd0:	e0bff817 	ldw	r2,-32(fp)
   26bd4:	10000326 	beq	r2,zero,26be4 <find_file_in_directory+0x27c>
                        {
                            result = true;
   26bd8:	00800044 	movi	r2,1
   26bdc:	e0bfef15 	stw	r2,-68(fp)
                            break;
   26be0:	00000606 	br	26bfc <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   26be4:	e0bff117 	ldw	r2,-60(fp)
   26be8:	10800044 	addi	r2,r2,1
   26bec:	e0bff115 	stw	r2,-60(fp)
   26bf0:	e0bff117 	ldw	r2,-60(fp)
   26bf4:	10800410 	cmplti	r2,r2,16
   26bf8:	103fdd1e 	bne	r2,zero,26b70 <__alt_data_end+0xf4026b70>
            }
            else
            {
                break;
            }
            if (result)
   26bfc:	e0bfef17 	ldw	r2,-68(fp)
   26c00:	10000326 	beq	r2,zero,26c10 <find_file_in_directory+0x2a8>
   26c04:	00000106 	br	26c0c <find_file_in_directory+0x2a4>
                    }
                }
            }
            else
            {
                break;
   26c08:	00000706 	br	26c28 <find_file_in_directory+0x2c0>
            }
            if (result)
            {
                break;
   26c0c:	00000606 	br	26c28 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   26c10:	e0bff017 	ldw	r2,-64(fp)
   26c14:	10800044 	addi	r2,r2,1
   26c18:	e0bff015 	stw	r2,-64(fp)
   26c1c:	e0fff017 	ldw	r3,-64(fp)
   26c20:	e0bff717 	ldw	r2,-36(fp)
   26c24:	18bfc516 	blt	r3,r2,26b3c <__alt_data_end+0xf4026b3c>
   26c28:	00006706 	br	26dc8 <find_file_in_directory+0x460>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   26c2c:	e0bfed17 	ldw	r2,-76(fp)
   26c30:	10ffff84 	addi	r3,r2,-2
   26c34:	00820034 	movhi	r2,2048
   26c38:	1086c404 	addi	r2,r2,6928
   26c3c:	10800383 	ldbu	r2,14(r2)
   26c40:	10803fcc 	andi	r2,r2,255
   26c44:	1809883a 	mov	r4,r3
   26c48:	100b883a 	mov	r5,r2
   26c4c:	00225e40 	call	225e4 <__mulsi3>
   26c50:	1007883a 	mov	r3,r2
   26c54:	00820034 	movhi	r2,2048
   26c58:	1086c404 	addi	r2,r2,6928
   26c5c:	10801417 	ldw	r2,80(r2)
   26c60:	1885883a 	add	r2,r3,r2
   26c64:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   26c68:	e03ff215 	stw	zero,-56(fp)
   26c6c:	00003506 	br	26d44 <find_file_in_directory+0x3dc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   26c70:	e0fff217 	ldw	r3,-56(fp)
   26c74:	e0bff517 	ldw	r2,-44(fp)
   26c78:	1887883a 	add	r3,r3,r2
   26c7c:	d0a03617 	ldw	r2,-32552(gp)
   26c80:	1809883a 	mov	r4,r3
   26c84:	100b883a 	mov	r5,r2
   26c88:	0024cf80 	call	24cf8 <Read_Sector_Data>
   26c8c:	10002826 	beq	r2,zero,26d30 <find_file_in_directory+0x3c8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   26c90:	e03ff315 	stw	zero,-52(fp)
   26c94:	00002006 	br	26d18 <find_file_in_directory+0x3b0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   26c98:	e0bff317 	ldw	r2,-52(fp)
   26c9c:	1008917a 	slli	r4,r2,5
   26ca0:	e0ffed17 	ldw	r3,-76(fp)
   26ca4:	e0bff217 	ldw	r2,-56(fp)
   26ca8:	e17fff17 	ldw	r5,-4(fp)
   26cac:	180d883a 	mov	r6,r3
   26cb0:	100f883a 	mov	r7,r2
   26cb4:	00251100 	call	25110 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   26cb8:	e0bfff17 	ldw	r2,-4(fp)
   26cbc:	10800003 	ldbu	r2,0(r2)
   26cc0:	10803fcc 	andi	r2,r2,255
   26cc4:	10803960 	cmpeqi	r2,r2,229
   26cc8:	1000101e 	bne	r2,zero,26d0c <find_file_in_directory+0x3a4>
   26ccc:	e0bfff17 	ldw	r2,-4(fp)
   26cd0:	10800003 	ldbu	r2,0(r2)
   26cd4:	10803fcc 	andi	r2,r2,255
   26cd8:	10000c26 	beq	r2,zero,26d0c <find_file_in_directory+0x3a4>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   26cdc:	e0fff904 	addi	r3,fp,-28
   26ce0:	e0bffb04 	addi	r2,fp,-20
   26ce4:	e13fff17 	ldw	r4,-4(fp)
   26ce8:	180b883a 	mov	r5,r3
   26cec:	100d883a 	mov	r6,r2
   26cf0:	00261900 	call	26190 <match_file_record_to_name_ext>
   26cf4:	e0bff615 	stw	r2,-40(fp)

                            if (match)
   26cf8:	e0bff617 	ldw	r2,-40(fp)
   26cfc:	10000326 	beq	r2,zero,26d0c <find_file_in_directory+0x3a4>
                            {                               
                                result = true;
   26d00:	00800044 	movi	r2,1
   26d04:	e0bfef15 	stw	r2,-68(fp)
                                break;
   26d08:	00000606 	br	26d24 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   26d0c:	e0bff317 	ldw	r2,-52(fp)
   26d10:	10800044 	addi	r2,r2,1
   26d14:	e0bff315 	stw	r2,-52(fp)
   26d18:	e0bff317 	ldw	r2,-52(fp)
   26d1c:	10800410 	cmplti	r2,r2,16
   26d20:	103fdd1e 	bne	r2,zero,26c98 <__alt_data_end+0xf4026c98>
                }
                else
                {
                    break;
                }
                if (result)
   26d24:	e0bfef17 	ldw	r2,-68(fp)
   26d28:	10000326 	beq	r2,zero,26d38 <find_file_in_directory+0x3d0>
   26d2c:	00000106 	br	26d34 <find_file_in_directory+0x3cc>
                        }
                    }
                }
                else
                {
                    break;
   26d30:	00000a06 	br	26d5c <find_file_in_directory+0x3f4>
                }
                if (result)
                {
                    break;
   26d34:	00000906 	br	26d5c <find_file_in_directory+0x3f4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   26d38:	e0bff217 	ldw	r2,-56(fp)
   26d3c:	10800044 	addi	r2,r2,1
   26d40:	e0bff215 	stw	r2,-56(fp)
   26d44:	00820034 	movhi	r2,2048
   26d48:	1086c404 	addi	r2,r2,6928
   26d4c:	10800383 	ldbu	r2,14(r2)
   26d50:	10803fcc 	andi	r2,r2,255
   26d54:	e0fff217 	ldw	r3,-56(fp)
   26d58:	18bfc516 	blt	r3,r2,26c70 <__alt_data_end+0xf4026c70>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   26d5c:	e0bfef17 	ldw	r2,-68(fp)
   26d60:	1000141e 	bne	r2,zero,26db4 <find_file_in_directory+0x44c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   26d64:	e0ffed17 	ldw	r3,-76(fp)
   26d68:	e0bffc04 	addi	r2,fp,-16
   26d6c:	1809883a 	mov	r4,r3
   26d70:	100b883a 	mov	r5,r2
   26d74:	0024dd00 	call	24dd0 <get_cluster_flag>
   26d78:	10000c26 	beq	r2,zero,26dac <find_file_in_directory+0x444>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   26d7c:	e0bffc0b 	ldhu	r2,-16(fp)
   26d80:	10bfffcc 	andi	r2,r2,65535
   26d84:	10fffe0c 	andi	r3,r2,65528
   26d88:	00bffe14 	movui	r2,65528
   26d8c:	1880021e 	bne	r3,r2,26d98 <find_file_in_directory+0x430>
					{
						return false;
   26d90:	0005883a 	mov	r2,zero
   26d94:	00000d06 	br	26dcc <find_file_in_directory+0x464>
					}
					cluster = (new_cluster & 0x0000fff8);
   26d98:	e0bffc0b 	ldhu	r2,-16(fp)
   26d9c:	10bfffcc 	andi	r2,r2,65535
   26da0:	10bffe0c 	andi	r2,r2,65528
   26da4:	e0bfed15 	stw	r2,-76(fp)
   26da8:	00000206 	br	26db4 <find_file_in_directory+0x44c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   26dac:	0005883a 	mov	r2,zero
   26db0:	00000606 	br	26dcc <find_file_in_directory+0x464>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   26db4:	e0bfed17 	ldw	r2,-76(fp)
   26db8:	00fffdd4 	movui	r3,65527
   26dbc:	18800216 	blt	r3,r2,26dc8 <find_file_in_directory+0x460>
   26dc0:	e0bfef17 	ldw	r2,-68(fp)
   26dc4:	103f9926 	beq	r2,zero,26c2c <__alt_data_end+0xf4026c2c>
    }
    
    return result;   
   26dc8:	e0bfef17 	ldw	r2,-68(fp)
}
   26dcc:	e037883a 	mov	sp,fp
   26dd0:	dfc00117 	ldw	ra,4(sp)
   26dd4:	df000017 	ldw	fp,0(sp)
   26dd8:	dec00204 	addi	sp,sp,8
   26ddc:	f800283a 	ret

00026de0 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   26de0:	defff504 	addi	sp,sp,-44
   26de4:	dfc00a15 	stw	ra,40(sp)
   26de8:	df000915 	stw	fp,36(sp)
   26dec:	df000904 	addi	fp,sp,36
   26df0:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   26df4:	00820034 	movhi	r2,2048
   26df8:	1086c404 	addi	r2,r2,6928
   26dfc:	10801117 	ldw	r2,68(r2)
   26e00:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
   26e04:	00800084 	movi	r2,2
   26e08:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
   26e0c:	00bfffc4 	movi	r2,-1
   26e10:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
   26e14:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
   26e18:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   26e1c:	00820034 	movhi	r2,2048
   26e20:	1086c404 	addi	r2,r2,6928
   26e24:	10801417 	ldw	r2,80(r2)
   26e28:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   26e2c:	00820034 	movhi	r2,2048
   26e30:	1086c404 	addi	r2,r2,6928
   26e34:	1080058b 	ldhu	r2,22(r2)
   26e38:	10bfffcc 	andi	r2,r2,65535
   26e3c:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   26e40:	00820034 	movhi	r2,2048
   26e44:	1086c404 	addi	r2,r2,6928
   26e48:	10800917 	ldw	r2,36(r2)
   26e4c:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
   26e50:	e0bffd17 	ldw	r2,-12(fp)
   26e54:	e0fffe17 	ldw	r3,-8(fp)
   26e58:	18800d2e 	bgeu	r3,r2,26e90 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   26e5c:	e0fffd17 	ldw	r3,-12(fp)
   26e60:	e0bffc17 	ldw	r2,-16(fp)
   26e64:	1887c83a 	sub	r3,r3,r2
   26e68:	00820034 	movhi	r2,2048
   26e6c:	1086c404 	addi	r2,r2,6928
   26e70:	10800383 	ldbu	r2,14(r2)
   26e74:	10803fcc 	andi	r2,r2,255
   26e78:	1809883a 	mov	r4,r3
   26e7c:	100b883a 	mov	r5,r2
   26e80:	002434c0 	call	2434c <__udivsi3>
   26e84:	10800044 	addi	r2,r2,1
   26e88:	e0bffb15 	stw	r2,-20(fp)
   26e8c:	00000c06 	br	26ec0 <find_first_empty_cluster+0xe0>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   26e90:	e0fffe17 	ldw	r3,-8(fp)
   26e94:	e0bffc17 	ldw	r2,-16(fp)
   26e98:	1887c83a 	sub	r3,r3,r2
   26e9c:	00820034 	movhi	r2,2048
   26ea0:	1086c404 	addi	r2,r2,6928
   26ea4:	10800383 	ldbu	r2,14(r2)
   26ea8:	10803fcc 	andi	r2,r2,255
   26eac:	1809883a 	mov	r4,r3
   26eb0:	100b883a 	mov	r5,r2
   26eb4:	002434c0 	call	2434c <__udivsi3>
   26eb8:	10800044 	addi	r2,r2,1
   26ebc:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   26ec0:	00001f06 	br	26f40 <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   26ec4:	e0fff717 	ldw	r3,-36(fp)
   26ec8:	d0a03617 	ldw	r2,-32552(gp)
   26ecc:	1809883a 	mov	r4,r3
   26ed0:	100b883a 	mov	r5,r2
   26ed4:	0024cf80 	call	24cf8 <Read_Sector_Data>
   26ed8:	10001326 	beq	r2,zero,26f28 <find_first_empty_cluster+0x148>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
   26edc:	e0bff817 	ldw	r2,-32(fp)
   26ee0:	10803fcc 	andi	r2,r2,255
   26ee4:	1085883a 	add	r2,r2,r2
   26ee8:	1007883a 	mov	r3,r2
   26eec:	d0a03817 	ldw	r2,-32544(gp)
   26ef0:	10800a17 	ldw	r2,40(r2)
   26ef4:	1885883a 	add	r2,r3,r2
   26ef8:	1080002b 	ldhuio	r2,0(r2)
   26efc:	10bfffcc 	andi	r2,r2,65535
   26f00:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
   26f04:	e0bff90f 	ldh	r2,-28(fp)
   26f08:	1000011e 	bne	r2,zero,26f10 <find_first_empty_cluster+0x130>
                {
                    // Free cluster found.
                    break;
   26f0c:	00000606 	br	26f28 <find_first_empty_cluster+0x148>
                }
                else
                {
                    cluster_index++;
   26f10:	e0bff817 	ldw	r2,-32(fp)
   26f14:	10800044 	addi	r2,r2,1
   26f18:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
   26f1c:	e0bff817 	ldw	r2,-32(fp)
   26f20:	10803fcc 	andi	r2,r2,255
   26f24:	103fed1e 	bne	r2,zero,26edc <__alt_data_end+0xf4026edc>
        }
        if (cluster == 0)
   26f28:	e0bff90f 	ldh	r2,-28(fp)
   26f2c:	1000011e 	bne	r2,zero,26f34 <find_first_empty_cluster+0x154>
        {
            break;
   26f30:	00000806 	br	26f54 <find_first_empty_cluster+0x174>
        }
        sector++;
   26f34:	e0bff717 	ldw	r2,-36(fp)
   26f38:	10800044 	addi	r2,r2,1
   26f3c:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   26f40:	00820034 	movhi	r2,2048
   26f44:	1086c404 	addi	r2,r2,6928
   26f48:	10c01217 	ldw	r3,72(r2)
   26f4c:	e0bff717 	ldw	r2,-36(fp)
   26f50:	18bfdc1e 	bne	r3,r2,26ec4 <__alt_data_end+0xf4026ec4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   26f54:	e0bff90f 	ldh	r2,-28(fp)
   26f58:	1000081e 	bne	r2,zero,26f7c <find_first_empty_cluster+0x19c>
   26f5c:	e0bff90f 	ldh	r2,-28(fp)
   26f60:	e0fffb17 	ldw	r3,-20(fp)
   26f64:	18800536 	bltu	r3,r2,26f7c <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
   26f68:	e0bfff17 	ldw	r2,-4(fp)
   26f6c:	e0fff817 	ldw	r3,-32(fp)
   26f70:	10c00015 	stw	r3,0(r2)
		result = true;
   26f74:	00800044 	movi	r2,1
   26f78:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
   26f7c:	e0bffa17 	ldw	r2,-24(fp)
}
   26f80:	e037883a 	mov	sp,fp
   26f84:	dfc00117 	ldw	ra,4(sp)
   26f88:	df000017 	ldw	fp,0(sp)
   26f8c:	dec00204 	addi	sp,sp,8
   26f90:	f800283a 	ret

00026f94 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   26f94:	defff604 	addi	sp,sp,-40
   26f98:	dfc00915 	stw	ra,36(sp)
   26f9c:	df000815 	stw	fp,32(sp)
   26fa0:	df000804 	addi	fp,sp,32
   26fa4:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
   26fa8:	00bfffc4 	movi	r2,-1
   26fac:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
   26fb0:	e0bfff17 	ldw	r2,-4(fp)
   26fb4:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   26fb8:	e0bff917 	ldw	r2,-28(fp)
   26fbc:	10ffff84 	addi	r3,r2,-2
   26fc0:	00820034 	movhi	r2,2048
   26fc4:	1086c404 	addi	r2,r2,6928
   26fc8:	10800383 	ldbu	r2,14(r2)
   26fcc:	10803fcc 	andi	r2,r2,255
   26fd0:	1809883a 	mov	r4,r3
   26fd4:	100b883a 	mov	r5,r2
   26fd8:	00225e40 	call	225e4 <__mulsi3>
   26fdc:	1007883a 	mov	r3,r2
   26fe0:	00820034 	movhi	r2,2048
   26fe4:	1086c404 	addi	r2,r2,6928
   26fe8:	10801417 	ldw	r2,80(r2)
   26fec:	1885883a 	add	r2,r3,r2
   26ff0:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   26ff4:	e03ffa15 	stw	zero,-24(fp)
   26ff8:	00002e06 	br	270b4 <find_first_empty_record_in_a_subdirectory+0x120>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   26ffc:	e0fffa17 	ldw	r3,-24(fp)
   27000:	e0bffc17 	ldw	r2,-16(fp)
   27004:	1887883a 	add	r3,r3,r2
   27008:	d0a03617 	ldw	r2,-32552(gp)
   2700c:	1809883a 	mov	r4,r3
   27010:	100b883a 	mov	r5,r2
   27014:	0024cf80 	call	24cf8 <Read_Sector_Data>
   27018:	10002226 	beq	r2,zero,270a4 <find_first_empty_record_in_a_subdirectory+0x110>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   2701c:	e03ffb15 	stw	zero,-20(fp)
   27020:	00001c06 	br	27094 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   27024:	e0bffb17 	ldw	r2,-20(fp)
   27028:	1004917a 	slli	r2,r2,5
   2702c:	1007883a 	mov	r3,r2
   27030:	d0a03817 	ldw	r2,-32544(gp)
   27034:	10800a17 	ldw	r2,40(r2)
   27038:	1885883a 	add	r2,r3,r2
   2703c:	10800023 	ldbuio	r2,0(r2)
   27040:	10803fcc 	andi	r2,r2,255
   27044:	10803fcc 	andi	r2,r2,255
   27048:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   2704c:	e0bffd0b 	ldhu	r2,-12(fp)
   27050:	10803960 	cmpeqi	r2,r2,229
   27054:	1000021e 	bne	r2,zero,27060 <find_first_empty_record_in_a_subdirectory+0xcc>
   27058:	e0bffd0b 	ldhu	r2,-12(fp)
   2705c:	10000a1e 	bne	r2,zero,27088 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   27060:	e0bffa17 	ldw	r2,-24(fp)
   27064:	1006913a 	slli	r3,r2,4
   27068:	e0bffb17 	ldw	r2,-20(fp)
   2706c:	1885883a 	add	r2,r3,r2
   27070:	1006943a 	slli	r3,r2,16
   27074:	e0bff917 	ldw	r2,-28(fp)
   27078:	1884b03a 	or	r2,r3,r2
   2707c:	e0bff815 	stw	r2,-32(fp)
                        return result;
   27080:	e0bff817 	ldw	r2,-32(fp)
   27084:	00005306 	br	271d4 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   27088:	e0bffb17 	ldw	r2,-20(fp)
   2708c:	10800044 	addi	r2,r2,1
   27090:	e0bffb15 	stw	r2,-20(fp)
   27094:	e0bffb17 	ldw	r2,-20(fp)
   27098:	10800410 	cmplti	r2,r2,16
   2709c:	103fe11e 	bne	r2,zero,27024 <__alt_data_end+0xf4027024>
   270a0:	00000106 	br	270a8 <find_first_empty_record_in_a_subdirectory+0x114>
                    }
                }
            }
            else
            {
                break;
   270a4:	00000906 	br	270cc <find_first_empty_record_in_a_subdirectory+0x138>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   270a8:	e0bffa17 	ldw	r2,-24(fp)
   270ac:	10800044 	addi	r2,r2,1
   270b0:	e0bffa15 	stw	r2,-24(fp)
   270b4:	00820034 	movhi	r2,2048
   270b8:	1086c404 	addi	r2,r2,6928
   270bc:	10800383 	ldbu	r2,14(r2)
   270c0:	10803fcc 	andi	r2,r2,255
   270c4:	e0fffa17 	ldw	r3,-24(fp)
   270c8:	18bfcc16 	blt	r3,r2,26ffc <__alt_data_end+0xf4026ffc>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   270cc:	e0bff817 	ldw	r2,-32(fp)
   270d0:	1000390e 	bge	r2,zero,271b8 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   270d4:	e0fff917 	ldw	r3,-28(fp)
   270d8:	e0bffd84 	addi	r2,fp,-10
   270dc:	1809883a 	mov	r4,r3
   270e0:	100b883a 	mov	r5,r2
   270e4:	0024dd00 	call	24dd0 <get_cluster_flag>
   270e8:	10003126 	beq	r2,zero,271b0 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   270ec:	e0bffd8b 	ldhu	r2,-10(fp)
   270f0:	10bfffcc 	andi	r2,r2,65535
   270f4:	10fffe0c 	andi	r3,r2,65528
   270f8:	00bffe14 	movui	r2,65528
   270fc:	18802e1e 	bne	r3,r2,271b8 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   27100:	e0bffe04 	addi	r2,fp,-8
   27104:	1009883a 	mov	r4,r2
   27108:	0026de00 	call	26de0 <find_first_empty_cluster>
   2710c:	10002326 	beq	r2,zero,2719c <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   27110:	e0fff917 	ldw	r3,-28(fp)
   27114:	e0bffe17 	ldw	r2,-8(fp)
   27118:	10bfffcc 	andi	r2,r2,65535
   2711c:	10a0001c 	xori	r2,r2,32768
   27120:	10a00004 	addi	r2,r2,-32768
   27124:	1809883a 	mov	r4,r3
   27128:	100b883a 	mov	r5,r2
   2712c:	01800044 	movi	r6,1
   27130:	0024e840 	call	24e84 <mark_cluster>
   27134:	10001926 	beq	r2,zero,2719c <find_first_empty_record_in_a_subdirectory+0x208>
   27138:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   2713c:	1009883a 	mov	r4,r2
   27140:	017fffc4 	movi	r5,-1
   27144:	01800044 	movi	r6,1
   27148:	0024e840 	call	24e84 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   2714c:	10001326 	beq	r2,zero,2719c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   27150:	e0fff917 	ldw	r3,-28(fp)
   27154:	e0bffe17 	ldw	r2,-8(fp)
   27158:	10bfffcc 	andi	r2,r2,65535
   2715c:	10a0001c 	xori	r2,r2,32768
   27160:	10a00004 	addi	r2,r2,-32768
   27164:	1809883a 	mov	r4,r3
   27168:	100b883a 	mov	r5,r2
   2716c:	000d883a 	mov	r6,zero
   27170:	0024e840 	call	24e84 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
   27174:	10000926 	beq	r2,zero,2719c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   27178:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
   2717c:	1009883a 	mov	r4,r2
   27180:	017fffc4 	movi	r5,-1
   27184:	000d883a 	mov	r6,zero
   27188:	0024e840 	call	24e84 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
   2718c:	10000326 	beq	r2,zero,2719c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   27190:	0024cac0 	call	24cac <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   27194:	e0bffe17 	ldw	r2,-8(fp)
   27198:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   2719c:	e0bffd8b 	ldhu	r2,-10(fp)
   271a0:	10bfffcc 	andi	r2,r2,65535
   271a4:	10bffe0c 	andi	r2,r2,65528
   271a8:	e0bff915 	stw	r2,-28(fp)
   271ac:	00000206 	br	271b8 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   271b0:	00bfffc4 	movi	r2,-1
   271b4:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   271b8:	e0bff917 	ldw	r2,-28(fp)
   271bc:	00fffdd4 	movui	r3,65527
   271c0:	18800316 	blt	r3,r2,271d0 <find_first_empty_record_in_a_subdirectory+0x23c>
   271c4:	e0bff817 	ldw	r2,-32(fp)
   271c8:	10bfffe0 	cmpeqi	r2,r2,-1
   271cc:	103f7a1e 	bne	r2,zero,26fb8 <__alt_data_end+0xf4026fb8>
    return result; 
   271d0:	e0bff817 	ldw	r2,-32(fp)
}
   271d4:	e037883a 	mov	sp,fp
   271d8:	dfc00117 	ldw	ra,4(sp)
   271dc:	df000017 	ldw	fp,0(sp)
   271e0:	dec00204 	addi	sp,sp,8
   271e4:	f800283a 	ret

000271e8 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   271e8:	defff904 	addi	sp,sp,-28
   271ec:	dfc00615 	stw	ra,24(sp)
   271f0:	df000515 	stw	fp,20(sp)
   271f4:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   271f8:	00820034 	movhi	r2,2048
   271fc:	1086c404 	addi	r2,r2,6928
   27200:	1080050b 	ldhu	r2,20(r2)
   27204:	10bfffcc 	andi	r2,r2,65535
   27208:	1006917a 	slli	r3,r2,5
   2720c:	00820034 	movhi	r2,2048
   27210:	1086c404 	addi	r2,r2,6928
   27214:	1080030b 	ldhu	r2,12(r2)
   27218:	10bfffcc 	andi	r2,r2,65535
   2721c:	1809883a 	mov	r4,r3
   27220:	100b883a 	mov	r5,r2
   27224:	002429c0 	call	2429c <__divsi3>
   27228:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   2722c:	00bfffc4 	movi	r2,-1
   27230:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   27234:	e03ffb15 	stw	zero,-20(fp)
   27238:	00002f06 	br	272f8 <find_first_empty_record_in_root_directory+0x110>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   2723c:	00820034 	movhi	r2,2048
   27240:	1086c404 	addi	r2,r2,6928
   27244:	10c01317 	ldw	r3,76(r2)
   27248:	e0bffb17 	ldw	r2,-20(fp)
   2724c:	1885883a 	add	r2,r3,r2
   27250:	1007883a 	mov	r3,r2
   27254:	d0a03617 	ldw	r2,-32552(gp)
   27258:	1809883a 	mov	r4,r3
   2725c:	100b883a 	mov	r5,r2
   27260:	0024cf80 	call	24cf8 <Read_Sector_Data>
   27264:	10002026 	beq	r2,zero,272e8 <find_first_empty_record_in_root_directory+0x100>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   27268:	e03ffc15 	stw	zero,-16(fp)
   2726c:	00001a06 	br	272d8 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   27270:	e0bffc17 	ldw	r2,-16(fp)
   27274:	1004917a 	slli	r2,r2,5
   27278:	1007883a 	mov	r3,r2
   2727c:	d0a03817 	ldw	r2,-32544(gp)
   27280:	10800a17 	ldw	r2,40(r2)
   27284:	1885883a 	add	r2,r3,r2
   27288:	10800023 	ldbuio	r2,0(r2)
   2728c:	10803fcc 	andi	r2,r2,255
   27290:	10803fcc 	andi	r2,r2,255
   27294:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   27298:	e0bfff0b 	ldhu	r2,-4(fp)
   2729c:	10803960 	cmpeqi	r2,r2,229
   272a0:	1000021e 	bne	r2,zero,272ac <find_first_empty_record_in_root_directory+0xc4>
   272a4:	e0bfff0b 	ldhu	r2,-4(fp)
   272a8:	1000081e 	bne	r2,zero,272cc <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
   272ac:	e0bffb17 	ldw	r2,-20(fp)
   272b0:	1006913a 	slli	r3,r2,4
   272b4:	e0bffc17 	ldw	r2,-16(fp)
   272b8:	1885883a 	add	r2,r3,r2
   272bc:	1004943a 	slli	r2,r2,16
   272c0:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   272c4:	e0bffe17 	ldw	r2,-8(fp)
   272c8:	00000f06 	br	27308 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   272cc:	e0bffc17 	ldw	r2,-16(fp)
   272d0:	10800044 	addi	r2,r2,1
   272d4:	e0bffc15 	stw	r2,-16(fp)
   272d8:	e0bffc17 	ldw	r2,-16(fp)
   272dc:	10800410 	cmplti	r2,r2,16
   272e0:	103fe31e 	bne	r2,zero,27270 <__alt_data_end+0xf4027270>
   272e4:	00000106 	br	272ec <find_first_empty_record_in_root_directory+0x104>
                }
            }
        }
        else
        {
            break;
   272e8:	00000606 	br	27304 <find_first_empty_record_in_root_directory+0x11c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   272ec:	e0bffb17 	ldw	r2,-20(fp)
   272f0:	10800044 	addi	r2,r2,1
   272f4:	e0bffb15 	stw	r2,-20(fp)
   272f8:	e0fffb17 	ldw	r3,-20(fp)
   272fc:	e0bffd17 	ldw	r2,-12(fp)
   27300:	18bfce16 	blt	r3,r2,2723c <__alt_data_end+0xf402723c>
        else
        {
            break;
        }
    }
    return result;
   27304:	e0bffe17 	ldw	r2,-8(fp)
}
   27308:	e037883a 	mov	sp,fp
   2730c:	dfc00117 	ldw	ra,4(sp)
   27310:	df000017 	ldw	fp,0(sp)
   27314:	dec00204 	addi	sp,sp,8
   27318:	f800283a 	ret

0002731c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   2731c:	defffa04 	addi	sp,sp,-24
   27320:	df000515 	stw	fp,20(sp)
   27324:	df000504 	addi	fp,sp,20
   27328:	e13ffd15 	stw	r4,-12(fp)
   2732c:	e17ffe15 	stw	r5,-8(fp)
   27330:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   27334:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   27338:	e03ffb15 	stw	zero,-20(fp)
   2733c:	00002506 	br	273d4 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   27340:	e0bffc17 	ldw	r2,-16(fp)
   27344:	e0fffd17 	ldw	r3,-12(fp)
   27348:	1885883a 	add	r2,r3,r2
   2734c:	10800003 	ldbu	r2,0(r2)
   27350:	10803fcc 	andi	r2,r2,255
   27354:	1080201c 	xori	r2,r2,128
   27358:	10bfe004 	addi	r2,r2,-128
   2735c:	10800ba0 	cmpeqi	r2,r2,46
   27360:	1000141e 	bne	r2,zero,273b4 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   27364:	e0bffb17 	ldw	r2,-20(fp)
   27368:	e0fffe17 	ldw	r3,-8(fp)
   2736c:	1885883a 	add	r2,r3,r2
   27370:	e0fffc17 	ldw	r3,-16(fp)
   27374:	e13ffd17 	ldw	r4,-12(fp)
   27378:	20c7883a 	add	r3,r4,r3
   2737c:	18c00003 	ldbu	r3,0(r3)
   27380:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   27384:	e0bffc17 	ldw	r2,-16(fp)
   27388:	e0fffd17 	ldw	r3,-12(fp)
   2738c:	1885883a 	add	r2,r3,r2
   27390:	10800003 	ldbu	r2,0(r2)
   27394:	10803fcc 	andi	r2,r2,255
   27398:	1080201c 	xori	r2,r2,128
   2739c:	10bfe004 	addi	r2,r2,-128
   273a0:	10000926 	beq	r2,zero,273c8 <convert_filename_to_name_extension+0xac>
   273a4:	e0bffc17 	ldw	r2,-16(fp)
   273a8:	10800044 	addi	r2,r2,1
   273ac:	e0bffc15 	stw	r2,-16(fp)
   273b0:	00000506 	br	273c8 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   273b4:	e0bffb17 	ldw	r2,-20(fp)
   273b8:	e0fffe17 	ldw	r3,-8(fp)
   273bc:	1885883a 	add	r2,r3,r2
   273c0:	00c00804 	movi	r3,32
   273c4:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   273c8:	e0bffb17 	ldw	r2,-20(fp)
   273cc:	10800044 	addi	r2,r2,1
   273d0:	e0bffb15 	stw	r2,-20(fp)
   273d4:	e0bffb17 	ldw	r2,-20(fp)
   273d8:	10800210 	cmplti	r2,r2,8
   273dc:	103fd81e 	bne	r2,zero,27340 <__alt_data_end+0xf4027340>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   273e0:	e0bffc17 	ldw	r2,-16(fp)
   273e4:	e0fffd17 	ldw	r3,-12(fp)
   273e8:	1885883a 	add	r2,r3,r2
   273ec:	10800003 	ldbu	r2,0(r2)
   273f0:	10803fcc 	andi	r2,r2,255
   273f4:	1080201c 	xori	r2,r2,128
   273f8:	10bfe004 	addi	r2,r2,-128
   273fc:	10800b98 	cmpnei	r2,r2,46
   27400:	1000031e 	bne	r2,zero,27410 <convert_filename_to_name_extension+0xf4>
   27404:	e0bffc17 	ldw	r2,-16(fp)
   27408:	10800044 	addi	r2,r2,1
   2740c:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   27410:	e03ffb15 	stw	zero,-20(fp)
   27414:	00001c06 	br	27488 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   27418:	e0bffc17 	ldw	r2,-16(fp)
   2741c:	e0fffd17 	ldw	r3,-12(fp)
   27420:	1885883a 	add	r2,r3,r2
   27424:	10800003 	ldbu	r2,0(r2)
   27428:	10803fcc 	andi	r2,r2,255
   2742c:	1080201c 	xori	r2,r2,128
   27430:	10bfe004 	addi	r2,r2,-128
   27434:	10000c26 	beq	r2,zero,27468 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   27438:	e0bffb17 	ldw	r2,-20(fp)
   2743c:	e0ffff17 	ldw	r3,-4(fp)
   27440:	1885883a 	add	r2,r3,r2
   27444:	e0fffc17 	ldw	r3,-16(fp)
   27448:	e13ffd17 	ldw	r4,-12(fp)
   2744c:	20c7883a 	add	r3,r4,r3
   27450:	18c00003 	ldbu	r3,0(r3)
   27454:	10c00005 	stb	r3,0(r2)
            local++;
   27458:	e0bffc17 	ldw	r2,-16(fp)
   2745c:	10800044 	addi	r2,r2,1
   27460:	e0bffc15 	stw	r2,-16(fp)
   27464:	00000506 	br	2747c <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   27468:	e0bffb17 	ldw	r2,-20(fp)
   2746c:	e0ffff17 	ldw	r3,-4(fp)
   27470:	1885883a 	add	r2,r3,r2
   27474:	00c00804 	movi	r3,32
   27478:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   2747c:	e0bffb17 	ldw	r2,-20(fp)
   27480:	10800044 	addi	r2,r2,1
   27484:	e0bffb15 	stw	r2,-20(fp)
   27488:	e0bffb17 	ldw	r2,-20(fp)
   2748c:	108000d0 	cmplti	r2,r2,3
   27490:	103fe11e 	bne	r2,zero,27418 <__alt_data_end+0xf4027418>
        {
            extension[counter] = ' ';
        }
    }

}
   27494:	e037883a 	mov	sp,fp
   27498:	df000017 	ldw	fp,0(sp)
   2749c:	dec00104 	addi	sp,sp,4
   274a0:	f800283a 	ret

000274a4 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   274a4:	defff404 	addi	sp,sp,-48
   274a8:	dfc00b15 	stw	ra,44(sp)
   274ac:	df000a15 	stw	fp,40(sp)
   274b0:	dc000915 	stw	r16,36(sp)
   274b4:	df000a04 	addi	fp,sp,40
   274b8:	e13ffc15 	stw	r4,-16(fp)
   274bc:	e17ffd15 	stw	r5,-12(fp)
   274c0:	e1bffe15 	stw	r6,-8(fp)
    unsigned int cluster_number;
    bool result = false;
   274c4:	e03ff615 	stw	zero,-40(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   274c8:	e0bffb04 	addi	r2,fp,-20
   274cc:	1009883a 	mov	r4,r2
   274d0:	0026de00 	call	26de0 <find_first_empty_cluster>
   274d4:	1000a126 	beq	r2,zero,2775c <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   274d8:	e0bffe17 	ldw	r2,-8(fp)
   274dc:	10800a17 	ldw	r2,40(r2)
   274e0:	1000031e 	bne	r2,zero,274f0 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   274e4:	00271e80 	call	271e8 <find_first_empty_record_in_root_directory>
   274e8:	e0bff715 	stw	r2,-36(fp)
   274ec:	00000606 	br	27508 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   274f0:	e0bffe17 	ldw	r2,-8(fp)
   274f4:	1080058b 	ldhu	r2,22(r2)
   274f8:	10bfffcc 	andi	r2,r2,65535
   274fc:	1009883a 	mov	r4,r2
   27500:	0026f940 	call	26f94 <find_first_empty_record_in_a_subdirectory>
   27504:	e0bff715 	stw	r2,-36(fp)
        }
        if (record_index >= 0)
   27508:	e0bff717 	ldw	r2,-36(fp)
   2750c:	10009316 	blt	r2,zero,2775c <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   27510:	e13ffc17 	ldw	r4,-16(fp)
   27514:	00260d80 	call	260d8 <get_dir_divider_location>
   27518:	e0bff815 	stw	r2,-32(fp)
            int last_dir_separator = 0;
   2751c:	e03ff915 	stw	zero,-28(fp)

            // Skip through all directory separators.
            while (location > 0)
   27520:	00000b06 	br	27550 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
   27524:	e0fff917 	ldw	r3,-28(fp)
   27528:	e0bff817 	ldw	r2,-32(fp)
   2752c:	1885883a 	add	r2,r3,r2
   27530:	10800044 	addi	r2,r2,1
   27534:	e0bff915 	stw	r2,-28(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   27538:	e0bff917 	ldw	r2,-28(fp)
   2753c:	e0fffc17 	ldw	r3,-16(fp)
   27540:	1885883a 	add	r2,r3,r2
   27544:	1009883a 	mov	r4,r2
   27548:	00260d80 	call	260d8 <get_dir_divider_location>
   2754c:	e0bff815 	stw	r2,-32(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   27550:	e0bff817 	ldw	r2,-32(fp)
   27554:	00bff316 	blt	zero,r2,27524 <__alt_data_end+0xf4027524>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   27558:	e0bff917 	ldw	r2,-28(fp)
   2755c:	e0fffc17 	ldw	r3,-16(fp)
   27560:	1889883a 	add	r4,r3,r2
   27564:	e0fffd17 	ldw	r3,-12(fp)
   27568:	e0bffd17 	ldw	r2,-12(fp)
   2756c:	10800204 	addi	r2,r2,8
   27570:	180b883a 	mov	r5,r3
   27574:	100d883a 	mov	r6,r2
   27578:	002731c0 	call	2731c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   2757c:	e0bffd17 	ldw	r2,-12(fp)
   27580:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   27584:	e0bffd17 	ldw	r2,-12(fp)
   27588:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   2758c:	e0bffd17 	ldw	r2,-12(fp)
   27590:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   27594:	e0bffd17 	ldw	r2,-12(fp)
   27598:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   2759c:	e0bffd17 	ldw	r2,-12(fp)
   275a0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   275a4:	e0bffd17 	ldw	r2,-12(fp)
   275a8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   275ac:	e0bffb17 	ldw	r2,-20(fp)
   275b0:	1007883a 	mov	r3,r2
   275b4:	e0bffd17 	ldw	r2,-12(fp)
   275b8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   275bc:	e0bffd17 	ldw	r2,-12(fp)
   275c0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   275c4:	e0fffb17 	ldw	r3,-20(fp)
   275c8:	e0bffd17 	ldw	r2,-12(fp)
   275cc:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   275d0:	e0bffd17 	ldw	r2,-12(fp)
   275d4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   275d8:	e0bffd17 	ldw	r2,-12(fp)
   275dc:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   275e0:	e0bff717 	ldw	r2,-36(fp)
   275e4:	10ffffcc 	andi	r3,r2,65535
   275e8:	e0bffd17 	ldw	r2,-12(fp)
   275ec:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   275f0:	e0bff717 	ldw	r2,-36(fp)
   275f4:	1004d43a 	srli	r2,r2,16
   275f8:	1000010e 	bge	r2,zero,27600 <create_file+0x15c>
   275fc:	108003c4 	addi	r2,r2,15
   27600:	1005d13a 	srai	r2,r2,4
   27604:	1007883a 	mov	r3,r2
   27608:	e0bffd17 	ldw	r2,-12(fp)
   2760c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   27610:	e0bff717 	ldw	r2,-36(fp)
   27614:	1004d43a 	srli	r2,r2,16
   27618:	1007883a 	mov	r3,r2
   2761c:	00a00034 	movhi	r2,32768
   27620:	108003c4 	addi	r2,r2,15
   27624:	1884703a 	and	r2,r3,r2
   27628:	1000040e 	bge	r2,zero,2763c <create_file+0x198>
   2762c:	10bfffc4 	addi	r2,r2,-1
   27630:	00fffc04 	movi	r3,-16
   27634:	10c4b03a 	or	r2,r2,r3
   27638:	10800044 	addi	r2,r2,1
   2763c:	1004917a 	slli	r2,r2,5
   27640:	1007883a 	mov	r3,r2
   27644:	e0bffd17 	ldw	r2,-12(fp)
   27648:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   2764c:	e0bffe17 	ldw	r2,-8(fp)
   27650:	1080058b 	ldhu	r2,22(r2)
   27654:	10ffffcc 	andi	r3,r2,65535
   27658:	e0bffd17 	ldw	r2,-12(fp)
   2765c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   27660:	e0bffd17 	ldw	r2,-12(fp)
   27664:	00c00044 	movi	r3,1
   27668:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   2766c:	e0bffd17 	ldw	r2,-12(fp)
   27670:	00c00044 	movi	r3,1
   27674:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   27678:	e0bffd17 	ldw	r2,-12(fp)
   2767c:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   27680:	1000071e 	bne	r2,zero,276a0 <create_file+0x1fc>
   27684:	00820034 	movhi	r2,2048
   27688:	1086c404 	addi	r2,r2,6928
   2768c:	10c01317 	ldw	r3,76(r2)
   27690:	e0bffd17 	ldw	r2,-12(fp)
   27694:	10800b17 	ldw	r2,44(r2)
   27698:	1885883a 	add	r2,r3,r2
   2769c:	00001106 	br	276e4 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   276a0:	00820034 	movhi	r2,2048
   276a4:	1086c404 	addi	r2,r2,6928
   276a8:	14001417 	ldw	r16,80(r2)
   276ac:	e0bffd17 	ldw	r2,-12(fp)
   276b0:	10800a17 	ldw	r2,40(r2)
   276b4:	10ffff84 	addi	r3,r2,-2
   276b8:	00820034 	movhi	r2,2048
   276bc:	1086c404 	addi	r2,r2,6928
   276c0:	10800383 	ldbu	r2,14(r2)
   276c4:	10803fcc 	andi	r2,r2,255
   276c8:	1809883a 	mov	r4,r3
   276cc:	100b883a 	mov	r5,r2
   276d0:	00225e40 	call	225e4 <__mulsi3>
   276d4:	8087883a 	add	r3,r16,r2
                                     file_record->file_record_sector_in_cluster);
   276d8:	e0bffd17 	ldw	r2,-12(fp)
   276dc:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   276e0:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   276e4:	e0bffa15 	stw	r2,-24(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   276e8:	e0fffa17 	ldw	r3,-24(fp)
   276ec:	d0a03617 	ldw	r2,-32552(gp)
   276f0:	1809883a 	mov	r4,r3
   276f4:	100b883a 	mov	r5,r2
   276f8:	0024cf80 	call	24cf8 <Read_Sector_Data>
   276fc:	10001726 	beq	r2,zero,2775c <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   27700:	e0bffd17 	ldw	r2,-12(fp)
   27704:	10800c0b 	ldhu	r2,48(r2)
   27708:	10bfffcc 	andi	r2,r2,65535
   2770c:	10a0001c 	xori	r2,r2,32768
   27710:	10a00004 	addi	r2,r2,-32768
   27714:	1009883a 	mov	r4,r2
   27718:	e17ffd17 	ldw	r5,-12(fp)
   2771c:	002538c0 	call	2538c <Write_File_Record_At_Offset>
   27720:	10000e26 	beq	r2,zero,2775c <create_file+0x2b8>
                {
                    Save_Modified_Sector();
   27724:	0024cac0 	call	24cac <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   27728:	e0bffb17 	ldw	r2,-20(fp)
   2772c:	1009883a 	mov	r4,r2
   27730:	017fffc4 	movi	r5,-1
   27734:	01800044 	movi	r6,1
   27738:	0024e840 	call	24e84 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   2773c:	e0bffb17 	ldw	r2,-20(fp)
   27740:	1009883a 	mov	r4,r2
   27744:	017fffc4 	movi	r5,-1
   27748:	000d883a 	mov	r6,zero
   2774c:	0024e840 	call	24e84 <mark_cluster>
   27750:	10000226 	beq	r2,zero,2775c <create_file+0x2b8>
                    {
                        result = true;
   27754:	00800044 	movi	r2,1
   27758:	e0bff615 	stw	r2,-40(fp)
                }
            }
        }

    }
    return result;           
   2775c:	e0bff617 	ldw	r2,-40(fp)
}
   27760:	e6ffff04 	addi	sp,fp,-4
   27764:	dfc00217 	ldw	ra,8(sp)
   27768:	df000117 	ldw	fp,4(sp)
   2776c:	dc000017 	ldw	r16,0(sp)
   27770:	dec00304 	addi	sp,sp,12
   27774:	f800283a 	ret

00027778 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   27778:	defffb04 	addi	sp,sp,-20
   2777c:	df000415 	stw	fp,16(sp)
   27780:	df000404 	addi	fp,sp,16
   27784:	e13ffe15 	stw	r4,-8(fp)
   27788:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   2778c:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   27790:	e03ffc15 	stw	zero,-16(fp)
   27794:	00001506 	br	277ec <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   27798:	e0fffe17 	ldw	r3,-8(fp)
   2779c:	e0bffc17 	ldw	r2,-16(fp)
   277a0:	1885883a 	add	r2,r3,r2
   277a4:	10800003 	ldbu	r2,0(r2)
   277a8:	10803fcc 	andi	r2,r2,255
   277ac:	10800820 	cmpeqi	r2,r2,32
   277b0:	10000b1e 	bne	r2,zero,277e0 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   277b4:	e0bffd17 	ldw	r2,-12(fp)
   277b8:	e0ffff17 	ldw	r3,-4(fp)
   277bc:	1885883a 	add	r2,r3,r2
   277c0:	e13ffe17 	ldw	r4,-8(fp)
   277c4:	e0fffc17 	ldw	r3,-16(fp)
   277c8:	20c7883a 	add	r3,r4,r3
   277cc:	18c00003 	ldbu	r3,0(r3)
   277d0:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   277d4:	e0bffd17 	ldw	r2,-12(fp)
   277d8:	10800044 	addi	r2,r2,1
   277dc:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   277e0:	e0bffc17 	ldw	r2,-16(fp)
   277e4:	10800044 	addi	r2,r2,1
   277e8:	e0bffc15 	stw	r2,-16(fp)
   277ec:	e0bffc17 	ldw	r2,-16(fp)
   277f0:	10800210 	cmplti	r2,r2,8
   277f4:	103fe81e 	bne	r2,zero,27798 <__alt_data_end+0xf4027798>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   277f8:	e0bffe17 	ldw	r2,-8(fp)
   277fc:	10800203 	ldbu	r2,8(r2)
   27800:	10803fcc 	andi	r2,r2,255
   27804:	10800820 	cmpeqi	r2,r2,32
   27808:	1000241e 	bne	r2,zero,2789c <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   2780c:	e0bffd17 	ldw	r2,-12(fp)
   27810:	e0ffff17 	ldw	r3,-4(fp)
   27814:	1885883a 	add	r2,r3,r2
   27818:	00c00b84 	movi	r3,46
   2781c:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   27820:	e0bffd17 	ldw	r2,-12(fp)
   27824:	10800044 	addi	r2,r2,1
   27828:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   2782c:	e03ffc15 	stw	zero,-16(fp)
   27830:	00001706 	br	27890 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   27834:	e0fffe17 	ldw	r3,-8(fp)
   27838:	e0bffc17 	ldw	r2,-16(fp)
   2783c:	1885883a 	add	r2,r3,r2
   27840:	10800204 	addi	r2,r2,8
   27844:	10800003 	ldbu	r2,0(r2)
   27848:	10803fcc 	andi	r2,r2,255
   2784c:	10800820 	cmpeqi	r2,r2,32
   27850:	10000c1e 	bne	r2,zero,27884 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   27854:	e0bffd17 	ldw	r2,-12(fp)
   27858:	e0ffff17 	ldw	r3,-4(fp)
   2785c:	1885883a 	add	r2,r3,r2
   27860:	e13ffe17 	ldw	r4,-8(fp)
   27864:	e0fffc17 	ldw	r3,-16(fp)
   27868:	20c7883a 	add	r3,r4,r3
   2786c:	18c00204 	addi	r3,r3,8
   27870:	18c00003 	ldbu	r3,0(r3)
   27874:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   27878:	e0bffd17 	ldw	r2,-12(fp)
   2787c:	10800044 	addi	r2,r2,1
   27880:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   27884:	e0bffc17 	ldw	r2,-16(fp)
   27888:	10800044 	addi	r2,r2,1
   2788c:	e0bffc15 	stw	r2,-16(fp)
   27890:	e0bffc17 	ldw	r2,-16(fp)
   27894:	108000d0 	cmplti	r2,r2,3
   27898:	103fe61e 	bne	r2,zero,27834 <__alt_data_end+0xf4027834>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   2789c:	e0bffd17 	ldw	r2,-12(fp)
   278a0:	e0ffff17 	ldw	r3,-4(fp)
   278a4:	1885883a 	add	r2,r3,r2
   278a8:	10000005 	stb	zero,0(r2)
}
   278ac:	e037883a 	mov	sp,fp
   278b0:	df000017 	ldw	fp,0(sp)
   278b4:	dec00104 	addi	sp,sp,4
   278b8:	f800283a 	ret

000278bc <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   278bc:	defffc04 	addi	sp,sp,-16
   278c0:	dfc00315 	stw	ra,12(sp)
   278c4:	df000215 	stw	fp,8(sp)
   278c8:	df000204 	addi	fp,sp,8
   278cc:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   278d0:	e13fff17 	ldw	r4,-4(fp)
   278d4:	01420034 	movhi	r5,2048
   278d8:	2943d304 	addi	r5,r5,3916
   278dc:	00298540 	call	29854 <alt_find_dev>
   278e0:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   278e4:	e0bffe17 	ldw	r2,-8(fp)
   278e8:	10001e26 	beq	r2,zero,27964 <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   278ec:	e0bffe17 	ldw	r2,-8(fp)
   278f0:	10800a17 	ldw	r2,40(r2)
   278f4:	10808d04 	addi	r2,r2,564
   278f8:	d0a03015 	stw	r2,-32576(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   278fc:	e0bffe17 	ldw	r2,-8(fp)
   27900:	10800a17 	ldw	r2,40(r2)
   27904:	10808904 	addi	r2,r2,548
   27908:	d0a03115 	stw	r2,-32572(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   2790c:	e0bffe17 	ldw	r2,-8(fp)
   27910:	10800a17 	ldw	r2,40(r2)
   27914:	10808404 	addi	r2,r2,528
   27918:	d0a03215 	stw	r2,-32568(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   2791c:	e0bffe17 	ldw	r2,-8(fp)
   27920:	10800a17 	ldw	r2,40(r2)
   27924:	10808c04 	addi	r2,r2,560
   27928:	d0a03315 	stw	r2,-32564(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   2792c:	e0bffe17 	ldw	r2,-8(fp)
   27930:	10800a17 	ldw	r2,40(r2)
   27934:	10808b04 	addi	r2,r2,556
   27938:	d0a03415 	stw	r2,-32560(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   2793c:	e0bffe17 	ldw	r2,-8(fp)
   27940:	10800a17 	ldw	r2,40(r2)
   27944:	d0a03515 	stw	r2,-32556(gp)
		device_pointer = dev;
   27948:	e0bffe17 	ldw	r2,-8(fp)
   2794c:	d0a03815 	stw	r2,-32544(gp)
		initialized = false;
   27950:	d0202e15 	stw	zero,-32584(gp)
		is_sd_card_formated_as_FAT16 = false;
   27954:	d0202f15 	stw	zero,-32580(gp)
		search_data.valid = false;
   27958:	00820034 	movhi	r2,2048
   2795c:	1086bf04 	addi	r2,r2,6908
   27960:	10000415 	stw	zero,16(r2)
	}
	return dev;
   27964:	e0bffe17 	ldw	r2,-8(fp)
}
   27968:	e037883a 	mov	sp,fp
   2796c:	dfc00117 	ldw	ra,4(sp)
   27970:	df000017 	ldw	fp,0(sp)
   27974:	dec00204 	addi	sp,sp,8
   27978:	f800283a 	ret

0002797c <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   2797c:	defffd04 	addi	sp,sp,-12
   27980:	df000215 	stw	fp,8(sp)
   27984:	df000204 	addi	fp,sp,8
    bool result = false;
   27988:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   2798c:	d0a03817 	ldw	r2,-32544(gp)
   27990:	10000826 	beq	r2,zero,279b4 <alt_up_sd_card_is_Present+0x38>
   27994:	d0a03017 	ldw	r2,-32576(gp)
   27998:	1080002b 	ldhuio	r2,0(r2)
   2799c:	10bfffcc 	andi	r2,r2,65535
   279a0:	1080008c 	andi	r2,r2,2
   279a4:	10000326 	beq	r2,zero,279b4 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   279a8:	00800044 	movi	r2,1
   279ac:	e0bffe15 	stw	r2,-8(fp)
   279b0:	00001e06 	br	27a2c <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   279b4:	d0a02e17 	ldw	r2,-32584(gp)
   279b8:	10800058 	cmpnei	r2,r2,1
   279bc:	10001b1e 	bne	r2,zero,27a2c <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   279c0:	d0202e15 	stw	zero,-32584(gp)
		search_data.valid = false;
   279c4:	00820034 	movhi	r2,2048
   279c8:	1086bf04 	addi	r2,r2,6908
   279cc:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   279d0:	d0202f15 	stw	zero,-32580(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   279d4:	e03fff15 	stw	zero,-4(fp)
   279d8:	00001106 	br	27a20 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   279dc:	00820034 	movhi	r2,2048
   279e0:	1086d904 	addi	r2,r2,7012
   279e4:	e0ffff17 	ldw	r3,-4(fp)
   279e8:	180691ba 	slli	r3,r3,6
   279ec:	10c5883a 	add	r2,r2,r3
   279f0:	10800f04 	addi	r2,r2,60
   279f4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   279f8:	00820034 	movhi	r2,2048
   279fc:	1086d904 	addi	r2,r2,7012
   27a00:	e0ffff17 	ldw	r3,-4(fp)
   27a04:	180691ba 	slli	r3,r3,6
   27a08:	10c5883a 	add	r2,r2,r3
   27a0c:	10800e04 	addi	r2,r2,56
   27a10:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   27a14:	e0bfff17 	ldw	r2,-4(fp)
   27a18:	10800044 	addi	r2,r2,1
   27a1c:	e0bfff15 	stw	r2,-4(fp)
   27a20:	e0bfff17 	ldw	r2,-4(fp)
   27a24:	10800510 	cmplti	r2,r2,20
   27a28:	103fec1e 	bne	r2,zero,279dc <__alt_data_end+0xf40279dc>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   27a2c:	e0bffe17 	ldw	r2,-8(fp)
}
   27a30:	e037883a 	mov	sp,fp
   27a34:	df000017 	ldw	fp,0(sp)
   27a38:	dec00104 	addi	sp,sp,4
   27a3c:	f800283a 	ret

00027a40 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   27a40:	defffd04 	addi	sp,sp,-12
   27a44:	dfc00215 	stw	ra,8(sp)
   27a48:	df000115 	stw	fp,4(sp)
   27a4c:	df000104 	addi	fp,sp,4
	bool result = false;
   27a50:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   27a54:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   27a58:	10000c26 	beq	r2,zero,27a8c <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   27a5c:	d0a02e17 	ldw	r2,-32584(gp)
   27a60:	1000071e 	bne	r2,zero,27a80 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   27a64:	0025cc00 	call	25cc0 <Look_for_FAT16>
   27a68:	d0a02f15 	stw	r2,-32580(gp)
			initialized = is_sd_card_formated_as_FAT16;
   27a6c:	d0a02f17 	ldw	r2,-32580(gp)
   27a70:	d0a02e15 	stw	r2,-32584(gp)
			search_data.valid = false;
   27a74:	00820034 	movhi	r2,2048
   27a78:	1086bf04 	addi	r2,r2,6908
   27a7c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   27a80:	d0a02f17 	ldw	r2,-32580(gp)
   27a84:	e0bfff15 	stw	r2,-4(fp)
   27a88:	00000206 	br	27a94 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   27a8c:	d0202e15 	stw	zero,-32584(gp)
		is_sd_card_formated_as_FAT16 = false;
   27a90:	d0202f15 	stw	zero,-32580(gp)
	}

	return result;
   27a94:	e0bfff17 	ldw	r2,-4(fp)
}
   27a98:	e037883a 	mov	sp,fp
   27a9c:	dfc00117 	ldw	ra,4(sp)
   27aa0:	df000017 	ldw	fp,0(sp)
   27aa4:	dec00204 	addi	sp,sp,8
   27aa8:	f800283a 	ret

00027aac <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   27aac:	deffea04 	addi	sp,sp,-88
   27ab0:	dfc01515 	stw	ra,84(sp)
   27ab4:	df001415 	stw	fp,80(sp)
   27ab8:	df001404 	addi	fp,sp,80
   27abc:	e13ffe15 	stw	r4,-8(fp)
   27ac0:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   27ac4:	00800084 	movi	r2,2
   27ac8:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   27acc:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   27ad0:	10002426 	beq	r2,zero,27b64 <alt_up_sd_card_find_first+0xb8>
   27ad4:	d0a02f17 	ldw	r2,-32580(gp)
   27ad8:	10002226 	beq	r2,zero,27b64 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   27adc:	e0ffed04 	addi	r3,fp,-76
   27ae0:	e0bfee04 	addi	r2,fp,-72
   27ae4:	e13ffe17 	ldw	r4,-8(fp)
   27ae8:	180b883a 	mov	r5,r3
   27aec:	100d883a 	mov	r6,r2
   27af0:	002642c0 	call	2642c <get_home_directory_cluster_for_file>
   27af4:	10001926 	beq	r2,zero,27b5c <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   27af8:	e0bfed17 	ldw	r2,-76(fp)
   27afc:	1007883a 	mov	r3,r2
   27b00:	00820034 	movhi	r2,2048
   27b04:	1086bf04 	addi	r2,r2,6908
   27b08:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   27b0c:	e0bfed17 	ldw	r2,-76(fp)
   27b10:	1007883a 	mov	r3,r2
   27b14:	00820034 	movhi	r2,2048
   27b18:	1086bf04 	addi	r2,r2,6908
   27b1c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   27b20:	00820034 	movhi	r2,2048
   27b24:	1086bf04 	addi	r2,r2,6908
   27b28:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   27b2c:	00820034 	movhi	r2,2048
   27b30:	1086bf04 	addi	r2,r2,6908
   27b34:	00ffffc4 	movi	r3,-1
   27b38:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   27b3c:	00820034 	movhi	r2,2048
   27b40:	1086bf04 	addi	r2,r2,6908
   27b44:	00c00044 	movi	r3,1
   27b48:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   27b4c:	e13fff17 	ldw	r4,-4(fp)
   27b50:	0027b7c0 	call	27b7c <alt_up_sd_card_find_next>
   27b54:	e0bfec0d 	sth	r2,-80(fp)
   27b58:	00000206 	br	27b64 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   27b5c:	00800044 	movi	r2,1
   27b60:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   27b64:	e0bfec0b 	ldhu	r2,-80(fp)
}
   27b68:	e037883a 	mov	sp,fp
   27b6c:	dfc00117 	ldw	ra,4(sp)
   27b70:	df000017 	ldw	fp,0(sp)
   27b74:	dec00204 	addi	sp,sp,8
   27b78:	f800283a 	ret

00027b7c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   27b7c:	deffe404 	addi	sp,sp,-112
   27b80:	dfc01b15 	stw	ra,108(sp)
   27b84:	df001a15 	stw	fp,104(sp)
   27b88:	df001a04 	addi	fp,sp,104
   27b8c:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   27b90:	00800084 	movi	r2,2
   27b94:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   27b98:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   27b9c:	1000e026 	beq	r2,zero,27f20 <alt_up_sd_card_find_next+0x3a4>
   27ba0:	d0a02f17 	ldw	r2,-32580(gp)
   27ba4:	1000de26 	beq	r2,zero,27f20 <alt_up_sd_card_find_next+0x3a4>
	{
		if (search_data.valid)
   27ba8:	00820034 	movhi	r2,2048
   27bac:	1086bf04 	addi	r2,r2,6908
   27bb0:	10800417 	ldw	r2,16(r2)
   27bb4:	1000d826 	beq	r2,zero,27f18 <alt_up_sd_card_find_next+0x39c>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   27bb8:	00820034 	movhi	r2,2048
   27bbc:	1086bf04 	addi	r2,r2,6908
   27bc0:	10800117 	ldw	r2,4(r2)
   27bc4:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   27bc8:	e0bfe717 	ldw	r2,-100(fp)
   27bcc:	1000571e 	bne	r2,zero,27d2c <alt_up_sd_card_find_next+0x1b0>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   27bd0:	00820034 	movhi	r2,2048
   27bd4:	1086c404 	addi	r2,r2,6928
   27bd8:	1080050b 	ldhu	r2,20(r2)
   27bdc:	10bfffcc 	andi	r2,r2,65535
   27be0:	1006917a 	slli	r3,r2,5
   27be4:	00820034 	movhi	r2,2048
   27be8:	1086c404 	addi	r2,r2,6928
   27bec:	1080030b 	ldhu	r2,12(r2)
   27bf0:	10bfffcc 	andi	r2,r2,65535
   27bf4:	1809883a 	mov	r4,r3
   27bf8:	100b883a 	mov	r5,r2
   27bfc:	002429c0 	call	2429c <__divsi3>
   27c00:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   27c04:	00820034 	movhi	r2,2048
   27c08:	1086bf04 	addi	r2,r2,6908
   27c0c:	10800217 	ldw	r2,8(r2)
   27c10:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   27c14:	00820034 	movhi	r2,2048
   27c18:	1086bf04 	addi	r2,r2,6908
   27c1c:	1080030b 	ldhu	r2,12(r2)
   27c20:	10bfffcc 	andi	r2,r2,65535
   27c24:	10a0001c 	xori	r2,r2,32768
   27c28:	10a00004 	addi	r2,r2,-32768
   27c2c:	10800044 	addi	r2,r2,1
   27c30:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   27c34:	00003706 	br	27d14 <alt_up_sd_card_find_next+0x198>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   27c38:	00820034 	movhi	r2,2048
   27c3c:	1086c404 	addi	r2,r2,6928
   27c40:	10c01317 	ldw	r3,76(r2)
   27c44:	e0bfe817 	ldw	r2,-96(fp)
   27c48:	1885883a 	add	r2,r3,r2
   27c4c:	1007883a 	mov	r3,r2
   27c50:	d0a03617 	ldw	r2,-32552(gp)
   27c54:	1809883a 	mov	r4,r3
   27c58:	100b883a 	mov	r5,r2
   27c5c:	0024cf80 	call	24cf8 <Read_Sector_Data>
   27c60:	10002826 	beq	r2,zero,27d04 <alt_up_sd_card_find_next+0x188>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   27c64:	00002206 	br	27cf0 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   27c68:	e0bfe917 	ldw	r2,-92(fp)
   27c6c:	1008917a 	slli	r4,r2,5
   27c70:	e0bfe817 	ldw	r2,-96(fp)
   27c74:	e0ffef04 	addi	r3,fp,-68
   27c78:	180b883a 	mov	r5,r3
   27c7c:	000d883a 	mov	r6,zero
   27c80:	100f883a 	mov	r7,r2
   27c84:	00251100 	call	25110 <Read_File_Record_At_Offset>
   27c88:	10001626 	beq	r2,zero,27ce4 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   27c8c:	e0bfef03 	ldbu	r2,-68(fp)
   27c90:	10803fcc 	andi	r2,r2,255
   27c94:	10001326 	beq	r2,zero,27ce4 <alt_up_sd_card_find_next+0x168>
   27c98:	e0bfef03 	ldbu	r2,-68(fp)
   27c9c:	10803fcc 	andi	r2,r2,255
   27ca0:	10803960 	cmpeqi	r2,r2,229
   27ca4:	10000f1e 	bne	r2,zero,27ce4 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   27ca8:	e0bfe917 	ldw	r2,-92(fp)
   27cac:	1007883a 	mov	r3,r2
   27cb0:	00820034 	movhi	r2,2048
   27cb4:	1086bf04 	addi	r2,r2,6908
   27cb8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   27cbc:	e0ffe817 	ldw	r3,-96(fp)
   27cc0:	00820034 	movhi	r2,2048
   27cc4:	1086bf04 	addi	r2,r2,6908
   27cc8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   27ccc:	e0bfef04 	addi	r2,fp,-68
   27cd0:	1009883a 	mov	r4,r2
   27cd4:	e17fff17 	ldw	r5,-4(fp)
   27cd8:	00277780 	call	27778 <copy_file_record_name_to_string>
									return 0;
   27cdc:	0005883a 	mov	r2,zero
   27ce0:	00009006 	br	27f24 <alt_up_sd_card_find_next+0x3a8>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   27ce4:	e0bfe917 	ldw	r2,-92(fp)
   27ce8:	10800044 	addi	r2,r2,1
   27cec:	e0bfe915 	stw	r2,-92(fp)
   27cf0:	e0bfe917 	ldw	r2,-92(fp)
   27cf4:	10800410 	cmplti	r2,r2,16
   27cf8:	103fdb1e 	bne	r2,zero,27c68 <__alt_data_end+0xf4027c68>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   27cfc:	e03fe915 	stw	zero,-92(fp)
   27d00:	00000106 	br	27d08 <alt_up_sd_card_find_next+0x18c>
					}
					else
					{
						break;
   27d04:	00000606 	br	27d20 <alt_up_sd_card_find_next+0x1a4>
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   27d08:	e0bfe817 	ldw	r2,-96(fp)
   27d0c:	10800044 	addi	r2,r2,1
   27d10:	e0bfe815 	stw	r2,-96(fp)
   27d14:	e0ffe817 	ldw	r3,-96(fp)
   27d18:	e0bfec17 	ldw	r2,-80(fp)
   27d1c:	18bfc616 	blt	r3,r2,27c38 <__alt_data_end+0xf4027c38>
					else
					{
						break;
					}
				}
				result = -1;
   27d20:	00bfffc4 	movi	r2,-1
   27d24:	e0bfe60d 	sth	r2,-104(fp)
   27d28:	00007a06 	br	27f14 <alt_up_sd_card_find_next+0x398>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   27d2c:	00820034 	movhi	r2,2048
   27d30:	1086bf04 	addi	r2,r2,6908
   27d34:	1080030b 	ldhu	r2,12(r2)
   27d38:	10bfffcc 	andi	r2,r2,65535
   27d3c:	10a0001c 	xori	r2,r2,32768
   27d40:	10a00004 	addi	r2,r2,-32768
   27d44:	10800044 	addi	r2,r2,1
   27d48:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   27d4c:	e0bfe717 	ldw	r2,-100(fp)
   27d50:	10ffff84 	addi	r3,r2,-2
   27d54:	00820034 	movhi	r2,2048
   27d58:	1086c404 	addi	r2,r2,6928
   27d5c:	10800383 	ldbu	r2,14(r2)
   27d60:	10803fcc 	andi	r2,r2,255
   27d64:	1809883a 	mov	r4,r3
   27d68:	100b883a 	mov	r5,r2
   27d6c:	00225e40 	call	225e4 <__mulsi3>
   27d70:	1007883a 	mov	r3,r2
   27d74:	00820034 	movhi	r2,2048
   27d78:	1086c404 	addi	r2,r2,6928
   27d7c:	10801417 	ldw	r2,80(r2)
   27d80:	1885883a 	add	r2,r3,r2
   27d84:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   27d88:	00820034 	movhi	r2,2048
   27d8c:	1086bf04 	addi	r2,r2,6908
   27d90:	10800217 	ldw	r2,8(r2)
   27d94:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   27d98:	00003806 	br	27e7c <alt_up_sd_card_find_next+0x300>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   27d9c:	e0ffeb17 	ldw	r3,-84(fp)
   27da0:	e0bfed17 	ldw	r2,-76(fp)
   27da4:	1887883a 	add	r3,r3,r2
   27da8:	d0a03617 	ldw	r2,-32552(gp)
   27dac:	1809883a 	mov	r4,r3
   27db0:	100b883a 	mov	r5,r2
   27db4:	0024cf80 	call	24cf8 <Read_Sector_Data>
   27db8:	10002c26 	beq	r2,zero,27e6c <alt_up_sd_card_find_next+0x2f0>
						{        
							for (; file_counter < 16; file_counter++)
   27dbc:	00002606 	br	27e58 <alt_up_sd_card_find_next+0x2dc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   27dc0:	e0bfea17 	ldw	r2,-88(fp)
   27dc4:	1008917a 	slli	r4,r2,5
   27dc8:	e0ffe717 	ldw	r3,-100(fp)
   27dcc:	e0bfeb17 	ldw	r2,-84(fp)
   27dd0:	e17fef04 	addi	r5,fp,-68
   27dd4:	180d883a 	mov	r6,r3
   27dd8:	100f883a 	mov	r7,r2
   27ddc:	00251100 	call	25110 <Read_File_Record_At_Offset>
   27de0:	10001a26 	beq	r2,zero,27e4c <alt_up_sd_card_find_next+0x2d0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   27de4:	e0bfef03 	ldbu	r2,-68(fp)
   27de8:	10803fcc 	andi	r2,r2,255
   27dec:	10001726 	beq	r2,zero,27e4c <alt_up_sd_card_find_next+0x2d0>
   27df0:	e0bfef03 	ldbu	r2,-68(fp)
   27df4:	10803fcc 	andi	r2,r2,255
   27df8:	10803960 	cmpeqi	r2,r2,229
   27dfc:	1000131e 	bne	r2,zero,27e4c <alt_up_sd_card_find_next+0x2d0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   27e00:	e0ffe717 	ldw	r3,-100(fp)
   27e04:	00820034 	movhi	r2,2048
   27e08:	1086bf04 	addi	r2,r2,6908
   27e0c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   27e10:	e0bfea17 	ldw	r2,-88(fp)
   27e14:	1007883a 	mov	r3,r2
   27e18:	00820034 	movhi	r2,2048
   27e1c:	1086bf04 	addi	r2,r2,6908
   27e20:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   27e24:	e0ffeb17 	ldw	r3,-84(fp)
   27e28:	00820034 	movhi	r2,2048
   27e2c:	1086bf04 	addi	r2,r2,6908
   27e30:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   27e34:	e0bfef04 	addi	r2,fp,-68
   27e38:	1009883a 	mov	r4,r2
   27e3c:	e17fff17 	ldw	r5,-4(fp)
   27e40:	00277780 	call	27778 <copy_file_record_name_to_string>
										return 0;
   27e44:	0005883a 	mov	r2,zero
   27e48:	00003606 	br	27f24 <alt_up_sd_card_find_next+0x3a8>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   27e4c:	e0bfea17 	ldw	r2,-88(fp)
   27e50:	10800044 	addi	r2,r2,1
   27e54:	e0bfea15 	stw	r2,-88(fp)
   27e58:	e0bfea17 	ldw	r2,-88(fp)
   27e5c:	10800410 	cmplti	r2,r2,16
   27e60:	103fd71e 	bne	r2,zero,27dc0 <__alt_data_end+0xf4027dc0>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   27e64:	e03fea15 	stw	zero,-88(fp)
   27e68:	00000106 	br	27e70 <alt_up_sd_card_find_next+0x2f4>
						}
						else
						{
							break;
   27e6c:	00000906 	br	27e94 <alt_up_sd_card_find_next+0x318>
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   27e70:	e0bfeb17 	ldw	r2,-84(fp)
   27e74:	10800044 	addi	r2,r2,1
   27e78:	e0bfeb15 	stw	r2,-84(fp)
   27e7c:	00820034 	movhi	r2,2048
   27e80:	1086c404 	addi	r2,r2,6928
   27e84:	10800383 	ldbu	r2,14(r2)
   27e88:	10803fcc 	andi	r2,r2,255
   27e8c:	e0ffeb17 	ldw	r3,-84(fp)
   27e90:	18bfc216 	blt	r3,r2,27d9c <__alt_data_end+0xf4027d9c>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   27e94:	00820034 	movhi	r2,2048
   27e98:	1086c404 	addi	r2,r2,6928
   27e9c:	10800383 	ldbu	r2,14(r2)
   27ea0:	10803fcc 	andi	r2,r2,255
   27ea4:	e0ffeb17 	ldw	r3,-84(fp)
   27ea8:	18801716 	blt	r3,r2,27f08 <alt_up_sd_card_find_next+0x38c>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   27eac:	e0ffe717 	ldw	r3,-100(fp)
   27eb0:	e0bfee04 	addi	r2,fp,-72
   27eb4:	1809883a 	mov	r4,r3
   27eb8:	100b883a 	mov	r5,r2
   27ebc:	0024dd00 	call	24dd0 <get_cluster_flag>
   27ec0:	10000f26 	beq	r2,zero,27f00 <alt_up_sd_card_find_next+0x384>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   27ec4:	e0bfee0b 	ldhu	r2,-72(fp)
   27ec8:	10bfffcc 	andi	r2,r2,65535
   27ecc:	10fffe0c 	andi	r3,r2,65528
   27ed0:	00bffe14 	movui	r2,65528
   27ed4:	1880051e 	bne	r3,r2,27eec <alt_up_sd_card_find_next+0x370>
							{
								result = -1;
   27ed8:	00bfffc4 	movi	r2,-1
   27edc:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   27ee0:	00820034 	movhi	r2,2048
   27ee4:	1086bf04 	addi	r2,r2,6908
   27ee8:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   27eec:	e0bfee0b 	ldhu	r2,-72(fp)
   27ef0:	10bfffcc 	andi	r2,r2,65535
   27ef4:	10bffe0c 	andi	r2,r2,65528
   27ef8:	e0bfe715 	stw	r2,-100(fp)
   27efc:	00000206 	br	27f08 <alt_up_sd_card_find_next+0x38c>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   27f00:	00bfffc4 	movi	r2,-1
   27f04:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   27f08:	e0bfe717 	ldw	r2,-100(fp)
   27f0c:	00fffdd4 	movui	r3,65527
   27f10:	18bf8e0e 	bge	r3,r2,27d4c <__alt_data_end+0xf4027d4c>
   27f14:	00000206 	br	27f20 <alt_up_sd_card_find_next+0x3a4>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   27f18:	008000c4 	movi	r2,3
   27f1c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   27f20:	e0bfe60b 	ldhu	r2,-104(fp)
}
   27f24:	e037883a 	mov	sp,fp
   27f28:	dfc00117 	ldw	ra,4(sp)
   27f2c:	df000017 	ldw	fp,0(sp)
   27f30:	dec00204 	addi	sp,sp,8
   27f34:	f800283a 	ret

00027f38 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   27f38:	deffe904 	addi	sp,sp,-92
   27f3c:	dfc01615 	stw	ra,88(sp)
   27f40:	df001515 	stw	fp,84(sp)
   27f44:	df001504 	addi	fp,sp,84
   27f48:	e13ffe15 	stw	r4,-8(fp)
   27f4c:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   27f50:	00bfffc4 	movi	r2,-1
   27f54:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   27f58:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   27f5c:	1000d126 	beq	r2,zero,282a4 <alt_up_sd_card_fopen+0x36c>
   27f60:	d0a02f17 	ldw	r2,-32580(gp)
   27f64:	1000cf26 	beq	r2,zero,282a4 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
   27f68:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   27f6c:	e13ffe17 	ldw	r4,-8(fp)
   27f70:	0025dac0 	call	25dac <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   27f74:	e13ffe17 	ldw	r4,-8(fp)
   27f78:	0025e6c0 	call	25e6c <check_file_name_for_FAT16_compliance>
   27f7c:	1000c926 	beq	r2,zero,282a4 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   27f80:	e0ffed04 	addi	r3,fp,-76
   27f84:	e0bfee04 	addi	r2,fp,-72
   27f88:	e13ffe17 	ldw	r4,-8(fp)
   27f8c:	180b883a 	mov	r5,r3
   27f90:	100d883a 	mov	r6,r2
   27f94:	002642c0 	call	2642c <get_home_directory_cluster_for_file>
   27f98:	1000021e 	bne	r2,zero,27fa4 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   27f9c:	e0bfeb0b 	ldhu	r2,-84(fp)
   27fa0:	0000c106 	br	282a8 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   27fa4:	e03fec15 	stw	zero,-80(fp)
   27fa8:	00000e06 	br	27fe4 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   27fac:	00820034 	movhi	r2,2048
   27fb0:	1086d904 	addi	r2,r2,7012
   27fb4:	e0ffec17 	ldw	r3,-80(fp)
   27fb8:	180691ba 	slli	r3,r3,6
   27fbc:	10c5883a 	add	r2,r2,r3
   27fc0:	10800f04 	addi	r2,r2,60
   27fc4:	10800017 	ldw	r2,0(r2)
   27fc8:	1000031e 	bne	r2,zero,27fd8 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   27fcc:	e0bfec17 	ldw	r2,-80(fp)
   27fd0:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   27fd4:	00000606 	br	27ff0 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   27fd8:	e0bfec17 	ldw	r2,-80(fp)
   27fdc:	10800044 	addi	r2,r2,1
   27fe0:	e0bfec15 	stw	r2,-80(fp)
   27fe4:	e0bfec17 	ldw	r2,-80(fp)
   27fe8:	10800510 	cmplti	r2,r2,20
   27fec:	103fef1e 	bne	r2,zero,27fac <__alt_data_end+0xf4027fac>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   27ff0:	e0bfeb0f 	ldh	r2,-84(fp)
   27ff4:	1000ab16 	blt	r2,zero,282a4 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   27ff8:	e0bfed17 	ldw	r2,-76(fp)
   27ffc:	1009883a 	mov	r4,r2
   28000:	e0bfeb0f 	ldh	r2,-84(fp)
   28004:	100691ba 	slli	r3,r2,6
   28008:	00820034 	movhi	r2,2048
   2800c:	1086d904 	addi	r2,r2,7012
   28010:	1885883a 	add	r2,r3,r2
   28014:	e17ffe17 	ldw	r5,-8(fp)
   28018:	100d883a 	mov	r6,r2
   2801c:	00269680 	call	26968 <find_file_in_directory>
   28020:	10007c26 	beq	r2,zero,28214 <alt_up_sd_card_fopen+0x2dc>
                {
                    if (create)
   28024:	e0bfff17 	ldw	r2,-4(fp)
   28028:	10000226 	beq	r2,zero,28034 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   2802c:	00bfffc4 	movi	r2,-1
   28030:	00009d06 	br	282a8 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   28034:	e13feb0f 	ldh	r4,-84(fp)
   28038:	e0ffeb0f 	ldh	r3,-84(fp)
   2803c:	00820034 	movhi	r2,2048
   28040:	1086d904 	addi	r2,r2,7012
   28044:	180691ba 	slli	r3,r3,6
   28048:	10c5883a 	add	r2,r2,r3
   2804c:	10800504 	addi	r2,r2,20
   28050:	1080008b 	ldhu	r2,2(r2)
   28054:	10ffffcc 	andi	r3,r2,65535
   28058:	00820034 	movhi	r2,2048
   2805c:	1086d904 	addi	r2,r2,7012
   28060:	200891ba 	slli	r4,r4,6
   28064:	1105883a 	add	r2,r2,r4
   28068:	10800704 	addi	r2,r2,28
   2806c:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   28070:	e0ffeb0f 	ldh	r3,-84(fp)
   28074:	00820034 	movhi	r2,2048
   28078:	1086d904 	addi	r2,r2,7012
   2807c:	180691ba 	slli	r3,r3,6
   28080:	10c5883a 	add	r2,r2,r3
   28084:	10800804 	addi	r2,r2,32
   28088:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   2808c:	e0ffeb0f 	ldh	r3,-84(fp)
   28090:	00820034 	movhi	r2,2048
   28094:	1086d904 	addi	r2,r2,7012
   28098:	180691ba 	slli	r3,r3,6
   2809c:	10c5883a 	add	r2,r2,r3
   280a0:	10800904 	addi	r2,r2,36
   280a4:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   280a8:	e0ffeb0f 	ldh	r3,-84(fp)
   280ac:	00820034 	movhi	r2,2048
   280b0:	1086d904 	addi	r2,r2,7012
   280b4:	180691ba 	slli	r3,r3,6
   280b8:	10c5883a 	add	r2,r2,r3
   280bc:	10800f04 	addi	r2,r2,60
   280c0:	00c00044 	movi	r3,1
   280c4:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   280c8:	e0ffeb0f 	ldh	r3,-84(fp)
   280cc:	00820034 	movhi	r2,2048
   280d0:	1086d904 	addi	r2,r2,7012
   280d4:	180691ba 	slli	r3,r3,6
   280d8:	10c5883a 	add	r2,r2,r3
   280dc:	10800e04 	addi	r2,r2,56
   280e0:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   280e4:	e03fec15 	stw	zero,-80(fp)
   280e8:	00004606 	br	28204 <alt_up_sd_card_fopen+0x2cc>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   280ec:	e0ffeb0f 	ldh	r3,-84(fp)
   280f0:	e0bfec17 	ldw	r2,-80(fp)
   280f4:	18804026 	beq	r3,r2,281f8 <alt_up_sd_card_fopen+0x2c0>
   280f8:	00820034 	movhi	r2,2048
   280fc:	1086d904 	addi	r2,r2,7012
   28100:	e0ffec17 	ldw	r3,-80(fp)
   28104:	180691ba 	slli	r3,r3,6
   28108:	10c5883a 	add	r2,r2,r3
   2810c:	10800f04 	addi	r2,r2,60
   28110:	10800017 	ldw	r2,0(r2)
   28114:	10800058 	cmpnei	r2,r2,1
   28118:	1000371e 	bne	r2,zero,281f8 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   2811c:	e0ffeb0f 	ldh	r3,-84(fp)
   28120:	00820034 	movhi	r2,2048
   28124:	1086d904 	addi	r2,r2,7012
   28128:	180691ba 	slli	r3,r3,6
   2812c:	10c5883a 	add	r2,r2,r3
   28130:	10800a04 	addi	r2,r2,40
   28134:	10c00017 	ldw	r3,0(r2)
   28138:	00820034 	movhi	r2,2048
   2813c:	1086d904 	addi	r2,r2,7012
   28140:	e13fec17 	ldw	r4,-80(fp)
   28144:	200891ba 	slli	r4,r4,6
   28148:	1105883a 	add	r2,r2,r4
   2814c:	10800a04 	addi	r2,r2,40
   28150:	10800017 	ldw	r2,0(r2)
   28154:	1880281e 	bne	r3,r2,281f8 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   28158:	e0ffeb0f 	ldh	r3,-84(fp)
   2815c:	00820034 	movhi	r2,2048
   28160:	1086d904 	addi	r2,r2,7012
   28164:	180691ba 	slli	r3,r3,6
   28168:	10c5883a 	add	r2,r2,r3
   2816c:	10800b04 	addi	r2,r2,44
   28170:	10c00017 	ldw	r3,0(r2)
   28174:	00820034 	movhi	r2,2048
   28178:	1086d904 	addi	r2,r2,7012
   2817c:	e13fec17 	ldw	r4,-80(fp)
   28180:	200891ba 	slli	r4,r4,6
   28184:	1105883a 	add	r2,r2,r4
   28188:	10800b04 	addi	r2,r2,44
   2818c:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   28190:	1880191e 	bne	r3,r2,281f8 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   28194:	e0ffeb0f 	ldh	r3,-84(fp)
   28198:	00820034 	movhi	r2,2048
   2819c:	1086d904 	addi	r2,r2,7012
   281a0:	180691ba 	slli	r3,r3,6
   281a4:	10c5883a 	add	r2,r2,r3
   281a8:	10800c04 	addi	r2,r2,48
   281ac:	1100000b 	ldhu	r4,0(r2)
   281b0:	00820034 	movhi	r2,2048
   281b4:	1086d904 	addi	r2,r2,7012
   281b8:	e0ffec17 	ldw	r3,-80(fp)
   281bc:	180691ba 	slli	r3,r3,6
   281c0:	10c5883a 	add	r2,r2,r3
   281c4:	10800c04 	addi	r2,r2,48
   281c8:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   281cc:	20ffffcc 	andi	r3,r4,65535
   281d0:	18e0001c 	xori	r3,r3,32768
   281d4:	18e00004 	addi	r3,r3,-32768
   281d8:	10bfffcc 	andi	r2,r2,65535
   281dc:	10a0001c 	xori	r2,r2,32768
   281e0:	10a00004 	addi	r2,r2,-32768
   281e4:	1880041e 	bne	r3,r2,281f8 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   281e8:	00bfff84 	movi	r2,-2
   281ec:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   281f0:	0001883a 	nop
   281f4:	00002b06 	br	282a4 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   281f8:	e0bfec17 	ldw	r2,-80(fp)
   281fc:	10800044 	addi	r2,r2,1
   28200:	e0bfec15 	stw	r2,-80(fp)
   28204:	e0bfec17 	ldw	r2,-80(fp)
   28208:	10800510 	cmplti	r2,r2,20
   2820c:	103fb71e 	bne	r2,zero,280ec <__alt_data_end+0xf40280ec>
   28210:	00002406 	br	282a4 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
   28214:	e0bfff17 	ldw	r2,-4(fp)
   28218:	10001f26 	beq	r2,zero,28298 <alt_up_sd_card_fopen+0x360>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   2821c:	e0bfeb0f 	ldh	r2,-84(fp)
   28220:	100691ba 	slli	r3,r2,6
   28224:	00820034 	movhi	r2,2048
   28228:	1086d904 	addi	r2,r2,7012
   2822c:	1887883a 	add	r3,r3,r2
   28230:	e0bfee04 	addi	r2,fp,-72
   28234:	e13ffe17 	ldw	r4,-8(fp)
   28238:	180b883a 	mov	r5,r3
   2823c:	100d883a 	mov	r6,r2
   28240:	00274a40 	call	274a4 <create_file>
   28244:	10001126 	beq	r2,zero,2828c <alt_up_sd_card_fopen+0x354>
                    {
                        active_files[file_record_index].in_use = true;
   28248:	e0ffeb0f 	ldh	r3,-84(fp)
   2824c:	00820034 	movhi	r2,2048
   28250:	1086d904 	addi	r2,r2,7012
   28254:	180691ba 	slli	r3,r3,6
   28258:	10c5883a 	add	r2,r2,r3
   2825c:	10800f04 	addi	r2,r2,60
   28260:	00c00044 	movi	r3,1
   28264:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   28268:	e0ffeb0f 	ldh	r3,-84(fp)
   2826c:	00820034 	movhi	r2,2048
   28270:	1086d904 	addi	r2,r2,7012
   28274:	180691ba 	slli	r3,r3,6
   28278:	10c5883a 	add	r2,r2,r3
   2827c:	10800e04 	addi	r2,r2,56
   28280:	00c00044 	movi	r3,1
   28284:	10c00015 	stw	r3,0(r2)
   28288:	00000606 	br	282a4 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   2828c:	00bfffc4 	movi	r2,-1
   28290:	e0bfeb0d 	sth	r2,-84(fp)
   28294:	00000306 	br	282a4 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   28298:	00bfffc4 	movi	r2,-1
   2829c:	e0bfeb0d 	sth	r2,-84(fp)
   282a0:	00000006 	br	282a4 <alt_up_sd_card_fopen+0x36c>
                }
    		}
        }
	}

	return file_record_index;
   282a4:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   282a8:	e037883a 	mov	sp,fp
   282ac:	dfc00117 	ldw	ra,4(sp)
   282b0:	df000017 	ldw	fp,0(sp)
   282b4:	dec00204 	addi	sp,sp,8
   282b8:	f800283a 	ret

000282bc <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   282bc:	defffd04 	addi	sp,sp,-12
   282c0:	df000215 	stw	fp,8(sp)
   282c4:	df000204 	addi	fp,sp,8
   282c8:	2007883a 	mov	r3,r4
   282cc:	2805883a 	mov	r2,r5
   282d0:	e0fffe0d 	sth	r3,-8(fp)
   282d4:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   282d8:	e0bffe0f 	ldh	r2,-8(fp)
   282dc:	10001416 	blt	r2,zero,28330 <alt_up_sd_card_set_attributes+0x74>
   282e0:	e0bffe0f 	ldh	r2,-8(fp)
   282e4:	10800508 	cmpgei	r2,r2,20
   282e8:	1000111e 	bne	r2,zero,28330 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   282ec:	e0fffe0f 	ldh	r3,-8(fp)
   282f0:	00820034 	movhi	r2,2048
   282f4:	1086d904 	addi	r2,r2,7012
   282f8:	180691ba 	slli	r3,r3,6
   282fc:	10c5883a 	add	r2,r2,r3
   28300:	10800f04 	addi	r2,r2,60
   28304:	10800017 	ldw	r2,0(r2)
   28308:	10000926 	beq	r2,zero,28330 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   2830c:	e0fffe0f 	ldh	r3,-8(fp)
   28310:	e0bfff0b 	ldhu	r2,-4(fp)
   28314:	1009883a 	mov	r4,r2
   28318:	00820034 	movhi	r2,2048
   2831c:	1086d904 	addi	r2,r2,7012
   28320:	180691ba 	slli	r3,r3,6
   28324:	10c5883a 	add	r2,r2,r3
   28328:	10800204 	addi	r2,r2,8
   2832c:	110000c5 	stb	r4,3(r2)
        }
    }
}
   28330:	e037883a 	mov	sp,fp
   28334:	df000017 	ldw	fp,0(sp)
   28338:	dec00104 	addi	sp,sp,4
   2833c:	f800283a 	ret

00028340 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   28340:	defffd04 	addi	sp,sp,-12
   28344:	df000215 	stw	fp,8(sp)
   28348:	df000204 	addi	fp,sp,8
   2834c:	2005883a 	mov	r2,r4
   28350:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   28354:	00bfffc4 	movi	r2,-1
   28358:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   2835c:	e0bfff0f 	ldh	r2,-4(fp)
   28360:	10001416 	blt	r2,zero,283b4 <alt_up_sd_card_get_attributes+0x74>
   28364:	e0bfff0f 	ldh	r2,-4(fp)
   28368:	10800508 	cmpgei	r2,r2,20
   2836c:	1000111e 	bne	r2,zero,283b4 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   28370:	e0ffff0f 	ldh	r3,-4(fp)
   28374:	00820034 	movhi	r2,2048
   28378:	1086d904 	addi	r2,r2,7012
   2837c:	180691ba 	slli	r3,r3,6
   28380:	10c5883a 	add	r2,r2,r3
   28384:	10800f04 	addi	r2,r2,60
   28388:	10800017 	ldw	r2,0(r2)
   2838c:	10000926 	beq	r2,zero,283b4 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   28390:	e0ffff0f 	ldh	r3,-4(fp)
   28394:	00820034 	movhi	r2,2048
   28398:	1086d904 	addi	r2,r2,7012
   2839c:	180691ba 	slli	r3,r3,6
   283a0:	10c5883a 	add	r2,r2,r3
   283a4:	10800204 	addi	r2,r2,8
   283a8:	108000c3 	ldbu	r2,3(r2)
   283ac:	10803fcc 	andi	r2,r2,255
   283b0:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   283b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   283b8:	e037883a 	mov	sp,fp
   283bc:	df000017 	ldw	fp,0(sp)
   283c0:	dec00104 	addi	sp,sp,4
   283c4:	f800283a 	ret

000283c8 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   283c8:	defff904 	addi	sp,sp,-28
   283cc:	dfc00615 	stw	ra,24(sp)
   283d0:	df000515 	stw	fp,20(sp)
   283d4:	dc000415 	stw	r16,16(sp)
   283d8:	df000504 	addi	fp,sp,20
   283dc:	2005883a 	mov	r2,r4
   283e0:	e0bffe0d 	sth	r2,-8(fp)
    short int ch = -1;
   283e4:	00bfffc4 	movi	r2,-1
   283e8:	e0bffb0d 	sth	r2,-20(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   283ec:	e0bffe0f 	ldh	r2,-8(fp)
   283f0:	1000d216 	blt	r2,zero,2873c <alt_up_sd_card_read+0x374>
   283f4:	e0bffe0f 	ldh	r2,-8(fp)
   283f8:	10800508 	cmpgei	r2,r2,20
   283fc:	1000cf1e 	bne	r2,zero,2873c <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
   28400:	e0fffe0f 	ldh	r3,-8(fp)
   28404:	00820034 	movhi	r2,2048
   28408:	1086d904 	addi	r2,r2,7012
   2840c:	180691ba 	slli	r3,r3,6
   28410:	10c5883a 	add	r2,r2,r3
   28414:	10800f04 	addi	r2,r2,60
   28418:	10800017 	ldw	r2,0(r2)
   2841c:	1000c726 	beq	r2,zero,2873c <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   28420:	e0fffe0f 	ldh	r3,-8(fp)
   28424:	00820034 	movhi	r2,2048
   28428:	1086d904 	addi	r2,r2,7012
   2842c:	180691ba 	slli	r3,r3,6
   28430:	10c5883a 	add	r2,r2,r3
   28434:	10800904 	addi	r2,r2,36
   28438:	10c00017 	ldw	r3,0(r2)
   2843c:	e13ffe0f 	ldh	r4,-8(fp)
   28440:	00820034 	movhi	r2,2048
   28444:	1086d904 	addi	r2,r2,7012
   28448:	200891ba 	slli	r4,r4,6
   2844c:	1105883a 	add	r2,r2,r4
   28450:	10800604 	addi	r2,r2,24
   28454:	10800017 	ldw	r2,0(r2)
   28458:	1880b82e 	bgeu	r3,r2,2873c <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   2845c:	00820034 	movhi	r2,2048
   28460:	1086c404 	addi	r2,r2,6928
   28464:	14001417 	ldw	r16,80(r2)
   28468:	e0fffe0f 	ldh	r3,-8(fp)
   2846c:	00820034 	movhi	r2,2048
   28470:	1086d904 	addi	r2,r2,7012
   28474:	180691ba 	slli	r3,r3,6
   28478:	10c5883a 	add	r2,r2,r3
   2847c:	10800704 	addi	r2,r2,28
   28480:	10800017 	ldw	r2,0(r2)
   28484:	10ffff84 	addi	r3,r2,-2
   28488:	00820034 	movhi	r2,2048
   2848c:	1086c404 	addi	r2,r2,6928
   28490:	10800383 	ldbu	r2,14(r2)
   28494:	10803fcc 	andi	r2,r2,255
   28498:	1809883a 	mov	r4,r3
   2849c:	100b883a 	mov	r5,r2
   284a0:	00225e40 	call	225e4 <__mulsi3>
   284a4:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;
   284a8:	e13ffe0f 	ldh	r4,-8(fp)
   284ac:	00820034 	movhi	r2,2048
   284b0:	1086d904 	addi	r2,r2,7012
   284b4:	200891ba 	slli	r4,r4,6
   284b8:	1105883a 	add	r2,r2,r4
   284bc:	10800804 	addi	r2,r2,32
   284c0:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   284c4:	1885883a 	add	r2,r3,r2
   284c8:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   284cc:	e0fffe0f 	ldh	r3,-8(fp)
   284d0:	00820034 	movhi	r2,2048
   284d4:	1086d904 	addi	r2,r2,7012
   284d8:	180691ba 	slli	r3,r3,6
   284dc:	10c5883a 	add	r2,r2,r3
   284e0:	10800904 	addi	r2,r2,36
   284e4:	10800017 	ldw	r2,0(r2)
   284e8:	10006a26 	beq	r2,zero,28694 <alt_up_sd_card_read+0x2cc>
   284ec:	e0fffe0f 	ldh	r3,-8(fp)
   284f0:	00820034 	movhi	r2,2048
   284f4:	1086d904 	addi	r2,r2,7012
   284f8:	180691ba 	slli	r3,r3,6
   284fc:	10c5883a 	add	r2,r2,r3
   28500:	10800904 	addi	r2,r2,36
   28504:	10800017 	ldw	r2,0(r2)
   28508:	10807fcc 	andi	r2,r2,511
   2850c:	1000611e 	bne	r2,zero,28694 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   28510:	e0fffe0f 	ldh	r3,-8(fp)
   28514:	00820034 	movhi	r2,2048
   28518:	1086d904 	addi	r2,r2,7012
   2851c:	180691ba 	slli	r3,r3,6
   28520:	10c5883a 	add	r2,r2,r3
   28524:	10800804 	addi	r2,r2,32
   28528:	10c00017 	ldw	r3,0(r2)
   2852c:	00820034 	movhi	r2,2048
   28530:	1086c404 	addi	r2,r2,6928
   28534:	10800383 	ldbu	r2,14(r2)
   28538:	10803fcc 	andi	r2,r2,255
   2853c:	10bfffc4 	addi	r2,r2,-1
   28540:	1880421e 	bne	r3,r2,2864c <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   28544:	e0fffe0f 	ldh	r3,-8(fp)
   28548:	00820034 	movhi	r2,2048
   2854c:	1086d904 	addi	r2,r2,7012
   28550:	180691ba 	slli	r3,r3,6
   28554:	10c5883a 	add	r2,r2,r3
   28558:	10800704 	addi	r2,r2,28
   2855c:	10c00017 	ldw	r3,0(r2)
   28560:	e0bffd04 	addi	r2,fp,-12
   28564:	1809883a 	mov	r4,r3
   28568:	100b883a 	mov	r5,r2
   2856c:	0024dd00 	call	24dd0 <get_cluster_flag>
   28570:	10003426 	beq	r2,zero,28644 <alt_up_sd_card_read+0x27c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   28574:	e0bffd0b 	ldhu	r2,-12(fp)
   28578:	10bfffcc 	andi	r2,r2,65535
   2857c:	10fffe0c 	andi	r3,r2,65528
   28580:	00bffe14 	movui	r2,65528
   28584:	1880021e 	bne	r3,r2,28590 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
   28588:	00bfffc4 	movi	r2,-1
   2858c:	00006c06 	br	28740 <alt_up_sd_card_read+0x378>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   28590:	e13ffe0f 	ldh	r4,-8(fp)
   28594:	e0bffd0b 	ldhu	r2,-12(fp)
   28598:	10ffffcc 	andi	r3,r2,65535
   2859c:	00820034 	movhi	r2,2048
   285a0:	1086d904 	addi	r2,r2,7012
   285a4:	200891ba 	slli	r4,r4,6
   285a8:	1105883a 	add	r2,r2,r4
   285ac:	10800704 	addi	r2,r2,28
   285b0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   285b4:	e0fffe0f 	ldh	r3,-8(fp)
   285b8:	00820034 	movhi	r2,2048
   285bc:	1086d904 	addi	r2,r2,7012
   285c0:	180691ba 	slli	r3,r3,6
   285c4:	10c5883a 	add	r2,r2,r3
   285c8:	10800804 	addi	r2,r2,32
   285cc:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   285d0:	00820034 	movhi	r2,2048
   285d4:	1086c404 	addi	r2,r2,6928
   285d8:	14001417 	ldw	r16,80(r2)
   285dc:	e0fffe0f 	ldh	r3,-8(fp)
   285e0:	00820034 	movhi	r2,2048
   285e4:	1086d904 	addi	r2,r2,7012
   285e8:	180691ba 	slli	r3,r3,6
   285ec:	10c5883a 	add	r2,r2,r3
   285f0:	10800704 	addi	r2,r2,28
   285f4:	10800017 	ldw	r2,0(r2)
   285f8:	10ffff84 	addi	r3,r2,-2
   285fc:	00820034 	movhi	r2,2048
   28600:	1086c404 	addi	r2,r2,6928
   28604:	10800383 	ldbu	r2,14(r2)
   28608:	10803fcc 	andi	r2,r2,255
   2860c:	1809883a 	mov	r4,r3
   28610:	100b883a 	mov	r5,r2
   28614:	00225e40 	call	225e4 <__mulsi3>
   28618:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   2861c:	e13ffe0f 	ldh	r4,-8(fp)
   28620:	00820034 	movhi	r2,2048
   28624:	1086d904 	addi	r2,r2,7012
   28628:	200891ba 	slli	r4,r4,6
   2862c:	1105883a 	add	r2,r2,r4
   28630:	10800804 	addi	r2,r2,32
   28634:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   28638:	1885883a 	add	r2,r3,r2
   2863c:	e0bffc15 	stw	r2,-16(fp)
   28640:	00001406 	br	28694 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   28644:	00bfff84 	movi	r2,-2
   28648:	00003d06 	br	28740 <alt_up_sd_card_read+0x378>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   2864c:	e13ffe0f 	ldh	r4,-8(fp)
   28650:	e0fffe0f 	ldh	r3,-8(fp)
   28654:	00820034 	movhi	r2,2048
   28658:	1086d904 	addi	r2,r2,7012
   2865c:	180691ba 	slli	r3,r3,6
   28660:	10c5883a 	add	r2,r2,r3
   28664:	10800804 	addi	r2,r2,32
   28668:	10800017 	ldw	r2,0(r2)
   2866c:	10c00044 	addi	r3,r2,1
   28670:	00820034 	movhi	r2,2048
   28674:	1086d904 	addi	r2,r2,7012
   28678:	200891ba 	slli	r4,r4,6
   2867c:	1105883a 	add	r2,r2,r4
   28680:	10800804 	addi	r2,r2,32
   28684:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   28688:	e0bffc17 	ldw	r2,-16(fp)
   2868c:	10800044 	addi	r2,r2,1
   28690:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   28694:	d0e03617 	ldw	r3,-32552(gp)
   28698:	e0bffc17 	ldw	r2,-16(fp)
   2869c:	1885883a 	add	r2,r3,r2
   286a0:	1007883a 	mov	r3,r2
   286a4:	d0a03a17 	ldw	r2,-32536(gp)
   286a8:	18800726 	beq	r3,r2,286c8 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   286ac:	d0a03617 	ldw	r2,-32552(gp)
   286b0:	e13ffc17 	ldw	r4,-16(fp)
   286b4:	100b883a 	mov	r5,r2
   286b8:	0024cf80 	call	24cf8 <Read_Sector_Data>
   286bc:	1000021e 	bne	r2,zero,286c8 <alt_up_sd_card_read+0x300>
                    {
						return -2;
   286c0:	00bfff84 	movi	r2,-2
   286c4:	00001e06 	br	28740 <alt_up_sd_card_read+0x378>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   286c8:	d0e03517 	ldw	r3,-32556(gp)
   286cc:	e13ffe0f 	ldh	r4,-8(fp)
   286d0:	00820034 	movhi	r2,2048
   286d4:	1086d904 	addi	r2,r2,7012
   286d8:	200891ba 	slli	r4,r4,6
   286dc:	1105883a 	add	r2,r2,r4
   286e0:	10800904 	addi	r2,r2,36
   286e4:	10800017 	ldw	r2,0(r2)
   286e8:	10807fcc 	andi	r2,r2,511
   286ec:	1885883a 	add	r2,r3,r2
   286f0:	10800023 	ldbuio	r2,0(r2)
   286f4:	10803fcc 	andi	r2,r2,255
   286f8:	10803fcc 	andi	r2,r2,255
   286fc:	e0bffb0d 	sth	r2,-20(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   28700:	e13ffe0f 	ldh	r4,-8(fp)
   28704:	e0fffe0f 	ldh	r3,-8(fp)
   28708:	00820034 	movhi	r2,2048
   2870c:	1086d904 	addi	r2,r2,7012
   28710:	180691ba 	slli	r3,r3,6
   28714:	10c5883a 	add	r2,r2,r3
   28718:	10800904 	addi	r2,r2,36
   2871c:	10800017 	ldw	r2,0(r2)
   28720:	10c00044 	addi	r3,r2,1
   28724:	00820034 	movhi	r2,2048
   28728:	1086d904 	addi	r2,r2,7012
   2872c:	200891ba 	slli	r4,r4,6
   28730:	1105883a 	add	r2,r2,r4
   28734:	10800904 	addi	r2,r2,36
   28738:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   2873c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   28740:	e6ffff04 	addi	sp,fp,-4
   28744:	dfc00217 	ldw	ra,8(sp)
   28748:	df000117 	ldw	fp,4(sp)
   2874c:	dc000017 	ldw	r16,0(sp)
   28750:	dec00304 	addi	sp,sp,12
   28754:	f800283a 	ret

00028758 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   28758:	defff704 	addi	sp,sp,-36
   2875c:	dfc00815 	stw	ra,32(sp)
   28760:	df000715 	stw	fp,28(sp)
   28764:	dc000615 	stw	r16,24(sp)
   28768:	df000704 	addi	fp,sp,28
   2876c:	2007883a 	mov	r3,r4
   28770:	2805883a 	mov	r2,r5
   28774:	e0fffd0d 	sth	r3,-12(fp)
   28778:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
   2877c:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   28780:	e0bffd0f 	ldh	r2,-12(fp)
   28784:	10018116 	blt	r2,zero,28d8c <alt_up_sd_card_write+0x634>
   28788:	e0bffd0f 	ldh	r2,-12(fp)
   2878c:	10800508 	cmpgei	r2,r2,20
   28790:	10017e1e 	bne	r2,zero,28d8c <alt_up_sd_card_write+0x634>
    {
        if (active_files[file_handle].in_use)
   28794:	e0fffd0f 	ldh	r3,-12(fp)
   28798:	00820034 	movhi	r2,2048
   2879c:	1086d904 	addi	r2,r2,7012
   287a0:	180691ba 	slli	r3,r3,6
   287a4:	10c5883a 	add	r2,r2,r3
   287a8:	10800f04 	addi	r2,r2,60
   287ac:	10800017 	ldw	r2,0(r2)
   287b0:	10017626 	beq	r2,zero,28d8c <alt_up_sd_card_write+0x634>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   287b4:	00820034 	movhi	r2,2048
   287b8:	1086c404 	addi	r2,r2,6928
   287bc:	14001417 	ldw	r16,80(r2)
   287c0:	e0fffd0f 	ldh	r3,-12(fp)
   287c4:	00820034 	movhi	r2,2048
   287c8:	1086d904 	addi	r2,r2,7012
   287cc:	180691ba 	slli	r3,r3,6
   287d0:	10c5883a 	add	r2,r2,r3
   287d4:	10800704 	addi	r2,r2,28
   287d8:	10800017 	ldw	r2,0(r2)
   287dc:	10ffff84 	addi	r3,r2,-2
   287e0:	00820034 	movhi	r2,2048
   287e4:	1086c404 	addi	r2,r2,6928
   287e8:	10800383 	ldbu	r2,14(r2)
   287ec:	10803fcc 	andi	r2,r2,255
   287f0:	1809883a 	mov	r4,r3
   287f4:	100b883a 	mov	r5,r2
   287f8:	00225e40 	call	225e4 <__mulsi3>
   287fc:	8087883a 	add	r3,r16,r2
                              active_files[file_handle].current_sector_in_cluster;
   28800:	e13ffd0f 	ldh	r4,-12(fp)
   28804:	00820034 	movhi	r2,2048
   28808:	1086d904 	addi	r2,r2,7012
   2880c:	200891ba 	slli	r4,r4,6
   28810:	1105883a 	add	r2,r2,r4
   28814:	10800804 	addi	r2,r2,32
   28818:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   2881c:	1885883a 	add	r2,r3,r2
   28820:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   28824:	e0fffd0f 	ldh	r3,-12(fp)
   28828:	00820034 	movhi	r2,2048
   2882c:	1086d904 	addi	r2,r2,7012
   28830:	180691ba 	slli	r3,r3,6
   28834:	10c5883a 	add	r2,r2,r3
   28838:	10800904 	addi	r2,r2,36
   2883c:	10c00017 	ldw	r3,0(r2)
   28840:	00820034 	movhi	r2,2048
   28844:	1086c404 	addi	r2,r2,6928
   28848:	1080030b 	ldhu	r2,12(r2)
   2884c:	10bfffcc 	andi	r2,r2,65535
   28850:	1809883a 	mov	r4,r3
   28854:	100b883a 	mov	r5,r2
   28858:	00243540 	call	24354 <__umodsi3>
   2885c:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   28860:	e0fffd0f 	ldh	r3,-12(fp)
   28864:	00820034 	movhi	r2,2048
   28868:	1086d904 	addi	r2,r2,7012
   2886c:	180691ba 	slli	r3,r3,6
   28870:	10c5883a 	add	r2,r2,r3
   28874:	10800904 	addi	r2,r2,36
   28878:	10c00017 	ldw	r3,0(r2)
   2887c:	e13ffd0f 	ldh	r4,-12(fp)
   28880:	00820034 	movhi	r2,2048
   28884:	1086d904 	addi	r2,r2,7012
   28888:	200891ba 	slli	r4,r4,6
   2888c:	1105883a 	add	r2,r2,r4
   28890:	10800604 	addi	r2,r2,24
   28894:	10800017 	ldw	r2,0(r2)
   28898:	18806a2e 	bgeu	r3,r2,28a44 <alt_up_sd_card_write+0x2ec>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   2889c:	e0fffd0f 	ldh	r3,-12(fp)
   288a0:	00820034 	movhi	r2,2048
   288a4:	1086d904 	addi	r2,r2,7012
   288a8:	180691ba 	slli	r3,r3,6
   288ac:	10c5883a 	add	r2,r2,r3
   288b0:	10800904 	addi	r2,r2,36
   288b4:	10800017 	ldw	r2,0(r2)
   288b8:	1000e926 	beq	r2,zero,28c60 <alt_up_sd_card_write+0x508>
   288bc:	e0bffb0f 	ldh	r2,-20(fp)
   288c0:	1000e71e 	bne	r2,zero,28c60 <alt_up_sd_card_write+0x508>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   288c4:	e0fffd0f 	ldh	r3,-12(fp)
   288c8:	00820034 	movhi	r2,2048
   288cc:	1086d904 	addi	r2,r2,7012
   288d0:	180691ba 	slli	r3,r3,6
   288d4:	10c5883a 	add	r2,r2,r3
   288d8:	10800804 	addi	r2,r2,32
   288dc:	10c00017 	ldw	r3,0(r2)
   288e0:	00820034 	movhi	r2,2048
   288e4:	1086c404 	addi	r2,r2,6928
   288e8:	10800383 	ldbu	r2,14(r2)
   288ec:	10803fcc 	andi	r2,r2,255
   288f0:	10bfffc4 	addi	r2,r2,-1
   288f4:	1880401e 	bne	r3,r2,289f8 <alt_up_sd_card_write+0x2a0>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   288f8:	e0fffd0f 	ldh	r3,-12(fp)
   288fc:	00820034 	movhi	r2,2048
   28900:	1086d904 	addi	r2,r2,7012
   28904:	180691ba 	slli	r3,r3,6
   28908:	10c5883a 	add	r2,r2,r3
   2890c:	10800704 	addi	r2,r2,28
   28910:	10c00017 	ldw	r3,0(r2)
   28914:	e0bffb84 	addi	r2,fp,-18
   28918:	1809883a 	mov	r4,r3
   2891c:	100b883a 	mov	r5,r2
   28920:	0024dd00 	call	24dd0 <get_cluster_flag>
   28924:	10003226 	beq	r2,zero,289f0 <alt_up_sd_card_write+0x298>
                        {
                            if (next_cluster < 0x0000fff8)
   28928:	e0bffb8b 	ldhu	r2,-18(fp)
   2892c:	10bfffcc 	andi	r2,r2,65535
   28930:	10bffe28 	cmpgeui	r2,r2,65528
   28934:	10002d1e 	bne	r2,zero,289ec <alt_up_sd_card_write+0x294>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   28938:	e13ffd0f 	ldh	r4,-12(fp)
   2893c:	e0bffb8b 	ldhu	r2,-18(fp)
   28940:	10ffffcc 	andi	r3,r2,65535
   28944:	00820034 	movhi	r2,2048
   28948:	1086d904 	addi	r2,r2,7012
   2894c:	200891ba 	slli	r4,r4,6
   28950:	1105883a 	add	r2,r2,r4
   28954:	10800704 	addi	r2,r2,28
   28958:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   2895c:	e0fffd0f 	ldh	r3,-12(fp)
   28960:	00820034 	movhi	r2,2048
   28964:	1086d904 	addi	r2,r2,7012
   28968:	180691ba 	slli	r3,r3,6
   2896c:	10c5883a 	add	r2,r2,r3
   28970:	10800804 	addi	r2,r2,32
   28974:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   28978:	00820034 	movhi	r2,2048
   2897c:	1086c404 	addi	r2,r2,6928
   28980:	14001417 	ldw	r16,80(r2)
   28984:	e0fffd0f 	ldh	r3,-12(fp)
   28988:	00820034 	movhi	r2,2048
   2898c:	1086d904 	addi	r2,r2,7012
   28990:	180691ba 	slli	r3,r3,6
   28994:	10c5883a 	add	r2,r2,r3
   28998:	10800704 	addi	r2,r2,28
   2899c:	10800017 	ldw	r2,0(r2)
   289a0:	10ffff84 	addi	r3,r2,-2
   289a4:	00820034 	movhi	r2,2048
   289a8:	1086c404 	addi	r2,r2,6928
   289ac:	10800383 	ldbu	r2,14(r2)
   289b0:	10803fcc 	andi	r2,r2,255
   289b4:	1809883a 	mov	r4,r3
   289b8:	100b883a 	mov	r5,r2
   289bc:	00225e40 	call	225e4 <__mulsi3>
   289c0:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   289c4:	e13ffd0f 	ldh	r4,-12(fp)
   289c8:	00820034 	movhi	r2,2048
   289cc:	1086d904 	addi	r2,r2,7012
   289d0:	200891ba 	slli	r4,r4,6
   289d4:	1105883a 	add	r2,r2,r4
   289d8:	10800804 	addi	r2,r2,32
   289dc:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   289e0:	1885883a 	add	r2,r3,r2
   289e4:	e0bffa15 	stw	r2,-24(fp)
   289e8:	00009d06 	br	28c60 <alt_up_sd_card_write+0x508>
   289ec:	00009c06 	br	28c60 <alt_up_sd_card_write+0x508>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   289f0:	0005883a 	mov	r2,zero
   289f4:	0000e606 	br	28d90 <alt_up_sd_card_write+0x638>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   289f8:	e13ffd0f 	ldh	r4,-12(fp)
   289fc:	e0fffd0f 	ldh	r3,-12(fp)
   28a00:	00820034 	movhi	r2,2048
   28a04:	1086d904 	addi	r2,r2,7012
   28a08:	180691ba 	slli	r3,r3,6
   28a0c:	10c5883a 	add	r2,r2,r3
   28a10:	10800804 	addi	r2,r2,32
   28a14:	10800017 	ldw	r2,0(r2)
   28a18:	10c00044 	addi	r3,r2,1
   28a1c:	00820034 	movhi	r2,2048
   28a20:	1086d904 	addi	r2,r2,7012
   28a24:	200891ba 	slli	r4,r4,6
   28a28:	1105883a 	add	r2,r2,r4
   28a2c:	10800804 	addi	r2,r2,32
   28a30:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   28a34:	e0bffa17 	ldw	r2,-24(fp)
   28a38:	10800044 	addi	r2,r2,1
   28a3c:	e0bffa15 	stw	r2,-24(fp)
   28a40:	00008706 	br	28c60 <alt_up_sd_card_write+0x508>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   28a44:	e0fffd0f 	ldh	r3,-12(fp)
   28a48:	00820034 	movhi	r2,2048
   28a4c:	1086d904 	addi	r2,r2,7012
   28a50:	180691ba 	slli	r3,r3,6
   28a54:	10c5883a 	add	r2,r2,r3
   28a58:	10800904 	addi	r2,r2,36
   28a5c:	10800017 	ldw	r2,0(r2)
   28a60:	10007f26 	beq	r2,zero,28c60 <alt_up_sd_card_write+0x508>
   28a64:	e0bffb0f 	ldh	r2,-20(fp)
   28a68:	10007d1e 	bne	r2,zero,28c60 <alt_up_sd_card_write+0x508>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   28a6c:	e0fffd0f 	ldh	r3,-12(fp)
   28a70:	00820034 	movhi	r2,2048
   28a74:	1086d904 	addi	r2,r2,7012
   28a78:	180691ba 	slli	r3,r3,6
   28a7c:	10c5883a 	add	r2,r2,r3
   28a80:	10800804 	addi	r2,r2,32
   28a84:	10c00017 	ldw	r3,0(r2)
   28a88:	00820034 	movhi	r2,2048
   28a8c:	1086c404 	addi	r2,r2,6928
   28a90:	10800383 	ldbu	r2,14(r2)
   28a94:	10803fcc 	andi	r2,r2,255
   28a98:	10bfffc4 	addi	r2,r2,-1
   28a9c:	18803e1e 	bne	r3,r2,28b98 <alt_up_sd_card_write+0x440>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   28aa0:	e0bffc04 	addi	r2,fp,-16
   28aa4:	1009883a 	mov	r4,r2
   28aa8:	0026de00 	call	26de0 <find_first_empty_cluster>
   28aac:	10003826 	beq	r2,zero,28b90 <alt_up_sd_card_write+0x438>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   28ab0:	e0fffd0f 	ldh	r3,-12(fp)
   28ab4:	00820034 	movhi	r2,2048
   28ab8:	1086d904 	addi	r2,r2,7012
   28abc:	180691ba 	slli	r3,r3,6
   28ac0:	10c5883a 	add	r2,r2,r3
   28ac4:	10800704 	addi	r2,r2,28
   28ac8:	10c00017 	ldw	r3,0(r2)
   28acc:	e0bffc17 	ldw	r2,-16(fp)
   28ad0:	10bfffcc 	andi	r2,r2,65535
   28ad4:	10a0001c 	xori	r2,r2,32768
   28ad8:	10a00004 	addi	r2,r2,-32768
   28adc:	1809883a 	mov	r4,r3
   28ae0:	100b883a 	mov	r5,r2
   28ae4:	01800044 	movi	r6,1
   28ae8:	0024e840 	call	24e84 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   28aec:	e0bffc17 	ldw	r2,-16(fp)
   28af0:	1009883a 	mov	r4,r2
   28af4:	017fffc4 	movi	r5,-1
   28af8:	01800044 	movi	r6,1
   28afc:	0024e840 	call	24e84 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   28b00:	e0fffd0f 	ldh	r3,-12(fp)
   28b04:	00820034 	movhi	r2,2048
   28b08:	1086d904 	addi	r2,r2,7012
   28b0c:	180691ba 	slli	r3,r3,6
   28b10:	10c5883a 	add	r2,r2,r3
   28b14:	10800704 	addi	r2,r2,28
   28b18:	10c00017 	ldw	r3,0(r2)
   28b1c:	e0bffc17 	ldw	r2,-16(fp)
   28b20:	10bfffcc 	andi	r2,r2,65535
   28b24:	10a0001c 	xori	r2,r2,32768
   28b28:	10a00004 	addi	r2,r2,-32768
   28b2c:	1809883a 	mov	r4,r3
   28b30:	100b883a 	mov	r5,r2
   28b34:	000d883a 	mov	r6,zero
   28b38:	0024e840 	call	24e84 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   28b3c:	e0bffc17 	ldw	r2,-16(fp)
   28b40:	1009883a 	mov	r4,r2
   28b44:	017fffc4 	movi	r5,-1
   28b48:	000d883a 	mov	r6,zero
   28b4c:	0024e840 	call	24e84 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   28b50:	e13ffd0f 	ldh	r4,-12(fp)
   28b54:	e0fffc17 	ldw	r3,-16(fp)
   28b58:	00820034 	movhi	r2,2048
   28b5c:	1086d904 	addi	r2,r2,7012
   28b60:	200891ba 	slli	r4,r4,6
   28b64:	1105883a 	add	r2,r2,r4
   28b68:	10800704 	addi	r2,r2,28
   28b6c:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   28b70:	e0fffd0f 	ldh	r3,-12(fp)
   28b74:	00820034 	movhi	r2,2048
   28b78:	1086d904 	addi	r2,r2,7012
   28b7c:	180691ba 	slli	r3,r3,6
   28b80:	10c5883a 	add	r2,r2,r3
   28b84:	10800804 	addi	r2,r2,32
   28b88:	10000015 	stw	zero,0(r2)
   28b8c:	00001806 	br	28bf0 <alt_up_sd_card_write+0x498>
						}
						else
						{
							return false;
   28b90:	0005883a 	mov	r2,zero
   28b94:	00007e06 	br	28d90 <alt_up_sd_card_write+0x638>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   28b98:	e43ffd0f 	ldh	r16,-12(fp)
   28b9c:	e0fffd0f 	ldh	r3,-12(fp)
   28ba0:	00820034 	movhi	r2,2048
   28ba4:	1086d904 	addi	r2,r2,7012
   28ba8:	180691ba 	slli	r3,r3,6
   28bac:	10c5883a 	add	r2,r2,r3
   28bb0:	10800904 	addi	r2,r2,36
   28bb4:	10c00017 	ldw	r3,0(r2)
   28bb8:	00820034 	movhi	r2,2048
   28bbc:	1086c404 	addi	r2,r2,6928
   28bc0:	1080030b 	ldhu	r2,12(r2)
   28bc4:	10bfffcc 	andi	r2,r2,65535
   28bc8:	1809883a 	mov	r4,r3
   28bcc:	100b883a 	mov	r5,r2
   28bd0:	002434c0 	call	2434c <__udivsi3>
   28bd4:	1009883a 	mov	r4,r2
   28bd8:	00820034 	movhi	r2,2048
   28bdc:	1086d904 	addi	r2,r2,7012
   28be0:	800691ba 	slli	r3,r16,6
   28be4:	10c5883a 	add	r2,r2,r3
   28be8:	10800804 	addi	r2,r2,32
   28bec:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   28bf0:	00820034 	movhi	r2,2048
   28bf4:	1086c404 	addi	r2,r2,6928
   28bf8:	14001417 	ldw	r16,80(r2)
   28bfc:	e0fffd0f 	ldh	r3,-12(fp)
   28c00:	00820034 	movhi	r2,2048
   28c04:	1086d904 	addi	r2,r2,7012
   28c08:	180691ba 	slli	r3,r3,6
   28c0c:	10c5883a 	add	r2,r2,r3
   28c10:	10800704 	addi	r2,r2,28
   28c14:	10800017 	ldw	r2,0(r2)
   28c18:	10ffff84 	addi	r3,r2,-2
   28c1c:	00820034 	movhi	r2,2048
   28c20:	1086c404 	addi	r2,r2,6928
   28c24:	10800383 	ldbu	r2,14(r2)
   28c28:	10803fcc 	andi	r2,r2,255
   28c2c:	1809883a 	mov	r4,r3
   28c30:	100b883a 	mov	r5,r2
   28c34:	00225e40 	call	225e4 <__mulsi3>
   28c38:	8087883a 	add	r3,r16,r2
                          active_files[file_handle].current_sector_in_cluster;
   28c3c:	e13ffd0f 	ldh	r4,-12(fp)
   28c40:	00820034 	movhi	r2,2048
   28c44:	1086d904 	addi	r2,r2,7012
   28c48:	200891ba 	slli	r4,r4,6
   28c4c:	1105883a 	add	r2,r2,r4
   28c50:	10800804 	addi	r2,r2,32
   28c54:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   28c58:	1885883a 	add	r2,r3,r2
   28c5c:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   28c60:	d0e03617 	ldw	r3,-32552(gp)
   28c64:	e0bffa17 	ldw	r2,-24(fp)
   28c68:	1885883a 	add	r2,r3,r2
   28c6c:	1007883a 	mov	r3,r2
   28c70:	d0a03a17 	ldw	r2,-32536(gp)
   28c74:	18800726 	beq	r3,r2,28c94 <alt_up_sd_card_write+0x53c>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   28c78:	d0a03617 	ldw	r2,-32552(gp)
   28c7c:	e13ffa17 	ldw	r4,-24(fp)
   28c80:	100b883a 	mov	r5,r2
   28c84:	0024cf80 	call	24cf8 <Read_Sector_Data>
   28c88:	1000021e 	bne	r2,zero,28c94 <alt_up_sd_card_write+0x53c>
                {
					return false;
   28c8c:	0005883a 	mov	r2,zero
   28c90:	00003f06 	br	28d90 <alt_up_sd_card_write+0x638>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   28c94:	d0e03517 	ldw	r3,-32556(gp)
   28c98:	e0bffb0f 	ldh	r2,-20(fp)
   28c9c:	1885883a 	add	r2,r3,r2
   28ca0:	e0fffe07 	ldb	r3,-8(fp)
   28ca4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   28ca8:	e13ffd0f 	ldh	r4,-12(fp)
   28cac:	e0fffd0f 	ldh	r3,-12(fp)
   28cb0:	00820034 	movhi	r2,2048
   28cb4:	1086d904 	addi	r2,r2,7012
   28cb8:	180691ba 	slli	r3,r3,6
   28cbc:	10c5883a 	add	r2,r2,r3
   28cc0:	10800904 	addi	r2,r2,36
   28cc4:	10800017 	ldw	r2,0(r2)
   28cc8:	10c00044 	addi	r3,r2,1
   28ccc:	00820034 	movhi	r2,2048
   28cd0:	1086d904 	addi	r2,r2,7012
   28cd4:	200891ba 	slli	r4,r4,6
   28cd8:	1105883a 	add	r2,r2,r4
   28cdc:	10800904 	addi	r2,r2,36
   28ce0:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   28ce4:	e0fffd0f 	ldh	r3,-12(fp)
   28ce8:	00820034 	movhi	r2,2048
   28cec:	1086d904 	addi	r2,r2,7012
   28cf0:	180691ba 	slli	r3,r3,6
   28cf4:	10c5883a 	add	r2,r2,r3
   28cf8:	10800904 	addi	r2,r2,36
   28cfc:	10c00017 	ldw	r3,0(r2)
   28d00:	e13ffd0f 	ldh	r4,-12(fp)
   28d04:	00820034 	movhi	r2,2048
   28d08:	1086d904 	addi	r2,r2,7012
   28d0c:	200891ba 	slli	r4,r4,6
   28d10:	1105883a 	add	r2,r2,r4
   28d14:	10800604 	addi	r2,r2,24
   28d18:	10800017 	ldw	r2,0(r2)
   28d1c:	18801736 	bltu	r3,r2,28d7c <alt_up_sd_card_write+0x624>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   28d20:	e13ffd0f 	ldh	r4,-12(fp)
   28d24:	e0fffd0f 	ldh	r3,-12(fp)
   28d28:	00820034 	movhi	r2,2048
   28d2c:	1086d904 	addi	r2,r2,7012
   28d30:	180691ba 	slli	r3,r3,6
   28d34:	10c5883a 	add	r2,r2,r3
   28d38:	10800604 	addi	r2,r2,24
   28d3c:	10800017 	ldw	r2,0(r2)
   28d40:	10c00044 	addi	r3,r2,1
   28d44:	00820034 	movhi	r2,2048
   28d48:	1086d904 	addi	r2,r2,7012
   28d4c:	200891ba 	slli	r4,r4,6
   28d50:	1105883a 	add	r2,r2,r4
   28d54:	10800604 	addi	r2,r2,24
   28d58:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   28d5c:	e0fffd0f 	ldh	r3,-12(fp)
   28d60:	00820034 	movhi	r2,2048
   28d64:	1086d904 	addi	r2,r2,7012
   28d68:	180691ba 	slli	r3,r3,6
   28d6c:	10c5883a 	add	r2,r2,r3
   28d70:	10800e04 	addi	r2,r2,56
   28d74:	00c00044 	movi	r3,1
   28d78:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   28d7c:	00800044 	movi	r2,1
   28d80:	d0a03915 	stw	r2,-32540(gp)
			result = true;
   28d84:	00800044 	movi	r2,1
   28d88:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
   28d8c:	e0bff917 	ldw	r2,-28(fp)
}
   28d90:	e6ffff04 	addi	sp,fp,-4
   28d94:	dfc00217 	ldw	ra,8(sp)
   28d98:	df000117 	ldw	fp,4(sp)
   28d9c:	dc000017 	ldw	r16,0(sp)
   28da0:	dec00304 	addi	sp,sp,12
   28da4:	f800283a 	ret

00028da8 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   28da8:	defffa04 	addi	sp,sp,-24
   28dac:	dfc00515 	stw	ra,20(sp)
   28db0:	df000415 	stw	fp,16(sp)
   28db4:	dc000315 	stw	r16,12(sp)
   28db8:	df000404 	addi	fp,sp,16
   28dbc:	2005883a 	mov	r2,r4
   28dc0:	e0bffe0d 	sth	r2,-8(fp)
    bool result = false;
   28dc4:	e03ffc15 	stw	zero,-16(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   28dc8:	002797c0 	call	2797c <alt_up_sd_card_is_Present>
   28dcc:	10006226 	beq	r2,zero,28f58 <alt_up_sd_card_fclose+0x1b0>
   28dd0:	d0a02f17 	ldw	r2,-32580(gp)
   28dd4:	10006026 	beq	r2,zero,28f58 <alt_up_sd_card_fclose+0x1b0>
    {
        if (active_files[file_handle].in_use) 
   28dd8:	e0fffe0f 	ldh	r3,-8(fp)
   28ddc:	00820034 	movhi	r2,2048
   28de0:	1086d904 	addi	r2,r2,7012
   28de4:	180691ba 	slli	r3,r3,6
   28de8:	10c5883a 	add	r2,r2,r3
   28dec:	10800f04 	addi	r2,r2,60
   28df0:	10800017 	ldw	r2,0(r2)
   28df4:	10005826 	beq	r2,zero,28f58 <alt_up_sd_card_fclose+0x1b0>
        {
			if (active_files[file_handle].modified)
   28df8:	e0fffe0f 	ldh	r3,-8(fp)
   28dfc:	00820034 	movhi	r2,2048
   28e00:	1086d904 	addi	r2,r2,7012
   28e04:	180691ba 	slli	r3,r3,6
   28e08:	10c5883a 	add	r2,r2,r3
   28e0c:	10800e04 	addi	r2,r2,56
   28e10:	10800017 	ldw	r2,0(r2)
   28e14:	10004726 	beq	r2,zero,28f34 <alt_up_sd_card_fclose+0x18c>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   28e18:	e0fffe0f 	ldh	r3,-8(fp)
   28e1c:	00820034 	movhi	r2,2048
   28e20:	1086d904 	addi	r2,r2,7012
   28e24:	180691ba 	slli	r3,r3,6
   28e28:	10c5883a 	add	r2,r2,r3
   28e2c:	10800b04 	addi	r2,r2,44
   28e30:	10800017 	ldw	r2,0(r2)
   28e34:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   28e38:	e0fffe0f 	ldh	r3,-8(fp)
   28e3c:	00820034 	movhi	r2,2048
   28e40:	1086d904 	addi	r2,r2,7012
   28e44:	180691ba 	slli	r3,r3,6
   28e48:	10c5883a 	add	r2,r2,r3
   28e4c:	10800a04 	addi	r2,r2,40
   28e50:	10800017 	ldw	r2,0(r2)
   28e54:	1000071e 	bne	r2,zero,28e74 <alt_up_sd_card_fclose+0xcc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   28e58:	00820034 	movhi	r2,2048
   28e5c:	1086c404 	addi	r2,r2,6928
   28e60:	10801317 	ldw	r2,76(r2)
   28e64:	e0fffd17 	ldw	r3,-12(fp)
   28e68:	1885883a 	add	r2,r3,r2
   28e6c:	e0bffd15 	stw	r2,-12(fp)
   28e70:	00001606 	br	28ecc <alt_up_sd_card_fclose+0x124>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   28e74:	00820034 	movhi	r2,2048
   28e78:	1086c404 	addi	r2,r2,6928
   28e7c:	10c01417 	ldw	r3,80(r2)
   28e80:	e0bffd17 	ldw	r2,-12(fp)
   28e84:	18a1883a 	add	r16,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   28e88:	e0fffe0f 	ldh	r3,-8(fp)
   28e8c:	00820034 	movhi	r2,2048
   28e90:	1086d904 	addi	r2,r2,7012
   28e94:	180691ba 	slli	r3,r3,6
   28e98:	10c5883a 	add	r2,r2,r3
   28e9c:	10800a04 	addi	r2,r2,40
   28ea0:	10800017 	ldw	r2,0(r2)
   28ea4:	10ffff84 	addi	r3,r2,-2
   28ea8:	00820034 	movhi	r2,2048
   28eac:	1086c404 	addi	r2,r2,6928
   28eb0:	10800383 	ldbu	r2,14(r2)
   28eb4:	10803fcc 	andi	r2,r2,255
   28eb8:	1809883a 	mov	r4,r3
   28ebc:	100b883a 	mov	r5,r2
   28ec0:	00225e40 	call	225e4 <__mulsi3>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   28ec4:	8085883a 	add	r2,r16,r2
   28ec8:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   28ecc:	e0fffd17 	ldw	r3,-12(fp)
   28ed0:	d0a03617 	ldw	r2,-32552(gp)
   28ed4:	1809883a 	mov	r4,r3
   28ed8:	100b883a 	mov	r5,r2
   28edc:	0024cf80 	call	24cf8 <Read_Sector_Data>
   28ee0:	10001426 	beq	r2,zero,28f34 <alt_up_sd_card_fclose+0x18c>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   28ee4:	e0fffe0f 	ldh	r3,-8(fp)
   28ee8:	00820034 	movhi	r2,2048
   28eec:	1086d904 	addi	r2,r2,7012
   28ef0:	180691ba 	slli	r3,r3,6
   28ef4:	10c5883a 	add	r2,r2,r3
   28ef8:	10800c04 	addi	r2,r2,48
   28efc:	1080000b 	ldhu	r2,0(r2)
   28f00:	113fffcc 	andi	r4,r2,65535
   28f04:	2120001c 	xori	r4,r4,32768
   28f08:	21200004 	addi	r4,r4,-32768
   28f0c:	e0bffe0f 	ldh	r2,-8(fp)
   28f10:	100691ba 	slli	r3,r2,6
   28f14:	00820034 	movhi	r2,2048
   28f18:	1086d904 	addi	r2,r2,7012
   28f1c:	1885883a 	add	r2,r3,r2
   28f20:	100b883a 	mov	r5,r2
   28f24:	002538c0 	call	2538c <Write_File_Record_At_Offset>
   28f28:	10000226 	beq	r2,zero,28f34 <alt_up_sd_card_fclose+0x18c>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   28f2c:	0024cac0 	call	24cac <Save_Modified_Sector>
   28f30:	e0bffc15 	stw	r2,-16(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   28f34:	e0fffe0f 	ldh	r3,-8(fp)
   28f38:	00820034 	movhi	r2,2048
   28f3c:	1086d904 	addi	r2,r2,7012
   28f40:	180691ba 	slli	r3,r3,6
   28f44:	10c5883a 	add	r2,r2,r3
   28f48:	10800f04 	addi	r2,r2,60
   28f4c:	10000015 	stw	zero,0(r2)
			result = true;
   28f50:	00800044 	movi	r2,1
   28f54:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    return result;
   28f58:	e0bffc17 	ldw	r2,-16(fp)
}
   28f5c:	e6ffff04 	addi	sp,fp,-4
   28f60:	dfc00217 	ldw	ra,8(sp)
   28f64:	df000117 	ldw	fp,4(sp)
   28f68:	dc000017 	ldw	r16,0(sp)
   28f6c:	dec00304 	addi	sp,sp,12
   28f70:	f800283a 	ret

00028f74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   28f74:	defffa04 	addi	sp,sp,-24
   28f78:	dfc00515 	stw	ra,20(sp)
   28f7c:	df000415 	stw	fp,16(sp)
   28f80:	df000404 	addi	fp,sp,16
   28f84:	e13ffd15 	stw	r4,-12(fp)
   28f88:	e17ffe15 	stw	r5,-8(fp)
   28f8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   28f90:	e0bffd17 	ldw	r2,-12(fp)
   28f94:	10800017 	ldw	r2,0(r2)
   28f98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   28f9c:	e0bffc17 	ldw	r2,-16(fp)
   28fa0:	10c00a04 	addi	r3,r2,40
   28fa4:	e0bffd17 	ldw	r2,-12(fp)
   28fa8:	10800217 	ldw	r2,8(r2)
   28fac:	1809883a 	mov	r4,r3
   28fb0:	e17ffe17 	ldw	r5,-8(fp)
   28fb4:	e1bfff17 	ldw	r6,-4(fp)
   28fb8:	100f883a 	mov	r7,r2
   28fbc:	00290340 	call	29034 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   28fc0:	e037883a 	mov	sp,fp
   28fc4:	dfc00117 	ldw	ra,4(sp)
   28fc8:	df000017 	ldw	fp,0(sp)
   28fcc:	dec00204 	addi	sp,sp,8
   28fd0:	f800283a 	ret

00028fd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   28fd4:	defffa04 	addi	sp,sp,-24
   28fd8:	dfc00515 	stw	ra,20(sp)
   28fdc:	df000415 	stw	fp,16(sp)
   28fe0:	df000404 	addi	fp,sp,16
   28fe4:	e13ffd15 	stw	r4,-12(fp)
   28fe8:	e17ffe15 	stw	r5,-8(fp)
   28fec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   28ff0:	e0bffd17 	ldw	r2,-12(fp)
   28ff4:	10800017 	ldw	r2,0(r2)
   28ff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   28ffc:	e0bffc17 	ldw	r2,-16(fp)
   29000:	10c00a04 	addi	r3,r2,40
   29004:	e0bffd17 	ldw	r2,-12(fp)
   29008:	10800217 	ldw	r2,8(r2)
   2900c:	1809883a 	mov	r4,r3
   29010:	e17ffe17 	ldw	r5,-8(fp)
   29014:	e1bfff17 	ldw	r6,-4(fp)
   29018:	100f883a 	mov	r7,r2
   2901c:	00291180 	call	29118 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   29020:	e037883a 	mov	sp,fp
   29024:	dfc00117 	ldw	ra,4(sp)
   29028:	df000017 	ldw	fp,0(sp)
   2902c:	dec00204 	addi	sp,sp,8
   29030:	f800283a 	ret

00029034 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   29034:	defff704 	addi	sp,sp,-36
   29038:	df000815 	stw	fp,32(sp)
   2903c:	df000804 	addi	fp,sp,32
   29040:	e13ffc15 	stw	r4,-16(fp)
   29044:	e17ffd15 	stw	r5,-12(fp)
   29048:	e1bffe15 	stw	r6,-8(fp)
   2904c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   29050:	e0bffc17 	ldw	r2,-16(fp)
   29054:	10800017 	ldw	r2,0(r2)
   29058:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   2905c:	e0bffd17 	ldw	r2,-12(fp)
   29060:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   29064:	e0bffe17 	ldw	r2,-8(fp)
   29068:	e0fffd17 	ldw	r3,-12(fp)
   2906c:	1885883a 	add	r2,r3,r2
   29070:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   29074:	00001406 	br	290c8 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   29078:	e0bff917 	ldw	r2,-28(fp)
   2907c:	10800037 	ldwio	r2,0(r2)
   29080:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   29084:	e0bffb17 	ldw	r2,-20(fp)
   29088:	10a0000c 	andi	r2,r2,32768
   2908c:	10000626 	beq	r2,zero,290a8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   29090:	e0bff817 	ldw	r2,-32(fp)
   29094:	10c00044 	addi	r3,r2,1
   29098:	e0fff815 	stw	r3,-32(fp)
   2909c:	e0fffb17 	ldw	r3,-20(fp)
   290a0:	10c00005 	stb	r3,0(r2)
   290a4:	00000806 	br	290c8 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   290a8:	e0fff817 	ldw	r3,-32(fp)
   290ac:	e0bffd17 	ldw	r2,-12(fp)
   290b0:	18800126 	beq	r3,r2,290b8 <altera_avalon_jtag_uart_read+0x84>
      break;
   290b4:	00000706 	br	290d4 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   290b8:	e0bfff17 	ldw	r2,-4(fp)
   290bc:	1090000c 	andi	r2,r2,16384
   290c0:	10000126 	beq	r2,zero,290c8 <altera_avalon_jtag_uart_read+0x94>
      break;   
   290c4:	00000306 	br	290d4 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   290c8:	e0fff817 	ldw	r3,-32(fp)
   290cc:	e0bffa17 	ldw	r2,-24(fp)
   290d0:	18bfe936 	bltu	r3,r2,29078 <__alt_data_end+0xf4029078>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   290d4:	e0fff817 	ldw	r3,-32(fp)
   290d8:	e0bffd17 	ldw	r2,-12(fp)
   290dc:	18800426 	beq	r3,r2,290f0 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   290e0:	e0fff817 	ldw	r3,-32(fp)
   290e4:	e0bffd17 	ldw	r2,-12(fp)
   290e8:	1885c83a 	sub	r2,r3,r2
   290ec:	00000606 	br	29108 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   290f0:	e0bfff17 	ldw	r2,-4(fp)
   290f4:	1090000c 	andi	r2,r2,16384
   290f8:	10000226 	beq	r2,zero,29104 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   290fc:	00bffd44 	movi	r2,-11
   29100:	00000106 	br	29108 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   29104:	00bffec4 	movi	r2,-5
}
   29108:	e037883a 	mov	sp,fp
   2910c:	df000017 	ldw	fp,0(sp)
   29110:	dec00104 	addi	sp,sp,4
   29114:	f800283a 	ret

00029118 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   29118:	defff904 	addi	sp,sp,-28
   2911c:	df000615 	stw	fp,24(sp)
   29120:	df000604 	addi	fp,sp,24
   29124:	e13ffc15 	stw	r4,-16(fp)
   29128:	e17ffd15 	stw	r5,-12(fp)
   2912c:	e1bffe15 	stw	r6,-8(fp)
   29130:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   29134:	e0bffc17 	ldw	r2,-16(fp)
   29138:	10800017 	ldw	r2,0(r2)
   2913c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   29140:	e0bffe17 	ldw	r2,-8(fp)
   29144:	e0fffd17 	ldw	r3,-12(fp)
   29148:	1885883a 	add	r2,r3,r2
   2914c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   29150:	00000e06 	br	2918c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   29154:	e0bffa17 	ldw	r2,-24(fp)
   29158:	10800104 	addi	r2,r2,4
   2915c:	10800037 	ldwio	r2,0(r2)
   29160:	10bfffec 	andhi	r2,r2,65535
   29164:	10000926 	beq	r2,zero,2918c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   29168:	e0fffa17 	ldw	r3,-24(fp)
   2916c:	e0bffd17 	ldw	r2,-12(fp)
   29170:	11000044 	addi	r4,r2,1
   29174:	e13ffd15 	stw	r4,-12(fp)
   29178:	10800003 	ldbu	r2,0(r2)
   2917c:	10803fcc 	andi	r2,r2,255
   29180:	1080201c 	xori	r2,r2,128
   29184:	10bfe004 	addi	r2,r2,-128
   29188:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   2918c:	e0fffd17 	ldw	r3,-12(fp)
   29190:	e0bffb17 	ldw	r2,-20(fp)
   29194:	18bfef36 	bltu	r3,r2,29154 <__alt_data_end+0xf4029154>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   29198:	e0bffe17 	ldw	r2,-8(fp)
}
   2919c:	e037883a 	mov	sp,fp
   291a0:	df000017 	ldw	fp,0(sp)
   291a4:	dec00104 	addi	sp,sp,4
   291a8:	f800283a 	ret

000291ac <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   291ac:	defffd04 	addi	sp,sp,-12
   291b0:	df000215 	stw	fp,8(sp)
   291b4:	df000204 	addi	fp,sp,8
   291b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   291bc:	e0bfff17 	ldw	r2,-4(fp)
   291c0:	10800a17 	ldw	r2,40(r2)
   291c4:	10800104 	addi	r2,r2,4
   291c8:	10800037 	ldwio	r2,0(r2)
   291cc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   291d0:	e0bffe17 	ldw	r2,-8(fp)
   291d4:	10800054 	ori	r2,r2,1
   291d8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   291dc:	e0bfff17 	ldw	r2,-4(fp)
   291e0:	10800a17 	ldw	r2,40(r2)
   291e4:	10800104 	addi	r2,r2,4
   291e8:	1007883a 	mov	r3,r2
   291ec:	e0bffe17 	ldw	r2,-8(fp)
   291f0:	18800035 	stwio	r2,0(r3)
}
   291f4:	e037883a 	mov	sp,fp
   291f8:	df000017 	ldw	fp,0(sp)
   291fc:	dec00104 	addi	sp,sp,4
   29200:	f800283a 	ret

00029204 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   29204:	defffd04 	addi	sp,sp,-12
   29208:	df000215 	stw	fp,8(sp)
   2920c:	df000204 	addi	fp,sp,8
   29210:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   29214:	e0bfff17 	ldw	r2,-4(fp)
   29218:	10800a17 	ldw	r2,40(r2)
   2921c:	10800104 	addi	r2,r2,4
   29220:	10800037 	ldwio	r2,0(r2)
   29224:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   29228:	e0fffe17 	ldw	r3,-8(fp)
   2922c:	00bfff84 	movi	r2,-2
   29230:	1884703a 	and	r2,r3,r2
   29234:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   29238:	e0bfff17 	ldw	r2,-4(fp)
   2923c:	10800a17 	ldw	r2,40(r2)
   29240:	10800104 	addi	r2,r2,4
   29244:	1007883a 	mov	r3,r2
   29248:	e0bffe17 	ldw	r2,-8(fp)
   2924c:	18800035 	stwio	r2,0(r3)
}
   29250:	e037883a 	mov	sp,fp
   29254:	df000017 	ldw	fp,0(sp)
   29258:	dec00104 	addi	sp,sp,4
   2925c:	f800283a 	ret

00029260 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   29260:	defffd04 	addi	sp,sp,-12
   29264:	df000215 	stw	fp,8(sp)
   29268:	df000204 	addi	fp,sp,8
   2926c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   29270:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   29274:	e0bfff17 	ldw	r2,-4(fp)
   29278:	10800a17 	ldw	r2,40(r2)
   2927c:	10800084 	addi	r2,r2,2
   29280:	1080002b 	ldhuio	r2,0(r2)
   29284:	10bfffcc 	andi	r2,r2,65535
   29288:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   2928c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   29290:	e037883a 	mov	sp,fp
   29294:	df000017 	ldw	fp,0(sp)
   29298:	dec00104 	addi	sp,sp,4
   2929c:	f800283a 	ret

000292a0 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   292a0:	defffd04 	addi	sp,sp,-12
   292a4:	df000215 	stw	fp,8(sp)
   292a8:	df000204 	addi	fp,sp,8
   292ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   292b0:	e0bfff17 	ldw	r2,-4(fp)
   292b4:	10800a17 	ldw	r2,40(r2)
   292b8:	10800104 	addi	r2,r2,4
   292bc:	10800037 	ldwio	r2,0(r2)
   292c0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   292c4:	e0bffe17 	ldw	r2,-8(fp)
   292c8:	1004d43a 	srli	r2,r2,16
}
   292cc:	e037883a 	mov	sp,fp
   292d0:	df000017 	ldw	fp,0(sp)
   292d4:	dec00104 	addi	sp,sp,4
   292d8:	f800283a 	ret

000292dc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   292dc:	defffd04 	addi	sp,sp,-12
   292e0:	df000215 	stw	fp,8(sp)
   292e4:	df000204 	addi	fp,sp,8
   292e8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   292ec:	e0bfff17 	ldw	r2,-4(fp)
   292f0:	1080800c 	andi	r2,r2,512
   292f4:	1004d27a 	srli	r2,r2,9
   292f8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   292fc:	e0bffe17 	ldw	r2,-8(fp)
   29300:	10000226 	beq	r2,zero,2930c <alt_up_rs232_check_parity+0x30>
   29304:	00bfffc4 	movi	r2,-1
   29308:	00000106 	br	29310 <alt_up_rs232_check_parity+0x34>
   2930c:	0005883a 	mov	r2,zero
}
   29310:	e037883a 	mov	sp,fp
   29314:	df000017 	ldw	fp,0(sp)
   29318:	dec00104 	addi	sp,sp,4
   2931c:	f800283a 	ret

00029320 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   29320:	defffd04 	addi	sp,sp,-12
   29324:	df000215 	stw	fp,8(sp)
   29328:	df000204 	addi	fp,sp,8
   2932c:	e13ffe15 	stw	r4,-8(fp)
   29330:	2805883a 	mov	r2,r5
   29334:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   29338:	e0bffe17 	ldw	r2,-8(fp)
   2933c:	10800a17 	ldw	r2,40(r2)
   29340:	1007883a 	mov	r3,r2
   29344:	e0bfff03 	ldbu	r2,-4(fp)
   29348:	18800035 	stwio	r2,0(r3)
	return 0;
   2934c:	0005883a 	mov	r2,zero
}
   29350:	e037883a 	mov	sp,fp
   29354:	df000017 	ldw	fp,0(sp)
   29358:	dec00104 	addi	sp,sp,4
   2935c:	f800283a 	ret

00029360 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   29360:	defffa04 	addi	sp,sp,-24
   29364:	dfc00515 	stw	ra,20(sp)
   29368:	df000415 	stw	fp,16(sp)
   2936c:	df000404 	addi	fp,sp,16
   29370:	e13ffd15 	stw	r4,-12(fp)
   29374:	e17ffe15 	stw	r5,-8(fp)
   29378:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   2937c:	e0bffd17 	ldw	r2,-12(fp)
   29380:	10800a17 	ldw	r2,40(r2)
   29384:	10800037 	ldwio	r2,0(r2)
   29388:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   2938c:	e0bffc17 	ldw	r2,-16(fp)
   29390:	1007883a 	mov	r3,r2
   29394:	e0bffe17 	ldw	r2,-8(fp)
   29398:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   2939c:	e13ffc17 	ldw	r4,-16(fp)
   293a0:	00292dc0 	call	292dc <alt_up_rs232_check_parity>
   293a4:	1007883a 	mov	r3,r2
   293a8:	e0bfff17 	ldw	r2,-4(fp)
   293ac:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   293b0:	e0bffc17 	ldw	r2,-16(fp)
   293b4:	10a0000c 	andi	r2,r2,32768
   293b8:	1004d3fa 	srli	r2,r2,15
   293bc:	10bfffc4 	addi	r2,r2,-1
}
   293c0:	e037883a 	mov	sp,fp
   293c4:	dfc00117 	ldw	ra,4(sp)
   293c8:	df000017 	ldw	fp,0(sp)
   293cc:	dec00204 	addi	sp,sp,8
   293d0:	f800283a 	ret

000293d4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   293d4:	defff804 	addi	sp,sp,-32
   293d8:	dfc00715 	stw	ra,28(sp)
   293dc:	df000615 	stw	fp,24(sp)
   293e0:	df000604 	addi	fp,sp,24
   293e4:	e13ffd15 	stw	r4,-12(fp)
   293e8:	e17ffe15 	stw	r5,-8(fp)
   293ec:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   293f0:	e0bffd17 	ldw	r2,-12(fp)
   293f4:	10800017 	ldw	r2,0(r2)
   293f8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   293fc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   29400:	00000e06 	br	2943c <alt_up_rs232_read_fd+0x68>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   29404:	e0bffe17 	ldw	r2,-8(fp)
   29408:	10c00044 	addi	r3,r2,1
   2940c:	e0fffe15 	stw	r3,-8(fp)
   29410:	e0fffc04 	addi	r3,fp,-16
   29414:	e13ffb17 	ldw	r4,-20(fp)
   29418:	100b883a 	mov	r5,r2
   2941c:	180d883a 	mov	r6,r3
   29420:	00293600 	call	29360 <alt_up_rs232_read_data>
   29424:	1000041e 	bne	r2,zero,29438 <alt_up_rs232_read_fd+0x64>
			count++;
   29428:	e0bffa17 	ldw	r2,-24(fp)
   2942c:	10800044 	addi	r2,r2,1
   29430:	e0bffa15 	stw	r2,-24(fp)
   29434:	00000106 	br	2943c <alt_up_rs232_read_fd+0x68>
		else
			break;
   29438:	00000406 	br	2944c <alt_up_rs232_read_fd+0x78>
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   2943c:	e0bfff17 	ldw	r2,-4(fp)
   29440:	10ffffc4 	addi	r3,r2,-1
   29444:	e0ffff15 	stw	r3,-4(fp)
   29448:	103fee1e 	bne	r2,zero,29404 <__alt_data_end+0xf4029404>
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
   2944c:	e0bffa17 	ldw	r2,-24(fp)
}
   29450:	e037883a 	mov	sp,fp
   29454:	dfc00117 	ldw	ra,4(sp)
   29458:	df000017 	ldw	fp,0(sp)
   2945c:	dec00204 	addi	sp,sp,8
   29460:	f800283a 	ret

00029464 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   29464:	defff904 	addi	sp,sp,-28
   29468:	dfc00615 	stw	ra,24(sp)
   2946c:	df000515 	stw	fp,20(sp)
   29470:	df000504 	addi	fp,sp,20
   29474:	e13ffd15 	stw	r4,-12(fp)
   29478:	e17ffe15 	stw	r5,-8(fp)
   2947c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   29480:	e0bffd17 	ldw	r2,-12(fp)
   29484:	10800017 	ldw	r2,0(r2)
   29488:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   2948c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   29490:	00000f06 	br	294d0 <alt_up_rs232_write_fd+0x6c>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   29494:	e0bffe17 	ldw	r2,-8(fp)
   29498:	10800003 	ldbu	r2,0(r2)
   2949c:	10803fcc 	andi	r2,r2,255
   294a0:	e13ffc17 	ldw	r4,-16(fp)
   294a4:	100b883a 	mov	r5,r2
   294a8:	00293200 	call	29320 <alt_up_rs232_write_data>
   294ac:	1000071e 	bne	r2,zero,294cc <alt_up_rs232_write_fd+0x68>
		{
			count++;
   294b0:	e0bffb17 	ldw	r2,-20(fp)
   294b4:	10800044 	addi	r2,r2,1
   294b8:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   294bc:	e0bffe17 	ldw	r2,-8(fp)
   294c0:	10800044 	addi	r2,r2,1
   294c4:	e0bffe15 	stw	r2,-8(fp)
   294c8:	00000106 	br	294d0 <alt_up_rs232_write_fd+0x6c>
		}
		else
			break;
   294cc:	00000406 	br	294e0 <alt_up_rs232_write_fd+0x7c>

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   294d0:	e0bfff17 	ldw	r2,-4(fp)
   294d4:	10ffffc4 	addi	r3,r2,-1
   294d8:	e0ffff15 	stw	r3,-4(fp)
   294dc:	103fed1e 	bne	r2,zero,29494 <__alt_data_end+0xf4029494>
			ptr++;
		}
		else
			break;
	}
	return count;
   294e0:	e0bffb17 	ldw	r2,-20(fp)
}
   294e4:	e037883a 	mov	sp,fp
   294e8:	dfc00117 	ldw	ra,4(sp)
   294ec:	df000017 	ldw	fp,0(sp)
   294f0:	dec00204 	addi	sp,sp,8
   294f4:	f800283a 	ret

000294f8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   294f8:	defffc04 	addi	sp,sp,-16
   294fc:	dfc00315 	stw	ra,12(sp)
   29500:	df000215 	stw	fp,8(sp)
   29504:	df000204 	addi	fp,sp,8
   29508:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   2950c:	e13fff17 	ldw	r4,-4(fp)
   29510:	01420034 	movhi	r5,2048
   29514:	2943d304 	addi	r5,r5,3916
   29518:	00298540 	call	29854 <alt_find_dev>
   2951c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   29520:	e0bffe17 	ldw	r2,-8(fp)
}
   29524:	e037883a 	mov	sp,fp
   29528:	dfc00117 	ldw	ra,4(sp)
   2952c:	df000017 	ldw	fp,0(sp)
   29530:	dec00204 	addi	sp,sp,8
   29534:	f800283a 	ret

00029538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29538:	defffe04 	addi	sp,sp,-8
   2953c:	dfc00115 	stw	ra,4(sp)
   29540:	df000015 	stw	fp,0(sp)
   29544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29548:	00820034 	movhi	r2,2048
   2954c:	1083d604 	addi	r2,r2,3928
   29550:	10800017 	ldw	r2,0(r2)
   29554:	10000526 	beq	r2,zero,2956c <alt_get_errno+0x34>
   29558:	00820034 	movhi	r2,2048
   2955c:	1083d604 	addi	r2,r2,3928
   29560:	10800017 	ldw	r2,0(r2)
   29564:	103ee83a 	callr	r2
   29568:	00000206 	br	29574 <alt_get_errno+0x3c>
   2956c:	00820034 	movhi	r2,2048
   29570:	1083e404 	addi	r2,r2,3984
}
   29574:	e037883a 	mov	sp,fp
   29578:	dfc00117 	ldw	ra,4(sp)
   2957c:	df000017 	ldw	fp,0(sp)
   29580:	dec00204 	addi	sp,sp,8
   29584:	f800283a 	ret

00029588 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   29588:	defffb04 	addi	sp,sp,-20
   2958c:	dfc00415 	stw	ra,16(sp)
   29590:	df000315 	stw	fp,12(sp)
   29594:	df000304 	addi	fp,sp,12
   29598:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2959c:	e0bfff17 	ldw	r2,-4(fp)
   295a0:	10000816 	blt	r2,zero,295c4 <close+0x3c>
   295a4:	e13fff17 	ldw	r4,-4(fp)
   295a8:	01400304 	movi	r5,12
   295ac:	00225e40 	call	225e4 <__mulsi3>
   295b0:	1007883a 	mov	r3,r2
   295b4:	00820034 	movhi	r2,2048
   295b8:	10835a04 	addi	r2,r2,3432
   295bc:	1885883a 	add	r2,r3,r2
   295c0:	00000106 	br	295c8 <close+0x40>
   295c4:	0005883a 	mov	r2,zero
   295c8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   295cc:	e0bffd17 	ldw	r2,-12(fp)
   295d0:	10001926 	beq	r2,zero,29638 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   295d4:	e0bffd17 	ldw	r2,-12(fp)
   295d8:	10800017 	ldw	r2,0(r2)
   295dc:	10800417 	ldw	r2,16(r2)
   295e0:	10000626 	beq	r2,zero,295fc <close+0x74>
   295e4:	e0bffd17 	ldw	r2,-12(fp)
   295e8:	10800017 	ldw	r2,0(r2)
   295ec:	10800417 	ldw	r2,16(r2)
   295f0:	e13ffd17 	ldw	r4,-12(fp)
   295f4:	103ee83a 	callr	r2
   295f8:	00000106 	br	29600 <close+0x78>
   295fc:	0005883a 	mov	r2,zero
   29600:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   29604:	e13fff17 	ldw	r4,-4(fp)
   29608:	0029cfc0 	call	29cfc <alt_release_fd>
    if (rval < 0)
   2960c:	e0bffe17 	ldw	r2,-8(fp)
   29610:	1000070e 	bge	r2,zero,29630 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   29614:	00295380 	call	29538 <alt_get_errno>
   29618:	1007883a 	mov	r3,r2
   2961c:	e0bffe17 	ldw	r2,-8(fp)
   29620:	0085c83a 	sub	r2,zero,r2
   29624:	18800015 	stw	r2,0(r3)
      return -1;
   29628:	00bfffc4 	movi	r2,-1
   2962c:	00000706 	br	2964c <close+0xc4>
    }
    return 0;
   29630:	0005883a 	mov	r2,zero
   29634:	00000506 	br	2964c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   29638:	00295380 	call	29538 <alt_get_errno>
   2963c:	1007883a 	mov	r3,r2
   29640:	00801444 	movi	r2,81
   29644:	18800015 	stw	r2,0(r3)
    return -1;
   29648:	00bfffc4 	movi	r2,-1
  }
}
   2964c:	e037883a 	mov	sp,fp
   29650:	dfc00117 	ldw	ra,4(sp)
   29654:	df000017 	ldw	fp,0(sp)
   29658:	dec00204 	addi	sp,sp,8
   2965c:	f800283a 	ret

00029660 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   29660:	deffff04 	addi	sp,sp,-4
   29664:	df000015 	stw	fp,0(sp)
   29668:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2966c:	e037883a 	mov	sp,fp
   29670:	df000017 	ldw	fp,0(sp)
   29674:	dec00104 	addi	sp,sp,4
   29678:	f800283a 	ret

0002967c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2967c:	defffc04 	addi	sp,sp,-16
   29680:	df000315 	stw	fp,12(sp)
   29684:	df000304 	addi	fp,sp,12
   29688:	e13ffd15 	stw	r4,-12(fp)
   2968c:	e17ffe15 	stw	r5,-8(fp)
   29690:	e1bfff15 	stw	r6,-4(fp)
  return len;
   29694:	e0bfff17 	ldw	r2,-4(fp)
}
   29698:	e037883a 	mov	sp,fp
   2969c:	df000017 	ldw	fp,0(sp)
   296a0:	dec00104 	addi	sp,sp,4
   296a4:	f800283a 	ret

000296a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   296a8:	defffe04 	addi	sp,sp,-8
   296ac:	dfc00115 	stw	ra,4(sp)
   296b0:	df000015 	stw	fp,0(sp)
   296b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   296b8:	00820034 	movhi	r2,2048
   296bc:	1083d604 	addi	r2,r2,3928
   296c0:	10800017 	ldw	r2,0(r2)
   296c4:	10000526 	beq	r2,zero,296dc <alt_get_errno+0x34>
   296c8:	00820034 	movhi	r2,2048
   296cc:	1083d604 	addi	r2,r2,3928
   296d0:	10800017 	ldw	r2,0(r2)
   296d4:	103ee83a 	callr	r2
   296d8:	00000206 	br	296e4 <alt_get_errno+0x3c>
   296dc:	00820034 	movhi	r2,2048
   296e0:	1083e404 	addi	r2,r2,3984
}
   296e4:	e037883a 	mov	sp,fp
   296e8:	dfc00117 	ldw	ra,4(sp)
   296ec:	df000017 	ldw	fp,0(sp)
   296f0:	dec00204 	addi	sp,sp,8
   296f4:	f800283a 	ret

000296f8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   296f8:	defffa04 	addi	sp,sp,-24
   296fc:	dfc00515 	stw	ra,20(sp)
   29700:	df000415 	stw	fp,16(sp)
   29704:	df000404 	addi	fp,sp,16
   29708:	e13ffe15 	stw	r4,-8(fp)
   2970c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   29710:	e0bffe17 	ldw	r2,-8(fp)
   29714:	10000326 	beq	r2,zero,29724 <alt_dev_llist_insert+0x2c>
   29718:	e0bffe17 	ldw	r2,-8(fp)
   2971c:	10800217 	ldw	r2,8(r2)
   29720:	1000061e 	bne	r2,zero,2973c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   29724:	00296a80 	call	296a8 <alt_get_errno>
   29728:	1007883a 	mov	r3,r2
   2972c:	00800584 	movi	r2,22
   29730:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   29734:	00bffa84 	movi	r2,-22
   29738:	00001306 	br	29788 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2973c:	e0bffe17 	ldw	r2,-8(fp)
   29740:	e0ffff17 	ldw	r3,-4(fp)
   29744:	e0fffc15 	stw	r3,-16(fp)
   29748:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2974c:	e0bffd17 	ldw	r2,-12(fp)
   29750:	e0fffc17 	ldw	r3,-16(fp)
   29754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   29758:	e0bffc17 	ldw	r2,-16(fp)
   2975c:	10c00017 	ldw	r3,0(r2)
   29760:	e0bffd17 	ldw	r2,-12(fp)
   29764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   29768:	e0bffc17 	ldw	r2,-16(fp)
   2976c:	10800017 	ldw	r2,0(r2)
   29770:	e0fffd17 	ldw	r3,-12(fp)
   29774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   29778:	e0bffc17 	ldw	r2,-16(fp)
   2977c:	e0fffd17 	ldw	r3,-12(fp)
   29780:	10c00015 	stw	r3,0(r2)

  return 0;  
   29784:	0005883a 	mov	r2,zero
}
   29788:	e037883a 	mov	sp,fp
   2978c:	dfc00117 	ldw	ra,4(sp)
   29790:	df000017 	ldw	fp,0(sp)
   29794:	dec00204 	addi	sp,sp,8
   29798:	f800283a 	ret

0002979c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2979c:	defffd04 	addi	sp,sp,-12
   297a0:	dfc00215 	stw	ra,8(sp)
   297a4:	df000115 	stw	fp,4(sp)
   297a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   297ac:	008000f4 	movhi	r2,3
   297b0:	10a8c104 	addi	r2,r2,-23804
   297b4:	e0bfff15 	stw	r2,-4(fp)
   297b8:	00000606 	br	297d4 <_do_ctors+0x38>
        (*ctor) (); 
   297bc:	e0bfff17 	ldw	r2,-4(fp)
   297c0:	10800017 	ldw	r2,0(r2)
   297c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   297c8:	e0bfff17 	ldw	r2,-4(fp)
   297cc:	10bfff04 	addi	r2,r2,-4
   297d0:	e0bfff15 	stw	r2,-4(fp)
   297d4:	e0ffff17 	ldw	r3,-4(fp)
   297d8:	008000f4 	movhi	r2,3
   297dc:	10a8c204 	addi	r2,r2,-23800
   297e0:	18bff62e 	bgeu	r3,r2,297bc <__alt_data_end+0xf40297bc>
        (*ctor) (); 
}
   297e4:	e037883a 	mov	sp,fp
   297e8:	dfc00117 	ldw	ra,4(sp)
   297ec:	df000017 	ldw	fp,0(sp)
   297f0:	dec00204 	addi	sp,sp,8
   297f4:	f800283a 	ret

000297f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   297f8:	defffd04 	addi	sp,sp,-12
   297fc:	dfc00215 	stw	ra,8(sp)
   29800:	df000115 	stw	fp,4(sp)
   29804:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   29808:	008000f4 	movhi	r2,3
   2980c:	10a8c104 	addi	r2,r2,-23804
   29810:	e0bfff15 	stw	r2,-4(fp)
   29814:	00000606 	br	29830 <_do_dtors+0x38>
        (*dtor) (); 
   29818:	e0bfff17 	ldw	r2,-4(fp)
   2981c:	10800017 	ldw	r2,0(r2)
   29820:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   29824:	e0bfff17 	ldw	r2,-4(fp)
   29828:	10bfff04 	addi	r2,r2,-4
   2982c:	e0bfff15 	stw	r2,-4(fp)
   29830:	e0ffff17 	ldw	r3,-4(fp)
   29834:	008000f4 	movhi	r2,3
   29838:	10a8c204 	addi	r2,r2,-23800
   2983c:	18bff62e 	bgeu	r3,r2,29818 <__alt_data_end+0xf4029818>
        (*dtor) (); 
}
   29840:	e037883a 	mov	sp,fp
   29844:	dfc00117 	ldw	ra,4(sp)
   29848:	df000017 	ldw	fp,0(sp)
   2984c:	dec00204 	addi	sp,sp,8
   29850:	f800283a 	ret

00029854 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   29854:	defffa04 	addi	sp,sp,-24
   29858:	dfc00515 	stw	ra,20(sp)
   2985c:	df000415 	stw	fp,16(sp)
   29860:	df000404 	addi	fp,sp,16
   29864:	e13ffe15 	stw	r4,-8(fp)
   29868:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2986c:	e0bfff17 	ldw	r2,-4(fp)
   29870:	10800017 	ldw	r2,0(r2)
   29874:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   29878:	e13ffe17 	ldw	r4,-8(fp)
   2987c:	00236bc0 	call	236bc <strlen>
   29880:	10800044 	addi	r2,r2,1
   29884:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   29888:	00000d06 	br	298c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2988c:	e0bffc17 	ldw	r2,-16(fp)
   29890:	10c00217 	ldw	r3,8(r2)
   29894:	e0bffd17 	ldw	r2,-12(fp)
   29898:	1809883a 	mov	r4,r3
   2989c:	e17ffe17 	ldw	r5,-8(fp)
   298a0:	100d883a 	mov	r6,r2
   298a4:	0029fb80 	call	29fb8 <memcmp>
   298a8:	1000021e 	bne	r2,zero,298b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   298ac:	e0bffc17 	ldw	r2,-16(fp)
   298b0:	00000706 	br	298d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   298b4:	e0bffc17 	ldw	r2,-16(fp)
   298b8:	10800017 	ldw	r2,0(r2)
   298bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   298c0:	e0fffc17 	ldw	r3,-16(fp)
   298c4:	e0bfff17 	ldw	r2,-4(fp)
   298c8:	18bff01e 	bne	r3,r2,2988c <__alt_data_end+0xf402988c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   298cc:	0005883a 	mov	r2,zero
}
   298d0:	e037883a 	mov	sp,fp
   298d4:	dfc00117 	ldw	ra,4(sp)
   298d8:	df000017 	ldw	fp,0(sp)
   298dc:	dec00204 	addi	sp,sp,8
   298e0:	f800283a 	ret

000298e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   298e4:	deffff04 	addi	sp,sp,-4
   298e8:	df000015 	stw	fp,0(sp)
   298ec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   298f0:	e037883a 	mov	sp,fp
   298f4:	df000017 	ldw	fp,0(sp)
   298f8:	dec00104 	addi	sp,sp,4
   298fc:	f800283a 	ret

00029900 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   29900:	defff804 	addi	sp,sp,-32
   29904:	dfc00715 	stw	ra,28(sp)
   29908:	df000615 	stw	fp,24(sp)
   2990c:	dc000515 	stw	r16,20(sp)
   29910:	df000604 	addi	fp,sp,24
   29914:	e13ffb15 	stw	r4,-20(fp)
   29918:	e17ffc15 	stw	r5,-16(fp)
   2991c:	e1bffd15 	stw	r6,-12(fp)
   29920:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   29924:	e13ffc17 	ldw	r4,-16(fp)
   29928:	e17ffd17 	ldw	r5,-12(fp)
   2992c:	e1bffe17 	ldw	r6,-8(fp)
   29930:	0029b9c0 	call	29b9c <open>
   29934:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   29938:	e0bffa17 	ldw	r2,-24(fp)
   2993c:	10002216 	blt	r2,zero,299c8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   29940:	04020034 	movhi	r16,2048
   29944:	84035a04 	addi	r16,r16,3432
   29948:	e0bffa17 	ldw	r2,-24(fp)
   2994c:	1009883a 	mov	r4,r2
   29950:	01400304 	movi	r5,12
   29954:	00225e40 	call	225e4 <__mulsi3>
   29958:	8085883a 	add	r2,r16,r2
   2995c:	10c00017 	ldw	r3,0(r2)
   29960:	e0bffb17 	ldw	r2,-20(fp)
   29964:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   29968:	04020034 	movhi	r16,2048
   2996c:	84035a04 	addi	r16,r16,3432
   29970:	e0bffa17 	ldw	r2,-24(fp)
   29974:	1009883a 	mov	r4,r2
   29978:	01400304 	movi	r5,12
   2997c:	00225e40 	call	225e4 <__mulsi3>
   29980:	8085883a 	add	r2,r16,r2
   29984:	10800104 	addi	r2,r2,4
   29988:	10c00017 	ldw	r3,0(r2)
   2998c:	e0bffb17 	ldw	r2,-20(fp)
   29990:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   29994:	04020034 	movhi	r16,2048
   29998:	84035a04 	addi	r16,r16,3432
   2999c:	e0bffa17 	ldw	r2,-24(fp)
   299a0:	1009883a 	mov	r4,r2
   299a4:	01400304 	movi	r5,12
   299a8:	00225e40 	call	225e4 <__mulsi3>
   299ac:	8085883a 	add	r2,r16,r2
   299b0:	10800204 	addi	r2,r2,8
   299b4:	10c00017 	ldw	r3,0(r2)
   299b8:	e0bffb17 	ldw	r2,-20(fp)
   299bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   299c0:	e13ffa17 	ldw	r4,-24(fp)
   299c4:	0029cfc0 	call	29cfc <alt_release_fd>
  }
} 
   299c8:	e6ffff04 	addi	sp,fp,-4
   299cc:	dfc00217 	ldw	ra,8(sp)
   299d0:	df000117 	ldw	fp,4(sp)
   299d4:	dc000017 	ldw	r16,0(sp)
   299d8:	dec00304 	addi	sp,sp,12
   299dc:	f800283a 	ret

000299e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   299e0:	defffb04 	addi	sp,sp,-20
   299e4:	dfc00415 	stw	ra,16(sp)
   299e8:	df000315 	stw	fp,12(sp)
   299ec:	df000304 	addi	fp,sp,12
   299f0:	e13ffd15 	stw	r4,-12(fp)
   299f4:	e17ffe15 	stw	r5,-8(fp)
   299f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   299fc:	01020034 	movhi	r4,2048
   29a00:	21035d04 	addi	r4,r4,3444
   29a04:	e17ffd17 	ldw	r5,-12(fp)
   29a08:	01800044 	movi	r6,1
   29a0c:	01c07fc4 	movi	r7,511
   29a10:	00299000 	call	29900 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   29a14:	01020034 	movhi	r4,2048
   29a18:	21035a04 	addi	r4,r4,3432
   29a1c:	e17ffe17 	ldw	r5,-8(fp)
   29a20:	000d883a 	mov	r6,zero
   29a24:	01c07fc4 	movi	r7,511
   29a28:	00299000 	call	29900 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   29a2c:	01020034 	movhi	r4,2048
   29a30:	21036004 	addi	r4,r4,3456
   29a34:	e17fff17 	ldw	r5,-4(fp)
   29a38:	01800044 	movi	r6,1
   29a3c:	01c07fc4 	movi	r7,511
   29a40:	00299000 	call	29900 <alt_open_fd>
}  
   29a44:	e037883a 	mov	sp,fp
   29a48:	dfc00117 	ldw	ra,4(sp)
   29a4c:	df000017 	ldw	fp,0(sp)
   29a50:	dec00204 	addi	sp,sp,8
   29a54:	f800283a 	ret

00029a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   29a58:	defffe04 	addi	sp,sp,-8
   29a5c:	dfc00115 	stw	ra,4(sp)
   29a60:	df000015 	stw	fp,0(sp)
   29a64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   29a68:	00820034 	movhi	r2,2048
   29a6c:	1083d604 	addi	r2,r2,3928
   29a70:	10800017 	ldw	r2,0(r2)
   29a74:	10000526 	beq	r2,zero,29a8c <alt_get_errno+0x34>
   29a78:	00820034 	movhi	r2,2048
   29a7c:	1083d604 	addi	r2,r2,3928
   29a80:	10800017 	ldw	r2,0(r2)
   29a84:	103ee83a 	callr	r2
   29a88:	00000206 	br	29a94 <alt_get_errno+0x3c>
   29a8c:	00820034 	movhi	r2,2048
   29a90:	1083e404 	addi	r2,r2,3984
}
   29a94:	e037883a 	mov	sp,fp
   29a98:	dfc00117 	ldw	ra,4(sp)
   29a9c:	df000017 	ldw	fp,0(sp)
   29aa0:	dec00204 	addi	sp,sp,8
   29aa4:	f800283a 	ret

00029aa8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   29aa8:	defffb04 	addi	sp,sp,-20
   29aac:	dfc00415 	stw	ra,16(sp)
   29ab0:	df000315 	stw	fp,12(sp)
   29ab4:	dc000215 	stw	r16,8(sp)
   29ab8:	df000304 	addi	fp,sp,12
   29abc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   29ac0:	e0bffe17 	ldw	r2,-8(fp)
   29ac4:	10800217 	ldw	r2,8(r2)
   29ac8:	10d00034 	orhi	r3,r2,16384
   29acc:	e0bffe17 	ldw	r2,-8(fp)
   29ad0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   29ad4:	e03ffd15 	stw	zero,-12(fp)
   29ad8:	00002306 	br	29b68 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   29adc:	04020034 	movhi	r16,2048
   29ae0:	84035a04 	addi	r16,r16,3432
   29ae4:	e0bffd17 	ldw	r2,-12(fp)
   29ae8:	1009883a 	mov	r4,r2
   29aec:	01400304 	movi	r5,12
   29af0:	00225e40 	call	225e4 <__mulsi3>
   29af4:	8085883a 	add	r2,r16,r2
   29af8:	10c00017 	ldw	r3,0(r2)
   29afc:	e0bffe17 	ldw	r2,-8(fp)
   29b00:	10800017 	ldw	r2,0(r2)
   29b04:	1880151e 	bne	r3,r2,29b5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   29b08:	04020034 	movhi	r16,2048
   29b0c:	84035a04 	addi	r16,r16,3432
   29b10:	e0bffd17 	ldw	r2,-12(fp)
   29b14:	1009883a 	mov	r4,r2
   29b18:	01400304 	movi	r5,12
   29b1c:	00225e40 	call	225e4 <__mulsi3>
   29b20:	8085883a 	add	r2,r16,r2
   29b24:	10800204 	addi	r2,r2,8
   29b28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   29b2c:	10000b0e 	bge	r2,zero,29b5c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   29b30:	e13ffd17 	ldw	r4,-12(fp)
   29b34:	01400304 	movi	r5,12
   29b38:	00225e40 	call	225e4 <__mulsi3>
   29b3c:	1007883a 	mov	r3,r2
   29b40:	00820034 	movhi	r2,2048
   29b44:	10835a04 	addi	r2,r2,3432
   29b48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   29b4c:	e0bffe17 	ldw	r2,-8(fp)
   29b50:	18800226 	beq	r3,r2,29b5c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   29b54:	00bffcc4 	movi	r2,-13
   29b58:	00000a06 	br	29b84 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   29b5c:	e0bffd17 	ldw	r2,-12(fp)
   29b60:	10800044 	addi	r2,r2,1
   29b64:	e0bffd15 	stw	r2,-12(fp)
   29b68:	00820034 	movhi	r2,2048
   29b6c:	1083d504 	addi	r2,r2,3924
   29b70:	10800017 	ldw	r2,0(r2)
   29b74:	1007883a 	mov	r3,r2
   29b78:	e0bffd17 	ldw	r2,-12(fp)
   29b7c:	18bfd72e 	bgeu	r3,r2,29adc <__alt_data_end+0xf4029adc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   29b80:	0005883a 	mov	r2,zero
}
   29b84:	e6ffff04 	addi	sp,fp,-4
   29b88:	dfc00217 	ldw	ra,8(sp)
   29b8c:	df000117 	ldw	fp,4(sp)
   29b90:	dc000017 	ldw	r16,0(sp)
   29b94:	dec00304 	addi	sp,sp,12
   29b98:	f800283a 	ret

00029b9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   29b9c:	defff604 	addi	sp,sp,-40
   29ba0:	dfc00915 	stw	ra,36(sp)
   29ba4:	df000815 	stw	fp,32(sp)
   29ba8:	df000804 	addi	fp,sp,32
   29bac:	e13ffd15 	stw	r4,-12(fp)
   29bb0:	e17ffe15 	stw	r5,-8(fp)
   29bb4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   29bb8:	00bfffc4 	movi	r2,-1
   29bbc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   29bc0:	00bffb44 	movi	r2,-19
   29bc4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   29bc8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   29bcc:	e13ffd17 	ldw	r4,-12(fp)
   29bd0:	01420034 	movhi	r5,2048
   29bd4:	2943d304 	addi	r5,r5,3916
   29bd8:	00298540 	call	29854 <alt_find_dev>
   29bdc:	e0bff815 	stw	r2,-32(fp)
   29be0:	e0bff817 	ldw	r2,-32(fp)
   29be4:	1000051e 	bne	r2,zero,29bfc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   29be8:	e13ffd17 	ldw	r4,-12(fp)
   29bec:	0029d9c0 	call	29d9c <alt_find_file>
   29bf0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   29bf4:	00800044 	movi	r2,1
   29bf8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   29bfc:	e0bff817 	ldw	r2,-32(fp)
   29c00:	10002b26 	beq	r2,zero,29cb0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   29c04:	e13ff817 	ldw	r4,-32(fp)
   29c08:	0029eb00 	call	29eb0 <alt_get_fd>
   29c0c:	e0bff915 	stw	r2,-28(fp)
   29c10:	e0bff917 	ldw	r2,-28(fp)
   29c14:	1000030e 	bge	r2,zero,29c24 <open+0x88>
    {
      status = index;
   29c18:	e0bff917 	ldw	r2,-28(fp)
   29c1c:	e0bffa15 	stw	r2,-24(fp)
   29c20:	00002506 	br	29cb8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   29c24:	e13ff917 	ldw	r4,-28(fp)
   29c28:	01400304 	movi	r5,12
   29c2c:	00225e40 	call	225e4 <__mulsi3>
   29c30:	1007883a 	mov	r3,r2
   29c34:	00820034 	movhi	r2,2048
   29c38:	10835a04 	addi	r2,r2,3432
   29c3c:	1885883a 	add	r2,r3,r2
   29c40:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   29c44:	e0fffe17 	ldw	r3,-8(fp)
   29c48:	00900034 	movhi	r2,16384
   29c4c:	10bfffc4 	addi	r2,r2,-1
   29c50:	1886703a 	and	r3,r3,r2
   29c54:	e0bffc17 	ldw	r2,-16(fp)
   29c58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   29c5c:	e0bffb17 	ldw	r2,-20(fp)
   29c60:	1000051e 	bne	r2,zero,29c78 <open+0xdc>
   29c64:	e13ffc17 	ldw	r4,-16(fp)
   29c68:	0029aa80 	call	29aa8 <alt_file_locked>
   29c6c:	e0bffa15 	stw	r2,-24(fp)
   29c70:	e0bffa17 	ldw	r2,-24(fp)
   29c74:	10001016 	blt	r2,zero,29cb8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   29c78:	e0bff817 	ldw	r2,-32(fp)
   29c7c:	10800317 	ldw	r2,12(r2)
   29c80:	10000826 	beq	r2,zero,29ca4 <open+0x108>
   29c84:	e0bff817 	ldw	r2,-32(fp)
   29c88:	10800317 	ldw	r2,12(r2)
   29c8c:	e13ffc17 	ldw	r4,-16(fp)
   29c90:	e17ffd17 	ldw	r5,-12(fp)
   29c94:	e1bffe17 	ldw	r6,-8(fp)
   29c98:	e1ffff17 	ldw	r7,-4(fp)
   29c9c:	103ee83a 	callr	r2
   29ca0:	00000106 	br	29ca8 <open+0x10c>
   29ca4:	0005883a 	mov	r2,zero
   29ca8:	e0bffa15 	stw	r2,-24(fp)
   29cac:	00000206 	br	29cb8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   29cb0:	00bffb44 	movi	r2,-19
   29cb4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   29cb8:	e0bffa17 	ldw	r2,-24(fp)
   29cbc:	1000090e 	bge	r2,zero,29ce4 <open+0x148>
  {
    alt_release_fd (index);  
   29cc0:	e13ff917 	ldw	r4,-28(fp)
   29cc4:	0029cfc0 	call	29cfc <alt_release_fd>
    ALT_ERRNO = -status;
   29cc8:	0029a580 	call	29a58 <alt_get_errno>
   29ccc:	1007883a 	mov	r3,r2
   29cd0:	e0bffa17 	ldw	r2,-24(fp)
   29cd4:	0085c83a 	sub	r2,zero,r2
   29cd8:	18800015 	stw	r2,0(r3)
    return -1;
   29cdc:	00bfffc4 	movi	r2,-1
   29ce0:	00000106 	br	29ce8 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   29ce4:	e0bff917 	ldw	r2,-28(fp)
}
   29ce8:	e037883a 	mov	sp,fp
   29cec:	dfc00117 	ldw	ra,4(sp)
   29cf0:	df000017 	ldw	fp,0(sp)
   29cf4:	dec00204 	addi	sp,sp,8
   29cf8:	f800283a 	ret

00029cfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   29cfc:	defffc04 	addi	sp,sp,-16
   29d00:	dfc00315 	stw	ra,12(sp)
   29d04:	df000215 	stw	fp,8(sp)
   29d08:	dc000115 	stw	r16,4(sp)
   29d0c:	df000204 	addi	fp,sp,8
   29d10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   29d14:	e0bffe17 	ldw	r2,-8(fp)
   29d18:	108000d0 	cmplti	r2,r2,3
   29d1c:	1000111e 	bne	r2,zero,29d64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   29d20:	04020034 	movhi	r16,2048
   29d24:	84035a04 	addi	r16,r16,3432
   29d28:	e0bffe17 	ldw	r2,-8(fp)
   29d2c:	1009883a 	mov	r4,r2
   29d30:	01400304 	movi	r5,12
   29d34:	00225e40 	call	225e4 <__mulsi3>
   29d38:	8085883a 	add	r2,r16,r2
   29d3c:	10800204 	addi	r2,r2,8
   29d40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   29d44:	04020034 	movhi	r16,2048
   29d48:	84035a04 	addi	r16,r16,3432
   29d4c:	e0bffe17 	ldw	r2,-8(fp)
   29d50:	1009883a 	mov	r4,r2
   29d54:	01400304 	movi	r5,12
   29d58:	00225e40 	call	225e4 <__mulsi3>
   29d5c:	8085883a 	add	r2,r16,r2
   29d60:	10000015 	stw	zero,0(r2)
  }
}
   29d64:	e6ffff04 	addi	sp,fp,-4
   29d68:	dfc00217 	ldw	ra,8(sp)
   29d6c:	df000117 	ldw	fp,4(sp)
   29d70:	dc000017 	ldw	r16,0(sp)
   29d74:	dec00304 	addi	sp,sp,12
   29d78:	f800283a 	ret

00029d7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   29d7c:	deffff04 	addi	sp,sp,-4
   29d80:	df000015 	stw	fp,0(sp)
   29d84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   29d88:	000170fa 	wrctl	ienable,zero
}
   29d8c:	e037883a 	mov	sp,fp
   29d90:	df000017 	ldw	fp,0(sp)
   29d94:	dec00104 	addi	sp,sp,4
   29d98:	f800283a 	ret

00029d9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   29d9c:	defffb04 	addi	sp,sp,-20
   29da0:	dfc00415 	stw	ra,16(sp)
   29da4:	df000315 	stw	fp,12(sp)
   29da8:	df000304 	addi	fp,sp,12
   29dac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   29db0:	00820034 	movhi	r2,2048
   29db4:	1083d104 	addi	r2,r2,3908
   29db8:	10800017 	ldw	r2,0(r2)
   29dbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   29dc0:	00003106 	br	29e88 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   29dc4:	e0bffd17 	ldw	r2,-12(fp)
   29dc8:	10800217 	ldw	r2,8(r2)
   29dcc:	1009883a 	mov	r4,r2
   29dd0:	00236bc0 	call	236bc <strlen>
   29dd4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   29dd8:	e0bffd17 	ldw	r2,-12(fp)
   29ddc:	10c00217 	ldw	r3,8(r2)
   29de0:	e0bffe17 	ldw	r2,-8(fp)
   29de4:	10bfffc4 	addi	r2,r2,-1
   29de8:	1885883a 	add	r2,r3,r2
   29dec:	10800003 	ldbu	r2,0(r2)
   29df0:	10803fcc 	andi	r2,r2,255
   29df4:	1080201c 	xori	r2,r2,128
   29df8:	10bfe004 	addi	r2,r2,-128
   29dfc:	10800bd8 	cmpnei	r2,r2,47
   29e00:	1000031e 	bne	r2,zero,29e10 <alt_find_file+0x74>
    {
      len -= 1;
   29e04:	e0bffe17 	ldw	r2,-8(fp)
   29e08:	10bfffc4 	addi	r2,r2,-1
   29e0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   29e10:	e0bffe17 	ldw	r2,-8(fp)
   29e14:	e0ffff17 	ldw	r3,-4(fp)
   29e18:	1885883a 	add	r2,r3,r2
   29e1c:	10800003 	ldbu	r2,0(r2)
   29e20:	10803fcc 	andi	r2,r2,255
   29e24:	1080201c 	xori	r2,r2,128
   29e28:	10bfe004 	addi	r2,r2,-128
   29e2c:	10800be0 	cmpeqi	r2,r2,47
   29e30:	1000081e 	bne	r2,zero,29e54 <alt_find_file+0xb8>
   29e34:	e0bffe17 	ldw	r2,-8(fp)
   29e38:	e0ffff17 	ldw	r3,-4(fp)
   29e3c:	1885883a 	add	r2,r3,r2
   29e40:	10800003 	ldbu	r2,0(r2)
   29e44:	10803fcc 	andi	r2,r2,255
   29e48:	1080201c 	xori	r2,r2,128
   29e4c:	10bfe004 	addi	r2,r2,-128
   29e50:	10000a1e 	bne	r2,zero,29e7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   29e54:	e0bffd17 	ldw	r2,-12(fp)
   29e58:	10c00217 	ldw	r3,8(r2)
   29e5c:	e0bffe17 	ldw	r2,-8(fp)
   29e60:	1809883a 	mov	r4,r3
   29e64:	e17fff17 	ldw	r5,-4(fp)
   29e68:	100d883a 	mov	r6,r2
   29e6c:	0029fb80 	call	29fb8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   29e70:	1000021e 	bne	r2,zero,29e7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   29e74:	e0bffd17 	ldw	r2,-12(fp)
   29e78:	00000806 	br	29e9c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   29e7c:	e0bffd17 	ldw	r2,-12(fp)
   29e80:	10800017 	ldw	r2,0(r2)
   29e84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   29e88:	e0fffd17 	ldw	r3,-12(fp)
   29e8c:	00820034 	movhi	r2,2048
   29e90:	1083d104 	addi	r2,r2,3908
   29e94:	18bfcb1e 	bne	r3,r2,29dc4 <__alt_data_end+0xf4029dc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   29e98:	0005883a 	mov	r2,zero
}
   29e9c:	e037883a 	mov	sp,fp
   29ea0:	dfc00117 	ldw	ra,4(sp)
   29ea4:	df000017 	ldw	fp,0(sp)
   29ea8:	dec00204 	addi	sp,sp,8
   29eac:	f800283a 	ret

00029eb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   29eb0:	defffa04 	addi	sp,sp,-24
   29eb4:	dfc00515 	stw	ra,20(sp)
   29eb8:	df000415 	stw	fp,16(sp)
   29ebc:	dc000315 	stw	r16,12(sp)
   29ec0:	df000404 	addi	fp,sp,16
   29ec4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   29ec8:	00bffa04 	movi	r2,-24
   29ecc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   29ed0:	e03ffc15 	stw	zero,-16(fp)
   29ed4:	00002106 	br	29f5c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   29ed8:	04020034 	movhi	r16,2048
   29edc:	84035a04 	addi	r16,r16,3432
   29ee0:	e0bffc17 	ldw	r2,-16(fp)
   29ee4:	1009883a 	mov	r4,r2
   29ee8:	01400304 	movi	r5,12
   29eec:	00225e40 	call	225e4 <__mulsi3>
   29ef0:	8085883a 	add	r2,r16,r2
   29ef4:	10800017 	ldw	r2,0(r2)
   29ef8:	1000151e 	bne	r2,zero,29f50 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   29efc:	04020034 	movhi	r16,2048
   29f00:	84035a04 	addi	r16,r16,3432
   29f04:	e0bffc17 	ldw	r2,-16(fp)
   29f08:	1009883a 	mov	r4,r2
   29f0c:	01400304 	movi	r5,12
   29f10:	00225e40 	call	225e4 <__mulsi3>
   29f14:	8085883a 	add	r2,r16,r2
   29f18:	e0fffe17 	ldw	r3,-8(fp)
   29f1c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   29f20:	00820034 	movhi	r2,2048
   29f24:	1083d504 	addi	r2,r2,3924
   29f28:	10c00017 	ldw	r3,0(r2)
   29f2c:	e0bffc17 	ldw	r2,-16(fp)
   29f30:	1880040e 	bge	r3,r2,29f44 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   29f34:	00820034 	movhi	r2,2048
   29f38:	1083d504 	addi	r2,r2,3924
   29f3c:	e0fffc17 	ldw	r3,-16(fp)
   29f40:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   29f44:	e0bffc17 	ldw	r2,-16(fp)
   29f48:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   29f4c:	00000606 	br	29f68 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   29f50:	e0bffc17 	ldw	r2,-16(fp)
   29f54:	10800044 	addi	r2,r2,1
   29f58:	e0bffc15 	stw	r2,-16(fp)
   29f5c:	e0bffc17 	ldw	r2,-16(fp)
   29f60:	10800810 	cmplti	r2,r2,32
   29f64:	103fdc1e 	bne	r2,zero,29ed8 <__alt_data_end+0xf4029ed8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   29f68:	e0bffd17 	ldw	r2,-12(fp)
}
   29f6c:	e6ffff04 	addi	sp,fp,-4
   29f70:	dfc00217 	ldw	ra,8(sp)
   29f74:	df000117 	ldw	fp,4(sp)
   29f78:	dc000017 	ldw	r16,0(sp)
   29f7c:	dec00304 	addi	sp,sp,12
   29f80:	f800283a 	ret

00029f84 <atexit>:
   29f84:	200b883a 	mov	r5,r4
   29f88:	000d883a 	mov	r6,zero
   29f8c:	0009883a 	mov	r4,zero
   29f90:	000f883a 	mov	r7,zero
   29f94:	0029fe81 	jmpi	29fe8 <__register_exitproc>

00029f98 <exit>:
   29f98:	defffe04 	addi	sp,sp,-8
   29f9c:	000b883a 	mov	r5,zero
   29fa0:	dc000015 	stw	r16,0(sp)
   29fa4:	dfc00115 	stw	ra,4(sp)
   29fa8:	2021883a 	mov	r16,r4
   29fac:	002a12c0 	call	2a12c <__call_exitprocs>
   29fb0:	8009883a 	mov	r4,r16
   29fb4:	002435c0 	call	2435c <_exit>

00029fb8 <memcmp>:
   29fb8:	218d883a 	add	r6,r4,r6
   29fbc:	21800826 	beq	r4,r6,29fe0 <memcmp+0x28>
   29fc0:	20800003 	ldbu	r2,0(r4)
   29fc4:	28c00003 	ldbu	r3,0(r5)
   29fc8:	10c00226 	beq	r2,r3,29fd4 <memcmp+0x1c>
   29fcc:	10c5c83a 	sub	r2,r2,r3
   29fd0:	f800283a 	ret
   29fd4:	21000044 	addi	r4,r4,1
   29fd8:	29400044 	addi	r5,r5,1
   29fdc:	003ff706 	br	29fbc <__alt_data_end+0xf4029fbc>
   29fe0:	0005883a 	mov	r2,zero
   29fe4:	f800283a 	ret

00029fe8 <__register_exitproc>:
   29fe8:	00820034 	movhi	r2,2048
   29fec:	defff904 	addi	sp,sp,-28
   29ff0:	1083ce04 	addi	r2,r2,3896
   29ff4:	dd400515 	stw	r21,20(sp)
   29ff8:	15400017 	ldw	r21,0(r2)
   29ffc:	dc000015 	stw	r16,0(sp)
   2a000:	dd000415 	stw	r20,16(sp)
   2a004:	ac000c17 	ldw	r16,48(r21)
   2a008:	dcc00315 	stw	r19,12(sp)
   2a00c:	dc800215 	stw	r18,8(sp)
   2a010:	dc400115 	stw	r17,4(sp)
   2a014:	dfc00615 	stw	ra,24(sp)
   2a018:	2025883a 	mov	r18,r4
   2a01c:	2823883a 	mov	r17,r5
   2a020:	3029883a 	mov	r20,r6
   2a024:	3827883a 	mov	r19,r7
   2a028:	8000021e 	bne	r16,zero,2a034 <__register_exitproc+0x4c>
   2a02c:	ac000d04 	addi	r16,r21,52
   2a030:	ac000c15 	stw	r16,48(r21)
   2a034:	80800117 	ldw	r2,4(r16)
   2a038:	00c007c4 	movi	r3,31
   2a03c:	18800d0e 	bge	r3,r2,2a074 <__register_exitproc+0x8c>
   2a040:	008000b4 	movhi	r2,2
   2a044:	108ad104 	addi	r2,r2,11076
   2a048:	1000021e 	bne	r2,zero,2a054 <__register_exitproc+0x6c>
   2a04c:	00bfffc4 	movi	r2,-1
   2a050:	00002d06 	br	2a108 <__register_exitproc+0x120>
   2a054:	01002304 	movi	r4,140
   2a058:	0022b440 	call	22b44 <malloc>
   2a05c:	1021883a 	mov	r16,r2
   2a060:	103ffa26 	beq	r2,zero,2a04c <__alt_data_end+0xf402a04c>
   2a064:	10000115 	stw	zero,4(r2)
   2a068:	a8800c17 	ldw	r2,48(r21)
   2a06c:	80800015 	stw	r2,0(r16)
   2a070:	ac000c15 	stw	r16,48(r21)
   2a074:	90001b26 	beq	r18,zero,2a0e4 <__register_exitproc+0xfc>
   2a078:	80802217 	ldw	r2,136(r16)
   2a07c:	1000091e 	bne	r2,zero,2a0a4 <__register_exitproc+0xbc>
   2a080:	008000b4 	movhi	r2,2
   2a084:	108ad104 	addi	r2,r2,11076
   2a088:	103ff026 	beq	r2,zero,2a04c <__alt_data_end+0xf402a04c>
   2a08c:	01004204 	movi	r4,264
   2a090:	0022b440 	call	22b44 <malloc>
   2a094:	103fed26 	beq	r2,zero,2a04c <__alt_data_end+0xf402a04c>
   2a098:	10004015 	stw	zero,256(r2)
   2a09c:	10004115 	stw	zero,260(r2)
   2a0a0:	80802215 	stw	r2,136(r16)
   2a0a4:	81400117 	ldw	r5,4(r16)
   2a0a8:	01000044 	movi	r4,1
   2a0ac:	2947883a 	add	r3,r5,r5
   2a0b0:	18c7883a 	add	r3,r3,r3
   2a0b4:	10c7883a 	add	r3,r2,r3
   2a0b8:	1d000015 	stw	r20,0(r3)
   2a0bc:	214a983a 	sll	r5,r4,r5
   2a0c0:	11004017 	ldw	r4,256(r2)
   2a0c4:	2148b03a 	or	r4,r4,r5
   2a0c8:	11004015 	stw	r4,256(r2)
   2a0cc:	1cc02015 	stw	r19,128(r3)
   2a0d0:	00c00084 	movi	r3,2
   2a0d4:	90c0031e 	bne	r18,r3,2a0e4 <__register_exitproc+0xfc>
   2a0d8:	10c04117 	ldw	r3,260(r2)
   2a0dc:	194ab03a 	or	r5,r3,r5
   2a0e0:	11404115 	stw	r5,260(r2)
   2a0e4:	80800117 	ldw	r2,4(r16)
   2a0e8:	10c00044 	addi	r3,r2,1
   2a0ec:	10800084 	addi	r2,r2,2
   2a0f0:	1085883a 	add	r2,r2,r2
   2a0f4:	1085883a 	add	r2,r2,r2
   2a0f8:	80c00115 	stw	r3,4(r16)
   2a0fc:	80a1883a 	add	r16,r16,r2
   2a100:	84400015 	stw	r17,0(r16)
   2a104:	0005883a 	mov	r2,zero
   2a108:	dfc00617 	ldw	ra,24(sp)
   2a10c:	dd400517 	ldw	r21,20(sp)
   2a110:	dd000417 	ldw	r20,16(sp)
   2a114:	dcc00317 	ldw	r19,12(sp)
   2a118:	dc800217 	ldw	r18,8(sp)
   2a11c:	dc400117 	ldw	r17,4(sp)
   2a120:	dc000017 	ldw	r16,0(sp)
   2a124:	dec00704 	addi	sp,sp,28
   2a128:	f800283a 	ret

0002a12c <__call_exitprocs>:
   2a12c:	00820034 	movhi	r2,2048
   2a130:	1083ce04 	addi	r2,r2,3896
   2a134:	10800017 	ldw	r2,0(r2)
   2a138:	defff304 	addi	sp,sp,-52
   2a13c:	ddc00a15 	stw	r23,40(sp)
   2a140:	d8800015 	stw	r2,0(sp)
   2a144:	05c000b4 	movhi	r23,2
   2a148:	10800c04 	addi	r2,r2,48
   2a14c:	dc800515 	stw	r18,20(sp)
   2a150:	dfc00c15 	stw	ra,48(sp)
   2a154:	df000b15 	stw	fp,44(sp)
   2a158:	dd800915 	stw	r22,36(sp)
   2a15c:	dd400815 	stw	r21,32(sp)
   2a160:	dd000715 	stw	r20,28(sp)
   2a164:	dcc00615 	stw	r19,24(sp)
   2a168:	dc400415 	stw	r17,16(sp)
   2a16c:	dc000315 	stw	r16,12(sp)
   2a170:	d9000115 	stw	r4,4(sp)
   2a174:	2825883a 	mov	r18,r5
   2a178:	d8800215 	stw	r2,8(sp)
   2a17c:	bdcad604 	addi	r23,r23,11096
   2a180:	d8800017 	ldw	r2,0(sp)
   2a184:	dc400217 	ldw	r17,8(sp)
   2a188:	14c00c17 	ldw	r19,48(r2)
   2a18c:	98004226 	beq	r19,zero,2a298 <__call_exitprocs+0x16c>
   2a190:	9c000117 	ldw	r16,4(r19)
   2a194:	00900034 	movhi	r2,16384
   2a198:	10bfffc4 	addi	r2,r2,-1
   2a19c:	9d002217 	ldw	r20,136(r19)
   2a1a0:	857fffc4 	addi	r21,r16,-1
   2a1a4:	80a1883a 	add	r16,r16,r2
   2a1a8:	8421883a 	add	r16,r16,r16
   2a1ac:	8421883a 	add	r16,r16,r16
   2a1b0:	a42d883a 	add	r22,r20,r16
   2a1b4:	84000204 	addi	r16,r16,8
   2a1b8:	9c21883a 	add	r16,r19,r16
   2a1bc:	a8002616 	blt	r21,zero,2a258 <__call_exitprocs+0x12c>
   2a1c0:	90000326 	beq	r18,zero,2a1d0 <__call_exitprocs+0xa4>
   2a1c4:	a0002026 	beq	r20,zero,2a248 <__call_exitprocs+0x11c>
   2a1c8:	b1002017 	ldw	r4,128(r22)
   2a1cc:	24801e1e 	bne	r4,r18,2a248 <__call_exitprocs+0x11c>
   2a1d0:	99000117 	ldw	r4,4(r19)
   2a1d4:	82000017 	ldw	r8,0(r16)
   2a1d8:	213fffc4 	addi	r4,r4,-1
   2a1dc:	a900021e 	bne	r21,r4,2a1e8 <__call_exitprocs+0xbc>
   2a1e0:	9d400115 	stw	r21,4(r19)
   2a1e4:	00000106 	br	2a1ec <__call_exitprocs+0xc0>
   2a1e8:	80000015 	stw	zero,0(r16)
   2a1ec:	40001626 	beq	r8,zero,2a248 <__call_exitprocs+0x11c>
   2a1f0:	9f000117 	ldw	fp,4(r19)
   2a1f4:	a0000526 	beq	r20,zero,2a20c <__call_exitprocs+0xe0>
   2a1f8:	00800044 	movi	r2,1
   2a1fc:	1552983a 	sll	r9,r2,r21
   2a200:	a1404017 	ldw	r5,256(r20)
   2a204:	494a703a 	and	r5,r9,r5
   2a208:	2800021e 	bne	r5,zero,2a214 <__call_exitprocs+0xe8>
   2a20c:	403ee83a 	callr	r8
   2a210:	00000906 	br	2a238 <__call_exitprocs+0x10c>
   2a214:	a1004117 	ldw	r4,260(r20)
   2a218:	4908703a 	and	r4,r9,r4
   2a21c:	2000041e 	bne	r4,zero,2a230 <__call_exitprocs+0x104>
   2a220:	d9000117 	ldw	r4,4(sp)
   2a224:	b1400017 	ldw	r5,0(r22)
   2a228:	403ee83a 	callr	r8
   2a22c:	00000206 	br	2a238 <__call_exitprocs+0x10c>
   2a230:	b1000017 	ldw	r4,0(r22)
   2a234:	403ee83a 	callr	r8
   2a238:	99000117 	ldw	r4,4(r19)
   2a23c:	e13fd01e 	bne	fp,r4,2a180 <__alt_data_end+0xf402a180>
   2a240:	89000017 	ldw	r4,0(r17)
   2a244:	24ffce1e 	bne	r4,r19,2a180 <__alt_data_end+0xf402a180>
   2a248:	ad7fffc4 	addi	r21,r21,-1
   2a24c:	b5bfff04 	addi	r22,r22,-4
   2a250:	843fff04 	addi	r16,r16,-4
   2a254:	003fd906 	br	2a1bc <__alt_data_end+0xf402a1bc>
   2a258:	b8000f26 	beq	r23,zero,2a298 <__call_exitprocs+0x16c>
   2a25c:	99000117 	ldw	r4,4(r19)
   2a260:	20000a1e 	bne	r4,zero,2a28c <__call_exitprocs+0x160>
   2a264:	99000017 	ldw	r4,0(r19)
   2a268:	20000826 	beq	r4,zero,2a28c <__call_exitprocs+0x160>
   2a26c:	89000015 	stw	r4,0(r17)
   2a270:	a0000226 	beq	r20,zero,2a27c <__call_exitprocs+0x150>
   2a274:	a009883a 	mov	r4,r20
   2a278:	0022b580 	call	22b58 <free>
   2a27c:	9809883a 	mov	r4,r19
   2a280:	0022b580 	call	22b58 <free>
   2a284:	8cc00017 	ldw	r19,0(r17)
   2a288:	003fc006 	br	2a18c <__alt_data_end+0xf402a18c>
   2a28c:	9823883a 	mov	r17,r19
   2a290:	9cc00017 	ldw	r19,0(r19)
   2a294:	003fbd06 	br	2a18c <__alt_data_end+0xf402a18c>
   2a298:	dfc00c17 	ldw	ra,48(sp)
   2a29c:	df000b17 	ldw	fp,44(sp)
   2a2a0:	ddc00a17 	ldw	r23,40(sp)
   2a2a4:	dd800917 	ldw	r22,36(sp)
   2a2a8:	dd400817 	ldw	r21,32(sp)
   2a2ac:	dd000717 	ldw	r20,28(sp)
   2a2b0:	dcc00617 	ldw	r19,24(sp)
   2a2b4:	dc800517 	ldw	r18,20(sp)
   2a2b8:	dc400417 	ldw	r17,16(sp)
   2a2bc:	dc000317 	ldw	r16,12(sp)
   2a2c0:	dec00d04 	addi	sp,sp,52
   2a2c4:	f800283a 	ret
   2a2c8:	0201ffff 	0x201ffff
   2a2cc:	883a0000 	call	883a000 <_gp+0x831118>
   2a2d0:	010d0bff 	0x10d0bff
   2a2d4:	01010002 	0x1010002
	...
   2a2e0:	010d0bff 	0x10d0bff
   2a2e4:	01010004 	movi	r4,1024
   2a2e8:	00000100 	call	10 <__alt_mem_onchip_memory2_0-0x1fff0>
   2a2ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2a2f0:	01110bff 	0x1110bff
   2a2f4:	01010004 	movi	r4,1024
   2a2f8:	7f000105 	stb	fp,4(r15)
   2a2fc:	007d0000 	call	7d000 <__flash_rwdata_start+0x52750>
	...
